
MyStm32f4xx_drivers_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b58  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d00  08000d00  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d00  08000d00  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d00  08000d00  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d00  08000d00  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d00  08000d00  00010d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d04  08000d04  00010d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          000000c4  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002197  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007f8  00000000  00000000  000221f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  000229f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  00022bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003030  00000000  00000000  00022d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026ba  00000000  00000000  00025d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c007  00000000  00000000  00028402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00034409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005dc  00000000  00000000  0003445c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ce8 	.word	0x08000ce8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000030 	.word	0x20000030
 80001e4:	08000ce8 	.word	0x08000ce8

080001e8 <USART2_Init>:
DMA_Handle_t   pDMAHandle;



void USART2_Init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	static USART_Handle_t usart2_handle;

	usart2_handle.pUSARTx = USART2;
 80001ec:	4b1b      	ldr	r3, [pc, #108]	; (800025c <USART2_Init+0x74>)
 80001ee:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <USART2_Init+0x78>)
 80001f0:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.Baud = USART_STD_BAUD_115200;
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <USART2_Init+0x74>)
 80001f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80001f8:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001fa:	4b18      	ldr	r3, [pc, #96]	; (800025c <USART2_Init+0x74>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	619a      	str	r2, [r3, #24]
	usart2_handle.USART_Config.Mode = USART_MODE_TXRX;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <USART2_Init+0x74>)
 8000202:	2202      	movs	r2, #2
 8000204:	605a      	str	r2, [r3, #4]
	usart2_handle.USART_Config.NoOfStopBits = USART_STOPBITS_1;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <USART2_Init+0x74>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
	usart2_handle.USART_Config.WordLength = USART_WORDLEN_8BITS;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <USART2_Init+0x74>)
 800020e:	2200      	movs	r2, #0
 8000210:	611a      	str	r2, [r3, #16]
	usart2_handle.USART_Config.ParityControl = USART_PARITY_DISABLE;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <USART2_Init+0x74>)
 8000214:	2200      	movs	r2, #0
 8000216:	615a      	str	r2, [r3, #20]
	USART_Init(&usart2_handle);
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <USART2_Init+0x74>)
 800021a:	f000 fc6f 	bl	8000afc <USART_Init>


	usart2_handle.phdma.pDMAStream = DMA1_Stream6;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <USART2_Init+0x74>)
 8000220:	4a10      	ldr	r2, [pc, #64]	; (8000264 <USART2_Init+0x7c>)
 8000222:	641a      	str	r2, [r3, #64]	; 0x40
	usart2_handle.phdma.pDMAConfig.Channel = DMA_CHANNEL_4;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <USART2_Init+0x74>)
 8000226:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022a:	621a      	str	r2, [r3, #32]
	usart2_handle.phdma.pDMAConfig.Direction = DMA_MEMTOPER;
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <USART2_Init+0x74>)
 800022e:	2240      	movs	r2, #64	; 0x40
 8000230:	625a      	str	r2, [r3, #36]	; 0x24
	usart2_handle.phdma.pDMAConfig.PeriphInc = DMA_PINC_DIS;
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <USART2_Init+0x74>)
 8000234:	2200      	movs	r2, #0
 8000236:	629a      	str	r2, [r3, #40]	; 0x28
	usart2_handle.phdma.pDMAConfig.MemInc = DMA_MINC_EN;
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <USART2_Init+0x74>)
 800023a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800023e:	62da      	str	r2, [r3, #44]	; 0x2c
	usart2_handle.phdma.pDMAConfig.Mode = DMA_NORMAL;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <USART2_Init+0x74>)
 8000242:	2200      	movs	r2, #0
 8000244:	631a      	str	r2, [r3, #48]	; 0x30
	usart2_handle.phdma.pDMAConfig.Priority = DMA_PRIO_LOW;
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <USART2_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	635a      	str	r2, [r3, #52]	; 0x34
	usart2_handle.phdma.pDMAConfig.FIFOMode = DMA_FIFO_DIS;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <USART2_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	639a      	str	r2, [r3, #56]	; 0x38

	DMA_Init(&usart2_handle.phdma);
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <USART2_Init+0x80>)
 8000254:	f000 f8ba 	bl	80003cc <DMA_Init>


}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000048 	.word	0x20000048
 8000260:	40004400 	.word	0x40004400
 8000264:	400260a0 	.word	0x400260a0
 8000268:	20000064 	.word	0x20000064

0800026c <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <USART2_GPIOInit+0x40>)
 8000274:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000276:	2302      	movs	r3, #2
 8000278:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800027e:	2301      	movs	r3, #1
 8000280:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000286:	2307      	movs	r3, #7
 8000288:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800028a:	2302      	movs	r3, #2
 800028c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f955 	bl	8000540 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000296:	2303      	movs	r3, #3
 8000298:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f94f 	bl	8000540 <GPIO_Init>


}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40020000 	.word	0x40020000

080002b0 <uart_transmit_dma>:
//	usart2_handle.phdma = dmah;
}



void uart_transmit_dma(USART_Handle_t *phuart,uint8_t *pData,uint8_t Size){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	4613      	mov	r3, r2
 80002bc:	71fb      	strb	r3, [r7, #7]

	phuart->phdma.pDMAStream->M0AR = (uint32_t)pData;
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	60da      	str	r2, [r3, #12]
	phuart->phdma.pDMAStream->PAR = (uint32_t)&phuart->pUSARTx->DR;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	1d1a      	adds	r2, r3, #4
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d0:	609a      	str	r2, [r3, #8]
	phuart->phdma.pDMAStream->NDTR = Size;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d6:	79fa      	ldrb	r2, [r7, #7]
 80002d8:	605a      	str	r2, [r3, #4]
	phuart->phdma.pDMAStream->CR |= (1 << DMA_SCR_EN);
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e4:	f042 0201 	orr.w	r2, r2, #1
 80002e8:	601a      	str	r2, [r3, #0]
	phuart->pUSARTx->CR3 |= (1 << USART_CR3_DMAT);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	695a      	ldr	r2, [r3, #20]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80002f8:	615a      	str	r2, [r3, #20]

}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
	...

08000308 <delay>:




void delay(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	e002      	b.n	800031a <delay+0x12>
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <delay+0x28>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d9f8      	bls.n	8000314 <delay+0xc>
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	0003d08f 	.word	0x0003d08f

08000334 <main>:

int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	static USART_Handle_t usart2_handle;

	USART2_GPIOInit();
 8000338:	f7ff ff98 	bl	800026c <USART2_GPIOInit>
    USART2_Init();
 800033c:	f7ff ff54 	bl	80001e8 <USART2_Init>
    USART_PeripheralControl(USART2,ENABLE);
 8000340:	2101      	movs	r1, #1
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <main+0x34>)
 8000344:	f000 fc57 	bl	8000bf6 <USART_PeripheralControl>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000348:	bf00      	nop
 800034a:	2100      	movs	r1, #0
 800034c:	4807      	ldr	r0, [pc, #28]	; (800036c <main+0x38>)
 800034e:	f000 fa93 	bl	8000878 <GPIO_ReadFromInputPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f8      	beq.n	800034a <main+0x16>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000358:	f7ff ffd6 	bl	8000308 <delay>

		uart_transmit_dma(&usart2_handle, (uint8_t *)msg, sizeof(msg));
 800035c:	2212      	movs	r2, #18
 800035e:	4904      	ldr	r1, [pc, #16]	; (8000370 <main+0x3c>)
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <main+0x40>)
 8000362:	f7ff ffa5 	bl	80002b0 <uart_transmit_dma>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000366:	e7ef      	b.n	8000348 <main+0x14>
 8000368:	40004400 	.word	0x40004400
 800036c:	40020000 	.word	0x40020000
 8000370:	20000000 	.word	0x20000000
 8000374:	2000009c 	.word	0x2000009c

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 fc7b 	bl	8000ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ffc3 	bl	8000334 <main>

080003ae <LoopForever>:

LoopForever:
    b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80003bc:	08000d08 	.word	0x08000d08
  ldr r2, =_sbss
 80003c0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80003c4:	200000f0 	.word	0x200000f0

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <DMA_Init>:





void DMA_Init(DMA_Handle_t *pDMAHandle){
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

	uint32_t tmp=0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]

	DMA1_PCLK_EN();
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <DMA_Init+0x64>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a14      	ldr	r2, [pc, #80]	; (8000430 <DMA_Init+0x64>)
 80003de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30

	tmp = pDMAHandle->pDMAStream->CR;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	60fb      	str	r3, [r7, #12]


	tmp &= ((uint32_t) ~ (DMA_SCR_CHSEL | DMA_SCR_MBURST | DMA_SCR_PBURST |
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 031f 	bic.w	r3, r3, #31
 80003f2:	60fb      	str	r3, [r7, #12]
						  DMA_SCR_PL    | DMA_SCR_MSIZE  | DMA_SCR_PSIZE  |
						  DMA_SCR_MINC  | DMA_SCR_PINC   | DMA_SCR_CIRC   |
						  DMA_SCR_DIR 	| DMA_SCR_CT	 | DMA_SCR_DBM));

	tmp |= pDMAHandle->pDMAConfig.Channel   | pDMAHandle->pDMAConfig.Direction |
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	685a      	ldr	r2, [r3, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	431a      	orrs	r2, r3
		   pDMAHandle->pDMAConfig.PeriphInc | pDMAHandle->pDMAConfig.MemInc  |
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68db      	ldr	r3, [r3, #12]
	tmp |= pDMAHandle->pDMAConfig.Channel   | pDMAHandle->pDMAConfig.Direction |
 8000402:	431a      	orrs	r2, r3
		   pDMAHandle->pDMAConfig.PeriphInc | pDMAHandle->pDMAConfig.MemInc  |
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	431a      	orrs	r2, r3
		   pDMAHandle->pDMAConfig.Mode 	 	| pDMAHandle->pDMAConfig.Priority ;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	695b      	ldr	r3, [r3, #20]
		   pDMAHandle->pDMAConfig.PeriphInc | pDMAHandle->pDMAConfig.MemInc  |
 800040e:	431a      	orrs	r2, r3
		   pDMAHandle->pDMAConfig.Mode 	 	| pDMAHandle->pDMAConfig.Priority ;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4313      	orrs	r3, r2
	tmp |= pDMAHandle->pDMAConfig.Channel   | pDMAHandle->pDMAConfig.Direction |
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4313      	orrs	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

	pDMAHandle->pDMAStream->CR = (uint32_t)tmp;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	601a      	str	r2, [r3, #0]

}
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800

08000434 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d161      	bne.n	800050a <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a33      	ldr	r2, [pc, #204]	; (8000518 <GPIO_PeriClockControl+0xe4>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800044e:	4b33      	ldr	r3, [pc, #204]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a32      	ldr	r2, [pc, #200]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800045a:	e056      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a30      	ldr	r2, [pc, #192]	; (8000520 <GPIO_PeriClockControl+0xec>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000464:	4b2d      	ldr	r3, [pc, #180]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a2c      	ldr	r2, [pc, #176]	; (800051c <GPIO_PeriClockControl+0xe8>)
 800046a:	f043 0302 	orr.w	r3, r3, #2
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e04b      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a2b      	ldr	r2, [pc, #172]	; (8000524 <GPIO_PeriClockControl+0xf0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <GPIO_PeriClockControl+0xe8>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a27      	ldr	r2, [pc, #156]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e040      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a27      	ldr	r2, [pc, #156]	; (8000528 <GPIO_PeriClockControl+0xf4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000490:	4b22      	ldr	r3, [pc, #136]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a21      	ldr	r2, [pc, #132]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e035      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a22      	ldr	r2, [pc, #136]	; (800052c <GPIO_PeriClockControl+0xf8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a1c      	ldr	r2, [pc, #112]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004ac:	f043 0310 	orr.w	r3, r3, #16
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	e02a      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <GPIO_PeriClockControl+0xfc>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a16      	ldr	r2, [pc, #88]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	e01f      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a19      	ldr	r2, [pc, #100]	; (8000534 <GPIO_PeriClockControl+0x100>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a11      	ldr	r2, [pc, #68]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004de:	e014      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <GPIO_PeriClockControl+0x104>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <GPIO_PeriClockControl+0xe8>)
 80004ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f4:	e009      	b.n	800050a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <GPIO_PeriClockControl+0x108>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d105      	bne.n	800050a <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a06      	ldr	r2, [pc, #24]	; (800051c <GPIO_PeriClockControl+0xe8>)
 8000504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40020000 	.word	0x40020000
 800051c:	40023800 	.word	0x40023800
 8000520:	40020400 	.word	0x40020400
 8000524:	40020800 	.word	0x40020800
 8000528:	40020c00 	.word	0x40020c00
 800052c:	40021000 	.word	0x40021000
 8000530:	40021400 	.word	0x40021400
 8000534:	40021800 	.word	0x40021800
 8000538:	40021c00 	.word	0x40021c00
 800053c:	40022000 	.word	0x40022000

08000540 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2101      	movs	r1, #1
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff6e 	bl	8000434 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d820      	bhi.n	80005a2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	e0cb      	b.n	800073a <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d117      	bne.n	80005da <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <GPIO_Init+0x198>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a47      	ldr	r2, [pc, #284]	; (80006d8 <GPIO_Init+0x198>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b45      	ldr	r3, [pc, #276]	; (80006d8 <GPIO_Init+0x198>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a41      	ldr	r2, [pc, #260]	; (80006d8 <GPIO_Init+0x198>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	6093      	str	r3, [r2, #8]
 80005d8:	e035      	b.n	8000646 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	2b05      	cmp	r3, #5
 80005e0:	d117      	bne.n	8000612 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e2:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <GPIO_Init+0x198>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a39      	ldr	r2, [pc, #228]	; (80006d8 <GPIO_Init+0x198>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <GPIO_Init+0x198>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	7912      	ldrb	r2, [r2, #4]
 8000600:	4611      	mov	r1, r2
 8000602:	2201      	movs	r2, #1
 8000604:	408a      	lsls	r2, r1
 8000606:	43d2      	mvns	r2, r2
 8000608:	4611      	mov	r1, r2
 800060a:	4a33      	ldr	r2, [pc, #204]	; (80006d8 <GPIO_Init+0x198>)
 800060c:	400b      	ands	r3, r1
 800060e:	60d3      	str	r3, [r2, #12]
 8000610:	e019      	b.n	8000646 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	2b06      	cmp	r3, #6
 8000618:	d115      	bne.n	8000646 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <GPIO_Init+0x198>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7912      	ldrb	r2, [r2, #4]
 8000622:	4611      	mov	r1, r2
 8000624:	2201      	movs	r2, #1
 8000626:	408a      	lsls	r2, r1
 8000628:	4611      	mov	r1, r2
 800062a:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <GPIO_Init+0x198>)
 800062c:	430b      	orrs	r3, r1
 800062e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <GPIO_Init+0x198>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7912      	ldrb	r2, [r2, #4]
 8000638:	4611      	mov	r1, r2
 800063a:	2201      	movs	r2, #1
 800063c:	408a      	lsls	r2, r1
 800063e:	4611      	mov	r1, r2
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <GPIO_Init+0x198>)
 8000642:	430b      	orrs	r3, r1
 8000644:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	089b      	lsrs	r3, r3, #2
 800064c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <GPIO_Init+0x19c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d04e      	beq.n	8000700 <GPIO_Init+0x1c0>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <GPIO_Init+0x1a0>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d032      	beq.n	80006d2 <GPIO_Init+0x192>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <GPIO_Init+0x1a4>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d02b      	beq.n	80006ce <GPIO_Init+0x18e>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <GPIO_Init+0x1a8>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d024      	beq.n	80006ca <GPIO_Init+0x18a>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <GPIO_Init+0x1ac>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d01d      	beq.n	80006c6 <GPIO_Init+0x186>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <GPIO_Init+0x1b0>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d016      	beq.n	80006c2 <GPIO_Init+0x182>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <GPIO_Init+0x1b4>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d00f      	beq.n	80006be <GPIO_Init+0x17e>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <GPIO_Init+0x1b8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d008      	beq.n	80006ba <GPIO_Init+0x17a>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <GPIO_Init+0x1bc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <GPIO_Init+0x176>
 80006b2:	2308      	movs	r3, #8
 80006b4:	e025      	b.n	8000702 <GPIO_Init+0x1c2>
 80006b6:	2300      	movs	r3, #0
 80006b8:	e023      	b.n	8000702 <GPIO_Init+0x1c2>
 80006ba:	2307      	movs	r3, #7
 80006bc:	e021      	b.n	8000702 <GPIO_Init+0x1c2>
 80006be:	2306      	movs	r3, #6
 80006c0:	e01f      	b.n	8000702 <GPIO_Init+0x1c2>
 80006c2:	2305      	movs	r3, #5
 80006c4:	e01d      	b.n	8000702 <GPIO_Init+0x1c2>
 80006c6:	2304      	movs	r3, #4
 80006c8:	e01b      	b.n	8000702 <GPIO_Init+0x1c2>
 80006ca:	2303      	movs	r3, #3
 80006cc:	e019      	b.n	8000702 <GPIO_Init+0x1c2>
 80006ce:	2302      	movs	r3, #2
 80006d0:	e017      	b.n	8000702 <GPIO_Init+0x1c2>
 80006d2:	2301      	movs	r3, #1
 80006d4:	e015      	b.n	8000702 <GPIO_Init+0x1c2>
 80006d6:	bf00      	nop
 80006d8:	40013c00 	.word	0x40013c00
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40021400 	.word	0x40021400
 80006f4:	40021800 	.word	0x40021800
 80006f8:	40021c00 	.word	0x40021c00
 80006fc:	40022000 	.word	0x40022000
 8000700:	2300      	movs	r3, #0
 8000702:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000704:	4b59      	ldr	r3, [pc, #356]	; (800086c <GPIO_Init+0x32c>)
 8000706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000708:	4a58      	ldr	r2, [pc, #352]	; (800086c <GPIO_Init+0x32c>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000710:	7c7a      	ldrb	r2, [r7, #17]
 8000712:	7cbb      	ldrb	r3, [r7, #18]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	fa02 f103 	lsl.w	r1, r2, r3
 800071a:	4a55      	ldr	r2, [pc, #340]	; (8000870 <GPIO_Init+0x330>)
 800071c:	7cfb      	ldrb	r3, [r7, #19]
 800071e:	3302      	adds	r3, #2
 8000720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000724:	4b53      	ldr	r3, [pc, #332]	; (8000874 <GPIO_Init+0x334>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	7912      	ldrb	r2, [r2, #4]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	4611      	mov	r1, r2
 8000734:	4a4f      	ldr	r2, [pc, #316]	; (8000874 <GPIO_Init+0x334>)
 8000736:	430b      	orrs	r3, r1
 8000738:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	799b      	ldrb	r3, [r3, #6]
 800073e:	461a      	mov	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2103      	movs	r1, #3
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	400a      	ands	r2, r1
 8000768:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	79db      	ldrb	r3, [r3, #7]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2103      	movs	r1, #3
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	400a      	ands	r2, r1
 80007a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68d9      	ldr	r1, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7a1b      	ldrb	r3, [r3, #8]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2301      	movs	r3, #1
 80007d8:	408b      	lsls	r3, r1
 80007da:	43db      	mvns	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	400a      	ands	r2, r1
 80007e4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6859      	ldr	r1, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	795b      	ldrb	r3, [r3, #5]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d131      	bne.n	8000862 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c3a      	ldrb	r2, [r7, #16]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	220f      	movs	r2, #15
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	7c3a      	ldrb	r2, [r7, #16]
 8000830:	4001      	ands	r1, r0
 8000832:	3208      	adds	r2, #8
 8000834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	7c3a      	ldrb	r2, [r7, #16]
 800083e:	3208      	adds	r2, #8
 8000840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a5b      	ldrb	r3, [r3, #9]
 8000848:	461a      	mov	r2, r3
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	7c3a      	ldrb	r2, [r7, #16]
 800085a:	4301      	orrs	r1, r0
 800085c:	3208      	adds	r2, #8
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40013800 	.word	0x40013800
 8000874:	40013c00 	.word	0x40013c00

08000878 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	691a      	ldr	r2, [r3, #16]
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	fa22 f303 	lsr.w	r3, r2, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]

   return value;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[4] = {2,4,8,16};


uint32_t RCC_GetPCLK1Value(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

	uint32_t pclk1=0,SystemClk;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
	uint8_t clksrc = 0,temp,ahbp,apb1p;
 80008ae:	2300      	movs	r3, #0
 80008b0:	70fb      	strb	r3, [r7, #3]

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <RCC_GetPCLK1Value+0xa8>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	70fb      	strb	r3, [r7, #3]

	if(clksrc == 0){
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d102      	bne.n	80008cc <RCC_GetPCLK1Value+0x28>
		SystemClk = 16000000;
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <RCC_GetPCLK1Value+0xac>)
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e00b      	b.n	80008e4 <RCC_GetPCLK1Value+0x40>
	}
	else if(clksrc == 1){
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d102      	bne.n	80008d8 <RCC_GetPCLK1Value+0x34>
		SystemClk = 8000000;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <RCC_GetPCLK1Value+0xb0>)
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e005      	b.n	80008e4 <RCC_GetPCLK1Value+0x40>
	}
	else if(clksrc == 2){
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d102      	bne.n	80008e4 <RCC_GetPCLK1Value+0x40>
		SystemClk = RCC_GetPLLOutputClock();
 80008de:	f000 f891 	bl	8000a04 <RCC_GetPLLOutputClock>
 80008e2:	60f8      	str	r0, [r7, #12]
	}

	//for ahb

	temp = (( RCC->CFGR >> 4) & 0xF);
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <RCC_GetPCLK1Value+0xa8>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	70bb      	strb	r3, [r7, #2]

	if(temp < 8){
 80008f2:	78bb      	ldrb	r3, [r7, #2]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d802      	bhi.n	80008fe <RCC_GetPCLK1Value+0x5a>
		ahbp = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	72fb      	strb	r3, [r7, #11]
 80008fc:	e005      	b.n	800090a <RCC_GetPCLK1Value+0x66>
	}
	else{
		ahbp = AHB_PreScaler[temp - 8];
 80008fe:	78bb      	ldrb	r3, [r7, #2]
 8000900:	3b08      	subs	r3, #8
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <RCC_GetPCLK1Value+0xb4>)
 8000904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000908:	72fb      	strb	r3, [r7, #11]
	}


	//for apb1

	temp = (( RCC->CFGR >> 10 ) & 0x7);
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <RCC_GetPCLK1Value+0xa8>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	0a9b      	lsrs	r3, r3, #10
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	70bb      	strb	r3, [r7, #2]

	if(temp < 4){
 8000918:	78bb      	ldrb	r3, [r7, #2]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d802      	bhi.n	8000924 <RCC_GetPCLK1Value+0x80>

		apb1p = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	72bb      	strb	r3, [r7, #10]
 8000922:	e005      	b.n	8000930 <RCC_GetPCLK1Value+0x8c>
	}
	else{
		apb1p = APB1_PreScaler[temp - 4];
 8000924:	78bb      	ldrb	r3, [r7, #2]
 8000926:	3b04      	subs	r3, #4
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <RCC_GetPCLK1Value+0xb8>)
 800092a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092e:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ( (SystemClk / ahbp) / apb1p);
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	fbb2 f2f3 	udiv	r2, r2, r3
 8000938:	7abb      	ldrb	r3, [r7, #10]
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000940:	687b      	ldr	r3, [r7, #4]

}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	00f42400 	.word	0x00f42400
 8000954:	007a1200 	.word	0x007a1200
 8000958:	20000014 	.word	0x20000014
 800095c:	20000024 	.word	0x20000024

08000960 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <RCC_GetPCLK2Value+0x90>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000978:	7a7b      	ldrb	r3, [r7, #9]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d102      	bne.n	8000984 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <RCC_GetPCLK2Value+0x94>)
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e001      	b.n	8000988 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <RCC_GetPCLK2Value+0x98>)
 8000986:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <RCC_GetPCLK2Value+0x90>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	091b      	lsrs	r3, r3, #4
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b07      	cmp	r3, #7
 8000998:	d802      	bhi.n	80009a0 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	72fb      	strb	r3, [r7, #11]
 800099e:	e005      	b.n	80009ac <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b08      	subs	r3, #8
 80009a4:	4a15      	ldr	r2, [pc, #84]	; (80009fc <RCC_GetPCLK2Value+0x9c>)
 80009a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009aa:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <RCC_GetPCLK2Value+0x90>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	0b5b      	lsrs	r3, r3, #13
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d802      	bhi.n	80009c4 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80009be:	2301      	movs	r3, #1
 80009c0:	72bb      	strb	r3, [r7, #10]
 80009c2:	e005      	b.n	80009d0 <RCC_GetPCLK2Value+0x70>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b04      	subs	r3, #4
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <RCC_GetPCLK2Value+0xa0>)
 80009ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ce:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	603b      	str	r3, [r7, #0]

	return pclk2;
 80009e0:	683b      	ldr	r3, [r7, #0]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	00f42400 	.word	0x00f42400
 80009f8:	007a1200 	.word	0x007a1200
 80009fc:	20000014 	.word	0x20000014
 8000a00:	20000024 	.word	0x20000024

08000a04 <RCC_GetPLLOutputClock>:


uint32_t  RCC_GetPLLOutputClock(){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <USART_SetBaudRate>:





void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
		uint32_t M_part,F_part;

	  uint32_t tempreg=0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]

	  //Get the value of APB bus clock in to the variable PCLKx
	  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <USART_SetBaudRate+0xdc>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d003      	beq.n	8000a32 <USART_SetBaudRate+0x1e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <USART_SetBaudRate+0xe0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d104      	bne.n	8000a3c <USART_SetBaudRate+0x28>
	  {
		   //USART1 and USART6 are hanging on APB2 bus
		   PCLKx = RCC_GetPCLK2Value();
 8000a32:	f7ff ff95 	bl	8000960 <RCC_GetPCLK2Value>
 8000a36:	4603      	mov	r3, r0
 8000a38:	61fb      	str	r3, [r7, #28]
	  {
 8000a3a:	e003      	b.n	8000a44 <USART_SetBaudRate+0x30>
	  }else
	  {
		   PCLKx = RCC_GetPCLK1Value();
 8000a3c:	f7ff ff32 	bl	80008a4 <RCC_GetPCLK1Value>
 8000a40:	4603      	mov	r3, r0
 8000a42:	61fb      	str	r3, [r7, #28]
	  }

	  //Check for OVER8 configuration bit
	  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00b      	beq.n	8000a68 <USART_SetBaudRate+0x54>
	  {
		   //OVER8 = 1 , over sampling by 8
		   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009a      	lsls	r2, r3, #2
 8000a5a:	441a      	add	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	e00a      	b.n	8000a7e <USART_SetBaudRate+0x6a>
	  }else
	  {
		   //over sampling by 16
		   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000a68:	69fa      	ldr	r2, [r7, #28]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	009a      	lsls	r2, r3, #2
 8000a72:	441a      	add	r2, r3
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	61bb      	str	r3, [r7, #24]
	  }

	  //Calculate the Mantissa part
	  M_part = usartdiv/100;
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <USART_SetBaudRate+0xe4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	60fb      	str	r3, [r7, #12]

	  //Place the Mantissa part in appropriate bit position . refer USART_BRR
	  tempreg |= M_part << 4;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	011b      	lsls	r3, r3, #4
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]

	  //Extract the fraction part
	  F_part = (usartdiv - (M_part * 100));
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2264      	movs	r2, #100	; 0x64
 8000a98:	fb02 f303 	mul.w	r3, r2, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	617b      	str	r3, [r7, #20]

	  //Calculate the final fractional
	  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d00a      	beq.n	8000ac4 <USART_SetBaudRate+0xb0>
	   {
		  //OVER8 = 1 , over sampling by 8
		  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	3332      	adds	r3, #50	; 0x32
 8000ab4:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <USART_SetBaudRate+0xe4>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	e009      	b.n	8000ad8 <USART_SetBaudRate+0xc4>

	   }else
	   {
		   //over sampling by 16
		   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	3332      	adds	r3, #50	; 0x32
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <USART_SetBaudRate+0xe4>)
 8000acc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad0:	095b      	lsrs	r3, r3, #5
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	617b      	str	r3, [r7, #20]

	   }

	  //Place the fractional part in appropriate bit position . refer USART_BRR
	  tempreg |= F_part;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]

	  //copy the value of tempreg in to BRR register
	  pUSARTx->BRR = tempreg;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	609a      	str	r2, [r3, #8]
}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40011400 	.word	0x40011400
 8000af8:	51eb851f 	.word	0x51eb851f

08000afc <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f88e 	bl	8000c30 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.Mode == USART_MODE_ONLY_RX)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d104      	bne.n	8000b26 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e010      	b.n	8000b48 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.Mode == USART_MODE_ONLY_TX)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e007      	b.n	8000b48 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.Mode == USART_MODE_TXRX)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d103      	bne.n	8000b48 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f043 030c 	orr.w	r3, r3, #12
 8000b46:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.WordLength << USART_CR1_M ;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	031b      	lsls	r3, r3, #12
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.ParityControl == USART_PARITY_EN_EVEN)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <USART_Init+0x6a>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e00b      	b.n	8000b7e <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.ParityControl == USART_PARITY_EN_ODD )
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d107      	bne.n	8000b7e <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b74:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7c:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.NoOfStopBits << USART_CR2_STOP;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	031b      	lsls	r3, r3, #12
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d104      	bne.n	8000bb4 <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e010      	b.n	8000bd6 <USART_Init+0xda>


	}else if (pUSARTHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d104      	bne.n	8000bc6 <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e007      	b.n	8000bd6 <USART_Init+0xda>

	}else if (pUSARTHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d103      	bne.n	8000bd6 <USART_Init+0xda>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( (1 << USART_CR3_RTSE) | (1 << USART_CR3_CTSE));
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000bd4:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.Baud);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	4619      	mov	r1, r3
 8000be8:	4610      	mov	r0, r2
 8000bea:	f7ff ff13 	bl	8000a14 <USART_SetBaudRate>

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <USART_PeripheralControl>:


/*
 * Other Peripheral Control APIs
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE)
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d106      	bne.n	8000c16 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000c14:	e005      	b.n	8000c22 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60da      	str	r2, [r3, #12]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <USART_PeriClockControl>:


/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d11f      	bne.n	8000c82 <USART_PeriClockControl+0x52>
	{
		if(pUSARTx == USART1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <USART_PeriClockControl+0x60>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d106      	bne.n	8000c58 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <USART_PeriClockControl+0x64>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <USART_PeriClockControl+0x64>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8000c56:	e014      	b.n	8000c82 <USART_PeriClockControl+0x52>
		}else if (pUSARTx == USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <USART_PeriClockControl+0x68>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d106      	bne.n	8000c6e <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <USART_PeriClockControl+0x64>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <USART_PeriClockControl+0x64>)
 8000c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c6c:	e009      	b.n	8000c82 <USART_PeriClockControl+0x52>
		}else if (pUSARTx == USART3)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <USART_PeriClockControl+0x6c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d105      	bne.n	8000c82 <USART_PeriClockControl+0x52>
			USART3_PCLK_EN();
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <USART_PeriClockControl+0x64>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <USART_PeriClockControl+0x64>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	40004800 	.word	0x40004800

08000ca0 <__libc_init_array>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	4d0d      	ldr	r5, [pc, #52]	; (8000cd8 <__libc_init_array+0x38>)
 8000ca4:	4c0d      	ldr	r4, [pc, #52]	; (8000cdc <__libc_init_array+0x3c>)
 8000ca6:	1b64      	subs	r4, r4, r5
 8000ca8:	10a4      	asrs	r4, r4, #2
 8000caa:	2600      	movs	r6, #0
 8000cac:	42a6      	cmp	r6, r4
 8000cae:	d109      	bne.n	8000cc4 <__libc_init_array+0x24>
 8000cb0:	4d0b      	ldr	r5, [pc, #44]	; (8000ce0 <__libc_init_array+0x40>)
 8000cb2:	4c0c      	ldr	r4, [pc, #48]	; (8000ce4 <__libc_init_array+0x44>)
 8000cb4:	f000 f818 	bl	8000ce8 <_init>
 8000cb8:	1b64      	subs	r4, r4, r5
 8000cba:	10a4      	asrs	r4, r4, #2
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	42a6      	cmp	r6, r4
 8000cc0:	d105      	bne.n	8000cce <__libc_init_array+0x2e>
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc8:	4798      	blx	r3
 8000cca:	3601      	adds	r6, #1
 8000ccc:	e7ee      	b.n	8000cac <__libc_init_array+0xc>
 8000cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd2:	4798      	blx	r3
 8000cd4:	3601      	adds	r6, #1
 8000cd6:	e7f2      	b.n	8000cbe <__libc_init_array+0x1e>
 8000cd8:	08000d00 	.word	0x08000d00
 8000cdc:	08000d00 	.word	0x08000d00
 8000ce0:	08000d00 	.word	0x08000d00
 8000ce4:	08000d04 	.word	0x08000d04

08000ce8 <_init>:
 8000ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cea:	bf00      	nop
 8000cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cee:	bc08      	pop	{r3}
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	4770      	bx	lr

08000cf4 <_fini>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	bf00      	nop
 8000cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfa:	bc08      	pop	{r3}
 8000cfc:	469e      	mov	lr, r3
 8000cfe:	4770      	bx	lr
