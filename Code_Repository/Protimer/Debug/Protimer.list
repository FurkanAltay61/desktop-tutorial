
Protimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004508  08004508  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004510  08004510  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08004588  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004588  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c531  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd2  00000000  00000000  0002c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e15  00000000  00000000  0002f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb5d  00000000  00000000  00056235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0c3e  00000000  00000000  00061d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001529d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  00152a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080043a8 	.word	0x080043a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080043a8 	.word	0x080043a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fe38 	bl	800122e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f883 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f91f 	bl	8000804 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80005c6:	f000 f8ed 	bl	80007a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Productive Timer Application\n");
 80005ca:	4838      	ldr	r0, [pc, #224]	; (80006ac <main+0xf8>)
 80005cc:	f002 ff6e 	bl	80034ac <puts>
  printf("============================\n");
 80005d0:	4837      	ldr	r0, [pc, #220]	; (80006b0 <main+0xfc>)
 80005d2:	f002 ff6b 	bl	80034ac <puts>

  protimer_init(&protimer);
 80005d6:	4837      	ldr	r0, [pc, #220]	; (80006b4 <main+0x100>)
 80005d8:	f000 fa89 	bl	8000aee <protimer_init>
	  protimer_user_event_t ue;
	  static uint32_t current_time;
	  static protimer_tick_event_t te;

	  //1. Read Button Pad Status
	  b1 = HAL_GPIO_ReadPin(BUTON1_GPIO_Port,BUTON1_Pin);
 80005dc:	2120      	movs	r1, #32
 80005de:	4836      	ldr	r0, [pc, #216]	; (80006b8 <main+0x104>)
 80005e0:	f001 f914 	bl	800180c <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	71fb      	strb	r3, [r7, #7]
	  b2 = HAL_GPIO_ReadPin(BUTON2_GPIO_Port,BUTON2_Pin);
 80005e8:	2110      	movs	r1, #16
 80005ea:	4833      	ldr	r0, [pc, #204]	; (80006b8 <main+0x104>)
 80005ec:	f001 f90e 	bl	800180c <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	71bb      	strb	r3, [r7, #6]
	  b3 = HAL_GPIO_ReadPin(BUTON3_GPIO_Port,BUTON3_Pin);
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4830      	ldr	r0, [pc, #192]	; (80006bc <main+0x108>)
 80005fa:	f001 f907 	bl	800180c <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	717b      	strb	r3, [r7, #5]

	  btn_pad_value = (b1 << 2) | (b2 << 1) | b3;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	b25a      	sxtb	r2, r3
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	b25b      	sxtb	r3, r3
 800060e:	4313      	orrs	r3, r2
 8000610:	b25a      	sxtb	r2, r3
 8000612:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	713b      	strb	r3, [r7, #4]

	  /* Software button debouncing */
	  btn_pad_value = process_button_pad_value(btn_pad_value);
 800061c:	793b      	ldrb	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f9d0 	bl	80009c4 <process_button_pad_value>
 8000624:	4603      	mov	r3, r0
 8000626:	713b      	strb	r3, [r7, #4]

	  if(btn_pad_value){
 8000628:	793b      	ldrb	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d01b      	beq.n	8000666 <main+0xb2>

		  if(btn_pad_value == BTN_PAD_VALUE_INC_TIME){
 800062e:	793b      	ldrb	r3, [r7, #4]
 8000630:	2b04      	cmp	r3, #4
 8000632:	d102      	bne.n	800063a <main+0x86>
			  ue.super.sig = INC_TIME;
 8000634:	2300      	movs	r3, #0
 8000636:	703b      	strb	r3, [r7, #0]
 8000638:	e010      	b.n	800065c <main+0xa8>
		  }
		  else if(btn_pad_value == BTN_PAD_VALUE_DEC_TIME){
 800063a:	793b      	ldrb	r3, [r7, #4]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d102      	bne.n	8000646 <main+0x92>
			  ue.super.sig = DEC_TIME;
 8000640:	2301      	movs	r3, #1
 8000642:	703b      	strb	r3, [r7, #0]
 8000644:	e00a      	b.n	800065c <main+0xa8>
		  }
		  else if(btn_pad_value == BTN_PAD_VALUE_ABRT){
 8000646:	793b      	ldrb	r3, [r7, #4]
 8000648:	2b06      	cmp	r3, #6
 800064a:	d102      	bne.n	8000652 <main+0x9e>
			  ue.super.sig = ABRT;
 800064c:	2304      	movs	r3, #4
 800064e:	703b      	strb	r3, [r7, #0]
 8000650:	e004      	b.n	800065c <main+0xa8>
		  }
		  else if(btn_pad_value == BTN_PAD_VALUE_SP){
 8000652:	793b      	ldrb	r3, [r7, #4]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d101      	bne.n	800065c <main+0xa8>
			  ue.super.sig = START_PAUSE;
 8000658:	2303      	movs	r3, #3
 800065a:	703b      	strb	r3, [r7, #0]
		  }

		  //3. send it to event dispatcher
		  protimer_event_dispatcher(&protimer,&ue.super); // ue = user event
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4814      	ldr	r0, [pc, #80]	; (80006b4 <main+0x100>)
 8000662:	f000 f97d 	bl	8000960 <protimer_event_dispatcher>



	  //Dispatch the time tick event for every 100ms

	  if(HAL_GetTick() - current_time >= 100){
 8000666:	f000 fe33 	bl	80012d0 <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <main+0x10c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b63      	cmp	r3, #99	; 0x63
 8000674:	d9b2      	bls.n	80005dc <main+0x28>

		  //100ms passed
		  current_time = HAL_GetTick();
 8000676:	f000 fe2b 	bl	80012d0 <HAL_GetTick>
 800067a:	4603      	mov	r3, r0
 800067c:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <main+0x10c>)
 800067e:	6013      	str	r3, [r2, #0]
		  te.super.sig = TIME_TICK;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <main+0x110>)
 8000682:	2202      	movs	r2, #2
 8000684:	701a      	strb	r2, [r3, #0]
		  if(++te.ss > 10) te.ss = 1;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <main+0x110>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	3301      	adds	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <main+0x110>)
 8000690:	705a      	strb	r2, [r3, #1]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <main+0x110>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b0a      	cmp	r3, #10
 8000698:	d902      	bls.n	80006a0 <main+0xec>
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <main+0x110>)
 800069c:	2201      	movs	r2, #1
 800069e:	705a      	strb	r2, [r3, #1]
		  protimer_event_dispatcher(&protimer,&te.super); // te = tick event
 80006a0:	4908      	ldr	r1, [pc, #32]	; (80006c4 <main+0x110>)
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <main+0x100>)
 80006a4:	f000 f95c 	bl	8000960 <protimer_event_dispatcher>
  {
 80006a8:	e798      	b.n	80005dc <main+0x28>
 80006aa:	bf00      	nop
 80006ac:	080043c0 	.word	0x080043c0
 80006b0:	080043e0 	.word	0x080043e0
 80006b4:	20000110 	.word	0x20000110
 80006b8:	40020400 	.word	0x40020400
 80006bc:	40020800 	.word	0x40020800
 80006c0:	20000120 	.word	0x20000120
 80006c4:	20000124 	.word	0x20000124

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fe5a 	bl	8003390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ec:	f001 f8c0 	bl	8001870 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a29      	ldr	r2, [pc, #164]	; (800079c <SystemClock_Config+0xd4>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemClock_Config+0xd4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <SystemClock_Config+0xd8>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000724:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000738:	23d8      	movs	r3, #216	; 0xd8
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000740:	2303      	movs	r3, #3
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f8f1 	bl	8001930 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000754:	f000 f9c6 	bl	8000ae4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000758:	f001 f89a 	bl	8001890 <HAL_PWREx_EnableOverDrive>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000762:	f000 f9bf 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000772:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2107      	movs	r1, #7
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fb77 	bl	8001e78 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000790:	f000 f9a8 	bl	8000ae4 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART3_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007e8:	f002 f95c 	bl	8002aa4 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f977 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	40004800 	.word	0x40004800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a4c      	ldr	r2, [pc, #304]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a46      	ldr	r2, [pc, #280]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a40      	ldr	r2, [pc, #256]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a34      	ldr	r2, [pc, #208]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <MX_GPIO_Init+0x14c>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <MX_GPIO_Init+0x150>)
 80008b2:	f000 ffc3 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	4827      	ldr	r0, [pc, #156]	; (8000958 <MX_GPIO_Init+0x154>)
 80008bc:	f000 ffbe 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTON3_Pin */
  GPIO_InitStruct.Pin = BUTON3_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTON3_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4821      	ldr	r0, [pc, #132]	; (800095c <MX_GPIO_Init+0x158>)
 80008d8:	f000 fdec 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <MX_GPIO_Init+0x150>)
 80008f6:	f000 fddd 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fa:	2340      	movs	r3, #64	; 0x40
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_GPIO_Init+0x154>)
 8000912:	f000 fdcf 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x154>)
 800092a:	f000 fdc3 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000936:	2302      	movs	r3, #2
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0x150>)
 8000942:	f000 fdb7 	bl	80014b4 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40021800 	.word	0x40021800
 800095c:	40020800 	.word	0x40020800

08000960 <protimer_event_dispatcher>:

/* USER CODE BEGIN 4 */

static void protimer_event_dispatcher(protimer_t *const mobj,event_t const * const e){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]

	event_status_t status;
	protimer_state_t source=0,target=0;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	2300      	movs	r3, #0
 8000970:	73bb      	strb	r3, [r7, #14]

	source = mobj->active_state;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7b1b      	ldrb	r3, [r3, #12]
 8000976:	73fb      	strb	r3, [r7, #15]

	status = protimer_state_machine(mobj,e);
 8000978:	6839      	ldr	r1, [r7, #0]
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f8ce 	bl	8000b1c <protimer_state_machine>
 8000980:	4603      	mov	r3, r0
 8000982:	737b      	strb	r3, [r7, #13]

	if(status == EVENT_TRANSITION){
 8000984:	7b7b      	ldrb	r3, [r7, #13]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d118      	bne.n	80009bc <protimer_event_dispatcher+0x5c>

		target = mobj->active_state;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7b1b      	ldrb	r3, [r3, #12]
 800098e:	73bb      	strb	r3, [r7, #14]
		event_t ee;
		//1. run the source exit action
		ee.sig = EXIT;
 8000990:	2306      	movs	r3, #6
 8000992:	733b      	strb	r3, [r7, #12]
		mobj->active_state = source;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7bfa      	ldrb	r2, [r7, #15]
 8000998:	731a      	strb	r2, [r3, #12]
		protimer_state_machine(mobj,&ee);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f8bb 	bl	8000b1c <protimer_state_machine>

		//2. run the target entry action
		ee.sig = ENTRY;
 80009a6:	2305      	movs	r3, #5
 80009a8:	733b      	strb	r3, [r7, #12]
		mobj->active_state = target;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7bba      	ldrb	r2, [r7, #14]
 80009ae:	731a      	strb	r2, [r3, #12]
		protimer_state_machine(mobj,&ee);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f8b0 	bl	8000b1c <protimer_state_machine>

	}
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <process_button_pad_value>:


static uint8_t process_button_pad_value(uint8_t btn_pad_value){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]

	static button_state_t btn_sm_state = NOT_PRESSED;
//	static uint32_t curr_time = HAL_GetTick();
	static uint32_t curr_time = 0;

	switch(btn_sm_state){
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <process_button_pad_value+0x8c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d026      	beq.n	8000a24 <process_button_pad_value+0x60>
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	dc35      	bgt.n	8000a46 <process_button_pad_value+0x82>
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <process_button_pad_value+0x20>
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d00c      	beq.n	80009fc <process_button_pad_value+0x38>
 80009e2:	e030      	b.n	8000a46 <process_button_pad_value+0x82>

		case NOT_PRESSED:
		  if(btn_pad_value){
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d028      	beq.n	8000a3c <process_button_pad_value+0x78>
			  btn_sm_state = BOUNCE;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <process_button_pad_value+0x8c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
			  curr_time = HAL_GetTick();
 80009f0:	f000 fc6e 	bl	80012d0 <HAL_GetTick>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <process_button_pad_value+0x90>)
 80009f8:	6013      	str	r3, [r2, #0]
		  }
		  break;
 80009fa:	e01f      	b.n	8000a3c <process_button_pad_value+0x78>

		case BOUNCE:
		  if(HAL_GetTick() - curr_time >= 50){
 80009fc:	f000 fc68 	bl	80012d0 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <process_button_pad_value+0x90>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	2b31      	cmp	r3, #49	; 0x31
 8000a0a:	d919      	bls.n	8000a40 <process_button_pad_value+0x7c>
			  //50ms has passed
			  if(btn_pad_value){
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d004      	beq.n	8000a1c <process_button_pad_value+0x58>
				  btn_sm_state = PRESSED;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <process_button_pad_value+0x8c>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	701a      	strb	r2, [r3, #0]
			  	  return btn_pad_value;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	e015      	b.n	8000a48 <process_button_pad_value+0x84>
			  }
			  else
				  btn_sm_state = NOT_PRESSED;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <process_button_pad_value+0x8c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000a22:	e00d      	b.n	8000a40 <process_button_pad_value+0x7c>

		case PRESSED:
		  if(!btn_pad_value){
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10c      	bne.n	8000a44 <process_button_pad_value+0x80>
			  btn_sm_state = BOUNCE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <process_button_pad_value+0x8c>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
			  curr_time = HAL_GetTick();
 8000a30:	f000 fc4e 	bl	80012d0 <HAL_GetTick>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <process_button_pad_value+0x90>)
 8000a38:	6013      	str	r3, [r2, #0]
		  }
		  break;
 8000a3a:	e003      	b.n	8000a44 <process_button_pad_value+0x80>
		  break;
 8000a3c:	bf00      	nop
 8000a3e:	e002      	b.n	8000a46 <process_button_pad_value+0x82>
		  break;
 8000a40:	bf00      	nop
 8000a42:	e000      	b.n	8000a46 <process_button_pad_value+0x82>
		  break;
 8000a44:	bf00      	nop

	}

	return 0;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000126 	.word	0x20000126
 8000a54:	20000128 	.word	0x20000128

08000a58 <xITM_SendChar>:

void xITM_SendChar(uint8_t ch)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <xITM_SendChar+0x48>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <xITM_SendChar+0x48>)
 8000a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <xITM_SendChar+0x4c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <xITM_SendChar+0x4c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a7a:	bf00      	nop
 8000a7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f8      	beq.n	8000a7c <xITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	6013      	str	r3, [r2, #0]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000edfc 	.word	0xe000edfc
 8000aa4:	e0000e00 	.word	0xe0000e00

08000aa8 <_write>:

int _write(int file, char *ptr, int len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  for(i=0 ; i<len ; i++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e009      	b.n	8000ad2 <_write+0x2a>
    xITM_SendChar((*ptr++));
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ffc6 	bl	8000a58 <xITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	dbf1      	blt.n	8000abe <_write+0x16>
//	  ITM_SendChar((*ptr++));

  return len;
 8000ada:	687b      	ldr	r3, [r7, #4]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>

08000aee <protimer_init>:
static void Display_Message(char *msg);
static void Display_Clear(char *msg );
static void Do_Beep(void);


void protimer_init(protimer_t *mobj){
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	event_t ee;
	ee.sig = ENTRY;
 8000af6:	2305      	movs	r3, #5
 8000af8:	733b      	strb	r3, [r7, #12]
	mobj->active_state = IDLE;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	731a      	strb	r2, [r3, #12]
	mobj->p_time = 0;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
	protimer_state_machine(mobj,&ee);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f805 	bl	8000b1c <protimer_state_machine>
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <protimer_state_machine>:
 *
 * e pointer content cannot be modified as well as pointer cannot be modified
 * so "const" keyword put before variable and pointer operator that pointer cannot be changed.
 */

event_status_t protimer_state_machine(protimer_t * const mobj,event_t const * const e){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]

	switch(mobj->active_state){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7b1b      	ldrb	r3, [r3, #12]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d82a      	bhi.n	8000b84 <protimer_state_machine+0x68>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <protimer_state_machine+0x18>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000b49 	.word	0x08000b49
 8000b38:	08000b55 	.word	0x08000b55
 8000b3c:	08000b61 	.word	0x08000b61
 8000b40:	08000b6d 	.word	0x08000b6d
 8000b44:	08000b79 	.word	0x08000b79

		case IDLE:
			return protimer_state_handler_IDLE(mobj,e);
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f820 	bl	8000b90 <protimer_state_handler_IDLE>
 8000b50:	4603      	mov	r3, r0
 8000b52:	e018      	b.n	8000b86 <protimer_state_machine+0x6a>

		case TIME_SET:
			return protimer_state_handler_TIME_SET(mobj,e);
 8000b54:	6839      	ldr	r1, [r7, #0]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f86a 	bl	8000c30 <protimer_state_handler_TIME_SET>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	e012      	b.n	8000b86 <protimer_state_machine+0x6a>

		case COUNTDOWN:
			return protimer_state_handler_COUNTDOWN(mobj,e);
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f8c2 	bl	8000cec <protimer_state_handler_COUNTDOWN>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	e00c      	b.n	8000b86 <protimer_state_machine+0x6a>

		case PAUSE:
			return protimer_state_handler_PAUSE(mobj,e);
 8000b6c:	6839      	ldr	r1, [r7, #0]
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f910 	bl	8000d94 <protimer_state_handler_PAUSE>
 8000b74:	4603      	mov	r3, r0
 8000b76:	e006      	b.n	8000b86 <protimer_state_machine+0x6a>

		case STAT:
			return protimer_state_handler_STAT(mobj,e);
 8000b78:	6839      	ldr	r1, [r7, #0]
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f95e 	bl	8000e3c <protimer_state_handler_STAT>
 8000b80:	4603      	mov	r3, r0
 8000b82:	e000      	b.n	8000b86 <protimer_state_machine+0x6a>

	}

	return EVENT_IGNORED;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop

08000b90 <protimer_state_handler_IDLE>:


/* These functions switch's are for switching between different SIGNALS */
static event_status_t protimer_state_handler_IDLE(protimer_t * const mobj,event_t const * const e){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]

	switch(e->sig){
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d83d      	bhi.n	8000c1e <protimer_state_handler_IDLE+0x8e>
 8000ba2:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <protimer_state_handler_IDLE+0x18>)
 8000ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba8:	08000beb 	.word	0x08000beb
 8000bac:	08000c1f 	.word	0x08000c1f
 8000bb0:	08000c0b 	.word	0x08000c0b
 8000bb4:	08000c01 	.word	0x08000c01
 8000bb8:	08000c1f 	.word	0x08000c1f
 8000bbc:	08000bc5 	.word	0x08000bc5
 8000bc0:	08000be1 	.word	0x08000be1

		case ENTRY:{
			mobj->c_time = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
			mobj->e_time = 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
			Display_Message("Set Time:");
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <protimer_state_handler_IDLE+0x98>)
 8000bd2:	f000 f995 	bl	8000f00 <Display_Message>
			Display_Time(0);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f96e 	bl	8000eb8 <Display_Time>
			return EVENT_HANDLED;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e01f      	b.n	8000c20 <protimer_state_handler_IDLE+0x90>
		}

		case EXIT:{
			Display_Clear("Display Cleared\n");
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <protimer_state_handler_IDLE+0x9c>)
 8000be2:	f000 f99d 	bl	8000f20 <Display_Clear>
			return EVENT_HANDLED;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e01a      	b.n	8000c20 <protimer_state_handler_IDLE+0x90>
		}

		case INC_TIME:{
			mobj->c_time += 60;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
			mobj->active_state = TIME_SET;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e00f      	b.n	8000c20 <protimer_state_handler_IDLE+0x90>
		}

		case START_PAUSE:{
			mobj->active_state = STAT;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2204      	movs	r2, #4
 8000c04:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000c06:	2302      	movs	r3, #2
 8000c08:	e00a      	b.n	8000c20 <protimer_state_handler_IDLE+0x90>
		}

		case TIME_TICK:{

			if(((protimer_tick_event_t *)(e))->ss == 5){
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	d103      	bne.n	8000c1a <protimer_state_handler_IDLE+0x8a>
				Do_Beep();
 8000c12:	f000 f991 	bl	8000f38 <Do_Beep>
				return EVENT_HANDLED;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e002      	b.n	8000c20 <protimer_state_handler_IDLE+0x90>
			}

			return EVENT_IGNORED;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <protimer_state_handler_IDLE+0x90>
		}

	}//End Of Switch Statement

	return EVENT_IGNORED;
 8000c1e:	2301      	movs	r3, #1

}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08004400 	.word	0x08004400
 8000c2c:	0800440c 	.word	0x0800440c

08000c30 <protimer_state_handler_TIME_SET>:

static event_status_t protimer_state_handler_TIME_SET(protimer_t * const mobj,event_t const * const e){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	switch(e->sig){
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d84c      	bhi.n	8000cdc <protimer_state_handler_TIME_SET+0xac>
 8000c42:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <protimer_state_handler_TIME_SET+0x18>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c7d 	.word	0x08000c7d
 8000c4c:	08000c97 	.word	0x08000c97
 8000c50:	08000cdd 	.word	0x08000cdd
 8000c54:	08000cc7 	.word	0x08000cc7
 8000c58:	08000cbd 	.word	0x08000cbd
 8000c5c:	08000c65 	.word	0x08000c65
 8000c60:	08000c73 	.word	0x08000c73

		case ENTRY:{
			Display_Time(mobj->c_time);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f925 	bl	8000eb8 <Display_Time>
			return EVENT_HANDLED;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e035      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
		}

		case EXIT:{
			Display_Clear("Display Cleared\n");
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <protimer_state_handler_TIME_SET+0xb8>)
 8000c74:	f000 f954 	bl	8000f20 <Display_Clear>
			return EVENT_HANDLED;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e030      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
		}

		case INC_TIME:{
			mobj->c_time += 60;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]
			Display_Time(mobj->c_time);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f913 	bl	8000eb8 <Display_Time>
			return EVENT_HANDLED;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e023      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
		}

		case DEC_TIME:{
			if(mobj->c_time >= 60){
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c9c:	d90c      	bls.n	8000cb8 <protimer_state_handler_TIME_SET+0x88>
				mobj->c_time -=60;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
				Display_Time(mobj->c_time);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f902 	bl	8000eb8 <Display_Time>
				return EVENT_HANDLED;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e012      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
			}
			return EVENT_IGNORED;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e010      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
		}

		case ABRT:{
			mobj->active_state = IDLE;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e00b      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
		}

		case START_PAUSE:{
			if(mobj->c_time >=60){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b3b      	cmp	r3, #59	; 0x3b
 8000ccc:	d904      	bls.n	8000cd8 <protimer_state_handler_TIME_SET+0xa8>
				mobj->active_state = COUNTDOWN;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	731a      	strb	r2, [r3, #12]
				return EVENT_TRANSITION;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e002      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
			}

			return EVENT_IGNORED;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <protimer_state_handler_TIME_SET+0xae>
		}


	}//End Of Switch Statement

	return EVENT_IGNORED;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	0800440c 	.word	0x0800440c

08000cec <protimer_state_handler_COUNTDOWN>:

static event_status_t protimer_state_handler_COUNTDOWN(protimer_t * const mobj,event_t const * const e){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]

	switch(e->sig){
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d843      	bhi.n	8000d88 <protimer_state_handler_COUNTDOWN+0x9c>
 8000d00:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <protimer_state_handler_COUNTDOWN+0x1c>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000d35 	.word	0x08000d35
 8000d0c:	08000d75 	.word	0x08000d75
 8000d10:	08000d7f 	.word	0x08000d7f
 8000d14:	08000d89 	.word	0x08000d89
 8000d18:	08000d1d 	.word	0x08000d1d

		case EXIT:{
			mobj->p_time += mobj->e_time;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	441a      	add	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	609a      	str	r2, [r3, #8]
			mobj->e_time = 0;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
			return EVENT_HANDLED;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e02a      	b.n	8000d8a <protimer_state_handler_COUNTDOWN+0x9e>
		}

		case TIME_TICK:{
			if(((protimer_tick_event_t *)(e))->ss == 10){
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	785b      	ldrb	r3, [r3, #1]
 8000d38:	2b0a      	cmp	r3, #10
 8000d3a:	d119      	bne.n	8000d70 <protimer_state_handler_COUNTDOWN+0x84>
				 --mobj->c_time;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
				 ++mobj->e_time;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	605a      	str	r2, [r3, #4]
				 Display_Time(mobj->c_time);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f8af 	bl	8000eb8 <Display_Time>

				 if(mobj->c_time == 0){
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d104      	bne.n	8000d6c <protimer_state_handler_COUNTDOWN+0x80>
					 mobj->active_state = IDLE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	731a      	strb	r2, [r3, #12]
					 return EVENT_TRANSITION;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e00e      	b.n	8000d8a <protimer_state_handler_COUNTDOWN+0x9e>
				 }

				return EVENT_HANDLED;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e00c      	b.n	8000d8a <protimer_state_handler_COUNTDOWN+0x9e>
			}

			return EVENT_IGNORED;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e00a      	b.n	8000d8a <protimer_state_handler_COUNTDOWN+0x9e>
		}

		case START_PAUSE:{
			mobj->active_state = PAUSE;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e005      	b.n	8000d8a <protimer_state_handler_COUNTDOWN+0x9e>
		}

		case ABRT:{
			mobj->active_state = IDLE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000d84:	2302      	movs	r3, #2
 8000d86:	e000      	b.n	8000d8a <protimer_state_handler_COUNTDOWN+0x9e>
		}

	}//End Of Switch Statement

	return EVENT_IGNORED;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop

08000d94 <protimer_state_handler_PAUSE>:

static event_status_t protimer_state_handler_PAUSE(protimer_t * const mobj,event_t const * const e){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]

	switch(e->sig){
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d840      	bhi.n	8000e28 <protimer_state_handler_PAUSE+0x94>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <protimer_state_handler_PAUSE+0x18>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000ddd 	.word	0x08000ddd
 8000db0:	08000df3 	.word	0x08000df3
 8000db4:	08000e29 	.word	0x08000e29
 8000db8:	08000e15 	.word	0x08000e15
 8000dbc:	08000e1f 	.word	0x08000e1f
 8000dc0:	08000dc9 	.word	0x08000dc9
 8000dc4:	08000dd3 	.word	0x08000dd3

		case ENTRY:{
			Display_Message("Paused\n");
 8000dc8:	481a      	ldr	r0, [pc, #104]	; (8000e34 <protimer_state_handler_PAUSE+0xa0>)
 8000dca:	f000 f899 	bl	8000f00 <Display_Message>
			return EVENT_HANDLED;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e02b      	b.n	8000e2a <protimer_state_handler_PAUSE+0x96>
		}

		case EXIT:{
			Display_Clear("Display Cleared\n");
 8000dd2:	4819      	ldr	r0, [pc, #100]	; (8000e38 <protimer_state_handler_PAUSE+0xa4>)
 8000dd4:	f000 f8a4 	bl	8000f20 <Display_Clear>
			return EVENT_HANDLED;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e026      	b.n	8000e2a <protimer_state_handler_PAUSE+0x96>
		}

		case INC_TIME:{
			mobj->c_time += 60;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
			mobj->active_state = TIME_SET;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000dee:	2302      	movs	r3, #2
 8000df0:	e01b      	b.n	8000e2a <protimer_state_handler_PAUSE+0x96>
		}

		case DEC_TIME:{
			if(mobj->c_time >= 60){
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b3b      	cmp	r3, #59	; 0x3b
 8000df8:	d90a      	bls.n	8000e10 <protimer_state_handler_PAUSE+0x7c>
				mobj->c_time -=60;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
				mobj->active_state = TIME_SET;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	731a      	strb	r2, [r3, #12]
				return EVENT_TRANSITION;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e00c      	b.n	8000e2a <protimer_state_handler_PAUSE+0x96>
			}
			return EVENT_IGNORED;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e00a      	b.n	8000e2a <protimer_state_handler_PAUSE+0x96>
		}

		case START_PAUSE:{
			mobj->active_state = COUNTDOWN;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2202      	movs	r2, #2
 8000e18:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e005      	b.n	8000e2a <protimer_state_handler_PAUSE+0x96>
		}

		case ABRT:{
			mobj->active_state = IDLE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000e24:	2302      	movs	r3, #2
 8000e26:	e000      	b.n	8000e2a <protimer_state_handler_PAUSE+0x96>
		}

	}//End Of Switch Statement

	return EVENT_IGNORED;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08004420 	.word	0x08004420
 8000e38:	0800440c 	.word	0x0800440c

08000e3c <protimer_state_handler_STAT>:

static event_status_t protimer_state_handler_STAT(protimer_t * const mobj,event_t const * const e){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]

	static uint8_t tick_count;

	switch(e->sig){
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d00f      	beq.n	8000e6e <protimer_state_handler_STAT+0x32>
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	dc26      	bgt.n	8000ea0 <protimer_state_handler_STAT+0x64>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d010      	beq.n	8000e78 <protimer_state_handler_STAT+0x3c>
 8000e56:	2b05      	cmp	r3, #5
 8000e58:	d122      	bne.n	8000ea0 <protimer_state_handler_STAT+0x64>

		case ENTRY:{
			Display_Time(mobj->p_time);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f82a 	bl	8000eb8 <Display_Time>
			Display_Message("Productive Time\n");
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <protimer_state_handler_STAT+0x70>)
 8000e66:	f000 f84b 	bl	8000f00 <Display_Message>
			return EVENT_HANDLED;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e019      	b.n	8000ea2 <protimer_state_handler_STAT+0x66>
		}

		case EXIT:{
			Display_Clear("Display Cleared\n");
 8000e6e:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <protimer_state_handler_STAT+0x74>)
 8000e70:	f000 f856 	bl	8000f20 <Display_Clear>
			return EVENT_HANDLED;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e014      	b.n	8000ea2 <protimer_state_handler_STAT+0x66>
//			if(((protimer_tick_event_t *)(e))->ss == 10){
//				mobj->active_state = IDLE;
//				return EVENT_TRANSITION;
//			}

			if(++tick_count == 30){
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <protimer_state_handler_STAT+0x78>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <protimer_state_handler_STAT+0x78>)
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <protimer_state_handler_STAT+0x78>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b1e      	cmp	r3, #30
 8000e8a:	d107      	bne.n	8000e9c <protimer_state_handler_STAT+0x60>
				tick_count = 0;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <protimer_state_handler_STAT+0x78>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
				mobj->active_state = IDLE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	731a      	strb	r2, [r3, #12]
				return EVENT_TRANSITION;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e002      	b.n	8000ea2 <protimer_state_handler_STAT+0x66>
			}

			return EVENT_IGNORED;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <protimer_state_handler_STAT+0x66>
		}


	}//End Of Switch Statement

	return EVENT_IGNORED;
 8000ea0:	2301      	movs	r3, #1
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	08004428 	.word	0x08004428
 8000eb0:	0800440c 	.word	0x0800440c
 8000eb4:	2000012c 	.word	0x2000012c

08000eb8 <Display_Time>:



////////////////////////////////helper functions/////////////////////////////////
static void Display_Time(uint32_t time){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	uint16_t m = time / 60;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <Display_Time+0x40>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	095b      	lsrs	r3, r3, #5
 8000eca:	81fb      	strh	r3, [r7, #14]
	uint8_t  s = time % 60;
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <Display_Time+0x40>)
 8000ed0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ed4:	095a      	lsrs	r2, r3, #5
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	1aca      	subs	r2, r1, r3
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	737b      	strb	r3, [r7, #13]
	printf("	%03d:%02d\n",m,s);
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	7b7a      	ldrb	r2, [r7, #13]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <Display_Time+0x44>)
 8000eec:	f002 fa58 	bl	80033a0 <iprintf>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	88888889 	.word	0x88888889
 8000efc:	0800443c 	.word	0x0800443c

08000f00 <Display_Message>:

static void Display_Message(char *msg){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	printf("%s",msg);
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <Display_Message+0x1c>)
 8000f0c:	f002 fa48 	bl	80033a0 <iprintf>
	__NOP();
 8000f10:	bf00      	nop
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08004448 	.word	0x08004448

08000f20 <Display_Clear>:

static void Display_Clear(char *msg ){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
//	printf("%s",msg);
	__NOP();
 8000f28:	bf00      	nop
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <Do_Beep>:

static void Do_Beep(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	printf("Beeeeeeeep\n");
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <Do_Beep+0x10>)
 8000f3e:	f002 fab5 	bl	80034ac <puts>
	__NOP();
 8000f42:	bf00      	nop
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	0800444c 	.word	0x0800444c

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0aa      	sub	sp, #168	; 0xa8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2284      	movs	r2, #132	; 0x84
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f9eb 	bl	8003390 <memset>
  if(huart->Instance==USART3)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a22      	ldr	r2, [pc, #136]	; (8001048 <HAL_UART_MspInit+0xb4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d13c      	bne.n	800103e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 f976 	bl	80022c4 <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fde:	f7ff fd81 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0xb8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_UART_MspInit+0xb8>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0xb8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001032:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0xbc>)
 800103a:	f000 fa3b 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	37a8      	adds	r7, #168	; 0xa8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40004800 	.word	0x40004800
 800104c:	40023800 	.word	0x40023800
 8001050:	40020c00 	.word	0x40020c00

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f902 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
	}

return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	605a      	str	r2, [r3, #4]
	return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_isatty>:

int _isatty(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
	return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f002 f8de 	bl	800333c <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20050000 	.word	0x20050000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	20000130 	.word	0x20000130
 80011b4:	20000148 	.word	0x20000148

080011b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f8:	4c0b      	ldr	r4, [pc, #44]	; (8001228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001206:	f7ff ffd7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120a:	f002 f89d 	bl	8003348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff f9d1 	bl	80005b4 <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001220:	08004518 	.word	0x08004518
  ldr r2, =_sbss
 8001224:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001228:	20000148 	.word	0x20000148

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>

0800122e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f90a 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f805 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fe85 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f917 	bl	800149a <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f8ed 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000134 	.word	0x20000134

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000134 	.word	0x20000134

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	4313      	orrs	r3, r2
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00
 800132c:	05fa0000 	.word	0x05fa0000

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff47 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff5c 	bl	8001330 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffb0 	bl	8001408 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e175      	b.n	80017c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8164 	bne.w	80017ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_GPIO_Init+0x56>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d017      	beq.n	80015a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80be 	beq.w	80017ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <HAL_GPIO_Init+0x324>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <HAL_GPIO_Init+0x324>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_GPIO_Init+0x324>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001656:	4a61      	ldr	r2, [pc, #388]	; (80017dc <HAL_GPIO_Init+0x328>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <HAL_GPIO_Init+0x32c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d037      	beq.n	80016f2 <HAL_GPIO_Init+0x23e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_GPIO_Init+0x330>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d031      	beq.n	80016ee <HAL_GPIO_Init+0x23a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <HAL_GPIO_Init+0x334>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d02b      	beq.n	80016ea <HAL_GPIO_Init+0x236>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a55      	ldr	r2, [pc, #340]	; (80017ec <HAL_GPIO_Init+0x338>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d025      	beq.n	80016e6 <HAL_GPIO_Init+0x232>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_GPIO_Init+0x33c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01f      	beq.n	80016e2 <HAL_GPIO_Init+0x22e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a53      	ldr	r2, [pc, #332]	; (80017f4 <HAL_GPIO_Init+0x340>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x22a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a52      	ldr	r2, [pc, #328]	; (80017f8 <HAL_GPIO_Init+0x344>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x226>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a51      	ldr	r2, [pc, #324]	; (80017fc <HAL_GPIO_Init+0x348>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x222>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a50      	ldr	r2, [pc, #320]	; (8001800 <HAL_GPIO_Init+0x34c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x21e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <HAL_GPIO_Init+0x350>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x21a>
 80016ca:	2309      	movs	r3, #9
 80016cc:	e012      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016ce:	230a      	movs	r3, #10
 80016d0:	e010      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016d2:	2308      	movs	r3, #8
 80016d4:	e00e      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016da:	2306      	movs	r3, #6
 80016dc:	e00a      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016de:	2305      	movs	r3, #5
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x240>
 80016f2:	2300      	movs	r3, #0
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_GPIO_Init+0x328>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_GPIO_Init+0x354>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001736:	4a34      	ldr	r2, [pc, #208]	; (8001808 <HAL_GPIO_Init+0x354>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HAL_GPIO_Init+0x354>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001760:	4a29      	ldr	r2, [pc, #164]	; (8001808 <HAL_GPIO_Init+0x354>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_GPIO_Init+0x354>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_GPIO_Init+0x354>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_GPIO_Init+0x354>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <HAL_GPIO_Init+0x354>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	f67f ae86 	bls.w	80014d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020c00 	.word	0x40020c00
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021400 	.word	0x40021400
 80017f8:	40021800 	.word	0x40021800
 80017fc:	40021c00 	.word	0x40021c00
 8001800:	40022000 	.word	0x40022000
 8001804:	40022400 	.word	0x40022400
 8001808:	40013c00 	.word	0x40013c00

0800180c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40007000 	.word	0x40007000

08001890 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_PWREx_EnableOverDrive+0x98>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_PWREx_EnableOverDrive+0x98>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_PWREx_EnableOverDrive+0x98>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018be:	f7ff fd07 	bl	80012d0 <HAL_GetTick>
 80018c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018c4:	e009      	b.n	80018da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018c6:	f7ff fd03 	bl	80012d0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018d4:	d901      	bls.n	80018da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e022      	b.n	8001920 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e6:	d1ee      	bne.n	80018c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f4:	f7ff fcec 	bl	80012d0 <HAL_GetTick>
 80018f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018fa:	e009      	b.n	8001910 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018fc:	f7ff fce8 	bl	80012d0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800190a:	d901      	bls.n	8001910 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e007      	b.n	8001920 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800191c:	d1ee      	bne.n	80018fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e291      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8087 	beq.w	8001a62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001954:	4b96      	ldr	r3, [pc, #600]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b04      	cmp	r3, #4
 800195e:	d00c      	beq.n	800197a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001960:	4b93      	ldr	r3, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d112      	bne.n	8001992 <HAL_RCC_OscConfig+0x62>
 800196c:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001978:	d10b      	bne.n	8001992 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197a:	4b8d      	ldr	r3, [pc, #564]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d06c      	beq.n	8001a60 <HAL_RCC_OscConfig+0x130>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d168      	bne.n	8001a60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e26b      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x7a>
 800199c:	4b84      	ldr	r3, [pc, #528]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a83      	ldr	r2, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e02e      	b.n	8001a08 <HAL_RCC_OscConfig+0xd8>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x9c>
 80019b2:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7e      	ldr	r2, [pc, #504]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b7c      	ldr	r3, [pc, #496]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7b      	ldr	r2, [pc, #492]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e01d      	b.n	8001a08 <HAL_RCC_OscConfig+0xd8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0xc0>
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a75      	ldr	r2, [pc, #468]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a72      	ldr	r2, [pc, #456]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0xd8>
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6e      	ldr	r2, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a6b      	ldr	r2, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff fc5e 	bl	80012d0 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fc5a 	bl	80012d0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e21f      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe8>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fc4a 	bl	80012d0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fc46 	bl	80012d0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e20b      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x110>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d069      	beq.n	8001b42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6e:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7a:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d11c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x190>
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_RCC_OscConfig+0x17a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1df      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	493d      	ldr	r1, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	e040      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d023      	beq.n	8001b10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fbfc 	bl	80012d0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fbf8 	bl	80012d0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1bd      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4929      	ldr	r1, [pc, #164]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
 8001b0e:	e018      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbd8 	bl	80012d0 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff fbd4 	bl	80012d0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e199      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d038      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d019      	beq.n	8001b8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff fbb5 	bl	80012d0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fbb1 	bl	80012d0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e176      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x23a>
 8001b88:	e01a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <HAL_RCC_OscConfig+0x280>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fb9b 	bl	80012d0 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fb97 	bl	80012d0 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d903      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e15c      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
 8001bb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b91      	ldr	r3, [pc, #580]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ee      	bne.n	8001b9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a4 	beq.w	8001d16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a87      	ldr	r2, [pc, #540]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b85      	ldr	r3, [pc, #532]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf6:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a7e      	ldr	r2, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x4d0>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb5f 	bl	80012d0 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff fb5b 	bl	80012d0 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e120      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c28:	4b75      	ldr	r3, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x4d0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x31a>
 8001c3c:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a6e      	ldr	r2, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x376>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x33c>
 8001c52:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a69      	ldr	r2, [pc, #420]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a66      	ldr	r2, [pc, #408]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	e01c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x376>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x35e>
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a60      	ldr	r2, [pc, #384]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	4b5e      	ldr	r3, [pc, #376]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a5d      	ldr	r2, [pc, #372]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	e00b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x376>
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a5a      	ldr	r2, [pc, #360]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a57      	ldr	r2, [pc, #348]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d015      	beq.n	8001cda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb0f 	bl	80012d0 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fb0b 	bl	80012d0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0ce      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ee      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x386>
 8001cd8:	e014      	b.n	8001d04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7ff faf9 	bl	80012d0 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff faf5 	bl	80012d0 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0b8      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80a4 	beq.w	8001e68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d06b      	beq.n	8001e04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d149      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a30      	ldr	r2, [pc, #192]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff fac6 	bl	80012d0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff fac2 	bl	80012d0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e087      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fa96 	bl	80012d0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff fa92 	bl	80012d0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e057      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x478>
 8001dc6:	e04f      	b.n	8001e68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fa7c 	bl	80012d0 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff fa78 	bl	80012d0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e03d      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4ac>
 8001dfa:	e035      	b.n	8001e68 <HAL_RCC_OscConfig+0x538>
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x544>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d028      	beq.n	8001e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d121      	bne.n	8001e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d11a      	bne.n	8001e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d111      	bne.n	8001e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d0      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 020f 	bic.w	r2, r3, #15
 8001ea6:	4965      	ldr	r1, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e073      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4936      	ldr	r1, [pc, #216]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f9b0 	bl	80012d0 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff f9ac 	bl	80012d0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e053      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d210      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 020f 	bic.w	r2, r3, #15
 8001fb2:	4922      	ldr	r1, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1cc>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1d0>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1d4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f90c 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00
 8002040:	40023800 	.word	0x40023800
 8002044:	08004458 	.word	0x08004458
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002054:	b094      	sub	sp, #80	; 0x50
 8002056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	647b      	str	r3, [r7, #68]	; 0x44
 800205c:	2300      	movs	r3, #0
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002060:	2300      	movs	r3, #0
 8002062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002068:	4b79      	ldr	r3, [pc, #484]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d00d      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x40>
 8002074:	2b08      	cmp	r3, #8
 8002076:	f200 80e1 	bhi.w	800223c <HAL_RCC_GetSysClockFreq+0x1ec>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x34>
 800207e:	2b04      	cmp	r3, #4
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x3a>
 8002082:	e0db      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b73      	ldr	r3, [pc, #460]	; (8002254 <HAL_RCC_GetSysClockFreq+0x204>)
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002088:	e0db      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800208a:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_GetSysClockFreq+0x208>)
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208e:	e0d8      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	2200      	movs	r2, #0
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ba:	2300      	movs	r3, #0
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
 80020be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020c2:	4622      	mov	r2, r4
 80020c4:	462b      	mov	r3, r5
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	0159      	lsls	r1, r3, #5
 80020d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d4:	0150      	lsls	r0, r2, #5
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4621      	mov	r1, r4
 80020dc:	1a51      	subs	r1, r2, r1
 80020de:	6139      	str	r1, [r7, #16]
 80020e0:	4629      	mov	r1, r5
 80020e2:	eb63 0301 	sbc.w	r3, r3, r1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020f4:	4659      	mov	r1, fp
 80020f6:	018b      	lsls	r3, r1, #6
 80020f8:	4651      	mov	r1, sl
 80020fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020fe:	4651      	mov	r1, sl
 8002100:	018a      	lsls	r2, r1, #6
 8002102:	4651      	mov	r1, sl
 8002104:	ebb2 0801 	subs.w	r8, r2, r1
 8002108:	4659      	mov	r1, fp
 800210a:	eb63 0901 	sbc.w	r9, r3, r1
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800211e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002122:	4690      	mov	r8, r2
 8002124:	4699      	mov	r9, r3
 8002126:	4623      	mov	r3, r4
 8002128:	eb18 0303 	adds.w	r3, r8, r3
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	462b      	mov	r3, r5
 8002130:	eb49 0303 	adc.w	r3, r9, r3
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002142:	4629      	mov	r1, r5
 8002144:	024b      	lsls	r3, r1, #9
 8002146:	4621      	mov	r1, r4
 8002148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800214c:	4621      	mov	r1, r4
 800214e:	024a      	lsls	r2, r1, #9
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002156:	2200      	movs	r2, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
 800215a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800215c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002160:	f7fe f8a6 	bl	80002b0 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800216c:	e058      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	2200      	movs	r2, #0
 8002176:	4618      	mov	r0, r3
 8002178:	4611      	mov	r1, r2
 800217a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
 8002184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002188:	4642      	mov	r2, r8
 800218a:	464b      	mov	r3, r9
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	0159      	lsls	r1, r3, #5
 8002196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219a:	0150      	lsls	r0, r2, #5
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4641      	mov	r1, r8
 80021a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021a6:	4649      	mov	r1, r9
 80021a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021c0:	ebb2 040a 	subs.w	r4, r2, sl
 80021c4:	eb63 050b 	sbc.w	r5, r3, fp
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	00eb      	lsls	r3, r5, #3
 80021d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d6:	00e2      	lsls	r2, r4, #3
 80021d8:	4614      	mov	r4, r2
 80021da:	461d      	mov	r5, r3
 80021dc:	4643      	mov	r3, r8
 80021de:	18e3      	adds	r3, r4, r3
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	464b      	mov	r3, r9
 80021e4:	eb45 0303 	adc.w	r3, r5, r3
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021f6:	4629      	mov	r1, r5
 80021f8:	028b      	lsls	r3, r1, #10
 80021fa:	4621      	mov	r1, r4
 80021fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002200:	4621      	mov	r1, r4
 8002202:	028a      	lsls	r2, r1, #10
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220a:	2200      	movs	r2, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	61fa      	str	r2, [r7, #28]
 8002210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002214:	f7fe f84c 	bl	80002b0 <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4613      	mov	r3, r2
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	3301      	adds	r3, #1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetSysClockFreq+0x204>)
 800223e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002244:	4618      	mov	r0, r3
 8002246:	3750      	adds	r7, #80	; 0x50
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	00f42400 	.word	0x00f42400
 8002258:	007a1200 	.word	0x007a1200

0800225c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_RCC_GetHCLKFreq+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002278:	f7ff fff0 	bl	800225c <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0a9b      	lsrs	r3, r3, #10
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	08004468 	.word	0x08004468

0800229c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022a0:	f7ff ffdc 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0b5b      	lsrs	r3, r3, #13
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08004468 	.word	0x08004468

080022c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d012      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022ec:	4b69      	ldr	r3, [pc, #420]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a68      	ldr	r2, [pc, #416]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	4b66      	ldr	r3, [pc, #408]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	4964      	ldr	r1, [pc, #400]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d017      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	4959      	ldr	r1, [pc, #356]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d017      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800235a:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	494a      	ldr	r1, [pc, #296]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 808b 	beq.w	80024be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	4a39      	ldr	r2, [pc, #228]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	; 0x40
 80023b4:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023cc:	f7fe ff80 	bl	80012d0 <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7fe ff7c 	bl	80012d0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e357      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d035      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d02e      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002410:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002418:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002432:	4a18      	ldr	r2, [pc, #96]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d114      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe ff44 	bl	80012d0 <HAL_GetTick>
 8002448:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7fe ff40 	bl	80012d0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e319      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ee      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800247a:	d111      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800248a:	400b      	ands	r3, r1
 800248c:	4901      	ldr	r1, [pc, #4]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
 8002492:	e00b      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000
 800249c:	0ffffcff 	.word	0x0ffffcff
 80024a0:	4baa      	ldr	r3, [pc, #680]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4aa9      	ldr	r2, [pc, #676]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	4ba7      	ldr	r3, [pc, #668]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	49a4      	ldr	r1, [pc, #656]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ca:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d0:	4a9e      	ldr	r2, [pc, #632]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024da:	4b9c      	ldr	r3, [pc, #624]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	4999      	ldr	r1, [pc, #612]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f8:	4b94      	ldr	r3, [pc, #592]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002506:	4991      	ldr	r1, [pc, #580]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800251a:	4b8c      	ldr	r3, [pc, #560]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002528:	4988      	ldr	r1, [pc, #544]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800253c:	4b83      	ldr	r3, [pc, #524]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254a:	4980      	ldr	r1, [pc, #512]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800255e:	4b7b      	ldr	r3, [pc, #492]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4977      	ldr	r1, [pc, #476]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002580:	4b72      	ldr	r3, [pc, #456]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	496f      	ldr	r1, [pc, #444]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a2:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f023 020c 	bic.w	r2, r3, #12
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b0:	4966      	ldr	r1, [pc, #408]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c4:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	495e      	ldr	r1, [pc, #376]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025e6:	4b59      	ldr	r3, [pc, #356]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	4955      	ldr	r1, [pc, #340]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	494d      	ldr	r1, [pc, #308]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800262a:	4b48      	ldr	r3, [pc, #288]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4944      	ldr	r1, [pc, #272]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800264c:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	493c      	ldr	r1, [pc, #240]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267c:	4933      	ldr	r1, [pc, #204]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269e:	492b      	ldr	r1, [pc, #172]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d011      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c0:	4922      	ldr	r1, [pc, #136]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002700:	4912      	ldr	r1, [pc, #72]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002724:	4909      	ldr	r1, [pc, #36]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d006      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80d9 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002740:	4b02      	ldr	r3, [pc, #8]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a01      	ldr	r2, [pc, #4]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800274a:	e001      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800274c:	40023800 	.word	0x40023800
 8002750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002752:	f7fe fdbd 	bl	80012d0 <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800275a:	f7fe fdb9 	bl	80012d0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e194      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800276c:	4b6c      	ldr	r3, [pc, #432]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d021      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800278c:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800279a:	4b61      	ldr	r3, [pc, #388]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800279c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	019a      	lsls	r2, r3, #6
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	071b      	lsls	r3, r3, #28
 80027c0:	4957      	ldr	r1, [pc, #348]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02e      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f2:	d129      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027f4:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002808:	0f1b      	lsrs	r3, r3, #28
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	019a      	lsls	r2, r3, #6
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	071b      	lsls	r3, r3, #28
 8002828:	493d      	ldr	r1, [pc, #244]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002836:	f023 021f 	bic.w	r2, r3, #31
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	3b01      	subs	r3, #1
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01d      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285a:	0e1b      	lsrs	r3, r3, #24
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002868:	0f1b      	lsrs	r3, r3, #28
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	019a      	lsls	r2, r3, #6
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	431a      	orrs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	071b      	lsls	r3, r3, #28
 8002888:	4925      	ldr	r1, [pc, #148]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d011      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	019a      	lsls	r2, r3, #6
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	071b      	lsls	r3, r3, #28
 80028b8:	4919      	ldr	r1, [pc, #100]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a16      	ldr	r2, [pc, #88]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe fd00 	bl	80012d0 <HAL_GetTick>
 80028d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028d4:	f7fe fcfc 	bl	80012d0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0d7      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	f040 80cd 	bne.w	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a08      	ldr	r2, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002906:	f7fe fce3 	bl	80012d0 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800290e:	f7fe fcdf 	bl	80012d0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	; 0x64
 800291a:	d903      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0ba      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002920:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002924:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800292c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002930:	d0ed      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02e      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12a      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800295a:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002968:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	0f1b      	lsrs	r3, r3, #28
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	019a      	lsls	r2, r3, #6
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	061b      	lsls	r3, r3, #24
 8002988:	431a      	orrs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	071b      	lsls	r3, r3, #28
 800298e:	4944      	ldr	r1, [pc, #272]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	493d      	ldr	r1, [pc, #244]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d022      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c4:	d11d      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	0e1b      	lsrs	r3, r3, #24
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	0f1b      	lsrs	r3, r3, #28
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	019a      	lsls	r2, r3, #6
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	431a      	orrs	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	071b      	lsls	r3, r3, #28
 80029fa:	4929      	ldr	r1, [pc, #164]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	0e1b      	lsrs	r3, r3, #24
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4917      	ldr	r1, [pc, #92]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	4911      	ldr	r1, [pc, #68]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fc30 	bl	80012d0 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a74:	f7fe fc2c 	bl	80012d0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e007      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a92:	d1ef      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e040      	b.n	8002b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fa64 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	; 0x24
 8002ad0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f82c 	bl	8002b40 <UART_SetConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e022      	b.n	8002b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa84 	bl	8003008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fb0b 	bl	800314c <UART_CheckIdleState>
 8002b36:	4603      	mov	r3, r0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4ba6      	ldr	r3, [pc, #664]	; (8002e04 <UART_SetConfig+0x2c4>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	6979      	ldr	r1, [r7, #20]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a94      	ldr	r2, [pc, #592]	; (8002e08 <UART_SetConfig+0x2c8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d120      	bne.n	8002bfe <UART_SetConfig+0xbe>
 8002bbc:	4b93      	ldr	r3, [pc, #588]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d816      	bhi.n	8002bf8 <UART_SetConfig+0xb8>
 8002bca:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <UART_SetConfig+0x90>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002bed 	.word	0x08002bed
 8002bd8:	08002be7 	.word	0x08002be7
 8002bdc:	08002bf3 	.word	0x08002bf3
 8002be0:	2301      	movs	r3, #1
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e150      	b.n	8002e88 <UART_SetConfig+0x348>
 8002be6:	2302      	movs	r3, #2
 8002be8:	77fb      	strb	r3, [r7, #31]
 8002bea:	e14d      	b.n	8002e88 <UART_SetConfig+0x348>
 8002bec:	2304      	movs	r3, #4
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e14a      	b.n	8002e88 <UART_SetConfig+0x348>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	77fb      	strb	r3, [r7, #31]
 8002bf6:	e147      	b.n	8002e88 <UART_SetConfig+0x348>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e144      	b.n	8002e88 <UART_SetConfig+0x348>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a83      	ldr	r2, [pc, #524]	; (8002e10 <UART_SetConfig+0x2d0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d132      	bne.n	8002c6e <UART_SetConfig+0x12e>
 8002c08:	4b80      	ldr	r3, [pc, #512]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d828      	bhi.n	8002c68 <UART_SetConfig+0x128>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <UART_SetConfig+0xdc>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c51 	.word	0x08002c51
 8002c20:	08002c69 	.word	0x08002c69
 8002c24:	08002c69 	.word	0x08002c69
 8002c28:	08002c69 	.word	0x08002c69
 8002c2c:	08002c5d 	.word	0x08002c5d
 8002c30:	08002c69 	.word	0x08002c69
 8002c34:	08002c69 	.word	0x08002c69
 8002c38:	08002c69 	.word	0x08002c69
 8002c3c:	08002c57 	.word	0x08002c57
 8002c40:	08002c69 	.word	0x08002c69
 8002c44:	08002c69 	.word	0x08002c69
 8002c48:	08002c69 	.word	0x08002c69
 8002c4c:	08002c63 	.word	0x08002c63
 8002c50:	2300      	movs	r3, #0
 8002c52:	77fb      	strb	r3, [r7, #31]
 8002c54:	e118      	b.n	8002e88 <UART_SetConfig+0x348>
 8002c56:	2302      	movs	r3, #2
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	e115      	b.n	8002e88 <UART_SetConfig+0x348>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e112      	b.n	8002e88 <UART_SetConfig+0x348>
 8002c62:	2308      	movs	r3, #8
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e10f      	b.n	8002e88 <UART_SetConfig+0x348>
 8002c68:	2310      	movs	r3, #16
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e10c      	b.n	8002e88 <UART_SetConfig+0x348>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a68      	ldr	r2, [pc, #416]	; (8002e14 <UART_SetConfig+0x2d4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d120      	bne.n	8002cba <UART_SetConfig+0x17a>
 8002c78:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c82:	2b30      	cmp	r3, #48	; 0x30
 8002c84:	d013      	beq.n	8002cae <UART_SetConfig+0x16e>
 8002c86:	2b30      	cmp	r3, #48	; 0x30
 8002c88:	d814      	bhi.n	8002cb4 <UART_SetConfig+0x174>
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d009      	beq.n	8002ca2 <UART_SetConfig+0x162>
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d810      	bhi.n	8002cb4 <UART_SetConfig+0x174>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <UART_SetConfig+0x15c>
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d006      	beq.n	8002ca8 <UART_SetConfig+0x168>
 8002c9a:	e00b      	b.n	8002cb4 <UART_SetConfig+0x174>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e0f2      	b.n	8002e88 <UART_SetConfig+0x348>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e0ef      	b.n	8002e88 <UART_SetConfig+0x348>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e0ec      	b.n	8002e88 <UART_SetConfig+0x348>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e0e9      	b.n	8002e88 <UART_SetConfig+0x348>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e0e6      	b.n	8002e88 <UART_SetConfig+0x348>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a56      	ldr	r2, [pc, #344]	; (8002e18 <UART_SetConfig+0x2d8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d120      	bne.n	8002d06 <UART_SetConfig+0x1c6>
 8002cc4:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cce:	2bc0      	cmp	r3, #192	; 0xc0
 8002cd0:	d013      	beq.n	8002cfa <UART_SetConfig+0x1ba>
 8002cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cd4:	d814      	bhi.n	8002d00 <UART_SetConfig+0x1c0>
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d009      	beq.n	8002cee <UART_SetConfig+0x1ae>
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d810      	bhi.n	8002d00 <UART_SetConfig+0x1c0>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <UART_SetConfig+0x1a8>
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d006      	beq.n	8002cf4 <UART_SetConfig+0x1b4>
 8002ce6:	e00b      	b.n	8002d00 <UART_SetConfig+0x1c0>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e0cc      	b.n	8002e88 <UART_SetConfig+0x348>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e0c9      	b.n	8002e88 <UART_SetConfig+0x348>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e0c6      	b.n	8002e88 <UART_SetConfig+0x348>
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e0c3      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d00:	2310      	movs	r3, #16
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	e0c0      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a44      	ldr	r2, [pc, #272]	; (8002e1c <UART_SetConfig+0x2dc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d125      	bne.n	8002d5c <UART_SetConfig+0x21c>
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d1e:	d017      	beq.n	8002d50 <UART_SetConfig+0x210>
 8002d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d24:	d817      	bhi.n	8002d56 <UART_SetConfig+0x216>
 8002d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2a:	d00b      	beq.n	8002d44 <UART_SetConfig+0x204>
 8002d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d30:	d811      	bhi.n	8002d56 <UART_SetConfig+0x216>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <UART_SetConfig+0x1fe>
 8002d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3a:	d006      	beq.n	8002d4a <UART_SetConfig+0x20a>
 8002d3c:	e00b      	b.n	8002d56 <UART_SetConfig+0x216>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	77fb      	strb	r3, [r7, #31]
 8002d42:	e0a1      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d44:	2302      	movs	r3, #2
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e09e      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	77fb      	strb	r3, [r7, #31]
 8002d4e:	e09b      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d50:	2308      	movs	r3, #8
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e098      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d56:	2310      	movs	r3, #16
 8002d58:	77fb      	strb	r3, [r7, #31]
 8002d5a:	e095      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2f      	ldr	r2, [pc, #188]	; (8002e20 <UART_SetConfig+0x2e0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d125      	bne.n	8002db2 <UART_SetConfig+0x272>
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d74:	d017      	beq.n	8002da6 <UART_SetConfig+0x266>
 8002d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d7a:	d817      	bhi.n	8002dac <UART_SetConfig+0x26c>
 8002d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d80:	d00b      	beq.n	8002d9a <UART_SetConfig+0x25a>
 8002d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d86:	d811      	bhi.n	8002dac <UART_SetConfig+0x26c>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <UART_SetConfig+0x254>
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d90:	d006      	beq.n	8002da0 <UART_SetConfig+0x260>
 8002d92:	e00b      	b.n	8002dac <UART_SetConfig+0x26c>
 8002d94:	2301      	movs	r3, #1
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e076      	b.n	8002e88 <UART_SetConfig+0x348>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	77fb      	strb	r3, [r7, #31]
 8002d9e:	e073      	b.n	8002e88 <UART_SetConfig+0x348>
 8002da0:	2304      	movs	r3, #4
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e070      	b.n	8002e88 <UART_SetConfig+0x348>
 8002da6:	2308      	movs	r3, #8
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e06d      	b.n	8002e88 <UART_SetConfig+0x348>
 8002dac:	2310      	movs	r3, #16
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e06a      	b.n	8002e88 <UART_SetConfig+0x348>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <UART_SetConfig+0x2e4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d138      	bne.n	8002e2e <UART_SetConfig+0x2ee>
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <UART_SetConfig+0x2cc>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dca:	d017      	beq.n	8002dfc <UART_SetConfig+0x2bc>
 8002dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dd0:	d82a      	bhi.n	8002e28 <UART_SetConfig+0x2e8>
 8002dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd6:	d00b      	beq.n	8002df0 <UART_SetConfig+0x2b0>
 8002dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ddc:	d824      	bhi.n	8002e28 <UART_SetConfig+0x2e8>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <UART_SetConfig+0x2aa>
 8002de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de6:	d006      	beq.n	8002df6 <UART_SetConfig+0x2b6>
 8002de8:	e01e      	b.n	8002e28 <UART_SetConfig+0x2e8>
 8002dea:	2300      	movs	r3, #0
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e04b      	b.n	8002e88 <UART_SetConfig+0x348>
 8002df0:	2302      	movs	r3, #2
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e048      	b.n	8002e88 <UART_SetConfig+0x348>
 8002df6:	2304      	movs	r3, #4
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	e045      	b.n	8002e88 <UART_SetConfig+0x348>
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e042      	b.n	8002e88 <UART_SetConfig+0x348>
 8002e02:	bf00      	nop
 8002e04:	efff69f3 	.word	0xefff69f3
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40004400 	.word	0x40004400
 8002e14:	40004800 	.word	0x40004800
 8002e18:	40004c00 	.word	0x40004c00
 8002e1c:	40005000 	.word	0x40005000
 8002e20:	40011400 	.word	0x40011400
 8002e24:	40007800 	.word	0x40007800
 8002e28:	2310      	movs	r3, #16
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e02c      	b.n	8002e88 <UART_SetConfig+0x348>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a72      	ldr	r2, [pc, #456]	; (8002ffc <UART_SetConfig+0x4bc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d125      	bne.n	8002e84 <UART_SetConfig+0x344>
 8002e38:	4b71      	ldr	r3, [pc, #452]	; (8003000 <UART_SetConfig+0x4c0>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e46:	d017      	beq.n	8002e78 <UART_SetConfig+0x338>
 8002e48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e4c:	d817      	bhi.n	8002e7e <UART_SetConfig+0x33e>
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	d00b      	beq.n	8002e6c <UART_SetConfig+0x32c>
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	d811      	bhi.n	8002e7e <UART_SetConfig+0x33e>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <UART_SetConfig+0x326>
 8002e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e62:	d006      	beq.n	8002e72 <UART_SetConfig+0x332>
 8002e64:	e00b      	b.n	8002e7e <UART_SetConfig+0x33e>
 8002e66:	2300      	movs	r3, #0
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e00d      	b.n	8002e88 <UART_SetConfig+0x348>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e00a      	b.n	8002e88 <UART_SetConfig+0x348>
 8002e72:	2304      	movs	r3, #4
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e007      	b.n	8002e88 <UART_SetConfig+0x348>
 8002e78:	2308      	movs	r3, #8
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e004      	b.n	8002e88 <UART_SetConfig+0x348>
 8002e7e:	2310      	movs	r3, #16
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e001      	b.n	8002e88 <UART_SetConfig+0x348>
 8002e84:	2310      	movs	r3, #16
 8002e86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e90:	d15b      	bne.n	8002f4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d828      	bhi.n	8002eea <UART_SetConfig+0x3aa>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0x360>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	08002eeb 	.word	0x08002eeb
 8002eb0:	08002edb 	.word	0x08002edb
 8002eb4:	08002eeb 	.word	0x08002eeb
 8002eb8:	08002eeb 	.word	0x08002eeb
 8002ebc:	08002eeb 	.word	0x08002eeb
 8002ec0:	08002ee3 	.word	0x08002ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7ff f9d6 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	61b8      	str	r0, [r7, #24]
        break;
 8002eca:	e013      	b.n	8002ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ecc:	f7ff f9e6 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 8002ed0:	61b8      	str	r0, [r7, #24]
        break;
 8002ed2:	e00f      	b.n	8002ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <UART_SetConfig+0x4c4>)
 8002ed6:	61bb      	str	r3, [r7, #24]
        break;
 8002ed8:	e00c      	b.n	8002ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eda:	f7ff f8b9 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002ede:	61b8      	str	r0, [r7, #24]
        break;
 8002ee0:	e008      	b.n	8002ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee6:	61bb      	str	r3, [r7, #24]
        break;
 8002ee8:	e004      	b.n	8002ef4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8002ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d074      	beq.n	8002fe4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	005a      	lsls	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	441a      	add	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	d916      	bls.n	8002f44 <UART_SetConfig+0x404>
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d212      	bcs.n	8002f44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f023 030f 	bic.w	r3, r3, #15
 8002f26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	89fb      	ldrh	r3, [r7, #14]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	89fa      	ldrh	r2, [r7, #14]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	e04f      	b.n	8002fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	77bb      	strb	r3, [r7, #30]
 8002f48:	e04c      	b.n	8002fe4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d828      	bhi.n	8002fa2 <UART_SetConfig+0x462>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <UART_SetConfig+0x418>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f85 	.word	0x08002f85
 8002f60:	08002f8d 	.word	0x08002f8d
 8002f64:	08002fa3 	.word	0x08002fa3
 8002f68:	08002f93 	.word	0x08002f93
 8002f6c:	08002fa3 	.word	0x08002fa3
 8002f70:	08002fa3 	.word	0x08002fa3
 8002f74:	08002fa3 	.word	0x08002fa3
 8002f78:	08002f9b 	.word	0x08002f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f7ff f97a 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8002f80:	61b8      	str	r0, [r7, #24]
        break;
 8002f82:	e013      	b.n	8002fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff f98a 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 8002f88:	61b8      	str	r0, [r7, #24]
        break;
 8002f8a:	e00f      	b.n	8002fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <UART_SetConfig+0x4c4>)
 8002f8e:	61bb      	str	r3, [r7, #24]
        break;
 8002f90:	e00c      	b.n	8002fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f92:	f7ff f85d 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002f96:	61b8      	str	r0, [r7, #24]
        break;
 8002f98:	e008      	b.n	8002fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9e:	61bb      	str	r3, [r7, #24]
        break;
 8002fa0:	e004      	b.n	8002fac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8002faa:	bf00      	nop
    }

    if (pclk != 0U)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	085a      	lsrs	r2, r3, #1
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	441a      	add	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d909      	bls.n	8002fe0 <UART_SetConfig+0x4a0>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd2:	d205      	bcs.n	8002fe0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	e001      	b.n	8002fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40007c00 	.word	0x40007c00
 8003000:	40023800 	.word	0x40023800
 8003004:	00f42400 	.word	0x00f42400

08003008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01a      	beq.n	800311e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003106:	d10a      	bne.n	800311e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af02      	add	r7, sp, #8
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800315c:	f7fe f8b8 	bl	80012d0 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b08      	cmp	r3, #8
 800316e:	d10e      	bne.n	800318e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f817 	bl	80031b2 <UART_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00d      	b.n	80031aa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b09c      	sub	sp, #112	; 0x70
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c2:	e0a5      	b.n	8003310 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	f000 80a1 	beq.w	8003310 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fe f87f 	bl	80012d0 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80031de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d13e      	bne.n	8003262 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031f8:	667b      	str	r3, [r7, #100]	; 0x64
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003204:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003208:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e6      	bne.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3308      	adds	r3, #8
 800321c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	663b      	str	r3, [r7, #96]	; 0x60
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3308      	adds	r3, #8
 8003234:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003236:	64ba      	str	r2, [r7, #72]	; 0x48
 8003238:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800323c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e5      	bne.n	8003216 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e067      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d04f      	beq.n	8003310 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327e:	d147      	bne.n	8003310 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003288:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800329e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
 80032aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e6      	bne.n	800328a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3308      	adds	r3, #8
 80032c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	e853 3f00 	ldrex	r3, [r3]
 80032ca:	613b      	str	r3, [r7, #16]
   return(result);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032dc:	623a      	str	r2, [r7, #32]
 80032de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	69f9      	ldr	r1, [r7, #28]
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e5      	bne.n	80032bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e010      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4013      	ands	r3, r2
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	429a      	cmp	r2, r3
 800332c:	f43f af4a 	beq.w	80031c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3770      	adds	r7, #112	; 0x70
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <__errno>:
 800333c:	4b01      	ldr	r3, [pc, #4]	; (8003344 <__errno+0x8>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	2000000c 	.word	0x2000000c

08003348 <__libc_init_array>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4d0d      	ldr	r5, [pc, #52]	; (8003380 <__libc_init_array+0x38>)
 800334c:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <__libc_init_array+0x3c>)
 800334e:	1b64      	subs	r4, r4, r5
 8003350:	10a4      	asrs	r4, r4, #2
 8003352:	2600      	movs	r6, #0
 8003354:	42a6      	cmp	r6, r4
 8003356:	d109      	bne.n	800336c <__libc_init_array+0x24>
 8003358:	4d0b      	ldr	r5, [pc, #44]	; (8003388 <__libc_init_array+0x40>)
 800335a:	4c0c      	ldr	r4, [pc, #48]	; (800338c <__libc_init_array+0x44>)
 800335c:	f001 f824 	bl	80043a8 <_init>
 8003360:	1b64      	subs	r4, r4, r5
 8003362:	10a4      	asrs	r4, r4, #2
 8003364:	2600      	movs	r6, #0
 8003366:	42a6      	cmp	r6, r4
 8003368:	d105      	bne.n	8003376 <__libc_init_array+0x2e>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003370:	4798      	blx	r3
 8003372:	3601      	adds	r6, #1
 8003374:	e7ee      	b.n	8003354 <__libc_init_array+0xc>
 8003376:	f855 3b04 	ldr.w	r3, [r5], #4
 800337a:	4798      	blx	r3
 800337c:	3601      	adds	r6, #1
 800337e:	e7f2      	b.n	8003366 <__libc_init_array+0x1e>
 8003380:	08004510 	.word	0x08004510
 8003384:	08004510 	.word	0x08004510
 8003388:	08004510 	.word	0x08004510
 800338c:	08004514 	.word	0x08004514

08003390 <memset>:
 8003390:	4402      	add	r2, r0
 8003392:	4603      	mov	r3, r0
 8003394:	4293      	cmp	r3, r2
 8003396:	d100      	bne.n	800339a <memset+0xa>
 8003398:	4770      	bx	lr
 800339a:	f803 1b01 	strb.w	r1, [r3], #1
 800339e:	e7f9      	b.n	8003394 <memset+0x4>

080033a0 <iprintf>:
 80033a0:	b40f      	push	{r0, r1, r2, r3}
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <iprintf+0x2c>)
 80033a4:	b513      	push	{r0, r1, r4, lr}
 80033a6:	681c      	ldr	r4, [r3, #0]
 80033a8:	b124      	cbz	r4, 80033b4 <iprintf+0x14>
 80033aa:	69a3      	ldr	r3, [r4, #24]
 80033ac:	b913      	cbnz	r3, 80033b4 <iprintf+0x14>
 80033ae:	4620      	mov	r0, r4
 80033b0:	f000 fa5e 	bl	8003870 <__sinit>
 80033b4:	ab05      	add	r3, sp, #20
 80033b6:	9a04      	ldr	r2, [sp, #16]
 80033b8:	68a1      	ldr	r1, [r4, #8]
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 fc67 	bl	8003c90 <_vfiprintf_r>
 80033c2:	b002      	add	sp, #8
 80033c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c8:	b004      	add	sp, #16
 80033ca:	4770      	bx	lr
 80033cc:	2000000c 	.word	0x2000000c

080033d0 <_puts_r>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	460e      	mov	r6, r1
 80033d4:	4605      	mov	r5, r0
 80033d6:	b118      	cbz	r0, 80033e0 <_puts_r+0x10>
 80033d8:	6983      	ldr	r3, [r0, #24]
 80033da:	b90b      	cbnz	r3, 80033e0 <_puts_r+0x10>
 80033dc:	f000 fa48 	bl	8003870 <__sinit>
 80033e0:	69ab      	ldr	r3, [r5, #24]
 80033e2:	68ac      	ldr	r4, [r5, #8]
 80033e4:	b913      	cbnz	r3, 80033ec <_puts_r+0x1c>
 80033e6:	4628      	mov	r0, r5
 80033e8:	f000 fa42 	bl	8003870 <__sinit>
 80033ec:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <_puts_r+0xd0>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	d120      	bne.n	8003434 <_puts_r+0x64>
 80033f2:	686c      	ldr	r4, [r5, #4]
 80033f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033f6:	07db      	lsls	r3, r3, #31
 80033f8:	d405      	bmi.n	8003406 <_puts_r+0x36>
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	0598      	lsls	r0, r3, #22
 80033fe:	d402      	bmi.n	8003406 <_puts_r+0x36>
 8003400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003402:	f000 fad3 	bl	80039ac <__retarget_lock_acquire_recursive>
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	0719      	lsls	r1, r3, #28
 800340a:	d51d      	bpl.n	8003448 <_puts_r+0x78>
 800340c:	6923      	ldr	r3, [r4, #16]
 800340e:	b1db      	cbz	r3, 8003448 <_puts_r+0x78>
 8003410:	3e01      	subs	r6, #1
 8003412:	68a3      	ldr	r3, [r4, #8]
 8003414:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003418:	3b01      	subs	r3, #1
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	bb39      	cbnz	r1, 800346e <_puts_r+0x9e>
 800341e:	2b00      	cmp	r3, #0
 8003420:	da38      	bge.n	8003494 <_puts_r+0xc4>
 8003422:	4622      	mov	r2, r4
 8003424:	210a      	movs	r1, #10
 8003426:	4628      	mov	r0, r5
 8003428:	f000 f848 	bl	80034bc <__swbuf_r>
 800342c:	3001      	adds	r0, #1
 800342e:	d011      	beq.n	8003454 <_puts_r+0x84>
 8003430:	250a      	movs	r5, #10
 8003432:	e011      	b.n	8003458 <_puts_r+0x88>
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <_puts_r+0xd4>)
 8003436:	429c      	cmp	r4, r3
 8003438:	d101      	bne.n	800343e <_puts_r+0x6e>
 800343a:	68ac      	ldr	r4, [r5, #8]
 800343c:	e7da      	b.n	80033f4 <_puts_r+0x24>
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <_puts_r+0xd8>)
 8003440:	429c      	cmp	r4, r3
 8003442:	bf08      	it	eq
 8003444:	68ec      	ldreq	r4, [r5, #12]
 8003446:	e7d5      	b.n	80033f4 <_puts_r+0x24>
 8003448:	4621      	mov	r1, r4
 800344a:	4628      	mov	r0, r5
 800344c:	f000 f888 	bl	8003560 <__swsetup_r>
 8003450:	2800      	cmp	r0, #0
 8003452:	d0dd      	beq.n	8003410 <_puts_r+0x40>
 8003454:	f04f 35ff 	mov.w	r5, #4294967295
 8003458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800345a:	07da      	lsls	r2, r3, #31
 800345c:	d405      	bmi.n	800346a <_puts_r+0x9a>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	059b      	lsls	r3, r3, #22
 8003462:	d402      	bmi.n	800346a <_puts_r+0x9a>
 8003464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003466:	f000 faa2 	bl	80039ae <__retarget_lock_release_recursive>
 800346a:	4628      	mov	r0, r5
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	2b00      	cmp	r3, #0
 8003470:	da04      	bge.n	800347c <_puts_r+0xac>
 8003472:	69a2      	ldr	r2, [r4, #24]
 8003474:	429a      	cmp	r2, r3
 8003476:	dc06      	bgt.n	8003486 <_puts_r+0xb6>
 8003478:	290a      	cmp	r1, #10
 800347a:	d004      	beq.n	8003486 <_puts_r+0xb6>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	6022      	str	r2, [r4, #0]
 8003482:	7019      	strb	r1, [r3, #0]
 8003484:	e7c5      	b.n	8003412 <_puts_r+0x42>
 8003486:	4622      	mov	r2, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 f817 	bl	80034bc <__swbuf_r>
 800348e:	3001      	adds	r0, #1
 8003490:	d1bf      	bne.n	8003412 <_puts_r+0x42>
 8003492:	e7df      	b.n	8003454 <_puts_r+0x84>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	250a      	movs	r5, #10
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	6022      	str	r2, [r4, #0]
 800349c:	701d      	strb	r5, [r3, #0]
 800349e:	e7db      	b.n	8003458 <_puts_r+0x88>
 80034a0:	08004494 	.word	0x08004494
 80034a4:	080044b4 	.word	0x080044b4
 80034a8:	08004474 	.word	0x08004474

080034ac <puts>:
 80034ac:	4b02      	ldr	r3, [pc, #8]	; (80034b8 <puts+0xc>)
 80034ae:	4601      	mov	r1, r0
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	f7ff bf8d 	b.w	80033d0 <_puts_r>
 80034b6:	bf00      	nop
 80034b8:	2000000c 	.word	0x2000000c

080034bc <__swbuf_r>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	460e      	mov	r6, r1
 80034c0:	4614      	mov	r4, r2
 80034c2:	4605      	mov	r5, r0
 80034c4:	b118      	cbz	r0, 80034ce <__swbuf_r+0x12>
 80034c6:	6983      	ldr	r3, [r0, #24]
 80034c8:	b90b      	cbnz	r3, 80034ce <__swbuf_r+0x12>
 80034ca:	f000 f9d1 	bl	8003870 <__sinit>
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <__swbuf_r+0x98>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	d12b      	bne.n	800352c <__swbuf_r+0x70>
 80034d4:	686c      	ldr	r4, [r5, #4]
 80034d6:	69a3      	ldr	r3, [r4, #24]
 80034d8:	60a3      	str	r3, [r4, #8]
 80034da:	89a3      	ldrh	r3, [r4, #12]
 80034dc:	071a      	lsls	r2, r3, #28
 80034de:	d52f      	bpl.n	8003540 <__swbuf_r+0x84>
 80034e0:	6923      	ldr	r3, [r4, #16]
 80034e2:	b36b      	cbz	r3, 8003540 <__swbuf_r+0x84>
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	1ac0      	subs	r0, r0, r3
 80034ea:	6963      	ldr	r3, [r4, #20]
 80034ec:	b2f6      	uxtb	r6, r6
 80034ee:	4283      	cmp	r3, r0
 80034f0:	4637      	mov	r7, r6
 80034f2:	dc04      	bgt.n	80034fe <__swbuf_r+0x42>
 80034f4:	4621      	mov	r1, r4
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 f926 	bl	8003748 <_fflush_r>
 80034fc:	bb30      	cbnz	r0, 800354c <__swbuf_r+0x90>
 80034fe:	68a3      	ldr	r3, [r4, #8]
 8003500:	3b01      	subs	r3, #1
 8003502:	60a3      	str	r3, [r4, #8]
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	6022      	str	r2, [r4, #0]
 800350a:	701e      	strb	r6, [r3, #0]
 800350c:	6963      	ldr	r3, [r4, #20]
 800350e:	3001      	adds	r0, #1
 8003510:	4283      	cmp	r3, r0
 8003512:	d004      	beq.n	800351e <__swbuf_r+0x62>
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	07db      	lsls	r3, r3, #31
 8003518:	d506      	bpl.n	8003528 <__swbuf_r+0x6c>
 800351a:	2e0a      	cmp	r6, #10
 800351c:	d104      	bne.n	8003528 <__swbuf_r+0x6c>
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	f000 f911 	bl	8003748 <_fflush_r>
 8003526:	b988      	cbnz	r0, 800354c <__swbuf_r+0x90>
 8003528:	4638      	mov	r0, r7
 800352a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <__swbuf_r+0x9c>)
 800352e:	429c      	cmp	r4, r3
 8003530:	d101      	bne.n	8003536 <__swbuf_r+0x7a>
 8003532:	68ac      	ldr	r4, [r5, #8]
 8003534:	e7cf      	b.n	80034d6 <__swbuf_r+0x1a>
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <__swbuf_r+0xa0>)
 8003538:	429c      	cmp	r4, r3
 800353a:	bf08      	it	eq
 800353c:	68ec      	ldreq	r4, [r5, #12]
 800353e:	e7ca      	b.n	80034d6 <__swbuf_r+0x1a>
 8003540:	4621      	mov	r1, r4
 8003542:	4628      	mov	r0, r5
 8003544:	f000 f80c 	bl	8003560 <__swsetup_r>
 8003548:	2800      	cmp	r0, #0
 800354a:	d0cb      	beq.n	80034e4 <__swbuf_r+0x28>
 800354c:	f04f 37ff 	mov.w	r7, #4294967295
 8003550:	e7ea      	b.n	8003528 <__swbuf_r+0x6c>
 8003552:	bf00      	nop
 8003554:	08004494 	.word	0x08004494
 8003558:	080044b4 	.word	0x080044b4
 800355c:	08004474 	.word	0x08004474

08003560 <__swsetup_r>:
 8003560:	4b32      	ldr	r3, [pc, #200]	; (800362c <__swsetup_r+0xcc>)
 8003562:	b570      	push	{r4, r5, r6, lr}
 8003564:	681d      	ldr	r5, [r3, #0]
 8003566:	4606      	mov	r6, r0
 8003568:	460c      	mov	r4, r1
 800356a:	b125      	cbz	r5, 8003576 <__swsetup_r+0x16>
 800356c:	69ab      	ldr	r3, [r5, #24]
 800356e:	b913      	cbnz	r3, 8003576 <__swsetup_r+0x16>
 8003570:	4628      	mov	r0, r5
 8003572:	f000 f97d 	bl	8003870 <__sinit>
 8003576:	4b2e      	ldr	r3, [pc, #184]	; (8003630 <__swsetup_r+0xd0>)
 8003578:	429c      	cmp	r4, r3
 800357a:	d10f      	bne.n	800359c <__swsetup_r+0x3c>
 800357c:	686c      	ldr	r4, [r5, #4]
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003584:	0719      	lsls	r1, r3, #28
 8003586:	d42c      	bmi.n	80035e2 <__swsetup_r+0x82>
 8003588:	06dd      	lsls	r5, r3, #27
 800358a:	d411      	bmi.n	80035b0 <__swsetup_r+0x50>
 800358c:	2309      	movs	r3, #9
 800358e:	6033      	str	r3, [r6, #0]
 8003590:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	f04f 30ff 	mov.w	r0, #4294967295
 800359a:	e03e      	b.n	800361a <__swsetup_r+0xba>
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <__swsetup_r+0xd4>)
 800359e:	429c      	cmp	r4, r3
 80035a0:	d101      	bne.n	80035a6 <__swsetup_r+0x46>
 80035a2:	68ac      	ldr	r4, [r5, #8]
 80035a4:	e7eb      	b.n	800357e <__swsetup_r+0x1e>
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <__swsetup_r+0xd8>)
 80035a8:	429c      	cmp	r4, r3
 80035aa:	bf08      	it	eq
 80035ac:	68ec      	ldreq	r4, [r5, #12]
 80035ae:	e7e6      	b.n	800357e <__swsetup_r+0x1e>
 80035b0:	0758      	lsls	r0, r3, #29
 80035b2:	d512      	bpl.n	80035da <__swsetup_r+0x7a>
 80035b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035b6:	b141      	cbz	r1, 80035ca <__swsetup_r+0x6a>
 80035b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035bc:	4299      	cmp	r1, r3
 80035be:	d002      	beq.n	80035c6 <__swsetup_r+0x66>
 80035c0:	4630      	mov	r0, r6
 80035c2:	f000 fa5b 	bl	8003a7c <_free_r>
 80035c6:	2300      	movs	r3, #0
 80035c8:	6363      	str	r3, [r4, #52]	; 0x34
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035d0:	81a3      	strh	r3, [r4, #12]
 80035d2:	2300      	movs	r3, #0
 80035d4:	6063      	str	r3, [r4, #4]
 80035d6:	6923      	ldr	r3, [r4, #16]
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	81a3      	strh	r3, [r4, #12]
 80035e2:	6923      	ldr	r3, [r4, #16]
 80035e4:	b94b      	cbnz	r3, 80035fa <__swsetup_r+0x9a>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f0:	d003      	beq.n	80035fa <__swsetup_r+0x9a>
 80035f2:	4621      	mov	r1, r4
 80035f4:	4630      	mov	r0, r6
 80035f6:	f000 fa01 	bl	80039fc <__smakebuf_r>
 80035fa:	89a0      	ldrh	r0, [r4, #12]
 80035fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003600:	f010 0301 	ands.w	r3, r0, #1
 8003604:	d00a      	beq.n	800361c <__swsetup_r+0xbc>
 8003606:	2300      	movs	r3, #0
 8003608:	60a3      	str	r3, [r4, #8]
 800360a:	6963      	ldr	r3, [r4, #20]
 800360c:	425b      	negs	r3, r3
 800360e:	61a3      	str	r3, [r4, #24]
 8003610:	6923      	ldr	r3, [r4, #16]
 8003612:	b943      	cbnz	r3, 8003626 <__swsetup_r+0xc6>
 8003614:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003618:	d1ba      	bne.n	8003590 <__swsetup_r+0x30>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	0781      	lsls	r1, r0, #30
 800361e:	bf58      	it	pl
 8003620:	6963      	ldrpl	r3, [r4, #20]
 8003622:	60a3      	str	r3, [r4, #8]
 8003624:	e7f4      	b.n	8003610 <__swsetup_r+0xb0>
 8003626:	2000      	movs	r0, #0
 8003628:	e7f7      	b.n	800361a <__swsetup_r+0xba>
 800362a:	bf00      	nop
 800362c:	2000000c 	.word	0x2000000c
 8003630:	08004494 	.word	0x08004494
 8003634:	080044b4 	.word	0x080044b4
 8003638:	08004474 	.word	0x08004474

0800363c <__sflush_r>:
 800363c:	898a      	ldrh	r2, [r1, #12]
 800363e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003642:	4605      	mov	r5, r0
 8003644:	0710      	lsls	r0, r2, #28
 8003646:	460c      	mov	r4, r1
 8003648:	d458      	bmi.n	80036fc <__sflush_r+0xc0>
 800364a:	684b      	ldr	r3, [r1, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	dc05      	bgt.n	800365c <__sflush_r+0x20>
 8003650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	dc02      	bgt.n	800365c <__sflush_r+0x20>
 8003656:	2000      	movs	r0, #0
 8003658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800365c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800365e:	2e00      	cmp	r6, #0
 8003660:	d0f9      	beq.n	8003656 <__sflush_r+0x1a>
 8003662:	2300      	movs	r3, #0
 8003664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003668:	682f      	ldr	r7, [r5, #0]
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	d032      	beq.n	80036d4 <__sflush_r+0x98>
 800366e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	075a      	lsls	r2, r3, #29
 8003674:	d505      	bpl.n	8003682 <__sflush_r+0x46>
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	1ac0      	subs	r0, r0, r3
 800367a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800367c:	b10b      	cbz	r3, 8003682 <__sflush_r+0x46>
 800367e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003680:	1ac0      	subs	r0, r0, r3
 8003682:	2300      	movs	r3, #0
 8003684:	4602      	mov	r2, r0
 8003686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003688:	6a21      	ldr	r1, [r4, #32]
 800368a:	4628      	mov	r0, r5
 800368c:	47b0      	blx	r6
 800368e:	1c43      	adds	r3, r0, #1
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	d106      	bne.n	80036a2 <__sflush_r+0x66>
 8003694:	6829      	ldr	r1, [r5, #0]
 8003696:	291d      	cmp	r1, #29
 8003698:	d82c      	bhi.n	80036f4 <__sflush_r+0xb8>
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <__sflush_r+0x108>)
 800369c:	40ca      	lsrs	r2, r1
 800369e:	07d6      	lsls	r6, r2, #31
 80036a0:	d528      	bpl.n	80036f4 <__sflush_r+0xb8>
 80036a2:	2200      	movs	r2, #0
 80036a4:	6062      	str	r2, [r4, #4]
 80036a6:	04d9      	lsls	r1, r3, #19
 80036a8:	6922      	ldr	r2, [r4, #16]
 80036aa:	6022      	str	r2, [r4, #0]
 80036ac:	d504      	bpl.n	80036b8 <__sflush_r+0x7c>
 80036ae:	1c42      	adds	r2, r0, #1
 80036b0:	d101      	bne.n	80036b6 <__sflush_r+0x7a>
 80036b2:	682b      	ldr	r3, [r5, #0]
 80036b4:	b903      	cbnz	r3, 80036b8 <__sflush_r+0x7c>
 80036b6:	6560      	str	r0, [r4, #84]	; 0x54
 80036b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ba:	602f      	str	r7, [r5, #0]
 80036bc:	2900      	cmp	r1, #0
 80036be:	d0ca      	beq.n	8003656 <__sflush_r+0x1a>
 80036c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c4:	4299      	cmp	r1, r3
 80036c6:	d002      	beq.n	80036ce <__sflush_r+0x92>
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 f9d7 	bl	8003a7c <_free_r>
 80036ce:	2000      	movs	r0, #0
 80036d0:	6360      	str	r0, [r4, #52]	; 0x34
 80036d2:	e7c1      	b.n	8003658 <__sflush_r+0x1c>
 80036d4:	6a21      	ldr	r1, [r4, #32]
 80036d6:	2301      	movs	r3, #1
 80036d8:	4628      	mov	r0, r5
 80036da:	47b0      	blx	r6
 80036dc:	1c41      	adds	r1, r0, #1
 80036de:	d1c7      	bne.n	8003670 <__sflush_r+0x34>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0c4      	beq.n	8003670 <__sflush_r+0x34>
 80036e6:	2b1d      	cmp	r3, #29
 80036e8:	d001      	beq.n	80036ee <__sflush_r+0xb2>
 80036ea:	2b16      	cmp	r3, #22
 80036ec:	d101      	bne.n	80036f2 <__sflush_r+0xb6>
 80036ee:	602f      	str	r7, [r5, #0]
 80036f0:	e7b1      	b.n	8003656 <__sflush_r+0x1a>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	e7ad      	b.n	8003658 <__sflush_r+0x1c>
 80036fc:	690f      	ldr	r7, [r1, #16]
 80036fe:	2f00      	cmp	r7, #0
 8003700:	d0a9      	beq.n	8003656 <__sflush_r+0x1a>
 8003702:	0793      	lsls	r3, r2, #30
 8003704:	680e      	ldr	r6, [r1, #0]
 8003706:	bf08      	it	eq
 8003708:	694b      	ldreq	r3, [r1, #20]
 800370a:	600f      	str	r7, [r1, #0]
 800370c:	bf18      	it	ne
 800370e:	2300      	movne	r3, #0
 8003710:	eba6 0807 	sub.w	r8, r6, r7
 8003714:	608b      	str	r3, [r1, #8]
 8003716:	f1b8 0f00 	cmp.w	r8, #0
 800371a:	dd9c      	ble.n	8003656 <__sflush_r+0x1a>
 800371c:	6a21      	ldr	r1, [r4, #32]
 800371e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003720:	4643      	mov	r3, r8
 8003722:	463a      	mov	r2, r7
 8003724:	4628      	mov	r0, r5
 8003726:	47b0      	blx	r6
 8003728:	2800      	cmp	r0, #0
 800372a:	dc06      	bgt.n	800373a <__sflush_r+0xfe>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	e78e      	b.n	8003658 <__sflush_r+0x1c>
 800373a:	4407      	add	r7, r0
 800373c:	eba8 0800 	sub.w	r8, r8, r0
 8003740:	e7e9      	b.n	8003716 <__sflush_r+0xda>
 8003742:	bf00      	nop
 8003744:	20400001 	.word	0x20400001

08003748 <_fflush_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	690b      	ldr	r3, [r1, #16]
 800374c:	4605      	mov	r5, r0
 800374e:	460c      	mov	r4, r1
 8003750:	b913      	cbnz	r3, 8003758 <_fflush_r+0x10>
 8003752:	2500      	movs	r5, #0
 8003754:	4628      	mov	r0, r5
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	b118      	cbz	r0, 8003762 <_fflush_r+0x1a>
 800375a:	6983      	ldr	r3, [r0, #24]
 800375c:	b90b      	cbnz	r3, 8003762 <_fflush_r+0x1a>
 800375e:	f000 f887 	bl	8003870 <__sinit>
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <_fflush_r+0x6c>)
 8003764:	429c      	cmp	r4, r3
 8003766:	d11b      	bne.n	80037a0 <_fflush_r+0x58>
 8003768:	686c      	ldr	r4, [r5, #4]
 800376a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ef      	beq.n	8003752 <_fflush_r+0xa>
 8003772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003774:	07d0      	lsls	r0, r2, #31
 8003776:	d404      	bmi.n	8003782 <_fflush_r+0x3a>
 8003778:	0599      	lsls	r1, r3, #22
 800377a:	d402      	bmi.n	8003782 <_fflush_r+0x3a>
 800377c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800377e:	f000 f915 	bl	80039ac <__retarget_lock_acquire_recursive>
 8003782:	4628      	mov	r0, r5
 8003784:	4621      	mov	r1, r4
 8003786:	f7ff ff59 	bl	800363c <__sflush_r>
 800378a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800378c:	07da      	lsls	r2, r3, #31
 800378e:	4605      	mov	r5, r0
 8003790:	d4e0      	bmi.n	8003754 <_fflush_r+0xc>
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	059b      	lsls	r3, r3, #22
 8003796:	d4dd      	bmi.n	8003754 <_fflush_r+0xc>
 8003798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800379a:	f000 f908 	bl	80039ae <__retarget_lock_release_recursive>
 800379e:	e7d9      	b.n	8003754 <_fflush_r+0xc>
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <_fflush_r+0x70>)
 80037a2:	429c      	cmp	r4, r3
 80037a4:	d101      	bne.n	80037aa <_fflush_r+0x62>
 80037a6:	68ac      	ldr	r4, [r5, #8]
 80037a8:	e7df      	b.n	800376a <_fflush_r+0x22>
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <_fflush_r+0x74>)
 80037ac:	429c      	cmp	r4, r3
 80037ae:	bf08      	it	eq
 80037b0:	68ec      	ldreq	r4, [r5, #12]
 80037b2:	e7da      	b.n	800376a <_fflush_r+0x22>
 80037b4:	08004494 	.word	0x08004494
 80037b8:	080044b4 	.word	0x080044b4
 80037bc:	08004474 	.word	0x08004474

080037c0 <std>:
 80037c0:	2300      	movs	r3, #0
 80037c2:	b510      	push	{r4, lr}
 80037c4:	4604      	mov	r4, r0
 80037c6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ce:	6083      	str	r3, [r0, #8]
 80037d0:	8181      	strh	r1, [r0, #12]
 80037d2:	6643      	str	r3, [r0, #100]	; 0x64
 80037d4:	81c2      	strh	r2, [r0, #14]
 80037d6:	6183      	str	r3, [r0, #24]
 80037d8:	4619      	mov	r1, r3
 80037da:	2208      	movs	r2, #8
 80037dc:	305c      	adds	r0, #92	; 0x5c
 80037de:	f7ff fdd7 	bl	8003390 <memset>
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <std+0x38>)
 80037e4:	6263      	str	r3, [r4, #36]	; 0x24
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <std+0x3c>)
 80037e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <std+0x40>)
 80037ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <std+0x44>)
 80037f0:	6224      	str	r4, [r4, #32]
 80037f2:	6323      	str	r3, [r4, #48]	; 0x30
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	bf00      	nop
 80037f8:	08004239 	.word	0x08004239
 80037fc:	0800425b 	.word	0x0800425b
 8003800:	08004293 	.word	0x08004293
 8003804:	080042b7 	.word	0x080042b7

08003808 <_cleanup_r>:
 8003808:	4901      	ldr	r1, [pc, #4]	; (8003810 <_cleanup_r+0x8>)
 800380a:	f000 b8af 	b.w	800396c <_fwalk_reent>
 800380e:	bf00      	nop
 8003810:	08003749 	.word	0x08003749

08003814 <__sfmoreglue>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	2268      	movs	r2, #104	; 0x68
 8003818:	1e4d      	subs	r5, r1, #1
 800381a:	4355      	muls	r5, r2
 800381c:	460e      	mov	r6, r1
 800381e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003822:	f000 f997 	bl	8003b54 <_malloc_r>
 8003826:	4604      	mov	r4, r0
 8003828:	b140      	cbz	r0, 800383c <__sfmoreglue+0x28>
 800382a:	2100      	movs	r1, #0
 800382c:	e9c0 1600 	strd	r1, r6, [r0]
 8003830:	300c      	adds	r0, #12
 8003832:	60a0      	str	r0, [r4, #8]
 8003834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003838:	f7ff fdaa 	bl	8003390 <memset>
 800383c:	4620      	mov	r0, r4
 800383e:	bd70      	pop	{r4, r5, r6, pc}

08003840 <__sfp_lock_acquire>:
 8003840:	4801      	ldr	r0, [pc, #4]	; (8003848 <__sfp_lock_acquire+0x8>)
 8003842:	f000 b8b3 	b.w	80039ac <__retarget_lock_acquire_recursive>
 8003846:	bf00      	nop
 8003848:	20000139 	.word	0x20000139

0800384c <__sfp_lock_release>:
 800384c:	4801      	ldr	r0, [pc, #4]	; (8003854 <__sfp_lock_release+0x8>)
 800384e:	f000 b8ae 	b.w	80039ae <__retarget_lock_release_recursive>
 8003852:	bf00      	nop
 8003854:	20000139 	.word	0x20000139

08003858 <__sinit_lock_acquire>:
 8003858:	4801      	ldr	r0, [pc, #4]	; (8003860 <__sinit_lock_acquire+0x8>)
 800385a:	f000 b8a7 	b.w	80039ac <__retarget_lock_acquire_recursive>
 800385e:	bf00      	nop
 8003860:	2000013a 	.word	0x2000013a

08003864 <__sinit_lock_release>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__sinit_lock_release+0x8>)
 8003866:	f000 b8a2 	b.w	80039ae <__retarget_lock_release_recursive>
 800386a:	bf00      	nop
 800386c:	2000013a 	.word	0x2000013a

08003870 <__sinit>:
 8003870:	b510      	push	{r4, lr}
 8003872:	4604      	mov	r4, r0
 8003874:	f7ff fff0 	bl	8003858 <__sinit_lock_acquire>
 8003878:	69a3      	ldr	r3, [r4, #24]
 800387a:	b11b      	cbz	r3, 8003884 <__sinit+0x14>
 800387c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003880:	f7ff bff0 	b.w	8003864 <__sinit_lock_release>
 8003884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003888:	6523      	str	r3, [r4, #80]	; 0x50
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <__sinit+0x68>)
 800388c:	4a13      	ldr	r2, [pc, #76]	; (80038dc <__sinit+0x6c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	62a2      	str	r2, [r4, #40]	; 0x28
 8003892:	42a3      	cmp	r3, r4
 8003894:	bf04      	itt	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	61a3      	streq	r3, [r4, #24]
 800389a:	4620      	mov	r0, r4
 800389c:	f000 f820 	bl	80038e0 <__sfp>
 80038a0:	6060      	str	r0, [r4, #4]
 80038a2:	4620      	mov	r0, r4
 80038a4:	f000 f81c 	bl	80038e0 <__sfp>
 80038a8:	60a0      	str	r0, [r4, #8]
 80038aa:	4620      	mov	r0, r4
 80038ac:	f000 f818 	bl	80038e0 <__sfp>
 80038b0:	2200      	movs	r2, #0
 80038b2:	60e0      	str	r0, [r4, #12]
 80038b4:	2104      	movs	r1, #4
 80038b6:	6860      	ldr	r0, [r4, #4]
 80038b8:	f7ff ff82 	bl	80037c0 <std>
 80038bc:	68a0      	ldr	r0, [r4, #8]
 80038be:	2201      	movs	r2, #1
 80038c0:	2109      	movs	r1, #9
 80038c2:	f7ff ff7d 	bl	80037c0 <std>
 80038c6:	68e0      	ldr	r0, [r4, #12]
 80038c8:	2202      	movs	r2, #2
 80038ca:	2112      	movs	r1, #18
 80038cc:	f7ff ff78 	bl	80037c0 <std>
 80038d0:	2301      	movs	r3, #1
 80038d2:	61a3      	str	r3, [r4, #24]
 80038d4:	e7d2      	b.n	800387c <__sinit+0xc>
 80038d6:	bf00      	nop
 80038d8:	08004470 	.word	0x08004470
 80038dc:	08003809 	.word	0x08003809

080038e0 <__sfp>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	4607      	mov	r7, r0
 80038e4:	f7ff ffac 	bl	8003840 <__sfp_lock_acquire>
 80038e8:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <__sfp+0x84>)
 80038ea:	681e      	ldr	r6, [r3, #0]
 80038ec:	69b3      	ldr	r3, [r6, #24]
 80038ee:	b913      	cbnz	r3, 80038f6 <__sfp+0x16>
 80038f0:	4630      	mov	r0, r6
 80038f2:	f7ff ffbd 	bl	8003870 <__sinit>
 80038f6:	3648      	adds	r6, #72	; 0x48
 80038f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	d503      	bpl.n	8003908 <__sfp+0x28>
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	b30b      	cbz	r3, 8003948 <__sfp+0x68>
 8003904:	6836      	ldr	r6, [r6, #0]
 8003906:	e7f7      	b.n	80038f8 <__sfp+0x18>
 8003908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800390c:	b9d5      	cbnz	r5, 8003944 <__sfp+0x64>
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <__sfp+0x88>)
 8003910:	60e3      	str	r3, [r4, #12]
 8003912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003916:	6665      	str	r5, [r4, #100]	; 0x64
 8003918:	f000 f847 	bl	80039aa <__retarget_lock_init_recursive>
 800391c:	f7ff ff96 	bl	800384c <__sfp_lock_release>
 8003920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003928:	6025      	str	r5, [r4, #0]
 800392a:	61a5      	str	r5, [r4, #24]
 800392c:	2208      	movs	r2, #8
 800392e:	4629      	mov	r1, r5
 8003930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003934:	f7ff fd2c 	bl	8003390 <memset>
 8003938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800393c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003940:	4620      	mov	r0, r4
 8003942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003944:	3468      	adds	r4, #104	; 0x68
 8003946:	e7d9      	b.n	80038fc <__sfp+0x1c>
 8003948:	2104      	movs	r1, #4
 800394a:	4638      	mov	r0, r7
 800394c:	f7ff ff62 	bl	8003814 <__sfmoreglue>
 8003950:	4604      	mov	r4, r0
 8003952:	6030      	str	r0, [r6, #0]
 8003954:	2800      	cmp	r0, #0
 8003956:	d1d5      	bne.n	8003904 <__sfp+0x24>
 8003958:	f7ff ff78 	bl	800384c <__sfp_lock_release>
 800395c:	230c      	movs	r3, #12
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	e7ee      	b.n	8003940 <__sfp+0x60>
 8003962:	bf00      	nop
 8003964:	08004470 	.word	0x08004470
 8003968:	ffff0001 	.word	0xffff0001

0800396c <_fwalk_reent>:
 800396c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003970:	4606      	mov	r6, r0
 8003972:	4688      	mov	r8, r1
 8003974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003978:	2700      	movs	r7, #0
 800397a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800397e:	f1b9 0901 	subs.w	r9, r9, #1
 8003982:	d505      	bpl.n	8003990 <_fwalk_reent+0x24>
 8003984:	6824      	ldr	r4, [r4, #0]
 8003986:	2c00      	cmp	r4, #0
 8003988:	d1f7      	bne.n	800397a <_fwalk_reent+0xe>
 800398a:	4638      	mov	r0, r7
 800398c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003990:	89ab      	ldrh	r3, [r5, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d907      	bls.n	80039a6 <_fwalk_reent+0x3a>
 8003996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800399a:	3301      	adds	r3, #1
 800399c:	d003      	beq.n	80039a6 <_fwalk_reent+0x3a>
 800399e:	4629      	mov	r1, r5
 80039a0:	4630      	mov	r0, r6
 80039a2:	47c0      	blx	r8
 80039a4:	4307      	orrs	r7, r0
 80039a6:	3568      	adds	r5, #104	; 0x68
 80039a8:	e7e9      	b.n	800397e <_fwalk_reent+0x12>

080039aa <__retarget_lock_init_recursive>:
 80039aa:	4770      	bx	lr

080039ac <__retarget_lock_acquire_recursive>:
 80039ac:	4770      	bx	lr

080039ae <__retarget_lock_release_recursive>:
 80039ae:	4770      	bx	lr

080039b0 <__swhatbuf_r>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	460e      	mov	r6, r1
 80039b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b8:	2900      	cmp	r1, #0
 80039ba:	b096      	sub	sp, #88	; 0x58
 80039bc:	4614      	mov	r4, r2
 80039be:	461d      	mov	r5, r3
 80039c0:	da08      	bge.n	80039d4 <__swhatbuf_r+0x24>
 80039c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	602a      	str	r2, [r5, #0]
 80039ca:	061a      	lsls	r2, r3, #24
 80039cc:	d410      	bmi.n	80039f0 <__swhatbuf_r+0x40>
 80039ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d2:	e00e      	b.n	80039f2 <__swhatbuf_r+0x42>
 80039d4:	466a      	mov	r2, sp
 80039d6:	f000 fc95 	bl	8004304 <_fstat_r>
 80039da:	2800      	cmp	r0, #0
 80039dc:	dbf1      	blt.n	80039c2 <__swhatbuf_r+0x12>
 80039de:	9a01      	ldr	r2, [sp, #4]
 80039e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039e8:	425a      	negs	r2, r3
 80039ea:	415a      	adcs	r2, r3
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	e7ee      	b.n	80039ce <__swhatbuf_r+0x1e>
 80039f0:	2340      	movs	r3, #64	; 0x40
 80039f2:	2000      	movs	r0, #0
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	b016      	add	sp, #88	; 0x58
 80039f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039fc <__smakebuf_r>:
 80039fc:	898b      	ldrh	r3, [r1, #12]
 80039fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a00:	079d      	lsls	r5, r3, #30
 8003a02:	4606      	mov	r6, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	d507      	bpl.n	8003a18 <__smakebuf_r+0x1c>
 8003a08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	6123      	str	r3, [r4, #16]
 8003a10:	2301      	movs	r3, #1
 8003a12:	6163      	str	r3, [r4, #20]
 8003a14:	b002      	add	sp, #8
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	ab01      	add	r3, sp, #4
 8003a1a:	466a      	mov	r2, sp
 8003a1c:	f7ff ffc8 	bl	80039b0 <__swhatbuf_r>
 8003a20:	9900      	ldr	r1, [sp, #0]
 8003a22:	4605      	mov	r5, r0
 8003a24:	4630      	mov	r0, r6
 8003a26:	f000 f895 	bl	8003b54 <_malloc_r>
 8003a2a:	b948      	cbnz	r0, 8003a40 <__smakebuf_r+0x44>
 8003a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a30:	059a      	lsls	r2, r3, #22
 8003a32:	d4ef      	bmi.n	8003a14 <__smakebuf_r+0x18>
 8003a34:	f023 0303 	bic.w	r3, r3, #3
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	81a3      	strh	r3, [r4, #12]
 8003a3e:	e7e3      	b.n	8003a08 <__smakebuf_r+0xc>
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <__smakebuf_r+0x7c>)
 8003a42:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	6020      	str	r0, [r4, #0]
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	9b00      	ldr	r3, [sp, #0]
 8003a50:	6163      	str	r3, [r4, #20]
 8003a52:	9b01      	ldr	r3, [sp, #4]
 8003a54:	6120      	str	r0, [r4, #16]
 8003a56:	b15b      	cbz	r3, 8003a70 <__smakebuf_r+0x74>
 8003a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f000 fc63 	bl	8004328 <_isatty_r>
 8003a62:	b128      	cbz	r0, 8003a70 <__smakebuf_r+0x74>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	89a0      	ldrh	r0, [r4, #12]
 8003a72:	4305      	orrs	r5, r0
 8003a74:	81a5      	strh	r5, [r4, #12]
 8003a76:	e7cd      	b.n	8003a14 <__smakebuf_r+0x18>
 8003a78:	08003809 	.word	0x08003809

08003a7c <_free_r>:
 8003a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a7e:	2900      	cmp	r1, #0
 8003a80:	d044      	beq.n	8003b0c <_free_r+0x90>
 8003a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a86:	9001      	str	r0, [sp, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a8e:	bfb8      	it	lt
 8003a90:	18e4      	addlt	r4, r4, r3
 8003a92:	f000 fc6b 	bl	800436c <__malloc_lock>
 8003a96:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <_free_r+0x94>)
 8003a98:	9801      	ldr	r0, [sp, #4]
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	b933      	cbnz	r3, 8003aac <_free_r+0x30>
 8003a9e:	6063      	str	r3, [r4, #4]
 8003aa0:	6014      	str	r4, [r2, #0]
 8003aa2:	b003      	add	sp, #12
 8003aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aa8:	f000 bc66 	b.w	8004378 <__malloc_unlock>
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	d908      	bls.n	8003ac2 <_free_r+0x46>
 8003ab0:	6825      	ldr	r5, [r4, #0]
 8003ab2:	1961      	adds	r1, r4, r5
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	bf01      	itttt	eq
 8003ab8:	6819      	ldreq	r1, [r3, #0]
 8003aba:	685b      	ldreq	r3, [r3, #4]
 8003abc:	1949      	addeq	r1, r1, r5
 8003abe:	6021      	streq	r1, [r4, #0]
 8003ac0:	e7ed      	b.n	8003a9e <_free_r+0x22>
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	b10b      	cbz	r3, 8003acc <_free_r+0x50>
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	d9fa      	bls.n	8003ac2 <_free_r+0x46>
 8003acc:	6811      	ldr	r1, [r2, #0]
 8003ace:	1855      	adds	r5, r2, r1
 8003ad0:	42a5      	cmp	r5, r4
 8003ad2:	d10b      	bne.n	8003aec <_free_r+0x70>
 8003ad4:	6824      	ldr	r4, [r4, #0]
 8003ad6:	4421      	add	r1, r4
 8003ad8:	1854      	adds	r4, r2, r1
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	6011      	str	r1, [r2, #0]
 8003ade:	d1e0      	bne.n	8003aa2 <_free_r+0x26>
 8003ae0:	681c      	ldr	r4, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	6053      	str	r3, [r2, #4]
 8003ae6:	4421      	add	r1, r4
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	e7da      	b.n	8003aa2 <_free_r+0x26>
 8003aec:	d902      	bls.n	8003af4 <_free_r+0x78>
 8003aee:	230c      	movs	r3, #12
 8003af0:	6003      	str	r3, [r0, #0]
 8003af2:	e7d6      	b.n	8003aa2 <_free_r+0x26>
 8003af4:	6825      	ldr	r5, [r4, #0]
 8003af6:	1961      	adds	r1, r4, r5
 8003af8:	428b      	cmp	r3, r1
 8003afa:	bf04      	itt	eq
 8003afc:	6819      	ldreq	r1, [r3, #0]
 8003afe:	685b      	ldreq	r3, [r3, #4]
 8003b00:	6063      	str	r3, [r4, #4]
 8003b02:	bf04      	itt	eq
 8003b04:	1949      	addeq	r1, r1, r5
 8003b06:	6021      	streq	r1, [r4, #0]
 8003b08:	6054      	str	r4, [r2, #4]
 8003b0a:	e7ca      	b.n	8003aa2 <_free_r+0x26>
 8003b0c:	b003      	add	sp, #12
 8003b0e:	bd30      	pop	{r4, r5, pc}
 8003b10:	2000013c 	.word	0x2000013c

08003b14 <sbrk_aligned>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	4e0e      	ldr	r6, [pc, #56]	; (8003b50 <sbrk_aligned+0x3c>)
 8003b18:	460c      	mov	r4, r1
 8003b1a:	6831      	ldr	r1, [r6, #0]
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	b911      	cbnz	r1, 8003b26 <sbrk_aligned+0x12>
 8003b20:	f000 fb7a 	bl	8004218 <_sbrk_r>
 8003b24:	6030      	str	r0, [r6, #0]
 8003b26:	4621      	mov	r1, r4
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f000 fb75 	bl	8004218 <_sbrk_r>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	d00a      	beq.n	8003b48 <sbrk_aligned+0x34>
 8003b32:	1cc4      	adds	r4, r0, #3
 8003b34:	f024 0403 	bic.w	r4, r4, #3
 8003b38:	42a0      	cmp	r0, r4
 8003b3a:	d007      	beq.n	8003b4c <sbrk_aligned+0x38>
 8003b3c:	1a21      	subs	r1, r4, r0
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 fb6a 	bl	8004218 <_sbrk_r>
 8003b44:	3001      	adds	r0, #1
 8003b46:	d101      	bne.n	8003b4c <sbrk_aligned+0x38>
 8003b48:	f04f 34ff 	mov.w	r4, #4294967295
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	20000140 	.word	0x20000140

08003b54 <_malloc_r>:
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	1ccd      	adds	r5, r1, #3
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	4607      	mov	r7, r0
 8003b6a:	db01      	blt.n	8003b70 <_malloc_r+0x1c>
 8003b6c:	42a9      	cmp	r1, r5
 8003b6e:	d905      	bls.n	8003b7c <_malloc_r+0x28>
 8003b70:	230c      	movs	r3, #12
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	2600      	movs	r6, #0
 8003b76:	4630      	mov	r0, r6
 8003b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7c:	4e2e      	ldr	r6, [pc, #184]	; (8003c38 <_malloc_r+0xe4>)
 8003b7e:	f000 fbf5 	bl	800436c <__malloc_lock>
 8003b82:	6833      	ldr	r3, [r6, #0]
 8003b84:	461c      	mov	r4, r3
 8003b86:	bb34      	cbnz	r4, 8003bd6 <_malloc_r+0x82>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f7ff ffc2 	bl	8003b14 <sbrk_aligned>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	4604      	mov	r4, r0
 8003b94:	d14d      	bne.n	8003c32 <_malloc_r+0xde>
 8003b96:	6834      	ldr	r4, [r6, #0]
 8003b98:	4626      	mov	r6, r4
 8003b9a:	2e00      	cmp	r6, #0
 8003b9c:	d140      	bne.n	8003c20 <_malloc_r+0xcc>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	eb04 0803 	add.w	r8, r4, r3
 8003ba8:	f000 fb36 	bl	8004218 <_sbrk_r>
 8003bac:	4580      	cmp	r8, r0
 8003bae:	d13a      	bne.n	8003c26 <_malloc_r+0xd2>
 8003bb0:	6821      	ldr	r1, [r4, #0]
 8003bb2:	3503      	adds	r5, #3
 8003bb4:	1a6d      	subs	r5, r5, r1
 8003bb6:	f025 0503 	bic.w	r5, r5, #3
 8003bba:	3508      	adds	r5, #8
 8003bbc:	2d0c      	cmp	r5, #12
 8003bbe:	bf38      	it	cc
 8003bc0:	250c      	movcc	r5, #12
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f7ff ffa5 	bl	8003b14 <sbrk_aligned>
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d02b      	beq.n	8003c26 <_malloc_r+0xd2>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	442b      	add	r3, r5
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	e00e      	b.n	8003bf4 <_malloc_r+0xa0>
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	1b52      	subs	r2, r2, r5
 8003bda:	d41e      	bmi.n	8003c1a <_malloc_r+0xc6>
 8003bdc:	2a0b      	cmp	r2, #11
 8003bde:	d916      	bls.n	8003c0e <_malloc_r+0xba>
 8003be0:	1961      	adds	r1, r4, r5
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	6025      	str	r5, [r4, #0]
 8003be6:	bf18      	it	ne
 8003be8:	6059      	strne	r1, [r3, #4]
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	bf08      	it	eq
 8003bee:	6031      	streq	r1, [r6, #0]
 8003bf0:	5162      	str	r2, [r4, r5]
 8003bf2:	604b      	str	r3, [r1, #4]
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f104 060b 	add.w	r6, r4, #11
 8003bfa:	f000 fbbd 	bl	8004378 <__malloc_unlock>
 8003bfe:	f026 0607 	bic.w	r6, r6, #7
 8003c02:	1d23      	adds	r3, r4, #4
 8003c04:	1af2      	subs	r2, r6, r3
 8003c06:	d0b6      	beq.n	8003b76 <_malloc_r+0x22>
 8003c08:	1b9b      	subs	r3, r3, r6
 8003c0a:	50a3      	str	r3, [r4, r2]
 8003c0c:	e7b3      	b.n	8003b76 <_malloc_r+0x22>
 8003c0e:	6862      	ldr	r2, [r4, #4]
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	bf0c      	ite	eq
 8003c14:	6032      	streq	r2, [r6, #0]
 8003c16:	605a      	strne	r2, [r3, #4]
 8003c18:	e7ec      	b.n	8003bf4 <_malloc_r+0xa0>
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	6864      	ldr	r4, [r4, #4]
 8003c1e:	e7b2      	b.n	8003b86 <_malloc_r+0x32>
 8003c20:	4634      	mov	r4, r6
 8003c22:	6876      	ldr	r6, [r6, #4]
 8003c24:	e7b9      	b.n	8003b9a <_malloc_r+0x46>
 8003c26:	230c      	movs	r3, #12
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f000 fba4 	bl	8004378 <__malloc_unlock>
 8003c30:	e7a1      	b.n	8003b76 <_malloc_r+0x22>
 8003c32:	6025      	str	r5, [r4, #0]
 8003c34:	e7de      	b.n	8003bf4 <_malloc_r+0xa0>
 8003c36:	bf00      	nop
 8003c38:	2000013c 	.word	0x2000013c

08003c3c <__sfputc_r>:
 8003c3c:	6893      	ldr	r3, [r2, #8]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	b410      	push	{r4}
 8003c44:	6093      	str	r3, [r2, #8]
 8003c46:	da08      	bge.n	8003c5a <__sfputc_r+0x1e>
 8003c48:	6994      	ldr	r4, [r2, #24]
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	db01      	blt.n	8003c52 <__sfputc_r+0x16>
 8003c4e:	290a      	cmp	r1, #10
 8003c50:	d103      	bne.n	8003c5a <__sfputc_r+0x1e>
 8003c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c56:	f7ff bc31 	b.w	80034bc <__swbuf_r>
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	1c58      	adds	r0, r3, #1
 8003c5e:	6010      	str	r0, [r2, #0]
 8003c60:	7019      	strb	r1, [r3, #0]
 8003c62:	4608      	mov	r0, r1
 8003c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <__sfputs_r>:
 8003c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	460f      	mov	r7, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	18d5      	adds	r5, r2, r3
 8003c74:	42ac      	cmp	r4, r5
 8003c76:	d101      	bne.n	8003c7c <__sfputs_r+0x12>
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e007      	b.n	8003c8c <__sfputs_r+0x22>
 8003c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c80:	463a      	mov	r2, r7
 8003c82:	4630      	mov	r0, r6
 8003c84:	f7ff ffda 	bl	8003c3c <__sfputc_r>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d1f3      	bne.n	8003c74 <__sfputs_r+0xa>
 8003c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c90 <_vfiprintf_r>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	460d      	mov	r5, r1
 8003c96:	b09d      	sub	sp, #116	; 0x74
 8003c98:	4614      	mov	r4, r2
 8003c9a:	4698      	mov	r8, r3
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	b118      	cbz	r0, 8003ca8 <_vfiprintf_r+0x18>
 8003ca0:	6983      	ldr	r3, [r0, #24]
 8003ca2:	b90b      	cbnz	r3, 8003ca8 <_vfiprintf_r+0x18>
 8003ca4:	f7ff fde4 	bl	8003870 <__sinit>
 8003ca8:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <_vfiprintf_r+0x240>)
 8003caa:	429d      	cmp	r5, r3
 8003cac:	d11b      	bne.n	8003ce6 <_vfiprintf_r+0x56>
 8003cae:	6875      	ldr	r5, [r6, #4]
 8003cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cb2:	07d9      	lsls	r1, r3, #31
 8003cb4:	d405      	bmi.n	8003cc2 <_vfiprintf_r+0x32>
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	059a      	lsls	r2, r3, #22
 8003cba:	d402      	bmi.n	8003cc2 <_vfiprintf_r+0x32>
 8003cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cbe:	f7ff fe75 	bl	80039ac <__retarget_lock_acquire_recursive>
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	071b      	lsls	r3, r3, #28
 8003cc6:	d501      	bpl.n	8003ccc <_vfiprintf_r+0x3c>
 8003cc8:	692b      	ldr	r3, [r5, #16]
 8003cca:	b9eb      	cbnz	r3, 8003d08 <_vfiprintf_r+0x78>
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f7ff fc46 	bl	8003560 <__swsetup_r>
 8003cd4:	b1c0      	cbz	r0, 8003d08 <_vfiprintf_r+0x78>
 8003cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd8:	07dc      	lsls	r4, r3, #31
 8003cda:	d50e      	bpl.n	8003cfa <_vfiprintf_r+0x6a>
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	b01d      	add	sp, #116	; 0x74
 8003ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce6:	4b7b      	ldr	r3, [pc, #492]	; (8003ed4 <_vfiprintf_r+0x244>)
 8003ce8:	429d      	cmp	r5, r3
 8003cea:	d101      	bne.n	8003cf0 <_vfiprintf_r+0x60>
 8003cec:	68b5      	ldr	r5, [r6, #8]
 8003cee:	e7df      	b.n	8003cb0 <_vfiprintf_r+0x20>
 8003cf0:	4b79      	ldr	r3, [pc, #484]	; (8003ed8 <_vfiprintf_r+0x248>)
 8003cf2:	429d      	cmp	r5, r3
 8003cf4:	bf08      	it	eq
 8003cf6:	68f5      	ldreq	r5, [r6, #12]
 8003cf8:	e7da      	b.n	8003cb0 <_vfiprintf_r+0x20>
 8003cfa:	89ab      	ldrh	r3, [r5, #12]
 8003cfc:	0598      	lsls	r0, r3, #22
 8003cfe:	d4ed      	bmi.n	8003cdc <_vfiprintf_r+0x4c>
 8003d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d02:	f7ff fe54 	bl	80039ae <__retarget_lock_release_recursive>
 8003d06:	e7e9      	b.n	8003cdc <_vfiprintf_r+0x4c>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d16:	2330      	movs	r3, #48	; 0x30
 8003d18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003edc <_vfiprintf_r+0x24c>
 8003d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d20:	f04f 0901 	mov.w	r9, #1
 8003d24:	4623      	mov	r3, r4
 8003d26:	469a      	mov	sl, r3
 8003d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d2c:	b10a      	cbz	r2, 8003d32 <_vfiprintf_r+0xa2>
 8003d2e:	2a25      	cmp	r2, #37	; 0x25
 8003d30:	d1f9      	bne.n	8003d26 <_vfiprintf_r+0x96>
 8003d32:	ebba 0b04 	subs.w	fp, sl, r4
 8003d36:	d00b      	beq.n	8003d50 <_vfiprintf_r+0xc0>
 8003d38:	465b      	mov	r3, fp
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ff93 	bl	8003c6a <__sfputs_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	f000 80aa 	beq.w	8003e9e <_vfiprintf_r+0x20e>
 8003d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d4c:	445a      	add	r2, fp
 8003d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d50:	f89a 3000 	ldrb.w	r3, [sl]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a2 	beq.w	8003e9e <_vfiprintf_r+0x20e>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d64:	f10a 0a01 	add.w	sl, sl, #1
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	9307      	str	r3, [sp, #28]
 8003d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d70:	931a      	str	r3, [sp, #104]	; 0x68
 8003d72:	4654      	mov	r4, sl
 8003d74:	2205      	movs	r2, #5
 8003d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7a:	4858      	ldr	r0, [pc, #352]	; (8003edc <_vfiprintf_r+0x24c>)
 8003d7c:	f7fc fa48 	bl	8000210 <memchr>
 8003d80:	9a04      	ldr	r2, [sp, #16]
 8003d82:	b9d8      	cbnz	r0, 8003dbc <_vfiprintf_r+0x12c>
 8003d84:	06d1      	lsls	r1, r2, #27
 8003d86:	bf44      	itt	mi
 8003d88:	2320      	movmi	r3, #32
 8003d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8e:	0713      	lsls	r3, r2, #28
 8003d90:	bf44      	itt	mi
 8003d92:	232b      	movmi	r3, #43	; 0x2b
 8003d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d98:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9e:	d015      	beq.n	8003dcc <_vfiprintf_r+0x13c>
 8003da0:	9a07      	ldr	r2, [sp, #28]
 8003da2:	4654      	mov	r4, sl
 8003da4:	2000      	movs	r0, #0
 8003da6:	f04f 0c0a 	mov.w	ip, #10
 8003daa:	4621      	mov	r1, r4
 8003dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003db0:	3b30      	subs	r3, #48	; 0x30
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d94e      	bls.n	8003e54 <_vfiprintf_r+0x1c4>
 8003db6:	b1b0      	cbz	r0, 8003de6 <_vfiprintf_r+0x156>
 8003db8:	9207      	str	r2, [sp, #28]
 8003dba:	e014      	b.n	8003de6 <_vfiprintf_r+0x156>
 8003dbc:	eba0 0308 	sub.w	r3, r0, r8
 8003dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	46a2      	mov	sl, r4
 8003dca:	e7d2      	b.n	8003d72 <_vfiprintf_r+0xe2>
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	1d19      	adds	r1, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	9103      	str	r1, [sp, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bfbb      	ittet	lt
 8003dd8:	425b      	neglt	r3, r3
 8003dda:	f042 0202 	orrlt.w	r2, r2, #2
 8003dde:	9307      	strge	r3, [sp, #28]
 8003de0:	9307      	strlt	r3, [sp, #28]
 8003de2:	bfb8      	it	lt
 8003de4:	9204      	strlt	r2, [sp, #16]
 8003de6:	7823      	ldrb	r3, [r4, #0]
 8003de8:	2b2e      	cmp	r3, #46	; 0x2e
 8003dea:	d10c      	bne.n	8003e06 <_vfiprintf_r+0x176>
 8003dec:	7863      	ldrb	r3, [r4, #1]
 8003dee:	2b2a      	cmp	r3, #42	; 0x2a
 8003df0:	d135      	bne.n	8003e5e <_vfiprintf_r+0x1ce>
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	9203      	str	r2, [sp, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bfb8      	it	lt
 8003dfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e02:	3402      	adds	r4, #2
 8003e04:	9305      	str	r3, [sp, #20]
 8003e06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003eec <_vfiprintf_r+0x25c>
 8003e0a:	7821      	ldrb	r1, [r4, #0]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4650      	mov	r0, sl
 8003e10:	f7fc f9fe 	bl	8000210 <memchr>
 8003e14:	b140      	cbz	r0, 8003e28 <_vfiprintf_r+0x198>
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	eba0 000a 	sub.w	r0, r0, sl
 8003e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8003e20:	9b04      	ldr	r3, [sp, #16]
 8003e22:	4303      	orrs	r3, r0
 8003e24:	3401      	adds	r4, #1
 8003e26:	9304      	str	r3, [sp, #16]
 8003e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2c:	482c      	ldr	r0, [pc, #176]	; (8003ee0 <_vfiprintf_r+0x250>)
 8003e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e32:	2206      	movs	r2, #6
 8003e34:	f7fc f9ec 	bl	8000210 <memchr>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d03f      	beq.n	8003ebc <_vfiprintf_r+0x22c>
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <_vfiprintf_r+0x254>)
 8003e3e:	bb1b      	cbnz	r3, 8003e88 <_vfiprintf_r+0x1f8>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	3307      	adds	r3, #7
 8003e44:	f023 0307 	bic.w	r3, r3, #7
 8003e48:	3308      	adds	r3, #8
 8003e4a:	9303      	str	r3, [sp, #12]
 8003e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e4e:	443b      	add	r3, r7
 8003e50:	9309      	str	r3, [sp, #36]	; 0x24
 8003e52:	e767      	b.n	8003d24 <_vfiprintf_r+0x94>
 8003e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e58:	460c      	mov	r4, r1
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	e7a5      	b.n	8003daa <_vfiprintf_r+0x11a>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	3401      	adds	r4, #1
 8003e62:	9305      	str	r3, [sp, #20]
 8003e64:	4619      	mov	r1, r3
 8003e66:	f04f 0c0a 	mov.w	ip, #10
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e70:	3a30      	subs	r2, #48	; 0x30
 8003e72:	2a09      	cmp	r2, #9
 8003e74:	d903      	bls.n	8003e7e <_vfiprintf_r+0x1ee>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0c5      	beq.n	8003e06 <_vfiprintf_r+0x176>
 8003e7a:	9105      	str	r1, [sp, #20]
 8003e7c:	e7c3      	b.n	8003e06 <_vfiprintf_r+0x176>
 8003e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e82:	4604      	mov	r4, r0
 8003e84:	2301      	movs	r3, #1
 8003e86:	e7f0      	b.n	8003e6a <_vfiprintf_r+0x1da>
 8003e88:	ab03      	add	r3, sp, #12
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <_vfiprintf_r+0x258>)
 8003e90:	a904      	add	r1, sp, #16
 8003e92:	4630      	mov	r0, r6
 8003e94:	f3af 8000 	nop.w
 8003e98:	4607      	mov	r7, r0
 8003e9a:	1c78      	adds	r0, r7, #1
 8003e9c:	d1d6      	bne.n	8003e4c <_vfiprintf_r+0x1bc>
 8003e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ea0:	07d9      	lsls	r1, r3, #31
 8003ea2:	d405      	bmi.n	8003eb0 <_vfiprintf_r+0x220>
 8003ea4:	89ab      	ldrh	r3, [r5, #12]
 8003ea6:	059a      	lsls	r2, r3, #22
 8003ea8:	d402      	bmi.n	8003eb0 <_vfiprintf_r+0x220>
 8003eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eac:	f7ff fd7f 	bl	80039ae <__retarget_lock_release_recursive>
 8003eb0:	89ab      	ldrh	r3, [r5, #12]
 8003eb2:	065b      	lsls	r3, r3, #25
 8003eb4:	f53f af12 	bmi.w	8003cdc <_vfiprintf_r+0x4c>
 8003eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eba:	e711      	b.n	8003ce0 <_vfiprintf_r+0x50>
 8003ebc:	ab03      	add	r3, sp, #12
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <_vfiprintf_r+0x258>)
 8003ec4:	a904      	add	r1, sp, #16
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f000 f880 	bl	8003fcc <_printf_i>
 8003ecc:	e7e4      	b.n	8003e98 <_vfiprintf_r+0x208>
 8003ece:	bf00      	nop
 8003ed0:	08004494 	.word	0x08004494
 8003ed4:	080044b4 	.word	0x080044b4
 8003ed8:	08004474 	.word	0x08004474
 8003edc:	080044d4 	.word	0x080044d4
 8003ee0:	080044de 	.word	0x080044de
 8003ee4:	00000000 	.word	0x00000000
 8003ee8:	08003c6b 	.word	0x08003c6b
 8003eec:	080044da 	.word	0x080044da

08003ef0 <_printf_common>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	4699      	mov	r9, r3
 8003ef8:	688a      	ldr	r2, [r1, #8]
 8003efa:	690b      	ldr	r3, [r1, #16]
 8003efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bfb8      	it	lt
 8003f04:	4613      	movlt	r3, r2
 8003f06:	6033      	str	r3, [r6, #0]
 8003f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	b10a      	cbz	r2, 8003f16 <_printf_common+0x26>
 8003f12:	3301      	adds	r3, #1
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	0699      	lsls	r1, r3, #26
 8003f1a:	bf42      	ittt	mi
 8003f1c:	6833      	ldrmi	r3, [r6, #0]
 8003f1e:	3302      	addmi	r3, #2
 8003f20:	6033      	strmi	r3, [r6, #0]
 8003f22:	6825      	ldr	r5, [r4, #0]
 8003f24:	f015 0506 	ands.w	r5, r5, #6
 8003f28:	d106      	bne.n	8003f38 <_printf_common+0x48>
 8003f2a:	f104 0a19 	add.w	sl, r4, #25
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	6832      	ldr	r2, [r6, #0]
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	dc26      	bgt.n	8003f86 <_printf_common+0x96>
 8003f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f3c:	1e13      	subs	r3, r2, #0
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	bf18      	it	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	0692      	lsls	r2, r2, #26
 8003f46:	d42b      	bmi.n	8003fa0 <_printf_common+0xb0>
 8003f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4638      	mov	r0, r7
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d01e      	beq.n	8003f94 <_printf_common+0xa4>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	68e5      	ldr	r5, [r4, #12]
 8003f5a:	6832      	ldr	r2, [r6, #0]
 8003f5c:	f003 0306 	and.w	r3, r3, #6
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	bf08      	it	eq
 8003f64:	1aad      	subeq	r5, r5, r2
 8003f66:	68a3      	ldr	r3, [r4, #8]
 8003f68:	6922      	ldr	r2, [r4, #16]
 8003f6a:	bf0c      	ite	eq
 8003f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f70:	2500      	movne	r5, #0
 8003f72:	4293      	cmp	r3, r2
 8003f74:	bfc4      	itt	gt
 8003f76:	1a9b      	subgt	r3, r3, r2
 8003f78:	18ed      	addgt	r5, r5, r3
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	341a      	adds	r4, #26
 8003f7e:	42b5      	cmp	r5, r6
 8003f80:	d11a      	bne.n	8003fb8 <_printf_common+0xc8>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e008      	b.n	8003f98 <_printf_common+0xa8>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4652      	mov	r2, sl
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	47c0      	blx	r8
 8003f90:	3001      	adds	r0, #1
 8003f92:	d103      	bne.n	8003f9c <_printf_common+0xac>
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7c6      	b.n	8003f2e <_printf_common+0x3e>
 8003fa0:	18e1      	adds	r1, r4, r3
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	2030      	movs	r0, #48	; 0x30
 8003fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003faa:	4422      	add	r2, r4
 8003fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	e7c7      	b.n	8003f48 <_printf_common+0x58>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4622      	mov	r2, r4
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	47c0      	blx	r8
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d0e6      	beq.n	8003f94 <_printf_common+0xa4>
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7d9      	b.n	8003f7e <_printf_common+0x8e>
	...

08003fcc <_printf_i>:
 8003fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd0:	7e0f      	ldrb	r7, [r1, #24]
 8003fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd4:	2f78      	cmp	r7, #120	; 0x78
 8003fd6:	4691      	mov	r9, r2
 8003fd8:	4680      	mov	r8, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	469a      	mov	sl, r3
 8003fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fe2:	d807      	bhi.n	8003ff4 <_printf_i+0x28>
 8003fe4:	2f62      	cmp	r7, #98	; 0x62
 8003fe6:	d80a      	bhi.n	8003ffe <_printf_i+0x32>
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	f000 80d8 	beq.w	800419e <_printf_i+0x1d2>
 8003fee:	2f58      	cmp	r7, #88	; 0x58
 8003ff0:	f000 80a3 	beq.w	800413a <_printf_i+0x16e>
 8003ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ffc:	e03a      	b.n	8004074 <_printf_i+0xa8>
 8003ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004002:	2b15      	cmp	r3, #21
 8004004:	d8f6      	bhi.n	8003ff4 <_printf_i+0x28>
 8004006:	a101      	add	r1, pc, #4	; (adr r1, 800400c <_printf_i+0x40>)
 8004008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800400c:	08004065 	.word	0x08004065
 8004010:	08004079 	.word	0x08004079
 8004014:	08003ff5 	.word	0x08003ff5
 8004018:	08003ff5 	.word	0x08003ff5
 800401c:	08003ff5 	.word	0x08003ff5
 8004020:	08003ff5 	.word	0x08003ff5
 8004024:	08004079 	.word	0x08004079
 8004028:	08003ff5 	.word	0x08003ff5
 800402c:	08003ff5 	.word	0x08003ff5
 8004030:	08003ff5 	.word	0x08003ff5
 8004034:	08003ff5 	.word	0x08003ff5
 8004038:	08004185 	.word	0x08004185
 800403c:	080040a9 	.word	0x080040a9
 8004040:	08004167 	.word	0x08004167
 8004044:	08003ff5 	.word	0x08003ff5
 8004048:	08003ff5 	.word	0x08003ff5
 800404c:	080041a7 	.word	0x080041a7
 8004050:	08003ff5 	.word	0x08003ff5
 8004054:	080040a9 	.word	0x080040a9
 8004058:	08003ff5 	.word	0x08003ff5
 800405c:	08003ff5 	.word	0x08003ff5
 8004060:	0800416f 	.word	0x0800416f
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	1d1a      	adds	r2, r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	602a      	str	r2, [r5, #0]
 800406c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004074:	2301      	movs	r3, #1
 8004076:	e0a3      	b.n	80041c0 <_printf_i+0x1f4>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	6829      	ldr	r1, [r5, #0]
 800407c:	0606      	lsls	r6, r0, #24
 800407e:	f101 0304 	add.w	r3, r1, #4
 8004082:	d50a      	bpl.n	800409a <_printf_i+0xce>
 8004084:	680e      	ldr	r6, [r1, #0]
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	2e00      	cmp	r6, #0
 800408a:	da03      	bge.n	8004094 <_printf_i+0xc8>
 800408c:	232d      	movs	r3, #45	; 0x2d
 800408e:	4276      	negs	r6, r6
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004094:	485e      	ldr	r0, [pc, #376]	; (8004210 <_printf_i+0x244>)
 8004096:	230a      	movs	r3, #10
 8004098:	e019      	b.n	80040ce <_printf_i+0x102>
 800409a:	680e      	ldr	r6, [r1, #0]
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040a2:	bf18      	it	ne
 80040a4:	b236      	sxthne	r6, r6
 80040a6:	e7ef      	b.n	8004088 <_printf_i+0xbc>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	6029      	str	r1, [r5, #0]
 80040b0:	0601      	lsls	r1, r0, #24
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0xec>
 80040b4:	681e      	ldr	r6, [r3, #0]
 80040b6:	e002      	b.n	80040be <_printf_i+0xf2>
 80040b8:	0646      	lsls	r6, r0, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0xe8>
 80040bc:	881e      	ldrh	r6, [r3, #0]
 80040be:	4854      	ldr	r0, [pc, #336]	; (8004210 <_printf_i+0x244>)
 80040c0:	2f6f      	cmp	r7, #111	; 0x6f
 80040c2:	bf0c      	ite	eq
 80040c4:	2308      	moveq	r3, #8
 80040c6:	230a      	movne	r3, #10
 80040c8:	2100      	movs	r1, #0
 80040ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ce:	6865      	ldr	r5, [r4, #4]
 80040d0:	60a5      	str	r5, [r4, #8]
 80040d2:	2d00      	cmp	r5, #0
 80040d4:	bfa2      	ittt	ge
 80040d6:	6821      	ldrge	r1, [r4, #0]
 80040d8:	f021 0104 	bicge.w	r1, r1, #4
 80040dc:	6021      	strge	r1, [r4, #0]
 80040de:	b90e      	cbnz	r6, 80040e4 <_printf_i+0x118>
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	d04d      	beq.n	8004180 <_printf_i+0x1b4>
 80040e4:	4615      	mov	r5, r2
 80040e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80040ea:	fb03 6711 	mls	r7, r3, r1, r6
 80040ee:	5dc7      	ldrb	r7, [r0, r7]
 80040f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040f4:	4637      	mov	r7, r6
 80040f6:	42bb      	cmp	r3, r7
 80040f8:	460e      	mov	r6, r1
 80040fa:	d9f4      	bls.n	80040e6 <_printf_i+0x11a>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10b      	bne.n	8004118 <_printf_i+0x14c>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	07de      	lsls	r6, r3, #31
 8004104:	d508      	bpl.n	8004118 <_printf_i+0x14c>
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6861      	ldr	r1, [r4, #4]
 800410a:	4299      	cmp	r1, r3
 800410c:	bfde      	ittt	le
 800410e:	2330      	movle	r3, #48	; 0x30
 8004110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004118:	1b52      	subs	r2, r2, r5
 800411a:	6122      	str	r2, [r4, #16]
 800411c:	f8cd a000 	str.w	sl, [sp]
 8004120:	464b      	mov	r3, r9
 8004122:	aa03      	add	r2, sp, #12
 8004124:	4621      	mov	r1, r4
 8004126:	4640      	mov	r0, r8
 8004128:	f7ff fee2 	bl	8003ef0 <_printf_common>
 800412c:	3001      	adds	r0, #1
 800412e:	d14c      	bne.n	80041ca <_printf_i+0x1fe>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	b004      	add	sp, #16
 8004136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413a:	4835      	ldr	r0, [pc, #212]	; (8004210 <_printf_i+0x244>)
 800413c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004140:	6829      	ldr	r1, [r5, #0]
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f851 6b04 	ldr.w	r6, [r1], #4
 8004148:	6029      	str	r1, [r5, #0]
 800414a:	061d      	lsls	r5, r3, #24
 800414c:	d514      	bpl.n	8004178 <_printf_i+0x1ac>
 800414e:	07df      	lsls	r7, r3, #31
 8004150:	bf44      	itt	mi
 8004152:	f043 0320 	orrmi.w	r3, r3, #32
 8004156:	6023      	strmi	r3, [r4, #0]
 8004158:	b91e      	cbnz	r6, 8004162 <_printf_i+0x196>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f023 0320 	bic.w	r3, r3, #32
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	2310      	movs	r3, #16
 8004164:	e7b0      	b.n	80040c8 <_printf_i+0xfc>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	f043 0320 	orr.w	r3, r3, #32
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	2378      	movs	r3, #120	; 0x78
 8004170:	4828      	ldr	r0, [pc, #160]	; (8004214 <_printf_i+0x248>)
 8004172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004176:	e7e3      	b.n	8004140 <_printf_i+0x174>
 8004178:	0659      	lsls	r1, r3, #25
 800417a:	bf48      	it	mi
 800417c:	b2b6      	uxthmi	r6, r6
 800417e:	e7e6      	b.n	800414e <_printf_i+0x182>
 8004180:	4615      	mov	r5, r2
 8004182:	e7bb      	b.n	80040fc <_printf_i+0x130>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	6826      	ldr	r6, [r4, #0]
 8004188:	6961      	ldr	r1, [r4, #20]
 800418a:	1d18      	adds	r0, r3, #4
 800418c:	6028      	str	r0, [r5, #0]
 800418e:	0635      	lsls	r5, r6, #24
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	d501      	bpl.n	8004198 <_printf_i+0x1cc>
 8004194:	6019      	str	r1, [r3, #0]
 8004196:	e002      	b.n	800419e <_printf_i+0x1d2>
 8004198:	0670      	lsls	r0, r6, #25
 800419a:	d5fb      	bpl.n	8004194 <_printf_i+0x1c8>
 800419c:	8019      	strh	r1, [r3, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	4615      	mov	r5, r2
 80041a4:	e7ba      	b.n	800411c <_printf_i+0x150>
 80041a6:	682b      	ldr	r3, [r5, #0]
 80041a8:	1d1a      	adds	r2, r3, #4
 80041aa:	602a      	str	r2, [r5, #0]
 80041ac:	681d      	ldr	r5, [r3, #0]
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	2100      	movs	r1, #0
 80041b2:	4628      	mov	r0, r5
 80041b4:	f7fc f82c 	bl	8000210 <memchr>
 80041b8:	b108      	cbz	r0, 80041be <_printf_i+0x1f2>
 80041ba:	1b40      	subs	r0, r0, r5
 80041bc:	6060      	str	r0, [r4, #4]
 80041be:	6863      	ldr	r3, [r4, #4]
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	2300      	movs	r3, #0
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c8:	e7a8      	b.n	800411c <_printf_i+0x150>
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	462a      	mov	r2, r5
 80041ce:	4649      	mov	r1, r9
 80041d0:	4640      	mov	r0, r8
 80041d2:	47d0      	blx	sl
 80041d4:	3001      	adds	r0, #1
 80041d6:	d0ab      	beq.n	8004130 <_printf_i+0x164>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	079b      	lsls	r3, r3, #30
 80041dc:	d413      	bmi.n	8004206 <_printf_i+0x23a>
 80041de:	68e0      	ldr	r0, [r4, #12]
 80041e0:	9b03      	ldr	r3, [sp, #12]
 80041e2:	4298      	cmp	r0, r3
 80041e4:	bfb8      	it	lt
 80041e6:	4618      	movlt	r0, r3
 80041e8:	e7a4      	b.n	8004134 <_printf_i+0x168>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4632      	mov	r2, r6
 80041ee:	4649      	mov	r1, r9
 80041f0:	4640      	mov	r0, r8
 80041f2:	47d0      	blx	sl
 80041f4:	3001      	adds	r0, #1
 80041f6:	d09b      	beq.n	8004130 <_printf_i+0x164>
 80041f8:	3501      	adds	r5, #1
 80041fa:	68e3      	ldr	r3, [r4, #12]
 80041fc:	9903      	ldr	r1, [sp, #12]
 80041fe:	1a5b      	subs	r3, r3, r1
 8004200:	42ab      	cmp	r3, r5
 8004202:	dcf2      	bgt.n	80041ea <_printf_i+0x21e>
 8004204:	e7eb      	b.n	80041de <_printf_i+0x212>
 8004206:	2500      	movs	r5, #0
 8004208:	f104 0619 	add.w	r6, r4, #25
 800420c:	e7f5      	b.n	80041fa <_printf_i+0x22e>
 800420e:	bf00      	nop
 8004210:	080044e5 	.word	0x080044e5
 8004214:	080044f6 	.word	0x080044f6

08004218 <_sbrk_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d06      	ldr	r5, [pc, #24]	; (8004234 <_sbrk_r+0x1c>)
 800421c:	2300      	movs	r3, #0
 800421e:	4604      	mov	r4, r0
 8004220:	4608      	mov	r0, r1
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	f7fc ff92 	bl	800114c <_sbrk>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_sbrk_r+0x1a>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_sbrk_r+0x1a>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	20000144 	.word	0x20000144

08004238 <__sread>:
 8004238:	b510      	push	{r4, lr}
 800423a:	460c      	mov	r4, r1
 800423c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004240:	f000 f8a0 	bl	8004384 <_read_r>
 8004244:	2800      	cmp	r0, #0
 8004246:	bfab      	itete	ge
 8004248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800424a:	89a3      	ldrhlt	r3, [r4, #12]
 800424c:	181b      	addge	r3, r3, r0
 800424e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004252:	bfac      	ite	ge
 8004254:	6563      	strge	r3, [r4, #84]	; 0x54
 8004256:	81a3      	strhlt	r3, [r4, #12]
 8004258:	bd10      	pop	{r4, pc}

0800425a <__swrite>:
 800425a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425e:	461f      	mov	r7, r3
 8004260:	898b      	ldrh	r3, [r1, #12]
 8004262:	05db      	lsls	r3, r3, #23
 8004264:	4605      	mov	r5, r0
 8004266:	460c      	mov	r4, r1
 8004268:	4616      	mov	r6, r2
 800426a:	d505      	bpl.n	8004278 <__swrite+0x1e>
 800426c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004270:	2302      	movs	r3, #2
 8004272:	2200      	movs	r2, #0
 8004274:	f000 f868 	bl	8004348 <_lseek_r>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800427e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	4632      	mov	r2, r6
 8004286:	463b      	mov	r3, r7
 8004288:	4628      	mov	r0, r5
 800428a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800428e:	f000 b817 	b.w	80042c0 <_write_r>

08004292 <__sseek>:
 8004292:	b510      	push	{r4, lr}
 8004294:	460c      	mov	r4, r1
 8004296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429a:	f000 f855 	bl	8004348 <_lseek_r>
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	bf15      	itete	ne
 80042a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80042a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042ae:	81a3      	strheq	r3, [r4, #12]
 80042b0:	bf18      	it	ne
 80042b2:	81a3      	strhne	r3, [r4, #12]
 80042b4:	bd10      	pop	{r4, pc}

080042b6 <__sclose>:
 80042b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ba:	f000 b813 	b.w	80042e4 <_close_r>
	...

080042c0 <_write_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4d07      	ldr	r5, [pc, #28]	; (80042e0 <_write_r+0x20>)
 80042c4:	4604      	mov	r4, r0
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	2200      	movs	r2, #0
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fc fbea 	bl	8000aa8 <_write>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_write_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_write_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000144 	.word	0x20000144

080042e4 <_close_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4d06      	ldr	r5, [pc, #24]	; (8004300 <_close_r+0x1c>)
 80042e8:	2300      	movs	r3, #0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fc fef7 	bl	80010e2 <_close>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_close_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_close_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	20000144 	.word	0x20000144

08004304 <_fstat_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4d07      	ldr	r5, [pc, #28]	; (8004324 <_fstat_r+0x20>)
 8004308:	2300      	movs	r3, #0
 800430a:	4604      	mov	r4, r0
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	602b      	str	r3, [r5, #0]
 8004312:	f7fc fef2 	bl	80010fa <_fstat>
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	d102      	bne.n	8004320 <_fstat_r+0x1c>
 800431a:	682b      	ldr	r3, [r5, #0]
 800431c:	b103      	cbz	r3, 8004320 <_fstat_r+0x1c>
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	bd38      	pop	{r3, r4, r5, pc}
 8004322:	bf00      	nop
 8004324:	20000144 	.word	0x20000144

08004328 <_isatty_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d06      	ldr	r5, [pc, #24]	; (8004344 <_isatty_r+0x1c>)
 800432c:	2300      	movs	r3, #0
 800432e:	4604      	mov	r4, r0
 8004330:	4608      	mov	r0, r1
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	f7fc fef1 	bl	800111a <_isatty>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d102      	bne.n	8004342 <_isatty_r+0x1a>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	b103      	cbz	r3, 8004342 <_isatty_r+0x1a>
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	20000144 	.word	0x20000144

08004348 <_lseek_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d07      	ldr	r5, [pc, #28]	; (8004368 <_lseek_r+0x20>)
 800434c:	4604      	mov	r4, r0
 800434e:	4608      	mov	r0, r1
 8004350:	4611      	mov	r1, r2
 8004352:	2200      	movs	r2, #0
 8004354:	602a      	str	r2, [r5, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f7fc feea 	bl	8001130 <_lseek>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_lseek_r+0x1e>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_lseek_r+0x1e>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	20000144 	.word	0x20000144

0800436c <__malloc_lock>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__malloc_lock+0x8>)
 800436e:	f7ff bb1d 	b.w	80039ac <__retarget_lock_acquire_recursive>
 8004372:	bf00      	nop
 8004374:	20000138 	.word	0x20000138

08004378 <__malloc_unlock>:
 8004378:	4801      	ldr	r0, [pc, #4]	; (8004380 <__malloc_unlock+0x8>)
 800437a:	f7ff bb18 	b.w	80039ae <__retarget_lock_release_recursive>
 800437e:	bf00      	nop
 8004380:	20000138 	.word	0x20000138

08004384 <_read_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4d07      	ldr	r5, [pc, #28]	; (80043a4 <_read_r+0x20>)
 8004388:	4604      	mov	r4, r0
 800438a:	4608      	mov	r0, r1
 800438c:	4611      	mov	r1, r2
 800438e:	2200      	movs	r2, #0
 8004390:	602a      	str	r2, [r5, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fc fe88 	bl	80010a8 <_read>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_read_r+0x1e>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_read_r+0x1e>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	20000144 	.word	0x20000144

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
