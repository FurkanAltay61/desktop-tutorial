
TimeBomb_SM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006864  08006864  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800686c  0800686c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000466c  20000078  080068ec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046e4  080068ec  000246e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2b5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cac  00000000  00000000  0003d35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00041010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  00042560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b214  00000000  00000000  00043928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6f2  00000000  00000000  0006eb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106594  00000000  00000000  0008922e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f7c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d48  00000000  00000000  0018f814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800675c 	.word	0x0800675c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800675c 	.word	0x0800675c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Fsm_ctor>:


static Event const entryEvt = { ENTRY_SIG};
static Event const exitEvt = { EXIT_SIG};

void Fsm_ctor(Fsm * const me,StateHandler initial){
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	me->State = initial;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <Fsm_init>:
void Fsm_init(Fsm * const me, Event const * const e){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]

	Q_ASSERT(me->State != (StateHandler)0);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <Fsm_init+0x1a>
 8000542:	2120      	movs	r1, #32
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <Fsm_init+0x38>)
 8000546:	f000 fb2d 	bl	8000ba4 <Q_onAssert>
	(*me->State)(me,e);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6839      	ldr	r1, [r7, #0]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	4798      	blx	r3
	(*me->State)(me,&entryEvt);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4904      	ldr	r1, [pc, #16]	; (800056c <Fsm_init+0x3c>)
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	4798      	blx	r3

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	080067d0 	.word	0x080067d0
 800056c:	080067d8 	.word	0x080067d8

08000570 <Fsm_dispatch>:

void Fsm_dispatch(Fsm * const me, Event const * const e){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	State Stat;
	StateHandler prev_state = me->State;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	60fb      	str	r3, [r7, #12]

//	Q_ASSERT(me->State != (StateHandler)0 && (e->sig < MAX_SIG));
	Stat = (*me->State)(me,e);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6839      	ldr	r1, [r7, #0]
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	72fb      	strb	r3, [r7, #11]

	if(Stat == TRAN_STATUS){
 800058e:	7afb      	ldrb	r3, [r7, #11]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d108      	bne.n	80005a6 <Fsm_dispatch+0x36>
		(*prev_state)(me,&exitEvt);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4906      	ldr	r1, [pc, #24]	; (80005b0 <Fsm_dispatch+0x40>)
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	4798      	blx	r3
		(*me->State)(me,&entryEvt);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4904      	ldr	r1, [pc, #16]	; (80005b4 <Fsm_dispatch+0x44>)
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	4798      	blx	r3
	}
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	080067dc 	.word	0x080067dc
 80005b4:	080067d8 	.word	0x080067d8

080005b8 <Active_ctor>:


/*..........................................................................*/
void Active_ctor(Active * const me, StateHandler initial) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	Fsm_ctor(&me->super,initial);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6839      	ldr	r1, [r7, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffa4 	bl	8000514 <Fsm_ctor>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <Active_eventLoop>:

/*..........................................................................*/
/* Thread function for all Active Objects (uC/OS-II task signature) */
static void Active_eventLoop(void *pdata) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    Active *me = (Active *)pdata; /* the AO instance "me" */
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60fb      	str	r3, [r7, #12]

    /*initialise the AO*/
    Fsm_init(&me->super,(Event *)0);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffa3 	bl	8000530 <Fsm_init>
    /* event loop ("message pump") */
    while (1) {
        Event *e; /* pointer to event object ("message") */

        /*new*/
        if(xQueueReceive(*me->queue,(void *)&e,(TickType_t)10) == pdPASS){
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f107 0108 	add.w	r1, r7, #8
 80005f4:	220a      	movs	r2, #10
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fccc 	bl	8003f94 <xQueueReceive>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d1f3      	bne.n	80005ea <Active_eventLoop+0x16>
			/* dispatch event to the active object 'me' */
        	Fsm_dispatch(&me->super, e);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffb1 	bl	8000570 <Fsm_dispatch>
    while (1) {
 800060e:	e7ec      	b.n	80005ea <Active_eventLoop+0x16>

08000610 <Active_start>:
				  UBaseType_t uxPriority,
				  StackType_t * const puxStackBuffer,
				  StaticTask_t * const pxTaskBuffer,
				  Event **queueSto,
				  const UBaseType_t uxQueueLength)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af04      	add	r7, sp, #16
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	603b      	str	r3, [r7, #0]

    /* precondition */
    Q_ASSERT(me /* AO instance must be provided (cannot be NULL) */
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d005      	beq.n	8000630 <Active_start+0x20>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <Active_start+0x20>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0c      	cmp	r3, #12
 800062e:	d903      	bls.n	8000638 <Active_start+0x28>
 8000630:	2159      	movs	r1, #89	; 0x59
 8000632:	4817      	ldr	r0, [pc, #92]	; (8000690 <Active_start+0x80>)
 8000634:	f000 fab6 	bl	8000ba4 <Q_onAssert>
             && (0 < uxPriority) && (uxPriority < configLIBRARY_LOWEST_INTERRUPT_PRIORITY - 2U));

    *me->queue = xQueueCreate(uxQueueLength,sizeof((void**)queueSto));
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	689c      	ldr	r4, [r3, #8]
 800063c:	2200      	movs	r2, #0
 800063e:	2104      	movs	r1, #4
 8000640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000642:	f003 fba1 	bl	8003d88 <xQueueGenericCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	6023      	str	r3, [r4, #0]
    Q_ASSERT(*me->queue); /* queue must be created */
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <Active_start+0x4c>
 8000654:	215d      	movs	r1, #93	; 0x5d
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <Active_start+0x80>)
 8000658:	f000 faa4 	bl	8000ba4 <Q_onAssert>

    me->thread = configLIBRARY_LOWEST_INTERRUPT_PRIORITY - 2U - uxPriority; /* uC/OS-II priority */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f1c3 030d 	rsb	r3, r3, #13
 8000664:	b2da      	uxtb	r2, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	711a      	strb	r2, [r3, #4]

   xTaskCreateStatic(Active_eventLoop,"x", ulStackDepth,(void *)me, me->thread, puxStackBuffer, pxTaskBuffer);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	461a      	mov	r2, r3
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	4905      	ldr	r1, [pc, #20]	; (8000694 <Active_start+0x84>)
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <Active_start+0x88>)
 8000682:	f003 fe65 	bl	8004350 <xTaskCreateStatic>
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	bf00      	nop
 8000690:	080067d0 	.word	0x080067d0
 8000694:	08006774 	.word	0x08006774
 8000698:	080005d5 	.word	0x080005d5

0800069c <Active_post>:

/*..........................................................................*/
void Active_post(Active * const me, Event const * const e) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	BaseType_t xQueueWoken = pdFALSE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(*me->queue, (void *)&e,&xQueueWoken);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	f107 020c 	add.w	r2, r7, #12
 80006b4:	4639      	mov	r1, r7
 80006b6:	2300      	movs	r3, #0
 80006b8:	f003 fbcb 	bl	8003e52 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xQueueWoken);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d007      	beq.n	80006d2 <Active_post+0x36>
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <Active_post+0x40>)
 80006c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	f3bf 8f6f 	isb	sy
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed04 	.word	0xe000ed04

080006e0 <TimeEvent_ctor>:

static TimeEvent *l_tevt[10]; /* all TimeEvents in the application */
static uint_fast8_t l_tevtNum; /* current number of TimeEvents */

/*..........................................................................*/
void TimeEvent_ctor(TimeEvent * const me, Signal sig, Active *act) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	460b      	mov	r3, r1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	817b      	strh	r3, [r7, #10]
#endif

    /* no critical section because it is presumed that all TimeEvents
    * are created *before* multitasking has started.
    */
    me->super.sig = sig;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	897a      	ldrh	r2, [r7, #10]
 80006f2:	801a      	strh	r2, [r3, #0]
    me->act = act;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	605a      	str	r2, [r3, #4]
    me->timeout = 0U;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
    me->interval = 0U;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]

    /* register one more TimeEvent instance */
    taskENTER_CRITICAL();
 8000706:	f004 fea9 	bl	800545c <vPortEnterCritical>
    Q_ASSERT(l_tevtNum < sizeof(l_tevt)/sizeof(l_tevt[0]));
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <TimeEvent_ctor+0x5c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d903      	bls.n	800071a <TimeEvent_ctor+0x3a>
 8000712:	2181      	movs	r1, #129	; 0x81
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <TimeEvent_ctor+0x60>)
 8000716:	f000 fa45 	bl	8000ba4 <Q_onAssert>
    l_tevt[l_tevtNum] = me;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <TimeEvent_ctor+0x5c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4909      	ldr	r1, [pc, #36]	; (8000744 <TimeEvent_ctor+0x64>)
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ++l_tevtNum;
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <TimeEvent_ctor+0x5c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <TimeEvent_ctor+0x5c>)
 800072e:	6013      	str	r3, [r2, #0]
    taskEXIT_CRITICAL();
 8000730:	f004 fec8 	bl	80054c4 <vPortExitCritical>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000bc 	.word	0x200000bc
 8000740:	080067d0 	.word	0x080067d0
 8000744:	20000094 	.word	0x20000094

08000748 <TimeEvent_arm>:

/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t timeout, uint32_t interval) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
    taskENTER_CRITICAL();
 8000754:	f004 fe82 	bl	800545c <vPortEnterCritical>
    me->timeout = timeout;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	609a      	str	r2, [r3, #8]
    me->interval = interval;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	60da      	str	r2, [r3, #12]
    taskEXIT_CRITICAL();
 8000764:	f004 feae 	bl	80054c4 <vPortExitCritical>
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <TimeEvent_tick>:
    me->timeout = 0U;
    taskEXIT_CRITICAL();
}

/*..........................................................................*/
void TimeEvent_tick(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
    uint_fast8_t i;
    for (i = 0U; i < l_tevtNum; ++i) {
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	e026      	b.n	80007ca <TimeEvent_tick+0x5a>
        TimeEvent * const t = l_tevt[i];
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <TimeEvent_tick+0x70>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000784:	603b      	str	r3, [r7, #0]
        Q_ASSERT(t); /* TimeEvent instance must be registered */
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d103      	bne.n	8000794 <TimeEvent_tick+0x24>
 800078c:	219b      	movs	r1, #155	; 0x9b
 800078e:	4815      	ldr	r0, [pc, #84]	; (80007e4 <TimeEvent_tick+0x74>)
 8000790:	f000 fa08 	bl	8000ba4 <Q_onAssert>
        if (t->timeout > 0U) { /* is this TimeEvent armed? */
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d013      	beq.n	80007c4 <TimeEvent_tick+0x54>
            if (--t->timeout == 0U) { /* is it expiring now? */
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10a      	bne.n	80007c4 <TimeEvent_tick+0x54>
                Active_post(t->act, &t->super);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff70 	bl	800069c <Active_post>
                t->timeout = t->interval; /* rearm or disarm (one-shot) */
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	609a      	str	r2, [r3, #8]
    for (i = 0U; i < l_tevtNum; ++i) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <TimeEvent_tick+0x78>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d3d3      	bcc.n	800077c <TimeEvent_tick+0xc>
           }
        }
    }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000094 	.word	0x20000094
 80007e4:	080067d0 	.word	0x080067d0
 80007e8:	200000bc 	.word	0x200000bc

080007ec <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
return 0;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <vApplicationGetIdleTaskMemory+0x2c>)
 8000828:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <vApplicationGetIdleTaskMemory+0x30>)
 800082e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	200000c0 	.word	0x200000c0
 8000848:	20000180 	.word	0x20000180

0800084c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000850:	f3bf 8f4f 	dsb	sy
}
 8000854:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <__NVIC_SystemReset+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <__NVIC_SystemReset+0x24>)
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_SystemReset+0x28>)
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000866:	f3bf 8f4f 	dsb	sy
}
 800086a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <__NVIC_SystemReset+0x20>
 8000870:	e000ed00 	.word	0xe000ed00
 8000874:	05fa0004 	.word	0x05fa0004

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 fbfa 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f83b 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 f8d7 	bl	8000a38 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 800088a:	f000 f8a5 	bl	80009d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <main+0x64>)
 8000890:	f000 f9ca 	bl	8000c28 <RetargetInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <main+0x68>)
 8000896:	1d3c      	adds	r4, r7, #4
 8000898:	461d      	mov	r5, r3
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 f8ee 	bl	8003a8c <osThreadCreate>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <main+0x6c>)
 80008b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  TimeBomb_ctor(&timebomb);
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <main+0x70>)
 80008b8:	f005 f934 	bl	8005b24 <TimeBomb_ctor>
  Active_start(AO_TimeBomb,
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <main+0x74>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	230a      	movs	r3, #10
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <main+0x78>)
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <main+0x7c>)
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <main+0x80>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	f7ff fe9d 	bl	8000610 <Active_start>
			  TimeBomb_queue,
			  sizeof(TimeBomb_queue)/sizeof(TimeBomb_queue[0]));
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008d6:	f003 f8d2 	bl	8003a7e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008da:	e7fe      	b.n	80008da <main+0x62>
 80008dc:	20000898 	.word	0x20000898
 80008e0:	08006784 	.word	0x08006784
 80008e4:	2000091c 	.word	0x2000091c
 80008e8:	20000878 	.word	0x20000878
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000850 	.word	0x20000850
 80008f4:	20000790 	.word	0x20000790
 80008f8:	20000380 	.word	0x20000380

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f005 fb65 	bl	8005fda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000920:	f000 feba 	bl	8001698 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <SystemClock_Config+0xd4>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <SystemClock_Config+0xd4>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <SystemClock_Config+0xd4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <SystemClock_Config+0xd8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <SystemClock_Config+0xd8>)
 8000942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <SystemClock_Config+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000958:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800096c:	23d8      	movs	r3, #216	; 0xd8
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000974:	2309      	movs	r3, #9
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f000 feeb 	bl	8001758 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000988:	f000 f948 	bl	8000c1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800098c:	f000 fe94 	bl	80016b8 <HAL_PWREx_EnableOverDrive>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000996:	f000 f941 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	230f      	movs	r3, #15
 800099c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	2302      	movs	r3, #2
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2107      	movs	r1, #7
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 f971 	bl	8001ca0 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009c4:	f000 f92a 	bl	8000c1c <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	; 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_USART3_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a1c:	f002 fa68 	bl	8002ef0 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8f9 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000898 	.word	0x20000898
 8000a34:	40004800 	.word	0x40004800

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b51      	ldr	r3, [pc, #324]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a50      	ldr	r2, [pc, #320]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a4a      	ldr	r2, [pc, #296]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a44      	ldr	r2, [pc, #272]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a3e      	ldr	r2, [pc, #248]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a38      	ldr	r2, [pc, #224]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_GPIO_Init+0x15c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae4:	482c      	ldr	r0, [pc, #176]	; (8000b98 <MX_GPIO_Init+0x160>)
 8000ae6:	f000 fd99 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2140      	movs	r1, #64	; 0x40
 8000aee:	482b      	ldr	r0, [pc, #172]	; (8000b9c <MX_GPIO_Init+0x164>)
 8000af0:	f000 fd94 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000afa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b00:	2302      	movs	r3, #2
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0x168>)
 8000b0c:	f000 fbc2 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_GPIO_Init+0x160>)
 8000b2a:	f000 fbb3 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x164>)
 8000b46:	f000 fba5 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480f      	ldr	r0, [pc, #60]	; (8000b9c <MX_GPIO_Init+0x164>)
 8000b5e:	f000 fb99 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 8000b62:	2330      	movs	r3, #48	; 0x30
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <MX_GPIO_Init+0x160>)
 8000b76:	f000 fb8d 	bl	8001294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	2028      	movs	r0, #40	; 0x28
 8000b80:	f000 fb5e 	bl	8001240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b84:	2028      	movs	r0, #40	; 0x28
 8000b86:	f000 fb77 	bl	8001278 <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3730      	adds	r7, #48	; 0x30
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <Q_onAssert>:

/* USER CODE BEGIN 4 */

void Q_onAssert(char const *module, int loc) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 8000bae:	f7ff fe4d 	bl	800084c <__NVIC_SystemReset>

08000bb2 <vApplicationStackOverflowHook>:
}


void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName ){
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
	__NOP();
 8000bbc:	bf00      	nop
	Error_Handler();
 8000bbe:	f000 f82d 	bl	8000c1c <Error_Handler>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <vApplicationTickHook>:


void vApplicationTickHook( void ){
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
	App_TimeTickHook();
 8000bce:	f005 f883 	bl	8005cd8 <App_TimeTickHook>
	__NOP();
 8000bd2:	bf00      	nop
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook( void ){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	__NOP();
 8000bdc:	bf00      	nop
	Error_Handler();
 8000bde:	f000 f81d 	bl	8000c1c <Error_Handler>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f002 ff98 	bl	8003b24 <osDelay>
 8000bf4:	e7fb      	b.n	8000bee <StartDefaultTask+0x8>
	...

08000bf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0a:	f000 fa41 	bl	8001090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40010000 	.word	0x40010000

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <RetargetInit+0x28>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <RetargetInit+0x2c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6898      	ldr	r0, [r3, #8]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2202      	movs	r2, #2
 8000c40:	2100      	movs	r1, #0
 8000c42:	f005 fae1 	bl	8006208 <setvbuf>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000920 	.word	0x20000920
 8000c54:	20000014 	.word	0x20000014

08000c58 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d002      	beq.n	8000c70 <_write+0x18>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d111      	bne.n	8000c94 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <_write+0x54>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	f002 f985 	bl	8002f8c <HAL_UART_Transmit>
 8000c82:	4603      	mov	r3, r0
 8000c84:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <_write+0x38>
      return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	e008      	b.n	8000ca2 <_write+0x4a>
    else
      return EIO;
 8000c90:	2305      	movs	r3, #5
 8000c92:	e006      	b.n	8000ca2 <_write+0x4a>
  }
  errno = EBADF;
 8000c94:	f005 f870 	bl	8005d78 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2209      	movs	r2, #9
 8000c9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000920 	.word	0x20000920

08000cb0 <_close>:

int _close(int fd) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db04      	blt.n	8000cc8 <_close+0x18>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	dc01      	bgt.n	8000cc8 <_close+0x18>
    return 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e006      	b.n	8000cd6 <_close+0x26>

  errno = EBADF;
 8000cc8:	f005 f856 	bl	8005d78 <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2209      	movs	r2, #9
 8000cd0:	601a      	str	r2, [r3, #0]
  return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000cea:	f005 f845 	bl	8005d78 <__errno>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2209      	movs	r2, #9
 8000cf2:	601a      	str	r2, [r3, #0]
  return -1;
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_read>:

int _read(int fd, char* ptr, int len) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d110      	bne.n	8000d34 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <_read+0x4c>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	f002 f9c8 	bl	80030b2 <HAL_UART_Receive>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <_read+0x30>
      return 1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e008      	b.n	8000d42 <_read+0x42>
    else
      return EIO;
 8000d30:	2305      	movs	r3, #5
 8000d32:	e006      	b.n	8000d42 <_read+0x42>
  }
  errno = EBADF;
 8000d34:	f005 f820 	bl	8005d78 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2209      	movs	r2, #9
 8000d3c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000920 	.word	0x20000920

08000d50 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db08      	blt.n	8000d72 <_fstat+0x22>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	dc05      	bgt.n	8000d72 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d6c:	605a      	str	r2, [r3, #4]
    return 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e005      	b.n	8000d7e <_fstat+0x2e>
  }

  errno = EBADF;
 8000d72:	f005 f801 	bl	8005d78 <__errno>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2209      	movs	r2, #9
 8000d7a:	601a      	str	r2, [r3, #0]
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	f06f 0001 	mvn.w	r0, #1
 8000dc6:	f000 fa3b 	bl	8001240 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0aa      	sub	sp, #168	; 0xa8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	2284      	movs	r2, #132	; 0x84
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 f8ee 	bl	8005fda <memset>
  if(huart->Instance==USART3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13c      	bne.n	8000e82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f99a 	bl	8002150 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e22:	f7ff fefb 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e70:	2307      	movs	r3, #7
 8000e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_UART_MspInit+0xbc>)
 8000e7e:	f000 fa09 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	37a8      	adds	r7, #168	; 0xa8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020c00 	.word	0x40020c00

08000e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	2019      	movs	r0, #25
 8000eae:	f000 f9c7 	bl	8001240 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000eb2:	2019      	movs	r0, #25
 8000eb4:	f000 f9e0 	bl	8001278 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_InitTick+0x9c>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_InitTick+0x9c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_InitTick+0x9c>)
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed0:	f107 0210 	add.w	r2, r7, #16
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 f906 	bl	80020ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ee0:	f001 f8f0 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8000ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_InitTick+0xa0>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_InitTick+0xa4>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_InitTick+0xa8>)
 8000ef8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_InitTick+0xa4>)
 8000efc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_InitTick+0xa4>)
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_InitTick+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_InitTick+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_InitTick+0xa4>)
 8000f16:	f001 fd0b 	bl	8002930 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d104      	bne.n	8000f2a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HAL_InitTick+0xa4>)
 8000f22:	f001 fd67 	bl	80029f4 <HAL_TIM_Base_Start_IT>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	20000924 	.word	0x20000924
 8000f40:	40010000 	.word	0x40010000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f76:	f001 fdb5 	bl	8002ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000924 	.word	0x20000924

08000f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f8c:	f000 fb60 	bl	8001650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f004 fed8 	bl	8005d78 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20050000 	.word	0x20050000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000970 	.word	0x20000970
 8000ffc:	200046e8 	.word	0x200046e8

08001000 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f004 ff8d 	bl	8005f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fc0f 	bl	8000878 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001068:	08006874 	.word	0x08006874
  ldr r2, =_sbss
 800106c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001070:	200046e4 	.word	0x200046e4

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>

08001076 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	2003      	movs	r0, #3
 800107c:	f000 f8d5 	bl	800122a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001080:	200f      	movs	r0, #15
 8001082:	f7ff ff09 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fe7f 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000974 	.word	0x20000974

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000974 	.word	0x20000974

080010d0 <__NVIC_SetPriorityGrouping>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	05fa0000 	.word	0x05fa0000

08001118 <__NVIC_GetPriorityGrouping>:
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff4c 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001252:	f7ff ff61 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff ffb1 	bl	80011c4 <NVIC_EncodePriority>
 8001262:	4602      	mov	r2, r0
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff80 	bl	8001170 <__NVIC_SetPriority>
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff54 	bl	8001134 <__NVIC_EnableIRQ>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e175      	b.n	80015a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8164 	bne.w	800159a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d005      	beq.n	80012ea <HAL_GPIO_Init+0x56>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d130      	bne.n	800134c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80be 	beq.w	800159a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_GPIO_Init+0x324>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <HAL_GPIO_Init+0x324>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_GPIO_Init+0x324>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001436:	4a61      	ldr	r2, [pc, #388]	; (80015bc <HAL_GPIO_Init+0x328>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_GPIO_Init+0x32c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d037      	beq.n	80014d2 <HAL_GPIO_Init+0x23e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d031      	beq.n	80014ce <HAL_GPIO_Init+0x23a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d02b      	beq.n	80014ca <HAL_GPIO_Init+0x236>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a55      	ldr	r2, [pc, #340]	; (80015cc <HAL_GPIO_Init+0x338>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d025      	beq.n	80014c6 <HAL_GPIO_Init+0x232>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a54      	ldr	r2, [pc, #336]	; (80015d0 <HAL_GPIO_Init+0x33c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d01f      	beq.n	80014c2 <HAL_GPIO_Init+0x22e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <HAL_GPIO_Init+0x340>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d019      	beq.n	80014be <HAL_GPIO_Init+0x22a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_GPIO_Init+0x344>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0x226>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_GPIO_Init+0x348>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00d      	beq.n	80014b6 <HAL_GPIO_Init+0x222>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_GPIO_Init+0x34c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x21e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4f      	ldr	r2, [pc, #316]	; (80015e4 <HAL_GPIO_Init+0x350>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_GPIO_Init+0x21a>
 80014aa:	2309      	movs	r3, #9
 80014ac:	e012      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ae:	230a      	movs	r3, #10
 80014b0:	e010      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014b2:	2308      	movs	r3, #8
 80014b4:	e00e      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x328>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_GPIO_Init+0x354>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a34      	ldr	r2, [pc, #208]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_GPIO_Init+0x354>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <HAL_GPIO_Init+0x354>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae86 	bls.w	80012b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40022400 	.word	0x40022400
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e001      	b.n	800160e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f806 	bl	8001680 <HAL_GPIO_EXTI_Callback>
  }
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40013c00 	.word	0x40013c00

08001680 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40007000 	.word	0x40007000

080016b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_PWREx_EnableOverDrive+0x98>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_PWREx_EnableOverDrive+0x98>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_PWREx_EnableOverDrive+0x98>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e6:	f7ff fce7 	bl	80010b8 <HAL_GetTick>
 80016ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016ec:	e009      	b.n	8001702 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016ee:	f7ff fce3 	bl	80010b8 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016fc:	d901      	bls.n	8001702 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e022      	b.n	8001748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d1ee      	bne.n	80016ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800171c:	f7ff fccc 	bl	80010b8 <HAL_GetTick>
 8001720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001722:	e009      	b.n	8001738 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001724:	f7ff fcc8 	bl	80010b8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001732:	d901      	bls.n	8001738 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e007      	b.n	8001748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001744:	d1ee      	bne.n	8001724 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e291      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8087 	beq.w	800188a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800177c:	4b96      	ldr	r3, [pc, #600]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b04      	cmp	r3, #4
 8001786:	d00c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001788:	4b93      	ldr	r3, [pc, #588]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d112      	bne.n	80017ba <HAL_RCC_OscConfig+0x62>
 8001794:	4b90      	ldr	r3, [pc, #576]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017a0:	d10b      	bne.n	80017ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	4b8d      	ldr	r3, [pc, #564]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d06c      	beq.n	8001888 <HAL_RCC_OscConfig+0x130>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d168      	bne.n	8001888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e26b      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x7a>
 80017c4:	4b84      	ldr	r3, [pc, #528]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a83      	ldr	r2, [pc, #524]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e02e      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x9c>
 80017da:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7e      	ldr	r2, [pc, #504]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b7c      	ldr	r3, [pc, #496]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7b      	ldr	r2, [pc, #492]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e01d      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0xc0>
 80017fe:	4b76      	ldr	r3, [pc, #472]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a75      	ldr	r2, [pc, #468]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b73      	ldr	r3, [pc, #460]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a72      	ldr	r2, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 8001818:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b6c      	ldr	r3, [pc, #432]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6b      	ldr	r2, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fc3e 	bl	80010b8 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fc3a 	bl	80010b8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e21f      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b61      	ldr	r3, [pc, #388]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fc2a 	bl	80010b8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fc26 	bl	80010b8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e20b      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x110>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d069      	beq.n	800196a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a2:	4b4d      	ldr	r3, [pc, #308]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d11c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x190>
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d116      	bne.n	80018e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_OscConfig+0x17a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e1df      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	493d      	ldr	r1, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	e040      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d023      	beq.n	8001938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fbdc 	bl	80010b8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fbd8 	bl	80010b8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1bd      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4929      	ldr	r1, [pc, #164]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e018      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fbb8 	bl	80010b8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fbb4 	bl	80010b8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e199      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d038      	beq.n	80019e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff fb95 	bl	80010b8 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff fb91 	bl	80010b8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e176      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x23a>
 80019b0:	e01a      	b.n	80019e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <HAL_RCC_OscConfig+0x280>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff fb7b 	bl	80010b8 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff fb77 	bl	80010b8 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d903      	bls.n	80019dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e15c      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
 80019d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b91      	ldr	r3, [pc, #580]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 80019de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a4 	beq.w	8001b3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10d      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a87      	ldr	r2, [pc, #540]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b85      	ldr	r3, [pc, #532]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fb3f 	bl	80010b8 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fb3b 	bl	80010b8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e120      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x31a>
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	e02d      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x33c>
 8001a7a:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a69      	ldr	r2, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a66      	ldr	r2, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	e01c      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x35e>
 8001a9c:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa8:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab4:	e00b      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac2:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff faef 	bl	80010b8 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff faeb 	bl	80010b8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0ce      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ee      	beq.n	8001ade <HAL_RCC_OscConfig+0x386>
 8001b00:	e014      	b.n	8001b2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fad9 	bl	80010b8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fad5 	bl	80010b8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80a4 	beq.w	8001c90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d06b      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d149      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff faa6 	bl	80010b8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff faa2 	bl	80010b8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e087      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fa76 	bl	80010b8 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff fa72 	bl	80010b8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e057      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x478>
 8001bee:	e04f      	b.n	8001c90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fa5c 	bl	80010b8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff fa58 	bl	80010b8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e03d      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4ac>
 8001c22:	e035      	b.n	8001c90 <HAL_RCC_OscConfig+0x538>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x544>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d028      	beq.n	8001c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d121      	bne.n	8001c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d11a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d111      	bne.n	8001c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d0      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 020f 	bic.w	r2, r3, #15
 8001cce:	4965      	ldr	r1, [pc, #404]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d040      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e073      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4936      	ldr	r1, [pc, #216]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d94:	f7ff f990 	bl	80010b8 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff f98c 	bl	80010b8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e053      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d210      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 020f 	bic.w	r2, r3, #15
 8001dda:	4922      	ldr	r1, [pc, #136]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f821 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x1cc>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1d0>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1d4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f820 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023c00 	.word	0x40023c00
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	080067e0 	.word	0x080067e0
 8001e70:	20000004 	.word	0x20000004
 8001e74:	20000008 	.word	0x20000008

08001e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e7c:	b094      	sub	sp, #80	; 0x50
 8001e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	647b      	str	r3, [r7, #68]	; 0x44
 8001e84:	2300      	movs	r3, #0
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e88:	2300      	movs	r3, #0
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e90:	4b79      	ldr	r3, [pc, #484]	; (8002078 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	f200 80e1 	bhi.w	8002064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x34>
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eaa:	e0db      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b73      	ldr	r3, [pc, #460]	; (800207c <HAL_RCC_GetSysClockFreq+0x204>)
 8001eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eb0:	e0db      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_GetSysClockFreq+0x208>)
 8001eb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eb6:	e0d8      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ec2:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d063      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ece:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	099b      	lsrs	r3, r3, #6
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eea:	4622      	mov	r2, r4
 8001eec:	462b      	mov	r3, r5
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0159      	lsls	r1, r3, #5
 8001ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001efc:	0150      	lsls	r0, r2, #5
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4621      	mov	r1, r4
 8001f04:	1a51      	subs	r1, r2, r1
 8001f06:	6139      	str	r1, [r7, #16]
 8001f08:	4629      	mov	r1, r5
 8001f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f1c:	4659      	mov	r1, fp
 8001f1e:	018b      	lsls	r3, r1, #6
 8001f20:	4651      	mov	r1, sl
 8001f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f26:	4651      	mov	r1, sl
 8001f28:	018a      	lsls	r2, r1, #6
 8001f2a:	4651      	mov	r1, sl
 8001f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001f30:	4659      	mov	r1, fp
 8001f32:	eb63 0901 	sbc.w	r9, r3, r1
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	4623      	mov	r3, r4
 8001f50:	eb18 0303 	adds.w	r3, r8, r3
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	462b      	mov	r3, r5
 8001f58:	eb49 0303 	adc.w	r3, r9, r3
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	024b      	lsls	r3, r1, #9
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f74:	4621      	mov	r1, r4
 8001f76:	024a      	lsls	r2, r1, #9
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7e:	2200      	movs	r2, #0
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f88:	f7fe f942 	bl	8000210 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f94:	e058      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	099b      	lsrs	r3, r3, #6
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
 8001fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	f04f 0000 	mov.w	r0, #0
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	0159      	lsls	r1, r3, #5
 8001fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc2:	0150      	lsls	r0, r2, #5
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4641      	mov	r1, r8
 8001fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fce:	4649      	mov	r1, r9
 8001fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8001fec:	eb63 050b 	sbc.w	r5, r3, fp
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	00eb      	lsls	r3, r5, #3
 8001ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ffe:	00e2      	lsls	r2, r4, #3
 8002000:	4614      	mov	r4, r2
 8002002:	461d      	mov	r5, r3
 8002004:	4643      	mov	r3, r8
 8002006:	18e3      	adds	r3, r4, r3
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	464b      	mov	r3, r9
 800200c:	eb45 0303 	adc.w	r3, r5, r3
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800201e:	4629      	mov	r1, r5
 8002020:	028b      	lsls	r3, r1, #10
 8002022:	4621      	mov	r1, r4
 8002024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002028:	4621      	mov	r1, r4
 800202a:	028a      	lsls	r2, r1, #10
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	2200      	movs	r2, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	61fa      	str	r2, [r7, #28]
 8002038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800203c:	f7fe f8e8 	bl	8000210 <__aeabi_uldivmod>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4613      	mov	r3, r2
 8002046:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_GetSysClockFreq+0x200>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	3301      	adds	r3, #1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800205a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002062:	e002      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetSysClockFreq+0x204>)
 8002066:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800206c:	4618      	mov	r0, r3
 800206e:	3750      	adds	r7, #80	; 0x50
 8002070:	46bd      	mov	sp, r7
 8002072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	00f42400 	.word	0x00f42400
 8002080:	007a1200 	.word	0x007a1200

08002084 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_RCC_GetHCLKFreq+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a0:	f7ff fff0 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0a9b      	lsrs	r3, r3, #10
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4903      	ldr	r1, [pc, #12]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800
 80020c0:	080067f0 	.word	0x080067f0

080020c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c8:	f7ff ffdc 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	0b5b      	lsrs	r3, r3, #13
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4903      	ldr	r1, [pc, #12]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40023800 	.word	0x40023800
 80020e8:	080067f0 	.word	0x080067f0

080020ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	220f      	movs	r2, #15
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_RCC_GetClockConfig+0x60>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 020f 	and.w	r2, r3, #15
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	601a      	str	r2, [r3, #0]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002178:	4b69      	ldr	r3, [pc, #420]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002182:	6093      	str	r3, [r2, #8]
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	4964      	ldr	r1, [pc, #400]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d017      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	4959      	ldr	r1, [pc, #356]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c8:	d101      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d017      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021e6:	4b4e      	ldr	r3, [pc, #312]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	494a      	ldr	r1, [pc, #296]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002204:	d101      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002206:	2301      	movs	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002222:	2301      	movs	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 808b 	beq.w	800234a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	4a39      	ldr	r2, [pc, #228]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6413      	str	r3, [r2, #64]	; 0x40
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800224c:	4b35      	ldr	r3, [pc, #212]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a34      	ldr	r2, [pc, #208]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002258:	f7fe ff2e 	bl	80010b8 <HAL_GetTick>
 800225c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe ff2a 	bl	80010b8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e357      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d035      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d02e      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022be:	4a18      	ldr	r2, [pc, #96]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d114      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fef2 	bl	80010b8 <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe feee 	bl	80010b8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e319      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0ee      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002306:	d111      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002316:	400b      	ands	r3, r1
 8002318:	4901      	ldr	r1, [pc, #4]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
 800231e:	e00b      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000
 8002328:	0ffffcff 	.word	0x0ffffcff
 800232c:	4baa      	ldr	r3, [pc, #680]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4aa9      	ldr	r2, [pc, #676]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002332:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002336:	6093      	str	r3, [r2, #8]
 8002338:	4ba7      	ldr	r3, [pc, #668]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800233a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002344:	49a4      	ldr	r1, [pc, #656]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002346:	4313      	orrs	r3, r2
 8002348:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002356:	4ba0      	ldr	r3, [pc, #640]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235c:	4a9e      	ldr	r2, [pc, #632]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002362:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002366:	4b9c      	ldr	r3, [pc, #624]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002368:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	4999      	ldr	r1, [pc, #612]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002384:	4b94      	ldr	r3, [pc, #592]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002392:	4991      	ldr	r1, [pc, #580]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a6:	4b8c      	ldr	r3, [pc, #560]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b4:	4988      	ldr	r1, [pc, #544]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023c8:	4b83      	ldr	r3, [pc, #524]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	4980      	ldr	r1, [pc, #512]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ea:	4b7b      	ldr	r3, [pc, #492]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4977      	ldr	r1, [pc, #476]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800240c:	4b72      	ldr	r3, [pc, #456]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	496f      	ldr	r1, [pc, #444]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242e:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f023 020c 	bic.w	r2, r3, #12
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243c:	4966      	ldr	r1, [pc, #408]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	495e      	ldr	r1, [pc, #376]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	4955      	ldr	r1, [pc, #340]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	494d      	ldr	r1, [pc, #308]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024b6:	4b48      	ldr	r3, [pc, #288]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4944      	ldr	r1, [pc, #272]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024d8:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	493c      	ldr	r1, [pc, #240]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002508:	4933      	ldr	r1, [pc, #204]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800251c:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252a:	492b      	ldr	r1, [pc, #172]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d011      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800254c:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800255c:	d101      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	4912      	ldr	r1, [pc, #72]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b0:	4909      	ldr	r1, [pc, #36]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d006      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80d9 	beq.w	800277e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025cc:	4b02      	ldr	r3, [pc, #8]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a01      	ldr	r2, [pc, #4]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025d6:	e001      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025de:	f7fe fd6b 	bl	80010b8 <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025e6:	f7fe fd67 	bl	80010b8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e194      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025f8:	4b6c      	ldr	r3, [pc, #432]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d021      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	2b00      	cmp	r3, #0
 8002616:	d11d      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002618:	4b64      	ldr	r3, [pc, #400]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800261a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002626:	4b61      	ldr	r3, [pc, #388]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262c:	0e1b      	lsrs	r3, r3, #24
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	019a      	lsls	r2, r3, #6
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	071b      	lsls	r3, r3, #28
 800264c:	4957      	ldr	r1, [pc, #348]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002672:	2b00      	cmp	r3, #0
 8002674:	d02e      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800267e:	d129      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002680:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002694:	0f1b      	lsrs	r3, r3, #28
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	019a      	lsls	r2, r3, #6
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	071b      	lsls	r3, r3, #28
 80026b4:	493d      	ldr	r1, [pc, #244]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026bc:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c2:	f023 021f 	bic.w	r2, r3, #31
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	3b01      	subs	r3, #1
 80026cc:	4937      	ldr	r1, [pc, #220]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01d      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026e0:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e6:	0e1b      	lsrs	r3, r3, #24
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f4:	0f1b      	lsrs	r3, r3, #28
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	019a      	lsls	r2, r3, #6
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	431a      	orrs	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	431a      	orrs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	071b      	lsls	r3, r3, #28
 8002714:	4925      	ldr	r1, [pc, #148]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d011      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	019a      	lsls	r2, r3, #6
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	4919      	ldr	r1, [pc, #100]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002758:	f7fe fcae 	bl	80010b8 <HAL_GetTick>
 800275c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002760:	f7fe fcaa 	bl	80010b8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0d7      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b01      	cmp	r3, #1
 8002782:	f040 80cd 	bne.w	8002920 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002792:	f7fe fc91 	bl	80010b8 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800279a:	f7fe fc8d 	bl	80010b8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d903      	bls.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0ba      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80027ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027b0:	4b5e      	ldr	r3, [pc, #376]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027bc:	d0ed      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02e      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d12a      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	0f1b      	lsrs	r3, r3, #28
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	019a      	lsls	r2, r3, #6
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	4944      	ldr	r1, [pc, #272]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002822:	4b42      	ldr	r3, [pc, #264]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002828:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	493d      	ldr	r1, [pc, #244]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d022      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002850:	d11d      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	0e1b      	lsrs	r3, r3, #24
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	0f1b      	lsrs	r3, r3, #28
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	019a      	lsls	r2, r3, #6
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	061b      	lsls	r3, r3, #24
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	071b      	lsls	r3, r3, #28
 8002886:	4929      	ldr	r1, [pc, #164]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d028      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	0e1b      	lsrs	r3, r3, #24
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	019a      	lsls	r2, r3, #6
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	071b      	lsls	r3, r3, #28
 80028ce:	4917      	ldr	r1, [pc, #92]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	4911      	ldr	r1, [pc, #68]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f8:	f7fe fbde 	bl	80010b8 <HAL_GetTick>
 80028fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002900:	f7fe fbda 	bl	80010b8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e007      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800291a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291e:	d1ef      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e049      	b.n	80029d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f841 	bl	80029de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 fa00 	bl	8002d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d001      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e054      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d01d      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <HAL_TIM_Base_Start_IT+0xd8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_TIM_Base_Start_IT+0xe8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d115      	bne.n	8002aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d015      	beq.n	8002ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d011      	beq.n	8002ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	e008      	b.n	8002ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e000      	b.n	8002ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40010400 	.word	0x40010400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40001800 	.word	0x40001800
 8002ae0:	00010007 	.word	0x00010007

08002ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0202 	mvn.w	r2, #2
 8002b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f905 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8f7 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f908 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0204 	mvn.w	r2, #4
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8db 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8cd 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f8de 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0208 	mvn.w	r2, #8
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8b1 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8a3 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8b4 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0210 	mvn.w	r2, #16
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2208      	movs	r2, #8
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f887 	bl	8002d36 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f879 	bl	8002d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f88a 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0201 	mvn.w	r2, #1
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fd ffc8 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b80      	cmp	r3, #128	; 0x80
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f91a 	bl	8002ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	2b80      	cmp	r3, #128	; 0x80
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f90d 	bl	8002edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d10e      	bne.n	8002cee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d107      	bne.n	8002cee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f838 	bl	8002d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d10e      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d107      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0220 	mvn.w	r2, #32
 8002d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f8cd 	bl	8002eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a40      	ldr	r2, [pc, #256]	; (8002e88 <TIM_Base_SetConfig+0x114>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d92:	d00f      	beq.n	8002db4 <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3d      	ldr	r2, [pc, #244]	; (8002e8c <TIM_Base_SetConfig+0x118>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <TIM_Base_SetConfig+0x40>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3c      	ldr	r2, [pc, #240]	; (8002e90 <TIM_Base_SetConfig+0x11c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <TIM_Base_SetConfig+0x120>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a3a      	ldr	r2, [pc, #232]	; (8002e98 <TIM_Base_SetConfig+0x124>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d108      	bne.n	8002dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <TIM_Base_SetConfig+0x114>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02b      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d027      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a2c      	ldr	r2, [pc, #176]	; (8002e8c <TIM_Base_SetConfig+0x118>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d023      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a2b      	ldr	r2, [pc, #172]	; (8002e90 <TIM_Base_SetConfig+0x11c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01f      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <TIM_Base_SetConfig+0x120>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01b      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a29      	ldr	r2, [pc, #164]	; (8002e98 <TIM_Base_SetConfig+0x124>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d017      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <TIM_Base_SetConfig+0x128>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <TIM_Base_SetConfig+0x12c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00f      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <TIM_Base_SetConfig+0x130>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <TIM_Base_SetConfig+0x134>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a24      	ldr	r2, [pc, #144]	; (8002eac <TIM_Base_SetConfig+0x138>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <TIM_Base_SetConfig+0x13c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <TIM_Base_SetConfig+0x114>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0xf8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <TIM_Base_SetConfig+0x124>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800
 8002e94:	40000c00 	.word	0x40000c00
 8002e98:	40010400 	.word	0x40010400
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800
 8002ea8:	40001800 	.word	0x40001800
 8002eac:	40001c00 	.word	0x40001c00
 8002eb0:	40002000 	.word	0x40002000

08002eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e040      	b.n	8002f84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd ff60 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f990 	bl	8003254 <UART_SetConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e022      	b.n	8002f84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fbe8 	bl	800371c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fc6f 	bl	8003860 <UART_CheckIdleState>
 8002f82:	4603      	mov	r3, r0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	f040 8081 	bne.w	80030a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Transmit+0x26>
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e079      	b.n	80030aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit+0x38>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e072      	b.n	80030aa <HAL_UART_Transmit+0x11e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2221      	movs	r2, #33	; 0x21
 8002fd8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fda:	f7fe f86d 	bl	80010b8 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff8:	d108      	bne.n	800300c <HAL_UART_Transmit+0x80>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d104      	bne.n	800300c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e003      	b.n	8003014 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800301c:	e02c      	b.n	8003078 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fc4c 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e038      	b.n	80030aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3302      	adds	r3, #2
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e007      	b.n	8003066 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3301      	adds	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1cc      	bne.n	800301e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2200      	movs	r2, #0
 800308c:	2140      	movs	r1, #64	; 0x40
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fc19 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e005      	b.n	80030aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	; 0x28
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 80be 	bne.w	8003248 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_UART_Receive+0x26>
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b6      	b.n	800324a <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Receive+0x38>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e0af      	b.n	800324a <HAL_UART_Receive+0x198>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2222      	movs	r2, #34	; 0x22
 80030fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003106:	f7fd ffd7 	bl	80010b8 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	d10e      	bne.n	8003144 <HAL_UART_Receive+0x92>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_UART_Receive+0x88>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003138:	e02d      	b.n	8003196 <HAL_UART_Receive+0xe4>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	22ff      	movs	r2, #255	; 0xff
 800313e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003142:	e028      	b.n	8003196 <HAL_UART_Receive+0xe4>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_UART_Receive+0xb6>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_UART_Receive+0xac>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800315c:	e01b      	b.n	8003196 <HAL_UART_Receive+0xe4>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	227f      	movs	r2, #127	; 0x7f
 8003162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003166:	e016      	b.n	8003196 <HAL_UART_Receive+0xe4>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003170:	d10d      	bne.n	800318e <HAL_UART_Receive+0xdc>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <HAL_UART_Receive+0xd2>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	227f      	movs	r2, #127	; 0x7f
 800317e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003182:	e008      	b.n	8003196 <HAL_UART_Receive+0xe4>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	223f      	movs	r2, #63	; 0x3f
 8003188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800318c:	e003      	b.n	8003196 <HAL_UART_Receive+0xe4>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800319c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a6:	d108      	bne.n	80031ba <HAL_UART_Receive+0x108>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e003      	b.n	80031c2 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031ca:	e032      	b.n	8003232 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	2120      	movs	r1, #32
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fb75 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e031      	b.n	800324a <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10c      	bne.n	8003206 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	8a7b      	ldrh	r3, [r7, #18]
 80031f6:	4013      	ands	r3, r2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	3302      	adds	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	e00c      	b.n	8003220 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8a7b      	ldrh	r3, [r7, #18]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4013      	ands	r3, r2
 8003214:	b2da      	uxtb	r2, r3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1c6      	bne.n	80031cc <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4ba6      	ldr	r3, [pc, #664]	; (8003518 <UART_SetConfig+0x2c4>)
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	430b      	orrs	r3, r1
 800328a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a94      	ldr	r2, [pc, #592]	; (800351c <UART_SetConfig+0x2c8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d120      	bne.n	8003312 <UART_SetConfig+0xbe>
 80032d0:	4b93      	ldr	r3, [pc, #588]	; (8003520 <UART_SetConfig+0x2cc>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d816      	bhi.n	800330c <UART_SetConfig+0xb8>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x90>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003301 	.word	0x08003301
 80032ec:	080032fb 	.word	0x080032fb
 80032f0:	08003307 	.word	0x08003307
 80032f4:	2301      	movs	r3, #1
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e150      	b.n	800359c <UART_SetConfig+0x348>
 80032fa:	2302      	movs	r3, #2
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e14d      	b.n	800359c <UART_SetConfig+0x348>
 8003300:	2304      	movs	r3, #4
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e14a      	b.n	800359c <UART_SetConfig+0x348>
 8003306:	2308      	movs	r3, #8
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e147      	b.n	800359c <UART_SetConfig+0x348>
 800330c:	2310      	movs	r3, #16
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e144      	b.n	800359c <UART_SetConfig+0x348>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a83      	ldr	r2, [pc, #524]	; (8003524 <UART_SetConfig+0x2d0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d132      	bne.n	8003382 <UART_SetConfig+0x12e>
 800331c:	4b80      	ldr	r3, [pc, #512]	; (8003520 <UART_SetConfig+0x2cc>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d828      	bhi.n	800337c <UART_SetConfig+0x128>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <UART_SetConfig+0xdc>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003365 	.word	0x08003365
 8003334:	0800337d 	.word	0x0800337d
 8003338:	0800337d 	.word	0x0800337d
 800333c:	0800337d 	.word	0x0800337d
 8003340:	08003371 	.word	0x08003371
 8003344:	0800337d 	.word	0x0800337d
 8003348:	0800337d 	.word	0x0800337d
 800334c:	0800337d 	.word	0x0800337d
 8003350:	0800336b 	.word	0x0800336b
 8003354:	0800337d 	.word	0x0800337d
 8003358:	0800337d 	.word	0x0800337d
 800335c:	0800337d 	.word	0x0800337d
 8003360:	08003377 	.word	0x08003377
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e118      	b.n	800359c <UART_SetConfig+0x348>
 800336a:	2302      	movs	r3, #2
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e115      	b.n	800359c <UART_SetConfig+0x348>
 8003370:	2304      	movs	r3, #4
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e112      	b.n	800359c <UART_SetConfig+0x348>
 8003376:	2308      	movs	r3, #8
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e10f      	b.n	800359c <UART_SetConfig+0x348>
 800337c:	2310      	movs	r3, #16
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e10c      	b.n	800359c <UART_SetConfig+0x348>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a68      	ldr	r2, [pc, #416]	; (8003528 <UART_SetConfig+0x2d4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d120      	bne.n	80033ce <UART_SetConfig+0x17a>
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <UART_SetConfig+0x2cc>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003396:	2b30      	cmp	r3, #48	; 0x30
 8003398:	d013      	beq.n	80033c2 <UART_SetConfig+0x16e>
 800339a:	2b30      	cmp	r3, #48	; 0x30
 800339c:	d814      	bhi.n	80033c8 <UART_SetConfig+0x174>
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d009      	beq.n	80033b6 <UART_SetConfig+0x162>
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d810      	bhi.n	80033c8 <UART_SetConfig+0x174>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <UART_SetConfig+0x15c>
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d006      	beq.n	80033bc <UART_SetConfig+0x168>
 80033ae:	e00b      	b.n	80033c8 <UART_SetConfig+0x174>
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e0f2      	b.n	800359c <UART_SetConfig+0x348>
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e0ef      	b.n	800359c <UART_SetConfig+0x348>
 80033bc:	2304      	movs	r3, #4
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0ec      	b.n	800359c <UART_SetConfig+0x348>
 80033c2:	2308      	movs	r3, #8
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e0e9      	b.n	800359c <UART_SetConfig+0x348>
 80033c8:	2310      	movs	r3, #16
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0e6      	b.n	800359c <UART_SetConfig+0x348>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a56      	ldr	r2, [pc, #344]	; (800352c <UART_SetConfig+0x2d8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d120      	bne.n	800341a <UART_SetConfig+0x1c6>
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <UART_SetConfig+0x2cc>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033e2:	2bc0      	cmp	r3, #192	; 0xc0
 80033e4:	d013      	beq.n	800340e <UART_SetConfig+0x1ba>
 80033e6:	2bc0      	cmp	r3, #192	; 0xc0
 80033e8:	d814      	bhi.n	8003414 <UART_SetConfig+0x1c0>
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d009      	beq.n	8003402 <UART_SetConfig+0x1ae>
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d810      	bhi.n	8003414 <UART_SetConfig+0x1c0>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <UART_SetConfig+0x1a8>
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d006      	beq.n	8003408 <UART_SetConfig+0x1b4>
 80033fa:	e00b      	b.n	8003414 <UART_SetConfig+0x1c0>
 80033fc:	2300      	movs	r3, #0
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e0cc      	b.n	800359c <UART_SetConfig+0x348>
 8003402:	2302      	movs	r3, #2
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e0c9      	b.n	800359c <UART_SetConfig+0x348>
 8003408:	2304      	movs	r3, #4
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e0c6      	b.n	800359c <UART_SetConfig+0x348>
 800340e:	2308      	movs	r3, #8
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e0c3      	b.n	800359c <UART_SetConfig+0x348>
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0c0      	b.n	800359c <UART_SetConfig+0x348>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a44      	ldr	r2, [pc, #272]	; (8003530 <UART_SetConfig+0x2dc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d125      	bne.n	8003470 <UART_SetConfig+0x21c>
 8003424:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <UART_SetConfig+0x2cc>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003432:	d017      	beq.n	8003464 <UART_SetConfig+0x210>
 8003434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003438:	d817      	bhi.n	800346a <UART_SetConfig+0x216>
 800343a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343e:	d00b      	beq.n	8003458 <UART_SetConfig+0x204>
 8003440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003444:	d811      	bhi.n	800346a <UART_SetConfig+0x216>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <UART_SetConfig+0x1fe>
 800344a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344e:	d006      	beq.n	800345e <UART_SetConfig+0x20a>
 8003450:	e00b      	b.n	800346a <UART_SetConfig+0x216>
 8003452:	2300      	movs	r3, #0
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e0a1      	b.n	800359c <UART_SetConfig+0x348>
 8003458:	2302      	movs	r3, #2
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e09e      	b.n	800359c <UART_SetConfig+0x348>
 800345e:	2304      	movs	r3, #4
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e09b      	b.n	800359c <UART_SetConfig+0x348>
 8003464:	2308      	movs	r3, #8
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e098      	b.n	800359c <UART_SetConfig+0x348>
 800346a:	2310      	movs	r3, #16
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e095      	b.n	800359c <UART_SetConfig+0x348>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <UART_SetConfig+0x2e0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d125      	bne.n	80034c6 <UART_SetConfig+0x272>
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <UART_SetConfig+0x2cc>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003488:	d017      	beq.n	80034ba <UART_SetConfig+0x266>
 800348a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800348e:	d817      	bhi.n	80034c0 <UART_SetConfig+0x26c>
 8003490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003494:	d00b      	beq.n	80034ae <UART_SetConfig+0x25a>
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349a:	d811      	bhi.n	80034c0 <UART_SetConfig+0x26c>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <UART_SetConfig+0x254>
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a4:	d006      	beq.n	80034b4 <UART_SetConfig+0x260>
 80034a6:	e00b      	b.n	80034c0 <UART_SetConfig+0x26c>
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e076      	b.n	800359c <UART_SetConfig+0x348>
 80034ae:	2302      	movs	r3, #2
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e073      	b.n	800359c <UART_SetConfig+0x348>
 80034b4:	2304      	movs	r3, #4
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e070      	b.n	800359c <UART_SetConfig+0x348>
 80034ba:	2308      	movs	r3, #8
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e06d      	b.n	800359c <UART_SetConfig+0x348>
 80034c0:	2310      	movs	r3, #16
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e06a      	b.n	800359c <UART_SetConfig+0x348>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <UART_SetConfig+0x2e4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d138      	bne.n	8003542 <UART_SetConfig+0x2ee>
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <UART_SetConfig+0x2cc>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034de:	d017      	beq.n	8003510 <UART_SetConfig+0x2bc>
 80034e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034e4:	d82a      	bhi.n	800353c <UART_SetConfig+0x2e8>
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ea:	d00b      	beq.n	8003504 <UART_SetConfig+0x2b0>
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f0:	d824      	bhi.n	800353c <UART_SetConfig+0x2e8>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <UART_SetConfig+0x2aa>
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d006      	beq.n	800350a <UART_SetConfig+0x2b6>
 80034fc:	e01e      	b.n	800353c <UART_SetConfig+0x2e8>
 80034fe:	2300      	movs	r3, #0
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e04b      	b.n	800359c <UART_SetConfig+0x348>
 8003504:	2302      	movs	r3, #2
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e048      	b.n	800359c <UART_SetConfig+0x348>
 800350a:	2304      	movs	r3, #4
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e045      	b.n	800359c <UART_SetConfig+0x348>
 8003510:	2308      	movs	r3, #8
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e042      	b.n	800359c <UART_SetConfig+0x348>
 8003516:	bf00      	nop
 8003518:	efff69f3 	.word	0xefff69f3
 800351c:	40011000 	.word	0x40011000
 8003520:	40023800 	.word	0x40023800
 8003524:	40004400 	.word	0x40004400
 8003528:	40004800 	.word	0x40004800
 800352c:	40004c00 	.word	0x40004c00
 8003530:	40005000 	.word	0x40005000
 8003534:	40011400 	.word	0x40011400
 8003538:	40007800 	.word	0x40007800
 800353c:	2310      	movs	r3, #16
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e02c      	b.n	800359c <UART_SetConfig+0x348>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a72      	ldr	r2, [pc, #456]	; (8003710 <UART_SetConfig+0x4bc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d125      	bne.n	8003598 <UART_SetConfig+0x344>
 800354c:	4b71      	ldr	r3, [pc, #452]	; (8003714 <UART_SetConfig+0x4c0>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003556:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800355a:	d017      	beq.n	800358c <UART_SetConfig+0x338>
 800355c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003560:	d817      	bhi.n	8003592 <UART_SetConfig+0x33e>
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d00b      	beq.n	8003580 <UART_SetConfig+0x32c>
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	d811      	bhi.n	8003592 <UART_SetConfig+0x33e>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <UART_SetConfig+0x326>
 8003572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003576:	d006      	beq.n	8003586 <UART_SetConfig+0x332>
 8003578:	e00b      	b.n	8003592 <UART_SetConfig+0x33e>
 800357a:	2300      	movs	r3, #0
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e00d      	b.n	800359c <UART_SetConfig+0x348>
 8003580:	2302      	movs	r3, #2
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e00a      	b.n	800359c <UART_SetConfig+0x348>
 8003586:	2304      	movs	r3, #4
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e007      	b.n	800359c <UART_SetConfig+0x348>
 800358c:	2308      	movs	r3, #8
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e004      	b.n	800359c <UART_SetConfig+0x348>
 8003592:	2310      	movs	r3, #16
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e001      	b.n	800359c <UART_SetConfig+0x348>
 8003598:	2310      	movs	r3, #16
 800359a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a4:	d15b      	bne.n	800365e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d828      	bhi.n	80035fe <UART_SetConfig+0x3aa>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0x360>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035ef 	.word	0x080035ef
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ff 	.word	0x080035ff
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7fe fd60 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 80035dc:	61b8      	str	r0, [r7, #24]
        break;
 80035de:	e013      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7fe fd70 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 80035e4:	61b8      	str	r0, [r7, #24]
        break;
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <UART_SetConfig+0x4c4>)
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e00c      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7fe fc43 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80035f2:	61b8      	str	r0, [r7, #24]
        break;
 80035f4:	e008      	b.n	8003608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fa:	61bb      	str	r3, [r7, #24]
        break;
 80035fc:	e004      	b.n	8003608 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	77bb      	strb	r3, [r7, #30]
        break;
 8003606:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d074      	beq.n	80036f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b0f      	cmp	r3, #15
 8003628:	d916      	bls.n	8003658 <UART_SetConfig+0x404>
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d212      	bcs.n	8003658 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	b29b      	uxth	r3, r3
 8003636:	f023 030f 	bic.w	r3, r3, #15
 800363a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	b29a      	uxth	r2, r3
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	4313      	orrs	r3, r2
 800364c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	89fa      	ldrh	r2, [r7, #14]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	e04f      	b.n	80036f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	77bb      	strb	r3, [r7, #30]
 800365c:	e04c      	b.n	80036f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d828      	bhi.n	80036b6 <UART_SetConfig+0x462>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <UART_SetConfig+0x418>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	08003691 	.word	0x08003691
 8003670:	08003699 	.word	0x08003699
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036b7 	.word	0x080036b7
 800367c:	080036a7 	.word	0x080036a7
 8003680:	080036b7 	.word	0x080036b7
 8003684:	080036b7 	.word	0x080036b7
 8003688:	080036b7 	.word	0x080036b7
 800368c:	080036af 	.word	0x080036af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003690:	f7fe fd04 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003694:	61b8      	str	r0, [r7, #24]
        break;
 8003696:	e013      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003698:	f7fe fd14 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 800369c:	61b8      	str	r0, [r7, #24]
        break;
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <UART_SetConfig+0x4c4>)
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e00c      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a6:	f7fe fbe7 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80036aa:	61b8      	str	r0, [r7, #24]
        break;
 80036ac:	e008      	b.n	80036c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b2:	61bb      	str	r3, [r7, #24]
        break;
 80036b4:	e004      	b.n	80036c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	77bb      	strb	r3, [r7, #30]
        break;
 80036be:	bf00      	nop
    }

    if (pclk != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	085a      	lsrs	r2, r3, #1
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	441a      	add	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b0f      	cmp	r3, #15
 80036de:	d909      	bls.n	80036f4 <UART_SetConfig+0x4a0>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e6:	d205      	bcs.n	80036f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e001      	b.n	80036f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003704:	7fbb      	ldrb	r3, [r7, #30]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40007c00 	.word	0x40007c00
 8003714:	40023800 	.word	0x40023800
 8003718:	00f42400 	.word	0x00f42400

0800371c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01a      	beq.n	8003832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381a:	d10a      	bne.n	8003832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003870:	f7fd fc22 	bl	80010b8 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d10e      	bne.n	80038a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f817 	bl	80038c6 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e00d      	b.n	80038be <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b09c      	sub	sp, #112	; 0x70
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d6:	e0a5      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	f000 80a1 	beq.w	8003a24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fd fbe9 	bl	80010b8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80038f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d13e      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800390c:	667b      	str	r3, [r7, #100]	; 0x64
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003918:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800391c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e6      	bne.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3308      	adds	r3, #8
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	663b      	str	r3, [r7, #96]	; 0x60
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3308      	adds	r3, #8
 8003948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800394a:	64ba      	str	r2, [r7, #72]	; 0x48
 800394c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e5      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e067      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d04f      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003992:	d147      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800399c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
 80039be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e6      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3308      	adds	r3, #8
 80039d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	613b      	str	r3, [r7, #16]
   return(result);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3308      	adds	r3, #8
 80039ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039f0:	623a      	str	r2, [r7, #32]
 80039f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	69f9      	ldr	r1, [r7, #28]
 80039f6:	6a3a      	ldr	r2, [r7, #32]
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e5      	bne.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e010      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	f43f af4a 	beq.w	80038d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3770      	adds	r7, #112	; 0x70
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a60:	2b84      	cmp	r3, #132	; 0x84
 8003a62:	d005      	beq.n	8003a70 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a70:	68fb      	ldr	r3, [r7, #12]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a82:	f000 fe5d 	bl	8004740 <vTaskStartScheduler>
  
  return osOK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8e:	b089      	sub	sp, #36	; 0x24
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <osThreadCreate+0x54>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01c      	beq.n	8003ae0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685c      	ldr	r4, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681d      	ldr	r5, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691e      	ldr	r6, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ffc8 	bl	8003a4e <makeFreeRtosPriority>
 8003abe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ac8:	9202      	str	r2, [sp, #8]
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	9100      	str	r1, [sp, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f000 fc3b 	bl	8004350 <xTaskCreateStatic>
 8003ada:	4603      	mov	r3, r0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e01c      	b.n	8003b1a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685c      	ldr	r4, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aec:	b29e      	uxth	r6, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ffaa 	bl	8003a4e <makeFreeRtosPriority>
 8003afa:	4602      	mov	r2, r0
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	9200      	str	r2, [sp, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4632      	mov	r2, r6
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 fc83 	bl	8004416 <xTaskCreate>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d001      	beq.n	8003b1a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b24 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <osDelay+0x16>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e000      	b.n	8003b3c <osDelay+0x18>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fdc9 	bl	80046d4 <vTaskDelay>
  
  return osOK;
 8003b42:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f103 0208 	add.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f103 0208 	add.w	r2, r3, #8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f103 0208 	add.w	r2, r3, #8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d103      	bne.n	8003c0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e00c      	b.n	8003c28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3308      	adds	r3, #8
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e002      	b.n	8003c1c <vListInsert+0x2e>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d2f6      	bcs.n	8003c16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6892      	ldr	r2, [r2, #8]
 8003c76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6852      	ldr	r2, [r2, #4]
 8003c80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d103      	bne.n	8003c94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10c      	bne.n	8003ce2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	b672      	cpsid	i
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	b662      	cpsie	i
 8003cdc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003ce2:	f001 fbbb 	bl	800545c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	441a      	add	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	3b01      	subs	r3, #1
 8003d14:	68f9      	ldr	r1, [r7, #12]
 8003d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	441a      	add	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	22ff      	movs	r2, #255	; 0xff
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d114      	bne.n	8003d62 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01a      	beq.n	8003d76 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3310      	adds	r3, #16
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 ffa5 	bl	8004c94 <xTaskRemoveFromEventList>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <xQueueGenericReset+0xd0>)
 8003d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	e009      	b.n	8003d76 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3310      	adds	r3, #16
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fef0 	bl	8003b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3324      	adds	r3, #36	; 0x24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff feeb 	bl	8003b4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d76:	f001 fba5 	bl	80054c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d7a:	2301      	movs	r3, #1
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10c      	bne.n	8003db6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	b672      	cpsid	i
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	b662      	cpsie	i
 8003db0:	613b      	str	r3, [r7, #16]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e004      	b.n	8003dcc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3350      	adds	r3, #80	; 0x50
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fc6f 	bl	80056b4 <pvPortMalloc>
 8003dd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d011      	beq.n	8003e02 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	3350      	adds	r3, #80	; 0x50
 8003de6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003df0:	79fa      	ldrb	r2, [r7, #7]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	4613      	mov	r3, r2
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f805 	bl	8003e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e02:	69bb      	ldr	r3, [r7, #24]
	}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e002      	b.n	8003e2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	69b8      	ldr	r0, [r7, #24]
 8003e3e:	f7ff ff39 	bl	8003cb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08e      	sub	sp, #56	; 0x38
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	b672      	cpsid	i
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	b662      	cpsie	i
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e80:	bf00      	nop
 8003e82:	e7fe      	b.n	8003e82 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <xQueueGenericSendFromISR+0x40>
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <xQueueGenericSendFromISR+0x44>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <xQueueGenericSendFromISR+0x46>
 8003e96:	2300      	movs	r3, #0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10c      	bne.n	8003eb6 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	b672      	cpsid	i
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	b662      	cpsie	i
 8003eb0:	623b      	str	r3, [r7, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d103      	bne.n	8003ec4 <xQueueGenericSendFromISR+0x72>
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <xQueueGenericSendFromISR+0x76>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xQueueGenericSendFromISR+0x78>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10c      	bne.n	8003ee8 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	b672      	cpsid	i
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	b662      	cpsie	i
 8003ee2:	61fb      	str	r3, [r7, #28]
}
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ee8:	f001 fba0 	bl	800562c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003eec:	f3ef 8211 	mrs	r2, BASEPRI
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	b672      	cpsid	i
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	b662      	cpsie	i
 8003f04:	61ba      	str	r2, [r7, #24]
 8003f06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <xQueueGenericSendFromISR+0xcc>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d12c      	bne.n	8003f78 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f2e:	f000 f917 	bl	8004160 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d112      	bne.n	8003f62 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d016      	beq.n	8003f72 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	3324      	adds	r3, #36	; 0x24
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fea3 	bl	8004c94 <xTaskRemoveFromEventList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e007      	b.n	8003f72 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	b25a      	sxtb	r2, r3
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f72:	2301      	movs	r3, #1
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003f76:	e001      	b.n	8003f7c <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3738      	adds	r7, #56	; 0x38
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <xQueueReceive+0x34>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	b672      	cpsid	i
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	b662      	cpsie	i
 8003fc2:	623b      	str	r3, [r7, #32]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <xQueueReceive+0x42>
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <xQueueReceive+0x46>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <xQueueReceive+0x48>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10c      	bne.n	8003ffa <xQueueReceive+0x66>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	b672      	cpsid	i
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	b662      	cpsie	i
 8003ff4:	61fb      	str	r3, [r7, #28]
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ffa:	f001 f815 	bl	8005028 <xTaskGetSchedulerState>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <xQueueReceive+0x76>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xQueueReceive+0x7a>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <xQueueReceive+0x7c>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10c      	bne.n	800402e <xQueueReceive+0x9a>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	b672      	cpsid	i
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	b662      	cpsie	i
 8004028:	61bb      	str	r3, [r7, #24]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800402e:	f001 fa15 	bl	800545c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01f      	beq.n	800407e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004042:	f000 f8f7 	bl	8004234 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00f      	beq.n	8004076 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	3310      	adds	r3, #16
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fe1a 	bl	8004c94 <xTaskRemoveFromEventList>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <xQueueReceive+0x1c8>)
 8004068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004076:	f001 fa25 	bl	80054c4 <vPortExitCritical>
				return pdPASS;
 800407a:	2301      	movs	r3, #1
 800407c:	e069      	b.n	8004152 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004084:	f001 fa1e 	bl	80054c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004088:	2300      	movs	r3, #0
 800408a:	e062      	b.n	8004152 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004092:	f107 0310 	add.w	r3, r7, #16
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fe60 	bl	8004d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040a0:	f001 fa10 	bl	80054c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040a4:	f000 fbbc 	bl	8004820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040a8:	f001 f9d8 	bl	800545c <vPortEnterCritical>
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <xQueueReceive+0x12e>
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d103      	bne.n	80040d8 <xQueueReceive+0x144>
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d8:	f001 f9f4 	bl	80054c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040dc:	1d3a      	adds	r2, r7, #4
 80040de:	f107 0310 	add.w	r3, r7, #16
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe4f 	bl	8004d88 <xTaskCheckForTimeOut>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d123      	bne.n	8004138 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f2:	f000 f917 	bl	8004324 <prvIsQueueEmpty>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d017      	beq.n	800412c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fd9f 	bl	8004c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800410a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800410c:	f000 f8b8 	bl	8004280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004110:	f000 fb94 	bl	800483c <xTaskResumeAll>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d189      	bne.n	800402e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <xQueueReceive+0x1c8>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	e780      	b.n	800402e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800412c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800412e:	f000 f8a7 	bl	8004280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004132:	f000 fb83 	bl	800483c <xTaskResumeAll>
 8004136:	e77a      	b.n	800402e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800413a:	f000 f8a1 	bl	8004280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800413e:	f000 fb7d 	bl	800483c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004144:	f000 f8ee 	bl	8004324 <prvIsQueueEmpty>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	f43f af6f 	beq.w	800402e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004152:	4618      	mov	r0, r3
 8004154:	3730      	adds	r7, #48	; 0x30
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10d      	bne.n	800419a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d14d      	bne.n	8004222 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 ff6a 	bl	8005064 <xTaskPriorityDisinherit>
 8004190:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	e043      	b.n	8004222 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d119      	bne.n	80041d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6858      	ldr	r0, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	461a      	mov	r2, r3
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	f001 ff07 	bl	8005fbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	441a      	add	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d32b      	bcc.n	8004222 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	e026      	b.n	8004222 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68d8      	ldr	r0, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	461a      	mov	r2, r3
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	f001 feed 	bl	8005fbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	425b      	negs	r3, r3
 80041ee:	441a      	add	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d207      	bcs.n	8004210 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	425b      	negs	r3, r3
 800420a:	441a      	add	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d105      	bne.n	8004222 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3b01      	subs	r3, #1
 8004220:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800422a:	697b      	ldr	r3, [r7, #20]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	441a      	add	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d303      	bcc.n	8004268 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68d9      	ldr	r1, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	461a      	mov	r2, r3
 8004272:	6838      	ldr	r0, [r7, #0]
 8004274:	f001 fea3 	bl	8005fbe <memcpy>
	}
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004288:	f001 f8e8 	bl	800545c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004292:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004294:	e011      	b.n	80042ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d012      	beq.n	80042c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3324      	adds	r3, #36	; 0x24
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fcf6 	bl	8004c94 <xTaskRemoveFromEventList>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042ae:	f000 fdd1 	bl	8004e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dce9      	bgt.n	8004296 <prvUnlockQueue+0x16>
 80042c2:	e000      	b.n	80042c6 <prvUnlockQueue+0x46>
					break;
 80042c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	22ff      	movs	r2, #255	; 0xff
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042ce:	f001 f8f9 	bl	80054c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042d2:	f001 f8c3 	bl	800545c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042de:	e011      	b.n	8004304 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3310      	adds	r3, #16
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fcd1 	bl	8004c94 <xTaskRemoveFromEventList>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042f8:	f000 fdac 	bl	8004e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042fc:	7bbb      	ldrb	r3, [r7, #14]
 80042fe:	3b01      	subs	r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004308:	2b00      	cmp	r3, #0
 800430a:	dce9      	bgt.n	80042e0 <prvUnlockQueue+0x60>
 800430c:	e000      	b.n	8004310 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800430e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	22ff      	movs	r2, #255	; 0xff
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004318:	f001 f8d4 	bl	80054c4 <vPortExitCritical>
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800432c:	f001 f896 	bl	800545c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004338:	2301      	movs	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e001      	b.n	8004342 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004342:	f001 f8bf 	bl	80054c4 <vPortExitCritical>

	return xReturn;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	; 0x38
 8004354:	af04      	add	r7, sp, #16
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10c      	bne.n	800437e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	b672      	cpsid	i
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	b662      	cpsie	i
 8004378:	623b      	str	r3, [r7, #32]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10c      	bne.n	800439e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	b672      	cpsid	i
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	b662      	cpsie	i
 8004398:	61fb      	str	r3, [r7, #28]
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800439e:	23c0      	movs	r3, #192	; 0xc0
 80043a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2bc0      	cmp	r3, #192	; 0xc0
 80043a6:	d00c      	beq.n	80043c2 <xTaskCreateStatic+0x72>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	b672      	cpsid	i
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	b662      	cpsie	i
 80043bc:	61bb      	str	r3, [r7, #24]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01e      	beq.n	8004408 <xTaskCreateStatic+0xb8>
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043e2:	2300      	movs	r3, #0
 80043e4:	9303      	str	r3, [sp, #12]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9302      	str	r3, [sp, #8]
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f850 	bl	80044a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004402:	f000 f8f9 	bl	80045f8 <prvAddNewTaskToReadyList>
 8004406:	e001      	b.n	800440c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800440c:	697b      	ldr	r3, [r7, #20]
	}
 800440e:	4618      	mov	r0, r3
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004416:	b580      	push	{r7, lr}
 8004418:	b08c      	sub	sp, #48	; 0x30
 800441a:	af04      	add	r7, sp, #16
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f942 	bl	80056b4 <pvPortMalloc>
 8004430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004438:	20c0      	movs	r0, #192	; 0xc0
 800443a:	f001 f93b 	bl	80056b4 <pvPortMalloc>
 800443e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
 800444c:	e005      	b.n	800445a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f001 fa00 	bl	8005854 <vPortFree>
 8004454:	e001      	b.n	800445a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	2300      	movs	r3, #0
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	9302      	str	r3, [sp, #8]
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f80e 	bl	80044a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004484:	69f8      	ldr	r0, [r7, #28]
 8004486:	f000 f8b7 	bl	80045f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e002      	b.n	8004496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004496:	69bb      	ldr	r3, [r7, #24]
	}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	461a      	mov	r2, r3
 80044b8:	21a5      	movs	r1, #165	; 0xa5
 80044ba:	f001 fd8e 	bl	8005fda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80044c8:	440b      	add	r3, r1
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	b672      	cpsid	i
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	b662      	cpsie	i
 80044f6:	617b      	str	r3, [r7, #20]
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01f      	beq.n	8004542 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e012      	b.n	800452e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	7819      	ldrb	r1, [r3, #0]
 8004510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	3334      	adds	r3, #52	; 0x34
 8004518:	460a      	mov	r2, r1
 800451a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	3301      	adds	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2b0f      	cmp	r3, #15
 8004532:	d9e9      	bls.n	8004508 <prvInitialiseNewTask+0x68>
 8004534:	e000      	b.n	8004538 <prvInitialiseNewTask+0x98>
			{
				break;
 8004536:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004540:	e003      	b.n	800454a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	2b06      	cmp	r3, #6
 800454e:	d901      	bls.n	8004554 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004550:	2306      	movs	r3, #6
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	3304      	adds	r3, #4
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fb0e 	bl	8003b8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	3318      	adds	r3, #24
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fb09 	bl	8003b8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	f1c3 0207 	rsb	r2, r3, #7
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	2200      	movs	r2, #0
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	2200      	movs	r2, #0
 800459a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	3358      	adds	r3, #88	; 0x58
 80045aa:	2260      	movs	r2, #96	; 0x60
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 fd13 	bl	8005fda <memset>
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <prvInitialiseNewTask+0x14c>)
 80045b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <prvInitialiseNewTask+0x150>)
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <prvInitialiseNewTask+0x154>)
 80045c4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	69b8      	ldr	r0, [r7, #24]
 80045cc:	f000 fe3a 	bl	8005244 <pxPortInitialiseStack>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e2:	bf00      	nop
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	08006820 	.word	0x08006820
 80045f0:	08006840 	.word	0x08006840
 80045f4:	08006800 	.word	0x08006800

080045f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004600:	f000 ff2c 	bl	800545c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004604:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a2b      	ldr	r2, [pc, #172]	; (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 800460c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800460e:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004616:	4a29      	ldr	r2, [pc, #164]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800461c:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d110      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004624:	f000 fc3c 	bl	8004ea0 <prvInitialiseTaskLists>
 8004628:	e00d      	b.n	8004646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	429a      	cmp	r2, r3
 800463e:	d802      	bhi.n	8004646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004640:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <prvAddNewTaskToReadyList+0xcc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <prvAddNewTaskToReadyList+0xcc>)
 800464e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <prvAddNewTaskToReadyList+0xcc>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <prvAddNewTaskToReadyList+0xd0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <prvAddNewTaskToReadyList+0xd0>)
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <prvAddNewTaskToReadyList+0xd4>)
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7ff fa90 	bl	8003ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004686:	f000 ff1d 	bl	80054c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00e      	beq.n	80046b0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	429a      	cmp	r2, r3
 800469e:	d207      	bcs.n	80046b0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <prvAddNewTaskToReadyList+0xd8>)
 80046a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000a78 	.word	0x20000a78
 80046bc:	20000978 	.word	0x20000978
 80046c0:	20000a84 	.word	0x20000a84
 80046c4:	20000a94 	.word	0x20000a94
 80046c8:	20000a80 	.word	0x20000a80
 80046cc:	2000097c 	.word	0x2000097c
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d019      	beq.n	800471a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <vTaskDelay+0x64>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <vTaskDelay+0x34>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	b672      	cpsid	i
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	b662      	cpsie	i
 8004702:	60bb      	str	r3, [r7, #8]
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004708:	f000 f88a 	bl	8004820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800470c:	2100      	movs	r1, #0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fd32 	bl	8005178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004714:	f000 f892 	bl	800483c <xTaskResumeAll>
 8004718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <vTaskDelay+0x68>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000aa0 	.word	0x20000aa0
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800474e:	463a      	mov	r2, r7
 8004750:	1d39      	adds	r1, r7, #4
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc f85e 	bl	8000818 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	9202      	str	r2, [sp, #8]
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	2300      	movs	r3, #0
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	460a      	mov	r2, r1
 800476e:	4924      	ldr	r1, [pc, #144]	; (8004800 <vTaskStartScheduler+0xc0>)
 8004770:	4824      	ldr	r0, [pc, #144]	; (8004804 <vTaskStartScheduler+0xc4>)
 8004772:	f7ff fded 	bl	8004350 <xTaskCreateStatic>
 8004776:	4603      	mov	r3, r0
 8004778:	4a23      	ldr	r2, [pc, #140]	; (8004808 <vTaskStartScheduler+0xc8>)
 800477a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <vTaskStartScheduler+0xc8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004784:	2301      	movs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e001      	b.n	800478e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d11f      	bne.n	80047d4 <vTaskStartScheduler+0x94>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	b672      	cpsid	i
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	b662      	cpsie	i
 80047a8:	613b      	str	r3, [r7, #16]
}
 80047aa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <vTaskStartScheduler+0xcc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3358      	adds	r3, #88	; 0x58
 80047b2:	4a17      	ldr	r2, [pc, #92]	; (8004810 <vTaskStartScheduler+0xd0>)
 80047b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <vTaskStartScheduler+0xd4>)
 80047b8:	f04f 32ff 	mov.w	r2, #4294967295
 80047bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <vTaskStartScheduler+0xd8>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047c4:	4b15      	ldr	r3, [pc, #84]	; (800481c <vTaskStartScheduler+0xdc>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80047ca:	f7fc f80f 	bl	80007ec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047ce:	f000 fdc7 	bl	8005360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047d2:	e010      	b.n	80047f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d10c      	bne.n	80047f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	60fb      	str	r3, [r7, #12]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <vTaskStartScheduler+0xb4>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	080067a0 	.word	0x080067a0
 8004804:	08004e6d 	.word	0x08004e6d
 8004808:	20000a9c 	.word	0x20000a9c
 800480c:	20000978 	.word	0x20000978
 8004810:	20000014 	.word	0x20000014
 8004814:	20000a98 	.word	0x20000a98
 8004818:	20000a84 	.word	0x20000a84
 800481c:	20000a7c 	.word	0x20000a7c

08004820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <vTaskSuspendAll+0x18>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	4a03      	ldr	r2, [pc, #12]	; (8004838 <vTaskSuspendAll+0x18>)
 800482c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800482e:	bf00      	nop
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20000aa0 	.word	0x20000aa0

0800483c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800484a:	4b42      	ldr	r3, [pc, #264]	; (8004954 <xTaskResumeAll+0x118>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10c      	bne.n	800486c <xTaskResumeAll+0x30>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	b672      	cpsid	i
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	b662      	cpsie	i
 8004866:	603b      	str	r3, [r7, #0]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800486c:	f000 fdf6 	bl	800545c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004870:	4b38      	ldr	r3, [pc, #224]	; (8004954 <xTaskResumeAll+0x118>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3b01      	subs	r3, #1
 8004876:	4a37      	ldr	r2, [pc, #220]	; (8004954 <xTaskResumeAll+0x118>)
 8004878:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <xTaskResumeAll+0x118>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d161      	bne.n	8004946 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004882:	4b35      	ldr	r3, [pc, #212]	; (8004958 <xTaskResumeAll+0x11c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d05d      	beq.n	8004946 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800488a:	e02e      	b.n	80048ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488c:	4b33      	ldr	r3, [pc, #204]	; (800495c <xTaskResumeAll+0x120>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3318      	adds	r3, #24
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff f9e1 	bl	8003c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff f9dc 	bl	8003c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <xTaskResumeAll+0x124>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <xTaskResumeAll+0x124>)
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a27      	ldr	r2, [pc, #156]	; (8004964 <xTaskResumeAll+0x128>)
 80048c8:	441a      	add	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7ff f968 	bl	8003ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	4b23      	ldr	r3, [pc, #140]	; (8004968 <xTaskResumeAll+0x12c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <xTaskResumeAll+0x130>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <xTaskResumeAll+0x120>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1cc      	bne.n	800488c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048f8:	f000 fb76 	bl	8004fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048fc:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <xTaskResumeAll+0x134>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004908:	f000 f836 	bl	8004978 <xTaskIncrementTick>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <xTaskResumeAll+0x130>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f1      	bne.n	8004908 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <xTaskResumeAll+0x134>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <xTaskResumeAll+0x130>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <xTaskResumeAll+0x138>)
 8004938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004946:	f000 fdbd 	bl	80054c4 <vPortExitCritical>

	return xAlreadyYielded;
 800494a:	68bb      	ldr	r3, [r7, #8]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000aa0 	.word	0x20000aa0
 8004958:	20000a78 	.word	0x20000a78
 800495c:	20000a38 	.word	0x20000a38
 8004960:	20000a80 	.word	0x20000a80
 8004964:	2000097c 	.word	0x2000097c
 8004968:	20000978 	.word	0x20000978
 800496c:	20000a8c 	.word	0x20000a8c
 8004970:	20000a88 	.word	0x20000a88
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004982:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <xTaskIncrementTick+0x158>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 8090 	bne.w	8004aac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800498c:	4b51      	ldr	r3, [pc, #324]	; (8004ad4 <xTaskIncrementTick+0x15c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004994:	4a4f      	ldr	r2, [pc, #316]	; (8004ad4 <xTaskIncrementTick+0x15c>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d122      	bne.n	80049e6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <xTaskIncrementTick+0x160>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	b672      	cpsid	i
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	b662      	cpsie	i
 80049be:	603b      	str	r3, [r7, #0]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <xTaskIncrementTick+0x4a>
 80049c4:	4b44      	ldr	r3, [pc, #272]	; (8004ad8 <xTaskIncrementTick+0x160>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	4b44      	ldr	r3, [pc, #272]	; (8004adc <xTaskIncrementTick+0x164>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a42      	ldr	r2, [pc, #264]	; (8004ad8 <xTaskIncrementTick+0x160>)
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4a42      	ldr	r2, [pc, #264]	; (8004adc <xTaskIncrementTick+0x164>)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <xTaskIncrementTick+0x168>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	4a40      	ldr	r2, [pc, #256]	; (8004ae0 <xTaskIncrementTick+0x168>)
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	f000 fb01 	bl	8004fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049e6:	4b3f      	ldr	r3, [pc, #252]	; (8004ae4 <xTaskIncrementTick+0x16c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d348      	bcc.n	8004a82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f0:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <xTaskIncrementTick+0x160>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fa:	4b3a      	ldr	r3, [pc, #232]	; (8004ae4 <xTaskIncrementTick+0x16c>)
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	601a      	str	r2, [r3, #0]
					break;
 8004a02:	e03e      	b.n	8004a82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a04:	4b34      	ldr	r3, [pc, #208]	; (8004ad8 <xTaskIncrementTick+0x160>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d203      	bcs.n	8004a24 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a1c:	4a31      	ldr	r2, [pc, #196]	; (8004ae4 <xTaskIncrementTick+0x16c>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a22:	e02e      	b.n	8004a82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff f919 	bl	8003c60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3318      	adds	r3, #24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff f910 	bl	8003c60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	2201      	movs	r2, #1
 8004a46:	409a      	lsls	r2, r3
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <xTaskIncrementTick+0x170>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <xTaskIncrementTick+0x170>)
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4a23      	ldr	r2, [pc, #140]	; (8004aec <xTaskIncrementTick+0x174>)
 8004a60:	441a      	add	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f7ff f89c 	bl	8003ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <xTaskIncrementTick+0x178>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d3b9      	bcc.n	80049f0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a80:	e7b6      	b.n	80049f0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <xTaskIncrementTick+0x178>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4918      	ldr	r1, [pc, #96]	; (8004aec <xTaskIncrementTick+0x174>)
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d901      	bls.n	8004a9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <xTaskIncrementTick+0x17c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 8004aa6:	f7fc f890 	bl	8000bca <vApplicationTickHook>
 8004aaa:	e006      	b.n	8004aba <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <xTaskIncrementTick+0x17c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	4a10      	ldr	r2, [pc, #64]	; (8004af4 <xTaskIncrementTick+0x17c>)
 8004ab4:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004ab6:	f7fc f888 	bl	8000bca <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <xTaskIncrementTick+0x180>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000aa0 	.word	0x20000aa0
 8004ad4:	20000a7c 	.word	0x20000a7c
 8004ad8:	20000a30 	.word	0x20000a30
 8004adc:	20000a34 	.word	0x20000a34
 8004ae0:	20000a90 	.word	0x20000a90
 8004ae4:	20000a98 	.word	0x20000a98
 8004ae8:	20000a80 	.word	0x20000a80
 8004aec:	2000097c 	.word	0x2000097c
 8004af0:	20000978 	.word	0x20000978
 8004af4:	20000a88 	.word	0x20000a88
 8004af8:	20000a8c 	.word	0x20000a8c

08004afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b02:	4b49      	ldr	r3, [pc, #292]	; (8004c28 <vTaskSwitchContext+0x12c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b0a:	4b48      	ldr	r3, [pc, #288]	; (8004c2c <vTaskSwitchContext+0x130>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b10:	e086      	b.n	8004c20 <vTaskSwitchContext+0x124>
		xYieldPending = pdFALSE;
 8004b12:	4b46      	ldr	r3, [pc, #280]	; (8004c2c <vTaskSwitchContext+0x130>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004b18:	f7fb fe6f 	bl	80007fa <getRunTimeCounterValue>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4a44      	ldr	r2, [pc, #272]	; (8004c30 <vTaskSwitchContext+0x134>)
 8004b20:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004b22:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <vTaskSwitchContext+0x134>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <vTaskSwitchContext+0x138>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d909      	bls.n	8004b42 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004b2e:	4b42      	ldr	r3, [pc, #264]	; (8004c38 <vTaskSwitchContext+0x13c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b34:	4a3e      	ldr	r2, [pc, #248]	; (8004c30 <vTaskSwitchContext+0x134>)
 8004b36:	6810      	ldr	r0, [r2, #0]
 8004b38:	4a3e      	ldr	r2, [pc, #248]	; (8004c34 <vTaskSwitchContext+0x138>)
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	1a82      	subs	r2, r0, r2
 8004b3e:	440a      	add	r2, r1
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004b42:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <vTaskSwitchContext+0x134>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a3b      	ldr	r2, [pc, #236]	; (8004c34 <vTaskSwitchContext+0x138>)
 8004b48:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	; (8004c38 <vTaskSwitchContext+0x13c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d111      	bne.n	8004b86 <vTaskSwitchContext+0x8a>
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3304      	adds	r3, #4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10b      	bne.n	8004b86 <vTaskSwitchContext+0x8a>
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3308      	adds	r3, #8
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d105      	bne.n	8004b86 <vTaskSwitchContext+0x8a>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d008      	beq.n	8004b98 <vTaskSwitchContext+0x9c>
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <vTaskSwitchContext+0x13c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <vTaskSwitchContext+0x13c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3334      	adds	r3, #52	; 0x34
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fc f80d 	bl	8000bb2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b98:	4b28      	ldr	r3, [pc, #160]	; (8004c3c <vTaskSwitchContext+0x140>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	fab3 f383 	clz	r3, r3
 8004ba4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	f1c3 031f 	rsb	r3, r3, #31
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	4924      	ldr	r1, [pc, #144]	; (8004c40 <vTaskSwitchContext+0x144>)
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <vTaskSwitchContext+0xe0>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	b672      	cpsid	i
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	b662      	cpsie	i
 8004bd6:	607b      	str	r3, [r7, #4]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <vTaskSwitchContext+0xde>
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <vTaskSwitchContext+0x144>)
 8004be8:	4413      	add	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d104      	bne.n	8004c0c <vTaskSwitchContext+0x110>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <vTaskSwitchContext+0x13c>)
 8004c14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <vTaskSwitchContext+0x13c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3358      	adds	r3, #88	; 0x58
 8004c1c:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <vTaskSwitchContext+0x148>)
 8004c1e:	6013      	str	r3, [r2, #0]
}
 8004c20:	bf00      	nop
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20000aa0 	.word	0x20000aa0
 8004c2c:	20000a8c 	.word	0x20000a8c
 8004c30:	20000aa8 	.word	0x20000aa8
 8004c34:	20000aa4 	.word	0x20000aa4
 8004c38:	20000978 	.word	0x20000978
 8004c3c:	20000a80 	.word	0x20000a80
 8004c40:	2000097c 	.word	0x2000097c
 8004c44:	20000014 	.word	0x20000014

08004c48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10c      	bne.n	8004c72 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	b672      	cpsid	i
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	b662      	cpsie	i
 8004c6c:	60fb      	str	r3, [r7, #12]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <vTaskPlaceOnEventList+0x48>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3318      	adds	r3, #24
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fe ffb7 	bl	8003bee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c80:	2101      	movs	r1, #1
 8004c82:	6838      	ldr	r0, [r7, #0]
 8004c84:	f000 fa78 	bl	8005178 <prvAddCurrentTaskToDelayedList>
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000978 	.word	0x20000978

08004c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	b672      	cpsid	i
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	b662      	cpsie	i
 8004cbe:	60fb      	str	r3, [r7, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3318      	adds	r3, #24
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe ffc9 	bl	8003c60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cce:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <xTaskRemoveFromEventList+0xb0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11c      	bne.n	8004d10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe ffc0 	bl	8003c60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <xTaskRemoveFromEventList+0xb4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <xTaskRemoveFromEventList+0xb4>)
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <xTaskRemoveFromEventList+0xb8>)
 8004d00:	441a      	add	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f7fe ff4c 	bl	8003ba6 <vListInsertEnd>
 8004d0e:	e005      	b.n	8004d1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3318      	adds	r3, #24
 8004d14:	4619      	mov	r1, r3
 8004d16:	480e      	ldr	r0, [pc, #56]	; (8004d50 <xTaskRemoveFromEventList+0xbc>)
 8004d18:	f7fe ff45 	bl	8003ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <xTaskRemoveFromEventList+0xc0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d905      	bls.n	8004d36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <xTaskRemoveFromEventList+0xc4>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	e001      	b.n	8004d3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d3a:	697b      	ldr	r3, [r7, #20]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000aa0 	.word	0x20000aa0
 8004d48:	20000a80 	.word	0x20000a80
 8004d4c:	2000097c 	.word	0x2000097c
 8004d50:	20000a38 	.word	0x20000a38
 8004d54:	20000978 	.word	0x20000978
 8004d58:	20000a8c 	.word	0x20000a8c

08004d5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <vTaskInternalSetTimeOutState+0x24>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <vTaskInternalSetTimeOutState+0x28>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	605a      	str	r2, [r3, #4]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000a90 	.word	0x20000a90
 8004d84:	20000a7c 	.word	0x20000a7c

08004d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10c      	bne.n	8004db2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	b672      	cpsid	i
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	b662      	cpsie	i
 8004dac:	613b      	str	r3, [r7, #16]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10c      	bne.n	8004dd2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	b672      	cpsid	i
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	b662      	cpsie	i
 8004dcc:	60fb      	str	r3, [r7, #12]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004dd2:	f000 fb43 	bl	800545c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <xTaskCheckForTimeOut+0xc4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d102      	bne.n	8004df6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e023      	b.n	8004e3e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <xTaskCheckForTimeOut+0xc8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d007      	beq.n	8004e12 <xTaskCheckForTimeOut+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e015      	b.n	8004e3e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d20b      	bcs.n	8004e34 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad2      	subs	r2, r2, r3
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff ff97 	bl	8004d5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	e004      	b.n	8004e3e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e3e:	f000 fb41 	bl	80054c4 <vPortExitCritical>

	return xReturn;
 8004e42:	69fb      	ldr	r3, [r7, #28]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000a7c 	.word	0x20000a7c
 8004e50:	20000a90 	.word	0x20000a90

08004e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <vTaskMissedYield+0x14>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	20000a8c 	.word	0x20000a8c

08004e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e74:	f000 f854 	bl	8004f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <prvIdleTask+0x2c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d907      	bls.n	8004e90 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <prvIdleTask+0x30>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004e90:	f7fb fcbb 	bl	800080a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004e94:	e7ee      	b.n	8004e74 <prvIdleTask+0x8>
 8004e96:	bf00      	nop
 8004e98:	2000097c 	.word	0x2000097c
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	e00c      	b.n	8004ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <prvInitialiseTaskLists+0x60>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe fe46 	bl	8003b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b06      	cmp	r3, #6
 8004eca:	d9ef      	bls.n	8004eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ecc:	480d      	ldr	r0, [pc, #52]	; (8004f04 <prvInitialiseTaskLists+0x64>)
 8004ece:	f7fe fe3d 	bl	8003b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ed2:	480d      	ldr	r0, [pc, #52]	; (8004f08 <prvInitialiseTaskLists+0x68>)
 8004ed4:	f7fe fe3a 	bl	8003b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ed8:	480c      	ldr	r0, [pc, #48]	; (8004f0c <prvInitialiseTaskLists+0x6c>)
 8004eda:	f7fe fe37 	bl	8003b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ede:	480c      	ldr	r0, [pc, #48]	; (8004f10 <prvInitialiseTaskLists+0x70>)
 8004ee0:	f7fe fe34 	bl	8003b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ee4:	480b      	ldr	r0, [pc, #44]	; (8004f14 <prvInitialiseTaskLists+0x74>)
 8004ee6:	f7fe fe31 	bl	8003b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <prvInitialiseTaskLists+0x78>)
 8004eec:	4a05      	ldr	r2, [pc, #20]	; (8004f04 <prvInitialiseTaskLists+0x64>)
 8004eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <prvInitialiseTaskLists+0x7c>)
 8004ef2:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <prvInitialiseTaskLists+0x68>)
 8004ef4:	601a      	str	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	2000097c 	.word	0x2000097c
 8004f04:	20000a08 	.word	0x20000a08
 8004f08:	20000a1c 	.word	0x20000a1c
 8004f0c:	20000a38 	.word	0x20000a38
 8004f10:	20000a4c 	.word	0x20000a4c
 8004f14:	20000a64 	.word	0x20000a64
 8004f18:	20000a30 	.word	0x20000a30
 8004f1c:	20000a34 	.word	0x20000a34

08004f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f26:	e019      	b.n	8004f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f28:	f000 fa98 	bl	800545c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2c:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <prvCheckTasksWaitingTermination+0x50>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe fe91 	bl	8003c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <prvCheckTasksWaitingTermination+0x54>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <prvCheckTasksWaitingTermination+0x54>)
 8004f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <prvCheckTasksWaitingTermination+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <prvCheckTasksWaitingTermination+0x58>)
 8004f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f52:	f000 fab7 	bl	80054c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f810 	bl	8004f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f5c:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <prvCheckTasksWaitingTermination+0x58>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e1      	bne.n	8004f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000a4c 	.word	0x20000a4c
 8004f74:	20000a78 	.word	0x20000a78
 8004f78:	20000a60 	.word	0x20000a60

08004f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3358      	adds	r3, #88	; 0x58
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 f8d1 	bl	8006130 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d108      	bne.n	8004faa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fc59 	bl	8005854 <vPortFree>
				vPortFree( pxTCB );
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fc56 	bl	8005854 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fa8:	e01a      	b.n	8004fe0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d103      	bne.n	8004fbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fc4d 	bl	8005854 <vPortFree>
	}
 8004fba:	e011      	b.n	8004fe0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d00c      	beq.n	8004fe0 <prvDeleteTCB+0x64>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	b672      	cpsid	i
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	b662      	cpsie	i
 8004fda:	60fb      	str	r3, [r7, #12]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <prvDeleteTCB+0x62>
	}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <prvResetNextTaskUnblockTime+0x38>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <prvResetNextTaskUnblockTime+0x3c>)
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005000:	e008      	b.n	8005014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005002:	4b07      	ldr	r3, [pc, #28]	; (8005020 <prvResetNextTaskUnblockTime+0x38>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <prvResetNextTaskUnblockTime+0x3c>)
 8005012:	6013      	str	r3, [r2, #0]
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	20000a30 	.word	0x20000a30
 8005024:	20000a98 	.word	0x20000a98

08005028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <xTaskGetSchedulerState+0x34>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005036:	2301      	movs	r3, #1
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	e008      	b.n	800504e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <xTaskGetSchedulerState+0x38>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005044:	2302      	movs	r3, #2
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	e001      	b.n	800504e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800504a:	2300      	movs	r3, #0
 800504c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800504e:	687b      	ldr	r3, [r7, #4]
	}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20000a84 	.word	0x20000a84
 8005060:	20000aa0 	.word	0x20000aa0

08005064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d072      	beq.n	8005160 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800507a:	4b3c      	ldr	r3, [pc, #240]	; (800516c <xTaskPriorityDisinherit+0x108>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	429a      	cmp	r2, r3
 8005082:	d00c      	beq.n	800509e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	b672      	cpsid	i
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	b662      	cpsie	i
 8005098:	60fb      	str	r3, [r7, #12]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10c      	bne.n	80050c0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	b672      	cpsid	i
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	b662      	cpsie	i
 80050ba:	60bb      	str	r3, [r7, #8]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c4:	1e5a      	subs	r2, r3, #1
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d044      	beq.n	8005160 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d140      	bne.n	8005160 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fdbc 	bl	8003c60 <uxListRemove>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d115      	bne.n	800511a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f2:	491f      	ldr	r1, [pc, #124]	; (8005170 <xTaskPriorityDisinherit+0x10c>)
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xTaskPriorityDisinherit+0xb6>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	2201      	movs	r2, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43da      	mvns	r2, r3
 8005110:	4b18      	ldr	r3, [pc, #96]	; (8005174 <xTaskPriorityDisinherit+0x110>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4013      	ands	r3, r2
 8005116:	4a17      	ldr	r2, [pc, #92]	; (8005174 <xTaskPriorityDisinherit+0x110>)
 8005118:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	f1c3 0207 	rsb	r2, r3, #7
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <xTaskPriorityDisinherit+0x110>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <xTaskPriorityDisinherit+0x110>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a08      	ldr	r2, [pc, #32]	; (8005170 <xTaskPriorityDisinherit+0x10c>)
 800514e:	441a      	add	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fe fd25 	bl	8003ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005160:	697b      	ldr	r3, [r7, #20]
	}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000978 	.word	0x20000978
 8005170:	2000097c 	.word	0x2000097c
 8005174:	20000a80 	.word	0x20000a80

08005178 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005182:	4b29      	ldr	r3, [pc, #164]	; (8005228 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005188:	4b28      	ldr	r3, [pc, #160]	; (800522c <prvAddCurrentTaskToDelayedList+0xb4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3304      	adds	r3, #4
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe fd66 	bl	8003c60 <uxListRemove>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800519a:	4b24      	ldr	r3, [pc, #144]	; (800522c <prvAddCurrentTaskToDelayedList+0xb4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	2201      	movs	r2, #1
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43da      	mvns	r2, r3
 80051a8:	4b21      	ldr	r3, [pc, #132]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4013      	ands	r3, r2
 80051ae:	4a20      	ldr	r2, [pc, #128]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d10a      	bne.n	80051d0 <prvAddCurrentTaskToDelayedList+0x58>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	481a      	ldr	r0, [pc, #104]	; (8005234 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051ca:	f7fe fcec 	bl	8003ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051ce:	e026      	b.n	800521e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051d8:	4b14      	ldr	r3, [pc, #80]	; (800522c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d209      	bcs.n	80051fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <prvAddCurrentTaskToDelayedList+0xc0>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7fe fcfa 	bl	8003bee <vListInsert>
}
 80051fa:	e010      	b.n	800521e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <prvAddCurrentTaskToDelayedList+0xc4>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f7fe fcf0 	bl	8003bee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	429a      	cmp	r2, r3
 8005216:	d202      	bcs.n	800521e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005218:	4a09      	ldr	r2, [pc, #36]	; (8005240 <prvAddCurrentTaskToDelayedList+0xc8>)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6013      	str	r3, [r2, #0]
}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000a7c 	.word	0x20000a7c
 800522c:	20000978 	.word	0x20000978
 8005230:	20000a80 	.word	0x20000a80
 8005234:	20000a64 	.word	0x20000a64
 8005238:	20000a34 	.word	0x20000a34
 800523c:	20000a30 	.word	0x20000a30
 8005240:	20000a98 	.word	0x20000a98

08005244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3b04      	subs	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800525c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3b04      	subs	r3, #4
 8005262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3b04      	subs	r3, #4
 8005272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005274:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <pxPortInitialiseStack+0x64>)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3b14      	subs	r3, #20
 800527e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3b04      	subs	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f06f 0202 	mvn.w	r2, #2
 8005292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3b20      	subs	r3, #32
 8005298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800529a:	68fb      	ldr	r3, [r7, #12]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	080052ad 	.word	0x080052ad

080052ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <prvTaskExitError+0x5c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d00c      	beq.n	80052da <prvTaskExitError+0x2e>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	b672      	cpsid	i
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	b662      	cpsie	i
 80052d4:	60fb      	str	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <prvTaskExitError+0x2c>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	b672      	cpsid	i
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	b662      	cpsie	i
 80052ee:	60bb      	str	r3, [r7, #8]
}
 80052f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052f2:	bf00      	nop
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0fc      	beq.n	80052f4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052fa:	bf00      	nop
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	20000010 	.word	0x20000010
 800530c:	00000000 	.word	0x00000000

08005310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <pxCurrentTCBConst2>)
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	6808      	ldr	r0, [r1, #0]
 8005316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	f380 8809 	msr	PSP, r0
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f380 8811 	msr	BASEPRI, r0
 800532a:	4770      	bx	lr
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst2>:
 8005330:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005338:	4808      	ldr	r0, [pc, #32]	; (800535c <prvPortStartFirstTask+0x24>)
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	6800      	ldr	r0, [r0, #0]
 800533e:	f380 8808 	msr	MSP, r0
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f380 8814 	msr	CONTROL, r0
 800534a:	b662      	cpsie	i
 800534c:	b661      	cpsie	f
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	df00      	svc	0
 8005358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800535a:	bf00      	nop
 800535c:	e000ed08 	.word	0xe000ed08

08005360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005366:	4b37      	ldr	r3, [pc, #220]	; (8005444 <xPortStartScheduler+0xe4>)
 8005368:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	22ff      	movs	r2, #255	; 0xff
 8005376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4b2f      	ldr	r3, [pc, #188]	; (8005448 <xPortStartScheduler+0xe8>)
 800538c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800538e:	4b2f      	ldr	r3, [pc, #188]	; (800544c <xPortStartScheduler+0xec>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005394:	e009      	b.n	80053aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005396:	4b2d      	ldr	r3, [pc, #180]	; (800544c <xPortStartScheduler+0xec>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3b01      	subs	r3, #1
 800539c:	4a2b      	ldr	r2, [pc, #172]	; (800544c <xPortStartScheduler+0xec>)
 800539e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d0ef      	beq.n	8005396 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053b6:	4b25      	ldr	r3, [pc, #148]	; (800544c <xPortStartScheduler+0xec>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1c3 0307 	rsb	r3, r3, #7
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d00c      	beq.n	80053dc <xPortStartScheduler+0x7c>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	b672      	cpsid	i
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	b662      	cpsie	i
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <xPortStartScheduler+0xec>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	4a1a      	ldr	r2, [pc, #104]	; (800544c <xPortStartScheduler+0xec>)
 80053e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053e6:	4b19      	ldr	r3, [pc, #100]	; (800544c <xPortStartScheduler+0xec>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ee:	4a17      	ldr	r2, [pc, #92]	; (800544c <xPortStartScheduler+0xec>)
 80053f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053fa:	4b15      	ldr	r3, [pc, #84]	; (8005450 <xPortStartScheduler+0xf0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a14      	ldr	r2, [pc, #80]	; (8005450 <xPortStartScheduler+0xf0>)
 8005400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005404:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <xPortStartScheduler+0xf0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a11      	ldr	r2, [pc, #68]	; (8005450 <xPortStartScheduler+0xf0>)
 800540c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005410:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005412:	f000 f8dd 	bl	80055d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <xPortStartScheduler+0xf4>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800541c:	f000 f8fc 	bl	8005618 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005420:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <xPortStartScheduler+0xf8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <xPortStartScheduler+0xf8>)
 8005426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800542a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800542c:	f7ff ff84 	bl	8005338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005430:	f7ff fb64 	bl	8004afc <vTaskSwitchContext>
	prvTaskExitError();
 8005434:	f7ff ff3a 	bl	80052ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	e000e400 	.word	0xe000e400
 8005448:	20000aac 	.word	0x20000aac
 800544c:	20000ab0 	.word	0x20000ab0
 8005450:	e000ed20 	.word	0xe000ed20
 8005454:	20000010 	.word	0x20000010
 8005458:	e000ef34 	.word	0xe000ef34

0800545c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	b672      	cpsid	i
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	b662      	cpsie	i
 8005476:	607b      	str	r3, [r7, #4]
}
 8005478:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <vPortEnterCritical+0x60>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <vPortEnterCritical+0x60>)
 8005482:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005484:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <vPortEnterCritical+0x60>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d111      	bne.n	80054b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800548c:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <vPortEnterCritical+0x64>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00c      	beq.n	80054b0 <vPortEnterCritical+0x54>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	b672      	cpsid	i
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	b662      	cpsie	i
 80054aa:	603b      	str	r3, [r7, #0]
}
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <vPortEnterCritical+0x52>
	}
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	20000010 	.word	0x20000010
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <vPortExitCritical+0x54>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10c      	bne.n	80054ec <vPortExitCritical+0x28>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	b672      	cpsid	i
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	b662      	cpsie	i
 80054e6:	607b      	str	r3, [r7, #4]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <vPortExitCritical+0x54>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	4a09      	ldr	r2, [pc, #36]	; (8005518 <vPortExitCritical+0x54>)
 80054f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <vPortExitCritical+0x54>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d105      	bne.n	800550a <vPortExitCritical+0x46>
 80054fe:	2300      	movs	r3, #0
 8005500:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	f383 8811 	msr	BASEPRI, r3
}
 8005508:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000010 	.word	0x20000010
 800551c:	00000000 	.word	0x00000000

08005520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005520:	f3ef 8009 	mrs	r0, PSP
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4b15      	ldr	r3, [pc, #84]	; (8005580 <pxCurrentTCBConst>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f01e 0f10 	tst.w	lr, #16
 8005530:	bf08      	it	eq
 8005532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	6010      	str	r0, [r2, #0]
 800553c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005544:	b672      	cpsid	i
 8005546:	f380 8811 	msr	BASEPRI, r0
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	b662      	cpsie	i
 8005554:	f7ff fad2 	bl	8004afc <vTaskSwitchContext>
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	f380 8811 	msr	BASEPRI, r0
 8005560:	bc09      	pop	{r0, r3}
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	f01e 0f10 	tst.w	lr, #16
 800556e:	bf08      	it	eq
 8005570:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005574:	f380 8809 	msr	PSP, r0
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop

08005580 <pxCurrentTCBConst>:
 8005580:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	b672      	cpsid	i
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	b662      	cpsie	i
 80055a2:	607b      	str	r3, [r7, #4]
}
 80055a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055a6:	f7ff f9e7 	bl	8004978 <xTaskIncrementTick>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <SysTick_Handler+0x44>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f383 8811 	msr	BASEPRI, r3
}
 80055c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <vPortSetupTimerInterrupt+0x34>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <vPortSetupTimerInterrupt+0x38>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <vPortSetupTimerInterrupt+0x3c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <vPortSetupTimerInterrupt+0x40>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	099b      	lsrs	r3, r3, #6
 80055ec:	4a09      	ldr	r2, [pc, #36]	; (8005614 <vPortSetupTimerInterrupt+0x44>)
 80055ee:	3b01      	subs	r3, #1
 80055f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055f2:	4b04      	ldr	r3, [pc, #16]	; (8005604 <vPortSetupTimerInterrupt+0x34>)
 80055f4:	2207      	movs	r2, #7
 80055f6:	601a      	str	r2, [r3, #0]
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	e000e010 	.word	0xe000e010
 8005608:	e000e018 	.word	0xe000e018
 800560c:	20000004 	.word	0x20000004
 8005610:	10624dd3 	.word	0x10624dd3
 8005614:	e000e014 	.word	0xe000e014

08005618 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005618:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005628 <vPortEnableVFP+0x10>
 800561c:	6801      	ldr	r1, [r0, #0]
 800561e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005622:	6001      	str	r1, [r0, #0]
 8005624:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005626:	bf00      	nop
 8005628:	e000ed88 	.word	0xe000ed88

0800562c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005632:	f3ef 8305 	mrs	r3, IPSR
 8005636:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b0f      	cmp	r3, #15
 800563c:	d916      	bls.n	800566c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800563e:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <vPortValidateInterruptPriority+0x78>)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005648:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <vPortValidateInterruptPriority+0x7c>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	7afa      	ldrb	r2, [r7, #11]
 800564e:	429a      	cmp	r2, r3
 8005650:	d20c      	bcs.n	800566c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	b672      	cpsid	i
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	b662      	cpsie	i
 8005666:	607b      	str	r3, [r7, #4]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800566c:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <vPortValidateInterruptPriority+0x80>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <vPortValidateInterruptPriority+0x84>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d90c      	bls.n	8005696 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	b672      	cpsid	i
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	b662      	cpsie	i
 8005690:	603b      	str	r3, [r7, #0]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <vPortValidateInterruptPriority+0x68>
	}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	e000e3f0 	.word	0xe000e3f0
 80056a8:	20000aac 	.word	0x20000aac
 80056ac:	e000ed0c 	.word	0xe000ed0c
 80056b0:	20000ab0 	.word	0x20000ab0

080056b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056c0:	f7ff f8ae 	bl	8004820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056c4:	4b5e      	ldr	r3, [pc, #376]	; (8005840 <pvPortMalloc+0x18c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056cc:	f000 f920 	bl	8005910 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056d0:	4b5c      	ldr	r3, [pc, #368]	; (8005844 <pvPortMalloc+0x190>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f040 8092 	bne.w	8005802 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01f      	beq.n	8005724 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80056e4:	2208      	movs	r2, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f023 0307 	bic.w	r3, r3, #7
 80056fc:	3308      	adds	r3, #8
 80056fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <pvPortMalloc+0x70>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	b672      	cpsid	i
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	b662      	cpsie	i
 800571e:	617b      	str	r3, [r7, #20]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d06b      	beq.n	8005802 <pvPortMalloc+0x14e>
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <pvPortMalloc+0x194>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d866      	bhi.n	8005802 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005734:	4b45      	ldr	r3, [pc, #276]	; (800584c <pvPortMalloc+0x198>)
 8005736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005738:	4b44      	ldr	r3, [pc, #272]	; (800584c <pvPortMalloc+0x198>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800573e:	e004      	b.n	800574a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d903      	bls.n	800575c <pvPortMalloc+0xa8>
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f1      	bne.n	8005740 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800575c:	4b38      	ldr	r3, [pc, #224]	; (8005840 <pvPortMalloc+0x18c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	429a      	cmp	r2, r3
 8005764:	d04d      	beq.n	8005802 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2208      	movs	r2, #8
 800576c:	4413      	add	r3, r2
 800576e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	2308      	movs	r3, #8
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	429a      	cmp	r2, r3
 8005786:	d921      	bls.n	80057cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <pvPortMalloc+0x100>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	b672      	cpsid	i
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	b662      	cpsie	i
 80057ae:	613b      	str	r3, [r7, #16]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	1ad2      	subs	r2, r2, r3
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057c6:	69b8      	ldr	r0, [r7, #24]
 80057c8:	f000 f904 	bl	80059d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057cc:	4b1e      	ldr	r3, [pc, #120]	; (8005848 <pvPortMalloc+0x194>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <pvPortMalloc+0x194>)
 80057d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057da:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <pvPortMalloc+0x194>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b1c      	ldr	r3, [pc, #112]	; (8005850 <pvPortMalloc+0x19c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d203      	bcs.n	80057ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057e6:	4b18      	ldr	r3, [pc, #96]	; (8005848 <pvPortMalloc+0x194>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a19      	ldr	r2, [pc, #100]	; (8005850 <pvPortMalloc+0x19c>)
 80057ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	4b14      	ldr	r3, [pc, #80]	; (8005844 <pvPortMalloc+0x190>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005802:	f7ff f81b 	bl	800483c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800580c:	f7fb f9e4 	bl	8000bd8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <pvPortMalloc+0x180>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	b672      	cpsid	i
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	b662      	cpsie	i
 800582e:	60fb      	str	r3, [r7, #12]
}
 8005830:	bf00      	nop
 8005832:	e7fe      	b.n	8005832 <pvPortMalloc+0x17e>
	return pvReturn;
 8005834:	69fb      	ldr	r3, [r7, #28]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3728      	adds	r7, #40	; 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200046bc 	.word	0x200046bc
 8005844:	200046c8 	.word	0x200046c8
 8005848:	200046c0 	.word	0x200046c0
 800584c:	200046b4 	.word	0x200046b4
 8005850:	200046c4 	.word	0x200046c4

08005854 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d04c      	beq.n	8005900 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005866:	2308      	movs	r3, #8
 8005868:	425b      	negs	r3, r3
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	4b23      	ldr	r3, [pc, #140]	; (8005908 <vPortFree+0xb4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10c      	bne.n	800589c <vPortFree+0x48>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	b672      	cpsid	i
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	b662      	cpsie	i
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <vPortFree+0x6a>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	b672      	cpsid	i
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	b662      	cpsie	i
 80058b8:	60bb      	str	r3, [r7, #8]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	4b11      	ldr	r3, [pc, #68]	; (8005908 <vPortFree+0xb4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d019      	beq.n	8005900 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d115      	bne.n	8005900 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <vPortFree+0xb4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	43db      	mvns	r3, r3
 80058de:	401a      	ands	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058e4:	f7fe ff9c 	bl	8004820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <vPortFree+0xb8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4413      	add	r3, r2
 80058f2:	4a06      	ldr	r2, [pc, #24]	; (800590c <vPortFree+0xb8>)
 80058f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058f6:	6938      	ldr	r0, [r7, #16]
 80058f8:	f000 f86c 	bl	80059d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058fc:	f7fe ff9e 	bl	800483c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005900:	bf00      	nop
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	200046c8 	.word	0x200046c8
 800590c:	200046c0 	.word	0x200046c0

08005910 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005916:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800591a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <prvHeapInit+0xac>)
 800591e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3307      	adds	r3, #7
 800592e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	4a1f      	ldr	r2, [pc, #124]	; (80059bc <prvHeapInit+0xac>)
 8005940:	4413      	add	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <prvHeapInit+0xb0>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <prvHeapInit+0xb0>)
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4413      	add	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800595c:	2208      	movs	r2, #8
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <prvHeapInit+0xb4>)
 8005970:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <prvHeapInit+0xb4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <prvHeapInit+0xb4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <prvHeapInit+0xb4>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <prvHeapInit+0xb8>)
 800599e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a09      	ldr	r2, [pc, #36]	; (80059cc <prvHeapInit+0xbc>)
 80059a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <prvHeapInit+0xc0>)
 80059aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059ae:	601a      	str	r2, [r3, #0]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000ab4 	.word	0x20000ab4
 80059c0:	200046b4 	.word	0x200046b4
 80059c4:	200046bc 	.word	0x200046bc
 80059c8:	200046c4 	.word	0x200046c4
 80059cc:	200046c0 	.word	0x200046c0
 80059d0:	200046c8 	.word	0x200046c8

080059d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059dc:	4b28      	ldr	r3, [pc, #160]	; (8005a80 <prvInsertBlockIntoFreeList+0xac>)
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	e002      	b.n	80059e8 <prvInsertBlockIntoFreeList+0x14>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d8f7      	bhi.n	80059e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4413      	add	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d108      	bne.n	8005a16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d118      	bne.n	8005a5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <prvInsertBlockIntoFreeList+0xb0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d00d      	beq.n	8005a52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	441a      	add	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e008      	b.n	8005a64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <prvInsertBlockIntoFreeList+0xb0>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e003      	b.n	8005a64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d002      	beq.n	8005a72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	200046b4 	.word	0x200046b4
 8005a84:	200046bc 	.word	0x200046bc

08005a88 <BspGetButtonState>:

#include "Bsp.h"



_Bool BspGetButtonState(void){
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 8005a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a90:	4805      	ldr	r0, [pc, #20]	; (8005aa8 <BspGetButtonState+0x20>)
 8005a92:	f7fb fdab 	bl	80015ec <HAL_GPIO_ReadPin>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40020800 	.word	0x40020800

08005aac <BspLed1On>:

void BspLed1On(void){
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4802      	ldr	r0, [pc, #8]	; (8005ac0 <BspLed1On+0x14>)
 8005ab6:	f7fb fdb1 	bl	800161c <HAL_GPIO_WritePin>
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40020400 	.word	0x40020400

08005ac4 <BspLed1Off>:
void BspLed1Off(void){
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2101      	movs	r1, #1
 8005acc:	4802      	ldr	r0, [pc, #8]	; (8005ad8 <BspLed1Off+0x14>)
 8005ace:	f7fb fda5 	bl	800161c <HAL_GPIO_WritePin>
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40020400 	.word	0x40020400

08005adc <BspLed2On>:

void BspLed2On(void){
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	2180      	movs	r1, #128	; 0x80
 8005ae4:	4802      	ldr	r0, [pc, #8]	; (8005af0 <BspLed2On+0x14>)
 8005ae6:	f7fb fd99 	bl	800161c <HAL_GPIO_WritePin>
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40020400 	.word	0x40020400

08005af4 <BspLed2Off>:
void BspLed2Off(void){
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8005af8:	2200      	movs	r2, #0
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	4802      	ldr	r0, [pc, #8]	; (8005b08 <BspLed2Off+0x14>)
 8005afe:	f7fb fd8d 	bl	800161c <HAL_GPIO_WritePin>
}
 8005b02:	bf00      	nop
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40020400 	.word	0x40020400

08005b0c <BspLed3On>:

void BspLed3On(void){
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8005b10:	2201      	movs	r2, #1
 8005b12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b16:	4802      	ldr	r0, [pc, #8]	; (8005b20 <BspLed3On+0x14>)
 8005b18:	f7fb fd80 	bl	800161c <HAL_GPIO_WritePin>
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40020400 	.word	0x40020400

08005b24 <TimeBomb_ctor>:
State TimeBomb_wait4button(TimeBomb * const me, Event const * const e);
State TimeBomb_blink(TimeBomb * const me, Event const * const e);
State TimeBomb_pause(TimeBomb * const me, Event const * const e);
State TimeBomb_boom(TimeBomb * const me, Event const * const e);

void TimeBomb_ctor(TimeBomb * const me) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
    Active_ctor(&me->super, (StateHandler)&TimeBomb_initial);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4907      	ldr	r1, [pc, #28]	; (8005b4c <TimeBomb_ctor+0x28>)
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fa fd41 	bl	80005b8 <Active_ctor>
    TimeEvent_ctor(&me->te,TIMEOUT_SIG,&me->super);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	2105      	movs	r1, #5
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fa fdce 	bl	80006e0 <TimeEvent_ctor>
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08005b51 	.word	0x08005b51

08005b50 <TimeBomb_initial>:



State TimeBomb_initial(TimeBomb * const me, Event const * const e) {
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
	return TRAN(TimeBomb_wait4button);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a04      	ldr	r2, [pc, #16]	; (8005b70 <TimeBomb_initial+0x20>)
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	08005b75 	.word	0x08005b75

08005b74 <TimeBomb_wait4button>:


State TimeBomb_wait4button(TimeBomb * const me, Event const * const e){
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
	State Status;

	switch(e->sig){
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d010      	beq.n	8005ba8 <TimeBomb_wait4button+0x34>
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	dc17      	bgt.n	8005bba <TimeBomb_wait4button+0x46>
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d002      	beq.n	8005b94 <TimeBomb_wait4button+0x20>
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d005      	beq.n	8005b9e <TimeBomb_wait4button+0x2a>
 8005b92:	e012      	b.n	8005bba <TimeBomb_wait4button+0x46>
		case ENTRY_SIG:{
			BspLed1On();
 8005b94:	f7ff ff8a 	bl	8005aac <BspLed1On>
			Status = HANDLED_STATUS;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
			break;
 8005b9c:	e010      	b.n	8005bc0 <TimeBomb_wait4button+0x4c>
		}
		case EXIT_SIG:{
			BspLed1Off();
 8005b9e:	f7ff ff91 	bl	8005ac4 <BspLed1Off>
			Status = HANDLED_STATUS;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
			break;
 8005ba6:	e00b      	b.n	8005bc0 <TimeBomb_wait4button+0x4c>
		}
		case BUTTON_PRESSED_SIG:{
			me->blink_cntr = 10U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	220a      	movs	r2, #10
 8005bac:	61da      	str	r2, [r3, #28]
			Status =TRAN(TimeBomb_blink);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a06      	ldr	r2, [pc, #24]	; (8005bcc <TimeBomb_wait4button+0x58>)
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]
			break;
 8005bb8:	e002      	b.n	8005bc0 <TimeBomb_wait4button+0x4c>
		}
		default:{
			Status = IGNORED_STATUS;
 8005bba:	2302      	movs	r3, #2
 8005bbc:	73fb      	strb	r3, [r7, #15]
			break;
 8005bbe:	bf00      	nop
		}
	}

	return Status;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	08005bd1 	.word	0x08005bd1

08005bd0 <TimeBomb_blink>:


State TimeBomb_blink(TimeBomb * const me, Event const * const e) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]

	State Status;

	switch(e->sig){
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d018      	beq.n	8005c14 <TimeBomb_blink+0x44>
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	dc1c      	bgt.n	8005c20 <TimeBomb_blink+0x50>
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d002      	beq.n	8005bf0 <TimeBomb_blink+0x20>
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d00d      	beq.n	8005c0a <TimeBomb_blink+0x3a>
 8005bee:	e017      	b.n	8005c20 <TimeBomb_blink+0x50>
		case ENTRY_SIG:{
			BspLed2On();
 8005bf0:	f7ff ff74 	bl	8005adc <BspLed2On>
			TimeEvent_arm(&me->te,OS_TICKS_PER_SEC/2,0U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fa fda2 	bl	8000748 <TimeEvent_arm>
			Status = HANDLED_STATUS;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
			break;
 8005c08:	e00d      	b.n	8005c26 <TimeBomb_blink+0x56>
		}
		case EXIT_SIG:{
			BspLed2Off();
 8005c0a:	f7ff ff73 	bl	8005af4 <BspLed2Off>
			Status = HANDLED_STATUS;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
			break;
 8005c12:	e008      	b.n	8005c26 <TimeBomb_blink+0x56>
		}
		case TIMEOUT_SIG:{
			Status = TRAN(TimeBomb_pause);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <TimeBomb_blink+0x60>)
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
			break;
 8005c1e:	e002      	b.n	8005c26 <TimeBomb_blink+0x56>
		}
		default:{
			Status = IGNORED_STATUS;
 8005c20:	2302      	movs	r3, #2
 8005c22:	73fb      	strb	r3, [r7, #15]
			break;
 8005c24:	bf00      	nop
		}
	}

	return Status;
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
//		BspLed2Off();
//
//	TIMEOUT:
//		TRAN(TimeBomb_pause);

}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	08005c35 	.word	0x08005c35

08005c34 <TimeBomb_pause>:



State TimeBomb_pause(TimeBomb * const me, Event const * const e){
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]


	State Status;

	switch(e->sig){
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d002      	beq.n	8005c4c <TimeBomb_pause+0x18>
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d00b      	beq.n	8005c62 <TimeBomb_pause+0x2e>
 8005c4a:	e01f      	b.n	8005c8c <TimeBomb_pause+0x58>
		case ENTRY_SIG:{
			TimeEvent_arm(&me->te,OS_TICKS_PER_SEC/2,0U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fa fd76 	bl	8000748 <TimeEvent_arm>
			Status = HANDLED_STATUS;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
			break;
 8005c60:	e017      	b.n	8005c92 <TimeBomb_pause+0x5e>
		}
		case TIMEOUT_SIG:{
			--me->blink_cntr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	61da      	str	r2, [r3, #28]
			if(me->blink_cntr > 0U){
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <TimeBomb_pause+0x4c>
				Status = TRAN(TimeBomb_blink);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <TimeBomb_pause+0x68>)
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]
			}
			else{
				Status = TRAN(TimeBomb_boom);
			}
			break;
 8005c7e:	e008      	b.n	8005c92 <TimeBomb_pause+0x5e>
				Status = TRAN(TimeBomb_boom);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <TimeBomb_pause+0x6c>)
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
			break;
 8005c8a:	e002      	b.n	8005c92 <TimeBomb_pause+0x5e>
		}
		default:{
			Status = IGNORED_STATUS;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	73fb      	strb	r3, [r7, #15]
			break;
 8005c90:	bf00      	nop
		}
	}

	return Status;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
//			TRAN(TimeBomb_blink);
//		}
//		else{
//			TRAN(TimeBomb_boom);
//		}
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	08005bd1 	.word	0x08005bd1
 8005ca0:	08005ca5 	.word	0x08005ca5

08005ca4 <TimeBomb_boom>:


State TimeBomb_boom(TimeBomb * const me, Event const * const e){
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]


	State Status;

	switch(e->sig){
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d108      	bne.n	8005cc8 <TimeBomb_boom+0x24>
		case ENTRY_SIG:{
			BspLed1On();
 8005cb6:	f7ff fef9 	bl	8005aac <BspLed1On>
			BspLed2On();
 8005cba:	f7ff ff0f 	bl	8005adc <BspLed2On>
			BspLed3On();
 8005cbe:	f7ff ff25 	bl	8005b0c <BspLed3On>
			Status = HANDLED_STATUS;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
			break;
 8005cc6:	e002      	b.n	8005cce <TimeBomb_boom+0x2a>
		}
		default:{
			Status = IGNORED_STATUS;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	73fb      	strb	r3, [r7, #15]
			break;
 8005ccc:	bf00      	nop
		}
	}

	return Status;
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
//	Entry:
//		BspLed1On();
//		BspLed2On();
//		BspLed3On();

}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <App_TimeTickHook>:
//}



/* uCOS-II application hooks ===============================================*/
void App_TimeTickHook(void) {
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
        uint32_t previous;
    } buttons = { 0U, 0U };
    uint32_t current;
    uint32_t tmp;

    TimeEvent_tick(); /* process all uC/AO time events */
 8005cde:	f7fa fd47 	bl	8000770 <TimeEvent_tick>

    /* Perform the debouncing of buttons. The algorithm for debouncing
    * adapted from the book "Embedded Systems Dictionary" by Jack Ganssle
    * and Michael Barr, page 71.
    */
    current = BspGetButtonState(); /* read SW1 */
 8005ce2:	f7ff fed1 	bl	8005a88 <BspGetButtonState>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	607b      	str	r3, [r7, #4]
    tmp = buttons.depressed; /* save the debounced depressed buttons */
 8005cea:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <App_TimeTickHook+0x90>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	603b      	str	r3, [r7, #0]
    buttons.depressed |= (buttons.previous & current); /* set depressed */
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <App_TimeTickHook+0x90>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <App_TimeTickHook+0x90>)
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	; (8005d68 <App_TimeTickHook+0x90>)
 8005d00:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.previous | current); /* clear released */
 8005d02:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <App_TimeTickHook+0x90>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <App_TimeTickHook+0x90>)
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <App_TimeTickHook+0x90>)
 8005d12:	6013      	str	r3, [r2, #0]
    buttons.previous   = current; /* update the history */
 8005d14:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <App_TimeTickHook+0x90>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6053      	str	r3, [r2, #4]
    tmp ^= buttons.depressed;     /* changed debounced depressed */
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <App_TimeTickHook+0x90>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	4053      	eors	r3, r2
 8005d22:	603b      	str	r3, [r7, #0]

    if ((tmp & BspGetButtonState()) != 0U) {  /* debounced SW1 state changed? */
 8005d24:	f7ff feb0 	bl	8005a88 <BspGetButtonState>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d014      	beq.n	8005d5e <App_TimeTickHook+0x86>
        if ((buttons.depressed & BspGetButtonState()) != 0U) { /* is SW1 depressed? */
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <App_TimeTickHook+0x90>)
 8005d36:	681c      	ldr	r4, [r3, #0]
 8005d38:	f7ff fea6 	bl	8005a88 <BspGetButtonState>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4023      	ands	r3, r4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <App_TimeTickHook+0x7a>
            /* post the "button-pressed" event from ISR */
            static Event const buttonPressedEvt = {BUTTON_PRESSED_SIG};
            Active_post(AO_TimeBomb, &buttonPressedEvt);
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <App_TimeTickHook+0x94>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4909      	ldr	r1, [pc, #36]	; (8005d70 <App_TimeTickHook+0x98>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fa fca6 	bl	800069c <Active_post>
            /* post the "button-released" event from ISR */
            static Event const buttonReleasedEvt = {BUTTON_RELEASED_SIG};
            Active_post(AO_TimeBomb, &buttonReleasedEvt);
        }
    }
}
 8005d50:	e005      	b.n	8005d5e <App_TimeTickHook+0x86>
            Active_post(AO_TimeBomb, &buttonReleasedEvt);
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <App_TimeTickHook+0x94>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4907      	ldr	r1, [pc, #28]	; (8005d74 <App_TimeTickHook+0x9c>)
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fa fc9f 	bl	800069c <Active_post>
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200046cc 	.word	0x200046cc
 8005d6c:	20000000 	.word	0x20000000
 8005d70:	080067f8 	.word	0x080067f8
 8005d74:	080067fc 	.word	0x080067fc

08005d78 <__errno>:
 8005d78:	4b01      	ldr	r3, [pc, #4]	; (8005d80 <__errno+0x8>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000014 	.word	0x20000014

08005d84 <std>:
 8005d84:	2300      	movs	r3, #0
 8005d86:	b510      	push	{r4, lr}
 8005d88:	4604      	mov	r4, r0
 8005d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d92:	6083      	str	r3, [r0, #8]
 8005d94:	8181      	strh	r1, [r0, #12]
 8005d96:	6643      	str	r3, [r0, #100]	; 0x64
 8005d98:	81c2      	strh	r2, [r0, #14]
 8005d9a:	6183      	str	r3, [r0, #24]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	2208      	movs	r2, #8
 8005da0:	305c      	adds	r0, #92	; 0x5c
 8005da2:	f000 f91a 	bl	8005fda <memset>
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <std+0x38>)
 8005da8:	6263      	str	r3, [r4, #36]	; 0x24
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <std+0x3c>)
 8005dac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <std+0x40>)
 8005db0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <std+0x44>)
 8005db4:	6224      	str	r4, [r4, #32]
 8005db6:	6323      	str	r3, [r4, #48]	; 0x30
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	08006395 	.word	0x08006395
 8005dc0:	080063b7 	.word	0x080063b7
 8005dc4:	080063ef 	.word	0x080063ef
 8005dc8:	08006413 	.word	0x08006413

08005dcc <_cleanup_r>:
 8005dcc:	4901      	ldr	r1, [pc, #4]	; (8005dd4 <_cleanup_r+0x8>)
 8005dce:	f000 b8af 	b.w	8005f30 <_fwalk_reent>
 8005dd2:	bf00      	nop
 8005dd4:	0800656d 	.word	0x0800656d

08005dd8 <__sfmoreglue>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	2268      	movs	r2, #104	; 0x68
 8005ddc:	1e4d      	subs	r5, r1, #1
 8005dde:	4355      	muls	r5, r2
 8005de0:	460e      	mov	r6, r1
 8005de2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005de6:	f000 f921 	bl	800602c <_malloc_r>
 8005dea:	4604      	mov	r4, r0
 8005dec:	b140      	cbz	r0, 8005e00 <__sfmoreglue+0x28>
 8005dee:	2100      	movs	r1, #0
 8005df0:	e9c0 1600 	strd	r1, r6, [r0]
 8005df4:	300c      	adds	r0, #12
 8005df6:	60a0      	str	r0, [r4, #8]
 8005df8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dfc:	f000 f8ed 	bl	8005fda <memset>
 8005e00:	4620      	mov	r0, r4
 8005e02:	bd70      	pop	{r4, r5, r6, pc}

08005e04 <__sfp_lock_acquire>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__sfp_lock_acquire+0x8>)
 8005e06:	f000 b8d8 	b.w	8005fba <__retarget_lock_acquire_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	200046d5 	.word	0x200046d5

08005e10 <__sfp_lock_release>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__sfp_lock_release+0x8>)
 8005e12:	f000 b8d3 	b.w	8005fbc <__retarget_lock_release_recursive>
 8005e16:	bf00      	nop
 8005e18:	200046d5 	.word	0x200046d5

08005e1c <__sinit_lock_acquire>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__sinit_lock_acquire+0x8>)
 8005e1e:	f000 b8cc 	b.w	8005fba <__retarget_lock_acquire_recursive>
 8005e22:	bf00      	nop
 8005e24:	200046d6 	.word	0x200046d6

08005e28 <__sinit_lock_release>:
 8005e28:	4801      	ldr	r0, [pc, #4]	; (8005e30 <__sinit_lock_release+0x8>)
 8005e2a:	f000 b8c7 	b.w	8005fbc <__retarget_lock_release_recursive>
 8005e2e:	bf00      	nop
 8005e30:	200046d6 	.word	0x200046d6

08005e34 <__sinit>:
 8005e34:	b510      	push	{r4, lr}
 8005e36:	4604      	mov	r4, r0
 8005e38:	f7ff fff0 	bl	8005e1c <__sinit_lock_acquire>
 8005e3c:	69a3      	ldr	r3, [r4, #24]
 8005e3e:	b11b      	cbz	r3, 8005e48 <__sinit+0x14>
 8005e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e44:	f7ff bff0 	b.w	8005e28 <__sinit_lock_release>
 8005e48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e4c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <__sinit+0x68>)
 8005e50:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <__sinit+0x6c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	bf04      	itt	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	61a3      	streq	r3, [r4, #24]
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 f820 	bl	8005ea4 <__sfp>
 8005e64:	6060      	str	r0, [r4, #4]
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 f81c 	bl	8005ea4 <__sfp>
 8005e6c:	60a0      	str	r0, [r4, #8]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 f818 	bl	8005ea4 <__sfp>
 8005e74:	2200      	movs	r2, #0
 8005e76:	60e0      	str	r0, [r4, #12]
 8005e78:	2104      	movs	r1, #4
 8005e7a:	6860      	ldr	r0, [r4, #4]
 8005e7c:	f7ff ff82 	bl	8005d84 <std>
 8005e80:	68a0      	ldr	r0, [r4, #8]
 8005e82:	2201      	movs	r2, #1
 8005e84:	2109      	movs	r1, #9
 8005e86:	f7ff ff7d 	bl	8005d84 <std>
 8005e8a:	68e0      	ldr	r0, [r4, #12]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	2112      	movs	r1, #18
 8005e90:	f7ff ff78 	bl	8005d84 <std>
 8005e94:	2301      	movs	r3, #1
 8005e96:	61a3      	str	r3, [r4, #24]
 8005e98:	e7d2      	b.n	8005e40 <__sinit+0xc>
 8005e9a:	bf00      	nop
 8005e9c:	08006860 	.word	0x08006860
 8005ea0:	08005dcd 	.word	0x08005dcd

08005ea4 <__sfp>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	4607      	mov	r7, r0
 8005ea8:	f7ff ffac 	bl	8005e04 <__sfp_lock_acquire>
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <__sfp+0x84>)
 8005eae:	681e      	ldr	r6, [r3, #0]
 8005eb0:	69b3      	ldr	r3, [r6, #24]
 8005eb2:	b913      	cbnz	r3, 8005eba <__sfp+0x16>
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff ffbd 	bl	8005e34 <__sinit>
 8005eba:	3648      	adds	r6, #72	; 0x48
 8005ebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	d503      	bpl.n	8005ecc <__sfp+0x28>
 8005ec4:	6833      	ldr	r3, [r6, #0]
 8005ec6:	b30b      	cbz	r3, 8005f0c <__sfp+0x68>
 8005ec8:	6836      	ldr	r6, [r6, #0]
 8005eca:	e7f7      	b.n	8005ebc <__sfp+0x18>
 8005ecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ed0:	b9d5      	cbnz	r5, 8005f08 <__sfp+0x64>
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <__sfp+0x88>)
 8005ed4:	60e3      	str	r3, [r4, #12]
 8005ed6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eda:	6665      	str	r5, [r4, #100]	; 0x64
 8005edc:	f000 f86c 	bl	8005fb8 <__retarget_lock_init_recursive>
 8005ee0:	f7ff ff96 	bl	8005e10 <__sfp_lock_release>
 8005ee4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ee8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005eec:	6025      	str	r5, [r4, #0]
 8005eee:	61a5      	str	r5, [r4, #24]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ef8:	f000 f86f 	bl	8005fda <memset>
 8005efc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f04:	4620      	mov	r0, r4
 8005f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f08:	3468      	adds	r4, #104	; 0x68
 8005f0a:	e7d9      	b.n	8005ec0 <__sfp+0x1c>
 8005f0c:	2104      	movs	r1, #4
 8005f0e:	4638      	mov	r0, r7
 8005f10:	f7ff ff62 	bl	8005dd8 <__sfmoreglue>
 8005f14:	4604      	mov	r4, r0
 8005f16:	6030      	str	r0, [r6, #0]
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d1d5      	bne.n	8005ec8 <__sfp+0x24>
 8005f1c:	f7ff ff78 	bl	8005e10 <__sfp_lock_release>
 8005f20:	230c      	movs	r3, #12
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	e7ee      	b.n	8005f04 <__sfp+0x60>
 8005f26:	bf00      	nop
 8005f28:	08006860 	.word	0x08006860
 8005f2c:	ffff0001 	.word	0xffff0001

08005f30 <_fwalk_reent>:
 8005f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f34:	4606      	mov	r6, r0
 8005f36:	4688      	mov	r8, r1
 8005f38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f3c:	2700      	movs	r7, #0
 8005f3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f42:	f1b9 0901 	subs.w	r9, r9, #1
 8005f46:	d505      	bpl.n	8005f54 <_fwalk_reent+0x24>
 8005f48:	6824      	ldr	r4, [r4, #0]
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	d1f7      	bne.n	8005f3e <_fwalk_reent+0xe>
 8005f4e:	4638      	mov	r0, r7
 8005f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f54:	89ab      	ldrh	r3, [r5, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d907      	bls.n	8005f6a <_fwalk_reent+0x3a>
 8005f5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	d003      	beq.n	8005f6a <_fwalk_reent+0x3a>
 8005f62:	4629      	mov	r1, r5
 8005f64:	4630      	mov	r0, r6
 8005f66:	47c0      	blx	r8
 8005f68:	4307      	orrs	r7, r0
 8005f6a:	3568      	adds	r5, #104	; 0x68
 8005f6c:	e7e9      	b.n	8005f42 <_fwalk_reent+0x12>
	...

08005f70 <__libc_init_array>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	4d0d      	ldr	r5, [pc, #52]	; (8005fa8 <__libc_init_array+0x38>)
 8005f74:	4c0d      	ldr	r4, [pc, #52]	; (8005fac <__libc_init_array+0x3c>)
 8005f76:	1b64      	subs	r4, r4, r5
 8005f78:	10a4      	asrs	r4, r4, #2
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	42a6      	cmp	r6, r4
 8005f7e:	d109      	bne.n	8005f94 <__libc_init_array+0x24>
 8005f80:	4d0b      	ldr	r5, [pc, #44]	; (8005fb0 <__libc_init_array+0x40>)
 8005f82:	4c0c      	ldr	r4, [pc, #48]	; (8005fb4 <__libc_init_array+0x44>)
 8005f84:	f000 fbea 	bl	800675c <_init>
 8005f88:	1b64      	subs	r4, r4, r5
 8005f8a:	10a4      	asrs	r4, r4, #2
 8005f8c:	2600      	movs	r6, #0
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	d105      	bne.n	8005f9e <__libc_init_array+0x2e>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f98:	4798      	blx	r3
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7ee      	b.n	8005f7c <__libc_init_array+0xc>
 8005f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa2:	4798      	blx	r3
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7f2      	b.n	8005f8e <__libc_init_array+0x1e>
 8005fa8:	0800686c 	.word	0x0800686c
 8005fac:	0800686c 	.word	0x0800686c
 8005fb0:	0800686c 	.word	0x0800686c
 8005fb4:	08006870 	.word	0x08006870

08005fb8 <__retarget_lock_init_recursive>:
 8005fb8:	4770      	bx	lr

08005fba <__retarget_lock_acquire_recursive>:
 8005fba:	4770      	bx	lr

08005fbc <__retarget_lock_release_recursive>:
 8005fbc:	4770      	bx	lr

08005fbe <memcpy>:
 8005fbe:	440a      	add	r2, r1
 8005fc0:	4291      	cmp	r1, r2
 8005fc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fc6:	d100      	bne.n	8005fca <memcpy+0xc>
 8005fc8:	4770      	bx	lr
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fd4:	4291      	cmp	r1, r2
 8005fd6:	d1f9      	bne.n	8005fcc <memcpy+0xe>
 8005fd8:	bd10      	pop	{r4, pc}

08005fda <memset>:
 8005fda:	4402      	add	r2, r0
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d100      	bne.n	8005fe4 <memset+0xa>
 8005fe2:	4770      	bx	lr
 8005fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe8:	e7f9      	b.n	8005fde <memset+0x4>
	...

08005fec <sbrk_aligned>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4e0e      	ldr	r6, [pc, #56]	; (8006028 <sbrk_aligned+0x3c>)
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	6831      	ldr	r1, [r6, #0]
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	b911      	cbnz	r1, 8005ffe <sbrk_aligned+0x12>
 8005ff8:	f000 f8f6 	bl	80061e8 <_sbrk_r>
 8005ffc:	6030      	str	r0, [r6, #0]
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 f8f1 	bl	80061e8 <_sbrk_r>
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	d00a      	beq.n	8006020 <sbrk_aligned+0x34>
 800600a:	1cc4      	adds	r4, r0, #3
 800600c:	f024 0403 	bic.w	r4, r4, #3
 8006010:	42a0      	cmp	r0, r4
 8006012:	d007      	beq.n	8006024 <sbrk_aligned+0x38>
 8006014:	1a21      	subs	r1, r4, r0
 8006016:	4628      	mov	r0, r5
 8006018:	f000 f8e6 	bl	80061e8 <_sbrk_r>
 800601c:	3001      	adds	r0, #1
 800601e:	d101      	bne.n	8006024 <sbrk_aligned+0x38>
 8006020:	f04f 34ff 	mov.w	r4, #4294967295
 8006024:	4620      	mov	r0, r4
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	200046dc 	.word	0x200046dc

0800602c <_malloc_r>:
 800602c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	1ccd      	adds	r5, r1, #3
 8006032:	f025 0503 	bic.w	r5, r5, #3
 8006036:	3508      	adds	r5, #8
 8006038:	2d0c      	cmp	r5, #12
 800603a:	bf38      	it	cc
 800603c:	250c      	movcc	r5, #12
 800603e:	2d00      	cmp	r5, #0
 8006040:	4607      	mov	r7, r0
 8006042:	db01      	blt.n	8006048 <_malloc_r+0x1c>
 8006044:	42a9      	cmp	r1, r5
 8006046:	d905      	bls.n	8006054 <_malloc_r+0x28>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	2600      	movs	r6, #0
 800604e:	4630      	mov	r0, r6
 8006050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006054:	4e2e      	ldr	r6, [pc, #184]	; (8006110 <_malloc_r+0xe4>)
 8006056:	f000 fb05 	bl	8006664 <__malloc_lock>
 800605a:	6833      	ldr	r3, [r6, #0]
 800605c:	461c      	mov	r4, r3
 800605e:	bb34      	cbnz	r4, 80060ae <_malloc_r+0x82>
 8006060:	4629      	mov	r1, r5
 8006062:	4638      	mov	r0, r7
 8006064:	f7ff ffc2 	bl	8005fec <sbrk_aligned>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	4604      	mov	r4, r0
 800606c:	d14d      	bne.n	800610a <_malloc_r+0xde>
 800606e:	6834      	ldr	r4, [r6, #0]
 8006070:	4626      	mov	r6, r4
 8006072:	2e00      	cmp	r6, #0
 8006074:	d140      	bne.n	80060f8 <_malloc_r+0xcc>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	4631      	mov	r1, r6
 800607a:	4638      	mov	r0, r7
 800607c:	eb04 0803 	add.w	r8, r4, r3
 8006080:	f000 f8b2 	bl	80061e8 <_sbrk_r>
 8006084:	4580      	cmp	r8, r0
 8006086:	d13a      	bne.n	80060fe <_malloc_r+0xd2>
 8006088:	6821      	ldr	r1, [r4, #0]
 800608a:	3503      	adds	r5, #3
 800608c:	1a6d      	subs	r5, r5, r1
 800608e:	f025 0503 	bic.w	r5, r5, #3
 8006092:	3508      	adds	r5, #8
 8006094:	2d0c      	cmp	r5, #12
 8006096:	bf38      	it	cc
 8006098:	250c      	movcc	r5, #12
 800609a:	4629      	mov	r1, r5
 800609c:	4638      	mov	r0, r7
 800609e:	f7ff ffa5 	bl	8005fec <sbrk_aligned>
 80060a2:	3001      	adds	r0, #1
 80060a4:	d02b      	beq.n	80060fe <_malloc_r+0xd2>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	442b      	add	r3, r5
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	e00e      	b.n	80060cc <_malloc_r+0xa0>
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	1b52      	subs	r2, r2, r5
 80060b2:	d41e      	bmi.n	80060f2 <_malloc_r+0xc6>
 80060b4:	2a0b      	cmp	r2, #11
 80060b6:	d916      	bls.n	80060e6 <_malloc_r+0xba>
 80060b8:	1961      	adds	r1, r4, r5
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	6025      	str	r5, [r4, #0]
 80060be:	bf18      	it	ne
 80060c0:	6059      	strne	r1, [r3, #4]
 80060c2:	6863      	ldr	r3, [r4, #4]
 80060c4:	bf08      	it	eq
 80060c6:	6031      	streq	r1, [r6, #0]
 80060c8:	5162      	str	r2, [r4, r5]
 80060ca:	604b      	str	r3, [r1, #4]
 80060cc:	4638      	mov	r0, r7
 80060ce:	f104 060b 	add.w	r6, r4, #11
 80060d2:	f000 facd 	bl	8006670 <__malloc_unlock>
 80060d6:	f026 0607 	bic.w	r6, r6, #7
 80060da:	1d23      	adds	r3, r4, #4
 80060dc:	1af2      	subs	r2, r6, r3
 80060de:	d0b6      	beq.n	800604e <_malloc_r+0x22>
 80060e0:	1b9b      	subs	r3, r3, r6
 80060e2:	50a3      	str	r3, [r4, r2]
 80060e4:	e7b3      	b.n	800604e <_malloc_r+0x22>
 80060e6:	6862      	ldr	r2, [r4, #4]
 80060e8:	42a3      	cmp	r3, r4
 80060ea:	bf0c      	ite	eq
 80060ec:	6032      	streq	r2, [r6, #0]
 80060ee:	605a      	strne	r2, [r3, #4]
 80060f0:	e7ec      	b.n	80060cc <_malloc_r+0xa0>
 80060f2:	4623      	mov	r3, r4
 80060f4:	6864      	ldr	r4, [r4, #4]
 80060f6:	e7b2      	b.n	800605e <_malloc_r+0x32>
 80060f8:	4634      	mov	r4, r6
 80060fa:	6876      	ldr	r6, [r6, #4]
 80060fc:	e7b9      	b.n	8006072 <_malloc_r+0x46>
 80060fe:	230c      	movs	r3, #12
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	4638      	mov	r0, r7
 8006104:	f000 fab4 	bl	8006670 <__malloc_unlock>
 8006108:	e7a1      	b.n	800604e <_malloc_r+0x22>
 800610a:	6025      	str	r5, [r4, #0]
 800610c:	e7de      	b.n	80060cc <_malloc_r+0xa0>
 800610e:	bf00      	nop
 8006110:	200046d8 	.word	0x200046d8

08006114 <cleanup_glue>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	460c      	mov	r4, r1
 8006118:	6809      	ldr	r1, [r1, #0]
 800611a:	4605      	mov	r5, r0
 800611c:	b109      	cbz	r1, 8006122 <cleanup_glue+0xe>
 800611e:	f7ff fff9 	bl	8006114 <cleanup_glue>
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800612a:	f000 baa7 	b.w	800667c <_free_r>
	...

08006130 <_reclaim_reent>:
 8006130:	4b2c      	ldr	r3, [pc, #176]	; (80061e4 <_reclaim_reent+0xb4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4283      	cmp	r3, r0
 8006136:	b570      	push	{r4, r5, r6, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	d051      	beq.n	80061e0 <_reclaim_reent+0xb0>
 800613c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800613e:	b143      	cbz	r3, 8006152 <_reclaim_reent+0x22>
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d14a      	bne.n	80061dc <_reclaim_reent+0xac>
 8006146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	b111      	cbz	r1, 8006152 <_reclaim_reent+0x22>
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fa95 	bl	800667c <_free_r>
 8006152:	6961      	ldr	r1, [r4, #20]
 8006154:	b111      	cbz	r1, 800615c <_reclaim_reent+0x2c>
 8006156:	4620      	mov	r0, r4
 8006158:	f000 fa90 	bl	800667c <_free_r>
 800615c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800615e:	b111      	cbz	r1, 8006166 <_reclaim_reent+0x36>
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fa8b 	bl	800667c <_free_r>
 8006166:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006168:	b111      	cbz	r1, 8006170 <_reclaim_reent+0x40>
 800616a:	4620      	mov	r0, r4
 800616c:	f000 fa86 	bl	800667c <_free_r>
 8006170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006172:	b111      	cbz	r1, 800617a <_reclaim_reent+0x4a>
 8006174:	4620      	mov	r0, r4
 8006176:	f000 fa81 	bl	800667c <_free_r>
 800617a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800617c:	b111      	cbz	r1, 8006184 <_reclaim_reent+0x54>
 800617e:	4620      	mov	r0, r4
 8006180:	f000 fa7c 	bl	800667c <_free_r>
 8006184:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006186:	b111      	cbz	r1, 800618e <_reclaim_reent+0x5e>
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fa77 	bl	800667c <_free_r>
 800618e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006190:	b111      	cbz	r1, 8006198 <_reclaim_reent+0x68>
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fa72 	bl	800667c <_free_r>
 8006198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800619a:	b111      	cbz	r1, 80061a2 <_reclaim_reent+0x72>
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fa6d 	bl	800667c <_free_r>
 80061a2:	69a3      	ldr	r3, [r4, #24]
 80061a4:	b1e3      	cbz	r3, 80061e0 <_reclaim_reent+0xb0>
 80061a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061a8:	4620      	mov	r0, r4
 80061aa:	4798      	blx	r3
 80061ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061ae:	b1b9      	cbz	r1, 80061e0 <_reclaim_reent+0xb0>
 80061b0:	4620      	mov	r0, r4
 80061b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061b6:	f7ff bfad 	b.w	8006114 <cleanup_glue>
 80061ba:	5949      	ldr	r1, [r1, r5]
 80061bc:	b941      	cbnz	r1, 80061d0 <_reclaim_reent+0xa0>
 80061be:	3504      	adds	r5, #4
 80061c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c2:	2d80      	cmp	r5, #128	; 0x80
 80061c4:	68d9      	ldr	r1, [r3, #12]
 80061c6:	d1f8      	bne.n	80061ba <_reclaim_reent+0x8a>
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fa57 	bl	800667c <_free_r>
 80061ce:	e7ba      	b.n	8006146 <_reclaim_reent+0x16>
 80061d0:	680e      	ldr	r6, [r1, #0]
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 fa52 	bl	800667c <_free_r>
 80061d8:	4631      	mov	r1, r6
 80061da:	e7ef      	b.n	80061bc <_reclaim_reent+0x8c>
 80061dc:	2500      	movs	r5, #0
 80061de:	e7ef      	b.n	80061c0 <_reclaim_reent+0x90>
 80061e0:	bd70      	pop	{r4, r5, r6, pc}
 80061e2:	bf00      	nop
 80061e4:	20000014 	.word	0x20000014

080061e8 <_sbrk_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d06      	ldr	r5, [pc, #24]	; (8006204 <_sbrk_r+0x1c>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f7fa fece 	bl	8000f94 <_sbrk>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_sbrk_r+0x1a>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_sbrk_r+0x1a>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	200046e0 	.word	0x200046e0

08006208 <setvbuf>:
 8006208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800620c:	461d      	mov	r5, r3
 800620e:	4b5d      	ldr	r3, [pc, #372]	; (8006384 <setvbuf+0x17c>)
 8006210:	681f      	ldr	r7, [r3, #0]
 8006212:	4604      	mov	r4, r0
 8006214:	460e      	mov	r6, r1
 8006216:	4690      	mov	r8, r2
 8006218:	b127      	cbz	r7, 8006224 <setvbuf+0x1c>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	b913      	cbnz	r3, 8006224 <setvbuf+0x1c>
 800621e:	4638      	mov	r0, r7
 8006220:	f7ff fe08 	bl	8005e34 <__sinit>
 8006224:	4b58      	ldr	r3, [pc, #352]	; (8006388 <setvbuf+0x180>)
 8006226:	429c      	cmp	r4, r3
 8006228:	d167      	bne.n	80062fa <setvbuf+0xf2>
 800622a:	687c      	ldr	r4, [r7, #4]
 800622c:	f1b8 0f02 	cmp.w	r8, #2
 8006230:	d006      	beq.n	8006240 <setvbuf+0x38>
 8006232:	f1b8 0f01 	cmp.w	r8, #1
 8006236:	f200 809f 	bhi.w	8006378 <setvbuf+0x170>
 800623a:	2d00      	cmp	r5, #0
 800623c:	f2c0 809c 	blt.w	8006378 <setvbuf+0x170>
 8006240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006242:	07db      	lsls	r3, r3, #31
 8006244:	d405      	bmi.n	8006252 <setvbuf+0x4a>
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	0598      	lsls	r0, r3, #22
 800624a:	d402      	bmi.n	8006252 <setvbuf+0x4a>
 800624c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800624e:	f7ff feb4 	bl	8005fba <__retarget_lock_acquire_recursive>
 8006252:	4621      	mov	r1, r4
 8006254:	4638      	mov	r0, r7
 8006256:	f000 f989 	bl	800656c <_fflush_r>
 800625a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800625c:	b141      	cbz	r1, 8006270 <setvbuf+0x68>
 800625e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006262:	4299      	cmp	r1, r3
 8006264:	d002      	beq.n	800626c <setvbuf+0x64>
 8006266:	4638      	mov	r0, r7
 8006268:	f000 fa08 	bl	800667c <_free_r>
 800626c:	2300      	movs	r3, #0
 800626e:	6363      	str	r3, [r4, #52]	; 0x34
 8006270:	2300      	movs	r3, #0
 8006272:	61a3      	str	r3, [r4, #24]
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	0619      	lsls	r1, r3, #24
 800627a:	d503      	bpl.n	8006284 <setvbuf+0x7c>
 800627c:	6921      	ldr	r1, [r4, #16]
 800627e:	4638      	mov	r0, r7
 8006280:	f000 f9fc 	bl	800667c <_free_r>
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800628a:	f023 0303 	bic.w	r3, r3, #3
 800628e:	f1b8 0f02 	cmp.w	r8, #2
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	d06c      	beq.n	8006370 <setvbuf+0x168>
 8006296:	ab01      	add	r3, sp, #4
 8006298:	466a      	mov	r2, sp
 800629a:	4621      	mov	r1, r4
 800629c:	4638      	mov	r0, r7
 800629e:	f000 f9b3 	bl	8006608 <__swhatbuf_r>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	4318      	orrs	r0, r3
 80062a6:	81a0      	strh	r0, [r4, #12]
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	d130      	bne.n	800630e <setvbuf+0x106>
 80062ac:	9d00      	ldr	r5, [sp, #0]
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 f9d0 	bl	8006654 <malloc>
 80062b4:	4606      	mov	r6, r0
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d155      	bne.n	8006366 <setvbuf+0x15e>
 80062ba:	f8dd 9000 	ldr.w	r9, [sp]
 80062be:	45a9      	cmp	r9, r5
 80062c0:	d14a      	bne.n	8006358 <setvbuf+0x150>
 80062c2:	f04f 35ff 	mov.w	r5, #4294967295
 80062c6:	2200      	movs	r2, #0
 80062c8:	60a2      	str	r2, [r4, #8]
 80062ca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80062ce:	6022      	str	r2, [r4, #0]
 80062d0:	6122      	str	r2, [r4, #16]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d8:	6162      	str	r2, [r4, #20]
 80062da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062dc:	f043 0302 	orr.w	r3, r3, #2
 80062e0:	07d2      	lsls	r2, r2, #31
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	d405      	bmi.n	80062f2 <setvbuf+0xea>
 80062e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80062ea:	d102      	bne.n	80062f2 <setvbuf+0xea>
 80062ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ee:	f7ff fe65 	bl	8005fbc <__retarget_lock_release_recursive>
 80062f2:	4628      	mov	r0, r5
 80062f4:	b003      	add	sp, #12
 80062f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <setvbuf+0x184>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d101      	bne.n	8006304 <setvbuf+0xfc>
 8006300:	68bc      	ldr	r4, [r7, #8]
 8006302:	e793      	b.n	800622c <setvbuf+0x24>
 8006304:	4b22      	ldr	r3, [pc, #136]	; (8006390 <setvbuf+0x188>)
 8006306:	429c      	cmp	r4, r3
 8006308:	bf08      	it	eq
 800630a:	68fc      	ldreq	r4, [r7, #12]
 800630c:	e78e      	b.n	800622c <setvbuf+0x24>
 800630e:	2e00      	cmp	r6, #0
 8006310:	d0cd      	beq.n	80062ae <setvbuf+0xa6>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	b913      	cbnz	r3, 800631c <setvbuf+0x114>
 8006316:	4638      	mov	r0, r7
 8006318:	f7ff fd8c 	bl	8005e34 <__sinit>
 800631c:	f1b8 0f01 	cmp.w	r8, #1
 8006320:	bf08      	it	eq
 8006322:	89a3      	ldrheq	r3, [r4, #12]
 8006324:	6026      	str	r6, [r4, #0]
 8006326:	bf04      	itt	eq
 8006328:	f043 0301 	orreq.w	r3, r3, #1
 800632c:	81a3      	strheq	r3, [r4, #12]
 800632e:	89a2      	ldrh	r2, [r4, #12]
 8006330:	f012 0308 	ands.w	r3, r2, #8
 8006334:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006338:	d01c      	beq.n	8006374 <setvbuf+0x16c>
 800633a:	07d3      	lsls	r3, r2, #31
 800633c:	bf41      	itttt	mi
 800633e:	2300      	movmi	r3, #0
 8006340:	426d      	negmi	r5, r5
 8006342:	60a3      	strmi	r3, [r4, #8]
 8006344:	61a5      	strmi	r5, [r4, #24]
 8006346:	bf58      	it	pl
 8006348:	60a5      	strpl	r5, [r4, #8]
 800634a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800634c:	f015 0501 	ands.w	r5, r5, #1
 8006350:	d115      	bne.n	800637e <setvbuf+0x176>
 8006352:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006356:	e7c8      	b.n	80062ea <setvbuf+0xe2>
 8006358:	4648      	mov	r0, r9
 800635a:	f000 f97b 	bl	8006654 <malloc>
 800635e:	4606      	mov	r6, r0
 8006360:	2800      	cmp	r0, #0
 8006362:	d0ae      	beq.n	80062c2 <setvbuf+0xba>
 8006364:	464d      	mov	r5, r9
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	e7d0      	b.n	8006312 <setvbuf+0x10a>
 8006370:	2500      	movs	r5, #0
 8006372:	e7a8      	b.n	80062c6 <setvbuf+0xbe>
 8006374:	60a3      	str	r3, [r4, #8]
 8006376:	e7e8      	b.n	800634a <setvbuf+0x142>
 8006378:	f04f 35ff 	mov.w	r5, #4294967295
 800637c:	e7b9      	b.n	80062f2 <setvbuf+0xea>
 800637e:	2500      	movs	r5, #0
 8006380:	e7b7      	b.n	80062f2 <setvbuf+0xea>
 8006382:	bf00      	nop
 8006384:	20000014 	.word	0x20000014
 8006388:	08006820 	.word	0x08006820
 800638c:	08006840 	.word	0x08006840
 8006390:	08006800 	.word	0x08006800

08006394 <__sread>:
 8006394:	b510      	push	{r4, lr}
 8006396:	460c      	mov	r4, r1
 8006398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639c:	f000 f9ba 	bl	8006714 <_read_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	bfab      	itete	ge
 80063a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063a6:	89a3      	ldrhlt	r3, [r4, #12]
 80063a8:	181b      	addge	r3, r3, r0
 80063aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ae:	bfac      	ite	ge
 80063b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063b2:	81a3      	strhlt	r3, [r4, #12]
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <__swrite>:
 80063b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ba:	461f      	mov	r7, r3
 80063bc:	898b      	ldrh	r3, [r1, #12]
 80063be:	05db      	lsls	r3, r3, #23
 80063c0:	4605      	mov	r5, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4616      	mov	r6, r2
 80063c6:	d505      	bpl.n	80063d4 <__swrite+0x1e>
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	2302      	movs	r3, #2
 80063ce:	2200      	movs	r2, #0
 80063d0:	f000 f908 	bl	80065e4 <_lseek_r>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	4628      	mov	r0, r5
 80063e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ea:	f000 b817 	b.w	800641c <_write_r>

080063ee <__sseek>:
 80063ee:	b510      	push	{r4, lr}
 80063f0:	460c      	mov	r4, r1
 80063f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f6:	f000 f8f5 	bl	80065e4 <_lseek_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	bf15      	itete	ne
 8006400:	6560      	strne	r0, [r4, #84]	; 0x54
 8006402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800640a:	81a3      	strheq	r3, [r4, #12]
 800640c:	bf18      	it	ne
 800640e:	81a3      	strhne	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__sclose>:
 8006412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006416:	f000 b813 	b.w	8006440 <_close_r>
	...

0800641c <_write_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d07      	ldr	r5, [pc, #28]	; (800643c <_write_r+0x20>)
 8006420:	4604      	mov	r4, r0
 8006422:	4608      	mov	r0, r1
 8006424:	4611      	mov	r1, r2
 8006426:	2200      	movs	r2, #0
 8006428:	602a      	str	r2, [r5, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f7fa fc14 	bl	8000c58 <_write>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_write_r+0x1e>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_write_r+0x1e>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	200046e0 	.word	0x200046e0

08006440 <_close_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d06      	ldr	r5, [pc, #24]	; (800645c <_close_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	f7fa fc30 	bl	8000cb0 <_close>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_close_r+0x1a>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_close_r+0x1a>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	200046e0 	.word	0x200046e0

08006460 <__sflush_r>:
 8006460:	898a      	ldrh	r2, [r1, #12]
 8006462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	4605      	mov	r5, r0
 8006468:	0710      	lsls	r0, r2, #28
 800646a:	460c      	mov	r4, r1
 800646c:	d458      	bmi.n	8006520 <__sflush_r+0xc0>
 800646e:	684b      	ldr	r3, [r1, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	dc05      	bgt.n	8006480 <__sflush_r+0x20>
 8006474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	dc02      	bgt.n	8006480 <__sflush_r+0x20>
 800647a:	2000      	movs	r0, #0
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006482:	2e00      	cmp	r6, #0
 8006484:	d0f9      	beq.n	800647a <__sflush_r+0x1a>
 8006486:	2300      	movs	r3, #0
 8006488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800648c:	682f      	ldr	r7, [r5, #0]
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	d032      	beq.n	80064f8 <__sflush_r+0x98>
 8006492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	075a      	lsls	r2, r3, #29
 8006498:	d505      	bpl.n	80064a6 <__sflush_r+0x46>
 800649a:	6863      	ldr	r3, [r4, #4]
 800649c:	1ac0      	subs	r0, r0, r3
 800649e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064a0:	b10b      	cbz	r3, 80064a6 <__sflush_r+0x46>
 80064a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064a4:	1ac0      	subs	r0, r0, r3
 80064a6:	2300      	movs	r3, #0
 80064a8:	4602      	mov	r2, r0
 80064aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ac:	6a21      	ldr	r1, [r4, #32]
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b0      	blx	r6
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	d106      	bne.n	80064c6 <__sflush_r+0x66>
 80064b8:	6829      	ldr	r1, [r5, #0]
 80064ba:	291d      	cmp	r1, #29
 80064bc:	d82c      	bhi.n	8006518 <__sflush_r+0xb8>
 80064be:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <__sflush_r+0x108>)
 80064c0:	40ca      	lsrs	r2, r1
 80064c2:	07d6      	lsls	r6, r2, #31
 80064c4:	d528      	bpl.n	8006518 <__sflush_r+0xb8>
 80064c6:	2200      	movs	r2, #0
 80064c8:	6062      	str	r2, [r4, #4]
 80064ca:	04d9      	lsls	r1, r3, #19
 80064cc:	6922      	ldr	r2, [r4, #16]
 80064ce:	6022      	str	r2, [r4, #0]
 80064d0:	d504      	bpl.n	80064dc <__sflush_r+0x7c>
 80064d2:	1c42      	adds	r2, r0, #1
 80064d4:	d101      	bne.n	80064da <__sflush_r+0x7a>
 80064d6:	682b      	ldr	r3, [r5, #0]
 80064d8:	b903      	cbnz	r3, 80064dc <__sflush_r+0x7c>
 80064da:	6560      	str	r0, [r4, #84]	; 0x54
 80064dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064de:	602f      	str	r7, [r5, #0]
 80064e0:	2900      	cmp	r1, #0
 80064e2:	d0ca      	beq.n	800647a <__sflush_r+0x1a>
 80064e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064e8:	4299      	cmp	r1, r3
 80064ea:	d002      	beq.n	80064f2 <__sflush_r+0x92>
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 f8c5 	bl	800667c <_free_r>
 80064f2:	2000      	movs	r0, #0
 80064f4:	6360      	str	r0, [r4, #52]	; 0x34
 80064f6:	e7c1      	b.n	800647c <__sflush_r+0x1c>
 80064f8:	6a21      	ldr	r1, [r4, #32]
 80064fa:	2301      	movs	r3, #1
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b0      	blx	r6
 8006500:	1c41      	adds	r1, r0, #1
 8006502:	d1c7      	bne.n	8006494 <__sflush_r+0x34>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0c4      	beq.n	8006494 <__sflush_r+0x34>
 800650a:	2b1d      	cmp	r3, #29
 800650c:	d001      	beq.n	8006512 <__sflush_r+0xb2>
 800650e:	2b16      	cmp	r3, #22
 8006510:	d101      	bne.n	8006516 <__sflush_r+0xb6>
 8006512:	602f      	str	r7, [r5, #0]
 8006514:	e7b1      	b.n	800647a <__sflush_r+0x1a>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	e7ad      	b.n	800647c <__sflush_r+0x1c>
 8006520:	690f      	ldr	r7, [r1, #16]
 8006522:	2f00      	cmp	r7, #0
 8006524:	d0a9      	beq.n	800647a <__sflush_r+0x1a>
 8006526:	0793      	lsls	r3, r2, #30
 8006528:	680e      	ldr	r6, [r1, #0]
 800652a:	bf08      	it	eq
 800652c:	694b      	ldreq	r3, [r1, #20]
 800652e:	600f      	str	r7, [r1, #0]
 8006530:	bf18      	it	ne
 8006532:	2300      	movne	r3, #0
 8006534:	eba6 0807 	sub.w	r8, r6, r7
 8006538:	608b      	str	r3, [r1, #8]
 800653a:	f1b8 0f00 	cmp.w	r8, #0
 800653e:	dd9c      	ble.n	800647a <__sflush_r+0x1a>
 8006540:	6a21      	ldr	r1, [r4, #32]
 8006542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006544:	4643      	mov	r3, r8
 8006546:	463a      	mov	r2, r7
 8006548:	4628      	mov	r0, r5
 800654a:	47b0      	blx	r6
 800654c:	2800      	cmp	r0, #0
 800654e:	dc06      	bgt.n	800655e <__sflush_r+0xfe>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	e78e      	b.n	800647c <__sflush_r+0x1c>
 800655e:	4407      	add	r7, r0
 8006560:	eba8 0800 	sub.w	r8, r8, r0
 8006564:	e7e9      	b.n	800653a <__sflush_r+0xda>
 8006566:	bf00      	nop
 8006568:	20400001 	.word	0x20400001

0800656c <_fflush_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	690b      	ldr	r3, [r1, #16]
 8006570:	4605      	mov	r5, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b913      	cbnz	r3, 800657c <_fflush_r+0x10>
 8006576:	2500      	movs	r5, #0
 8006578:	4628      	mov	r0, r5
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	b118      	cbz	r0, 8006586 <_fflush_r+0x1a>
 800657e:	6983      	ldr	r3, [r0, #24]
 8006580:	b90b      	cbnz	r3, 8006586 <_fflush_r+0x1a>
 8006582:	f7ff fc57 	bl	8005e34 <__sinit>
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <_fflush_r+0x6c>)
 8006588:	429c      	cmp	r4, r3
 800658a:	d11b      	bne.n	80065c4 <_fflush_r+0x58>
 800658c:	686c      	ldr	r4, [r5, #4]
 800658e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0ef      	beq.n	8006576 <_fflush_r+0xa>
 8006596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006598:	07d0      	lsls	r0, r2, #31
 800659a:	d404      	bmi.n	80065a6 <_fflush_r+0x3a>
 800659c:	0599      	lsls	r1, r3, #22
 800659e:	d402      	bmi.n	80065a6 <_fflush_r+0x3a>
 80065a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a2:	f7ff fd0a 	bl	8005fba <__retarget_lock_acquire_recursive>
 80065a6:	4628      	mov	r0, r5
 80065a8:	4621      	mov	r1, r4
 80065aa:	f7ff ff59 	bl	8006460 <__sflush_r>
 80065ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065b0:	07da      	lsls	r2, r3, #31
 80065b2:	4605      	mov	r5, r0
 80065b4:	d4e0      	bmi.n	8006578 <_fflush_r+0xc>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	059b      	lsls	r3, r3, #22
 80065ba:	d4dd      	bmi.n	8006578 <_fflush_r+0xc>
 80065bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065be:	f7ff fcfd 	bl	8005fbc <__retarget_lock_release_recursive>
 80065c2:	e7d9      	b.n	8006578 <_fflush_r+0xc>
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <_fflush_r+0x70>)
 80065c6:	429c      	cmp	r4, r3
 80065c8:	d101      	bne.n	80065ce <_fflush_r+0x62>
 80065ca:	68ac      	ldr	r4, [r5, #8]
 80065cc:	e7df      	b.n	800658e <_fflush_r+0x22>
 80065ce:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <_fflush_r+0x74>)
 80065d0:	429c      	cmp	r4, r3
 80065d2:	bf08      	it	eq
 80065d4:	68ec      	ldreq	r4, [r5, #12]
 80065d6:	e7da      	b.n	800658e <_fflush_r+0x22>
 80065d8:	08006820 	.word	0x08006820
 80065dc:	08006840 	.word	0x08006840
 80065e0:	08006800 	.word	0x08006800

080065e4 <_lseek_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d07      	ldr	r5, [pc, #28]	; (8006604 <_lseek_r+0x20>)
 80065e8:	4604      	mov	r4, r0
 80065ea:	4608      	mov	r0, r1
 80065ec:	4611      	mov	r1, r2
 80065ee:	2200      	movs	r2, #0
 80065f0:	602a      	str	r2, [r5, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f7fa fb73 	bl	8000cde <_lseek>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_lseek_r+0x1e>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_lseek_r+0x1e>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	200046e0 	.word	0x200046e0

08006608 <__swhatbuf_r>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	460e      	mov	r6, r1
 800660c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006610:	2900      	cmp	r1, #0
 8006612:	b096      	sub	sp, #88	; 0x58
 8006614:	4614      	mov	r4, r2
 8006616:	461d      	mov	r5, r3
 8006618:	da08      	bge.n	800662c <__swhatbuf_r+0x24>
 800661a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	602a      	str	r2, [r5, #0]
 8006622:	061a      	lsls	r2, r3, #24
 8006624:	d410      	bmi.n	8006648 <__swhatbuf_r+0x40>
 8006626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800662a:	e00e      	b.n	800664a <__swhatbuf_r+0x42>
 800662c:	466a      	mov	r2, sp
 800662e:	f000 f883 	bl	8006738 <_fstat_r>
 8006632:	2800      	cmp	r0, #0
 8006634:	dbf1      	blt.n	800661a <__swhatbuf_r+0x12>
 8006636:	9a01      	ldr	r2, [sp, #4]
 8006638:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800663c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006640:	425a      	negs	r2, r3
 8006642:	415a      	adcs	r2, r3
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	e7ee      	b.n	8006626 <__swhatbuf_r+0x1e>
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	2000      	movs	r0, #0
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	b016      	add	sp, #88	; 0x58
 8006650:	bd70      	pop	{r4, r5, r6, pc}
	...

08006654 <malloc>:
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <malloc+0xc>)
 8006656:	4601      	mov	r1, r0
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f7ff bce7 	b.w	800602c <_malloc_r>
 800665e:	bf00      	nop
 8006660:	20000014 	.word	0x20000014

08006664 <__malloc_lock>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__malloc_lock+0x8>)
 8006666:	f7ff bca8 	b.w	8005fba <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	200046d4 	.word	0x200046d4

08006670 <__malloc_unlock>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__malloc_unlock+0x8>)
 8006672:	f7ff bca3 	b.w	8005fbc <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	200046d4 	.word	0x200046d4

0800667c <_free_r>:
 800667c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800667e:	2900      	cmp	r1, #0
 8006680:	d044      	beq.n	800670c <_free_r+0x90>
 8006682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006686:	9001      	str	r0, [sp, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f1a1 0404 	sub.w	r4, r1, #4
 800668e:	bfb8      	it	lt
 8006690:	18e4      	addlt	r4, r4, r3
 8006692:	f7ff ffe7 	bl	8006664 <__malloc_lock>
 8006696:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <_free_r+0x94>)
 8006698:	9801      	ldr	r0, [sp, #4]
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	b933      	cbnz	r3, 80066ac <_free_r+0x30>
 800669e:	6063      	str	r3, [r4, #4]
 80066a0:	6014      	str	r4, [r2, #0]
 80066a2:	b003      	add	sp, #12
 80066a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066a8:	f7ff bfe2 	b.w	8006670 <__malloc_unlock>
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d908      	bls.n	80066c2 <_free_r+0x46>
 80066b0:	6825      	ldr	r5, [r4, #0]
 80066b2:	1961      	adds	r1, r4, r5
 80066b4:	428b      	cmp	r3, r1
 80066b6:	bf01      	itttt	eq
 80066b8:	6819      	ldreq	r1, [r3, #0]
 80066ba:	685b      	ldreq	r3, [r3, #4]
 80066bc:	1949      	addeq	r1, r1, r5
 80066be:	6021      	streq	r1, [r4, #0]
 80066c0:	e7ed      	b.n	800669e <_free_r+0x22>
 80066c2:	461a      	mov	r2, r3
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	b10b      	cbz	r3, 80066cc <_free_r+0x50>
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	d9fa      	bls.n	80066c2 <_free_r+0x46>
 80066cc:	6811      	ldr	r1, [r2, #0]
 80066ce:	1855      	adds	r5, r2, r1
 80066d0:	42a5      	cmp	r5, r4
 80066d2:	d10b      	bne.n	80066ec <_free_r+0x70>
 80066d4:	6824      	ldr	r4, [r4, #0]
 80066d6:	4421      	add	r1, r4
 80066d8:	1854      	adds	r4, r2, r1
 80066da:	42a3      	cmp	r3, r4
 80066dc:	6011      	str	r1, [r2, #0]
 80066de:	d1e0      	bne.n	80066a2 <_free_r+0x26>
 80066e0:	681c      	ldr	r4, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	6053      	str	r3, [r2, #4]
 80066e6:	4421      	add	r1, r4
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	e7da      	b.n	80066a2 <_free_r+0x26>
 80066ec:	d902      	bls.n	80066f4 <_free_r+0x78>
 80066ee:	230c      	movs	r3, #12
 80066f0:	6003      	str	r3, [r0, #0]
 80066f2:	e7d6      	b.n	80066a2 <_free_r+0x26>
 80066f4:	6825      	ldr	r5, [r4, #0]
 80066f6:	1961      	adds	r1, r4, r5
 80066f8:	428b      	cmp	r3, r1
 80066fa:	bf04      	itt	eq
 80066fc:	6819      	ldreq	r1, [r3, #0]
 80066fe:	685b      	ldreq	r3, [r3, #4]
 8006700:	6063      	str	r3, [r4, #4]
 8006702:	bf04      	itt	eq
 8006704:	1949      	addeq	r1, r1, r5
 8006706:	6021      	streq	r1, [r4, #0]
 8006708:	6054      	str	r4, [r2, #4]
 800670a:	e7ca      	b.n	80066a2 <_free_r+0x26>
 800670c:	b003      	add	sp, #12
 800670e:	bd30      	pop	{r4, r5, pc}
 8006710:	200046d8 	.word	0x200046d8

08006714 <_read_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d07      	ldr	r5, [pc, #28]	; (8006734 <_read_r+0x20>)
 8006718:	4604      	mov	r4, r0
 800671a:	4608      	mov	r0, r1
 800671c:	4611      	mov	r1, r2
 800671e:	2200      	movs	r2, #0
 8006720:	602a      	str	r2, [r5, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	f7fa faec 	bl	8000d00 <_read>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_read_r+0x1e>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_read_r+0x1e>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	200046e0 	.word	0x200046e0

08006738 <_fstat_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d07      	ldr	r5, [pc, #28]	; (8006758 <_fstat_r+0x20>)
 800673c:	2300      	movs	r3, #0
 800673e:	4604      	mov	r4, r0
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	f7fa fb03 	bl	8000d50 <_fstat>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	d102      	bne.n	8006754 <_fstat_r+0x1c>
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	b103      	cbz	r3, 8006754 <_fstat_r+0x1c>
 8006752:	6023      	str	r3, [r4, #0]
 8006754:	bd38      	pop	{r3, r4, r5, pc}
 8006756:	bf00      	nop
 8006758:	200046e0 	.word	0x200046e0

0800675c <_init>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr

08006768 <_fini>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr
