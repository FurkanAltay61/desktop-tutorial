
TimeBomb_HSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a44  08006a44  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a4c  08006a4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004670  20000078  08006acc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046e8  08006acc  000246e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d415  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc0  00000000  00000000  0003d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00041180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  000426e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad15  00000000  00000000  00043ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a729  00000000  00000000  0006e7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104915  00000000  00000000  00088f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018d81b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc0  00000000  00000000  0018d86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006934 	.word	0x08006934

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006934 	.word	0x08006934

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Hsm_ctor>:


static Event const entryEvt = { ENTRY_SIG};
static Event const exitEvt = { EXIT_SIG};

void Hsm_ctor(Hsm * const me,StateHandler initial){
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	me->State = initial;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <Hsm_init>:
void Hsm_init(Hsm * const me, Event const * const e){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]

	Q_ASSERT(me->State != (StateHandler)0);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <Hsm_init+0x1a>
 8000542:	2120      	movs	r1, #32
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <Hsm_init+0x38>)
 8000546:	f000 fb43 	bl	8000bd0 <Q_onAssert>
	(*me->State)(me,e);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6839      	ldr	r1, [r7, #0]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	4798      	blx	r3
	(*me->State)(me,&entryEvt);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4904      	ldr	r1, [pc, #16]	; (800056c <Hsm_init+0x3c>)
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	4798      	blx	r3

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	080069a8 	.word	0x080069a8
 800056c:	080069b0 	.word	0x080069b0

08000570 <Hsm_dispatch>:

void Hsm_dispatch(Hsm * const me, Event const * const e){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	State Stat;
	StateHandler prev_state = me->State;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	60bb      	str	r3, [r7, #8]

//	Q_ASSERT(me->State != (StateHandler)0 && (e->sig < MAX_SIG));
	Stat = (*me->State)(me,e);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6839      	ldr	r1, [r7, #0]
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	73fb      	strb	r3, [r7, #15]

	while(Stat == SUPER_STATUS){
 800058e:	e006      	b.n	800059e <Hsm_dispatch+0x2e>
		Stat = (*me->temp)(me,e);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	6839      	ldr	r1, [r7, #0]
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	4798      	blx	r3
 800059a:	4603      	mov	r3, r0
 800059c:	73fb      	strb	r3, [r7, #15]
	while(Stat == SUPER_STATUS){
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d0f5      	beq.n	8000590 <Hsm_dispatch+0x20>
	}

	if(Stat == TRAN_STATUS){
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d108      	bne.n	80005bc <Hsm_dispatch+0x4c>
		(*prev_state)(me,&exitEvt);
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	4905      	ldr	r1, [pc, #20]	; (80005c4 <Hsm_dispatch+0x54>)
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	4798      	blx	r3
		(*me->State)(me,&entryEvt);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4904      	ldr	r1, [pc, #16]	; (80005c8 <Hsm_dispatch+0x58>)
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	4798      	blx	r3
	}
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	080069b4 	.word	0x080069b4
 80005c8:	080069b0 	.word	0x080069b0

080005cc <Hsm_top>:

State Hsm_top(Hsm * const me, Event const * const e){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	return IGNORED_STATUS;
 80005d6:	2302      	movs	r3, #2
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <Active_ctor>:


/*..........................................................................*/
void Active_ctor(Active * const me, StateHandler initial) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	Hsm_ctor(&me->super,initial);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6839      	ldr	r1, [r7, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff8e 	bl	8000514 <Hsm_ctor>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Active_eventLoop>:

/*..........................................................................*/
/* Thread function for all Active Objects (uC/OS-II task signature) */
static void Active_eventLoop(void *pdata) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    Active *me = (Active *)pdata; /* the AO instance "me" */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60fb      	str	r3, [r7, #12]

    /*initialise the AO*/
    Hsm_init(&me->super,(Event *)0);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff8d 	bl	8000530 <Hsm_init>
    /* event loop ("message pump") */
    while (1) {
        Event *e; /* pointer to event object ("message") */

        /*new*/
        if(xQueueReceive(*me->queue,(void *)&e,(TickType_t)0) == pdPASS){
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f107 0108 	add.w	r1, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fccc 	bl	8003fc0 <xQueueReceive>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1f3      	bne.n	8000616 <Active_eventLoop+0x16>
			/* dispatch event to the active object 'me' */
        	Hsm_dispatch(&me->super, e);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	4611      	mov	r1, r2
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff9b 	bl	8000570 <Hsm_dispatch>
    while (1) {
 800063a:	e7ec      	b.n	8000616 <Active_eventLoop+0x16>

0800063c <Active_start>:
				  UBaseType_t uxPriority,
				  StackType_t * const puxStackBuffer,
				  StaticTask_t * const pxTaskBuffer,
				  Event **queueSto,
				  const UBaseType_t uxQueueLength)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b089      	sub	sp, #36	; 0x24
 8000640:	af04      	add	r7, sp, #16
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]

    /* precondition */
    Q_ASSERT(me /* AO instance must be provided (cannot be NULL) */
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d005      	beq.n	800065c <Active_start+0x20>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <Active_start+0x20>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0c      	cmp	r3, #12
 800065a:	d903      	bls.n	8000664 <Active_start+0x28>
 800065c:	2161      	movs	r1, #97	; 0x61
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <Active_start+0x80>)
 8000660:	f000 fab6 	bl	8000bd0 <Q_onAssert>
             && (0 < uxPriority) && (uxPriority < configLIBRARY_LOWEST_INTERRUPT_PRIORITY - 2U));

    *me->queue = xQueueCreate(uxQueueLength,sizeof((void**)queueSto));
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	68dc      	ldr	r4, [r3, #12]
 8000668:	2200      	movs	r2, #0
 800066a:	2104      	movs	r1, #4
 800066c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800066e:	f003 fba1 	bl	8003db4 <xQueueGenericCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	6023      	str	r3, [r4, #0]
    Q_ASSERT(*me->queue); /* queue must be created */
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d103      	bne.n	8000688 <Active_start+0x4c>
 8000680:	2165      	movs	r1, #101	; 0x65
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <Active_start+0x80>)
 8000684:	f000 faa4 	bl	8000bd0 <Q_onAssert>

    me->thread = configLIBRARY_LOWEST_INTERRUPT_PRIORITY - 2U - uxPriority; /* uC/OS-II priority */
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f1c3 030d 	rsb	r3, r3, #13
 8000690:	b2da      	uxtb	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	721a      	strb	r2, [r3, #8]

   xTaskCreateStatic(Active_eventLoop,"x", ulStackDepth,(void *)me, me->thread, puxStackBuffer, pxTaskBuffer);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	7a1b      	ldrb	r3, [r3, #8]
 800069a:	461a      	mov	r2, r3
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4905      	ldr	r1, [pc, #20]	; (80006c0 <Active_start+0x84>)
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <Active_start+0x88>)
 80006ae:	f003 fe65 	bl	800437c <xTaskCreateStatic>
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	080069a8 	.word	0x080069a8
 80006c0:	0800694c 	.word	0x0800694c
 80006c4:	08000601 	.word	0x08000601

080006c8 <Active_post>:

/*..........................................................................*/
void Active_post(Active * const me, Event const * const e) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	BaseType_t xQueueWoken = pdFALSE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
	xQueueSendFromISR(*me->queue, (void *)&e,&xQueueWoken);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f107 020c 	add.w	r2, r7, #12
 80006e0:	4639      	mov	r1, r7
 80006e2:	2300      	movs	r3, #0
 80006e4:	f003 fbcb 	bl	8003e7e <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xQueueWoken);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <Active_post+0x36>
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <Active_post+0x40>)
 80006f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	f3bf 8f6f 	isb	sy
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000ed04 	.word	0xe000ed04

0800070c <TimeEvent_ctor>:

static TimeEvent *l_tevt[10]; /* all TimeEvents in the application */
static uint_fast8_t l_tevtNum; /* current number of TimeEvents */

/*..........................................................................*/
void TimeEvent_ctor(TimeEvent * const me, Signal sig, Active *act) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	460b      	mov	r3, r1
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	817b      	strh	r3, [r7, #10]
#endif

    /* no critical section because it is presumed that all TimeEvents
    * are created *before* multitasking has started.
    */
    me->super.sig = sig;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	801a      	strh	r2, [r3, #0]
    me->act = act;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]
    me->timeout = 0U;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
    me->interval = 0U;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]

    /* register one more TimeEvent instance */
    taskENTER_CRITICAL();
 8000732:	f004 feab 	bl	800548c <vPortEnterCritical>
    Q_ASSERT(l_tevtNum < sizeof(l_tevt)/sizeof(l_tevt[0]));
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <TimeEvent_ctor+0x5c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b09      	cmp	r3, #9
 800073c:	d903      	bls.n	8000746 <TimeEvent_ctor+0x3a>
 800073e:	2189      	movs	r1, #137	; 0x89
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <TimeEvent_ctor+0x60>)
 8000742:	f000 fa45 	bl	8000bd0 <Q_onAssert>
    l_tevt[l_tevtNum] = me;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <TimeEvent_ctor+0x5c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4909      	ldr	r1, [pc, #36]	; (8000770 <TimeEvent_ctor+0x64>)
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ++l_tevtNum;
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <TimeEvent_ctor+0x5c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <TimeEvent_ctor+0x5c>)
 800075a:	6013      	str	r3, [r2, #0]
    taskEXIT_CRITICAL();
 800075c:	f004 feca 	bl	80054f4 <vPortExitCritical>
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000bc 	.word	0x200000bc
 800076c:	080069a8 	.word	0x080069a8
 8000770:	20000094 	.word	0x20000094

08000774 <TimeEvent_arm>:

/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t timeout, uint32_t interval) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
    taskENTER_CRITICAL();
 8000780:	f004 fe84 	bl	800548c <vPortEnterCritical>
    me->timeout = timeout;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	609a      	str	r2, [r3, #8]
    me->interval = interval;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	60da      	str	r2, [r3, #12]
    taskEXIT_CRITICAL();
 8000790:	f004 feb0 	bl	80054f4 <vPortExitCritical>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <TimeEvent_tick>:
    me->timeout = 0U;
    taskEXIT_CRITICAL();
}

/*..........................................................................*/
void TimeEvent_tick(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
    uint_fast8_t i;
    for (i = 0U; i < l_tevtNum; ++i) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e026      	b.n	80007f6 <TimeEvent_tick+0x5a>
        TimeEvent * const t = l_tevt[i];
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <TimeEvent_tick+0x70>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	603b      	str	r3, [r7, #0]
        Q_ASSERT(t); /* TimeEvent instance must be registered */
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <TimeEvent_tick+0x24>
 80007b8:	21a3      	movs	r1, #163	; 0xa3
 80007ba:	4815      	ldr	r0, [pc, #84]	; (8000810 <TimeEvent_tick+0x74>)
 80007bc:	f000 fa08 	bl	8000bd0 <Q_onAssert>
        if (t->timeout > 0U) { /* is this TimeEvent armed? */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <TimeEvent_tick+0x54>
            if (--t->timeout == 0U) { /* is it expiring now? */
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10a      	bne.n	80007f0 <TimeEvent_tick+0x54>
                Active_post(t->act, &t->super);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff70 	bl	80006c8 <Active_post>
                t->timeout = t->interval; /* rearm or disarm (one-shot) */
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	609a      	str	r2, [r3, #8]
    for (i = 0U; i < l_tevtNum; ++i) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <TimeEvent_tick+0x78>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d3d3      	bcc.n	80007a8 <TimeEvent_tick+0xc>
           }
        }
    }
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000094 	.word	0x20000094
 8000810:	080069a8 	.word	0x080069a8
 8000814:	200000bc 	.word	0x200000bc

08000818 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <vApplicationGetIdleTaskMemory+0x2c>)
 8000854:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <vApplicationGetIdleTaskMemory+0x30>)
 800085a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	200000c0 	.word	0x200000c0
 8000874:	20000180 	.word	0x20000180

08000878 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800087c:	f3bf 8f4f 	dsb	sy
}
 8000880:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <__NVIC_SystemReset+0x24>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800088a:	4904      	ldr	r1, [pc, #16]	; (800089c <__NVIC_SystemReset+0x24>)
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_SystemReset+0x28>)
 800088e:	4313      	orrs	r3, r2
 8000890:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000892:	f3bf 8f4f 	dsb	sy
}
 8000896:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <__NVIC_SystemReset+0x20>
 800089c:	e000ed00 	.word	0xe000ed00
 80008a0:	05fa0004 	.word	0x05fa0004

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f000 fbfa 	bl	80010a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f83b 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 f8d7 	bl	8000a64 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80008b6:	f000 f8a5 	bl	8000a04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <main+0x64>)
 80008bc:	f000 f9ca 	bl	8000c54 <RetargetInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <main+0x68>)
 80008c2:	1d3c      	adds	r4, r7, #4
 80008c4:	461d      	mov	r5, r3
 80008c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 f8ee 	bl	8003ab8 <osThreadCreate>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <main+0x6c>)
 80008e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  TimeBomb_ctor(&timebomb);
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <main+0x70>)
 80008e4:	f005 f96a 	bl	8005bbc <TimeBomb_ctor>
  Active_start(AO_TimeBomb,
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <main+0x74>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	230a      	movs	r3, #10
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <main+0x78>)
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <main+0x7c>)
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <main+0x80>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	f7ff fe9d 	bl	800063c <Active_start>
			  TimeBomb_queue,
			  sizeof(TimeBomb_queue)/sizeof(TimeBomb_queue[0]));
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000902:	f003 f8d2 	bl	8003aaa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000906:	e7fe      	b.n	8000906 <main+0x62>
 8000908:	2000089c 	.word	0x2000089c
 800090c:	0800695c 	.word	0x0800695c
 8000910:	20000920 	.word	0x20000920
 8000914:	20000878 	.word	0x20000878
 8000918:	20000000 	.word	0x20000000
 800091c:	20000850 	.word	0x20000850
 8000920:	20000790 	.word	0x20000790
 8000924:	20000380 	.word	0x20000380

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f005 fc3b 	bl	80061b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800094c:	f000 feba 	bl	80016c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <SystemClock_Config+0xd4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a29      	ldr	r2, [pc, #164]	; (80009fc <SystemClock_Config+0xd4>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <SystemClock_Config+0xd4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <SystemClock_Config+0xd8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <SystemClock_Config+0xd8>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <SystemClock_Config+0xd8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000984:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000998:	23d8      	movs	r3, #216	; 0xd8
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009a0:	2309      	movs	r3, #9
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 feeb 	bl	8001784 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009b4:	f000 f948 	bl	8000c48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009b8:	f000 fe94 	bl	80016e4 <HAL_PWREx_EnableOverDrive>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009c2:	f000 f941 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2302      	movs	r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2107      	movs	r1, #7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 f971 	bl	8001ccc <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009f0:	f000 f92a 	bl	8000c48 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	; 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MX_USART3_UART_Init+0x5c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a48:	f002 fa68 	bl	8002f1c <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 f8f9 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000089c 	.word	0x2000089c
 8000a60:	40004800 	.word	0x40004800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a4a      	ldr	r2, [pc, #296]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a38      	ldr	r2, [pc, #224]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a32      	ldr	r2, [pc, #200]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <MX_GPIO_Init+0x15c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b10:	482c      	ldr	r0, [pc, #176]	; (8000bc4 <MX_GPIO_Init+0x160>)
 8000b12:	f000 fd99 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	482b      	ldr	r0, [pc, #172]	; (8000bc8 <MX_GPIO_Init+0x164>)
 8000b1c:	f000 fd94 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b26:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4825      	ldr	r0, [pc, #148]	; (8000bcc <MX_GPIO_Init+0x168>)
 8000b38:	f000 fbc2 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <MX_GPIO_Init+0x160>)
 8000b56:	f000 fbb3 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <MX_GPIO_Init+0x164>)
 8000b72:	f000 fba5 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0x164>)
 8000b8a:	f000 fb99 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 8000b8e:	2330      	movs	r3, #48	; 0x30
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b96:	2302      	movs	r3, #2
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_GPIO_Init+0x160>)
 8000ba2:	f000 fb8d 	bl	80012c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2105      	movs	r1, #5
 8000baa:	2028      	movs	r0, #40	; 0x28
 8000bac:	f000 fb5e 	bl	800126c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb0:	2028      	movs	r0, #40	; 0x28
 8000bb2:	f000 fb77 	bl	80012a4 <HAL_NVIC_EnableIRQ>

}
 8000bb6:	bf00      	nop
 8000bb8:	3730      	adds	r7, #48	; 0x30
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <Q_onAssert>:

/* USER CODE BEGIN 4 */

void Q_onAssert(char const *module, int loc) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 8000bda:	f7ff fe4d 	bl	8000878 <__NVIC_SystemReset>

08000bde <vApplicationStackOverflowHook>:
}


void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName ){
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	__NOP();
 8000be8:	bf00      	nop
	Error_Handler();
 8000bea:	f000 f82d 	bl	8000c48 <Error_Handler>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <vApplicationTickHook>:


void vApplicationTickHook( void ){
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
	App_TimeTickHook();
 8000bfa:	f005 f92d 	bl	8005e58 <App_TimeTickHook>
	__NOP();
 8000bfe:	bf00      	nop
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook( void ){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	__NOP();
 8000c08:	bf00      	nop
	Error_Handler();
 8000c0a:	f000 f81d 	bl	8000c48 <Error_Handler>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f002 ff98 	bl	8003b50 <osDelay>
 8000c20:	e7fb      	b.n	8000c1a <StartDefaultTask+0x8>
	...

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c36:	f000 fa41 	bl	80010bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010000 	.word	0x40010000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <RetargetInit+0x28>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <RetargetInit+0x2c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6898      	ldr	r0, [r3, #8]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f005 fbb7 	bl	80063e0 <setvbuf>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000924 	.word	0x20000924
 8000c80:	20000014 	.word	0x20000014

08000c84 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d002      	beq.n	8000c9c <_write+0x18>
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d111      	bne.n	8000cc0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <_write+0x54>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	f002 f985 	bl	8002fb8 <HAL_UART_Transmit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <_write+0x38>
      return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	e008      	b.n	8000cce <_write+0x4a>
    else
      return EIO;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	e006      	b.n	8000cce <_write+0x4a>
  }
  errno = EBADF;
 8000cc0:	f005 f946 	bl	8005f50 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2209      	movs	r2, #9
 8000cc8:	601a      	str	r2, [r3, #0]
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000924 	.word	0x20000924

08000cdc <_close>:

int _close(int fd) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db04      	blt.n	8000cf4 <_close+0x18>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	dc01      	bgt.n	8000cf4 <_close+0x18>
    return 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e006      	b.n	8000d02 <_close+0x26>

  errno = EBADF;
 8000cf4:	f005 f92c 	bl	8005f50 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2209      	movs	r2, #9
 8000cfc:	601a      	str	r2, [r3, #0]
  return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000d16:	f005 f91b 	bl	8005f50 <__errno>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2209      	movs	r2, #9
 8000d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_read>:

int _read(int fd, char* ptr, int len) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d110      	bne.n	8000d60 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <_read+0x4c>)
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	2201      	movs	r2, #1
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	f002 f9c8 	bl	80030de <HAL_UART_Receive>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <_read+0x30>
      return 1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e008      	b.n	8000d6e <_read+0x42>
    else
      return EIO;
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	e006      	b.n	8000d6e <_read+0x42>
  }
  errno = EBADF;
 8000d60:	f005 f8f6 	bl	8005f50 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2209      	movs	r2, #9
 8000d68:	601a      	str	r2, [r3, #0]
  return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000924 	.word	0x20000924

08000d7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db08      	blt.n	8000d9e <_fstat+0x22>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	dc05      	bgt.n	8000d9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d98:	605a      	str	r2, [r3, #4]
    return 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e005      	b.n	8000daa <_fstat+0x2e>
  }

  errno = EBADF;
 8000d9e:	f005 f8d7 	bl	8005f50 <__errno>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2209      	movs	r2, #9
 8000da6:	601a      	str	r2, [r3, #0]
  return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210f      	movs	r1, #15
 8000dee:	f06f 0001 	mvn.w	r0, #1
 8000df2:	f000 fa3b 	bl	800126c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0aa      	sub	sp, #168	; 0xa8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2284      	movs	r2, #132	; 0x84
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 f9c4 	bl	80061b2 <memset>
  if(huart->Instance==USART3)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_UART_MspInit+0xb4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d13c      	bne.n	8000eae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 f99a 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e4e:	f7ff fefb 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_UART_MspInit+0xb8>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_UART_MspInit+0xb8>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0xb8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_UART_MspInit+0xb8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_UART_MspInit+0xb8>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_UART_MspInit+0xb8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_UART_MspInit+0xbc>)
 8000eaa:	f000 fa09 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	37a8      	adds	r7, #168	; 0xa8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	2019      	movs	r0, #25
 8000eda:	f000 f9c7 	bl	800126c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ede:	2019      	movs	r0, #25
 8000ee0:	f000 f9e0 	bl	80012a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_InitTick+0x9c>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee8:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_InitTick+0x9c>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_InitTick+0x9c>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000efc:	f107 0210 	add.w	r2, r7, #16
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 f906 	bl	8002118 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f0c:	f001 f8f0 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8000f10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_InitTick+0xa0>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	0c9b      	lsrs	r3, r3, #18
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <HAL_InitTick+0xa8>)
 8000f24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f42:	f001 fd0b 	bl	800295c <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d104      	bne.n	8000f56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <HAL_InitTick+0xa4>)
 8000f4e:	f001 fd67 	bl	8002a20 <HAL_TIM_Base_Start_IT>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	431bde83 	.word	0x431bde83
 8000f68:	20000928 	.word	0x20000928
 8000f6c:	40010000 	.word	0x40010000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fa2:	f001 fdb5 	bl	8002b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000928 	.word	0x20000928

08000fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fb8:	f000 fb60 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f004 ffae 	bl	8005f50 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20050000 	.word	0x20050000
 8001020:	00000400 	.word	0x00000400
 8001024:	20000974 	.word	0x20000974
 8001028:	200046e8 	.word	0x200046e8

0800102c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopFillZerobss+0x26>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107a:	f7ff ffd7 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f005 f863 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fc0f 	bl	80008a4 <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001094:	08006a54 	.word	0x08006a54
  ldr r2, =_sbss
 8001098:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800109c:	200046e8 	.word	0x200046e8

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>

080010a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f000 f8d5 	bl	8001256 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ac:	200f      	movs	r0, #15
 80010ae:	f7ff ff09 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b2:	f7ff fe7f 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	20000978 	.word	0x20000978

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000978 	.word	0x20000978

080010fc <__NVIC_SetPriorityGrouping>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <__NVIC_SetPriorityGrouping+0x40>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	4313      	orrs	r3, r2
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x40>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	05fa0000 	.word	0x05fa0000

08001144 <__NVIC_GetPriorityGrouping>:
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <__NVIC_EnableIRQ+0x38>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff4c 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127e:	f7ff ff61 	bl	8001144 <__NVIC_GetPriorityGrouping>
 8001282:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	6978      	ldr	r0, [r7, #20]
 800128a:	f7ff ffb1 	bl	80011f0 <NVIC_EncodePriority>
 800128e:	4602      	mov	r2, r0
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff80 	bl	800119c <__NVIC_SetPriority>
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff54 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e175      	b.n	80015cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8164 	bne.w	80015c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_GPIO_Init+0x56>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80be 	beq.w	80015c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_GPIO_Init+0x324>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_GPIO_Init+0x324>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_GPIO_Init+0x324>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001462:	4a61      	ldr	r2, [pc, #388]	; (80015e8 <HAL_GPIO_Init+0x328>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_GPIO_Init+0x32c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d037      	beq.n	80014fe <HAL_GPIO_Init+0x23e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_GPIO_Init+0x330>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d031      	beq.n	80014fa <HAL_GPIO_Init+0x23a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a56      	ldr	r2, [pc, #344]	; (80015f4 <HAL_GPIO_Init+0x334>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d02b      	beq.n	80014f6 <HAL_GPIO_Init+0x236>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a55      	ldr	r2, [pc, #340]	; (80015f8 <HAL_GPIO_Init+0x338>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d025      	beq.n	80014f2 <HAL_GPIO_Init+0x232>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_GPIO_Init+0x33c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_GPIO_Init+0x22e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a53      	ldr	r2, [pc, #332]	; (8001600 <HAL_GPIO_Init+0x340>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x22a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_GPIO_Init+0x344>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x226>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a51      	ldr	r2, [pc, #324]	; (8001608 <HAL_GPIO_Init+0x348>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x222>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a50      	ldr	r2, [pc, #320]	; (800160c <HAL_GPIO_Init+0x34c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x21e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4f      	ldr	r2, [pc, #316]	; (8001610 <HAL_GPIO_Init+0x350>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x21a>
 80014d6:	2309      	movs	r3, #9
 80014d8:	e012      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014da:	230a      	movs	r3, #10
 80014dc:	e010      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014de:	2308      	movs	r3, #8
 80014e0:	e00e      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00c      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014e6:	2306      	movs	r3, #6
 80014e8:	e00a      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014ea:	2305      	movs	r3, #5
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x240>
 80014fe:	2300      	movs	r3, #0
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001510:	4935      	ldr	r1, [pc, #212]	; (80015e8 <HAL_GPIO_Init+0x328>)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_GPIO_Init+0x354>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800156c:	4a29      	ldr	r2, [pc, #164]	; (8001614 <HAL_GPIO_Init+0x354>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_GPIO_Init+0x354>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_GPIO_Init+0x354>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_GPIO_Init+0x354>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	f67f ae86 	bls.w	80012e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40013800 	.word	0x40013800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	40021000 	.word	0x40021000
 8001600:	40021400 	.word	0x40021400
 8001604:	40021800 	.word	0x40021800
 8001608:	40021c00 	.word	0x40021c00
 800160c:	40022000 	.word	0x40022000
 8001610:	40022400 	.word	0x40022400
 8001614:	40013c00 	.word	0x40013c00

08001618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e001      	b.n	800163a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001664:	e003      	b.n	800166e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	041a      	lsls	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	619a      	str	r2, [r3, #24]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f806 	bl	80016ac <HAL_GPIO_EXTI_Callback>
  }
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001712:	f7ff fce7 	bl	80010e4 <HAL_GetTick>
 8001716:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001718:	e009      	b.n	800172e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800171a:	f7ff fce3 	bl	80010e4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001728:	d901      	bls.n	800172e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e022      	b.n	8001774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d1ee      	bne.n	800171a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001748:	f7ff fccc 	bl	80010e4 <HAL_GetTick>
 800174c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800174e:	e009      	b.n	8001764 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001750:	f7ff fcc8 	bl	80010e4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175e:	d901      	bls.n	8001764 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e007      	b.n	8001774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001770:	d1ee      	bne.n	8001750 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e291      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d00c      	beq.n	80017ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b4:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
 80017c0:	4b90      	ldr	r3, [pc, #576]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017cc:	d10b      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	4b8d      	ldr	r3, [pc, #564]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x130>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d168      	bne.n	80018b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e26b      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x7a>
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a83      	ldr	r2, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e02e      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x9c>
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xc0>
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a72      	ldr	r2, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6b      	ldr	r2, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fc3e 	bl	80010e4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fc3a 	bl	80010e4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e21f      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xe8>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fc2a 	bl	80010e4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc26 	bl	80010e4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e20b      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x110>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d069      	beq.n	8001996 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x190>
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x17a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1df      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	493d      	ldr	r1, [pc, #244]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e040      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fbdc 	bl	80010e4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fbd8 	bl	80010e4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1bd      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4929      	ldr	r1, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fbb8 	bl	80010e4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff fbb4 	bl	80010e4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e199      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d038      	beq.n	8001a14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb95 	bl	80010e4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fb91 	bl	80010e4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e176      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x23a>
 80019dc:	e01a      	b.n	8001a14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb7b 	bl	80010e4 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff fb77 	bl	80010e4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d903      	bls.n	8001a08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e15c      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
 8001a04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	4b91      	ldr	r3, [pc, #580]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a4 	beq.w	8001b6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a87      	ldr	r2, [pc, #540]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4a:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb3f 	bl	80010e4 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fb3b 	bl	80010e4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e120      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x31a>
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9c:	e02d      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x33c>
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a69      	ldr	r2, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a66      	ldr	r2, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x35e>
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a60      	ldr	r2, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff faef 	bl	80010e4 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff faeb 	bl	80010e4 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0ce      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x386>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fad9 	bl	80010e4 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fad5 	bl	80010e4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0b8      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a4 	beq.w	8001cbc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d06b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d149      	bne.n	8001c1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff faa6 	bl	80010e4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff faa2 	bl	80010e4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e087      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	4313      	orrs	r3, r2
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001be2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001be6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fa76 	bl	80010e4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa72 	bl	80010e4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e057      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x478>
 8001c1a:	e04f      	b.n	8001cbc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fa5c 	bl	80010e4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fa58 	bl	80010e4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e03d      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4ac>
 8001c4e:	e035      	b.n	8001cbc <HAL_RCC_OscConfig+0x538>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x544>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d028      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d121      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0d0      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d910      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 020f 	bic.w	r2, r3, #15
 8001cfa:	4965      	ldr	r1, [pc, #404]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b8      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	494d      	ldr	r1, [pc, #308]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d040      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e073      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06b      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4936      	ldr	r1, [pc, #216]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f990 	bl	80010e4 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff f98c 	bl	80010e4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e053      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d210      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 020f 	bic.w	r2, r3, #15
 8001e06:	4922      	ldr	r1, [pc, #136]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e032      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4916      	ldr	r1, [pc, #88]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	490e      	ldr	r1, [pc, #56]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e5e:	f000 f821 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	490a      	ldr	r1, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x1cc>)
 8001e70:	5ccb      	ldrb	r3, [r1, r3]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1d0>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x1d4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f820 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00
 8001e94:	40023800 	.word	0x40023800
 8001e98:	080069b8 	.word	0x080069b8
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea8:	b094      	sub	sp, #80	; 0x50
 8001eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ebc:	4b79      	ldr	r3, [pc, #484]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	f200 80e1 	bhi.w	8002090 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x3a>
 8001ed6:	e0db      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001edc:	e0db      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ede:	4b73      	ldr	r3, [pc, #460]	; (80020ac <HAL_RCC_GetSysClockFreq+0x208>)
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ee2:	e0d8      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001eee:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d063      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	2200      	movs	r2, #0
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
 8001f12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f16:	4622      	mov	r2, r4
 8001f18:	462b      	mov	r3, r5
 8001f1a:	f04f 0000 	mov.w	r0, #0
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	0159      	lsls	r1, r3, #5
 8001f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f28:	0150      	lsls	r0, r2, #5
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4621      	mov	r1, r4
 8001f30:	1a51      	subs	r1, r2, r1
 8001f32:	6139      	str	r1, [r7, #16]
 8001f34:	4629      	mov	r1, r5
 8001f36:	eb63 0301 	sbc.w	r3, r3, r1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f48:	4659      	mov	r1, fp
 8001f4a:	018b      	lsls	r3, r1, #6
 8001f4c:	4651      	mov	r1, sl
 8001f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f52:	4651      	mov	r1, sl
 8001f54:	018a      	lsls	r2, r1, #6
 8001f56:	4651      	mov	r1, sl
 8001f58:	ebb2 0801 	subs.w	r8, r2, r1
 8001f5c:	4659      	mov	r1, fp
 8001f5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f76:	4690      	mov	r8, r2
 8001f78:	4699      	mov	r9, r3
 8001f7a:	4623      	mov	r3, r4
 8001f7c:	eb18 0303 	adds.w	r3, r8, r3
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	462b      	mov	r3, r5
 8001f84:	eb49 0303 	adc.w	r3, r9, r3
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f96:	4629      	mov	r1, r5
 8001f98:	024b      	lsls	r3, r1, #9
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	024a      	lsls	r2, r1, #9
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001faa:	2200      	movs	r2, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fb4:	f7fe f92c 	bl	8000210 <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fc0:	e058      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	4611      	mov	r1, r2
 8001fce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fd2:	623b      	str	r3, [r7, #32]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fdc:	4642      	mov	r2, r8
 8001fde:	464b      	mov	r3, r9
 8001fe0:	f04f 0000 	mov.w	r0, #0
 8001fe4:	f04f 0100 	mov.w	r1, #0
 8001fe8:	0159      	lsls	r1, r3, #5
 8001fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fee:	0150      	lsls	r0, r2, #5
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4641      	mov	r1, r8
 8001ff6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800200c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002010:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002014:	ebb2 040a 	subs.w	r4, r2, sl
 8002018:	eb63 050b 	sbc.w	r5, r3, fp
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	00eb      	lsls	r3, r5, #3
 8002026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800202a:	00e2      	lsls	r2, r4, #3
 800202c:	4614      	mov	r4, r2
 800202e:	461d      	mov	r5, r3
 8002030:	4643      	mov	r3, r8
 8002032:	18e3      	adds	r3, r4, r3
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	464b      	mov	r3, r9
 8002038:	eb45 0303 	adc.w	r3, r5, r3
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800204a:	4629      	mov	r1, r5
 800204c:	028b      	lsls	r3, r1, #10
 800204e:	4621      	mov	r1, r4
 8002050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002054:	4621      	mov	r1, r4
 8002056:	028a      	lsls	r2, r1, #10
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205e:	2200      	movs	r2, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	61fa      	str	r2, [r7, #28]
 8002064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002068:	f7fe f8d2 	bl	8000210 <__aeabi_uldivmod>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4613      	mov	r3, r2
 8002072:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208e:	e002      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002098:	4618      	mov	r0, r3
 800209a:	3750      	adds	r7, #80	; 0x50
 800209c:	46bd      	mov	sp, r7
 800209e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	007a1200 	.word	0x007a1200

080020b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020cc:	f7ff fff0 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0a9b      	lsrs	r3, r3, #10
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	080069c8 	.word	0x080069c8

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f4:	f7ff ffdc 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0b5b      	lsrs	r3, r3, #13
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	080069c8 	.word	0x080069c8

08002118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	220f      	movs	r2, #15
 8002126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_GetClockConfig+0x5c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_RCC_GetClockConfig+0x60>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 020f 	and.w	r2, r3, #15
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	601a      	str	r2, [r3, #0]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d012      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021a4:	4b69      	ldr	r3, [pc, #420]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a68      	ldr	r2, [pc, #416]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	4964      	ldr	r1, [pc, #400]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d017      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	4959      	ldr	r1, [pc, #356]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d017      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002218:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	494a      	ldr	r1, [pc, #296]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002230:	d101      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 808b 	beq.w	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	6413      	str	r3, [r2, #64]	; 0x40
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a34      	ldr	r2, [pc, #208]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7fe ff2e 	bl	80010e4 <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7fe ff2a 	bl	80010e4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e357      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d035      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d02e      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d114      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fef2 	bl	80010e4 <HAL_GetTick>
 8002300:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe feee 	bl	80010e4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e319      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ee      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002332:	d111      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002342:	400b      	ands	r3, r1
 8002344:	4901      	ldr	r1, [pc, #4]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
 800234a:	e00b      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	0ffffcff 	.word	0x0ffffcff
 8002358:	4baa      	ldr	r3, [pc, #680]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4aa9      	ldr	r2, [pc, #676]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002362:	6093      	str	r3, [r2, #8]
 8002364:	4ba7      	ldr	r3, [pc, #668]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	49a4      	ldr	r1, [pc, #656]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002372:	4313      	orrs	r3, r2
 8002374:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002382:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002388:	4a9e      	ldr	r2, [pc, #632]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002392:	4b9c      	ldr	r3, [pc, #624]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002394:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	4999      	ldr	r1, [pc, #612]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b0:	4b94      	ldr	r3, [pc, #592]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023be:	4991      	ldr	r1, [pc, #580]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d2:	4b8c      	ldr	r3, [pc, #560]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e0:	4988      	ldr	r1, [pc, #544]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f4:	4b83      	ldr	r3, [pc, #524]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	4980      	ldr	r1, [pc, #512]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002416:	4b7b      	ldr	r3, [pc, #492]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4977      	ldr	r1, [pc, #476]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002438:	4b72      	ldr	r3, [pc, #456]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	496f      	ldr	r1, [pc, #444]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f023 020c 	bic.w	r2, r3, #12
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	4966      	ldr	r1, [pc, #408]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	495e      	ldr	r1, [pc, #376]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800249e:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ac:	4955      	ldr	r1, [pc, #340]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024e2:	4b48      	ldr	r3, [pc, #288]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	4944      	ldr	r1, [pc, #272]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002504:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	493c      	ldr	r1, [pc, #240]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002534:	4933      	ldr	r1, [pc, #204]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002556:	492b      	ldr	r1, [pc, #172]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d011      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002578:	4922      	ldr	r1, [pc, #136]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002588:	d101      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800259a:	2301      	movs	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	4912      	ldr	r1, [pc, #72]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d006      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80d9 	beq.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a01      	ldr	r2, [pc, #4]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002602:	e001      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002604:	40023800 	.word	0x40023800
 8002608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260a:	f7fe fd6b 	bl	80010e4 <HAL_GetTick>
 800260e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002612:	f7fe fd67 	bl	80010e4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	; 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e194      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002624:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11d      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002644:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002652:	4b61      	ldr	r3, [pc, #388]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002658:	0e1b      	lsrs	r3, r3, #24
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	019a      	lsls	r2, r3, #6
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	071b      	lsls	r3, r3, #28
 8002678:	4957      	ldr	r1, [pc, #348]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d02e      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026aa:	d129      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026ac:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b2:	0c1b      	lsrs	r3, r3, #16
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c0:	0f1b      	lsrs	r3, r3, #28
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	019a      	lsls	r2, r3, #6
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	071b      	lsls	r3, r3, #28
 80026e0:	493d      	ldr	r1, [pc, #244]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ee:	f023 021f 	bic.w	r2, r3, #31
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	3b01      	subs	r3, #1
 80026f8:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01d      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800270c:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002712:	0e1b      	lsrs	r3, r3, #24
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800271a:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800271c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002720:	0f1b      	lsrs	r3, r3, #28
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	019a      	lsls	r2, r3, #6
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	431a      	orrs	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	071b      	lsls	r3, r3, #28
 8002740:	4925      	ldr	r1, [pc, #148]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d011      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	019a      	lsls	r2, r3, #6
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	041b      	lsls	r3, r3, #16
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	071b      	lsls	r3, r3, #28
 8002770:	4919      	ldr	r1, [pc, #100]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800277e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002784:	f7fe fcae 	bl	80010e4 <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800278c:	f7fe fcaa 	bl	80010e4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0d7      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 80cd 	bne.w	800294c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027be:	f7fe fc91 	bl	80010e4 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027c6:	f7fe fc8d 	bl	80010e4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d903      	bls.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0ba      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80027d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027dc:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e8:	d0ed      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02e      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d12a      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002812:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002820:	4b4d      	ldr	r3, [pc, #308]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	0f1b      	lsrs	r3, r3, #28
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	019a      	lsls	r2, r3, #6
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	061b      	lsls	r3, r3, #24
 8002840:	431a      	orrs	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	071b      	lsls	r3, r3, #28
 8002846:	4944      	ldr	r1, [pc, #272]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800284e:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002854:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	493d      	ldr	r1, [pc, #244]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d022      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800287c:	d11d      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800287e:	4b36      	ldr	r3, [pc, #216]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	0e1b      	lsrs	r3, r3, #24
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800288c:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	0f1b      	lsrs	r3, r3, #28
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	019a      	lsls	r2, r3, #6
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	071b      	lsls	r3, r3, #28
 80028b2:	4929      	ldr	r1, [pc, #164]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d028      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	0e1b      	lsrs	r3, r3, #24
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028d4:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	019a      	lsls	r2, r3, #6
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	431a      	orrs	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	071b      	lsls	r3, r3, #28
 80028fa:	4917      	ldr	r1, [pc, #92]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4911      	ldr	r1, [pc, #68]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002924:	f7fe fbde 	bl	80010e4 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800292c:	f7fe fbda 	bl	80010e4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e007      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800294a:	d1ef      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e049      	b.n	8002a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f841 	bl	8002a0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f000 fa00 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d001      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e054      	b.n	8002ae2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d022      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x80>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d01d      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x80>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d018      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x80>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x80>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x80>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x80>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_TIM_Base_Start_IT+0xe4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x80>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_TIM_Base_Start_IT+0xe8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d115      	bne.n	8002acc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_TIM_Base_Start_IT+0xec>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d015      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0xbe>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d011      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aca:	e008      	b.n	8002ade <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e000      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40010400 	.word	0x40010400
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40001800 	.word	0x40001800
 8002b0c:	00010007 	.word	0x00010007

08002b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0202 	mvn.w	r2, #2
 8002b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f905 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8f7 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f908 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0204 	mvn.w	r2, #4
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8db 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8cd 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8de 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0208 	mvn.w	r2, #8
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8b1 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8a3 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8b4 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0210 	mvn.w	r2, #16
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f887 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f879 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f88a 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0201 	mvn.w	r2, #1
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd ffc8 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f91a 	bl	8002ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	d10e      	bne.n	8002cee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d107      	bne.n	8002cee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f90d 	bl	8002f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d10e      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d107      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f838 	bl	8002d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d10e      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0220 	mvn.w	r2, #32
 8002d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8cd 	bl	8002ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d00f      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3d      	ldr	r2, [pc, #244]	; (8002eb8 <TIM_Base_SetConfig+0x118>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3c      	ldr	r2, [pc, #240]	; (8002ebc <TIM_Base_SetConfig+0x11c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3b      	ldr	r2, [pc, #236]	; (8002ec0 <TIM_Base_SetConfig+0x120>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d108      	bne.n	8002df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02b      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d027      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <TIM_Base_SetConfig+0x118>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d023      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <TIM_Base_SetConfig+0x11c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01f      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <TIM_Base_SetConfig+0x120>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01b      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d017      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <TIM_Base_SetConfig+0x128>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <TIM_Base_SetConfig+0x12c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00f      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <TIM_Base_SetConfig+0x130>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <TIM_Base_SetConfig+0x134>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <TIM_Base_SetConfig+0x138>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a23      	ldr	r2, [pc, #140]	; (8002edc <TIM_Base_SetConfig+0x13c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0xf8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40010400 	.word	0x40010400
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40014400 	.word	0x40014400
 8002ed0:	40014800 	.word	0x40014800
 8002ed4:	40001800 	.word	0x40001800
 8002ed8:	40001c00 	.word	0x40001c00
 8002edc:	40002000 	.word	0x40002000

08002ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e040      	b.n	8002fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd ff60 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f990 	bl	8003280 <UART_SetConfig>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e022      	b.n	8002fb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fbe8 	bl	8003748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fc6f 	bl	800388c <UART_CheckIdleState>
 8002fae:	4603      	mov	r3, r0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	f040 8081 	bne.w	80030d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_UART_Transmit+0x26>
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e079      	b.n	80030d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_UART_Transmit+0x38>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e072      	b.n	80030d6 <HAL_UART_Transmit+0x11e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2221      	movs	r2, #33	; 0x21
 8003004:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003006:	f7fe f86d 	bl	80010e4 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d108      	bne.n	8003038 <HAL_UART_Transmit+0x80>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e003      	b.n	8003040 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003048:	e02c      	b.n	80030a4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fc4c 	bl	80038f2 <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e038      	b.n	80030d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3302      	adds	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e007      	b.n	8003092 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1cc      	bne.n	800304a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2140      	movs	r1, #64	; 0x40
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fc19 	bl	80038f2 <UART_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e005      	b.n	80030d6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b08a      	sub	sp, #40	; 0x28
 80030e2:	af02      	add	r7, sp, #8
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	f040 80be 	bne.w	8003274 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_UART_Receive+0x26>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0b6      	b.n	8003276 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_UART_Receive+0x38>
 8003112:	2302      	movs	r3, #2
 8003114:	e0af      	b.n	8003276 <HAL_UART_Receive+0x198>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2222      	movs	r2, #34	; 0x22
 800312a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003132:	f7fd ffd7 	bl	80010e4 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003150:	d10e      	bne.n	8003170 <HAL_UART_Receive+0x92>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <HAL_UART_Receive+0x88>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003164:	e02d      	b.n	80031c2 <HAL_UART_Receive+0xe4>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800316e:	e028      	b.n	80031c2 <HAL_UART_Receive+0xe4>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10d      	bne.n	8003194 <HAL_UART_Receive+0xb6>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_UART_Receive+0xac>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	22ff      	movs	r2, #255	; 0xff
 8003184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003188:	e01b      	b.n	80031c2 <HAL_UART_Receive+0xe4>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	227f      	movs	r2, #127	; 0x7f
 800318e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003192:	e016      	b.n	80031c2 <HAL_UART_Receive+0xe4>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319c:	d10d      	bne.n	80031ba <HAL_UART_Receive+0xdc>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_UART_Receive+0xd2>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	227f      	movs	r2, #127	; 0x7f
 80031aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ae:	e008      	b.n	80031c2 <HAL_UART_Receive+0xe4>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	223f      	movs	r2, #63	; 0x3f
 80031b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031b8:	e003      	b.n	80031c2 <HAL_UART_Receive+0xe4>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d108      	bne.n	80031e6 <HAL_UART_Receive+0x108>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e003      	b.n	80031ee <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031f6:	e032      	b.n	800325e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2200      	movs	r2, #0
 8003200:	2120      	movs	r1, #32
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fb75 	bl	80038f2 <UART_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e031      	b.n	8003276 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10c      	bne.n	8003232 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	b29a      	uxth	r2, r3
 8003220:	8a7b      	ldrh	r3, [r7, #18]
 8003222:	4013      	ands	r3, r2
 8003224:	b29a      	uxth	r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	3302      	adds	r3, #2
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	e00c      	b.n	800324c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8a7b      	ldrh	r3, [r7, #18]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4013      	ands	r3, r2
 8003240:	b2da      	uxtb	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1c6      	bne.n	80031f8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4ba6      	ldr	r3, [pc, #664]	; (8003544 <UART_SetConfig+0x2c4>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a94      	ldr	r2, [pc, #592]	; (8003548 <UART_SetConfig+0x2c8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d120      	bne.n	800333e <UART_SetConfig+0xbe>
 80032fc:	4b93      	ldr	r3, [pc, #588]	; (800354c <UART_SetConfig+0x2cc>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b03      	cmp	r3, #3
 8003308:	d816      	bhi.n	8003338 <UART_SetConfig+0xb8>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0x90>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003321 	.word	0x08003321
 8003314:	0800332d 	.word	0x0800332d
 8003318:	08003327 	.word	0x08003327
 800331c:	08003333 	.word	0x08003333
 8003320:	2301      	movs	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e150      	b.n	80035c8 <UART_SetConfig+0x348>
 8003326:	2302      	movs	r3, #2
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e14d      	b.n	80035c8 <UART_SetConfig+0x348>
 800332c:	2304      	movs	r3, #4
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e14a      	b.n	80035c8 <UART_SetConfig+0x348>
 8003332:	2308      	movs	r3, #8
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e147      	b.n	80035c8 <UART_SetConfig+0x348>
 8003338:	2310      	movs	r3, #16
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e144      	b.n	80035c8 <UART_SetConfig+0x348>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a83      	ldr	r2, [pc, #524]	; (8003550 <UART_SetConfig+0x2d0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d132      	bne.n	80033ae <UART_SetConfig+0x12e>
 8003348:	4b80      	ldr	r3, [pc, #512]	; (800354c <UART_SetConfig+0x2cc>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d828      	bhi.n	80033a8 <UART_SetConfig+0x128>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0xdc>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003391 	.word	0x08003391
 8003360:	080033a9 	.word	0x080033a9
 8003364:	080033a9 	.word	0x080033a9
 8003368:	080033a9 	.word	0x080033a9
 800336c:	0800339d 	.word	0x0800339d
 8003370:	080033a9 	.word	0x080033a9
 8003374:	080033a9 	.word	0x080033a9
 8003378:	080033a9 	.word	0x080033a9
 800337c:	08003397 	.word	0x08003397
 8003380:	080033a9 	.word	0x080033a9
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033a9 	.word	0x080033a9
 800338c:	080033a3 	.word	0x080033a3
 8003390:	2300      	movs	r3, #0
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e118      	b.n	80035c8 <UART_SetConfig+0x348>
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e115      	b.n	80035c8 <UART_SetConfig+0x348>
 800339c:	2304      	movs	r3, #4
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e112      	b.n	80035c8 <UART_SetConfig+0x348>
 80033a2:	2308      	movs	r3, #8
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e10f      	b.n	80035c8 <UART_SetConfig+0x348>
 80033a8:	2310      	movs	r3, #16
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e10c      	b.n	80035c8 <UART_SetConfig+0x348>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a68      	ldr	r2, [pc, #416]	; (8003554 <UART_SetConfig+0x2d4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d120      	bne.n	80033fa <UART_SetConfig+0x17a>
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <UART_SetConfig+0x2cc>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033c2:	2b30      	cmp	r3, #48	; 0x30
 80033c4:	d013      	beq.n	80033ee <UART_SetConfig+0x16e>
 80033c6:	2b30      	cmp	r3, #48	; 0x30
 80033c8:	d814      	bhi.n	80033f4 <UART_SetConfig+0x174>
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d009      	beq.n	80033e2 <UART_SetConfig+0x162>
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d810      	bhi.n	80033f4 <UART_SetConfig+0x174>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <UART_SetConfig+0x15c>
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d006      	beq.n	80033e8 <UART_SetConfig+0x168>
 80033da:	e00b      	b.n	80033f4 <UART_SetConfig+0x174>
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e0f2      	b.n	80035c8 <UART_SetConfig+0x348>
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e0ef      	b.n	80035c8 <UART_SetConfig+0x348>
 80033e8:	2304      	movs	r3, #4
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e0ec      	b.n	80035c8 <UART_SetConfig+0x348>
 80033ee:	2308      	movs	r3, #8
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e0e9      	b.n	80035c8 <UART_SetConfig+0x348>
 80033f4:	2310      	movs	r3, #16
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e0e6      	b.n	80035c8 <UART_SetConfig+0x348>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a56      	ldr	r2, [pc, #344]	; (8003558 <UART_SetConfig+0x2d8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d120      	bne.n	8003446 <UART_SetConfig+0x1c6>
 8003404:	4b51      	ldr	r3, [pc, #324]	; (800354c <UART_SetConfig+0x2cc>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800340e:	2bc0      	cmp	r3, #192	; 0xc0
 8003410:	d013      	beq.n	800343a <UART_SetConfig+0x1ba>
 8003412:	2bc0      	cmp	r3, #192	; 0xc0
 8003414:	d814      	bhi.n	8003440 <UART_SetConfig+0x1c0>
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d009      	beq.n	800342e <UART_SetConfig+0x1ae>
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d810      	bhi.n	8003440 <UART_SetConfig+0x1c0>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <UART_SetConfig+0x1a8>
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d006      	beq.n	8003434 <UART_SetConfig+0x1b4>
 8003426:	e00b      	b.n	8003440 <UART_SetConfig+0x1c0>
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e0cc      	b.n	80035c8 <UART_SetConfig+0x348>
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e0c9      	b.n	80035c8 <UART_SetConfig+0x348>
 8003434:	2304      	movs	r3, #4
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e0c6      	b.n	80035c8 <UART_SetConfig+0x348>
 800343a:	2308      	movs	r3, #8
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e0c3      	b.n	80035c8 <UART_SetConfig+0x348>
 8003440:	2310      	movs	r3, #16
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e0c0      	b.n	80035c8 <UART_SetConfig+0x348>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a44      	ldr	r2, [pc, #272]	; (800355c <UART_SetConfig+0x2dc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d125      	bne.n	800349c <UART_SetConfig+0x21c>
 8003450:	4b3e      	ldr	r3, [pc, #248]	; (800354c <UART_SetConfig+0x2cc>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800345e:	d017      	beq.n	8003490 <UART_SetConfig+0x210>
 8003460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003464:	d817      	bhi.n	8003496 <UART_SetConfig+0x216>
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	d00b      	beq.n	8003484 <UART_SetConfig+0x204>
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d811      	bhi.n	8003496 <UART_SetConfig+0x216>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <UART_SetConfig+0x1fe>
 8003476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347a:	d006      	beq.n	800348a <UART_SetConfig+0x20a>
 800347c:	e00b      	b.n	8003496 <UART_SetConfig+0x216>
 800347e:	2300      	movs	r3, #0
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e0a1      	b.n	80035c8 <UART_SetConfig+0x348>
 8003484:	2302      	movs	r3, #2
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e09e      	b.n	80035c8 <UART_SetConfig+0x348>
 800348a:	2304      	movs	r3, #4
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e09b      	b.n	80035c8 <UART_SetConfig+0x348>
 8003490:	2308      	movs	r3, #8
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e098      	b.n	80035c8 <UART_SetConfig+0x348>
 8003496:	2310      	movs	r3, #16
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e095      	b.n	80035c8 <UART_SetConfig+0x348>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <UART_SetConfig+0x2e0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d125      	bne.n	80034f2 <UART_SetConfig+0x272>
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <UART_SetConfig+0x2cc>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034b4:	d017      	beq.n	80034e6 <UART_SetConfig+0x266>
 80034b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ba:	d817      	bhi.n	80034ec <UART_SetConfig+0x26c>
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c0:	d00b      	beq.n	80034da <UART_SetConfig+0x25a>
 80034c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c6:	d811      	bhi.n	80034ec <UART_SetConfig+0x26c>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <UART_SetConfig+0x254>
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d006      	beq.n	80034e0 <UART_SetConfig+0x260>
 80034d2:	e00b      	b.n	80034ec <UART_SetConfig+0x26c>
 80034d4:	2301      	movs	r3, #1
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e076      	b.n	80035c8 <UART_SetConfig+0x348>
 80034da:	2302      	movs	r3, #2
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e073      	b.n	80035c8 <UART_SetConfig+0x348>
 80034e0:	2304      	movs	r3, #4
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e070      	b.n	80035c8 <UART_SetConfig+0x348>
 80034e6:	2308      	movs	r3, #8
 80034e8:	77fb      	strb	r3, [r7, #31]
 80034ea:	e06d      	b.n	80035c8 <UART_SetConfig+0x348>
 80034ec:	2310      	movs	r3, #16
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e06a      	b.n	80035c8 <UART_SetConfig+0x348>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <UART_SetConfig+0x2e4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d138      	bne.n	800356e <UART_SetConfig+0x2ee>
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <UART_SetConfig+0x2cc>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003506:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800350a:	d017      	beq.n	800353c <UART_SetConfig+0x2bc>
 800350c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003510:	d82a      	bhi.n	8003568 <UART_SetConfig+0x2e8>
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003516:	d00b      	beq.n	8003530 <UART_SetConfig+0x2b0>
 8003518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351c:	d824      	bhi.n	8003568 <UART_SetConfig+0x2e8>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <UART_SetConfig+0x2aa>
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	d006      	beq.n	8003536 <UART_SetConfig+0x2b6>
 8003528:	e01e      	b.n	8003568 <UART_SetConfig+0x2e8>
 800352a:	2300      	movs	r3, #0
 800352c:	77fb      	strb	r3, [r7, #31]
 800352e:	e04b      	b.n	80035c8 <UART_SetConfig+0x348>
 8003530:	2302      	movs	r3, #2
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e048      	b.n	80035c8 <UART_SetConfig+0x348>
 8003536:	2304      	movs	r3, #4
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e045      	b.n	80035c8 <UART_SetConfig+0x348>
 800353c:	2308      	movs	r3, #8
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e042      	b.n	80035c8 <UART_SetConfig+0x348>
 8003542:	bf00      	nop
 8003544:	efff69f3 	.word	0xefff69f3
 8003548:	40011000 	.word	0x40011000
 800354c:	40023800 	.word	0x40023800
 8003550:	40004400 	.word	0x40004400
 8003554:	40004800 	.word	0x40004800
 8003558:	40004c00 	.word	0x40004c00
 800355c:	40005000 	.word	0x40005000
 8003560:	40011400 	.word	0x40011400
 8003564:	40007800 	.word	0x40007800
 8003568:	2310      	movs	r3, #16
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e02c      	b.n	80035c8 <UART_SetConfig+0x348>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a72      	ldr	r2, [pc, #456]	; (800373c <UART_SetConfig+0x4bc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d125      	bne.n	80035c4 <UART_SetConfig+0x344>
 8003578:	4b71      	ldr	r3, [pc, #452]	; (8003740 <UART_SetConfig+0x4c0>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003582:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003586:	d017      	beq.n	80035b8 <UART_SetConfig+0x338>
 8003588:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800358c:	d817      	bhi.n	80035be <UART_SetConfig+0x33e>
 800358e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003592:	d00b      	beq.n	80035ac <UART_SetConfig+0x32c>
 8003594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003598:	d811      	bhi.n	80035be <UART_SetConfig+0x33e>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <UART_SetConfig+0x326>
 800359e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a2:	d006      	beq.n	80035b2 <UART_SetConfig+0x332>
 80035a4:	e00b      	b.n	80035be <UART_SetConfig+0x33e>
 80035a6:	2300      	movs	r3, #0
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e00d      	b.n	80035c8 <UART_SetConfig+0x348>
 80035ac:	2302      	movs	r3, #2
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e00a      	b.n	80035c8 <UART_SetConfig+0x348>
 80035b2:	2304      	movs	r3, #4
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e007      	b.n	80035c8 <UART_SetConfig+0x348>
 80035b8:	2308      	movs	r3, #8
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e004      	b.n	80035c8 <UART_SetConfig+0x348>
 80035be:	2310      	movs	r3, #16
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e001      	b.n	80035c8 <UART_SetConfig+0x348>
 80035c4:	2310      	movs	r3, #16
 80035c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d0:	d15b      	bne.n	800368a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d828      	bhi.n	800362a <UART_SetConfig+0x3aa>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <UART_SetConfig+0x360>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003605 	.word	0x08003605
 80035e4:	0800360d 	.word	0x0800360d
 80035e8:	08003615 	.word	0x08003615
 80035ec:	0800362b 	.word	0x0800362b
 80035f0:	0800361b 	.word	0x0800361b
 80035f4:	0800362b 	.word	0x0800362b
 80035f8:	0800362b 	.word	0x0800362b
 80035fc:	0800362b 	.word	0x0800362b
 8003600:	08003623 	.word	0x08003623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7fe fd60 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8003608:	61b8      	str	r0, [r7, #24]
        break;
 800360a:	e013      	b.n	8003634 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7fe fd70 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8003610:	61b8      	str	r0, [r7, #24]
        break;
 8003612:	e00f      	b.n	8003634 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003614:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <UART_SetConfig+0x4c4>)
 8003616:	61bb      	str	r3, [r7, #24]
        break;
 8003618:	e00c      	b.n	8003634 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7fe fc43 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 800361e:	61b8      	str	r0, [r7, #24]
        break;
 8003620:	e008      	b.n	8003634 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	61bb      	str	r3, [r7, #24]
        break;
 8003628:	e004      	b.n	8003634 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	77bb      	strb	r3, [r7, #30]
        break;
 8003632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d074      	beq.n	8003724 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	005a      	lsls	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b0f      	cmp	r3, #15
 8003654:	d916      	bls.n	8003684 <UART_SetConfig+0x404>
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d212      	bcs.n	8003684 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f023 030f 	bic.w	r3, r3, #15
 8003666:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	b29b      	uxth	r3, r3
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	b29a      	uxth	r2, r3
 8003674:	89fb      	ldrh	r3, [r7, #14]
 8003676:	4313      	orrs	r3, r2
 8003678:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	89fa      	ldrh	r2, [r7, #14]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e04f      	b.n	8003724 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77bb      	strb	r3, [r7, #30]
 8003688:	e04c      	b.n	8003724 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800368a:	7ffb      	ldrb	r3, [r7, #31]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d828      	bhi.n	80036e2 <UART_SetConfig+0x462>
 8003690:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0x418>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036e3 	.word	0x080036e3
 80036a8:	080036d3 	.word	0x080036d3
 80036ac:	080036e3 	.word	0x080036e3
 80036b0:	080036e3 	.word	0x080036e3
 80036b4:	080036e3 	.word	0x080036e3
 80036b8:	080036db 	.word	0x080036db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe fd04 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 80036c0:	61b8      	str	r0, [r7, #24]
        break;
 80036c2:	e013      	b.n	80036ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7fe fd14 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80036c8:	61b8      	str	r0, [r7, #24]
        break;
 80036ca:	e00f      	b.n	80036ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <UART_SetConfig+0x4c4>)
 80036ce:	61bb      	str	r3, [r7, #24]
        break;
 80036d0:	e00c      	b.n	80036ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d2:	f7fe fbe7 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 80036d6:	61b8      	str	r0, [r7, #24]
        break;
 80036d8:	e008      	b.n	80036ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036de:	61bb      	str	r3, [r7, #24]
        break;
 80036e0:	e004      	b.n	80036ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	77bb      	strb	r3, [r7, #30]
        break;
 80036ea:	bf00      	nop
    }

    if (pclk != 0U)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	085a      	lsrs	r2, r3, #1
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	441a      	add	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d909      	bls.n	8003720 <UART_SetConfig+0x4a0>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d205      	bcs.n	8003720 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	e001      	b.n	8003724 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003730:	7fbb      	ldrb	r3, [r7, #30]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40007c00 	.word	0x40007c00
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400

08003748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01a      	beq.n	800385e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003846:	d10a      	bne.n	800385e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af02      	add	r7, sp, #8
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800389c:	f7fd fc22 	bl	80010e4 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d10e      	bne.n	80038ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f817 	bl	80038f2 <UART_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e00d      	b.n	80038ea <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b09c      	sub	sp, #112	; 0x70
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003902:	e0a5      	b.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	f000 80a1 	beq.w	8003a50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fd fbe9 	bl	80010e4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <UART_WaitOnFlagUntilTimeout+0x32>
 800391e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003920:	2b00      	cmp	r3, #0
 8003922:	d13e      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003938:	667b      	str	r3, [r7, #100]	; 0x64
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e6      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	663b      	str	r3, [r7, #96]	; 0x60
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003976:	64ba      	str	r2, [r7, #72]	; 0x48
 8003978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800397c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e5      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e067      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d04f      	beq.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039be:	d147      	bne.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
 80039ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e6      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a1c:	623a      	str	r2, [r7, #32]
 8003a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	69f9      	ldr	r1, [r7, #28]
 8003a22:	6a3a      	ldr	r2, [r7, #32]
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e5      	bne.n	80039fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e010      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	f43f af4a 	beq.w	8003904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3770      	adds	r7, #112	; 0x70
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a8c:	2b84      	cmp	r3, #132	; 0x84
 8003a8e:	d005      	beq.n	8003a9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	3303      	adds	r3, #3
 8003a9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003aae:	f000 fe5d 	bl	800476c <vTaskStartScheduler>
  
  return osOK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af04      	add	r7, sp, #16
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d020      	beq.n	8003b0c <osThreadCreate+0x54>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01c      	beq.n	8003b0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685c      	ldr	r4, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681d      	ldr	r5, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691e      	ldr	r6, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ffc8 	bl	8003a7a <makeFreeRtosPriority>
 8003aea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af4:	9202      	str	r2, [sp, #8]
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	9100      	str	r1, [sp, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	4632      	mov	r2, r6
 8003afe:	4629      	mov	r1, r5
 8003b00:	4620      	mov	r0, r4
 8003b02:	f000 fc3b 	bl	800437c <xTaskCreateStatic>
 8003b06:	4603      	mov	r3, r0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e01c      	b.n	8003b46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685c      	ldr	r4, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b18:	b29e      	uxth	r6, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ffaa 	bl	8003a7a <makeFreeRtosPriority>
 8003b26:	4602      	mov	r2, r0
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	9200      	str	r2, [sp, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4632      	mov	r2, r6
 8003b34:	4629      	mov	r1, r5
 8003b36:	4620      	mov	r0, r4
 8003b38:	f000 fc83 	bl	8004442 <xTaskCreate>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d001      	beq.n	8003b46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b46:	68fb      	ldr	r3, [r7, #12]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <osDelay+0x16>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	e000      	b.n	8003b68 <osDelay+0x18>
 8003b66:	2301      	movs	r3, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fdc9 	bl	8004700 <vTaskDelay>
  
  return osOK;
 8003b6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f103 0208 	add.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f103 0208 	add.w	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f103 0208 	add.w	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d103      	bne.n	8003c3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e00c      	b.n	8003c54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e002      	b.n	8003c48 <vListInsert+0x2e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d2f6      	bcs.n	8003c42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	601a      	str	r2, [r3, #0]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6852      	ldr	r2, [r2, #4]
 8003cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d103      	bne.n	8003cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1e5a      	subs	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10c      	bne.n	8003d0e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	b672      	cpsid	i
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	b662      	cpsie	i
 8003d08:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003d0e:	f001 fbbd 	bl	800548c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	441a      	add	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	22ff      	movs	r2, #255	; 0xff
 8003d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	22ff      	movs	r2, #255	; 0xff
 8003d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d114      	bne.n	8003d8e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3310      	adds	r3, #16
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 ffa5 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <xQueueGenericReset+0xd0>)
 8003d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	e009      	b.n	8003da2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3310      	adds	r3, #16
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fef0 	bl	8003b78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3324      	adds	r3, #36	; 0x24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff feeb 	bl	8003b78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003da2:	f001 fba7 	bl	80054f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003da6:	2301      	movs	r3, #1
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10c      	bne.n	8003de2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	b672      	cpsid	i
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	b662      	cpsie	i
 8003ddc:	613b      	str	r3, [r7, #16]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e004      	b.n	8003df8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3350      	adds	r3, #80	; 0x50
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 fc71 	bl	80056e4 <pvPortMalloc>
 8003e02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d011      	beq.n	8003e2e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	3350      	adds	r3, #80	; 0x50
 8003e12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e1c:	79fa      	ldrb	r2, [r7, #7]
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f805 	bl	8003e38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d103      	bne.n	8003e54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e002      	b.n	8003e5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e66:	2101      	movs	r1, #1
 8003e68:	69b8      	ldr	r0, [r7, #24]
 8003e6a:	f7ff ff39 	bl	8003ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08e      	sub	sp, #56	; 0x38
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	b672      	cpsid	i
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	b662      	cpsie	i
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <xQueueGenericSendFromISR+0x40>
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <xQueueGenericSendFromISR+0x44>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <xQueueGenericSendFromISR+0x46>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10c      	bne.n	8003ee2 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	b672      	cpsid	i
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	b662      	cpsie	i
 8003edc:	623b      	str	r3, [r7, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d103      	bne.n	8003ef0 <xQueueGenericSendFromISR+0x72>
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <xQueueGenericSendFromISR+0x76>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <xQueueGenericSendFromISR+0x78>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	b672      	cpsid	i
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	b662      	cpsie	i
 8003f0e:	61fb      	str	r3, [r7, #28]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f14:	f001 fba2 	bl	800565c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f18:	f3ef 8211 	mrs	r2, BASEPRI
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	b672      	cpsid	i
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	b662      	cpsie	i
 8003f30:	61ba      	str	r2, [r7, #24]
 8003f32:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f34:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <xQueueGenericSendFromISR+0xcc>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d12c      	bne.n	8003fa4 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f5a:	f000 f917 	bl	800418c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f5e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d112      	bne.n	8003f8e <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d016      	beq.n	8003f9e <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	3324      	adds	r3, #36	; 0x24
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fea3 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00e      	beq.n	8003f9e <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e007      	b.n	8003f9e <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	b25a      	sxtb	r2, r3
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003fa2:	e001      	b.n	8003fa8 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003faa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3738      	adds	r7, #56	; 0x38
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08c      	sub	sp, #48	; 0x30
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <xQueueReceive+0x34>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	b672      	cpsid	i
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	b662      	cpsie	i
 8003fee:	623b      	str	r3, [r7, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <xQueueReceive+0x42>
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <xQueueReceive+0x46>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <xQueueReceive+0x48>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10c      	bne.n	8004026 <xQueueReceive+0x66>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	b672      	cpsid	i
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	b662      	cpsie	i
 8004020:	61fb      	str	r3, [r7, #28]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004026:	f001 f815 	bl	8005054 <xTaskGetSchedulerState>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <xQueueReceive+0x76>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <xQueueReceive+0x7a>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueReceive+0x7c>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10c      	bne.n	800405a <xQueueReceive+0x9a>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	b672      	cpsid	i
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	b662      	cpsie	i
 8004054:	61bb      	str	r3, [r7, #24]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800405a:	f001 fa17 	bl	800548c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01f      	beq.n	80040aa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406e:	f000 f8f7 	bl	8004260 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00f      	beq.n	80040a2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	3310      	adds	r3, #16
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fe1a 	bl	8004cc0 <xTaskRemoveFromEventList>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004092:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <xQueueReceive+0x1c8>)
 8004094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040a2:	f001 fa27 	bl	80054f4 <vPortExitCritical>
				return pdPASS;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e069      	b.n	800417e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040b0:	f001 fa20 	bl	80054f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e062      	b.n	800417e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040be:	f107 0310 	add.w	r3, r7, #16
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fe60 	bl	8004d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040cc:	f001 fa12 	bl	80054f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040d0:	f000 fbbc 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040d4:	f001 f9da 	bl	800548c <vPortEnterCritical>
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040de:	b25b      	sxtb	r3, r3
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d103      	bne.n	80040ee <xQueueReceive+0x12e>
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d103      	bne.n	8004104 <xQueueReceive+0x144>
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004104:	f001 f9f6 	bl	80054f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004108:	1d3a      	adds	r2, r7, #4
 800410a:	f107 0310 	add.w	r3, r7, #16
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fe4f 	bl	8004db4 <xTaskCheckForTimeOut>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d123      	bne.n	8004164 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800411c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411e:	f000 f917 	bl	8004350 <prvIsQueueEmpty>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	3324      	adds	r3, #36	; 0x24
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fd9f 	bl	8004c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004138:	f000 f8b8 	bl	80042ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800413c:	f000 fb94 	bl	8004868 <xTaskResumeAll>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d189      	bne.n	800405a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <xQueueReceive+0x1c8>)
 8004148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	e780      	b.n	800405a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415a:	f000 f8a7 	bl	80042ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800415e:	f000 fb83 	bl	8004868 <xTaskResumeAll>
 8004162:	e77a      	b.n	800405a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004166:	f000 f8a1 	bl	80042ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800416a:	f000 fb7d 	bl	8004868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800416e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004170:	f000 f8ee 	bl	8004350 <prvIsQueueEmpty>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	f43f af6f 	beq.w	800405a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800417c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800417e:	4618      	mov	r0, r3
 8004180:	3730      	adds	r7, #48	; 0x30
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d14d      	bne.n	800424e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 ff6a 	bl	8005090 <xTaskPriorityDisinherit>
 80041bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e043      	b.n	800424e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d119      	bne.n	8004200 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6858      	ldr	r0, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	461a      	mov	r2, r3
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	f001 ffdd 	bl	8006196 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d32b      	bcc.n	800424e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	e026      	b.n	800424e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68d8      	ldr	r0, [r3, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	461a      	mov	r2, r3
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	f001 ffc3 	bl	8006196 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	425b      	negs	r3, r3
 800421a:	441a      	add	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d207      	bcs.n	800423c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	425b      	negs	r3, r3
 8004236:	441a      	add	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d105      	bne.n	800424e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3b01      	subs	r3, #1
 800424c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004256:	697b      	ldr	r3, [r7, #20]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d018      	beq.n	80042a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	441a      	add	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	d303      	bcc.n	8004294 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68d9      	ldr	r1, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	461a      	mov	r2, r3
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f001 ff79 	bl	8006196 <memcpy>
	}
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042b4:	f001 f8ea 	bl	800548c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042c0:	e011      	b.n	80042e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d012      	beq.n	80042f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3324      	adds	r3, #36	; 0x24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fcf6 	bl	8004cc0 <xTaskRemoveFromEventList>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042da:	f000 fdd1 	bl	8004e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	dce9      	bgt.n	80042c2 <prvUnlockQueue+0x16>
 80042ee:	e000      	b.n	80042f2 <prvUnlockQueue+0x46>
					break;
 80042f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	22ff      	movs	r2, #255	; 0xff
 80042f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042fa:	f001 f8fb 	bl	80054f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042fe:	f001 f8c5 	bl	800548c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004308:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800430a:	e011      	b.n	8004330 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d012      	beq.n	800433a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3310      	adds	r3, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fcd1 	bl	8004cc0 <xTaskRemoveFromEventList>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004324:	f000 fdac 	bl	8004e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004328:	7bbb      	ldrb	r3, [r7, #14]
 800432a:	3b01      	subs	r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004334:	2b00      	cmp	r3, #0
 8004336:	dce9      	bgt.n	800430c <prvUnlockQueue+0x60>
 8004338:	e000      	b.n	800433c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800433a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	22ff      	movs	r2, #255	; 0xff
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004344:	f001 f8d6 	bl	80054f4 <vPortExitCritical>
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004358:	f001 f898 	bl	800548c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e001      	b.n	800436e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800436e:	f001 f8c1 	bl	80054f4 <vPortExitCritical>

	return xReturn;
 8004372:	68fb      	ldr	r3, [r7, #12]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08e      	sub	sp, #56	; 0x38
 8004380:	af04      	add	r7, sp, #16
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10c      	bne.n	80043aa <xTaskCreateStatic+0x2e>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	b672      	cpsid	i
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	b662      	cpsie	i
 80043a4:	623b      	str	r3, [r7, #32]
}
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10c      	bne.n	80043ca <xTaskCreateStatic+0x4e>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	b672      	cpsid	i
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	b662      	cpsie	i
 80043c4:	61fb      	str	r3, [r7, #28]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043ca:	23c0      	movs	r3, #192	; 0xc0
 80043cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2bc0      	cmp	r3, #192	; 0xc0
 80043d2:	d00c      	beq.n	80043ee <xTaskCreateStatic+0x72>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	b672      	cpsid	i
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	b662      	cpsie	i
 80043e8:	61bb      	str	r3, [r7, #24]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01e      	beq.n	8004434 <xTaskCreateStatic+0xb8>
 80043f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01b      	beq.n	8004434 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004404:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	2202      	movs	r2, #2
 800440a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800440e:	2300      	movs	r3, #0
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	9302      	str	r3, [sp, #8]
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f850 	bl	80044cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800442c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800442e:	f000 f8f9 	bl	8004624 <prvAddNewTaskToReadyList>
 8004432:	e001      	b.n	8004438 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004438:	697b      	ldr	r3, [r7, #20]
	}
 800443a:	4618      	mov	r0, r3
 800443c:	3728      	adds	r7, #40	; 0x28
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004442:	b580      	push	{r7, lr}
 8004444:	b08c      	sub	sp, #48	; 0x30
 8004446:	af04      	add	r7, sp, #16
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f944 	bl	80056e4 <pvPortMalloc>
 800445c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004464:	20c0      	movs	r0, #192	; 0xc0
 8004466:	f001 f93d 	bl	80056e4 <pvPortMalloc>
 800446a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
 8004478:	e005      	b.n	8004486 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f001 fa02 	bl	8005884 <vPortFree>
 8004480:	e001      	b.n	8004486 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d017      	beq.n	80044bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	2300      	movs	r3, #0
 8004498:	9303      	str	r3, [sp, #12]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	9302      	str	r3, [sp, #8]
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f80e 	bl	80044cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044b0:	69f8      	ldr	r0, [r7, #28]
 80044b2:	f000 f8b7 	bl	8004624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044b6:	2301      	movs	r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	e002      	b.n	80044c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295
 80044c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044c2:	69bb      	ldr	r3, [r7, #24]
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	461a      	mov	r2, r3
 80044e4:	21a5      	movs	r1, #165	; 0xa5
 80044e6:	f001 fe64 	bl	80061b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80044f4:	440b      	add	r3, r1
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f023 0307 	bic.w	r3, r3, #7
 8004502:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00c      	beq.n	8004528 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	b672      	cpsid	i
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	b662      	cpsie	i
 8004522:	617b      	str	r3, [r7, #20]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01f      	beq.n	800456e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	e012      	b.n	800455a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	7819      	ldrb	r1, [r3, #0]
 800453c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	3334      	adds	r3, #52	; 0x34
 8004544:	460a      	mov	r2, r1
 8004546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b0f      	cmp	r3, #15
 800455e:	d9e9      	bls.n	8004534 <prvInitialiseNewTask+0x68>
 8004560:	e000      	b.n	8004564 <prvInitialiseNewTask+0x98>
			{
				break;
 8004562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800456c:	e003      	b.n	8004576 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2b06      	cmp	r3, #6
 800457a:	d901      	bls.n	8004580 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800457c:	2306      	movs	r3, #6
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	2200      	movs	r2, #0
 8004590:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	3304      	adds	r3, #4
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fb0e 	bl	8003bb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	3318      	adds	r3, #24
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fb09 	bl	8003bb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	f1c3 0207 	rsb	r2, r3, #7
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	2200      	movs	r2, #0
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	3358      	adds	r3, #88	; 0x58
 80045d6:	2260      	movs	r2, #96	; 0x60
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 fde9 	bl	80061b2 <memset>
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <prvInitialiseNewTask+0x14c>)
 80045e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <prvInitialiseNewTask+0x150>)
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <prvInitialiseNewTask+0x154>)
 80045f0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	68f9      	ldr	r1, [r7, #12]
 80045f6:	69b8      	ldr	r0, [r7, #24]
 80045f8:	f000 fe3a 	bl	8005270 <pxPortInitialiseStack>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800460e:	bf00      	nop
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	08006a00 	.word	0x08006a00
 800461c:	08006a20 	.word	0x08006a20
 8004620:	080069e0 	.word	0x080069e0

08004624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800462c:	f000 ff2e 	bl	800548c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <prvAddNewTaskToReadyList+0xc0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	4a2b      	ldr	r2, [pc, #172]	; (80046e4 <prvAddNewTaskToReadyList+0xc0>)
 8004638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <prvAddNewTaskToReadyList+0xc4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004642:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <prvAddNewTaskToReadyList+0xc4>)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004648:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <prvAddNewTaskToReadyList+0xc0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d110      	bne.n	8004672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004650:	f000 fc3c 	bl	8004ecc <prvInitialiseTaskLists>
 8004654:	e00d      	b.n	8004672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004656:	4b25      	ldr	r3, [pc, #148]	; (80046ec <prvAddNewTaskToReadyList+0xc8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <prvAddNewTaskToReadyList+0xc4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	429a      	cmp	r2, r3
 800466a:	d802      	bhi.n	8004672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800466c:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <prvAddNewTaskToReadyList+0xc4>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004672:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <prvAddNewTaskToReadyList+0xcc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <prvAddNewTaskToReadyList+0xcc>)
 800467a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800467c:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <prvAddNewTaskToReadyList+0xcc>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	2201      	movs	r2, #1
 800468a:	409a      	lsls	r2, r3
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <prvAddNewTaskToReadyList+0xd0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4313      	orrs	r3, r2
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <prvAddNewTaskToReadyList+0xd0>)
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <prvAddNewTaskToReadyList+0xd4>)
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f7ff fa90 	bl	8003bd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046b2:	f000 ff1f 	bl	80054f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <prvAddNewTaskToReadyList+0xc8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00e      	beq.n	80046dc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <prvAddNewTaskToReadyList+0xc4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d207      	bcs.n	80046dc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <prvAddNewTaskToReadyList+0xd8>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000a7c 	.word	0x20000a7c
 80046e8:	2000097c 	.word	0x2000097c
 80046ec:	20000a88 	.word	0x20000a88
 80046f0:	20000a98 	.word	0x20000a98
 80046f4:	20000a84 	.word	0x20000a84
 80046f8:	20000980 	.word	0x20000980
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d019      	beq.n	8004746 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <vTaskDelay+0x64>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <vTaskDelay+0x34>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	b672      	cpsid	i
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	b662      	cpsie	i
 800472e:	60bb      	str	r3, [r7, #8]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004734:	f000 f88a 	bl	800484c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004738:	2100      	movs	r1, #0
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fd32 	bl	80051a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004740:	f000 f892 	bl	8004868 <xTaskResumeAll>
 8004744:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <vTaskDelay+0x68>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000aa4 	.word	0x20000aa4
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08a      	sub	sp, #40	; 0x28
 8004770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800477a:	463a      	mov	r2, r7
 800477c:	1d39      	adds	r1, r7, #4
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc f85e 	bl	8000844 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	9202      	str	r2, [sp, #8]
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	2300      	movs	r3, #0
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	460a      	mov	r2, r1
 800479a:	4924      	ldr	r1, [pc, #144]	; (800482c <vTaskStartScheduler+0xc0>)
 800479c:	4824      	ldr	r0, [pc, #144]	; (8004830 <vTaskStartScheduler+0xc4>)
 800479e:	f7ff fded 	bl	800437c <xTaskCreateStatic>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4a23      	ldr	r2, [pc, #140]	; (8004834 <vTaskStartScheduler+0xc8>)
 80047a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047a8:	4b22      	ldr	r3, [pc, #136]	; (8004834 <vTaskStartScheduler+0xc8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047b0:	2301      	movs	r3, #1
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e001      	b.n	80047ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d11f      	bne.n	8004800 <vTaskStartScheduler+0x94>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	b672      	cpsid	i
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	b662      	cpsie	i
 80047d4:	613b      	str	r3, [r7, #16]
}
 80047d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047d8:	4b17      	ldr	r3, [pc, #92]	; (8004838 <vTaskStartScheduler+0xcc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3358      	adds	r3, #88	; 0x58
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <vTaskStartScheduler+0xd0>)
 80047e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <vTaskStartScheduler+0xd4>)
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295
 80047e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047ea:	4b16      	ldr	r3, [pc, #88]	; (8004844 <vTaskStartScheduler+0xd8>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047f0:	4b15      	ldr	r3, [pc, #84]	; (8004848 <vTaskStartScheduler+0xdc>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80047f6:	f7fc f80f 	bl	8000818 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047fa:	f000 fdc9 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047fe:	e010      	b.n	8004822 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d10c      	bne.n	8004822 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	b672      	cpsid	i
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	b662      	cpsie	i
 800481c:	60fb      	str	r3, [r7, #12]
}
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <vTaskStartScheduler+0xb4>
}
 8004822:	bf00      	nop
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	08006978 	.word	0x08006978
 8004830:	08004e99 	.word	0x08004e99
 8004834:	20000aa0 	.word	0x20000aa0
 8004838:	2000097c 	.word	0x2000097c
 800483c:	20000014 	.word	0x20000014
 8004840:	20000a9c 	.word	0x20000a9c
 8004844:	20000a88 	.word	0x20000a88
 8004848:	20000a80 	.word	0x20000a80

0800484c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <vTaskSuspendAll+0x18>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	4a03      	ldr	r2, [pc, #12]	; (8004864 <vTaskSuspendAll+0x18>)
 8004858:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800485a:	bf00      	nop
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	20000aa4 	.word	0x20000aa4

08004868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <xTaskResumeAll+0x118>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10c      	bne.n	8004898 <xTaskResumeAll+0x30>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	b672      	cpsid	i
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	b662      	cpsie	i
 8004892:	603b      	str	r3, [r7, #0]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004898:	f000 fdf8 	bl	800548c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800489c:	4b38      	ldr	r3, [pc, #224]	; (8004980 <xTaskResumeAll+0x118>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	4a37      	ldr	r2, [pc, #220]	; (8004980 <xTaskResumeAll+0x118>)
 80048a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <xTaskResumeAll+0x118>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d161      	bne.n	8004972 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048ae:	4b35      	ldr	r3, [pc, #212]	; (8004984 <xTaskResumeAll+0x11c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d05d      	beq.n	8004972 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b6:	e02e      	b.n	8004916 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b8:	4b33      	ldr	r3, [pc, #204]	; (8004988 <xTaskResumeAll+0x120>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3318      	adds	r3, #24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f9e1 	bl	8003c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff f9dc 	bl	8003c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	2201      	movs	r2, #1
 80048da:	409a      	lsls	r2, r3
 80048dc:	4b2b      	ldr	r3, [pc, #172]	; (800498c <xTaskResumeAll+0x124>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	4a2a      	ldr	r2, [pc, #168]	; (800498c <xTaskResumeAll+0x124>)
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4a27      	ldr	r2, [pc, #156]	; (8004990 <xTaskResumeAll+0x128>)
 80048f4:	441a      	add	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7ff f968 	bl	8003bd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4b23      	ldr	r3, [pc, #140]	; (8004994 <xTaskResumeAll+0x12c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	429a      	cmp	r2, r3
 800490e:	d302      	bcc.n	8004916 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <xTaskResumeAll+0x130>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <xTaskResumeAll+0x120>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1cc      	bne.n	80048b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004924:	f000 fb76 	bl	8005014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004928:	4b1c      	ldr	r3, [pc, #112]	; (800499c <xTaskResumeAll+0x134>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004934:	f000 f836 	bl	80049a4 <xTaskIncrementTick>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <xTaskResumeAll+0x130>)
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3b01      	subs	r3, #1
 8004948:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f1      	bne.n	8004934 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <xTaskResumeAll+0x134>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <xTaskResumeAll+0x130>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <xTaskResumeAll+0x138>)
 8004964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004972:	f000 fdbf 	bl	80054f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004976:	68bb      	ldr	r3, [r7, #8]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000aa4 	.word	0x20000aa4
 8004984:	20000a7c 	.word	0x20000a7c
 8004988:	20000a3c 	.word	0x20000a3c
 800498c:	20000a84 	.word	0x20000a84
 8004990:	20000980 	.word	0x20000980
 8004994:	2000097c 	.word	0x2000097c
 8004998:	20000a90 	.word	0x20000a90
 800499c:	20000a8c 	.word	0x20000a8c
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ae:	4b53      	ldr	r3, [pc, #332]	; (8004afc <xTaskIncrementTick+0x158>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 8090 	bne.w	8004ad8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049b8:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <xTaskIncrementTick+0x15c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049c0:	4a4f      	ldr	r2, [pc, #316]	; (8004b00 <xTaskIncrementTick+0x15c>)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d122      	bne.n	8004a12 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80049cc:	4b4d      	ldr	r3, [pc, #308]	; (8004b04 <xTaskIncrementTick+0x160>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	b672      	cpsid	i
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	b662      	cpsie	i
 80049ea:	603b      	str	r3, [r7, #0]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <xTaskIncrementTick+0x4a>
 80049f0:	4b44      	ldr	r3, [pc, #272]	; (8004b04 <xTaskIncrementTick+0x160>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b44      	ldr	r3, [pc, #272]	; (8004b08 <xTaskIncrementTick+0x164>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a42      	ldr	r2, [pc, #264]	; (8004b04 <xTaskIncrementTick+0x160>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4a42      	ldr	r2, [pc, #264]	; (8004b08 <xTaskIncrementTick+0x164>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <xTaskIncrementTick+0x168>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	4a40      	ldr	r2, [pc, #256]	; (8004b0c <xTaskIncrementTick+0x168>)
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	f000 fb01 	bl	8005014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a12:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <xTaskIncrementTick+0x16c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d348      	bcc.n	8004aae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <xTaskIncrementTick+0x160>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a26:	4b3a      	ldr	r3, [pc, #232]	; (8004b10 <xTaskIncrementTick+0x16c>)
 8004a28:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2c:	601a      	str	r2, [r3, #0]
					break;
 8004a2e:	e03e      	b.n	8004aae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a30:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <xTaskIncrementTick+0x160>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d203      	bcs.n	8004a50 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a48:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <xTaskIncrementTick+0x16c>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a4e:	e02e      	b.n	8004aae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff f919 	bl	8003c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d004      	beq.n	8004a6c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3318      	adds	r3, #24
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f910 	bl	8003c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	2201      	movs	r2, #1
 8004a72:	409a      	lsls	r2, r3
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <xTaskIncrementTick+0x170>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <xTaskIncrementTick+0x170>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <xTaskIncrementTick+0x174>)
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f7ff f89c 	bl	8003bd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <xTaskIncrementTick+0x178>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3b9      	bcc.n	8004a1c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aac:	e7b6      	b.n	8004a1c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <xTaskIncrementTick+0x178>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4918      	ldr	r1, [pc, #96]	; (8004b18 <xTaskIncrementTick+0x174>)
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d901      	bls.n	8004aca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <xTaskIncrementTick+0x17c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 8004ad2:	f7fc f890 	bl	8000bf6 <vApplicationTickHook>
 8004ad6:	e006      	b.n	8004ae6 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <xTaskIncrementTick+0x17c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <xTaskIncrementTick+0x17c>)
 8004ae0:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004ae2:	f7fc f888 	bl	8000bf6 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <xTaskIncrementTick+0x180>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004af2:	697b      	ldr	r3, [r7, #20]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000aa4 	.word	0x20000aa4
 8004b00:	20000a80 	.word	0x20000a80
 8004b04:	20000a34 	.word	0x20000a34
 8004b08:	20000a38 	.word	0x20000a38
 8004b0c:	20000a94 	.word	0x20000a94
 8004b10:	20000a9c 	.word	0x20000a9c
 8004b14:	20000a84 	.word	0x20000a84
 8004b18:	20000980 	.word	0x20000980
 8004b1c:	2000097c 	.word	0x2000097c
 8004b20:	20000a8c 	.word	0x20000a8c
 8004b24:	20000a90 	.word	0x20000a90

08004b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b2e:	4b49      	ldr	r3, [pc, #292]	; (8004c54 <vTaskSwitchContext+0x12c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b36:	4b48      	ldr	r3, [pc, #288]	; (8004c58 <vTaskSwitchContext+0x130>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b3c:	e086      	b.n	8004c4c <vTaskSwitchContext+0x124>
		xYieldPending = pdFALSE;
 8004b3e:	4b46      	ldr	r3, [pc, #280]	; (8004c58 <vTaskSwitchContext+0x130>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004b44:	f7fb fe6f 	bl	8000826 <getRunTimeCounterValue>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4a44      	ldr	r2, [pc, #272]	; (8004c5c <vTaskSwitchContext+0x134>)
 8004b4c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004b4e:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <vTaskSwitchContext+0x134>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <vTaskSwitchContext+0x138>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d909      	bls.n	8004b6e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004b5a:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <vTaskSwitchContext+0x13c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b60:	4a3e      	ldr	r2, [pc, #248]	; (8004c5c <vTaskSwitchContext+0x134>)
 8004b62:	6810      	ldr	r0, [r2, #0]
 8004b64:	4a3e      	ldr	r2, [pc, #248]	; (8004c60 <vTaskSwitchContext+0x138>)
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	1a82      	subs	r2, r0, r2
 8004b6a:	440a      	add	r2, r1
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <vTaskSwitchContext+0x134>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <vTaskSwitchContext+0x138>)
 8004b74:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <vTaskSwitchContext+0x13c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d111      	bne.n	8004bb2 <vTaskSwitchContext+0x8a>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3304      	adds	r3, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d10b      	bne.n	8004bb2 <vTaskSwitchContext+0x8a>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d105      	bne.n	8004bb2 <vTaskSwitchContext+0x8a>
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d008      	beq.n	8004bc4 <vTaskSwitchContext+0x9c>
 8004bb2:	4b2c      	ldr	r3, [pc, #176]	; (8004c64 <vTaskSwitchContext+0x13c>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <vTaskSwitchContext+0x13c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3334      	adds	r3, #52	; 0x34
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fc f80d 	bl	8000bde <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc4:	4b28      	ldr	r3, [pc, #160]	; (8004c68 <vTaskSwitchContext+0x140>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	fab3 f383 	clz	r3, r3
 8004bd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004bd2:	7afb      	ldrb	r3, [r7, #11]
 8004bd4:	f1c3 031f 	rsb	r3, r3, #31
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	4924      	ldr	r1, [pc, #144]	; (8004c6c <vTaskSwitchContext+0x144>)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10c      	bne.n	8004c08 <vTaskSwitchContext+0xe0>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	b672      	cpsid	i
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	b662      	cpsie	i
 8004c02:	607b      	str	r3, [r7, #4]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <vTaskSwitchContext+0xde>
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <vTaskSwitchContext+0x144>)
 8004c14:	4413      	add	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d104      	bne.n	8004c38 <vTaskSwitchContext+0x110>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <vTaskSwitchContext+0x13c>)
 8004c40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <vTaskSwitchContext+0x13c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3358      	adds	r3, #88	; 0x58
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <vTaskSwitchContext+0x148>)
 8004c4a:	6013      	str	r3, [r2, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000aa4 	.word	0x20000aa4
 8004c58:	20000a90 	.word	0x20000a90
 8004c5c:	20000aac 	.word	0x20000aac
 8004c60:	20000aa8 	.word	0x20000aa8
 8004c64:	2000097c 	.word	0x2000097c
 8004c68:	20000a84 	.word	0x20000a84
 8004c6c:	20000980 	.word	0x20000980
 8004c70:	20000014 	.word	0x20000014

08004c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10c      	bne.n	8004c9e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	b672      	cpsid	i
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	b662      	cpsie	i
 8004c98:	60fb      	str	r3, [r7, #12]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <vTaskPlaceOnEventList+0x48>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3318      	adds	r3, #24
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fe ffb7 	bl	8003c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cac:	2101      	movs	r1, #1
 8004cae:	6838      	ldr	r0, [r7, #0]
 8004cb0:	f000 fa78 	bl	80051a4 <prvAddCurrentTaskToDelayedList>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	2000097c 	.word	0x2000097c

08004cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	b672      	cpsid	i
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	b662      	cpsie	i
 8004cea:	60fb      	str	r3, [r7, #12]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe ffc9 	bl	8003c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <xTaskRemoveFromEventList+0xb0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11c      	bne.n	8004d3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe ffc0 	bl	8003c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	2201      	movs	r2, #1
 8004d12:	409a      	lsls	r2, r3
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <xTaskRemoveFromEventList+0xb4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <xTaskRemoveFromEventList+0xb4>)
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <xTaskRemoveFromEventList+0xb8>)
 8004d2c:	441a      	add	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe ff4c 	bl	8003bd2 <vListInsertEnd>
 8004d3a:	e005      	b.n	8004d48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	3318      	adds	r3, #24
 8004d40:	4619      	mov	r1, r3
 8004d42:	480e      	ldr	r0, [pc, #56]	; (8004d7c <xTaskRemoveFromEventList+0xbc>)
 8004d44:	f7fe ff45 	bl	8003bd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <xTaskRemoveFromEventList+0xc0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d905      	bls.n	8004d62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <xTaskRemoveFromEventList+0xc4>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e001      	b.n	8004d66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d66:	697b      	ldr	r3, [r7, #20]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000aa4 	.word	0x20000aa4
 8004d74:	20000a84 	.word	0x20000a84
 8004d78:	20000980 	.word	0x20000980
 8004d7c:	20000a3c 	.word	0x20000a3c
 8004d80:	2000097c 	.word	0x2000097c
 8004d84:	20000a90 	.word	0x20000a90

08004d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <vTaskInternalSetTimeOutState+0x24>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <vTaskInternalSetTimeOutState+0x28>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	605a      	str	r2, [r3, #4]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000a94 	.word	0x20000a94
 8004db0:	20000a80 	.word	0x20000a80

08004db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10c      	bne.n	8004dde <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	b672      	cpsid	i
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	b662      	cpsie	i
 8004dd8:	613b      	str	r3, [r7, #16]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10c      	bne.n	8004dfe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	b672      	cpsid	i
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	b662      	cpsie	i
 8004df8:	60fb      	str	r3, [r7, #12]
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004dfe:	f000 fb45 	bl	800548c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <xTaskCheckForTimeOut+0xc4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d102      	bne.n	8004e22 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e023      	b.n	8004e6a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <xTaskCheckForTimeOut+0xc8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d007      	beq.n	8004e3e <xTaskCheckForTimeOut+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d302      	bcc.n	8004e3e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	e015      	b.n	8004e6a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d20b      	bcs.n	8004e60 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1ad2      	subs	r2, r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ff97 	bl	8004d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e004      	b.n	8004e6a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e6a:	f000 fb43 	bl	80054f4 <vPortExitCritical>

	return xReturn;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000a80 	.word	0x20000a80
 8004e7c:	20000a94 	.word	0x20000a94

08004e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <vTaskMissedYield+0x14>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20000a90 	.word	0x20000a90

08004e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ea0:	f000 f854 	bl	8004f4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <prvIdleTask+0x2c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d907      	bls.n	8004ebc <prvIdleTask+0x24>
			{
				taskYIELD();
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <prvIdleTask+0x30>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004ebc:	f7fb fcbb 	bl	8000836 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004ec0:	e7ee      	b.n	8004ea0 <prvIdleTask+0x8>
 8004ec2:	bf00      	nop
 8004ec4:	20000980 	.word	0x20000980
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	e00c      	b.n	8004ef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <prvInitialiseTaskLists+0x60>)
 8004ee4:	4413      	add	r3, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fe46 	bl	8003b78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b06      	cmp	r3, #6
 8004ef6:	d9ef      	bls.n	8004ed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ef8:	480d      	ldr	r0, [pc, #52]	; (8004f30 <prvInitialiseTaskLists+0x64>)
 8004efa:	f7fe fe3d 	bl	8003b78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004efe:	480d      	ldr	r0, [pc, #52]	; (8004f34 <prvInitialiseTaskLists+0x68>)
 8004f00:	f7fe fe3a 	bl	8003b78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f04:	480c      	ldr	r0, [pc, #48]	; (8004f38 <prvInitialiseTaskLists+0x6c>)
 8004f06:	f7fe fe37 	bl	8003b78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f0a:	480c      	ldr	r0, [pc, #48]	; (8004f3c <prvInitialiseTaskLists+0x70>)
 8004f0c:	f7fe fe34 	bl	8003b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f10:	480b      	ldr	r0, [pc, #44]	; (8004f40 <prvInitialiseTaskLists+0x74>)
 8004f12:	f7fe fe31 	bl	8003b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <prvInitialiseTaskLists+0x78>)
 8004f18:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <prvInitialiseTaskLists+0x64>)
 8004f1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <prvInitialiseTaskLists+0x7c>)
 8004f1e:	4a05      	ldr	r2, [pc, #20]	; (8004f34 <prvInitialiseTaskLists+0x68>)
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000980 	.word	0x20000980
 8004f30:	20000a0c 	.word	0x20000a0c
 8004f34:	20000a20 	.word	0x20000a20
 8004f38:	20000a3c 	.word	0x20000a3c
 8004f3c:	20000a50 	.word	0x20000a50
 8004f40:	20000a68 	.word	0x20000a68
 8004f44:	20000a34 	.word	0x20000a34
 8004f48:	20000a38 	.word	0x20000a38

08004f4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f52:	e019      	b.n	8004f88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f54:	f000 fa9a 	bl	800548c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f58:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <prvCheckTasksWaitingTermination+0x50>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fe91 	bl	8003c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <prvCheckTasksWaitingTermination+0x54>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a0b      	ldr	r2, [pc, #44]	; (8004fa0 <prvCheckTasksWaitingTermination+0x54>)
 8004f72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <prvCheckTasksWaitingTermination+0x58>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <prvCheckTasksWaitingTermination+0x58>)
 8004f7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f7e:	f000 fab9 	bl	80054f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f810 	bl	8004fa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <prvCheckTasksWaitingTermination+0x58>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e1      	bne.n	8004f54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000a50 	.word	0x20000a50
 8004fa0:	20000a7c 	.word	0x20000a7c
 8004fa4:	20000a64 	.word	0x20000a64

08004fa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3358      	adds	r3, #88	; 0x58
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f001 f9a7 	bl	8006308 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d108      	bne.n	8004fd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fc5b 	bl	8005884 <vPortFree>
				vPortFree( pxTCB );
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fc58 	bl	8005884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fd4:	e01a      	b.n	800500c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d103      	bne.n	8004fe8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fc4f 	bl	8005884 <vPortFree>
	}
 8004fe6:	e011      	b.n	800500c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d00c      	beq.n	800500c <prvDeleteTCB+0x64>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	b672      	cpsid	i
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	b662      	cpsie	i
 8005006:	60fb      	str	r3, [r7, #12]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <prvDeleteTCB+0x62>
	}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800501a:	4b0c      	ldr	r3, [pc, #48]	; (800504c <prvResetNextTaskUnblockTime+0x38>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvResetNextTaskUnblockTime+0x3c>)
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800502c:	e008      	b.n	8005040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <prvResetNextTaskUnblockTime+0x38>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <prvResetNextTaskUnblockTime+0x3c>)
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20000a34 	.word	0x20000a34
 8005050:	20000a9c 	.word	0x20000a9c

08005054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <xTaskGetSchedulerState+0x34>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005062:	2301      	movs	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	e008      	b.n	800507a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <xTaskGetSchedulerState+0x38>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005070:	2302      	movs	r3, #2
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	e001      	b.n	800507a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800507a:	687b      	ldr	r3, [r7, #4]
	}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000a88 	.word	0x20000a88
 800508c:	20000aa4 	.word	0x20000aa4

08005090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d072      	beq.n	800518c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050a6:	4b3c      	ldr	r3, [pc, #240]	; (8005198 <xTaskPriorityDisinherit+0x108>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d00c      	beq.n	80050ca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	b672      	cpsid	i
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	b662      	cpsie	i
 80050c4:	60fb      	str	r3, [r7, #12]
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	b672      	cpsid	i
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	b662      	cpsie	i
 80050e6:	60bb      	str	r3, [r7, #8]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	429a      	cmp	r2, r3
 8005100:	d044      	beq.n	800518c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005106:	2b00      	cmp	r3, #0
 8005108:	d140      	bne.n	800518c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3304      	adds	r3, #4
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fdbc 	bl	8003c8c <uxListRemove>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d115      	bne.n	8005146 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511e:	491f      	ldr	r1, [pc, #124]	; (800519c <xTaskPriorityDisinherit+0x10c>)
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xTaskPriorityDisinherit+0xb6>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2201      	movs	r2, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <xTaskPriorityDisinherit+0x110>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4013      	ands	r3, r2
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <xTaskPriorityDisinherit+0x110>)
 8005144:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f1c3 0207 	rsb	r2, r3, #7
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	2201      	movs	r2, #1
 8005160:	409a      	lsls	r2, r3
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <xTaskPriorityDisinherit+0x110>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <xTaskPriorityDisinherit+0x110>)
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <xTaskPriorityDisinherit+0x10c>)
 800517a:	441a      	add	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7fe fd25 	bl	8003bd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800518c:	697b      	ldr	r3, [r7, #20]
	}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	2000097c 	.word	0x2000097c
 800519c:	20000980 	.word	0x20000980
 80051a0:	20000a84 	.word	0x20000a84

080051a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ae:	4b29      	ldr	r3, [pc, #164]	; (8005254 <prvAddCurrentTaskToDelayedList+0xb0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051b4:	4b28      	ldr	r3, [pc, #160]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fd66 	bl	8003c8c <uxListRemove>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43da      	mvns	r2, r3
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4013      	ands	r3, r2
 80051da:	4a20      	ldr	r2, [pc, #128]	; (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d10a      	bne.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	481a      	ldr	r0, [pc, #104]	; (8005260 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051f6:	f7fe fcec 	bl	8003bd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051fa:	e026      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	429a      	cmp	r2, r3
 8005212:	d209      	bcs.n	8005228 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fe fcfa 	bl	8003c1a <vListInsert>
}
 8005226:	e010      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <prvAddCurrentTaskToDelayedList+0xc4>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7fe fcf0 	bl	8003c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d202      	bcs.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005244:	4a09      	ldr	r2, [pc, #36]	; (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6013      	str	r3, [r2, #0]
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000a80 	.word	0x20000a80
 8005258:	2000097c 	.word	0x2000097c
 800525c:	20000a84 	.word	0x20000a84
 8005260:	20000a68 	.word	0x20000a68
 8005264:	20000a38 	.word	0x20000a38
 8005268:	20000a34 	.word	0x20000a34
 800526c:	20000a9c 	.word	0x20000a9c

08005270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b04      	subs	r3, #4
 8005280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b04      	subs	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b04      	subs	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a0:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <pxPortInitialiseStack+0x64>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b14      	subs	r3, #20
 80052aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b04      	subs	r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f06f 0202 	mvn.w	r2, #2
 80052be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b20      	subs	r3, #32
 80052c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	080052d9 	.word	0x080052d9

080052d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <prvTaskExitError+0x5c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d00c      	beq.n	8005306 <prvTaskExitError+0x2e>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	b672      	cpsid	i
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	b662      	cpsie	i
 8005300:	60fb      	str	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <prvTaskExitError+0x2c>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	b672      	cpsid	i
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	b662      	cpsie	i
 800531a:	60bb      	str	r3, [r7, #8]
}
 800531c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800531e:	bf00      	nop
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0fc      	beq.n	8005320 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	20000010 	.word	0x20000010
	...

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	; (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005396:	4b37      	ldr	r3, [pc, #220]	; (8005474 <xPortStartScheduler+0xe4>)
 8005398:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	22ff      	movs	r2, #255	; 0xff
 80053a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <xPortStartScheduler+0xe8>)
 80053bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053be:	4b2f      	ldr	r3, [pc, #188]	; (800547c <xPortStartScheduler+0xec>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053c4:	e009      	b.n	80053da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053c6:	4b2d      	ldr	r3, [pc, #180]	; (800547c <xPortStartScheduler+0xec>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <xPortStartScheduler+0xec>)
 80053ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d0ef      	beq.n	80053c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053e6:	4b25      	ldr	r3, [pc, #148]	; (800547c <xPortStartScheduler+0xec>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1c3 0307 	rsb	r3, r3, #7
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d00c      	beq.n	800540c <xPortStartScheduler+0x7c>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	b672      	cpsid	i
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	b662      	cpsie	i
 8005406:	60bb      	str	r3, [r7, #8]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800540c:	4b1b      	ldr	r3, [pc, #108]	; (800547c <xPortStartScheduler+0xec>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	4a1a      	ldr	r2, [pc, #104]	; (800547c <xPortStartScheduler+0xec>)
 8005414:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005416:	4b19      	ldr	r3, [pc, #100]	; (800547c <xPortStartScheduler+0xec>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <xPortStartScheduler+0xec>)
 8005420:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <xPortStartScheduler+0xf0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a14      	ldr	r2, [pc, #80]	; (8005480 <xPortStartScheduler+0xf0>)
 8005430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005434:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <xPortStartScheduler+0xf0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a11      	ldr	r2, [pc, #68]	; (8005480 <xPortStartScheduler+0xf0>)
 800543c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005440:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005442:	f000 f8dd 	bl	8005600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005446:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <xPortStartScheduler+0xf4>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800544c:	f000 f8fc 	bl	8005648 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <xPortStartScheduler+0xf8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <xPortStartScheduler+0xf8>)
 8005456:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800545a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800545c:	f7ff ff84 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005460:	f7ff fb62 	bl	8004b28 <vTaskSwitchContext>
	prvTaskExitError();
 8005464:	f7ff ff38 	bl	80052d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	e000e400 	.word	0xe000e400
 8005478:	20000ab0 	.word	0x20000ab0
 800547c:	20000ab4 	.word	0x20000ab4
 8005480:	e000ed20 	.word	0xe000ed20
 8005484:	20000010 	.word	0x20000010
 8005488:	e000ef34 	.word	0xe000ef34

0800548c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	b672      	cpsid	i
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	b662      	cpsie	i
 80054a6:	607b      	str	r3, [r7, #4]
}
 80054a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054aa:	4b10      	ldr	r3, [pc, #64]	; (80054ec <vPortEnterCritical+0x60>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3301      	adds	r3, #1
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <vPortEnterCritical+0x60>)
 80054b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054b4:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <vPortEnterCritical+0x60>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d111      	bne.n	80054e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054bc:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <vPortEnterCritical+0x64>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <vPortEnterCritical+0x54>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	b672      	cpsid	i
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	b662      	cpsie	i
 80054da:	603b      	str	r3, [r7, #0]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <vPortEnterCritical+0x52>
	}
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	20000010 	.word	0x20000010
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <vPortExitCritical+0x54>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10c      	bne.n	800551c <vPortExitCritical+0x28>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	b672      	cpsid	i
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	b662      	cpsie	i
 8005516:	607b      	str	r3, [r7, #4]
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <vPortExitCritical+0x54>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <vPortExitCritical+0x54>)
 8005524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <vPortExitCritical+0x54>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d105      	bne.n	800553a <vPortExitCritical+0x46>
 800552e:	2300      	movs	r3, #0
 8005530:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f383 8811 	msr	BASEPRI, r3
}
 8005538:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000010 	.word	0x20000010
 800554c:	00000000 	.word	0x00000000

08005550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005550:	f3ef 8009 	mrs	r0, PSP
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <pxCurrentTCBConst>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f01e 0f10 	tst.w	lr, #16
 8005560:	bf08      	it	eq
 8005562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	6010      	str	r0, [r2, #0]
 800556c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005574:	b672      	cpsid	i
 8005576:	f380 8811 	msr	BASEPRI, r0
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	b662      	cpsie	i
 8005584:	f7ff fad0 	bl	8004b28 <vTaskSwitchContext>
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f380 8811 	msr	BASEPRI, r0
 8005590:	bc09      	pop	{r0, r3}
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f01e 0f10 	tst.w	lr, #16
 800559e:	bf08      	it	eq
 80055a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055a4:	f380 8809 	msr	PSP, r0
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop

080055b0 <pxCurrentTCBConst>:
 80055b0:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	b672      	cpsid	i
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	b662      	cpsie	i
 80055d2:	607b      	str	r3, [r7, #4]
}
 80055d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055d6:	f7ff f9e5 	bl	80049a4 <xTaskIncrementTick>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <SysTick_Handler+0x44>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f383 8811 	msr	BASEPRI, r3
}
 80055f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <vPortSetupTimerInterrupt+0x34>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800560a:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <vPortSetupTimerInterrupt+0x38>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <vPortSetupTimerInterrupt+0x3c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a0a      	ldr	r2, [pc, #40]	; (8005640 <vPortSetupTimerInterrupt+0x40>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	4a09      	ldr	r2, [pc, #36]	; (8005644 <vPortSetupTimerInterrupt+0x44>)
 800561e:	3b01      	subs	r3, #1
 8005620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005622:	4b04      	ldr	r3, [pc, #16]	; (8005634 <vPortSetupTimerInterrupt+0x34>)
 8005624:	2207      	movs	r2, #7
 8005626:	601a      	str	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	e000e010 	.word	0xe000e010
 8005638:	e000e018 	.word	0xe000e018
 800563c:	20000004 	.word	0x20000004
 8005640:	10624dd3 	.word	0x10624dd3
 8005644:	e000e014 	.word	0xe000e014

08005648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005648:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005658 <vPortEnableVFP+0x10>
 800564c:	6801      	ldr	r1, [r0, #0]
 800564e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005652:	6001      	str	r1, [r0, #0]
 8005654:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005656:	bf00      	nop
 8005658:	e000ed88 	.word	0xe000ed88

0800565c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005662:	f3ef 8305 	mrs	r3, IPSR
 8005666:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b0f      	cmp	r3, #15
 800566c:	d916      	bls.n	800569c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800566e:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <vPortValidateInterruptPriority+0x78>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4413      	add	r3, r2
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005678:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <vPortValidateInterruptPriority+0x7c>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	7afa      	ldrb	r2, [r7, #11]
 800567e:	429a      	cmp	r2, r3
 8005680:	d20c      	bcs.n	800569c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	b672      	cpsid	i
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	b662      	cpsie	i
 8005696:	607b      	str	r3, [r7, #4]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <vPortValidateInterruptPriority+0x80>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056a4:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <vPortValidateInterruptPriority+0x84>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d90c      	bls.n	80056c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	b672      	cpsid	i
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	b662      	cpsie	i
 80056c0:	603b      	str	r3, [r7, #0]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <vPortValidateInterruptPriority+0x68>
	}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	e000e3f0 	.word	0xe000e3f0
 80056d8:	20000ab0 	.word	0x20000ab0
 80056dc:	e000ed0c 	.word	0xe000ed0c
 80056e0:	20000ab4 	.word	0x20000ab4

080056e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	; 0x28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056f0:	f7ff f8ac 	bl	800484c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056f4:	4b5e      	ldr	r3, [pc, #376]	; (8005870 <pvPortMalloc+0x18c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056fc:	f000 f920 	bl	8005940 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005700:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <pvPortMalloc+0x190>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4013      	ands	r3, r2
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 8092 	bne.w	8005832 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01f      	beq.n	8005754 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005714:	2208      	movs	r2, #8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b00      	cmp	r3, #0
 8005724:	d016      	beq.n	8005754 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f023 0307 	bic.w	r3, r3, #7
 800572c:	3308      	adds	r3, #8
 800572e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <pvPortMalloc+0x70>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	b672      	cpsid	i
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	b662      	cpsie	i
 800574e:	617b      	str	r3, [r7, #20]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d06b      	beq.n	8005832 <pvPortMalloc+0x14e>
 800575a:	4b47      	ldr	r3, [pc, #284]	; (8005878 <pvPortMalloc+0x194>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	d866      	bhi.n	8005832 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005764:	4b45      	ldr	r3, [pc, #276]	; (800587c <pvPortMalloc+0x198>)
 8005766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005768:	4b44      	ldr	r3, [pc, #272]	; (800587c <pvPortMalloc+0x198>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800576e:	e004      	b.n	800577a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d903      	bls.n	800578c <pvPortMalloc+0xa8>
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f1      	bne.n	8005770 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800578c:	4b38      	ldr	r3, [pc, #224]	; (8005870 <pvPortMalloc+0x18c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	429a      	cmp	r2, r3
 8005794:	d04d      	beq.n	8005832 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2208      	movs	r2, #8
 800579c:	4413      	add	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	2308      	movs	r3, #8
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d921      	bls.n	80057fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <pvPortMalloc+0x100>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	b672      	cpsid	i
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	b662      	cpsie	i
 80057de:	613b      	str	r3, [r7, #16]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057f6:	69b8      	ldr	r0, [r7, #24]
 80057f8:	f000 f904 	bl	8005a04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057fc:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <pvPortMalloc+0x194>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <pvPortMalloc+0x194>)
 8005808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <pvPortMalloc+0x194>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <pvPortMalloc+0x19c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d203      	bcs.n	800581e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <pvPortMalloc+0x194>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a19      	ldr	r2, [pc, #100]	; (8005880 <pvPortMalloc+0x19c>)
 800581c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4b14      	ldr	r3, [pc, #80]	; (8005874 <pvPortMalloc+0x190>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	431a      	orrs	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005832:	f7ff f819 	bl	8004868 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800583c:	f7fb f9e2 	bl	8000c04 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00c      	beq.n	8005864 <pvPortMalloc+0x180>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	b672      	cpsid	i
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	b662      	cpsie	i
 800585e:	60fb      	str	r3, [r7, #12]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <pvPortMalloc+0x17e>
	return pvReturn;
 8005864:	69fb      	ldr	r3, [r7, #28]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3728      	adds	r7, #40	; 0x28
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200046c0 	.word	0x200046c0
 8005874:	200046cc 	.word	0x200046cc
 8005878:	200046c4 	.word	0x200046c4
 800587c:	200046b8 	.word	0x200046b8
 8005880:	200046c8 	.word	0x200046c8

08005884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d04c      	beq.n	8005930 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005896:	2308      	movs	r3, #8
 8005898:	425b      	negs	r3, r3
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	4b23      	ldr	r3, [pc, #140]	; (8005938 <vPortFree+0xb4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10c      	bne.n	80058cc <vPortFree+0x48>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	b672      	cpsid	i
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	b662      	cpsie	i
 80058c6:	60fb      	str	r3, [r7, #12]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00c      	beq.n	80058ee <vPortFree+0x6a>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	b672      	cpsid	i
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	b662      	cpsie	i
 80058e8:	60bb      	str	r3, [r7, #8]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <vPortFree+0xb4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d019      	beq.n	8005930 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d115      	bne.n	8005930 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <vPortFree+0xb4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	43db      	mvns	r3, r3
 800590e:	401a      	ands	r2, r3
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005914:	f7fe ff9a 	bl	800484c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <vPortFree+0xb8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4413      	add	r3, r2
 8005922:	4a06      	ldr	r2, [pc, #24]	; (800593c <vPortFree+0xb8>)
 8005924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f000 f86c 	bl	8005a04 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800592c:	f7fe ff9c 	bl	8004868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005930:	bf00      	nop
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200046cc 	.word	0x200046cc
 800593c:	200046c4 	.word	0x200046c4

08005940 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005946:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800594a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <prvHeapInit+0xac>)
 800594e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00c      	beq.n	8005974 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3307      	adds	r3, #7
 800595e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	4a1f      	ldr	r2, [pc, #124]	; (80059ec <prvHeapInit+0xac>)
 8005970:	4413      	add	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005978:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <prvHeapInit+0xb0>)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800597e:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <prvHeapInit+0xb0>)
 8005980:	2200      	movs	r2, #0
 8005982:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4413      	add	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800598c:	2208      	movs	r2, #8
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <prvHeapInit+0xb4>)
 80059a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059a2:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <prvHeapInit+0xb4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2200      	movs	r2, #0
 80059a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <prvHeapInit+0xb4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	1ad2      	subs	r2, r2, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <prvHeapInit+0xb4>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a0a      	ldr	r2, [pc, #40]	; (80059f8 <prvHeapInit+0xb8>)
 80059ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <prvHeapInit+0xbc>)
 80059d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <prvHeapInit+0xc0>)
 80059da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059de:	601a      	str	r2, [r3, #0]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000ab8 	.word	0x20000ab8
 80059f0:	200046b8 	.word	0x200046b8
 80059f4:	200046c0 	.word	0x200046c0
 80059f8:	200046c8 	.word	0x200046c8
 80059fc:	200046c4 	.word	0x200046c4
 8005a00:	200046cc 	.word	0x200046cc

08005a04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a0c:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <prvInsertBlockIntoFreeList+0xac>)
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e002      	b.n	8005a18 <prvInsertBlockIntoFreeList+0x14>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d8f7      	bhi.n	8005a12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d108      	bne.n	8005a46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d118      	bne.n	8005a8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d00d      	beq.n	8005a82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e008      	b.n	8005a94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e003      	b.n	8005a94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d002      	beq.n	8005aa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	200046b8 	.word	0x200046b8
 8005ab4:	200046c0 	.word	0x200046c0

08005ab8 <BspGetButtonState>:

#include "Bsp.h"



_Bool BspGetButtonState(uint8_t ButtonNum){
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]

	_Bool ButtonStatus;

	switch(ButtonNum){
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d01d      	beq.n	8005b04 <BspGetButtonState+0x4c>
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	dc26      	bgt.n	8005b1a <BspGetButtonState+0x62>
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d002      	beq.n	8005ad6 <BspGetButtonState+0x1e>
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d00c      	beq.n	8005aee <BspGetButtonState+0x36>
 8005ad4:	e021      	b.n	8005b1a <BspGetButtonState+0x62>
		case 1:
			ButtonStatus = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 8005ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ada:	4812      	ldr	r0, [pc, #72]	; (8005b24 <BspGetButtonState+0x6c>)
 8005adc:	f7fb fd9c 	bl	8001618 <HAL_GPIO_ReadPin>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bf14      	ite	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	2300      	moveq	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
			break;
 8005aec:	e015      	b.n	8005b1a <BspGetButtonState+0x62>
		case 2:
			ButtonStatus = HAL_GPIO_ReadPin(BUTON1_GPIO_Port,BUTON1_Pin);
 8005aee:	2120      	movs	r1, #32
 8005af0:	480d      	ldr	r0, [pc, #52]	; (8005b28 <BspGetButtonState+0x70>)
 8005af2:	f7fb fd91 	bl	8001618 <HAL_GPIO_ReadPin>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
			break;
 8005b02:	e00a      	b.n	8005b1a <BspGetButtonState+0x62>
		case 3:
			ButtonStatus = HAL_GPIO_ReadPin(BUTON2_GPIO_Port,BUTON2_Pin);
 8005b04:	2110      	movs	r1, #16
 8005b06:	4808      	ldr	r0, [pc, #32]	; (8005b28 <BspGetButtonState+0x70>)
 8005b08:	f7fb fd86 	bl	8001618 <HAL_GPIO_ReadPin>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf14      	ite	ne
 8005b12:	2301      	movne	r3, #1
 8005b14:	2300      	moveq	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]
			break;
 8005b18:	bf00      	nop
	}

	return ButtonStatus;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40020800 	.word	0x40020800
 8005b28:	40020400 	.word	0x40020400

08005b2c <BspLed1On>:

void BspLed1On(void){
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8005b30:	2201      	movs	r2, #1
 8005b32:	2101      	movs	r1, #1
 8005b34:	4802      	ldr	r0, [pc, #8]	; (8005b40 <BspLed1On+0x14>)
 8005b36:	f7fb fd87 	bl	8001648 <HAL_GPIO_WritePin>
}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40020400 	.word	0x40020400

08005b44 <BspLed1Off>:
void BspLed1Off(void){
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4802      	ldr	r0, [pc, #8]	; (8005b58 <BspLed1Off+0x14>)
 8005b4e:	f7fb fd7b 	bl	8001648 <HAL_GPIO_WritePin>
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40020400 	.word	0x40020400

08005b5c <BspLed2On>:

void BspLed2On(void){
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8005b60:	2201      	movs	r2, #1
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	4802      	ldr	r0, [pc, #8]	; (8005b70 <BspLed2On+0x14>)
 8005b66:	f7fb fd6f 	bl	8001648 <HAL_GPIO_WritePin>
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40020400 	.word	0x40020400

08005b74 <BspLed2Off>:
void BspLed2Off(void){
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2180      	movs	r1, #128	; 0x80
 8005b7c:	4802      	ldr	r0, [pc, #8]	; (8005b88 <BspLed2Off+0x14>)
 8005b7e:	f7fb fd63 	bl	8001648 <HAL_GPIO_WritePin>
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40020400 	.word	0x40020400

08005b8c <BspLed3On>:

void BspLed3On(void){
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8005b90:	2201      	movs	r2, #1
 8005b92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b96:	4802      	ldr	r0, [pc, #8]	; (8005ba0 <BspLed3On+0x14>)
 8005b98:	f7fb fd56 	bl	8001648 <HAL_GPIO_WritePin>
}
 8005b9c:	bf00      	nop
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40020400 	.word	0x40020400

08005ba4 <BspLed3Off>:
void BspLed3Off(void){
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bae:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <BspLed3Off+0x14>)
 8005bb0:	f7fb fd4a 	bl	8001648 <HAL_GPIO_WritePin>
}
 8005bb4:	bf00      	nop
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40020400 	.word	0x40020400

08005bbc <TimeBomb_ctor>:
State TimeBomb_pause(TimeBomb * const me, Event const * const e);
State TimeBomb_boom(TimeBomb * const me, Event const * const e);
State TimeBomb_armed(TimeBomb * const me, Event const * const e);
State TimeBomb_defused(TimeBomb * const me, Event const * const e);

void TimeBomb_ctor(TimeBomb * const me) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
    Active_ctor(&me->super, (StateHandler)&TimeBomb_initial);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4907      	ldr	r1, [pc, #28]	; (8005be4 <TimeBomb_ctor+0x28>)
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fa fd0b 	bl	80005e4 <Active_ctor>
    TimeEvent_ctor(&me->te,TIMEOUT_SIG,&me->super);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	2107      	movs	r1, #7
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fa fd98 	bl	800070c <TimeEvent_ctor>
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	08005be9 	.word	0x08005be9

08005be8 <TimeBomb_initial>:



State TimeBomb_initial(TimeBomb * const me, Event const * const e) {
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
	return TRAN(TimeBomb_wait4button);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <TimeBomb_initial+0x20>)
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	08005c75 	.word	0x08005c75

08005c0c <TimeBomb_armed>:


State TimeBomb_armed(TimeBomb * const me, Event const * const e){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
	State Status;

	switch(e->sig){
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d013      	beq.n	8005c46 <TimeBomb_armed+0x3a>
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	dc17      	bgt.n	8005c52 <TimeBomb_armed+0x46>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <TimeBomb_armed+0x30>
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d113      	bne.n	8005c52 <TimeBomb_armed+0x46>
		case EXIT_SIG:{
			BspLed1Off();
 8005c2a:	f7ff ff8b 	bl	8005b44 <BspLed1Off>
			BspLed2Off();
 8005c2e:	f7ff ffa1 	bl	8005b74 <BspLed2Off>
			BspLed3Off();
 8005c32:	f7ff ffb7 	bl	8005ba4 <BspLed3Off>
			Status = HANDLED_STATUS;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
			break;
 8005c3a:	e010      	b.n	8005c5e <TimeBomb_armed+0x52>
		}
		case INIT_SIG:{
			Status = TRAN(TimeBomb_wait4button);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <TimeBomb_armed+0x5c>)
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
		}
		case BUTTON2_PRESSED_SIG:{
			Status = TRAN(TimeBomb_defused);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a08      	ldr	r2, [pc, #32]	; (8005c6c <TimeBomb_armed+0x60>)
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]
			break;
 8005c50:	e005      	b.n	8005c5e <TimeBomb_armed+0x52>
		}
		default:{
			Status = SUPER(Hsm_top);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <TimeBomb_armed+0x64>)
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	2304      	movs	r3, #4
 8005c5a:	73fb      	strb	r3, [r7, #15]
			break;
 8005c5c:	bf00      	nop
		}
	}

	return Status;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	08005c75 	.word	0x08005c75
 8005c6c:	08005e05 	.word	0x08005e05
 8005c70:	080005cd 	.word	0x080005cd

08005c74 <TimeBomb_wait4button>:

State TimeBomb_wait4button(TimeBomb * const me, Event const * const e){
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	State Status;

	switch(e->sig){
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d010      	beq.n	8005ca8 <TimeBomb_wait4button+0x34>
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	dc17      	bgt.n	8005cba <TimeBomb_wait4button+0x46>
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d002      	beq.n	8005c94 <TimeBomb_wait4button+0x20>
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d005      	beq.n	8005c9e <TimeBomb_wait4button+0x2a>
 8005c92:	e012      	b.n	8005cba <TimeBomb_wait4button+0x46>
		case ENTRY_SIG:{
			BspLed1On();
 8005c94:	f7ff ff4a 	bl	8005b2c <BspLed1On>
			Status = HANDLED_STATUS;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
			break;
 8005c9c:	e013      	b.n	8005cc6 <TimeBomb_wait4button+0x52>
		}
		case EXIT_SIG:{
			BspLed1Off();
 8005c9e:	f7ff ff51 	bl	8005b44 <BspLed1Off>
			Status = HANDLED_STATUS;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
			break;
 8005ca6:	e00e      	b.n	8005cc6 <TimeBomb_wait4button+0x52>
		}
		case BUTTON_PRESSED_SIG:{
			me->blink_cntr = 3U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2203      	movs	r2, #3
 8005cac:	621a      	str	r2, [r3, #32]
			Status =TRAN(TimeBomb_blink);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a07      	ldr	r2, [pc, #28]	; (8005cd0 <TimeBomb_wait4button+0x5c>)
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
			break;
 8005cb8:	e005      	b.n	8005cc6 <TimeBomb_wait4button+0x52>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = SUPER(TimeBomb_armed);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <TimeBomb_wait4button+0x60>)
 8005cbe:	605a      	str	r2, [r3, #4]
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	73fb      	strb	r3, [r7, #15]
			break;
 8005cc4:	bf00      	nop
		}
	}

	return Status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08005cd9 	.word	0x08005cd9
 8005cd4:	08005c0d 	.word	0x08005c0d

08005cd8 <TimeBomb_blink>:


State TimeBomb_blink(TimeBomb * const me, Event const * const e) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]

	State Status;

	switch(e->sig){
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	2b07      	cmp	r3, #7
 8005ce8:	d018      	beq.n	8005d1c <TimeBomb_blink+0x44>
 8005cea:	2b07      	cmp	r3, #7
 8005cec:	dc1c      	bgt.n	8005d28 <TimeBomb_blink+0x50>
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d002      	beq.n	8005cf8 <TimeBomb_blink+0x20>
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d00d      	beq.n	8005d12 <TimeBomb_blink+0x3a>
 8005cf6:	e017      	b.n	8005d28 <TimeBomb_blink+0x50>
		case ENTRY_SIG:{
			BspLed2On();
 8005cf8:	f7ff ff30 	bl	8005b5c <BspLed2On>
			TimeEvent_arm(&me->te,OS_TICKS_PER_SEC/2,0U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3310      	adds	r3, #16
 8005d00:	2200      	movs	r2, #0
 8005d02:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fa fd34 	bl	8000774 <TimeEvent_arm>
			Status = HANDLED_STATUS;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
			break;
 8005d10:	e010      	b.n	8005d34 <TimeBomb_blink+0x5c>
		}
		case EXIT_SIG:{
			BspLed2Off();
 8005d12:	f7ff ff2f 	bl	8005b74 <BspLed2Off>
			Status = HANDLED_STATUS;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
			break;
 8005d1a:	e00b      	b.n	8005d34 <TimeBomb_blink+0x5c>
		}
		case TIMEOUT_SIG:{
			Status = TRAN(TimeBomb_pause);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <TimeBomb_blink+0x68>)
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
			break;
 8005d26:	e005      	b.n	8005d34 <TimeBomb_blink+0x5c>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = SUPER(TimeBomb_armed);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a06      	ldr	r2, [pc, #24]	; (8005d44 <TimeBomb_blink+0x6c>)
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	2304      	movs	r3, #4
 8005d30:	73fb      	strb	r3, [r7, #15]
			break;
 8005d32:	bf00      	nop
		}
	}

	return Status;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	08005d49 	.word	0x08005d49
 8005d44:	08005c0d 	.word	0x08005c0d

08005d48 <TimeBomb_pause>:



State TimeBomb_pause(TimeBomb * const me, Event const * const e){
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]


	State Status;

	switch(e->sig){
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d002      	beq.n	8005d60 <TimeBomb_pause+0x18>
 8005d5a:	2b07      	cmp	r3, #7
 8005d5c:	d00b      	beq.n	8005d76 <TimeBomb_pause+0x2e>
 8005d5e:	e01f      	b.n	8005da0 <TimeBomb_pause+0x58>
		case ENTRY_SIG:{
			TimeEvent_arm(&me->te,OS_TICKS_PER_SEC/2,0U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3310      	adds	r3, #16
 8005d64:	2200      	movs	r2, #0
 8005d66:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fa fd02 	bl	8000774 <TimeEvent_arm>
			Status = HANDLED_STATUS;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
			break;
 8005d74:	e01a      	b.n	8005dac <TimeBomb_pause+0x64>
		}
		case TIMEOUT_SIG:{
			--me->blink_cntr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	621a      	str	r2, [r3, #32]
			if(me->blink_cntr > 0U){
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <TimeBomb_pause+0x4c>
				Status = TRAN(TimeBomb_blink);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <TimeBomb_pause+0x70>)
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
			}
			else{
				Status = TRAN(TimeBomb_boom);
			}
			break;
 8005d92:	e00b      	b.n	8005dac <TimeBomb_pause+0x64>
				Status = TRAN(TimeBomb_boom);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <TimeBomb_pause+0x74>)
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73fb      	strb	r3, [r7, #15]
			break;
 8005d9e:	e005      	b.n	8005dac <TimeBomb_pause+0x64>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = SUPER(TimeBomb_armed);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a07      	ldr	r2, [pc, #28]	; (8005dc0 <TimeBomb_pause+0x78>)
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	2304      	movs	r3, #4
 8005da8:	73fb      	strb	r3, [r7, #15]
			break;
 8005daa:	bf00      	nop
		}
	}

	return Status;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	08005cd9 	.word	0x08005cd9
 8005dbc:	08005dc5 	.word	0x08005dc5
 8005dc0:	08005c0d 	.word	0x08005c0d

08005dc4 <TimeBomb_boom>:


State TimeBomb_boom(TimeBomb * const me, Event const * const e){
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]


	State Status;

	switch(e->sig){
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d108      	bne.n	8005de8 <TimeBomb_boom+0x24>
		case ENTRY_SIG:{
			BspLed1On();
 8005dd6:	f7ff fea9 	bl	8005b2c <BspLed1On>
			BspLed2On();
 8005dda:	f7ff febf 	bl	8005b5c <BspLed2On>
			BspLed3On();
 8005dde:	f7ff fed5 	bl	8005b8c <BspLed3On>
			Status = HANDLED_STATUS;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
			break;
 8005de6:	e005      	b.n	8005df4 <TimeBomb_boom+0x30>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = SUPER(TimeBomb_armed);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <TimeBomb_boom+0x3c>)
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	2304      	movs	r3, #4
 8005df0:	73fb      	strb	r3, [r7, #15]
			break;
 8005df2:	bf00      	nop
		}
	}

	return Status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	08005c0d 	.word	0x08005c0d

08005e04 <TimeBomb_defused>:


State TimeBomb_defused(TimeBomb * const me, Event const * const e){
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	State Status;

	switch(e->sig){
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d002      	beq.n	8005e1c <TimeBomb_defused+0x18>
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d009      	beq.n	8005e2e <TimeBomb_defused+0x2a>
 8005e1a:	e00e      	b.n	8005e3a <TimeBomb_defused+0x36>
		case ENTRY_SIG:{
			BspLed1Off();
 8005e1c:	f7ff fe92 	bl	8005b44 <BspLed1Off>
			BspLed2On();
 8005e20:	f7ff fe9c 	bl	8005b5c <BspLed2On>
			BspLed3Off();
 8005e24:	f7ff febe 	bl	8005ba4 <BspLed3Off>
			Status = HANDLED_STATUS;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
			break;
 8005e2c:	e00b      	b.n	8005e46 <TimeBomb_defused+0x42>
		}
		case BUTTON2_PRESSED_SIG:{
			Status = TRAN(TimeBomb_armed);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a07      	ldr	r2, [pc, #28]	; (8005e50 <TimeBomb_defused+0x4c>)
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]
			break;
 8005e38:	e005      	b.n	8005e46 <TimeBomb_defused+0x42>
		}
		default:{
			Status = SUPER(Hsm_top);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a05      	ldr	r2, [pc, #20]	; (8005e54 <TimeBomb_defused+0x50>)
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	2304      	movs	r3, #4
 8005e42:	73fb      	strb	r3, [r7, #15]
			break;
 8005e44:	bf00      	nop
		}
	}

	return Status;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	08005c0d 	.word	0x08005c0d
 8005e54:	080005cd 	.word	0x080005cd

08005e58 <App_TimeTickHook>:

/* uCOS-II application hooks ===============================================*/
void App_TimeTickHook(void) {
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
        uint32_t previous;
    } buttons = { 0U, 0U };
    uint32_t current;
    uint32_t tmp;

    TimeEvent_tick(); /* process all uC/AO time events */
 8005e5e:	f7fa fc9d 	bl	800079c <TimeEvent_tick>

    /* Perform the debouncing of buttons. The algorithm for debouncing
    * adapted from the book "Embedded Systems Dictionary" by Jack Ganssle
    * and Michael Barr, page 71.
    */
    current = BspGetButtonState(1U) | BspGetButtonState(2U); /* read SW1/SW2 */
 8005e62:	2001      	movs	r0, #1
 8005e64:	f7ff fe28 	bl	8005ab8 <BspGetButtonState>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461c      	mov	r4, r3
 8005e6c:	2002      	movs	r0, #2
 8005e6e:	f7ff fe23 	bl	8005ab8 <BspGetButtonState>
 8005e72:	4603      	mov	r3, r0
 8005e74:	4323      	orrs	r3, r4
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	607b      	str	r3, [r7, #4]
    tmp = buttons.depressed; /* save the debounced depressed buttons */
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	603b      	str	r3, [r7, #0]
    buttons.depressed |= (buttons.previous & current); /* set depressed */
 8005e80:	4b2d      	ldr	r3, [pc, #180]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005e86:	6859      	ldr	r1, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005e90:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.previous | current); /* clear released */
 8005e92:	4b29      	ldr	r3, [pc, #164]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	4a25      	ldr	r2, [pc, #148]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005ea2:	6013      	str	r3, [r2, #0]
    buttons.previous   = current; /* update the history */
 8005ea4:	4a24      	ldr	r2, [pc, #144]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6053      	str	r3, [r2, #4]
    tmp ^= buttons.depressed;     /* changed debounced depressed */
 8005eaa:	4b23      	ldr	r3, [pc, #140]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	4053      	eors	r3, r2
 8005eb2:	603b      	str	r3, [r7, #0]

    if ((tmp & BspGetButtonState(1U)) != 0U) {  /* debounced SW1 state changed? */
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	f7ff fdff 	bl	8005ab8 <BspGetButtonState>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d015      	beq.n	8005ef2 <App_TimeTickHook+0x9a>
        if ((buttons.depressed & BspGetButtonState(1U)) != 0U) { /* is SW1 depressed? */
 8005ec6:	4b1c      	ldr	r3, [pc, #112]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	2001      	movs	r0, #1
 8005ecc:	f7ff fdf4 	bl	8005ab8 <BspGetButtonState>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4023      	ands	r3, r4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d006      	beq.n	8005ee6 <App_TimeTickHook+0x8e>
            /* post the "button-pressed" event from ISR */
            static Event const buttonPressedEvt = {BUTTON_PRESSED_SIG};
            Active_post(AO_TimeBomb, &buttonPressedEvt);
 8005ed8:	4b18      	ldr	r3, [pc, #96]	; (8005f3c <App_TimeTickHook+0xe4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4918      	ldr	r1, [pc, #96]	; (8005f40 <App_TimeTickHook+0xe8>)
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fa fbf2 	bl	80006c8 <Active_post>
 8005ee4:	e005      	b.n	8005ef2 <App_TimeTickHook+0x9a>
        }
        else { /* the button is released */
            /* post the "button-released" event from ISR */
            static Event const buttonReleasedEvt = {BUTTON_RELEASED_SIG};
            Active_post(AO_TimeBomb, &buttonReleasedEvt);
 8005ee6:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <App_TimeTickHook+0xe4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4916      	ldr	r1, [pc, #88]	; (8005f44 <App_TimeTickHook+0xec>)
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fa fbeb 	bl	80006c8 <Active_post>
        }
    }


    if ((tmp & BspGetButtonState(2U)) != 0U) {  /* debounced SW1 state changed? */
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f7ff fde0 	bl	8005ab8 <BspGetButtonState>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d015      	beq.n	8005f30 <App_TimeTickHook+0xd8>
        if ((buttons.depressed & BspGetButtonState(2U)) != 0U) { /* is SW1 depressed? */
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <App_TimeTickHook+0xe0>)
 8005f06:	681c      	ldr	r4, [r3, #0]
 8005f08:	2002      	movs	r0, #2
 8005f0a:	f7ff fdd5 	bl	8005ab8 <BspGetButtonState>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4023      	ands	r3, r4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <App_TimeTickHook+0xcc>
            /* post the "button-pressed" event from ISR */
            static Event const button2PressedEvt = {BUTTON2_PRESSED_SIG};
            Active_post(AO_TimeBomb, &button2PressedEvt);
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <App_TimeTickHook+0xe4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	490b      	ldr	r1, [pc, #44]	; (8005f48 <App_TimeTickHook+0xf0>)
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa fbd3 	bl	80006c8 <Active_post>
            /* post the "button-released" event from ISR */
            static Event const button2ReleasedEvt = {BUTTON2_RELEASED_SIG};
            Active_post(AO_TimeBomb, &button2ReleasedEvt);
        }
    }
}
 8005f22:	e005      	b.n	8005f30 <App_TimeTickHook+0xd8>
            Active_post(AO_TimeBomb, &button2ReleasedEvt);
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <App_TimeTickHook+0xe4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4908      	ldr	r1, [pc, #32]	; (8005f4c <App_TimeTickHook+0xf4>)
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fa fbcc 	bl	80006c8 <Active_post>
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd90      	pop	{r4, r7, pc}
 8005f38:	200046d0 	.word	0x200046d0
 8005f3c:	20000000 	.word	0x20000000
 8005f40:	080069d0 	.word	0x080069d0
 8005f44:	080069d4 	.word	0x080069d4
 8005f48:	080069d8 	.word	0x080069d8
 8005f4c:	080069dc 	.word	0x080069dc

08005f50 <__errno>:
 8005f50:	4b01      	ldr	r3, [pc, #4]	; (8005f58 <__errno+0x8>)
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000014 	.word	0x20000014

08005f5c <std>:
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	4604      	mov	r4, r0
 8005f62:	e9c0 3300 	strd	r3, r3, [r0]
 8005f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f6a:	6083      	str	r3, [r0, #8]
 8005f6c:	8181      	strh	r1, [r0, #12]
 8005f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f70:	81c2      	strh	r2, [r0, #14]
 8005f72:	6183      	str	r3, [r0, #24]
 8005f74:	4619      	mov	r1, r3
 8005f76:	2208      	movs	r2, #8
 8005f78:	305c      	adds	r0, #92	; 0x5c
 8005f7a:	f000 f91a 	bl	80061b2 <memset>
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <std+0x38>)
 8005f80:	6263      	str	r3, [r4, #36]	; 0x24
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <std+0x3c>)
 8005f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <std+0x40>)
 8005f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x44>)
 8005f8c:	6224      	str	r4, [r4, #32]
 8005f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8005f90:	bd10      	pop	{r4, pc}
 8005f92:	bf00      	nop
 8005f94:	0800656d 	.word	0x0800656d
 8005f98:	0800658f 	.word	0x0800658f
 8005f9c:	080065c7 	.word	0x080065c7
 8005fa0:	080065eb 	.word	0x080065eb

08005fa4 <_cleanup_r>:
 8005fa4:	4901      	ldr	r1, [pc, #4]	; (8005fac <_cleanup_r+0x8>)
 8005fa6:	f000 b8af 	b.w	8006108 <_fwalk_reent>
 8005faa:	bf00      	nop
 8005fac:	08006745 	.word	0x08006745

08005fb0 <__sfmoreglue>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	2268      	movs	r2, #104	; 0x68
 8005fb4:	1e4d      	subs	r5, r1, #1
 8005fb6:	4355      	muls	r5, r2
 8005fb8:	460e      	mov	r6, r1
 8005fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fbe:	f000 f921 	bl	8006204 <_malloc_r>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	b140      	cbz	r0, 8005fd8 <__sfmoreglue+0x28>
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8005fcc:	300c      	adds	r0, #12
 8005fce:	60a0      	str	r0, [r4, #8]
 8005fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fd4:	f000 f8ed 	bl	80061b2 <memset>
 8005fd8:	4620      	mov	r0, r4
 8005fda:	bd70      	pop	{r4, r5, r6, pc}

08005fdc <__sfp_lock_acquire>:
 8005fdc:	4801      	ldr	r0, [pc, #4]	; (8005fe4 <__sfp_lock_acquire+0x8>)
 8005fde:	f000 b8d8 	b.w	8006192 <__retarget_lock_acquire_recursive>
 8005fe2:	bf00      	nop
 8005fe4:	200046d9 	.word	0x200046d9

08005fe8 <__sfp_lock_release>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__sfp_lock_release+0x8>)
 8005fea:	f000 b8d3 	b.w	8006194 <__retarget_lock_release_recursive>
 8005fee:	bf00      	nop
 8005ff0:	200046d9 	.word	0x200046d9

08005ff4 <__sinit_lock_acquire>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__sinit_lock_acquire+0x8>)
 8005ff6:	f000 b8cc 	b.w	8006192 <__retarget_lock_acquire_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	200046da 	.word	0x200046da

08006000 <__sinit_lock_release>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__sinit_lock_release+0x8>)
 8006002:	f000 b8c7 	b.w	8006194 <__retarget_lock_release_recursive>
 8006006:	bf00      	nop
 8006008:	200046da 	.word	0x200046da

0800600c <__sinit>:
 800600c:	b510      	push	{r4, lr}
 800600e:	4604      	mov	r4, r0
 8006010:	f7ff fff0 	bl	8005ff4 <__sinit_lock_acquire>
 8006014:	69a3      	ldr	r3, [r4, #24]
 8006016:	b11b      	cbz	r3, 8006020 <__sinit+0x14>
 8006018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601c:	f7ff bff0 	b.w	8006000 <__sinit_lock_release>
 8006020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006024:	6523      	str	r3, [r4, #80]	; 0x50
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <__sinit+0x68>)
 8006028:	4a13      	ldr	r2, [pc, #76]	; (8006078 <__sinit+0x6c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	62a2      	str	r2, [r4, #40]	; 0x28
 800602e:	42a3      	cmp	r3, r4
 8006030:	bf04      	itt	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	61a3      	streq	r3, [r4, #24]
 8006036:	4620      	mov	r0, r4
 8006038:	f000 f820 	bl	800607c <__sfp>
 800603c:	6060      	str	r0, [r4, #4]
 800603e:	4620      	mov	r0, r4
 8006040:	f000 f81c 	bl	800607c <__sfp>
 8006044:	60a0      	str	r0, [r4, #8]
 8006046:	4620      	mov	r0, r4
 8006048:	f000 f818 	bl	800607c <__sfp>
 800604c:	2200      	movs	r2, #0
 800604e:	60e0      	str	r0, [r4, #12]
 8006050:	2104      	movs	r1, #4
 8006052:	6860      	ldr	r0, [r4, #4]
 8006054:	f7ff ff82 	bl	8005f5c <std>
 8006058:	68a0      	ldr	r0, [r4, #8]
 800605a:	2201      	movs	r2, #1
 800605c:	2109      	movs	r1, #9
 800605e:	f7ff ff7d 	bl	8005f5c <std>
 8006062:	68e0      	ldr	r0, [r4, #12]
 8006064:	2202      	movs	r2, #2
 8006066:	2112      	movs	r1, #18
 8006068:	f7ff ff78 	bl	8005f5c <std>
 800606c:	2301      	movs	r3, #1
 800606e:	61a3      	str	r3, [r4, #24]
 8006070:	e7d2      	b.n	8006018 <__sinit+0xc>
 8006072:	bf00      	nop
 8006074:	08006a40 	.word	0x08006a40
 8006078:	08005fa5 	.word	0x08005fa5

0800607c <__sfp>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	4607      	mov	r7, r0
 8006080:	f7ff ffac 	bl	8005fdc <__sfp_lock_acquire>
 8006084:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <__sfp+0x84>)
 8006086:	681e      	ldr	r6, [r3, #0]
 8006088:	69b3      	ldr	r3, [r6, #24]
 800608a:	b913      	cbnz	r3, 8006092 <__sfp+0x16>
 800608c:	4630      	mov	r0, r6
 800608e:	f7ff ffbd 	bl	800600c <__sinit>
 8006092:	3648      	adds	r6, #72	; 0x48
 8006094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006098:	3b01      	subs	r3, #1
 800609a:	d503      	bpl.n	80060a4 <__sfp+0x28>
 800609c:	6833      	ldr	r3, [r6, #0]
 800609e:	b30b      	cbz	r3, 80060e4 <__sfp+0x68>
 80060a0:	6836      	ldr	r6, [r6, #0]
 80060a2:	e7f7      	b.n	8006094 <__sfp+0x18>
 80060a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060a8:	b9d5      	cbnz	r5, 80060e0 <__sfp+0x64>
 80060aa:	4b16      	ldr	r3, [pc, #88]	; (8006104 <__sfp+0x88>)
 80060ac:	60e3      	str	r3, [r4, #12]
 80060ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060b2:	6665      	str	r5, [r4, #100]	; 0x64
 80060b4:	f000 f86c 	bl	8006190 <__retarget_lock_init_recursive>
 80060b8:	f7ff ff96 	bl	8005fe8 <__sfp_lock_release>
 80060bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060c4:	6025      	str	r5, [r4, #0]
 80060c6:	61a5      	str	r5, [r4, #24]
 80060c8:	2208      	movs	r2, #8
 80060ca:	4629      	mov	r1, r5
 80060cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060d0:	f000 f86f 	bl	80061b2 <memset>
 80060d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060dc:	4620      	mov	r0, r4
 80060de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e0:	3468      	adds	r4, #104	; 0x68
 80060e2:	e7d9      	b.n	8006098 <__sfp+0x1c>
 80060e4:	2104      	movs	r1, #4
 80060e6:	4638      	mov	r0, r7
 80060e8:	f7ff ff62 	bl	8005fb0 <__sfmoreglue>
 80060ec:	4604      	mov	r4, r0
 80060ee:	6030      	str	r0, [r6, #0]
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d1d5      	bne.n	80060a0 <__sfp+0x24>
 80060f4:	f7ff ff78 	bl	8005fe8 <__sfp_lock_release>
 80060f8:	230c      	movs	r3, #12
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	e7ee      	b.n	80060dc <__sfp+0x60>
 80060fe:	bf00      	nop
 8006100:	08006a40 	.word	0x08006a40
 8006104:	ffff0001 	.word	0xffff0001

08006108 <_fwalk_reent>:
 8006108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800610c:	4606      	mov	r6, r0
 800610e:	4688      	mov	r8, r1
 8006110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006114:	2700      	movs	r7, #0
 8006116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800611a:	f1b9 0901 	subs.w	r9, r9, #1
 800611e:	d505      	bpl.n	800612c <_fwalk_reent+0x24>
 8006120:	6824      	ldr	r4, [r4, #0]
 8006122:	2c00      	cmp	r4, #0
 8006124:	d1f7      	bne.n	8006116 <_fwalk_reent+0xe>
 8006126:	4638      	mov	r0, r7
 8006128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612c:	89ab      	ldrh	r3, [r5, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d907      	bls.n	8006142 <_fwalk_reent+0x3a>
 8006132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006136:	3301      	adds	r3, #1
 8006138:	d003      	beq.n	8006142 <_fwalk_reent+0x3a>
 800613a:	4629      	mov	r1, r5
 800613c:	4630      	mov	r0, r6
 800613e:	47c0      	blx	r8
 8006140:	4307      	orrs	r7, r0
 8006142:	3568      	adds	r5, #104	; 0x68
 8006144:	e7e9      	b.n	800611a <_fwalk_reent+0x12>
	...

08006148 <__libc_init_array>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4d0d      	ldr	r5, [pc, #52]	; (8006180 <__libc_init_array+0x38>)
 800614c:	4c0d      	ldr	r4, [pc, #52]	; (8006184 <__libc_init_array+0x3c>)
 800614e:	1b64      	subs	r4, r4, r5
 8006150:	10a4      	asrs	r4, r4, #2
 8006152:	2600      	movs	r6, #0
 8006154:	42a6      	cmp	r6, r4
 8006156:	d109      	bne.n	800616c <__libc_init_array+0x24>
 8006158:	4d0b      	ldr	r5, [pc, #44]	; (8006188 <__libc_init_array+0x40>)
 800615a:	4c0c      	ldr	r4, [pc, #48]	; (800618c <__libc_init_array+0x44>)
 800615c:	f000 fbea 	bl	8006934 <_init>
 8006160:	1b64      	subs	r4, r4, r5
 8006162:	10a4      	asrs	r4, r4, #2
 8006164:	2600      	movs	r6, #0
 8006166:	42a6      	cmp	r6, r4
 8006168:	d105      	bne.n	8006176 <__libc_init_array+0x2e>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006170:	4798      	blx	r3
 8006172:	3601      	adds	r6, #1
 8006174:	e7ee      	b.n	8006154 <__libc_init_array+0xc>
 8006176:	f855 3b04 	ldr.w	r3, [r5], #4
 800617a:	4798      	blx	r3
 800617c:	3601      	adds	r6, #1
 800617e:	e7f2      	b.n	8006166 <__libc_init_array+0x1e>
 8006180:	08006a4c 	.word	0x08006a4c
 8006184:	08006a4c 	.word	0x08006a4c
 8006188:	08006a4c 	.word	0x08006a4c
 800618c:	08006a50 	.word	0x08006a50

08006190 <__retarget_lock_init_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_acquire_recursive>:
 8006192:	4770      	bx	lr

08006194 <__retarget_lock_release_recursive>:
 8006194:	4770      	bx	lr

08006196 <memcpy>:
 8006196:	440a      	add	r2, r1
 8006198:	4291      	cmp	r1, r2
 800619a:	f100 33ff 	add.w	r3, r0, #4294967295
 800619e:	d100      	bne.n	80061a2 <memcpy+0xc>
 80061a0:	4770      	bx	lr
 80061a2:	b510      	push	{r4, lr}
 80061a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ac:	4291      	cmp	r1, r2
 80061ae:	d1f9      	bne.n	80061a4 <memcpy+0xe>
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <memset>:
 80061b2:	4402      	add	r2, r0
 80061b4:	4603      	mov	r3, r0
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d100      	bne.n	80061bc <memset+0xa>
 80061ba:	4770      	bx	lr
 80061bc:	f803 1b01 	strb.w	r1, [r3], #1
 80061c0:	e7f9      	b.n	80061b6 <memset+0x4>
	...

080061c4 <sbrk_aligned>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4e0e      	ldr	r6, [pc, #56]	; (8006200 <sbrk_aligned+0x3c>)
 80061c8:	460c      	mov	r4, r1
 80061ca:	6831      	ldr	r1, [r6, #0]
 80061cc:	4605      	mov	r5, r0
 80061ce:	b911      	cbnz	r1, 80061d6 <sbrk_aligned+0x12>
 80061d0:	f000 f8f6 	bl	80063c0 <_sbrk_r>
 80061d4:	6030      	str	r0, [r6, #0]
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 f8f1 	bl	80063c0 <_sbrk_r>
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d00a      	beq.n	80061f8 <sbrk_aligned+0x34>
 80061e2:	1cc4      	adds	r4, r0, #3
 80061e4:	f024 0403 	bic.w	r4, r4, #3
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d007      	beq.n	80061fc <sbrk_aligned+0x38>
 80061ec:	1a21      	subs	r1, r4, r0
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 f8e6 	bl	80063c0 <_sbrk_r>
 80061f4:	3001      	adds	r0, #1
 80061f6:	d101      	bne.n	80061fc <sbrk_aligned+0x38>
 80061f8:	f04f 34ff 	mov.w	r4, #4294967295
 80061fc:	4620      	mov	r0, r4
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	200046e0 	.word	0x200046e0

08006204 <_malloc_r>:
 8006204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006208:	1ccd      	adds	r5, r1, #3
 800620a:	f025 0503 	bic.w	r5, r5, #3
 800620e:	3508      	adds	r5, #8
 8006210:	2d0c      	cmp	r5, #12
 8006212:	bf38      	it	cc
 8006214:	250c      	movcc	r5, #12
 8006216:	2d00      	cmp	r5, #0
 8006218:	4607      	mov	r7, r0
 800621a:	db01      	blt.n	8006220 <_malloc_r+0x1c>
 800621c:	42a9      	cmp	r1, r5
 800621e:	d905      	bls.n	800622c <_malloc_r+0x28>
 8006220:	230c      	movs	r3, #12
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	2600      	movs	r6, #0
 8006226:	4630      	mov	r0, r6
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	4e2e      	ldr	r6, [pc, #184]	; (80062e8 <_malloc_r+0xe4>)
 800622e:	f000 fb05 	bl	800683c <__malloc_lock>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	461c      	mov	r4, r3
 8006236:	bb34      	cbnz	r4, 8006286 <_malloc_r+0x82>
 8006238:	4629      	mov	r1, r5
 800623a:	4638      	mov	r0, r7
 800623c:	f7ff ffc2 	bl	80061c4 <sbrk_aligned>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	4604      	mov	r4, r0
 8006244:	d14d      	bne.n	80062e2 <_malloc_r+0xde>
 8006246:	6834      	ldr	r4, [r6, #0]
 8006248:	4626      	mov	r6, r4
 800624a:	2e00      	cmp	r6, #0
 800624c:	d140      	bne.n	80062d0 <_malloc_r+0xcc>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	4631      	mov	r1, r6
 8006252:	4638      	mov	r0, r7
 8006254:	eb04 0803 	add.w	r8, r4, r3
 8006258:	f000 f8b2 	bl	80063c0 <_sbrk_r>
 800625c:	4580      	cmp	r8, r0
 800625e:	d13a      	bne.n	80062d6 <_malloc_r+0xd2>
 8006260:	6821      	ldr	r1, [r4, #0]
 8006262:	3503      	adds	r5, #3
 8006264:	1a6d      	subs	r5, r5, r1
 8006266:	f025 0503 	bic.w	r5, r5, #3
 800626a:	3508      	adds	r5, #8
 800626c:	2d0c      	cmp	r5, #12
 800626e:	bf38      	it	cc
 8006270:	250c      	movcc	r5, #12
 8006272:	4629      	mov	r1, r5
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff ffa5 	bl	80061c4 <sbrk_aligned>
 800627a:	3001      	adds	r0, #1
 800627c:	d02b      	beq.n	80062d6 <_malloc_r+0xd2>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	442b      	add	r3, r5
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	e00e      	b.n	80062a4 <_malloc_r+0xa0>
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	1b52      	subs	r2, r2, r5
 800628a:	d41e      	bmi.n	80062ca <_malloc_r+0xc6>
 800628c:	2a0b      	cmp	r2, #11
 800628e:	d916      	bls.n	80062be <_malloc_r+0xba>
 8006290:	1961      	adds	r1, r4, r5
 8006292:	42a3      	cmp	r3, r4
 8006294:	6025      	str	r5, [r4, #0]
 8006296:	bf18      	it	ne
 8006298:	6059      	strne	r1, [r3, #4]
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	bf08      	it	eq
 800629e:	6031      	streq	r1, [r6, #0]
 80062a0:	5162      	str	r2, [r4, r5]
 80062a2:	604b      	str	r3, [r1, #4]
 80062a4:	4638      	mov	r0, r7
 80062a6:	f104 060b 	add.w	r6, r4, #11
 80062aa:	f000 facd 	bl	8006848 <__malloc_unlock>
 80062ae:	f026 0607 	bic.w	r6, r6, #7
 80062b2:	1d23      	adds	r3, r4, #4
 80062b4:	1af2      	subs	r2, r6, r3
 80062b6:	d0b6      	beq.n	8006226 <_malloc_r+0x22>
 80062b8:	1b9b      	subs	r3, r3, r6
 80062ba:	50a3      	str	r3, [r4, r2]
 80062bc:	e7b3      	b.n	8006226 <_malloc_r+0x22>
 80062be:	6862      	ldr	r2, [r4, #4]
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	bf0c      	ite	eq
 80062c4:	6032      	streq	r2, [r6, #0]
 80062c6:	605a      	strne	r2, [r3, #4]
 80062c8:	e7ec      	b.n	80062a4 <_malloc_r+0xa0>
 80062ca:	4623      	mov	r3, r4
 80062cc:	6864      	ldr	r4, [r4, #4]
 80062ce:	e7b2      	b.n	8006236 <_malloc_r+0x32>
 80062d0:	4634      	mov	r4, r6
 80062d2:	6876      	ldr	r6, [r6, #4]
 80062d4:	e7b9      	b.n	800624a <_malloc_r+0x46>
 80062d6:	230c      	movs	r3, #12
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4638      	mov	r0, r7
 80062dc:	f000 fab4 	bl	8006848 <__malloc_unlock>
 80062e0:	e7a1      	b.n	8006226 <_malloc_r+0x22>
 80062e2:	6025      	str	r5, [r4, #0]
 80062e4:	e7de      	b.n	80062a4 <_malloc_r+0xa0>
 80062e6:	bf00      	nop
 80062e8:	200046dc 	.word	0x200046dc

080062ec <cleanup_glue>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	460c      	mov	r4, r1
 80062f0:	6809      	ldr	r1, [r1, #0]
 80062f2:	4605      	mov	r5, r0
 80062f4:	b109      	cbz	r1, 80062fa <cleanup_glue+0xe>
 80062f6:	f7ff fff9 	bl	80062ec <cleanup_glue>
 80062fa:	4621      	mov	r1, r4
 80062fc:	4628      	mov	r0, r5
 80062fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006302:	f000 baa7 	b.w	8006854 <_free_r>
	...

08006308 <_reclaim_reent>:
 8006308:	4b2c      	ldr	r3, [pc, #176]	; (80063bc <_reclaim_reent+0xb4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4283      	cmp	r3, r0
 800630e:	b570      	push	{r4, r5, r6, lr}
 8006310:	4604      	mov	r4, r0
 8006312:	d051      	beq.n	80063b8 <_reclaim_reent+0xb0>
 8006314:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006316:	b143      	cbz	r3, 800632a <_reclaim_reent+0x22>
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d14a      	bne.n	80063b4 <_reclaim_reent+0xac>
 800631e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	b111      	cbz	r1, 800632a <_reclaim_reent+0x22>
 8006324:	4620      	mov	r0, r4
 8006326:	f000 fa95 	bl	8006854 <_free_r>
 800632a:	6961      	ldr	r1, [r4, #20]
 800632c:	b111      	cbz	r1, 8006334 <_reclaim_reent+0x2c>
 800632e:	4620      	mov	r0, r4
 8006330:	f000 fa90 	bl	8006854 <_free_r>
 8006334:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006336:	b111      	cbz	r1, 800633e <_reclaim_reent+0x36>
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fa8b 	bl	8006854 <_free_r>
 800633e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006340:	b111      	cbz	r1, 8006348 <_reclaim_reent+0x40>
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fa86 	bl	8006854 <_free_r>
 8006348:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800634a:	b111      	cbz	r1, 8006352 <_reclaim_reent+0x4a>
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fa81 	bl	8006854 <_free_r>
 8006352:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006354:	b111      	cbz	r1, 800635c <_reclaim_reent+0x54>
 8006356:	4620      	mov	r0, r4
 8006358:	f000 fa7c 	bl	8006854 <_free_r>
 800635c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800635e:	b111      	cbz	r1, 8006366 <_reclaim_reent+0x5e>
 8006360:	4620      	mov	r0, r4
 8006362:	f000 fa77 	bl	8006854 <_free_r>
 8006366:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006368:	b111      	cbz	r1, 8006370 <_reclaim_reent+0x68>
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fa72 	bl	8006854 <_free_r>
 8006370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006372:	b111      	cbz	r1, 800637a <_reclaim_reent+0x72>
 8006374:	4620      	mov	r0, r4
 8006376:	f000 fa6d 	bl	8006854 <_free_r>
 800637a:	69a3      	ldr	r3, [r4, #24]
 800637c:	b1e3      	cbz	r3, 80063b8 <_reclaim_reent+0xb0>
 800637e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006380:	4620      	mov	r0, r4
 8006382:	4798      	blx	r3
 8006384:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006386:	b1b9      	cbz	r1, 80063b8 <_reclaim_reent+0xb0>
 8006388:	4620      	mov	r0, r4
 800638a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800638e:	f7ff bfad 	b.w	80062ec <cleanup_glue>
 8006392:	5949      	ldr	r1, [r1, r5]
 8006394:	b941      	cbnz	r1, 80063a8 <_reclaim_reent+0xa0>
 8006396:	3504      	adds	r5, #4
 8006398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800639a:	2d80      	cmp	r5, #128	; 0x80
 800639c:	68d9      	ldr	r1, [r3, #12]
 800639e:	d1f8      	bne.n	8006392 <_reclaim_reent+0x8a>
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 fa57 	bl	8006854 <_free_r>
 80063a6:	e7ba      	b.n	800631e <_reclaim_reent+0x16>
 80063a8:	680e      	ldr	r6, [r1, #0]
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 fa52 	bl	8006854 <_free_r>
 80063b0:	4631      	mov	r1, r6
 80063b2:	e7ef      	b.n	8006394 <_reclaim_reent+0x8c>
 80063b4:	2500      	movs	r5, #0
 80063b6:	e7ef      	b.n	8006398 <_reclaim_reent+0x90>
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	bf00      	nop
 80063bc:	20000014 	.word	0x20000014

080063c0 <_sbrk_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d06      	ldr	r5, [pc, #24]	; (80063dc <_sbrk_r+0x1c>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fa fdf8 	bl	8000fc0 <_sbrk>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_sbrk_r+0x1a>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_sbrk_r+0x1a>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	200046e4 	.word	0x200046e4

080063e0 <setvbuf>:
 80063e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	461d      	mov	r5, r3
 80063e6:	4b5d      	ldr	r3, [pc, #372]	; (800655c <setvbuf+0x17c>)
 80063e8:	681f      	ldr	r7, [r3, #0]
 80063ea:	4604      	mov	r4, r0
 80063ec:	460e      	mov	r6, r1
 80063ee:	4690      	mov	r8, r2
 80063f0:	b127      	cbz	r7, 80063fc <setvbuf+0x1c>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	b913      	cbnz	r3, 80063fc <setvbuf+0x1c>
 80063f6:	4638      	mov	r0, r7
 80063f8:	f7ff fe08 	bl	800600c <__sinit>
 80063fc:	4b58      	ldr	r3, [pc, #352]	; (8006560 <setvbuf+0x180>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d167      	bne.n	80064d2 <setvbuf+0xf2>
 8006402:	687c      	ldr	r4, [r7, #4]
 8006404:	f1b8 0f02 	cmp.w	r8, #2
 8006408:	d006      	beq.n	8006418 <setvbuf+0x38>
 800640a:	f1b8 0f01 	cmp.w	r8, #1
 800640e:	f200 809f 	bhi.w	8006550 <setvbuf+0x170>
 8006412:	2d00      	cmp	r5, #0
 8006414:	f2c0 809c 	blt.w	8006550 <setvbuf+0x170>
 8006418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800641a:	07db      	lsls	r3, r3, #31
 800641c:	d405      	bmi.n	800642a <setvbuf+0x4a>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	0598      	lsls	r0, r3, #22
 8006422:	d402      	bmi.n	800642a <setvbuf+0x4a>
 8006424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006426:	f7ff feb4 	bl	8006192 <__retarget_lock_acquire_recursive>
 800642a:	4621      	mov	r1, r4
 800642c:	4638      	mov	r0, r7
 800642e:	f000 f989 	bl	8006744 <_fflush_r>
 8006432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006434:	b141      	cbz	r1, 8006448 <setvbuf+0x68>
 8006436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800643a:	4299      	cmp	r1, r3
 800643c:	d002      	beq.n	8006444 <setvbuf+0x64>
 800643e:	4638      	mov	r0, r7
 8006440:	f000 fa08 	bl	8006854 <_free_r>
 8006444:	2300      	movs	r3, #0
 8006446:	6363      	str	r3, [r4, #52]	; 0x34
 8006448:	2300      	movs	r3, #0
 800644a:	61a3      	str	r3, [r4, #24]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	0619      	lsls	r1, r3, #24
 8006452:	d503      	bpl.n	800645c <setvbuf+0x7c>
 8006454:	6921      	ldr	r1, [r4, #16]
 8006456:	4638      	mov	r0, r7
 8006458:	f000 f9fc 	bl	8006854 <_free_r>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f1b8 0f02 	cmp.w	r8, #2
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	d06c      	beq.n	8006548 <setvbuf+0x168>
 800646e:	ab01      	add	r3, sp, #4
 8006470:	466a      	mov	r2, sp
 8006472:	4621      	mov	r1, r4
 8006474:	4638      	mov	r0, r7
 8006476:	f000 f9b3 	bl	80067e0 <__swhatbuf_r>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	4318      	orrs	r0, r3
 800647e:	81a0      	strh	r0, [r4, #12]
 8006480:	2d00      	cmp	r5, #0
 8006482:	d130      	bne.n	80064e6 <setvbuf+0x106>
 8006484:	9d00      	ldr	r5, [sp, #0]
 8006486:	4628      	mov	r0, r5
 8006488:	f000 f9d0 	bl	800682c <malloc>
 800648c:	4606      	mov	r6, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d155      	bne.n	800653e <setvbuf+0x15e>
 8006492:	f8dd 9000 	ldr.w	r9, [sp]
 8006496:	45a9      	cmp	r9, r5
 8006498:	d14a      	bne.n	8006530 <setvbuf+0x150>
 800649a:	f04f 35ff 	mov.w	r5, #4294967295
 800649e:	2200      	movs	r2, #0
 80064a0:	60a2      	str	r2, [r4, #8]
 80064a2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80064a6:	6022      	str	r2, [r4, #0]
 80064a8:	6122      	str	r2, [r4, #16]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b0:	6162      	str	r2, [r4, #20]
 80064b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	07d2      	lsls	r2, r2, #31
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	d405      	bmi.n	80064ca <setvbuf+0xea>
 80064be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80064c2:	d102      	bne.n	80064ca <setvbuf+0xea>
 80064c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c6:	f7ff fe65 	bl	8006194 <__retarget_lock_release_recursive>
 80064ca:	4628      	mov	r0, r5
 80064cc:	b003      	add	sp, #12
 80064ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d2:	4b24      	ldr	r3, [pc, #144]	; (8006564 <setvbuf+0x184>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d101      	bne.n	80064dc <setvbuf+0xfc>
 80064d8:	68bc      	ldr	r4, [r7, #8]
 80064da:	e793      	b.n	8006404 <setvbuf+0x24>
 80064dc:	4b22      	ldr	r3, [pc, #136]	; (8006568 <setvbuf+0x188>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	bf08      	it	eq
 80064e2:	68fc      	ldreq	r4, [r7, #12]
 80064e4:	e78e      	b.n	8006404 <setvbuf+0x24>
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d0cd      	beq.n	8006486 <setvbuf+0xa6>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	b913      	cbnz	r3, 80064f4 <setvbuf+0x114>
 80064ee:	4638      	mov	r0, r7
 80064f0:	f7ff fd8c 	bl	800600c <__sinit>
 80064f4:	f1b8 0f01 	cmp.w	r8, #1
 80064f8:	bf08      	it	eq
 80064fa:	89a3      	ldrheq	r3, [r4, #12]
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	bf04      	itt	eq
 8006500:	f043 0301 	orreq.w	r3, r3, #1
 8006504:	81a3      	strheq	r3, [r4, #12]
 8006506:	89a2      	ldrh	r2, [r4, #12]
 8006508:	f012 0308 	ands.w	r3, r2, #8
 800650c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006510:	d01c      	beq.n	800654c <setvbuf+0x16c>
 8006512:	07d3      	lsls	r3, r2, #31
 8006514:	bf41      	itttt	mi
 8006516:	2300      	movmi	r3, #0
 8006518:	426d      	negmi	r5, r5
 800651a:	60a3      	strmi	r3, [r4, #8]
 800651c:	61a5      	strmi	r5, [r4, #24]
 800651e:	bf58      	it	pl
 8006520:	60a5      	strpl	r5, [r4, #8]
 8006522:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006524:	f015 0501 	ands.w	r5, r5, #1
 8006528:	d115      	bne.n	8006556 <setvbuf+0x176>
 800652a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800652e:	e7c8      	b.n	80064c2 <setvbuf+0xe2>
 8006530:	4648      	mov	r0, r9
 8006532:	f000 f97b 	bl	800682c <malloc>
 8006536:	4606      	mov	r6, r0
 8006538:	2800      	cmp	r0, #0
 800653a:	d0ae      	beq.n	800649a <setvbuf+0xba>
 800653c:	464d      	mov	r5, r9
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	e7d0      	b.n	80064ea <setvbuf+0x10a>
 8006548:	2500      	movs	r5, #0
 800654a:	e7a8      	b.n	800649e <setvbuf+0xbe>
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	e7e8      	b.n	8006522 <setvbuf+0x142>
 8006550:	f04f 35ff 	mov.w	r5, #4294967295
 8006554:	e7b9      	b.n	80064ca <setvbuf+0xea>
 8006556:	2500      	movs	r5, #0
 8006558:	e7b7      	b.n	80064ca <setvbuf+0xea>
 800655a:	bf00      	nop
 800655c:	20000014 	.word	0x20000014
 8006560:	08006a00 	.word	0x08006a00
 8006564:	08006a20 	.word	0x08006a20
 8006568:	080069e0 	.word	0x080069e0

0800656c <__sread>:
 800656c:	b510      	push	{r4, lr}
 800656e:	460c      	mov	r4, r1
 8006570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006574:	f000 f9ba 	bl	80068ec <_read_r>
 8006578:	2800      	cmp	r0, #0
 800657a:	bfab      	itete	ge
 800657c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800657e:	89a3      	ldrhlt	r3, [r4, #12]
 8006580:	181b      	addge	r3, r3, r0
 8006582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006586:	bfac      	ite	ge
 8006588:	6563      	strge	r3, [r4, #84]	; 0x54
 800658a:	81a3      	strhlt	r3, [r4, #12]
 800658c:	bd10      	pop	{r4, pc}

0800658e <__swrite>:
 800658e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006592:	461f      	mov	r7, r3
 8006594:	898b      	ldrh	r3, [r1, #12]
 8006596:	05db      	lsls	r3, r3, #23
 8006598:	4605      	mov	r5, r0
 800659a:	460c      	mov	r4, r1
 800659c:	4616      	mov	r6, r2
 800659e:	d505      	bpl.n	80065ac <__swrite+0x1e>
 80065a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a4:	2302      	movs	r3, #2
 80065a6:	2200      	movs	r2, #0
 80065a8:	f000 f908 	bl	80067bc <_lseek_r>
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065b6:	81a3      	strh	r3, [r4, #12]
 80065b8:	4632      	mov	r2, r6
 80065ba:	463b      	mov	r3, r7
 80065bc:	4628      	mov	r0, r5
 80065be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	f000 b817 	b.w	80065f4 <_write_r>

080065c6 <__sseek>:
 80065c6:	b510      	push	{r4, lr}
 80065c8:	460c      	mov	r4, r1
 80065ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ce:	f000 f8f5 	bl	80067bc <_lseek_r>
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	bf15      	itete	ne
 80065d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065e2:	81a3      	strheq	r3, [r4, #12]
 80065e4:	bf18      	it	ne
 80065e6:	81a3      	strhne	r3, [r4, #12]
 80065e8:	bd10      	pop	{r4, pc}

080065ea <__sclose>:
 80065ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ee:	f000 b813 	b.w	8006618 <_close_r>
	...

080065f4 <_write_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d07      	ldr	r5, [pc, #28]	; (8006614 <_write_r+0x20>)
 80065f8:	4604      	mov	r4, r0
 80065fa:	4608      	mov	r0, r1
 80065fc:	4611      	mov	r1, r2
 80065fe:	2200      	movs	r2, #0
 8006600:	602a      	str	r2, [r5, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	f7fa fb3e 	bl	8000c84 <_write>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d102      	bne.n	8006612 <_write_r+0x1e>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b103      	cbz	r3, 8006612 <_write_r+0x1e>
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	200046e4 	.word	0x200046e4

08006618 <_close_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d06      	ldr	r5, [pc, #24]	; (8006634 <_close_r+0x1c>)
 800661c:	2300      	movs	r3, #0
 800661e:	4604      	mov	r4, r0
 8006620:	4608      	mov	r0, r1
 8006622:	602b      	str	r3, [r5, #0]
 8006624:	f7fa fb5a 	bl	8000cdc <_close>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_close_r+0x1a>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_close_r+0x1a>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	200046e4 	.word	0x200046e4

08006638 <__sflush_r>:
 8006638:	898a      	ldrh	r2, [r1, #12]
 800663a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663e:	4605      	mov	r5, r0
 8006640:	0710      	lsls	r0, r2, #28
 8006642:	460c      	mov	r4, r1
 8006644:	d458      	bmi.n	80066f8 <__sflush_r+0xc0>
 8006646:	684b      	ldr	r3, [r1, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	dc05      	bgt.n	8006658 <__sflush_r+0x20>
 800664c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	dc02      	bgt.n	8006658 <__sflush_r+0x20>
 8006652:	2000      	movs	r0, #0
 8006654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800665a:	2e00      	cmp	r6, #0
 800665c:	d0f9      	beq.n	8006652 <__sflush_r+0x1a>
 800665e:	2300      	movs	r3, #0
 8006660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006664:	682f      	ldr	r7, [r5, #0]
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	d032      	beq.n	80066d0 <__sflush_r+0x98>
 800666a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	075a      	lsls	r2, r3, #29
 8006670:	d505      	bpl.n	800667e <__sflush_r+0x46>
 8006672:	6863      	ldr	r3, [r4, #4]
 8006674:	1ac0      	subs	r0, r0, r3
 8006676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006678:	b10b      	cbz	r3, 800667e <__sflush_r+0x46>
 800667a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800667c:	1ac0      	subs	r0, r0, r3
 800667e:	2300      	movs	r3, #0
 8006680:	4602      	mov	r2, r0
 8006682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006684:	6a21      	ldr	r1, [r4, #32]
 8006686:	4628      	mov	r0, r5
 8006688:	47b0      	blx	r6
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	d106      	bne.n	800669e <__sflush_r+0x66>
 8006690:	6829      	ldr	r1, [r5, #0]
 8006692:	291d      	cmp	r1, #29
 8006694:	d82c      	bhi.n	80066f0 <__sflush_r+0xb8>
 8006696:	4a2a      	ldr	r2, [pc, #168]	; (8006740 <__sflush_r+0x108>)
 8006698:	40ca      	lsrs	r2, r1
 800669a:	07d6      	lsls	r6, r2, #31
 800669c:	d528      	bpl.n	80066f0 <__sflush_r+0xb8>
 800669e:	2200      	movs	r2, #0
 80066a0:	6062      	str	r2, [r4, #4]
 80066a2:	04d9      	lsls	r1, r3, #19
 80066a4:	6922      	ldr	r2, [r4, #16]
 80066a6:	6022      	str	r2, [r4, #0]
 80066a8:	d504      	bpl.n	80066b4 <__sflush_r+0x7c>
 80066aa:	1c42      	adds	r2, r0, #1
 80066ac:	d101      	bne.n	80066b2 <__sflush_r+0x7a>
 80066ae:	682b      	ldr	r3, [r5, #0]
 80066b0:	b903      	cbnz	r3, 80066b4 <__sflush_r+0x7c>
 80066b2:	6560      	str	r0, [r4, #84]	; 0x54
 80066b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b6:	602f      	str	r7, [r5, #0]
 80066b8:	2900      	cmp	r1, #0
 80066ba:	d0ca      	beq.n	8006652 <__sflush_r+0x1a>
 80066bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d002      	beq.n	80066ca <__sflush_r+0x92>
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 f8c5 	bl	8006854 <_free_r>
 80066ca:	2000      	movs	r0, #0
 80066cc:	6360      	str	r0, [r4, #52]	; 0x34
 80066ce:	e7c1      	b.n	8006654 <__sflush_r+0x1c>
 80066d0:	6a21      	ldr	r1, [r4, #32]
 80066d2:	2301      	movs	r3, #1
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b0      	blx	r6
 80066d8:	1c41      	adds	r1, r0, #1
 80066da:	d1c7      	bne.n	800666c <__sflush_r+0x34>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0c4      	beq.n	800666c <__sflush_r+0x34>
 80066e2:	2b1d      	cmp	r3, #29
 80066e4:	d001      	beq.n	80066ea <__sflush_r+0xb2>
 80066e6:	2b16      	cmp	r3, #22
 80066e8:	d101      	bne.n	80066ee <__sflush_r+0xb6>
 80066ea:	602f      	str	r7, [r5, #0]
 80066ec:	e7b1      	b.n	8006652 <__sflush_r+0x1a>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	e7ad      	b.n	8006654 <__sflush_r+0x1c>
 80066f8:	690f      	ldr	r7, [r1, #16]
 80066fa:	2f00      	cmp	r7, #0
 80066fc:	d0a9      	beq.n	8006652 <__sflush_r+0x1a>
 80066fe:	0793      	lsls	r3, r2, #30
 8006700:	680e      	ldr	r6, [r1, #0]
 8006702:	bf08      	it	eq
 8006704:	694b      	ldreq	r3, [r1, #20]
 8006706:	600f      	str	r7, [r1, #0]
 8006708:	bf18      	it	ne
 800670a:	2300      	movne	r3, #0
 800670c:	eba6 0807 	sub.w	r8, r6, r7
 8006710:	608b      	str	r3, [r1, #8]
 8006712:	f1b8 0f00 	cmp.w	r8, #0
 8006716:	dd9c      	ble.n	8006652 <__sflush_r+0x1a>
 8006718:	6a21      	ldr	r1, [r4, #32]
 800671a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800671c:	4643      	mov	r3, r8
 800671e:	463a      	mov	r2, r7
 8006720:	4628      	mov	r0, r5
 8006722:	47b0      	blx	r6
 8006724:	2800      	cmp	r0, #0
 8006726:	dc06      	bgt.n	8006736 <__sflush_r+0xfe>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800672e:	81a3      	strh	r3, [r4, #12]
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	e78e      	b.n	8006654 <__sflush_r+0x1c>
 8006736:	4407      	add	r7, r0
 8006738:	eba8 0800 	sub.w	r8, r8, r0
 800673c:	e7e9      	b.n	8006712 <__sflush_r+0xda>
 800673e:	bf00      	nop
 8006740:	20400001 	.word	0x20400001

08006744 <_fflush_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	690b      	ldr	r3, [r1, #16]
 8006748:	4605      	mov	r5, r0
 800674a:	460c      	mov	r4, r1
 800674c:	b913      	cbnz	r3, 8006754 <_fflush_r+0x10>
 800674e:	2500      	movs	r5, #0
 8006750:	4628      	mov	r0, r5
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	b118      	cbz	r0, 800675e <_fflush_r+0x1a>
 8006756:	6983      	ldr	r3, [r0, #24]
 8006758:	b90b      	cbnz	r3, 800675e <_fflush_r+0x1a>
 800675a:	f7ff fc57 	bl	800600c <__sinit>
 800675e:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <_fflush_r+0x6c>)
 8006760:	429c      	cmp	r4, r3
 8006762:	d11b      	bne.n	800679c <_fflush_r+0x58>
 8006764:	686c      	ldr	r4, [r5, #4]
 8006766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0ef      	beq.n	800674e <_fflush_r+0xa>
 800676e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006770:	07d0      	lsls	r0, r2, #31
 8006772:	d404      	bmi.n	800677e <_fflush_r+0x3a>
 8006774:	0599      	lsls	r1, r3, #22
 8006776:	d402      	bmi.n	800677e <_fflush_r+0x3a>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f7ff fd0a 	bl	8006192 <__retarget_lock_acquire_recursive>
 800677e:	4628      	mov	r0, r5
 8006780:	4621      	mov	r1, r4
 8006782:	f7ff ff59 	bl	8006638 <__sflush_r>
 8006786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006788:	07da      	lsls	r2, r3, #31
 800678a:	4605      	mov	r5, r0
 800678c:	d4e0      	bmi.n	8006750 <_fflush_r+0xc>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	059b      	lsls	r3, r3, #22
 8006792:	d4dd      	bmi.n	8006750 <_fflush_r+0xc>
 8006794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006796:	f7ff fcfd 	bl	8006194 <__retarget_lock_release_recursive>
 800679a:	e7d9      	b.n	8006750 <_fflush_r+0xc>
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <_fflush_r+0x70>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	d101      	bne.n	80067a6 <_fflush_r+0x62>
 80067a2:	68ac      	ldr	r4, [r5, #8]
 80067a4:	e7df      	b.n	8006766 <_fflush_r+0x22>
 80067a6:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <_fflush_r+0x74>)
 80067a8:	429c      	cmp	r4, r3
 80067aa:	bf08      	it	eq
 80067ac:	68ec      	ldreq	r4, [r5, #12]
 80067ae:	e7da      	b.n	8006766 <_fflush_r+0x22>
 80067b0:	08006a00 	.word	0x08006a00
 80067b4:	08006a20 	.word	0x08006a20
 80067b8:	080069e0 	.word	0x080069e0

080067bc <_lseek_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d07      	ldr	r5, [pc, #28]	; (80067dc <_lseek_r+0x20>)
 80067c0:	4604      	mov	r4, r0
 80067c2:	4608      	mov	r0, r1
 80067c4:	4611      	mov	r1, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	602a      	str	r2, [r5, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f7fa fa9d 	bl	8000d0a <_lseek>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_lseek_r+0x1e>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_lseek_r+0x1e>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	200046e4 	.word	0x200046e4

080067e0 <__swhatbuf_r>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	460e      	mov	r6, r1
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	2900      	cmp	r1, #0
 80067ea:	b096      	sub	sp, #88	; 0x58
 80067ec:	4614      	mov	r4, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	da08      	bge.n	8006804 <__swhatbuf_r+0x24>
 80067f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	602a      	str	r2, [r5, #0]
 80067fa:	061a      	lsls	r2, r3, #24
 80067fc:	d410      	bmi.n	8006820 <__swhatbuf_r+0x40>
 80067fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006802:	e00e      	b.n	8006822 <__swhatbuf_r+0x42>
 8006804:	466a      	mov	r2, sp
 8006806:	f000 f883 	bl	8006910 <_fstat_r>
 800680a:	2800      	cmp	r0, #0
 800680c:	dbf1      	blt.n	80067f2 <__swhatbuf_r+0x12>
 800680e:	9a01      	ldr	r2, [sp, #4]
 8006810:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006814:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006818:	425a      	negs	r2, r3
 800681a:	415a      	adcs	r2, r3
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	e7ee      	b.n	80067fe <__swhatbuf_r+0x1e>
 8006820:	2340      	movs	r3, #64	; 0x40
 8006822:	2000      	movs	r0, #0
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	b016      	add	sp, #88	; 0x58
 8006828:	bd70      	pop	{r4, r5, r6, pc}
	...

0800682c <malloc>:
 800682c:	4b02      	ldr	r3, [pc, #8]	; (8006838 <malloc+0xc>)
 800682e:	4601      	mov	r1, r0
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	f7ff bce7 	b.w	8006204 <_malloc_r>
 8006836:	bf00      	nop
 8006838:	20000014 	.word	0x20000014

0800683c <__malloc_lock>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__malloc_lock+0x8>)
 800683e:	f7ff bca8 	b.w	8006192 <__retarget_lock_acquire_recursive>
 8006842:	bf00      	nop
 8006844:	200046d8 	.word	0x200046d8

08006848 <__malloc_unlock>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__malloc_unlock+0x8>)
 800684a:	f7ff bca3 	b.w	8006194 <__retarget_lock_release_recursive>
 800684e:	bf00      	nop
 8006850:	200046d8 	.word	0x200046d8

08006854 <_free_r>:
 8006854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006856:	2900      	cmp	r1, #0
 8006858:	d044      	beq.n	80068e4 <_free_r+0x90>
 800685a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685e:	9001      	str	r0, [sp, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f1a1 0404 	sub.w	r4, r1, #4
 8006866:	bfb8      	it	lt
 8006868:	18e4      	addlt	r4, r4, r3
 800686a:	f7ff ffe7 	bl	800683c <__malloc_lock>
 800686e:	4a1e      	ldr	r2, [pc, #120]	; (80068e8 <_free_r+0x94>)
 8006870:	9801      	ldr	r0, [sp, #4]
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	b933      	cbnz	r3, 8006884 <_free_r+0x30>
 8006876:	6063      	str	r3, [r4, #4]
 8006878:	6014      	str	r4, [r2, #0]
 800687a:	b003      	add	sp, #12
 800687c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006880:	f7ff bfe2 	b.w	8006848 <__malloc_unlock>
 8006884:	42a3      	cmp	r3, r4
 8006886:	d908      	bls.n	800689a <_free_r+0x46>
 8006888:	6825      	ldr	r5, [r4, #0]
 800688a:	1961      	adds	r1, r4, r5
 800688c:	428b      	cmp	r3, r1
 800688e:	bf01      	itttt	eq
 8006890:	6819      	ldreq	r1, [r3, #0]
 8006892:	685b      	ldreq	r3, [r3, #4]
 8006894:	1949      	addeq	r1, r1, r5
 8006896:	6021      	streq	r1, [r4, #0]
 8006898:	e7ed      	b.n	8006876 <_free_r+0x22>
 800689a:	461a      	mov	r2, r3
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	b10b      	cbz	r3, 80068a4 <_free_r+0x50>
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d9fa      	bls.n	800689a <_free_r+0x46>
 80068a4:	6811      	ldr	r1, [r2, #0]
 80068a6:	1855      	adds	r5, r2, r1
 80068a8:	42a5      	cmp	r5, r4
 80068aa:	d10b      	bne.n	80068c4 <_free_r+0x70>
 80068ac:	6824      	ldr	r4, [r4, #0]
 80068ae:	4421      	add	r1, r4
 80068b0:	1854      	adds	r4, r2, r1
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	6011      	str	r1, [r2, #0]
 80068b6:	d1e0      	bne.n	800687a <_free_r+0x26>
 80068b8:	681c      	ldr	r4, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	6053      	str	r3, [r2, #4]
 80068be:	4421      	add	r1, r4
 80068c0:	6011      	str	r1, [r2, #0]
 80068c2:	e7da      	b.n	800687a <_free_r+0x26>
 80068c4:	d902      	bls.n	80068cc <_free_r+0x78>
 80068c6:	230c      	movs	r3, #12
 80068c8:	6003      	str	r3, [r0, #0]
 80068ca:	e7d6      	b.n	800687a <_free_r+0x26>
 80068cc:	6825      	ldr	r5, [r4, #0]
 80068ce:	1961      	adds	r1, r4, r5
 80068d0:	428b      	cmp	r3, r1
 80068d2:	bf04      	itt	eq
 80068d4:	6819      	ldreq	r1, [r3, #0]
 80068d6:	685b      	ldreq	r3, [r3, #4]
 80068d8:	6063      	str	r3, [r4, #4]
 80068da:	bf04      	itt	eq
 80068dc:	1949      	addeq	r1, r1, r5
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	6054      	str	r4, [r2, #4]
 80068e2:	e7ca      	b.n	800687a <_free_r+0x26>
 80068e4:	b003      	add	sp, #12
 80068e6:	bd30      	pop	{r4, r5, pc}
 80068e8:	200046dc 	.word	0x200046dc

080068ec <_read_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d07      	ldr	r5, [pc, #28]	; (800690c <_read_r+0x20>)
 80068f0:	4604      	mov	r4, r0
 80068f2:	4608      	mov	r0, r1
 80068f4:	4611      	mov	r1, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	602a      	str	r2, [r5, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f7fa fa16 	bl	8000d2c <_read>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_read_r+0x1e>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_read_r+0x1e>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	200046e4 	.word	0x200046e4

08006910 <_fstat_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d07      	ldr	r5, [pc, #28]	; (8006930 <_fstat_r+0x20>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	602b      	str	r3, [r5, #0]
 800691e:	f7fa fa2d 	bl	8000d7c <_fstat>
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	d102      	bne.n	800692c <_fstat_r+0x1c>
 8006926:	682b      	ldr	r3, [r5, #0]
 8006928:	b103      	cbz	r3, 800692c <_fstat_r+0x1c>
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	bd38      	pop	{r3, r4, r5, pc}
 800692e:	bf00      	nop
 8006930:	200046e4 	.word	0x200046e4

08006934 <_init>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	bf00      	nop
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr

08006940 <_fini>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr
