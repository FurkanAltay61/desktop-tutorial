
RTOSQueue_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007178  08007178  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007180  08007180  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c50  20000078  08007200  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc8  08007200  00024cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6d2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c2  00000000  00000000  0003d77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00041140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  000426a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7a4  00000000  00000000  00043aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e38  00000000  00000000  0006e24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106a1d  00000000  00000000  00087084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018daa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f98  00000000  00000000  0018daf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007068 	.word	0x08007068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007068 	.word	0x08007068

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
return 0;
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000094 	.word	0x20000094
 8000570:	20000158 	.word	0x20000158

08000574 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetTimerTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000592:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	20000358 	.word	0x20000358
 80005a4:	2000041c 	.word	0x2000041c

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b08c      	sub	sp, #48	; 0x30
 80005ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fc70 	bl	8000e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f837 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8d3 	bl	8000760 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80005ba:	f000 f8a1 	bl	8000700 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80005be:	4812      	ldr	r0, [pc, #72]	; (8000608 <main+0x60>)
 80005c0:	f000 fa2a 	bl	8000a18 <RetargetInit>
//  if(Sistem->xQueue1 == NULL){ Error_Handler(); }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <main+0x64>)
 80005c6:	1d3c      	adds	r4, r7, #4
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f940 	bl	8003860 <osThreadCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <main+0x68>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
//  	xTaskCreateStatic(Task1,"task1",configMINIMAL_STACK_SIZE*2,(void *)Sistem,1,xStack,&xTaskBuffer);
//    xTaskCreateStatic(Task2,"task2",configMINIMAL_STACK_SIZE,(void *)Sistem,1,xStack2,&xTaskBuffer2);
//  	xTaskCreate(Task1,"task1",configMINIMAL_STACK_SIZE*2,(void *)Sistem,1,NULL);
//    xTaskCreate(Task2,"task2",configMINIMAL_STACK_SIZE*2,(void *)Sistem,1,NULL);
  Active_start(AO_xButton,configMINIMAL_STACK_SIZE,1, xStack,&xTaskBuffer,xButtonQueue,sizeof(xButtonQueue)/sizeof(xButtonQueue[0]));
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x6c>)
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	230a      	movs	r3, #10
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x70>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0x74>)
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <main+0x78>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	f000 f966 	bl	80008cc <Active_start>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f003 f927 	bl	8003852 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x5c>
 8000606:	bf00      	nop
 8000608:	20000cf0 	.word	0x20000cf0
 800060c:	0800708c 	.word	0x0800708c
 8000610:	20000d74 	.word	0x20000d74
 8000614:	20000000 	.word	0x20000000
 8000618:	20000d78 	.word	0x20000d78
 800061c:	20000c2c 	.word	0x20000c2c
 8000620:	2000081c 	.word	0x2000081c

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 ffd1 	bl	80065da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f000 ff10 	bl	800146c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <SystemClock_Config+0xd4>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <SystemClock_Config+0xd4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a24      	ldr	r2, [pc, #144]	; (80006fc <SystemClock_Config+0xd8>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000680:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000694:	23d8      	movs	r3, #216	; 0xd8
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800069c:	2309      	movs	r3, #9
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 ff41 	bl	800152c <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006b0:	f000 f9ac 	bl	8000a0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b4:	f000 feea 	bl	800148c <HAL_PWREx_EnableOverDrive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006be:	f000 f9a5 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2107      	movs	r1, #7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f9c7 	bl	8001a74 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006ec:	f000 f98e 	bl	8000a0c <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART3_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000744:	f002 fabe 	bl	8002cc4 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f95d 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000cf0 	.word	0x20000cf0
 800075c:	40004800 	.word	0x40004800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b51      	ldr	r3, [pc, #324]	; (80008bc <MX_GPIO_Init+0x15c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a50      	ldr	r2, [pc, #320]	; (80008bc <MX_GPIO_Init+0x15c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <MX_GPIO_Init+0x15c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <MX_GPIO_Init+0x15c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a4a      	ldr	r2, [pc, #296]	; (80008bc <MX_GPIO_Init+0x15c>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <MX_GPIO_Init+0x15c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b45      	ldr	r3, [pc, #276]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a44      	ldr	r2, [pc, #272]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b42      	ldr	r3, [pc, #264]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a3e      	ldr	r2, [pc, #248]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a38      	ldr	r2, [pc, #224]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_GPIO_Init+0x15c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f244 0181 	movw	r1, #16513	; 0x4081
 800080c:	482c      	ldr	r0, [pc, #176]	; (80008c0 <MX_GPIO_Init+0x160>)
 800080e:	f000 fdfb 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	482b      	ldr	r0, [pc, #172]	; (80008c4 <MX_GPIO_Init+0x164>)
 8000818:	f000 fdf6 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000828:	2302      	movs	r3, #2
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4825      	ldr	r0, [pc, #148]	; (80008c8 <MX_GPIO_Init+0x168>)
 8000834:	f000 fc3c 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000838:	f244 0381 	movw	r3, #16513	; 0x4081
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <MX_GPIO_Init+0x160>)
 8000852:	f000 fc2d 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4815      	ldr	r0, [pc, #84]	; (80008c4 <MX_GPIO_Init+0x164>)
 800086e:	f000 fc1f 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	480f      	ldr	r0, [pc, #60]	; (80008c4 <MX_GPIO_Init+0x164>)
 8000886:	f000 fc13 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 800088a:	2330      	movs	r3, #48	; 0x30
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000892:	2302      	movs	r3, #2
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <MX_GPIO_Init+0x160>)
 800089e:	f000 fc07 	bl	80010b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2028      	movs	r0, #40	; 0x28
 80008a8:	f000 fbd8 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ac:	2028      	movs	r0, #40	; 0x28
 80008ae:	f000 fbf1 	bl	8001094 <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	; 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400
 80008c4:	40021800 	.word	0x40021800
 80008c8:	40020800 	.word	0x40020800

080008cc <Active_start>:
				  UBaseType_t uxPriority,
				  StackType_t * const puxStackBuffer,
				  StaticTask_t * const pxTaskBuffer,
				  Event **queueSto,
				  const UBaseType_t uxQueueLength
				  ){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af04      	add	r7, sp, #16
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]

	me->queue = xQueueCreate(uxQueueLength,sizeof((void**)queueSto));
 80008da:	2200      	movs	r2, #0
 80008dc:	2104      	movs	r1, #4
 80008de:	6a38      	ldr	r0, [r7, #32]
 80008e0:	f003 f9be 	bl	8003c60 <xQueueGenericCreate>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	605a      	str	r2, [r3, #4]
	me->thread = uxPriority;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	701a      	strb	r2, [r3, #0]
	xTaskCreateStatic(Active_EventLoop,"x", ulStackDepth,(void*)me,me->thread, puxStackBuffer, pxTaskBuffer);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	9302      	str	r3, [sp, #8]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	4904      	ldr	r1, [pc, #16]	; (8000918 <Active_start+0x4c>)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <Active_start+0x50>)
 800090a:	f003 fe09 	bl	8004520 <xTaskCreateStatic>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	080070a8 	.word	0x080070a8
 800091c:	08000921 	.word	0x08000921

08000920 <Active_EventLoop>:


/*..........................................................................*/
/* Thread function for all Active Objects (uC/OS-II task signature) */
static void Active_EventLoop(void *pdata) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    Active *me = (Active *)pdata; /* the AO instance "me" */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	60fb      	str	r3, [r7, #12]
    /* event loop ("message pump") */
    while (1) {
        Event *e; /* pointer to event object ("message") */

        /*new*/
        if(xQueueReceive(me->queue,(void *)&e,(TickType_t)0) == pdPASS){
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f107 0108 	add.w	r1, r7, #8
 8000934:	2200      	movs	r2, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f003 fb9e 	bl	8004078 <xQueueReceive>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d1f4      	bne.n	800092c <Active_EventLoop+0xc>
			/* dispatch event to the active object 'me' */
//			(*me->dispatch)(me, e); /* NO BLOCKING! */
        	__NOP();
 8000942:	bf00      	nop
        	printf("Basildi\r\n");
 8000944:	4801      	ldr	r0, [pc, #4]	; (800094c <Active_EventLoop+0x2c>)
 8000946:	f005 ff53 	bl	80067f0 <puts>
    while (1) {
 800094a:	e7ef      	b.n	800092c <Active_EventLoop+0xc>
 800094c:	080070ac 	.word	0x080070ac

08000950 <vApplicationStackOverflowHook>:
//	}
//}


void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName ){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	__NOP();
 800095a:	bf00      	nop
	Error_Handler();
 800095c:	f000 f856 	bl	8000a0c <Error_Handler>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <vApplicationTickHook>:


void vApplicationTickHook( void ){
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	__NOP();
 800096c:	bf00      	nop
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook( void ){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	__NOP();
 800097c:	bf00      	nop
	Error_Handler();
 800097e:	f000 f845 	bl	8000a0c <Error_Handler>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  static Event const buttonPressedEvt = {BUTTON_PRESSED_SIG};
  Active_post(AO_xButton, &buttonPressedEvt);
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4905      	ldr	r1, [pc, #20]	; (80009ac <HAL_GPIO_EXTI_Callback+0x24>)
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f809 	bl	80009b0 <Active_post>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000
 80009ac:	080070f8 	.word	0x080070f8

080009b0 <Active_post>:



void Active_post(Active * const me, Event const * const e) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	BaseType_t xQueueWoken = pdFALSE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
    xQueueSendFromISR(me->queue, (void *)&e,&xQueueWoken);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6858      	ldr	r0, [r3, #4]
 80009c2:	f107 020c 	add.w	r2, r7, #12
 80009c6:	4639      	mov	r1, r7
 80009c8:	2300      	movs	r3, #0
 80009ca:	f003 fab5 	bl	8003f38 <xQueueGenericSendFromISR>
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f002 ff8a 	bl	80038f8 <osDelay>
 80009e4:	e7fb      	b.n	80009de <StartDefaultTask+0x8>
	...

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f000 fa57 	bl	8000eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010000 	.word	0x40010000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <RetargetInit+0x28>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <RetargetInit+0x2c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6898      	ldr	r0, [r3, #8]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2202      	movs	r2, #2
 8000a30:	2100      	movs	r1, #0
 8000a32:	f005 ff5f 	bl	80068f4 <setvbuf>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000dc4 	.word	0x20000dc4
 8000a44:	20000014 	.word	0x20000014

08000a48 <_isatty>:

int _isatty(int fd) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db04      	blt.n	8000a60 <_isatty+0x18>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	dc01      	bgt.n	8000a60 <_isatty+0x18>
    return 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e005      	b.n	8000a6c <_isatty+0x24>

  errno = EBADF;
 8000a60:	f005 fc8a 	bl	8006378 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2209      	movs	r2, #9
 8000a68:	601a      	str	r2, [r3, #0]
  return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_write>:

int _write(int fd, char* ptr, int len) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d002      	beq.n	8000a8c <_write+0x18>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d111      	bne.n	8000ab0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <_write+0x54>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	f002 f961 	bl	8002d60 <HAL_UART_Transmit>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <_write+0x38>
      return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	e008      	b.n	8000abe <_write+0x4a>
    else
      return EIO;
 8000aac:	2305      	movs	r3, #5
 8000aae:	e006      	b.n	8000abe <_write+0x4a>
  }
  errno = EBADF;
 8000ab0:	f005 fc62 	bl	8006378 <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2209      	movs	r2, #9
 8000ab8:	601a      	str	r2, [r3, #0]
  return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000dc4 	.word	0x20000dc4

08000acc <_close>:

int _close(int fd) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db04      	blt.n	8000ae4 <_close+0x18>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	dc01      	bgt.n	8000ae4 <_close+0x18>
    return 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e006      	b.n	8000af2 <_close+0x26>

  errno = EBADF;
 8000ae4:	f005 fc48 	bl	8006378 <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2209      	movs	r2, #9
 8000aec:	601a      	str	r2, [r3, #0]
  return -1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b06:	f005 fc37 	bl	8006378 <__errno>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2209      	movs	r2, #9
 8000b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_read>:

int _read(int fd, char* ptr, int len) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d110      	bne.n	8000b50 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <_read+0x4c>)
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2201      	movs	r2, #1
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	f002 f9a4 	bl	8002e86 <HAL_UART_Receive>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <_read+0x30>
      return 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e008      	b.n	8000b5e <_read+0x42>
    else
      return EIO;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e006      	b.n	8000b5e <_read+0x42>
  }
  errno = EBADF;
 8000b50:	f005 fc12 	bl	8006378 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2209      	movs	r2, #9
 8000b58:	601a      	str	r2, [r3, #0]
  return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000dc4 	.word	0x20000dc4

08000b6c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db08      	blt.n	8000b8e <_fstat+0x22>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	dc05      	bgt.n	8000b8e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b88:	605a      	str	r2, [r3, #4]
    return 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e005      	b.n	8000b9a <_fstat+0x2e>
  }

  errno = EBADF;
 8000b8e:	f005 fbf3 	bl	8006378 <__errno>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2209      	movs	r2, #9
 8000b96:	601a      	str	r2, [r3, #0]
  return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fa3b 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0aa      	sub	sp, #168	; 0xa8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2284      	movs	r2, #132	; 0x84
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f005 fce0 	bl	80065da <memset>
  if(huart->Instance==USART3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <HAL_UART_MspInit+0xb4>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d13c      	bne.n	8000c9e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f976 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f7ff fee5 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_UART_MspInit+0xb8>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_UART_MspInit+0xb8>)
 8000c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_UART_MspInit+0xb8>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_MspInit+0xb8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <HAL_UART_MspInit+0xb8>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0xb8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0xbc>)
 8000c9a:	f000 fa09 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	37a8      	adds	r7, #168	; 0xa8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	; 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	2019      	movs	r0, #25
 8000cca:	f000 f9c7 	bl	800105c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cce:	2019      	movs	r0, #25
 8000cd0:	f000 f9e0 	bl	8001094 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_InitTick+0x9c>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_InitTick+0x9c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_InitTick+0x9c>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cec:	f107 0210 	add.w	r2, r7, #16
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f8e2 	bl	8001ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cfc:	f001 f8cc 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8000d00:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <HAL_InitTick+0xa0>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_InitTick+0xa4>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_InitTick+0xa8>)
 8000d14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_InitTick+0xa4>)
 8000d18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_InitTick+0xa4>)
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_InitTick+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_InitTick+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <HAL_InitTick+0xa4>)
 8000d32:	f001 fce7 	bl	8002704 <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d104      	bne.n	8000d46 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <HAL_InitTick+0xa4>)
 8000d3e:	f001 fd43 	bl	80027c8 <HAL_TIM_Base_Start_IT>
 8000d42:	4603      	mov	r3, r0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3730      	adds	r7, #48	; 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	20000dc8 	.word	0x20000dc8
 8000d5c:	40010000 	.word	0x40010000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d92:	f001 fd91 	bl	80028b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000dc8 	.word	0x20000dc8

08000da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000da4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000da8:	f000 fb48 	bl	800143c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f005 faca 	bl	8006378 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20050000 	.word	0x20050000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000e14 	.word	0x20000e14
 8000e18:	20004cc8 	.word	0x20004cc8

08000e1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f005 fb7f 	bl	8006570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb99 	bl	80005a8 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e84:	08007188 	.word	0x08007188
  ldr r2, =_sbss
 8000e88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e8c:	20004cc8 	.word	0x20004cc8

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>

08000e92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f8d5 	bl	8001046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f7ff ff09 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea2:	f7ff fe7f 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000e18 	.word	0x20000e18

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000e18 	.word	0x20000e18

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff4c 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106e:	f7ff ff61 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 8001072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ffb1 	bl	8000fe0 <NVIC_EncodePriority>
 800107e:	4602      	mov	r2, r0
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff80 	bl	8000f8c <__NVIC_SetPriority>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff54 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e175      	b.n	80013bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8164 	bne.w	80013b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_GPIO_Init+0x56>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d130      	bne.n	8001168 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 0201 	and.w	r2, r3, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b03      	cmp	r3, #3
 8001172:	d017      	beq.n	80011a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80be 	beq.w	80013b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b66      	ldr	r3, [pc, #408]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001252:	4a61      	ldr	r2, [pc, #388]	; (80013d8 <HAL_GPIO_Init+0x328>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_GPIO_Init+0x32c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d037      	beq.n	80012ee <HAL_GPIO_Init+0x23e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a57      	ldr	r2, [pc, #348]	; (80013e0 <HAL_GPIO_Init+0x330>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d031      	beq.n	80012ea <HAL_GPIO_Init+0x23a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a56      	ldr	r2, [pc, #344]	; (80013e4 <HAL_GPIO_Init+0x334>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d02b      	beq.n	80012e6 <HAL_GPIO_Init+0x236>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a55      	ldr	r2, [pc, #340]	; (80013e8 <HAL_GPIO_Init+0x338>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d025      	beq.n	80012e2 <HAL_GPIO_Init+0x232>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a54      	ldr	r2, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x33c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01f      	beq.n	80012de <HAL_GPIO_Init+0x22e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a53      	ldr	r2, [pc, #332]	; (80013f0 <HAL_GPIO_Init+0x340>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x22a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_GPIO_Init+0x344>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a51      	ldr	r2, [pc, #324]	; (80013f8 <HAL_GPIO_Init+0x348>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x222>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a50      	ldr	r2, [pc, #320]	; (80013fc <HAL_GPIO_Init+0x34c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x21e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x350>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x21a>
 80012c6:	2309      	movs	r3, #9
 80012c8:	e012      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ca:	230a      	movs	r3, #10
 80012cc:	e010      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ce:	2308      	movs	r3, #8
 80012d0:	e00e      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e00c      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012d6:	2306      	movs	r3, #6
 80012d8:	e00a      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012da:	2305      	movs	r3, #5
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012de:	2304      	movs	r3, #4
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x240>
 80012ee:	2300      	movs	r3, #0
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001300:	4935      	ldr	r1, [pc, #212]	; (80013d8 <HAL_GPIO_Init+0x328>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <HAL_GPIO_Init+0x354>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_GPIO_Init+0x354>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <HAL_GPIO_Init+0x354>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a29      	ldr	r2, [pc, #164]	; (8001404 <HAL_GPIO_Init+0x354>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <HAL_GPIO_Init+0x354>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001386:	4a1f      	ldr	r2, [pc, #124]	; (8001404 <HAL_GPIO_Init+0x354>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_GPIO_Init+0x354>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_GPIO_Init+0x354>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	f67f ae86 	bls.w	80010d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40021c00 	.word	0x40021c00
 80013fc:	40022000 	.word	0x40022000
 8001400:	40022400 	.word	0x40022400
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <HAL_GPIO_EXTI_Callback>
  }
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40007000 	.word	0x40007000

0800148c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_PWREx_EnableOverDrive+0x98>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <HAL_PWREx_EnableOverDrive+0x98>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_PWREx_EnableOverDrive+0x98>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ba:	f7ff fd0b 	bl	8000ed4 <HAL_GetTick>
 80014be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014c0:	e009      	b.n	80014d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014c2:	f7ff fd07 	bl	8000ed4 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014d0:	d901      	bls.n	80014d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e022      	b.n	800151c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e2:	d1ee      	bne.n	80014c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f0:	f7ff fcf0 	bl	8000ed4 <HAL_GetTick>
 80014f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014f6:	e009      	b.n	800150c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f8:	f7ff fcec 	bl	8000ed4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001506:	d901      	bls.n	800150c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e007      	b.n	800151c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_PWREx_EnableOverDrive+0x9c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001518:	d1ee      	bne.n	80014f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e291      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8087 	beq.w	800165e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	4b96      	ldr	r3, [pc, #600]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	d00c      	beq.n	8001576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155c:	4b93      	ldr	r3, [pc, #588]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d112      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
 8001568:	4b90      	ldr	r3, [pc, #576]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001574:	d10b      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b8d      	ldr	r3, [pc, #564]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <HAL_RCC_OscConfig+0x130>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d168      	bne.n	800165c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e26b      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x7a>
 8001598:	4b84      	ldr	r3, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a83      	ldr	r2, [pc, #524]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x9c>
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7b      	ldr	r2, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xc0>
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a75      	ldr	r2, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b73      	ldr	r3, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a72      	ldr	r2, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015ec:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6b      	ldr	r2, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fc62 	bl	8000ed4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fc5e 	bl	8000ed4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e21f      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc4e 	bl	8000ed4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc4a 	bl	8000ed4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e20b      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x110>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d069      	beq.n	800173e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166a:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001676:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11c      	bne.n	80016bc <HAL_RCC_OscConfig+0x190>
 8001682:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1df      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	493d      	ldr	r1, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e040      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc00 	bl	8000ed4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fbfc 	bl	8000ed4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1bd      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4929      	ldr	r1, [pc, #164]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
 800170a:	e018      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fbdc 	bl	8000ed4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fbd8 	bl	8000ed4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e199      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d038      	beq.n	80017bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fbb9 	bl	8000ed4 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fbb5 	bl	8000ed4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e176      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x23a>
 8001784:	e01a      	b.n	80017bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fb9f 	bl	8000ed4 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fb9b 	bl	8000ed4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d903      	bls.n	80017b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e15c      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
 80017ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b91      	ldr	r3, [pc, #580]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ee      	bne.n	800179a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a4 	beq.w	8001912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ca:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a87      	ldr	r2, [pc, #540]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b85      	ldr	r3, [pc, #532]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f2:	4b82      	ldr	r3, [pc, #520]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fb63 	bl	8000ed4 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fb5f 	bl	8000ed4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e120      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x31a>
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	e02d      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x33c>
 800184e:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6713      	str	r3, [r2, #112]	; 0x70
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6713      	str	r3, [r2, #112]	; 0x70
 8001866:	e01c      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x35e>
 8001870:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a60      	ldr	r2, [pc, #384]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d015      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb13 	bl	8000ed4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fb0f 	bl	8000ed4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0ce      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ee      	beq.n	80018b2 <HAL_RCC_OscConfig+0x386>
 80018d4:	e014      	b.n	8001900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fafd 	bl	8000ed4 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff faf9 	bl	8000ed4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d105      	bne.n	8001912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800190c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a4 	beq.w	8001a64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d06b      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d149      	bne.n	80019c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff faca 	bl	8000ed4 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fac6 	bl	8000ed4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e087      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	4313      	orrs	r3, r2
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800198a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800198e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fa9a 	bl	8000ed4 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fa96 	bl	8000ed4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e057      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x478>
 80019c2:	e04f      	b.n	8001a64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa80 	bl	8000ed4 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa7c 	bl	8000ed4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e03d      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4ac>
 80019f6:	e035      	b.n	8001a64 <HAL_RCC_OscConfig+0x538>
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x544>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d028      	beq.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d121      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0d0      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	4965      	ldr	r1, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d040      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d115      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e073      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06b      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4936      	ldr	r1, [pc, #216]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b68:	f7ff f9b4 	bl	8000ed4 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f9b0 	bl	8000ed4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e053      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d210      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f821 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1cc>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1d0>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1d4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f844 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	080070fc 	.word	0x080070fc
 8001c44:	20000004 	.word	0x20000004
 8001c48:	20000008 	.word	0x20000008

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c50:	b094      	sub	sp, #80	; 0x50
 8001c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
 8001c58:	2300      	movs	r3, #0
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c64:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d00d      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x40>
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	f200 80e1 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7e:	e0db      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c84:	e0db      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c8a:	e0d8      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c96:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	0159      	lsls	r1, r3, #5
 8001ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd0:	0150      	lsls	r0, r2, #5
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	1a51      	subs	r1, r2, r1
 8001cda:	6139      	str	r1, [r7, #16]
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	018b      	lsls	r3, r1, #6
 8001cf4:	4651      	mov	r1, sl
 8001cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cfa:	4651      	mov	r1, sl
 8001cfc:	018a      	lsls	r2, r1, #6
 8001cfe:	4651      	mov	r1, sl
 8001d00:	ebb2 0801 	subs.w	r8, r2, r1
 8001d04:	4659      	mov	r1, fp
 8001d06:	eb63 0901 	sbc.w	r9, r3, r1
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d1e:	4690      	mov	r8, r2
 8001d20:	4699      	mov	r9, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	eb18 0303 	adds.w	r3, r8, r3
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	eb49 0303 	adc.w	r3, r9, r3
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	024b      	lsls	r3, r1, #9
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d48:	4621      	mov	r1, r4
 8001d4a:	024a      	lsls	r2, r1, #9
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d52:	2200      	movs	r2, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5c:	f7fe fa58 	bl	8000210 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d68:	e058      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	2200      	movs	r2, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	4611      	mov	r1, r2
 8001d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d84:	4642      	mov	r2, r8
 8001d86:	464b      	mov	r3, r9
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	0159      	lsls	r1, r3, #5
 8001d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d96:	0150      	lsls	r0, r2, #5
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4641      	mov	r1, r8
 8001d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001da2:	4649      	mov	r1, r9
 8001da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8001dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	00eb      	lsls	r3, r5, #3
 8001dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd2:	00e2      	lsls	r2, r4, #3
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4643      	mov	r3, r8
 8001dda:	18e3      	adds	r3, r4, r3
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	464b      	mov	r3, r9
 8001de0:	eb45 0303 	adc.w	r3, r5, r3
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df2:	4629      	mov	r1, r5
 8001df4:	028b      	lsls	r3, r1, #10
 8001df6:	4621      	mov	r1, r4
 8001df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	028a      	lsls	r2, r1, #10
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	2200      	movs	r2, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e10:	f7fe f9fe 	bl	8000210 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3750      	adds	r7, #80	; 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	0800710c 	.word	0x0800710c

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0b5b      	lsrs	r3, r3, #13
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	0800710c 	.word	0x0800710c

08001ec0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	220f      	movs	r2, #15
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RCC_GetClockConfig+0x60>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f4c:	4b69      	ldr	r3, [pc, #420]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a68      	ldr	r2, [pc, #416]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f56:	6093      	str	r3, [r2, #8]
 8001f58:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	4964      	ldr	r1, [pc, #400]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	4959      	ldr	r1, [pc, #356]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d017      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	494a      	ldr	r1, [pc, #296]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 808b 	beq.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6413      	str	r3, [r2, #64]	; 0x40
 8002014:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	f7fe ff52 	bl	8000ed4 <HAL_GetTick>
 8002030:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe ff4e 	bl	8000ed4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e357      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d035      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d02e      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002092:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d114      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe ff16 	bl	8000ed4 <HAL_GetTick>
 80020a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe ff12 	bl	8000ed4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e319      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ee      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020da:	d111      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020ea:	400b      	ands	r3, r1
 80020ec:	4901      	ldr	r1, [pc, #4]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
 80020f2:	e00b      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	0ffffcff 	.word	0x0ffffcff
 8002100:	4baa      	ldr	r3, [pc, #680]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4aa9      	ldr	r2, [pc, #676]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002106:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	4ba7      	ldr	r3, [pc, #668]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	49a4      	ldr	r1, [pc, #656]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211a:	4313      	orrs	r3, r2
 800211c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800212a:	4ba0      	ldr	r3, [pc, #640]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002130:	4a9e      	ldr	r2, [pc, #632]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002136:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800213a:	4b9c      	ldr	r3, [pc, #624]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	4999      	ldr	r1, [pc, #612]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002166:	4991      	ldr	r1, [pc, #580]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800217a:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002188:	4988      	ldr	r1, [pc, #544]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219c:	4b83      	ldr	r3, [pc, #524]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021aa:	4980      	ldr	r1, [pc, #512]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021be:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4977      	ldr	r1, [pc, #476]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e0:	4b72      	ldr	r3, [pc, #456]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	496f      	ldr	r1, [pc, #444]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002202:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	f023 020c 	bic.w	r2, r3, #12
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	4966      	ldr	r1, [pc, #408]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002224:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	495e      	ldr	r1, [pc, #376]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002246:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	4955      	ldr	r1, [pc, #340]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4944      	ldr	r1, [pc, #272]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	493c      	ldr	r1, [pc, #240]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	4933      	ldr	r1, [pc, #204]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022fe:	492b      	ldr	r1, [pc, #172]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d011      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002320:	4922      	ldr	r1, [pc, #136]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002330:	d101      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	4912      	ldr	r1, [pc, #72]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002384:	4909      	ldr	r1, [pc, #36]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d006      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80d9 	beq.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a01      	ldr	r2, [pc, #4]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023aa:	e001      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b2:	f7fe fd8f 	bl	8000ed4 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023ba:	f7fe fd8b 	bl	8000ed4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e194      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023cc:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d021      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11d      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023ec:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002400:	0e1b      	lsrs	r3, r3, #24
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	019a      	lsls	r2, r3, #6
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	071b      	lsls	r3, r3, #28
 8002420:	4957      	ldr	r1, [pc, #348]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002446:	2b00      	cmp	r3, #0
 8002448:	d02e      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002452:	d129      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002468:	0f1b      	lsrs	r3, r3, #28
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	019a      	lsls	r2, r3, #6
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	431a      	orrs	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	071b      	lsls	r3, r3, #28
 8002488:	493d      	ldr	r1, [pc, #244]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002496:	f023 021f 	bic.w	r2, r3, #31
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	3b01      	subs	r3, #1
 80024a0:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01d      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024b4:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ba:	0e1b      	lsrs	r3, r3, #24
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c8:	0f1b      	lsrs	r3, r3, #28
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	019a      	lsls	r2, r3, #6
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	431a      	orrs	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	071b      	lsls	r3, r3, #28
 80024e8:	4925      	ldr	r1, [pc, #148]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d011      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	019a      	lsls	r2, r3, #6
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	061b      	lsls	r3, r3, #24
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	071b      	lsls	r3, r3, #28
 8002518:	4919      	ldr	r1, [pc, #100]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800252a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe fcd2 	bl	8000ed4 <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002534:	f7fe fcce 	bl	8000ed4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0d7      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b01      	cmp	r3, #1
 8002556:	f040 80cd 	bne.w	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002566:	f7fe fcb5 	bl	8000ed4 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800256e:	f7fe fcb1 	bl	8000ed4 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	; 0x64
 800257a:	d903      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0ba      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002584:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800258c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002590:	d0ed      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d02e      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12a      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025c8:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	0f1b      	lsrs	r3, r3, #28
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	019a      	lsls	r2, r3, #6
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	071b      	lsls	r3, r3, #28
 80025ee:	4944      	ldr	r1, [pc, #272]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025f6:	4b42      	ldr	r3, [pc, #264]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	493d      	ldr	r1, [pc, #244]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d022      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002624:	d11d      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	0e1b      	lsrs	r3, r3, #24
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	0f1b      	lsrs	r3, r3, #28
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	019a      	lsls	r2, r3, #6
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	431a      	orrs	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	061b      	lsls	r3, r3, #24
 8002654:	431a      	orrs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	071b      	lsls	r3, r3, #28
 800265a:	4929      	ldr	r1, [pc, #164]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d028      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	0e1b      	lsrs	r3, r3, #24
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	019a      	lsls	r2, r3, #6
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	071b      	lsls	r3, r3, #28
 80026a2:	4917      	ldr	r1, [pc, #92]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	4911      	ldr	r1, [pc, #68]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026cc:	f7fe fc02 	bl	8000ed4 <HAL_GetTick>
 80026d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026d4:	f7fe fbfe 	bl	8000ed4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e007      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f2:	d1ef      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e049      	b.n	80027aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f841 	bl	80027b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f000 fa00 	bl	8002b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d001      	beq.n	80027e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e054      	b.n	800288a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a26      	ldr	r2, [pc, #152]	; (8002898 <HAL_TIM_Base_Start_IT+0xd0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x80>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280a:	d01d      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x80>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a22      	ldr	r2, [pc, #136]	; (800289c <HAL_TIM_Base_Start_IT+0xd4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x80>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x80>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x80>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x80>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_TIM_Base_Start_IT+0xe4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x80>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d115      	bne.n	8002874 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_TIM_Base_Start_IT+0xec>)
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d015      	beq.n	8002886 <HAL_TIM_Base_Start_IT+0xbe>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d011      	beq.n	8002886 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	e008      	b.n	8002886 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e000      	b.n	8002888 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40001800 	.word	0x40001800
 80028b4:	00010007 	.word	0x00010007

080028b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0202 	mvn.w	r2, #2
 80028e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f905 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8f7 	bl	8002af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f908 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d122      	bne.n	8002968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b04      	cmp	r3, #4
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0204 	mvn.w	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8db 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8cd 	bl	8002af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8de 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b08      	cmp	r3, #8
 8002974:	d122      	bne.n	80029bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b08      	cmp	r3, #8
 8002982:	d11b      	bne.n	80029bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0208 	mvn.w	r2, #8
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2204      	movs	r2, #4
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8b1 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8a3 	bl	8002af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f8b4 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0210 	mvn.w	r2, #16
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2208      	movs	r2, #8
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f887 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f879 	bl	8002af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f88a 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10e      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d107      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0201 	mvn.w	r2, #1
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fd ffd6 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b80      	cmp	r3, #128	; 0x80
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f91a 	bl	8002c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a76:	d10e      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d107      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f90d 	bl	8002cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d107      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f838 	bl	8002b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d10e      	bne.n	8002aee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d107      	bne.n	8002aee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f06f 0220 	mvn.w	r2, #32
 8002ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8cd 	bl	8002c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a40      	ldr	r2, [pc, #256]	; (8002c5c <TIM_Base_SetConfig+0x114>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b66:	d00f      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a3d      	ldr	r2, [pc, #244]	; (8002c60 <TIM_Base_SetConfig+0x118>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <TIM_Base_SetConfig+0x11c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d007      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3b      	ldr	r2, [pc, #236]	; (8002c68 <TIM_Base_SetConfig+0x120>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3a      	ldr	r2, [pc, #232]	; (8002c6c <TIM_Base_SetConfig+0x124>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <TIM_Base_SetConfig+0x114>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02b      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d027      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <TIM_Base_SetConfig+0x118>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d023      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <TIM_Base_SetConfig+0x11c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <TIM_Base_SetConfig+0x120>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01b      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a29      	ldr	r2, [pc, #164]	; (8002c6c <TIM_Base_SetConfig+0x124>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d017      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <TIM_Base_SetConfig+0x128>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <TIM_Base_SetConfig+0x12c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00f      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <TIM_Base_SetConfig+0x130>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <TIM_Base_SetConfig+0x134>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <TIM_Base_SetConfig+0x138>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <TIM_Base_SetConfig+0x13c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <TIM_Base_SetConfig+0x114>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_Base_SetConfig+0xf8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <TIM_Base_SetConfig+0x124>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d103      	bne.n	8002c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	40010400 	.word	0x40010400
 8002c70:	40014000 	.word	0x40014000
 8002c74:	40014400 	.word	0x40014400
 8002c78:	40014800 	.word	0x40014800
 8002c7c:	40001800 	.word	0x40001800
 8002c80:	40001c00 	.word	0x40001c00
 8002c84:	40002000 	.word	0x40002000

08002c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e040      	b.n	8002d58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd ff84 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f990 	bl	8003028 <UART_SetConfig>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e022      	b.n	8002d58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fbe8 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fc6f 	bl	8003634 <UART_CheckIdleState>
 8002d56:	4603      	mov	r3, r0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 8081 	bne.w	8002e7c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_UART_Transmit+0x26>
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e079      	b.n	8002e7e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Transmit+0x38>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e072      	b.n	8002e7e <HAL_UART_Transmit+0x11e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2221      	movs	r2, #33	; 0x21
 8002dac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dae:	f7fe f891 	bl	8000ed4 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dcc:	d108      	bne.n	8002de0 <HAL_UART_Transmit+0x80>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e003      	b.n	8002de8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002df0:	e02c      	b.n	8002e4c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fc4c 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e038      	b.n	8002e7e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	3302      	adds	r3, #2
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	e007      	b.n	8002e3a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	3301      	adds	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1cc      	bne.n	8002df2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2140      	movs	r1, #64	; 0x40
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fc19 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e005      	b.n	8002e7e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b08a      	sub	sp, #40	; 0x28
 8002e8a:	af02      	add	r7, sp, #8
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f040 80be 	bne.w	800301c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_UART_Receive+0x26>
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b6      	b.n	800301e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Receive+0x38>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0af      	b.n	800301e <HAL_UART_Receive+0x198>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2222      	movs	r2, #34	; 0x22
 8002ed2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fd fffb 	bl	8000ed4 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d10e      	bne.n	8002f18 <HAL_UART_Receive+0x92>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_UART_Receive+0x88>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f0c:	e02d      	b.n	8002f6a <HAL_UART_Receive+0xe4>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	22ff      	movs	r2, #255	; 0xff
 8002f12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f16:	e028      	b.n	8002f6a <HAL_UART_Receive+0xe4>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_UART_Receive+0xb6>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <HAL_UART_Receive+0xac>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	22ff      	movs	r2, #255	; 0xff
 8002f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f30:	e01b      	b.n	8002f6a <HAL_UART_Receive+0xe4>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	227f      	movs	r2, #127	; 0x7f
 8002f36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f3a:	e016      	b.n	8002f6a <HAL_UART_Receive+0xe4>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f44:	d10d      	bne.n	8002f62 <HAL_UART_Receive+0xdc>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <HAL_UART_Receive+0xd2>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	227f      	movs	r2, #127	; 0x7f
 8002f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f56:	e008      	b.n	8002f6a <HAL_UART_Receive+0xe4>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	223f      	movs	r2, #63	; 0x3f
 8002f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f60:	e003      	b.n	8002f6a <HAL_UART_Receive+0xe4>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002f70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d108      	bne.n	8002f8e <HAL_UART_Receive+0x108>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d104      	bne.n	8002f8e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e003      	b.n	8002f96 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f9e:	e032      	b.n	8003006 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2120      	movs	r1, #32
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb75 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e031      	b.n	800301e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10c      	bne.n	8002fda <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	8a7b      	ldrh	r3, [r7, #18]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	e00c      	b.n	8002ff4 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	8a7b      	ldrh	r3, [r7, #18]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1c6      	bne.n	8002fa0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4ba6      	ldr	r3, [pc, #664]	; (80032ec <UART_SetConfig+0x2c4>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	430b      	orrs	r3, r1
 800305e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a94      	ldr	r2, [pc, #592]	; (80032f0 <UART_SetConfig+0x2c8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d120      	bne.n	80030e6 <UART_SetConfig+0xbe>
 80030a4:	4b93      	ldr	r3, [pc, #588]	; (80032f4 <UART_SetConfig+0x2cc>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d816      	bhi.n	80030e0 <UART_SetConfig+0xb8>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x90>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d5 	.word	0x080030d5
 80030c0:	080030cf 	.word	0x080030cf
 80030c4:	080030db 	.word	0x080030db
 80030c8:	2301      	movs	r3, #1
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e150      	b.n	8003370 <UART_SetConfig+0x348>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e14d      	b.n	8003370 <UART_SetConfig+0x348>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e14a      	b.n	8003370 <UART_SetConfig+0x348>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e147      	b.n	8003370 <UART_SetConfig+0x348>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e144      	b.n	8003370 <UART_SetConfig+0x348>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a83      	ldr	r2, [pc, #524]	; (80032f8 <UART_SetConfig+0x2d0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d132      	bne.n	8003156 <UART_SetConfig+0x12e>
 80030f0:	4b80      	ldr	r3, [pc, #512]	; (80032f4 <UART_SetConfig+0x2cc>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d828      	bhi.n	8003150 <UART_SetConfig+0x128>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <UART_SetConfig+0xdc>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003139 	.word	0x08003139
 8003108:	08003151 	.word	0x08003151
 800310c:	08003151 	.word	0x08003151
 8003110:	08003151 	.word	0x08003151
 8003114:	08003145 	.word	0x08003145
 8003118:	08003151 	.word	0x08003151
 800311c:	08003151 	.word	0x08003151
 8003120:	08003151 	.word	0x08003151
 8003124:	0800313f 	.word	0x0800313f
 8003128:	08003151 	.word	0x08003151
 800312c:	08003151 	.word	0x08003151
 8003130:	08003151 	.word	0x08003151
 8003134:	0800314b 	.word	0x0800314b
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e118      	b.n	8003370 <UART_SetConfig+0x348>
 800313e:	2302      	movs	r3, #2
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e115      	b.n	8003370 <UART_SetConfig+0x348>
 8003144:	2304      	movs	r3, #4
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e112      	b.n	8003370 <UART_SetConfig+0x348>
 800314a:	2308      	movs	r3, #8
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e10f      	b.n	8003370 <UART_SetConfig+0x348>
 8003150:	2310      	movs	r3, #16
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e10c      	b.n	8003370 <UART_SetConfig+0x348>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a68      	ldr	r2, [pc, #416]	; (80032fc <UART_SetConfig+0x2d4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d120      	bne.n	80031a2 <UART_SetConfig+0x17a>
 8003160:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d013      	beq.n	8003196 <UART_SetConfig+0x16e>
 800316e:	2b30      	cmp	r3, #48	; 0x30
 8003170:	d814      	bhi.n	800319c <UART_SetConfig+0x174>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d009      	beq.n	800318a <UART_SetConfig+0x162>
 8003176:	2b20      	cmp	r3, #32
 8003178:	d810      	bhi.n	800319c <UART_SetConfig+0x174>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <UART_SetConfig+0x15c>
 800317e:	2b10      	cmp	r3, #16
 8003180:	d006      	beq.n	8003190 <UART_SetConfig+0x168>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x174>
 8003184:	2300      	movs	r3, #0
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0f2      	b.n	8003370 <UART_SetConfig+0x348>
 800318a:	2302      	movs	r3, #2
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e0ef      	b.n	8003370 <UART_SetConfig+0x348>
 8003190:	2304      	movs	r3, #4
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e0ec      	b.n	8003370 <UART_SetConfig+0x348>
 8003196:	2308      	movs	r3, #8
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e0e9      	b.n	8003370 <UART_SetConfig+0x348>
 800319c:	2310      	movs	r3, #16
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e0e6      	b.n	8003370 <UART_SetConfig+0x348>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a56      	ldr	r2, [pc, #344]	; (8003300 <UART_SetConfig+0x2d8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d120      	bne.n	80031ee <UART_SetConfig+0x1c6>
 80031ac:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <UART_SetConfig+0x2cc>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031b6:	2bc0      	cmp	r3, #192	; 0xc0
 80031b8:	d013      	beq.n	80031e2 <UART_SetConfig+0x1ba>
 80031ba:	2bc0      	cmp	r3, #192	; 0xc0
 80031bc:	d814      	bhi.n	80031e8 <UART_SetConfig+0x1c0>
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d009      	beq.n	80031d6 <UART_SetConfig+0x1ae>
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d810      	bhi.n	80031e8 <UART_SetConfig+0x1c0>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <UART_SetConfig+0x1a8>
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d006      	beq.n	80031dc <UART_SetConfig+0x1b4>
 80031ce:	e00b      	b.n	80031e8 <UART_SetConfig+0x1c0>
 80031d0:	2300      	movs	r3, #0
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e0cc      	b.n	8003370 <UART_SetConfig+0x348>
 80031d6:	2302      	movs	r3, #2
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e0c9      	b.n	8003370 <UART_SetConfig+0x348>
 80031dc:	2304      	movs	r3, #4
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e0c6      	b.n	8003370 <UART_SetConfig+0x348>
 80031e2:	2308      	movs	r3, #8
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e0c3      	b.n	8003370 <UART_SetConfig+0x348>
 80031e8:	2310      	movs	r3, #16
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e0c0      	b.n	8003370 <UART_SetConfig+0x348>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a44      	ldr	r2, [pc, #272]	; (8003304 <UART_SetConfig+0x2dc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <UART_SetConfig+0x21c>
 80031f8:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <UART_SetConfig+0x2cc>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003206:	d017      	beq.n	8003238 <UART_SetConfig+0x210>
 8003208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320c:	d817      	bhi.n	800323e <UART_SetConfig+0x216>
 800320e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003212:	d00b      	beq.n	800322c <UART_SetConfig+0x204>
 8003214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003218:	d811      	bhi.n	800323e <UART_SetConfig+0x216>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <UART_SetConfig+0x1fe>
 800321e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003222:	d006      	beq.n	8003232 <UART_SetConfig+0x20a>
 8003224:	e00b      	b.n	800323e <UART_SetConfig+0x216>
 8003226:	2300      	movs	r3, #0
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e0a1      	b.n	8003370 <UART_SetConfig+0x348>
 800322c:	2302      	movs	r3, #2
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e09e      	b.n	8003370 <UART_SetConfig+0x348>
 8003232:	2304      	movs	r3, #4
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e09b      	b.n	8003370 <UART_SetConfig+0x348>
 8003238:	2308      	movs	r3, #8
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e098      	b.n	8003370 <UART_SetConfig+0x348>
 800323e:	2310      	movs	r3, #16
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e095      	b.n	8003370 <UART_SetConfig+0x348>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2f      	ldr	r2, [pc, #188]	; (8003308 <UART_SetConfig+0x2e0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d125      	bne.n	800329a <UART_SetConfig+0x272>
 800324e:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <UART_SetConfig+0x2cc>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325c:	d017      	beq.n	800328e <UART_SetConfig+0x266>
 800325e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003262:	d817      	bhi.n	8003294 <UART_SetConfig+0x26c>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d00b      	beq.n	8003282 <UART_SetConfig+0x25a>
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d811      	bhi.n	8003294 <UART_SetConfig+0x26c>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x254>
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d006      	beq.n	8003288 <UART_SetConfig+0x260>
 800327a:	e00b      	b.n	8003294 <UART_SetConfig+0x26c>
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e076      	b.n	8003370 <UART_SetConfig+0x348>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e073      	b.n	8003370 <UART_SetConfig+0x348>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e070      	b.n	8003370 <UART_SetConfig+0x348>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e06d      	b.n	8003370 <UART_SetConfig+0x348>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e06a      	b.n	8003370 <UART_SetConfig+0x348>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	; (800330c <UART_SetConfig+0x2e4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d138      	bne.n	8003316 <UART_SetConfig+0x2ee>
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <UART_SetConfig+0x2cc>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032b2:	d017      	beq.n	80032e4 <UART_SetConfig+0x2bc>
 80032b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032b8:	d82a      	bhi.n	8003310 <UART_SetConfig+0x2e8>
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032be:	d00b      	beq.n	80032d8 <UART_SetConfig+0x2b0>
 80032c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c4:	d824      	bhi.n	8003310 <UART_SetConfig+0x2e8>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <UART_SetConfig+0x2aa>
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	d006      	beq.n	80032de <UART_SetConfig+0x2b6>
 80032d0:	e01e      	b.n	8003310 <UART_SetConfig+0x2e8>
 80032d2:	2300      	movs	r3, #0
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e04b      	b.n	8003370 <UART_SetConfig+0x348>
 80032d8:	2302      	movs	r3, #2
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e048      	b.n	8003370 <UART_SetConfig+0x348>
 80032de:	2304      	movs	r3, #4
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e045      	b.n	8003370 <UART_SetConfig+0x348>
 80032e4:	2308      	movs	r3, #8
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e042      	b.n	8003370 <UART_SetConfig+0x348>
 80032ea:	bf00      	nop
 80032ec:	efff69f3 	.word	0xefff69f3
 80032f0:	40011000 	.word	0x40011000
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40004400 	.word	0x40004400
 80032fc:	40004800 	.word	0x40004800
 8003300:	40004c00 	.word	0x40004c00
 8003304:	40005000 	.word	0x40005000
 8003308:	40011400 	.word	0x40011400
 800330c:	40007800 	.word	0x40007800
 8003310:	2310      	movs	r3, #16
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e02c      	b.n	8003370 <UART_SetConfig+0x348>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a72      	ldr	r2, [pc, #456]	; (80034e4 <UART_SetConfig+0x4bc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d125      	bne.n	800336c <UART_SetConfig+0x344>
 8003320:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <UART_SetConfig+0x4c0>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800332a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800332e:	d017      	beq.n	8003360 <UART_SetConfig+0x338>
 8003330:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003334:	d817      	bhi.n	8003366 <UART_SetConfig+0x33e>
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333a:	d00b      	beq.n	8003354 <UART_SetConfig+0x32c>
 800333c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003340:	d811      	bhi.n	8003366 <UART_SetConfig+0x33e>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <UART_SetConfig+0x326>
 8003346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800334a:	d006      	beq.n	800335a <UART_SetConfig+0x332>
 800334c:	e00b      	b.n	8003366 <UART_SetConfig+0x33e>
 800334e:	2300      	movs	r3, #0
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e00d      	b.n	8003370 <UART_SetConfig+0x348>
 8003354:	2302      	movs	r3, #2
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e00a      	b.n	8003370 <UART_SetConfig+0x348>
 800335a:	2304      	movs	r3, #4
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e007      	b.n	8003370 <UART_SetConfig+0x348>
 8003360:	2308      	movs	r3, #8
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e004      	b.n	8003370 <UART_SetConfig+0x348>
 8003366:	2310      	movs	r3, #16
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e001      	b.n	8003370 <UART_SetConfig+0x348>
 800336c:	2310      	movs	r3, #16
 800336e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003378:	d15b      	bne.n	8003432 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800337a:	7ffb      	ldrb	r3, [r7, #31]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d828      	bhi.n	80033d2 <UART_SetConfig+0x3aa>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <UART_SetConfig+0x360>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033d3 	.word	0x080033d3
 8003398:	080033c3 	.word	0x080033c3
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	080033d3 	.word	0x080033d3
 80033a4:	080033d3 	.word	0x080033d3
 80033a8:	080033cb 	.word	0x080033cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7fe fd60 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 80033b0:	61b8      	str	r0, [r7, #24]
        break;
 80033b2:	e013      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7fe fd70 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 80033b8:	61b8      	str	r0, [r7, #24]
        break;
 80033ba:	e00f      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <UART_SetConfig+0x4c4>)
 80033be:	61bb      	str	r3, [r7, #24]
        break;
 80033c0:	e00c      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7fe fc43 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 80033c6:	61b8      	str	r0, [r7, #24]
        break;
 80033c8:	e008      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ce:	61bb      	str	r3, [r7, #24]
        break;
 80033d0:	e004      	b.n	80033dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	77bb      	strb	r3, [r7, #30]
        break;
 80033da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d074      	beq.n	80034cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	005a      	lsls	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d916      	bls.n	800342c <UART_SetConfig+0x404>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d212      	bcs.n	800342c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f023 030f 	bic.w	r3, r3, #15
 800340e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	b29b      	uxth	r3, r3
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	b29a      	uxth	r2, r3
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	4313      	orrs	r3, r2
 8003420:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	89fa      	ldrh	r2, [r7, #14]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e04f      	b.n	80034cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	77bb      	strb	r3, [r7, #30]
 8003430:	e04c      	b.n	80034cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d828      	bhi.n	800348a <UART_SetConfig+0x462>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0x418>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	0800348b 	.word	0x0800348b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800348b 	.word	0x0800348b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe fd04 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8003468:	61b8      	str	r0, [r7, #24]
        break;
 800346a:	e013      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800346c:	f7fe fd14 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8003470:	61b8      	str	r0, [r7, #24]
        break;
 8003472:	e00f      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <UART_SetConfig+0x4c4>)
 8003476:	61bb      	str	r3, [r7, #24]
        break;
 8003478:	e00c      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7fe fbe7 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 800347e:	61b8      	str	r0, [r7, #24]
        break;
 8003480:	e008      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003486:	61bb      	str	r3, [r7, #24]
        break;
 8003488:	e004      	b.n	8003494 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	77bb      	strb	r3, [r7, #30]
        break;
 8003492:	bf00      	nop
    }

    if (pclk != 0U)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	085a      	lsrs	r2, r3, #1
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d909      	bls.n	80034c8 <UART_SetConfig+0x4a0>
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ba:	d205      	bcs.n	80034c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e001      	b.n	80034cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40007c00 	.word	0x40007c00
 80034e8:	40023800 	.word	0x40023800
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ee:	d10a      	bne.n	8003606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fd fc46 	bl	8000ed4 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d10e      	bne.n	8003676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f817 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e00d      	b.n	8003692 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b09c      	sub	sp, #112	; 0x70
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	4613      	mov	r3, r2
 80036a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036aa:	e0a5      	b.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	f000 80a1 	beq.w	80037f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fd fc0d 	bl	8000ed4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <UART_WaitOnFlagUntilTimeout+0x32>
 80036c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d13e      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e0:	667b      	str	r3, [r7, #100]	; 0x64
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e6      	bne.n	80036cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	663b      	str	r3, [r7, #96]	; 0x60
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3308      	adds	r3, #8
 800371c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800371e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800372c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e067      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d04f      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003766:	d147      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003770:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
 8003792:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e6      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	613b      	str	r3, [r7, #16]
   return(result);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3308      	adds	r3, #8
 80037c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037c4:	623a      	str	r2, [r7, #32]
 80037c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	69f9      	ldr	r1, [r7, #28]
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e010      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	429a      	cmp	r2, r3
 8003814:	f43f af4a 	beq.w	80036ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3770      	adds	r7, #112	; 0x70
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003834:	2b84      	cmp	r3, #132	; 0x84
 8003836:	d005      	beq.n	8003844 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003838:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	3303      	adds	r3, #3
 8003842:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003844:	68fb      	ldr	r3, [r7, #12]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003856:	f001 f85b 	bl	8004910 <vTaskStartScheduler>
  
  return osOK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}

08003860 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af04      	add	r7, sp, #16
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d020      	beq.n	80038b4 <osThreadCreate+0x54>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01c      	beq.n	80038b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685c      	ldr	r4, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681d      	ldr	r5, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691e      	ldr	r6, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ffc8 	bl	8003822 <makeFreeRtosPriority>
 8003892:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800389c:	9202      	str	r2, [sp, #8]
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	9100      	str	r1, [sp, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	4632      	mov	r2, r6
 80038a6:	4629      	mov	r1, r5
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 fe39 	bl	8004520 <xTaskCreateStatic>
 80038ae:	4603      	mov	r3, r0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e01c      	b.n	80038ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685c      	ldr	r4, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038c0:	b29e      	uxth	r6, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ffaa 	bl	8003822 <makeFreeRtosPriority>
 80038ce:	4602      	mov	r2, r0
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	9200      	str	r2, [sp, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4632      	mov	r2, r6
 80038dc:	4629      	mov	r1, r5
 80038de:	4620      	mov	r0, r4
 80038e0:	f000 fe81 	bl	80045e6 <xTaskCreate>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <osDelay+0x16>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	e000      	b.n	8003910 <osDelay+0x18>
 800390e:	2301      	movs	r3, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f000 ffc7 	bl	80048a4 <vTaskDelay>
  
  return osOK;
 8003916:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f103 0208 	add.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f103 0208 	add.w	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f103 0208 	add.w	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	601a      	str	r2, [r3, #0]
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d103      	bne.n	80039e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e00c      	b.n	80039fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3308      	adds	r3, #8
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e002      	b.n	80039f0 <vListInsert+0x2e>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d2f6      	bcs.n	80039ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	601a      	str	r2, [r3, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6892      	ldr	r2, [r2, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6852      	ldr	r2, [r2, #4]
 8003a54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d103      	bne.n	8003a68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1e5a      	subs	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10c      	bne.n	8003ab6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	b672      	cpsid	i
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	b662      	cpsie	i
 8003ab0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003ab6:	f002 f949 	bl	8005d4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	441a      	add	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	441a      	add	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	22ff      	movs	r2, #255	; 0xff
 8003afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	22ff      	movs	r2, #255	; 0xff
 8003b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d114      	bne.n	8003b36 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01a      	beq.n	8003b4a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3310      	adds	r3, #16
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 f9f5 	bl	8004f08 <xTaskRemoveFromEventList>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d012      	beq.n	8003b4a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <xQueueGenericReset+0xd0>)
 8003b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	e009      	b.n	8003b4a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3310      	adds	r3, #16
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fef0 	bl	8003920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3324      	adds	r3, #36	; 0x24
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff feeb 	bl	8003920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b4a:	f002 f933 	bl	8005db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b4e:	2301      	movs	r3, #1
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08e      	sub	sp, #56	; 0x38
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10c      	bne.n	8003b8a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	b672      	cpsid	i
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	b662      	cpsie	i
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10c      	bne.n	8003baa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	b672      	cpsid	i
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	b662      	cpsie	i
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <xQueueGenericCreateStatic+0x5a>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <xQueueGenericCreateStatic+0x5e>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericCreateStatic+0x60>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10c      	bne.n	8003bda <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	b672      	cpsid	i
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	b662      	cpsie	i
 8003bd4:	623b      	str	r3, [r7, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <xQueueGenericCreateStatic+0x8a>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <xQueueGenericCreateStatic+0x8e>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericCreateStatic+0x90>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10c      	bne.n	8003c0a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	b672      	cpsid	i
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	b662      	cpsie	i
 8003c04:	61fb      	str	r3, [r7, #28]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c0a:	2350      	movs	r3, #80	; 0x50
 8003c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b50      	cmp	r3, #80	; 0x50
 8003c12:	d00c      	beq.n	8003c2e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	b672      	cpsid	i
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	b662      	cpsie	i
 8003c28:	61bb      	str	r3, [r7, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f847 	bl	8003ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3730      	adds	r7, #48	; 0x30
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10c      	bne.n	8003c8e <xQueueGenericCreate+0x2e>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	b672      	cpsid	i
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	b662      	cpsie	i
 8003c88:	613b      	str	r3, [r7, #16]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e004      	b.n	8003ca4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	3350      	adds	r3, #80	; 0x50
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f002 f97b 	bl	8005fa4 <pvPortMalloc>
 8003cae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d011      	beq.n	8003cda <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3350      	adds	r3, #80	; 0x50
 8003cbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cc8:	79fa      	ldrb	r2, [r7, #7]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f805 	bl	8003ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cda:	69bb      	ldr	r3, [r7, #24]
	}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e002      	b.n	8003d06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d12:	2101      	movs	r1, #1
 8003d14:	69b8      	ldr	r0, [r7, #24]
 8003d16:	f7ff feb7 	bl	8003a88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08e      	sub	sp, #56	; 0x38
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10c      	bne.n	8003d62 <xQueueGenericSend+0x36>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	b672      	cpsid	i
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	b662      	cpsie	i
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <xQueueGenericSend+0x44>
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <xQueueGenericSend+0x48>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <xQueueGenericSend+0x4a>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <xQueueGenericSend+0x68>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	b672      	cpsid	i
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	b662      	cpsie	i
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d103      	bne.n	8003da2 <xQueueGenericSend+0x76>
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <xQueueGenericSend+0x7a>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <xQueueGenericSend+0x7c>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10c      	bne.n	8003dc6 <xQueueGenericSend+0x9a>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	b672      	cpsid	i
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	b662      	cpsie	i
 8003dc0:	623b      	str	r3, [r7, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc6:	f001 fa69 	bl	800529c <xTaskGetSchedulerState>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <xQueueGenericSend+0xaa>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <xQueueGenericSend+0xae>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericSend+0xb0>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10c      	bne.n	8003dfa <xQueueGenericSend+0xce>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	b672      	cpsid	i
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	b662      	cpsie	i
 8003df4:	61fb      	str	r3, [r7, #28]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dfa:	f001 ffa7 	bl	8005d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <xQueueGenericSend+0xe4>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d129      	bne.n	8003e64 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e16:	f000 fa15 	bl	8004244 <prvCopyDataToQueue>
 8003e1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	3324      	adds	r3, #36	; 0x24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 f86d 	bl	8004f08 <xTaskRemoveFromEventList>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e34:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <xQueueGenericSend+0x208>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	e00a      	b.n	8003e5c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <xQueueGenericSend+0x208>)
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e5c:	f001 ffaa 	bl	8005db4 <vPortExitCritical>
				return pdPASS;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e063      	b.n	8003f2c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e6a:	f001 ffa3 	bl	8005db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e05c      	b.n	8003f2c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d106      	bne.n	8003e86 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 f8a7 	bl	8004fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e82:	2301      	movs	r3, #1
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e86:	f001 ff95 	bl	8005db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e8a:	f000 fdb7 	bl	80049fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e8e:	f001 ff5d 	bl	8005d4c <vPortEnterCritical>
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e98:	b25b      	sxtb	r3, r3
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d103      	bne.n	8003ea8 <xQueueGenericSend+0x17c>
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d103      	bne.n	8003ebe <xQueueGenericSend+0x192>
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ebe:	f001 ff79 	bl	8005db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ec2:	1d3a      	adds	r2, r7, #4
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 f896 	bl	8004ffc <xTaskCheckForTimeOut>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d124      	bne.n	8003f20 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ed8:	f000 faac 	bl	8004434 <prvIsQueueFull>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d018      	beq.n	8003f14 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 ffb8 	bl	8004e60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ef2:	f000 fa37 	bl	8004364 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ef6:	f000 fd8f 	bl	8004a18 <xTaskResumeAll>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f47f af7c 	bne.w	8003dfa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <xQueueGenericSend+0x208>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	e772      	b.n	8003dfa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f16:	f000 fa25 	bl	8004364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f1a:	f000 fd7d 	bl	8004a18 <xTaskResumeAll>
 8003f1e:	e76c      	b.n	8003dfa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f22:	f000 fa1f 	bl	8004364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f26:	f000 fd77 	bl	8004a18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3738      	adds	r7, #56	; 0x38
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	; 0x38
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10c      	bne.n	8003f6a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	b672      	cpsid	i
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	b662      	cpsie	i
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <xQueueGenericSendFromISR+0x40>
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <xQueueGenericSendFromISR+0x44>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <xQueueGenericSendFromISR+0x46>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	b672      	cpsid	i
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	b662      	cpsie	i
 8003f96:	623b      	str	r3, [r7, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d103      	bne.n	8003faa <xQueueGenericSendFromISR+0x72>
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <xQueueGenericSendFromISR+0x76>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <xQueueGenericSendFromISR+0x78>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10c      	bne.n	8003fce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	b672      	cpsid	i
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	b662      	cpsie	i
 8003fc8:	61fb      	str	r3, [r7, #28]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fce:	f001 ffa5 	bl	8005f1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	b672      	cpsid	i
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	b662      	cpsie	i
 8003fea:	61ba      	str	r2, [r7, #24]
 8003fec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <xQueueGenericSendFromISR+0xcc>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d12c      	bne.n	800405e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004014:	f000 f916 	bl	8004244 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004018:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d112      	bne.n	8004048 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	3324      	adds	r3, #36	; 0x24
 800402e:	4618      	mov	r0, r3
 8004030:	f000 ff6a 	bl	8004f08 <xTaskRemoveFromEventList>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800404c:	3301      	adds	r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	b25a      	sxtb	r2, r3
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004058:	2301      	movs	r3, #1
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800405c:	e001      	b.n	8004062 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800405e:	2300      	movs	r3, #0
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800406c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800406e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004070:	4618      	mov	r0, r3
 8004072:	3738      	adds	r7, #56	; 0x38
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004084:	2300      	movs	r3, #0
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10c      	bne.n	80040ac <xQueueReceive+0x34>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	b672      	cpsid	i
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	b662      	cpsie	i
 80040a6:	623b      	str	r3, [r7, #32]
}
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <xQueueReceive+0x42>
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <xQueueReceive+0x46>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <xQueueReceive+0x48>
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10c      	bne.n	80040de <xQueueReceive+0x66>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	b672      	cpsid	i
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	b662      	cpsie	i
 80040d8:	61fb      	str	r3, [r7, #28]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040de:	f001 f8dd 	bl	800529c <xTaskGetSchedulerState>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <xQueueReceive+0x76>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <xQueueReceive+0x7a>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <xQueueReceive+0x7c>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10c      	bne.n	8004112 <xQueueReceive+0x9a>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	b672      	cpsid	i
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	b662      	cpsie	i
 800410c:	61bb      	str	r3, [r7, #24]
}
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004112:	f001 fe1b 	bl	8005d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01f      	beq.n	8004162 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004126:	f000 f8f7 	bl	8004318 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1e5a      	subs	r2, r3, #1
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00f      	beq.n	800415a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	3310      	adds	r3, #16
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fee2 	bl	8004f08 <xTaskRemoveFromEventList>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800414a:	4b3d      	ldr	r3, [pc, #244]	; (8004240 <xQueueReceive+0x1c8>)
 800414c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800415a:	f001 fe2b 	bl	8005db4 <vPortExitCritical>
				return pdPASS;
 800415e:	2301      	movs	r3, #1
 8004160:	e069      	b.n	8004236 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d103      	bne.n	8004170 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004168:	f001 fe24 	bl	8005db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800416c:	2300      	movs	r3, #0
 800416e:	e062      	b.n	8004236 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004176:	f107 0310 	add.w	r3, r7, #16
 800417a:	4618      	mov	r0, r3
 800417c:	f000 ff28 	bl	8004fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004184:	f001 fe16 	bl	8005db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004188:	f000 fc38 	bl	80049fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800418c:	f001 fdde 	bl	8005d4c <vPortEnterCritical>
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d103      	bne.n	80041a6 <xQueueReceive+0x12e>
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d103      	bne.n	80041bc <xQueueReceive+0x144>
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041bc:	f001 fdfa 	bl	8005db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c0:	1d3a      	adds	r2, r7, #4
 80041c2:	f107 0310 	add.w	r3, r7, #16
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 ff17 	bl	8004ffc <xTaskCheckForTimeOut>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d123      	bne.n	800421c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d6:	f000 f917 	bl	8004408 <prvIsQueueEmpty>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	3324      	adds	r3, #36	; 0x24
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fe39 	bl	8004e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f0:	f000 f8b8 	bl	8004364 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041f4:	f000 fc10 	bl	8004a18 <xTaskResumeAll>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d189      	bne.n	8004112 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <xQueueReceive+0x1c8>)
 8004200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	e780      	b.n	8004112 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004212:	f000 f8a7 	bl	8004364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004216:	f000 fbff 	bl	8004a18 <xTaskResumeAll>
 800421a:	e77a      	b.n	8004112 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800421c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421e:	f000 f8a1 	bl	8004364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004222:	f000 fbf9 	bl	8004a18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004228:	f000 f8ee 	bl	8004408 <prvIsQueueEmpty>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	f43f af6f 	beq.w	8004112 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004236:	4618      	mov	r0, r3
 8004238:	3730      	adds	r7, #48	; 0x30
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	e000ed04 	.word	0xe000ed04

08004244 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10d      	bne.n	800427e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d14d      	bne.n	8004306 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4618      	mov	r0, r3
 8004270:	f001 f832 	bl	80052d8 <xTaskPriorityDisinherit>
 8004274:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	e043      	b.n	8004306 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d119      	bne.n	80042b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6858      	ldr	r0, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	461a      	mov	r2, r3
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	f002 f995 	bl	80065be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d32b      	bcc.n	8004306 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e026      	b.n	8004306 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68d8      	ldr	r0, [r3, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	461a      	mov	r2, r3
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	f002 f97b 	bl	80065be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	425b      	negs	r3, r3
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d207      	bcs.n	80042f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	425b      	negs	r3, r3
 80042ee:	441a      	add	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d105      	bne.n	8004306 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	3b01      	subs	r3, #1
 8004304:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800430e:	697b      	ldr	r3, [r7, #20]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d018      	beq.n	800435c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	441a      	add	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	d303      	bcc.n	800434c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68d9      	ldr	r1, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	461a      	mov	r2, r3
 8004356:	6838      	ldr	r0, [r7, #0]
 8004358:	f002 f931 	bl	80065be <memcpy>
	}
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800436c:	f001 fcee 	bl	8005d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004376:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004378:	e011      	b.n	800439e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3324      	adds	r3, #36	; 0x24
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fdbe 	bl	8004f08 <xTaskRemoveFromEventList>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004392:	f000 fe99 	bl	80050c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	3b01      	subs	r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800439e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	dce9      	bgt.n	800437a <prvUnlockQueue+0x16>
 80043a6:	e000      	b.n	80043aa <prvUnlockQueue+0x46>
					break;
 80043a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	22ff      	movs	r2, #255	; 0xff
 80043ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80043b2:	f001 fcff 	bl	8005db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043b6:	f001 fcc9 	bl	8005d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043c2:	e011      	b.n	80043e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3310      	adds	r3, #16
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fd99 	bl	8004f08 <xTaskRemoveFromEventList>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043dc:	f000 fe74 	bl	80050c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043e0:	7bbb      	ldrb	r3, [r7, #14]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dce9      	bgt.n	80043c4 <prvUnlockQueue+0x60>
 80043f0:	e000      	b.n	80043f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043fc:	f001 fcda 	bl	8005db4 <vPortExitCritical>
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004410:	f001 fc9c 	bl	8005d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800441c:	2301      	movs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e001      	b.n	8004426 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004426:	f001 fcc5 	bl	8005db4 <vPortExitCritical>

	return xReturn;
 800442a:	68fb      	ldr	r3, [r7, #12]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800443c:	f001 fc86 	bl	8005d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	429a      	cmp	r2, r3
 800444a:	d102      	bne.n	8004452 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e001      	b.n	8004456 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004456:	f001 fcad 	bl	8005db4 <vPortExitCritical>

	return xReturn;
 800445a:	68fb      	ldr	r3, [r7, #12]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e014      	b.n	800449e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004474:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <vQueueAddToRegistry+0x50>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004480:	490c      	ldr	r1, [pc, #48]	; (80044b4 <vQueueAddToRegistry+0x50>)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <vQueueAddToRegistry+0x50>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004496:	e006      	b.n	80044a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3301      	adds	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b07      	cmp	r3, #7
 80044a2:	d9e7      	bls.n	8004474 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000e1c 	.word	0x20000e1c

080044b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044c8:	f001 fc40 	bl	8005d4c <vPortEnterCritical>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d103      	bne.n	80044e2 <vQueueWaitForMessageRestricted+0x2a>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d103      	bne.n	80044f8 <vQueueWaitForMessageRestricted+0x40>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044f8:	f001 fc5c 	bl	8005db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3324      	adds	r3, #36	; 0x24
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fccd 	bl	8004eac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004512:	6978      	ldr	r0, [r7, #20]
 8004514:	f7ff ff26 	bl	8004364 <prvUnlockQueue>
	}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	; 0x38
 8004524:	af04      	add	r7, sp, #16
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10c      	bne.n	800454e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	b672      	cpsid	i
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	b662      	cpsie	i
 8004548:	623b      	str	r3, [r7, #32]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10c      	bne.n	800456e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	b672      	cpsid	i
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	b662      	cpsie	i
 8004568:	61fb      	str	r3, [r7, #28]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800456e:	23c4      	movs	r3, #196	; 0xc4
 8004570:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2bc4      	cmp	r3, #196	; 0xc4
 8004576:	d00c      	beq.n	8004592 <xTaskCreateStatic+0x72>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	b672      	cpsid	i
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	b662      	cpsie	i
 800458c:	61bb      	str	r3, [r7, #24]
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01e      	beq.n	80045d8 <xTaskCreateStatic+0xb8>
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045b2:	2300      	movs	r3, #0
 80045b4:	9303      	str	r3, [sp, #12]
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	9302      	str	r3, [sp, #8]
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f850 	bl	8004670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045d2:	f000 f8f9 	bl	80047c8 <prvAddNewTaskToReadyList>
 80045d6:	e001      	b.n	80045dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045dc:	697b      	ldr	r3, [r7, #20]
	}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b08c      	sub	sp, #48	; 0x30
 80045ea:	af04      	add	r7, sp, #16
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 fcd2 	bl	8005fa4 <pvPortMalloc>
 8004600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004608:	20c4      	movs	r0, #196	; 0xc4
 800460a:	f001 fccb 	bl	8005fa4 <pvPortMalloc>
 800460e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
 800461c:	e005      	b.n	800462a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800461e:	6978      	ldr	r0, [r7, #20]
 8004620:	f001 fd90 	bl	8006144 <vPortFree>
 8004624:	e001      	b.n	800462a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d017      	beq.n	8004660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	2300      	movs	r3, #0
 800463c:	9303      	str	r3, [sp, #12]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f80e 	bl	8004670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004654:	69f8      	ldr	r0, [r7, #28]
 8004656:	f000 f8b7 	bl	80047c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800465a:	2301      	movs	r3, #1
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e002      	b.n	8004666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004666:	69bb      	ldr	r3, [r7, #24]
	}
 8004668:	4618      	mov	r0, r3
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	461a      	mov	r2, r3
 8004688:	21a5      	movs	r1, #165	; 0xa5
 800468a:	f001 ffa6 	bl	80065da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004698:	440b      	add	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f023 0307 	bic.w	r3, r3, #7
 80046a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	b672      	cpsid	i
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	b662      	cpsie	i
 80046c6:	617b      	str	r3, [r7, #20]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01f      	beq.n	8004712 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e012      	b.n	80046fe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	7819      	ldrb	r1, [r3, #0]
 80046e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	3334      	adds	r3, #52	; 0x34
 80046e8:	460a      	mov	r2, r1
 80046ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d9e9      	bls.n	80046d8 <prvInitialiseNewTask+0x68>
 8004704:	e000      	b.n	8004708 <prvInitialiseNewTask+0x98>
			{
				break;
 8004706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004710:	e003      	b.n	800471a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	2b06      	cmp	r3, #6
 800471e:	d901      	bls.n	8004724 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004720:	2306      	movs	r3, #6
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	2200      	movs	r2, #0
 8004734:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	3304      	adds	r3, #4
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f910 	bl	8003960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	3318      	adds	r3, #24
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff f90b 	bl	8003960 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	f1c3 0207 	rsb	r2, r3, #7
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	2200      	movs	r2, #0
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	2200      	movs	r2, #0
 800476a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2200      	movs	r2, #0
 8004772:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	3358      	adds	r3, #88	; 0x58
 800477a:	2260      	movs	r2, #96	; 0x60
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f001 ff2b 	bl	80065da <memset>
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <prvInitialiseNewTask+0x14c>)
 8004788:	65da      	str	r2, [r3, #92]	; 0x5c
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <prvInitialiseNewTask+0x150>)
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <prvInitialiseNewTask+0x154>)
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	69b8      	ldr	r0, [r7, #24]
 800479c:	f001 f9ca 	bl	8005b34 <pxPortInitialiseStack>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b2:	bf00      	nop
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08007134 	.word	0x08007134
 80047c0:	08007154 	.word	0x08007154
 80047c4:	08007114 	.word	0x08007114

080047c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047d0:	f001 fabc 	bl	8005d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047d4:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <prvAddNewTaskToReadyList+0xc0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	4a2b      	ldr	r2, [pc, #172]	; (8004888 <prvAddNewTaskToReadyList+0xc0>)
 80047dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047de:	4b2b      	ldr	r3, [pc, #172]	; (800488c <prvAddNewTaskToReadyList+0xc4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <prvAddNewTaskToReadyList+0xc4>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047ec:	4b26      	ldr	r3, [pc, #152]	; (8004888 <prvAddNewTaskToReadyList+0xc0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d110      	bne.n	8004816 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047f4:	f000 fc8e 	bl	8005114 <prvInitialiseTaskLists>
 80047f8:	e00d      	b.n	8004816 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047fa:	4b25      	ldr	r3, [pc, #148]	; (8004890 <prvAddNewTaskToReadyList+0xc8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <prvAddNewTaskToReadyList+0xc4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	429a      	cmp	r2, r3
 800480e:	d802      	bhi.n	8004816 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004810:	4a1e      	ldr	r2, [pc, #120]	; (800488c <prvAddNewTaskToReadyList+0xc4>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004816:	4b1f      	ldr	r3, [pc, #124]	; (8004894 <prvAddNewTaskToReadyList+0xcc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <prvAddNewTaskToReadyList+0xcc>)
 800481e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004820:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <prvAddNewTaskToReadyList+0xcc>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	2201      	movs	r2, #1
 800482e:	409a      	lsls	r2, r3
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <prvAddNewTaskToReadyList+0xd0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <prvAddNewTaskToReadyList+0xd0>)
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <prvAddNewTaskToReadyList+0xd4>)
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7ff f892 	bl	800397a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004856:	f001 faad 	bl	8005db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <prvAddNewTaskToReadyList+0xc8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00e      	beq.n	8004880 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <prvAddNewTaskToReadyList+0xc4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	429a      	cmp	r2, r3
 800486e:	d207      	bcs.n	8004880 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <prvAddNewTaskToReadyList+0xd8>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000f60 	.word	0x20000f60
 800488c:	20000e5c 	.word	0x20000e5c
 8004890:	20000f6c 	.word	0x20000f6c
 8004894:	20000f7c 	.word	0x20000f7c
 8004898:	20000f68 	.word	0x20000f68
 800489c:	20000e60 	.word	0x20000e60
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d019      	beq.n	80048ea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048b6:	4b14      	ldr	r3, [pc, #80]	; (8004908 <vTaskDelay+0x64>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <vTaskDelay+0x34>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	b672      	cpsid	i
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	b662      	cpsie	i
 80048d2:	60bb      	str	r3, [r7, #8]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80048d8:	f000 f890 	bl	80049fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048dc:	2100      	movs	r1, #0
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fd84 	bl	80053ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048e4:	f000 f898 	bl	8004a18 <xTaskResumeAll>
 80048e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <vTaskDelay+0x68>)
 80048f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000f88 	.word	0x20000f88
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800491e:	463a      	mov	r2, r7
 8004920:	1d39      	adds	r1, r7, #4
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	4618      	mov	r0, r3
 8004928:	f7fb fe0a 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	9202      	str	r2, [sp, #8]
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	2300      	movs	r3, #0
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	2300      	movs	r3, #0
 800493c:	460a      	mov	r2, r1
 800493e:	4927      	ldr	r1, [pc, #156]	; (80049dc <vTaskStartScheduler+0xcc>)
 8004940:	4827      	ldr	r0, [pc, #156]	; (80049e0 <vTaskStartScheduler+0xd0>)
 8004942:	f7ff fded 	bl	8004520 <xTaskCreateStatic>
 8004946:	4603      	mov	r3, r0
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <vTaskStartScheduler+0xd4>)
 800494a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <vTaskStartScheduler+0xd4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e001      	b.n	800495e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004964:	f000 fda8 	bl	80054b8 <xTimerCreateTimerTask>
 8004968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d11f      	bne.n	80049b0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	b672      	cpsid	i
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	b662      	cpsie	i
 8004984:	613b      	str	r3, [r7, #16]
}
 8004986:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <vTaskStartScheduler+0xd8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3358      	adds	r3, #88	; 0x58
 800498e:	4a17      	ldr	r2, [pc, #92]	; (80049ec <vTaskStartScheduler+0xdc>)
 8004990:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004992:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <vTaskStartScheduler+0xe0>)
 8004994:	f04f 32ff 	mov.w	r2, #4294967295
 8004998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800499a:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <vTaskStartScheduler+0xe4>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <vTaskStartScheduler+0xe8>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80049a6:	f7fb fdb5 	bl	8000514 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049aa:	f001 f951 	bl	8005c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049ae:	e010      	b.n	80049d2 <vTaskStartScheduler+0xc2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d10c      	bne.n	80049d2 <vTaskStartScheduler+0xc2>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	b672      	cpsid	i
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	b662      	cpsie	i
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <vTaskStartScheduler+0xc0>
}
 80049d2:	bf00      	nop
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	080070b8 	.word	0x080070b8
 80049e0:	080050e1 	.word	0x080050e1
 80049e4:	20000f84 	.word	0x20000f84
 80049e8:	20000e5c 	.word	0x20000e5c
 80049ec:	20000014 	.word	0x20000014
 80049f0:	20000f80 	.word	0x20000f80
 80049f4:	20000f6c 	.word	0x20000f6c
 80049f8:	20000f64 	.word	0x20000f64

080049fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <vTaskSuspendAll+0x18>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a03      	ldr	r2, [pc, #12]	; (8004a14 <vTaskSuspendAll+0x18>)
 8004a08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	20000f88 	.word	0x20000f88

08004a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a26:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <xTaskResumeAll+0x118>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <xTaskResumeAll+0x30>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	b672      	cpsid	i
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	b662      	cpsie	i
 8004a42:	603b      	str	r3, [r7, #0]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a48:	f001 f980 	bl	8005d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <xTaskResumeAll+0x118>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	4a37      	ldr	r2, [pc, #220]	; (8004b30 <xTaskResumeAll+0x118>)
 8004a54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <xTaskResumeAll+0x118>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d161      	bne.n	8004b22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a5e:	4b35      	ldr	r3, [pc, #212]	; (8004b34 <xTaskResumeAll+0x11c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d05d      	beq.n	8004b22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a66:	e02e      	b.n	8004ac6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a68:	4b33      	ldr	r3, [pc, #204]	; (8004b38 <xTaskResumeAll+0x120>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3318      	adds	r3, #24
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe ffdd 	bl	8003a34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe ffd8 	bl	8003a34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <xTaskResumeAll+0x124>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <xTaskResumeAll+0x124>)
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <xTaskResumeAll+0x128>)
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe ff64 	bl	800397a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <xTaskResumeAll+0x12c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <xTaskResumeAll+0x130>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <xTaskResumeAll+0x120>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1cc      	bne.n	8004a68 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ad4:	f000 fbc2 	bl	800525c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ad8:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <xTaskResumeAll+0x134>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ae4:	f000 f846 	bl	8004b74 <xTaskIncrementTick>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <xTaskResumeAll+0x130>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f1      	bne.n	8004ae4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <xTaskResumeAll+0x134>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <xTaskResumeAll+0x130>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <xTaskResumeAll+0x138>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b22:	f001 f947 	bl	8005db4 <vPortExitCritical>

	return xAlreadyYielded;
 8004b26:	68bb      	ldr	r3, [r7, #8]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000f88 	.word	0x20000f88
 8004b34:	20000f60 	.word	0x20000f60
 8004b38:	20000f1c 	.word	0x20000f1c
 8004b3c:	20000f68 	.word	0x20000f68
 8004b40:	20000e60 	.word	0x20000e60
 8004b44:	20000e5c 	.word	0x20000e5c
 8004b48:	20000f74 	.word	0x20000f74
 8004b4c:	20000f70 	.word	0x20000f70
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <xTaskGetTickCount+0x1c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b60:	687b      	ldr	r3, [r7, #4]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000f64 	.word	0x20000f64

08004b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7e:	4b53      	ldr	r3, [pc, #332]	; (8004ccc <xTaskIncrementTick+0x158>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 8090 	bne.w	8004ca8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b88:	4b51      	ldr	r3, [pc, #324]	; (8004cd0 <xTaskIncrementTick+0x15c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b90:	4a4f      	ldr	r2, [pc, #316]	; (8004cd0 <xTaskIncrementTick+0x15c>)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d122      	bne.n	8004be2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b9c:	4b4d      	ldr	r3, [pc, #308]	; (8004cd4 <xTaskIncrementTick+0x160>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	b672      	cpsid	i
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	b662      	cpsie	i
 8004bba:	603b      	str	r3, [r7, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <xTaskIncrementTick+0x4a>
 8004bc0:	4b44      	ldr	r3, [pc, #272]	; (8004cd4 <xTaskIncrementTick+0x160>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	4b44      	ldr	r3, [pc, #272]	; (8004cd8 <xTaskIncrementTick+0x164>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a42      	ldr	r2, [pc, #264]	; (8004cd4 <xTaskIncrementTick+0x160>)
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4a42      	ldr	r2, [pc, #264]	; (8004cd8 <xTaskIncrementTick+0x164>)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <xTaskIncrementTick+0x168>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	4a40      	ldr	r2, [pc, #256]	; (8004cdc <xTaskIncrementTick+0x168>)
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	f000 fb3d 	bl	800525c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004be2:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <xTaskIncrementTick+0x16c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d348      	bcc.n	8004c7e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bec:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <xTaskIncrementTick+0x160>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf6:	4b3a      	ldr	r3, [pc, #232]	; (8004ce0 <xTaskIncrementTick+0x16c>)
 8004bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfc:	601a      	str	r2, [r3, #0]
					break;
 8004bfe:	e03e      	b.n	8004c7e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c00:	4b34      	ldr	r3, [pc, #208]	; (8004cd4 <xTaskIncrementTick+0x160>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d203      	bcs.n	8004c20 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c18:	4a31      	ldr	r2, [pc, #196]	; (8004ce0 <xTaskIncrementTick+0x16c>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c1e:	e02e      	b.n	8004c7e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe ff05 	bl	8003a34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3318      	adds	r3, #24
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fefc 	bl	8003a34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	2201      	movs	r2, #1
 8004c42:	409a      	lsls	r2, r3
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <xTaskIncrementTick+0x170>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <xTaskIncrementTick+0x170>)
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <xTaskIncrementTick+0x174>)
 8004c5c:	441a      	add	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fe fe88 	bl	800397a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <xTaskIncrementTick+0x178>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3b9      	bcc.n	8004bec <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c7c:	e7b6      	b.n	8004bec <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <xTaskIncrementTick+0x178>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	4918      	ldr	r1, [pc, #96]	; (8004ce8 <xTaskIncrementTick+0x174>)
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d901      	bls.n	8004c9a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004c9a:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <xTaskIncrementTick+0x17c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 8004ca2:	f7fb fe61 	bl	8000968 <vApplicationTickHook>
 8004ca6:	e006      	b.n	8004cb6 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <xTaskIncrementTick+0x17c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <xTaskIncrementTick+0x17c>)
 8004cb0:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004cb2:	f7fb fe59 	bl	8000968 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <xTaskIncrementTick+0x180>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cc2:	697b      	ldr	r3, [r7, #20]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000f88 	.word	0x20000f88
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000f14 	.word	0x20000f14
 8004cd8:	20000f18 	.word	0x20000f18
 8004cdc:	20000f78 	.word	0x20000f78
 8004ce0:	20000f80 	.word	0x20000f80
 8004ce4:	20000f68 	.word	0x20000f68
 8004ce8:	20000e60 	.word	0x20000e60
 8004cec:	20000e5c 	.word	0x20000e5c
 8004cf0:	20000f70 	.word	0x20000f70
 8004cf4:	20000f74 	.word	0x20000f74

08004cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cfe:	4b4f      	ldr	r3, [pc, #316]	; (8004e3c <vTaskSwitchContext+0x144>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d06:	4b4e      	ldr	r3, [pc, #312]	; (8004e40 <vTaskSwitchContext+0x148>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d0c:	e092      	b.n	8004e34 <vTaskSwitchContext+0x13c>
		xYieldPending = pdFALSE;
 8004d0e:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <vTaskSwitchContext+0x148>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004d14:	f7fb fc05 	bl	8000522 <getRunTimeCounterValue>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a4a      	ldr	r2, [pc, #296]	; (8004e44 <vTaskSwitchContext+0x14c>)
 8004d1c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004d1e:	4b49      	ldr	r3, [pc, #292]	; (8004e44 <vTaskSwitchContext+0x14c>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b49      	ldr	r3, [pc, #292]	; (8004e48 <vTaskSwitchContext+0x150>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d909      	bls.n	8004d3e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004d2a:	4b48      	ldr	r3, [pc, #288]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d30:	4a44      	ldr	r2, [pc, #272]	; (8004e44 <vTaskSwitchContext+0x14c>)
 8004d32:	6810      	ldr	r0, [r2, #0]
 8004d34:	4a44      	ldr	r2, [pc, #272]	; (8004e48 <vTaskSwitchContext+0x150>)
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	1a82      	subs	r2, r0, r2
 8004d3a:	440a      	add	r2, r1
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004d3e:	4b41      	ldr	r3, [pc, #260]	; (8004e44 <vTaskSwitchContext+0x14c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a41      	ldr	r2, [pc, #260]	; (8004e48 <vTaskSwitchContext+0x150>)
 8004d44:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004d46:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d111      	bne.n	8004d82 <vTaskSwitchContext+0x8a>
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3304      	adds	r3, #4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d10b      	bne.n	8004d82 <vTaskSwitchContext+0x8a>
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d105      	bne.n	8004d82 <vTaskSwitchContext+0x8a>
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d008      	beq.n	8004d94 <vTaskSwitchContext+0x9c>
 8004d82:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b31      	ldr	r3, [pc, #196]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3334      	adds	r3, #52	; 0x34
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f7fb fdde 	bl	8000950 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8004d94:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	; (8004e50 <vTaskSwitchContext+0x158>)
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da0:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <vTaskSwitchContext+0x15c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004dae:	7afb      	ldrb	r3, [r7, #11]
 8004db0:	f1c3 031f 	rsb	r3, r3, #31
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	4928      	ldr	r1, [pc, #160]	; (8004e58 <vTaskSwitchContext+0x160>)
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10c      	bne.n	8004de4 <vTaskSwitchContext+0xec>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	b672      	cpsid	i
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	b662      	cpsie	i
 8004dde:	607b      	str	r3, [r7, #4]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <vTaskSwitchContext+0xea>
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <vTaskSwitchContext+0x160>)
 8004df0:	4413      	add	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	3308      	adds	r3, #8
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d104      	bne.n	8004e14 <vTaskSwitchContext+0x11c>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004e1c:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e26:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <vTaskSwitchContext+0x158>)
 8004e28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <vTaskSwitchContext+0x154>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3358      	adds	r3, #88	; 0x58
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <vTaskSwitchContext+0x164>)
 8004e32:	6013      	str	r3, [r2, #0]
}
 8004e34:	bf00      	nop
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000f88 	.word	0x20000f88
 8004e40:	20000f74 	.word	0x20000f74
 8004e44:	20000f90 	.word	0x20000f90
 8004e48:	20000f8c 	.word	0x20000f8c
 8004e4c:	20000e5c 	.word	0x20000e5c
 8004e50:	20000f5c 	.word	0x20000f5c
 8004e54:	20000f68 	.word	0x20000f68
 8004e58:	20000e60 	.word	0x20000e60
 8004e5c:	20000014 	.word	0x20000014

08004e60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	b672      	cpsid	i
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	b662      	cpsie	i
 8004e84:	60fb      	str	r3, [r7, #12]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <vTaskPlaceOnEventList+0x48>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3318      	adds	r3, #24
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe fd95 	bl	80039c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e98:	2101      	movs	r1, #1
 8004e9a:	6838      	ldr	r0, [r7, #0]
 8004e9c:	f000 faa6 	bl	80053ec <prvAddCurrentTaskToDelayedList>
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000e5c 	.word	0x20000e5c

08004eac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10c      	bne.n	8004ed8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	b672      	cpsid	i
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	b662      	cpsie	i
 8004ed2:	617b      	str	r3, [r7, #20]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <vTaskPlaceOnEventListRestricted+0x58>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3318      	adds	r3, #24
 8004ede:	4619      	mov	r1, r3
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7fe fd4a 	bl	800397a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	68b8      	ldr	r0, [r7, #8]
 8004ef6:	f000 fa79 	bl	80053ec <prvAddCurrentTaskToDelayedList>
	}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000e5c 	.word	0x20000e5c

08004f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	b672      	cpsid	i
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	b662      	cpsie	i
 8004f32:	60fb      	str	r3, [r7, #12]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3318      	adds	r3, #24
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe fd79 	bl	8003a34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <xTaskRemoveFromEventList+0xb0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d11c      	bne.n	8004f84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe fd70 	bl	8003a34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	2201      	movs	r2, #1
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <xTaskRemoveFromEventList+0xb4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <xTaskRemoveFromEventList+0xb4>)
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <xTaskRemoveFromEventList+0xb8>)
 8004f74:	441a      	add	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe fcfc 	bl	800397a <vListInsertEnd>
 8004f82:	e005      	b.n	8004f90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	3318      	adds	r3, #24
 8004f88:	4619      	mov	r1, r3
 8004f8a:	480e      	ldr	r0, [pc, #56]	; (8004fc4 <xTaskRemoveFromEventList+0xbc>)
 8004f8c:	f7fe fcf5 	bl	800397a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <xTaskRemoveFromEventList+0xc0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d905      	bls.n	8004faa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <xTaskRemoveFromEventList+0xc4>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e001      	b.n	8004fae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fae:	697b      	ldr	r3, [r7, #20]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000f88 	.word	0x20000f88
 8004fbc:	20000f68 	.word	0x20000f68
 8004fc0:	20000e60 	.word	0x20000e60
 8004fc4:	20000f1c 	.word	0x20000f1c
 8004fc8:	20000e5c 	.word	0x20000e5c
 8004fcc:	20000f74 	.word	0x20000f74

08004fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <vTaskInternalSetTimeOutState+0x24>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <vTaskInternalSetTimeOutState+0x28>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	605a      	str	r2, [r3, #4]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	20000f78 	.word	0x20000f78
 8004ff8:	20000f64 	.word	0x20000f64

08004ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10c      	bne.n	8005026 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	b672      	cpsid	i
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	b662      	cpsie	i
 8005020:	613b      	str	r3, [r7, #16]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10c      	bne.n	8005046 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	b672      	cpsid	i
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	b662      	cpsie	i
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005046:	f000 fe81 	bl	8005d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <xTaskCheckForTimeOut+0xc4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d102      	bne.n	800506a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e023      	b.n	80050b2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <xTaskCheckForTimeOut+0xc8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d007      	beq.n	8005086 <xTaskCheckForTimeOut+0x8a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	e015      	b.n	80050b2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	429a      	cmp	r2, r3
 800508e:	d20b      	bcs.n	80050a8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff ff97 	bl	8004fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e004      	b.n	80050b2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050b2:	f000 fe7f 	bl	8005db4 <vPortExitCritical>

	return xReturn;
 80050b6:	69fb      	ldr	r3, [r7, #28]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000f64 	.word	0x20000f64
 80050c4:	20000f78 	.word	0x20000f78

080050c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <vTaskMissedYield+0x14>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000f74 	.word	0x20000f74

080050e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050e8:	f000 f854 	bl	8005194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <prvIdleTask+0x2c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d907      	bls.n	8005104 <prvIdleTask+0x24>
			{
				taskYIELD();
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <prvIdleTask+0x30>)
 80050f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005104:	f7fb fa15 	bl	8000532 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005108:	e7ee      	b.n	80050e8 <prvIdleTask+0x8>
 800510a:	bf00      	nop
 800510c:	20000e60 	.word	0x20000e60
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	e00c      	b.n	800513a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <prvInitialiseTaskLists+0x60>)
 800512c:	4413      	add	r3, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fbf6 	bl	8003920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3301      	adds	r3, #1
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b06      	cmp	r3, #6
 800513e:	d9ef      	bls.n	8005120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005140:	480d      	ldr	r0, [pc, #52]	; (8005178 <prvInitialiseTaskLists+0x64>)
 8005142:	f7fe fbed 	bl	8003920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005146:	480d      	ldr	r0, [pc, #52]	; (800517c <prvInitialiseTaskLists+0x68>)
 8005148:	f7fe fbea 	bl	8003920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800514c:	480c      	ldr	r0, [pc, #48]	; (8005180 <prvInitialiseTaskLists+0x6c>)
 800514e:	f7fe fbe7 	bl	8003920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005152:	480c      	ldr	r0, [pc, #48]	; (8005184 <prvInitialiseTaskLists+0x70>)
 8005154:	f7fe fbe4 	bl	8003920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005158:	480b      	ldr	r0, [pc, #44]	; (8005188 <prvInitialiseTaskLists+0x74>)
 800515a:	f7fe fbe1 	bl	8003920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <prvInitialiseTaskLists+0x78>)
 8005160:	4a05      	ldr	r2, [pc, #20]	; (8005178 <prvInitialiseTaskLists+0x64>)
 8005162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <prvInitialiseTaskLists+0x7c>)
 8005166:	4a05      	ldr	r2, [pc, #20]	; (800517c <prvInitialiseTaskLists+0x68>)
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000e60 	.word	0x20000e60
 8005178:	20000eec 	.word	0x20000eec
 800517c:	20000f00 	.word	0x20000f00
 8005180:	20000f1c 	.word	0x20000f1c
 8005184:	20000f30 	.word	0x20000f30
 8005188:	20000f48 	.word	0x20000f48
 800518c:	20000f14 	.word	0x20000f14
 8005190:	20000f18 	.word	0x20000f18

08005194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800519a:	e019      	b.n	80051d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800519c:	f000 fdd6 	bl	8005d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a0:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <prvCheckTasksWaitingTermination+0x50>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fc41 	bl	8003a34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <prvCheckTasksWaitingTermination+0x54>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <prvCheckTasksWaitingTermination+0x54>)
 80051ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <prvCheckTasksWaitingTermination+0x58>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <prvCheckTasksWaitingTermination+0x58>)
 80051c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051c6:	f000 fdf5 	bl	8005db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f810 	bl	80051f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <prvCheckTasksWaitingTermination+0x58>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e1      	bne.n	800519c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000f30 	.word	0x20000f30
 80051e8:	20000f60 	.word	0x20000f60
 80051ec:	20000f44 	.word	0x20000f44

080051f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3358      	adds	r3, #88	; 0x58
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fb0d 	bl	800681c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	4618      	mov	r0, r3
 8005212:	f000 ff97 	bl	8006144 <vPortFree>
				vPortFree( pxTCB );
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 ff94 	bl	8006144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800521c:	e01a      	b.n	8005254 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005224:	2b01      	cmp	r3, #1
 8005226:	d103      	bne.n	8005230 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 ff8b 	bl	8006144 <vPortFree>
	}
 800522e:	e011      	b.n	8005254 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005236:	2b02      	cmp	r3, #2
 8005238:	d00c      	beq.n	8005254 <prvDeleteTCB+0x64>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	b672      	cpsid	i
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	b662      	cpsie	i
 800524e:	60fb      	str	r3, [r7, #12]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <prvDeleteTCB+0x62>
	}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <prvResetNextTaskUnblockTime+0x38>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <prvResetNextTaskUnblockTime+0x3c>)
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005274:	e008      	b.n	8005288 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <prvResetNextTaskUnblockTime+0x38>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a04      	ldr	r2, [pc, #16]	; (8005298 <prvResetNextTaskUnblockTime+0x3c>)
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	20000f14 	.word	0x20000f14
 8005298:	20000f80 	.word	0x20000f80

0800529c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052a2:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <xTaskGetSchedulerState+0x34>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052aa:	2301      	movs	r3, #1
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	e008      	b.n	80052c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <xTaskGetSchedulerState+0x38>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052b8:	2302      	movs	r3, #2
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	e001      	b.n	80052c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052c2:	687b      	ldr	r3, [r7, #4]
	}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20000f6c 	.word	0x20000f6c
 80052d4:	20000f88 	.word	0x20000f88

080052d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d072      	beq.n	80053d4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052ee:	4b3c      	ldr	r3, [pc, #240]	; (80053e0 <xTaskPriorityDisinherit+0x108>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d00c      	beq.n	8005312 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	b672      	cpsid	i
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	b662      	cpsie	i
 800530c:	60fb      	str	r3, [r7, #12]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10c      	bne.n	8005334 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	b672      	cpsid	i
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	b662      	cpsie	i
 800532e:	60bb      	str	r3, [r7, #8]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	429a      	cmp	r2, r3
 8005348:	d044      	beq.n	80053d4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534e:	2b00      	cmp	r3, #0
 8005350:	d140      	bne.n	80053d4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3304      	adds	r3, #4
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe fb6c 	bl	8003a34 <uxListRemove>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d115      	bne.n	800538e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	491f      	ldr	r1, [pc, #124]	; (80053e4 <xTaskPriorityDisinherit+0x10c>)
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <xTaskPriorityDisinherit+0xb6>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	2201      	movs	r2, #1
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43da      	mvns	r2, r3
 8005384:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <xTaskPriorityDisinherit+0x110>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4013      	ands	r3, r2
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <xTaskPriorityDisinherit+0x110>)
 800538c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f1c3 0207 	rsb	r2, r3, #7
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	2201      	movs	r2, #1
 80053a8:	409a      	lsls	r2, r3
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <xTaskPriorityDisinherit+0x110>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <xTaskPriorityDisinherit+0x110>)
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <xTaskPriorityDisinherit+0x10c>)
 80053c2:	441a      	add	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f7fe fad5 	bl	800397a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053d4:	697b      	ldr	r3, [r7, #20]
	}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000e5c 	.word	0x20000e5c
 80053e4:	20000e60 	.word	0x20000e60
 80053e8:	20000f68 	.word	0x20000f68

080053ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053f6:	4b29      	ldr	r3, [pc, #164]	; (800549c <prvAddCurrentTaskToDelayedList+0xb0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053fc:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3304      	adds	r3, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fb16 	bl	8003a34 <uxListRemove>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800540e:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005424:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d10a      	bne.n	8005444 <prvAddCurrentTaskToDelayedList+0x58>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005434:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	481a      	ldr	r0, [pc, #104]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800543e:	f7fe fa9c 	bl	800397a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005442:	e026      	b.n	8005492 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d209      	bcs.n	8005470 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545c:	4b13      	ldr	r3, [pc, #76]	; (80054ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3304      	adds	r3, #4
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f7fe faaa 	bl	80039c2 <vListInsert>
}
 800546e:	e010      	b.n	8005492 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe faa0 	bl	80039c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d202      	bcs.n	8005492 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6013      	str	r3, [r2, #0]
}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000f64 	.word	0x20000f64
 80054a0:	20000e5c 	.word	0x20000e5c
 80054a4:	20000f68 	.word	0x20000f68
 80054a8:	20000f48 	.word	0x20000f48
 80054ac:	20000f18 	.word	0x20000f18
 80054b0:	20000f14 	.word	0x20000f14
 80054b4:	20000f80 	.word	0x20000f80

080054b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054c2:	f000 faf7 	bl	8005ab4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054c6:	4b1d      	ldr	r3, [pc, #116]	; (800553c <xTimerCreateTimerTask+0x84>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d021      	beq.n	8005512 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054d6:	1d3a      	adds	r2, r7, #4
 80054d8:	f107 0108 	add.w	r1, r7, #8
 80054dc:	f107 030c 	add.w	r3, r7, #12
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fb f847 	bl	8000574 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	9202      	str	r2, [sp, #8]
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	2302      	movs	r3, #2
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	460a      	mov	r2, r1
 80054f8:	4911      	ldr	r1, [pc, #68]	; (8005540 <xTimerCreateTimerTask+0x88>)
 80054fa:	4812      	ldr	r0, [pc, #72]	; (8005544 <xTimerCreateTimerTask+0x8c>)
 80054fc:	f7ff f810 	bl	8004520 <xTaskCreateStatic>
 8005500:	4603      	mov	r3, r0
 8005502:	4a11      	ldr	r2, [pc, #68]	; (8005548 <xTimerCreateTimerTask+0x90>)
 8005504:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <xTimerCreateTimerTask+0x90>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800550e:	2301      	movs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10c      	bne.n	8005532 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	b672      	cpsid	i
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	b662      	cpsie	i
 800552c:	613b      	str	r3, [r7, #16]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005532:	697b      	ldr	r3, [r7, #20]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000fc4 	.word	0x20000fc4
 8005540:	080070e8 	.word	0x080070e8
 8005544:	08005689 	.word	0x08005689
 8005548:	20000fc8 	.word	0x20000fc8

0800554c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10c      	bne.n	800557e <xTimerGenericCommand+0x32>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	b672      	cpsid	i
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	b662      	cpsie	i
 8005578:	623b      	str	r3, [r7, #32]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800557e:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <xTimerGenericCommand+0x9c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d02a      	beq.n	80055dc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b05      	cmp	r3, #5
 8005596:	dc18      	bgt.n	80055ca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005598:	f7ff fe80 	bl	800529c <xTaskGetSchedulerState>
 800559c:	4603      	mov	r3, r0
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d109      	bne.n	80055b6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <xTimerGenericCommand+0x9c>)
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f107 0114 	add.w	r1, r7, #20
 80055aa:	2300      	movs	r3, #0
 80055ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ae:	f7fe fbbd 	bl	8003d2c <xQueueGenericSend>
 80055b2:	6278      	str	r0, [r7, #36]	; 0x24
 80055b4:	e012      	b.n	80055dc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <xTimerGenericCommand+0x9c>)
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	f107 0114 	add.w	r1, r7, #20
 80055be:	2300      	movs	r3, #0
 80055c0:	2200      	movs	r2, #0
 80055c2:	f7fe fbb3 	bl	8003d2c <xQueueGenericSend>
 80055c6:	6278      	str	r0, [r7, #36]	; 0x24
 80055c8:	e008      	b.n	80055dc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055ca:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <xTimerGenericCommand+0x9c>)
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	f107 0114 	add.w	r1, r7, #20
 80055d2:	2300      	movs	r3, #0
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	f7fe fcaf 	bl	8003f38 <xQueueGenericSendFromISR>
 80055da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3728      	adds	r7, #40	; 0x28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000fc4 	.word	0x20000fc4

080055ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f6:	4b23      	ldr	r3, [pc, #140]	; (8005684 <prvProcessExpiredTimer+0x98>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fa15 	bl	8003a34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d024      	beq.n	8005662 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	18d1      	adds	r1, r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	6978      	ldr	r0, [r7, #20]
 8005626:	f000 f8d3 	bl	80057d0 <prvInsertTimerInActiveList>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d021      	beq.n	8005674 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005630:	2300      	movs	r3, #0
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	2100      	movs	r1, #0
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f7ff ff86 	bl	800554c <xTimerGenericCommand>
 8005640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d115      	bne.n	8005674 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	b672      	cpsid	i
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	b662      	cpsie	i
 800565c:	60fb      	str	r3, [r7, #12]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	4798      	blx	r3
}
 800567c:	bf00      	nop
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000fbc 	.word	0x20000fbc

08005688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f857 	bl	8005748 <prvGetNextExpireTime>
 800569a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f803 	bl	80056ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056a6:	f000 f8d5 	bl	8005854 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056aa:	e7f1      	b.n	8005690 <prvTimerTask+0x8>

080056ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056b6:	f7ff f9a1 	bl	80049fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f866 	bl	8005790 <prvSampleTimeNow>
 80056c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d130      	bne.n	800572e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d806      	bhi.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056da:	f7ff f99d 	bl	8004a18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff83 	bl	80055ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056e6:	e024      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <prvProcessTimerOrBlockTask+0x90>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <prvProcessTimerOrBlockTask+0x50>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <prvProcessTimerOrBlockTask+0x52>
 80056fc:	2300      	movs	r3, #0
 80056fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <prvProcessTimerOrBlockTask+0x94>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	f7fe fed3 	bl	80044b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005712:	f7ff f981 	bl	8004a18 <xTaskResumeAll>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <prvProcessTimerOrBlockTask+0x98>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
}
 800572c:	e001      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800572e:	f7ff f973 	bl	8004a18 <xTaskResumeAll>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000fc0 	.word	0x20000fc0
 8005740:	20000fc4 	.word	0x20000fc4
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <prvGetNextExpireTime+0x44>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <prvGetNextExpireTime+0x16>
 800575a:	2201      	movs	r2, #1
 800575c:	e000      	b.n	8005760 <prvGetNextExpireTime+0x18>
 800575e:	2200      	movs	r2, #0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <prvGetNextExpireTime+0x44>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e001      	b.n	800577c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000fbc 	.word	0x20000fbc

08005790 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005798:	f7ff f9dc 	bl	8004b54 <xTaskGetTickCount>
 800579c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <prvSampleTimeNow+0x3c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d205      	bcs.n	80057b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057a8:	f000 f91e 	bl	80059e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e002      	b.n	80057ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057ba:	4a04      	ldr	r2, [pc, #16]	; (80057cc <prvSampleTimeNow+0x3c>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057c0:	68fb      	ldr	r3, [r7, #12]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000fcc 	.word	0x20000fcc

080057d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d812      	bhi.n	800581c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e01b      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <prvInsertTimerInActiveList+0x7c>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fe f8d4 	bl	80039c2 <vListInsert>
 800581a:	e012      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d206      	bcs.n	8005832 <prvInsertTimerInActiveList+0x62>
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e007      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <prvInsertTimerInActiveList+0x80>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3304      	adds	r3, #4
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f7fe f8c0 	bl	80039c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000fc0 	.word	0x20000fc0
 8005850:	20000fbc 	.word	0x20000fbc

08005854 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	; 0x30
 8005858:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800585a:	e0b2      	b.n	80059c2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f2c0 80ae 	blt.w	80059c0 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe f8dd 	bl	8003a34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff87 	bl	8005790 <prvSampleTimeNow>
 8005882:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b09      	cmp	r3, #9
 8005888:	f200 809b 	bhi.w	80059c2 <prvProcessReceivedCommands+0x16e>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <prvProcessReceivedCommands+0x40>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	08005935 	.word	0x08005935
 80058a4:	08005949 	.word	0x08005949
 80058a8:	08005997 	.word	0x08005997
 80058ac:	080058bd 	.word	0x080058bd
 80058b0:	080058bd 	.word	0x080058bd
 80058b4:	08005935 	.word	0x08005935
 80058b8:	08005949 	.word	0x08005949
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	18d1      	adds	r1, r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058dc:	f7ff ff78 	bl	80057d0 <prvInsertTimerInActiveList>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d06d      	beq.n	80059c2 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d062      	beq.n	80059c2 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	441a      	add	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2300      	movs	r3, #0
 800590a:	2100      	movs	r1, #0
 800590c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800590e:	f7ff fe1d 	bl	800554c <xTimerGenericCommand>
 8005912:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d153      	bne.n	80059c2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	b672      	cpsid	i
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	b662      	cpsie	i
 800592e:	61bb      	str	r3, [r7, #24]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	b2da      	uxtb	r2, r3
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005946:	e03c      	b.n	80059c2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10c      	bne.n	8005982 <prvProcessReceivedCommands+0x12e>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	b672      	cpsid	i
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	b662      	cpsie	i
 800597c:	617b      	str	r3, [r7, #20]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	18d1      	adds	r1, r2, r3
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005990:	f7ff ff1e 	bl	80057d0 <prvInsertTimerInActiveList>
					break;
 8005994:	e015      	b.n	80059c2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 80059a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059a6:	f000 fbcd 	bl	8006144 <vPortFree>
 80059aa:	e00a      	b.n	80059c2 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059b2:	f023 0301 	bic.w	r3, r3, #1
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059be:	e000      	b.n	80059c2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <prvProcessReceivedCommands+0x190>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f107 0108 	add.w	r1, r7, #8
 80059ca:	2200      	movs	r2, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fb53 	bl	8004078 <xQueueReceive>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f47f af41 	bne.w	800585c <prvProcessReceivedCommands+0x8>
	}
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	3728      	adds	r7, #40	; 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000fc4 	.word	0x20000fc4

080059e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059ee:	e04a      	b.n	8005a86 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059f0:	4b2e      	ldr	r3, [pc, #184]	; (8005aac <prvSwitchTimerLists+0xc4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fa:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <prvSwitchTimerLists+0xc4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe f813 	bl	8003a34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d030      	beq.n	8005a86 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d90e      	bls.n	8005a54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a42:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <prvSwitchTimerLists+0xc4>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f7fd ffb8 	bl	80039c2 <vListInsert>
 8005a52:	e018      	b.n	8005a86 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff fd74 	bl	800554c <xTimerGenericCommand>
 8005a64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10c      	bne.n	8005a86 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	b672      	cpsid	i
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	b662      	cpsie	i
 8005a80:	603b      	str	r3, [r7, #0]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <prvSwitchTimerLists+0xc4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1af      	bne.n	80059f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a90:	4b06      	ldr	r3, [pc, #24]	; (8005aac <prvSwitchTimerLists+0xc4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <prvSwitchTimerLists+0xc8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a04      	ldr	r2, [pc, #16]	; (8005aac <prvSwitchTimerLists+0xc4>)
 8005a9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a9e:	4a04      	ldr	r2, [pc, #16]	; (8005ab0 <prvSwitchTimerLists+0xc8>)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000fbc 	.word	0x20000fbc
 8005ab0:	20000fc0 	.word	0x20000fc0

08005ab4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005aba:	f000 f947 	bl	8005d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005abe:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <prvCheckForValidListAndQueue+0x60>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d120      	bne.n	8005b08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ac6:	4814      	ldr	r0, [pc, #80]	; (8005b18 <prvCheckForValidListAndQueue+0x64>)
 8005ac8:	f7fd ff2a 	bl	8003920 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005acc:	4813      	ldr	r0, [pc, #76]	; (8005b1c <prvCheckForValidListAndQueue+0x68>)
 8005ace:	f7fd ff27 	bl	8003920 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ad2:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <prvCheckForValidListAndQueue+0x6c>)
 8005ad4:	4a10      	ldr	r2, [pc, #64]	; (8005b18 <prvCheckForValidListAndQueue+0x64>)
 8005ad6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ad8:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <prvCheckForValidListAndQueue+0x70>)
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <prvCheckForValidListAndQueue+0x68>)
 8005adc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <prvCheckForValidListAndQueue+0x74>)
 8005ae4:	4a11      	ldr	r2, [pc, #68]	; (8005b2c <prvCheckForValidListAndQueue+0x78>)
 8005ae6:	210c      	movs	r1, #12
 8005ae8:	200a      	movs	r0, #10
 8005aea:	f7fe f837 	bl	8003b5c <xQueueGenericCreateStatic>
 8005aee:	4603      	mov	r3, r0
 8005af0:	4a08      	ldr	r2, [pc, #32]	; (8005b14 <prvCheckForValidListAndQueue+0x60>)
 8005af2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005af4:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <prvCheckForValidListAndQueue+0x60>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <prvCheckForValidListAndQueue+0x60>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	490b      	ldr	r1, [pc, #44]	; (8005b30 <prvCheckForValidListAndQueue+0x7c>)
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fcae 	bl	8004464 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b08:	f000 f954 	bl	8005db4 <vPortExitCritical>
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000fc4 	.word	0x20000fc4
 8005b18:	20000f94 	.word	0x20000f94
 8005b1c:	20000fa8 	.word	0x20000fa8
 8005b20:	20000fbc 	.word	0x20000fbc
 8005b24:	20000fc0 	.word	0x20000fc0
 8005b28:	20001048 	.word	0x20001048
 8005b2c:	20000fd0 	.word	0x20000fd0
 8005b30:	080070f0 	.word	0x080070f0

08005b34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3b04      	subs	r3, #4
 8005b44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3b04      	subs	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b64:	4a0c      	ldr	r2, [pc, #48]	; (8005b98 <pxPortInitialiseStack+0x64>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3b14      	subs	r3, #20
 8005b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3b04      	subs	r3, #4
 8005b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f06f 0202 	mvn.w	r2, #2
 8005b82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3b20      	subs	r3, #32
 8005b88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	08005b9d 	.word	0x08005b9d

08005b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <prvTaskExitError+0x5c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d00c      	beq.n	8005bca <prvTaskExitError+0x2e>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	b672      	cpsid	i
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	b662      	cpsie	i
 8005bc4:	60fb      	str	r3, [r7, #12]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <prvTaskExitError+0x2c>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	b672      	cpsid	i
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	b662      	cpsie	i
 8005bde:	60bb      	str	r3, [r7, #8]
}
 8005be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005be2:	bf00      	nop
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0fc      	beq.n	8005be4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20000010 	.word	0x20000010
 8005bfc:	00000000 	.word	0x00000000

08005c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <pxCurrentTCBConst2>)
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	6808      	ldr	r0, [r1, #0]
 8005c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0a:	f380 8809 	msr	PSP, r0
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8811 	msr	BASEPRI, r0
 8005c1a:	4770      	bx	lr
 8005c1c:	f3af 8000 	nop.w

08005c20 <pxCurrentTCBConst2>:
 8005c20:	20000e5c 	.word	0x20000e5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop

08005c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c28:	4808      	ldr	r0, [pc, #32]	; (8005c4c <prvPortStartFirstTask+0x24>)
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f380 8808 	msr	MSP, r0
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f380 8814 	msr	CONTROL, r0
 8005c3a:	b662      	cpsie	i
 8005c3c:	b661      	cpsie	f
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	df00      	svc	0
 8005c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c4a:	bf00      	nop
 8005c4c:	e000ed08 	.word	0xe000ed08

08005c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c56:	4b37      	ldr	r3, [pc, #220]	; (8005d34 <xPortStartScheduler+0xe4>)
 8005c58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	22ff      	movs	r2, #255	; 0xff
 8005c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	4b2f      	ldr	r3, [pc, #188]	; (8005d38 <xPortStartScheduler+0xe8>)
 8005c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c7e:	4b2f      	ldr	r3, [pc, #188]	; (8005d3c <xPortStartScheduler+0xec>)
 8005c80:	2207      	movs	r2, #7
 8005c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c84:	e009      	b.n	8005c9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005c86:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <xPortStartScheduler+0xec>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	4a2b      	ldr	r2, [pc, #172]	; (8005d3c <xPortStartScheduler+0xec>)
 8005c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d0ef      	beq.n	8005c86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ca6:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <xPortStartScheduler+0xec>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1c3 0307 	rsb	r3, r3, #7
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d00c      	beq.n	8005ccc <xPortStartScheduler+0x7c>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	60bb      	str	r3, [r7, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <xPortStartScheduler+0xec>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	; (8005d3c <xPortStartScheduler+0xec>)
 8005cd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <xPortStartScheduler+0xec>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cde:	4a17      	ldr	r2, [pc, #92]	; (8005d3c <xPortStartScheduler+0xec>)
 8005ce0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <xPortStartScheduler+0xf0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <xPortStartScheduler+0xf0>)
 8005cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cf6:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <xPortStartScheduler+0xf0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a11      	ldr	r2, [pc, #68]	; (8005d40 <xPortStartScheduler+0xf0>)
 8005cfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d02:	f000 f8dd 	bl	8005ec0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <xPortStartScheduler+0xf4>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d0c:	f000 f8fc 	bl	8005f08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d10:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <xPortStartScheduler+0xf8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <xPortStartScheduler+0xf8>)
 8005d16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d1c:	f7ff ff84 	bl	8005c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d20:	f7fe ffea 	bl	8004cf8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d24:	f7ff ff3a 	bl	8005b9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	e000e400 	.word	0xe000e400
 8005d38:	20001098 	.word	0x20001098
 8005d3c:	2000109c 	.word	0x2000109c
 8005d40:	e000ed20 	.word	0xe000ed20
 8005d44:	20000010 	.word	0x20000010
 8005d48:	e000ef34 	.word	0xe000ef34

08005d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	b672      	cpsid	i
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	b662      	cpsie	i
 8005d66:	607b      	str	r3, [r7, #4]
}
 8005d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d6a:	4b10      	ldr	r3, [pc, #64]	; (8005dac <vPortEnterCritical+0x60>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	4a0e      	ldr	r2, [pc, #56]	; (8005dac <vPortEnterCritical+0x60>)
 8005d72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <vPortEnterCritical+0x60>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d111      	bne.n	8005da0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <vPortEnterCritical+0x64>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00c      	beq.n	8005da0 <vPortEnterCritical+0x54>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	b672      	cpsid	i
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	b662      	cpsie	i
 8005d9a:	603b      	str	r3, [r7, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <vPortEnterCritical+0x52>
	}
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20000010 	.word	0x20000010
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <vPortExitCritical+0x54>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10c      	bne.n	8005ddc <vPortExitCritical+0x28>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	b672      	cpsid	i
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	b662      	cpsie	i
 8005dd6:	607b      	str	r3, [r7, #4]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vPortExitCritical+0x54>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <vPortExitCritical+0x54>)
 8005de4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005de6:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <vPortExitCritical+0x54>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <vPortExitCritical+0x46>
 8005dee:	2300      	movs	r3, #0
 8005df0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f383 8811 	msr	BASEPRI, r3
}
 8005df8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000010 	.word	0x20000010
 8005e0c:	00000000 	.word	0x00000000

08005e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e10:	f3ef 8009 	mrs	r0, PSP
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <pxCurrentTCBConst>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f01e 0f10 	tst.w	lr, #16
 8005e20:	bf08      	it	eq
 8005e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	6010      	str	r0, [r2, #0]
 8005e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e34:	b672      	cpsid	i
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	b662      	cpsie	i
 8005e44:	f7fe ff58 	bl	8004cf8 <vTaskSwitchContext>
 8005e48:	f04f 0000 	mov.w	r0, #0
 8005e4c:	f380 8811 	msr	BASEPRI, r0
 8005e50:	bc09      	pop	{r0, r3}
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	6808      	ldr	r0, [r1, #0]
 8005e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	f01e 0f10 	tst.w	lr, #16
 8005e5e:	bf08      	it	eq
 8005e60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e64:	f380 8809 	msr	PSP, r0
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop

08005e70 <pxCurrentTCBConst>:
 8005e70:	20000e5c 	.word	0x20000e5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop

08005e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	b672      	cpsid	i
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	b662      	cpsie	i
 8005e92:	607b      	str	r3, [r7, #4]
}
 8005e94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e96:	f7fe fe6d 	bl	8004b74 <xTaskIncrementTick>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <SysTick_Handler+0x44>)
 8005ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f383 8811 	msr	BASEPRI, r3
}
 8005eb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <vPortSetupTimerInterrupt+0x34>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <vPortSetupTimerInterrupt+0x38>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <vPortSetupTimerInterrupt+0x3c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	; (8005f00 <vPortSetupTimerInterrupt+0x40>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <vPortSetupTimerInterrupt+0x44>)
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ee2:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <vPortSetupTimerInterrupt+0x34>)
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	e000e010 	.word	0xe000e010
 8005ef8:	e000e018 	.word	0xe000e018
 8005efc:	20000004 	.word	0x20000004
 8005f00:	10624dd3 	.word	0x10624dd3
 8005f04:	e000e014 	.word	0xe000e014

08005f08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f18 <vPortEnableVFP+0x10>
 8005f0c:	6801      	ldr	r1, [r0, #0]
 8005f0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f12:	6001      	str	r1, [r0, #0]
 8005f14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f16:	bf00      	nop
 8005f18:	e000ed88 	.word	0xe000ed88

08005f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f22:	f3ef 8305 	mrs	r3, IPSR
 8005f26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b0f      	cmp	r3, #15
 8005f2c:	d916      	bls.n	8005f5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f2e:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <vPortValidateInterruptPriority+0x78>)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <vPortValidateInterruptPriority+0x7c>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	7afa      	ldrb	r2, [r7, #11]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d20c      	bcs.n	8005f5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	b672      	cpsid	i
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	b662      	cpsie	i
 8005f56:	607b      	str	r3, [r7, #4]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <vPortValidateInterruptPriority+0x80>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f64:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <vPortValidateInterruptPriority+0x84>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d90c      	bls.n	8005f86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	603b      	str	r3, [r7, #0]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <vPortValidateInterruptPriority+0x68>
	}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	e000e3f0 	.word	0xe000e3f0
 8005f98:	20001098 	.word	0x20001098
 8005f9c:	e000ed0c 	.word	0xe000ed0c
 8005fa0:	2000109c 	.word	0x2000109c

08005fa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fb0:	f7fe fd24 	bl	80049fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fb4:	4b5e      	ldr	r3, [pc, #376]	; (8006130 <pvPortMalloc+0x18c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fbc:	f000 f920 	bl	8006200 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fc0:	4b5c      	ldr	r3, [pc, #368]	; (8006134 <pvPortMalloc+0x190>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 8092 	bne.w	80060f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01f      	beq.n	8006014 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d016      	beq.n	8006014 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	3308      	adds	r3, #8
 8005fee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <pvPortMalloc+0x70>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	b672      	cpsid	i
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	b662      	cpsie	i
 800600e:	617b      	str	r3, [r7, #20]
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d06b      	beq.n	80060f2 <pvPortMalloc+0x14e>
 800601a:	4b47      	ldr	r3, [pc, #284]	; (8006138 <pvPortMalloc+0x194>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d866      	bhi.n	80060f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006024:	4b45      	ldr	r3, [pc, #276]	; (800613c <pvPortMalloc+0x198>)
 8006026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006028:	4b44      	ldr	r3, [pc, #272]	; (800613c <pvPortMalloc+0x198>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800602e:	e004      	b.n	800603a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d903      	bls.n	800604c <pvPortMalloc+0xa8>
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f1      	bne.n	8006030 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800604c:	4b38      	ldr	r3, [pc, #224]	; (8006130 <pvPortMalloc+0x18c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006052:	429a      	cmp	r2, r3
 8006054:	d04d      	beq.n	80060f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2208      	movs	r2, #8
 800605c:	4413      	add	r3, r2
 800605e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	1ad2      	subs	r2, r2, r3
 8006070:	2308      	movs	r3, #8
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	429a      	cmp	r2, r3
 8006076:	d921      	bls.n	80060bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <pvPortMalloc+0x100>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	b672      	cpsid	i
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	b662      	cpsie	i
 800609e:	613b      	str	r3, [r7, #16]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	1ad2      	subs	r2, r2, r3
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060b6:	69b8      	ldr	r0, [r7, #24]
 80060b8:	f000 f904 	bl	80062c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060bc:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <pvPortMalloc+0x194>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <pvPortMalloc+0x194>)
 80060c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ca:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <pvPortMalloc+0x194>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b1c      	ldr	r3, [pc, #112]	; (8006140 <pvPortMalloc+0x19c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d203      	bcs.n	80060de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060d6:	4b18      	ldr	r3, [pc, #96]	; (8006138 <pvPortMalloc+0x194>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a19      	ldr	r2, [pc, #100]	; (8006140 <pvPortMalloc+0x19c>)
 80060dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <pvPortMalloc+0x190>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060f2:	f7fe fc91 	bl	8004a18 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80060fc:	f7fa fc3c 	bl	8000978 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00c      	beq.n	8006124 <pvPortMalloc+0x180>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	b672      	cpsid	i
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	b662      	cpsie	i
 800611e:	60fb      	str	r3, [r7, #12]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <pvPortMalloc+0x17e>
	return pvReturn;
 8006124:	69fb      	ldr	r3, [r7, #28]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	; 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20004ca8 	.word	0x20004ca8
 8006134:	20004cb4 	.word	0x20004cb4
 8006138:	20004cac 	.word	0x20004cac
 800613c:	20004ca0 	.word	0x20004ca0
 8006140:	20004cb0 	.word	0x20004cb0

08006144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d04c      	beq.n	80061f0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006156:	2308      	movs	r3, #8
 8006158:	425b      	negs	r3, r3
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <vPortFree+0xb4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10c      	bne.n	800618c <vPortFree+0x48>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	b672      	cpsid	i
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	b662      	cpsie	i
 8006186:	60fb      	str	r3, [r7, #12]
}
 8006188:	bf00      	nop
 800618a:	e7fe      	b.n	800618a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00c      	beq.n	80061ae <vPortFree+0x6a>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	b672      	cpsid	i
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	b662      	cpsie	i
 80061a8:	60bb      	str	r3, [r7, #8]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <vPortFree+0xb4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d019      	beq.n	80061f0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d115      	bne.n	80061f0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <vPortFree+0xb4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	401a      	ands	r2, r3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d4:	f7fe fc12 	bl	80049fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	4b07      	ldr	r3, [pc, #28]	; (80061fc <vPortFree+0xb8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4413      	add	r3, r2
 80061e2:	4a06      	ldr	r2, [pc, #24]	; (80061fc <vPortFree+0xb8>)
 80061e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061e6:	6938      	ldr	r0, [r7, #16]
 80061e8:	f000 f86c 	bl	80062c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061ec:	f7fe fc14 	bl	8004a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061f0:	bf00      	nop
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20004cb4 	.word	0x20004cb4
 80061fc:	20004cac 	.word	0x20004cac

08006200 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006206:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800620a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800620c:	4b27      	ldr	r3, [pc, #156]	; (80062ac <prvHeapInit+0xac>)
 800620e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3307      	adds	r3, #7
 800621e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0307 	bic.w	r3, r3, #7
 8006226:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	4a1f      	ldr	r2, [pc, #124]	; (80062ac <prvHeapInit+0xac>)
 8006230:	4413      	add	r3, r2
 8006232:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006238:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <prvHeapInit+0xb0>)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800623e:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <prvHeapInit+0xb0>)
 8006240:	2200      	movs	r2, #0
 8006242:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	4413      	add	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800624c:	2208      	movs	r2, #8
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0307 	bic.w	r3, r3, #7
 800625a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <prvHeapInit+0xb4>)
 8006260:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <prvHeapInit+0xb4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <prvHeapInit+0xb4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006280:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <prvHeapInit+0xb4>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a0a      	ldr	r2, [pc, #40]	; (80062b8 <prvHeapInit+0xb8>)
 800628e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	4a09      	ldr	r2, [pc, #36]	; (80062bc <prvHeapInit+0xbc>)
 8006296:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <prvHeapInit+0xc0>)
 800629a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800629e:	601a      	str	r2, [r3, #0]
}
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	200010a0 	.word	0x200010a0
 80062b0:	20004ca0 	.word	0x20004ca0
 80062b4:	20004ca8 	.word	0x20004ca8
 80062b8:	20004cb0 	.word	0x20004cb0
 80062bc:	20004cac 	.word	0x20004cac
 80062c0:	20004cb4 	.word	0x20004cb4

080062c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062cc:	4b28      	ldr	r3, [pc, #160]	; (8006370 <prvInsertBlockIntoFreeList+0xac>)
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e002      	b.n	80062d8 <prvInsertBlockIntoFreeList+0x14>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d8f7      	bhi.n	80062d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	4413      	add	r3, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d108      	bne.n	8006306 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	441a      	add	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d118      	bne.n	800634c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b15      	ldr	r3, [pc, #84]	; (8006374 <prvInsertBlockIntoFreeList+0xb0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d00d      	beq.n	8006342 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	e008      	b.n	8006354 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <prvInsertBlockIntoFreeList+0xb0>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	e003      	b.n	8006354 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d002      	beq.n	8006362 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20004ca0 	.word	0x20004ca0
 8006374:	20004ca8 	.word	0x20004ca8

08006378 <__errno>:
 8006378:	4b01      	ldr	r3, [pc, #4]	; (8006380 <__errno+0x8>)
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000014 	.word	0x20000014

08006384 <std>:
 8006384:	2300      	movs	r3, #0
 8006386:	b510      	push	{r4, lr}
 8006388:	4604      	mov	r4, r0
 800638a:	e9c0 3300 	strd	r3, r3, [r0]
 800638e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006392:	6083      	str	r3, [r0, #8]
 8006394:	8181      	strh	r1, [r0, #12]
 8006396:	6643      	str	r3, [r0, #100]	; 0x64
 8006398:	81c2      	strh	r2, [r0, #14]
 800639a:	6183      	str	r3, [r0, #24]
 800639c:	4619      	mov	r1, r3
 800639e:	2208      	movs	r2, #8
 80063a0:	305c      	adds	r0, #92	; 0x5c
 80063a2:	f000 f91a 	bl	80065da <memset>
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <std+0x38>)
 80063a8:	6263      	str	r3, [r4, #36]	; 0x24
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <std+0x3c>)
 80063ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <std+0x40>)
 80063b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <std+0x44>)
 80063b4:	6224      	str	r4, [r4, #32]
 80063b6:	6323      	str	r3, [r4, #48]	; 0x30
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	bf00      	nop
 80063bc:	08006a81 	.word	0x08006a81
 80063c0:	08006aa3 	.word	0x08006aa3
 80063c4:	08006adb 	.word	0x08006adb
 80063c8:	08006aff 	.word	0x08006aff

080063cc <_cleanup_r>:
 80063cc:	4901      	ldr	r1, [pc, #4]	; (80063d4 <_cleanup_r+0x8>)
 80063ce:	f000 b8af 	b.w	8006530 <_fwalk_reent>
 80063d2:	bf00      	nop
 80063d4:	08006dd9 	.word	0x08006dd9

080063d8 <__sfmoreglue>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	2268      	movs	r2, #104	; 0x68
 80063dc:	1e4d      	subs	r5, r1, #1
 80063de:	4355      	muls	r5, r2
 80063e0:	460e      	mov	r6, r1
 80063e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063e6:	f000 f921 	bl	800662c <_malloc_r>
 80063ea:	4604      	mov	r4, r0
 80063ec:	b140      	cbz	r0, 8006400 <__sfmoreglue+0x28>
 80063ee:	2100      	movs	r1, #0
 80063f0:	e9c0 1600 	strd	r1, r6, [r0]
 80063f4:	300c      	adds	r0, #12
 80063f6:	60a0      	str	r0, [r4, #8]
 80063f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063fc:	f000 f8ed 	bl	80065da <memset>
 8006400:	4620      	mov	r0, r4
 8006402:	bd70      	pop	{r4, r5, r6, pc}

08006404 <__sfp_lock_acquire>:
 8006404:	4801      	ldr	r0, [pc, #4]	; (800640c <__sfp_lock_acquire+0x8>)
 8006406:	f000 b8d8 	b.w	80065ba <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	20004cb9 	.word	0x20004cb9

08006410 <__sfp_lock_release>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__sfp_lock_release+0x8>)
 8006412:	f000 b8d3 	b.w	80065bc <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	20004cb9 	.word	0x20004cb9

0800641c <__sinit_lock_acquire>:
 800641c:	4801      	ldr	r0, [pc, #4]	; (8006424 <__sinit_lock_acquire+0x8>)
 800641e:	f000 b8cc 	b.w	80065ba <__retarget_lock_acquire_recursive>
 8006422:	bf00      	nop
 8006424:	20004cba 	.word	0x20004cba

08006428 <__sinit_lock_release>:
 8006428:	4801      	ldr	r0, [pc, #4]	; (8006430 <__sinit_lock_release+0x8>)
 800642a:	f000 b8c7 	b.w	80065bc <__retarget_lock_release_recursive>
 800642e:	bf00      	nop
 8006430:	20004cba 	.word	0x20004cba

08006434 <__sinit>:
 8006434:	b510      	push	{r4, lr}
 8006436:	4604      	mov	r4, r0
 8006438:	f7ff fff0 	bl	800641c <__sinit_lock_acquire>
 800643c:	69a3      	ldr	r3, [r4, #24]
 800643e:	b11b      	cbz	r3, 8006448 <__sinit+0x14>
 8006440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006444:	f7ff bff0 	b.w	8006428 <__sinit_lock_release>
 8006448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800644c:	6523      	str	r3, [r4, #80]	; 0x50
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <__sinit+0x68>)
 8006450:	4a13      	ldr	r2, [pc, #76]	; (80064a0 <__sinit+0x6c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	62a2      	str	r2, [r4, #40]	; 0x28
 8006456:	42a3      	cmp	r3, r4
 8006458:	bf04      	itt	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	61a3      	streq	r3, [r4, #24]
 800645e:	4620      	mov	r0, r4
 8006460:	f000 f820 	bl	80064a4 <__sfp>
 8006464:	6060      	str	r0, [r4, #4]
 8006466:	4620      	mov	r0, r4
 8006468:	f000 f81c 	bl	80064a4 <__sfp>
 800646c:	60a0      	str	r0, [r4, #8]
 800646e:	4620      	mov	r0, r4
 8006470:	f000 f818 	bl	80064a4 <__sfp>
 8006474:	2200      	movs	r2, #0
 8006476:	60e0      	str	r0, [r4, #12]
 8006478:	2104      	movs	r1, #4
 800647a:	6860      	ldr	r0, [r4, #4]
 800647c:	f7ff ff82 	bl	8006384 <std>
 8006480:	68a0      	ldr	r0, [r4, #8]
 8006482:	2201      	movs	r2, #1
 8006484:	2109      	movs	r1, #9
 8006486:	f7ff ff7d 	bl	8006384 <std>
 800648a:	68e0      	ldr	r0, [r4, #12]
 800648c:	2202      	movs	r2, #2
 800648e:	2112      	movs	r1, #18
 8006490:	f7ff ff78 	bl	8006384 <std>
 8006494:	2301      	movs	r3, #1
 8006496:	61a3      	str	r3, [r4, #24]
 8006498:	e7d2      	b.n	8006440 <__sinit+0xc>
 800649a:	bf00      	nop
 800649c:	08007174 	.word	0x08007174
 80064a0:	080063cd 	.word	0x080063cd

080064a4 <__sfp>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	4607      	mov	r7, r0
 80064a8:	f7ff ffac 	bl	8006404 <__sfp_lock_acquire>
 80064ac:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <__sfp+0x84>)
 80064ae:	681e      	ldr	r6, [r3, #0]
 80064b0:	69b3      	ldr	r3, [r6, #24]
 80064b2:	b913      	cbnz	r3, 80064ba <__sfp+0x16>
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff ffbd 	bl	8006434 <__sinit>
 80064ba:	3648      	adds	r6, #72	; 0x48
 80064bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	d503      	bpl.n	80064cc <__sfp+0x28>
 80064c4:	6833      	ldr	r3, [r6, #0]
 80064c6:	b30b      	cbz	r3, 800650c <__sfp+0x68>
 80064c8:	6836      	ldr	r6, [r6, #0]
 80064ca:	e7f7      	b.n	80064bc <__sfp+0x18>
 80064cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064d0:	b9d5      	cbnz	r5, 8006508 <__sfp+0x64>
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <__sfp+0x88>)
 80064d4:	60e3      	str	r3, [r4, #12]
 80064d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064da:	6665      	str	r5, [r4, #100]	; 0x64
 80064dc:	f000 f86c 	bl	80065b8 <__retarget_lock_init_recursive>
 80064e0:	f7ff ff96 	bl	8006410 <__sfp_lock_release>
 80064e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064ec:	6025      	str	r5, [r4, #0]
 80064ee:	61a5      	str	r5, [r4, #24]
 80064f0:	2208      	movs	r2, #8
 80064f2:	4629      	mov	r1, r5
 80064f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064f8:	f000 f86f 	bl	80065da <memset>
 80064fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006504:	4620      	mov	r0, r4
 8006506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006508:	3468      	adds	r4, #104	; 0x68
 800650a:	e7d9      	b.n	80064c0 <__sfp+0x1c>
 800650c:	2104      	movs	r1, #4
 800650e:	4638      	mov	r0, r7
 8006510:	f7ff ff62 	bl	80063d8 <__sfmoreglue>
 8006514:	4604      	mov	r4, r0
 8006516:	6030      	str	r0, [r6, #0]
 8006518:	2800      	cmp	r0, #0
 800651a:	d1d5      	bne.n	80064c8 <__sfp+0x24>
 800651c:	f7ff ff78 	bl	8006410 <__sfp_lock_release>
 8006520:	230c      	movs	r3, #12
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	e7ee      	b.n	8006504 <__sfp+0x60>
 8006526:	bf00      	nop
 8006528:	08007174 	.word	0x08007174
 800652c:	ffff0001 	.word	0xffff0001

08006530 <_fwalk_reent>:
 8006530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006534:	4606      	mov	r6, r0
 8006536:	4688      	mov	r8, r1
 8006538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800653c:	2700      	movs	r7, #0
 800653e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006542:	f1b9 0901 	subs.w	r9, r9, #1
 8006546:	d505      	bpl.n	8006554 <_fwalk_reent+0x24>
 8006548:	6824      	ldr	r4, [r4, #0]
 800654a:	2c00      	cmp	r4, #0
 800654c:	d1f7      	bne.n	800653e <_fwalk_reent+0xe>
 800654e:	4638      	mov	r0, r7
 8006550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006554:	89ab      	ldrh	r3, [r5, #12]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d907      	bls.n	800656a <_fwalk_reent+0x3a>
 800655a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800655e:	3301      	adds	r3, #1
 8006560:	d003      	beq.n	800656a <_fwalk_reent+0x3a>
 8006562:	4629      	mov	r1, r5
 8006564:	4630      	mov	r0, r6
 8006566:	47c0      	blx	r8
 8006568:	4307      	orrs	r7, r0
 800656a:	3568      	adds	r5, #104	; 0x68
 800656c:	e7e9      	b.n	8006542 <_fwalk_reent+0x12>
	...

08006570 <__libc_init_array>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4d0d      	ldr	r5, [pc, #52]	; (80065a8 <__libc_init_array+0x38>)
 8006574:	4c0d      	ldr	r4, [pc, #52]	; (80065ac <__libc_init_array+0x3c>)
 8006576:	1b64      	subs	r4, r4, r5
 8006578:	10a4      	asrs	r4, r4, #2
 800657a:	2600      	movs	r6, #0
 800657c:	42a6      	cmp	r6, r4
 800657e:	d109      	bne.n	8006594 <__libc_init_array+0x24>
 8006580:	4d0b      	ldr	r5, [pc, #44]	; (80065b0 <__libc_init_array+0x40>)
 8006582:	4c0c      	ldr	r4, [pc, #48]	; (80065b4 <__libc_init_array+0x44>)
 8006584:	f000 fd70 	bl	8007068 <_init>
 8006588:	1b64      	subs	r4, r4, r5
 800658a:	10a4      	asrs	r4, r4, #2
 800658c:	2600      	movs	r6, #0
 800658e:	42a6      	cmp	r6, r4
 8006590:	d105      	bne.n	800659e <__libc_init_array+0x2e>
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	f855 3b04 	ldr.w	r3, [r5], #4
 8006598:	4798      	blx	r3
 800659a:	3601      	adds	r6, #1
 800659c:	e7ee      	b.n	800657c <__libc_init_array+0xc>
 800659e:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a2:	4798      	blx	r3
 80065a4:	3601      	adds	r6, #1
 80065a6:	e7f2      	b.n	800658e <__libc_init_array+0x1e>
 80065a8:	08007180 	.word	0x08007180
 80065ac:	08007180 	.word	0x08007180
 80065b0:	08007180 	.word	0x08007180
 80065b4:	08007184 	.word	0x08007184

080065b8 <__retarget_lock_init_recursive>:
 80065b8:	4770      	bx	lr

080065ba <__retarget_lock_acquire_recursive>:
 80065ba:	4770      	bx	lr

080065bc <__retarget_lock_release_recursive>:
 80065bc:	4770      	bx	lr

080065be <memcpy>:
 80065be:	440a      	add	r2, r1
 80065c0:	4291      	cmp	r1, r2
 80065c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80065c6:	d100      	bne.n	80065ca <memcpy+0xc>
 80065c8:	4770      	bx	lr
 80065ca:	b510      	push	{r4, lr}
 80065cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065d4:	4291      	cmp	r1, r2
 80065d6:	d1f9      	bne.n	80065cc <memcpy+0xe>
 80065d8:	bd10      	pop	{r4, pc}

080065da <memset>:
 80065da:	4402      	add	r2, r0
 80065dc:	4603      	mov	r3, r0
 80065de:	4293      	cmp	r3, r2
 80065e0:	d100      	bne.n	80065e4 <memset+0xa>
 80065e2:	4770      	bx	lr
 80065e4:	f803 1b01 	strb.w	r1, [r3], #1
 80065e8:	e7f9      	b.n	80065de <memset+0x4>
	...

080065ec <sbrk_aligned>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4e0e      	ldr	r6, [pc, #56]	; (8006628 <sbrk_aligned+0x3c>)
 80065f0:	460c      	mov	r4, r1
 80065f2:	6831      	ldr	r1, [r6, #0]
 80065f4:	4605      	mov	r5, r0
 80065f6:	b911      	cbnz	r1, 80065fe <sbrk_aligned+0x12>
 80065f8:	f000 f96c 	bl	80068d4 <_sbrk_r>
 80065fc:	6030      	str	r0, [r6, #0]
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f000 f967 	bl	80068d4 <_sbrk_r>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d00a      	beq.n	8006620 <sbrk_aligned+0x34>
 800660a:	1cc4      	adds	r4, r0, #3
 800660c:	f024 0403 	bic.w	r4, r4, #3
 8006610:	42a0      	cmp	r0, r4
 8006612:	d007      	beq.n	8006624 <sbrk_aligned+0x38>
 8006614:	1a21      	subs	r1, r4, r0
 8006616:	4628      	mov	r0, r5
 8006618:	f000 f95c 	bl	80068d4 <_sbrk_r>
 800661c:	3001      	adds	r0, #1
 800661e:	d101      	bne.n	8006624 <sbrk_aligned+0x38>
 8006620:	f04f 34ff 	mov.w	r4, #4294967295
 8006624:	4620      	mov	r0, r4
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	20004cc0 	.word	0x20004cc0

0800662c <_malloc_r>:
 800662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006630:	1ccd      	adds	r5, r1, #3
 8006632:	f025 0503 	bic.w	r5, r5, #3
 8006636:	3508      	adds	r5, #8
 8006638:	2d0c      	cmp	r5, #12
 800663a:	bf38      	it	cc
 800663c:	250c      	movcc	r5, #12
 800663e:	2d00      	cmp	r5, #0
 8006640:	4607      	mov	r7, r0
 8006642:	db01      	blt.n	8006648 <_malloc_r+0x1c>
 8006644:	42a9      	cmp	r1, r5
 8006646:	d905      	bls.n	8006654 <_malloc_r+0x28>
 8006648:	230c      	movs	r3, #12
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	2600      	movs	r6, #0
 800664e:	4630      	mov	r0, r6
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	4e2e      	ldr	r6, [pc, #184]	; (8006710 <_malloc_r+0xe4>)
 8006656:	f000 fc7b 	bl	8006f50 <__malloc_lock>
 800665a:	6833      	ldr	r3, [r6, #0]
 800665c:	461c      	mov	r4, r3
 800665e:	bb34      	cbnz	r4, 80066ae <_malloc_r+0x82>
 8006660:	4629      	mov	r1, r5
 8006662:	4638      	mov	r0, r7
 8006664:	f7ff ffc2 	bl	80065ec <sbrk_aligned>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	4604      	mov	r4, r0
 800666c:	d14d      	bne.n	800670a <_malloc_r+0xde>
 800666e:	6834      	ldr	r4, [r6, #0]
 8006670:	4626      	mov	r6, r4
 8006672:	2e00      	cmp	r6, #0
 8006674:	d140      	bne.n	80066f8 <_malloc_r+0xcc>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	4631      	mov	r1, r6
 800667a:	4638      	mov	r0, r7
 800667c:	eb04 0803 	add.w	r8, r4, r3
 8006680:	f000 f928 	bl	80068d4 <_sbrk_r>
 8006684:	4580      	cmp	r8, r0
 8006686:	d13a      	bne.n	80066fe <_malloc_r+0xd2>
 8006688:	6821      	ldr	r1, [r4, #0]
 800668a:	3503      	adds	r5, #3
 800668c:	1a6d      	subs	r5, r5, r1
 800668e:	f025 0503 	bic.w	r5, r5, #3
 8006692:	3508      	adds	r5, #8
 8006694:	2d0c      	cmp	r5, #12
 8006696:	bf38      	it	cc
 8006698:	250c      	movcc	r5, #12
 800669a:	4629      	mov	r1, r5
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff ffa5 	bl	80065ec <sbrk_aligned>
 80066a2:	3001      	adds	r0, #1
 80066a4:	d02b      	beq.n	80066fe <_malloc_r+0xd2>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	442b      	add	r3, r5
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	e00e      	b.n	80066cc <_malloc_r+0xa0>
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	1b52      	subs	r2, r2, r5
 80066b2:	d41e      	bmi.n	80066f2 <_malloc_r+0xc6>
 80066b4:	2a0b      	cmp	r2, #11
 80066b6:	d916      	bls.n	80066e6 <_malloc_r+0xba>
 80066b8:	1961      	adds	r1, r4, r5
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	6025      	str	r5, [r4, #0]
 80066be:	bf18      	it	ne
 80066c0:	6059      	strne	r1, [r3, #4]
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	bf08      	it	eq
 80066c6:	6031      	streq	r1, [r6, #0]
 80066c8:	5162      	str	r2, [r4, r5]
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	4638      	mov	r0, r7
 80066ce:	f104 060b 	add.w	r6, r4, #11
 80066d2:	f000 fc43 	bl	8006f5c <__malloc_unlock>
 80066d6:	f026 0607 	bic.w	r6, r6, #7
 80066da:	1d23      	adds	r3, r4, #4
 80066dc:	1af2      	subs	r2, r6, r3
 80066de:	d0b6      	beq.n	800664e <_malloc_r+0x22>
 80066e0:	1b9b      	subs	r3, r3, r6
 80066e2:	50a3      	str	r3, [r4, r2]
 80066e4:	e7b3      	b.n	800664e <_malloc_r+0x22>
 80066e6:	6862      	ldr	r2, [r4, #4]
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	bf0c      	ite	eq
 80066ec:	6032      	streq	r2, [r6, #0]
 80066ee:	605a      	strne	r2, [r3, #4]
 80066f0:	e7ec      	b.n	80066cc <_malloc_r+0xa0>
 80066f2:	4623      	mov	r3, r4
 80066f4:	6864      	ldr	r4, [r4, #4]
 80066f6:	e7b2      	b.n	800665e <_malloc_r+0x32>
 80066f8:	4634      	mov	r4, r6
 80066fa:	6876      	ldr	r6, [r6, #4]
 80066fc:	e7b9      	b.n	8006672 <_malloc_r+0x46>
 80066fe:	230c      	movs	r3, #12
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	4638      	mov	r0, r7
 8006704:	f000 fc2a 	bl	8006f5c <__malloc_unlock>
 8006708:	e7a1      	b.n	800664e <_malloc_r+0x22>
 800670a:	6025      	str	r5, [r4, #0]
 800670c:	e7de      	b.n	80066cc <_malloc_r+0xa0>
 800670e:	bf00      	nop
 8006710:	20004cbc 	.word	0x20004cbc

08006714 <_puts_r>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	460e      	mov	r6, r1
 8006718:	4605      	mov	r5, r0
 800671a:	b118      	cbz	r0, 8006724 <_puts_r+0x10>
 800671c:	6983      	ldr	r3, [r0, #24]
 800671e:	b90b      	cbnz	r3, 8006724 <_puts_r+0x10>
 8006720:	f7ff fe88 	bl	8006434 <__sinit>
 8006724:	69ab      	ldr	r3, [r5, #24]
 8006726:	68ac      	ldr	r4, [r5, #8]
 8006728:	b913      	cbnz	r3, 8006730 <_puts_r+0x1c>
 800672a:	4628      	mov	r0, r5
 800672c:	f7ff fe82 	bl	8006434 <__sinit>
 8006730:	4b2c      	ldr	r3, [pc, #176]	; (80067e4 <_puts_r+0xd0>)
 8006732:	429c      	cmp	r4, r3
 8006734:	d120      	bne.n	8006778 <_puts_r+0x64>
 8006736:	686c      	ldr	r4, [r5, #4]
 8006738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800673a:	07db      	lsls	r3, r3, #31
 800673c:	d405      	bmi.n	800674a <_puts_r+0x36>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	0598      	lsls	r0, r3, #22
 8006742:	d402      	bmi.n	800674a <_puts_r+0x36>
 8006744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006746:	f7ff ff38 	bl	80065ba <__retarget_lock_acquire_recursive>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	0719      	lsls	r1, r3, #28
 800674e:	d51d      	bpl.n	800678c <_puts_r+0x78>
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	b1db      	cbz	r3, 800678c <_puts_r+0x78>
 8006754:	3e01      	subs	r6, #1
 8006756:	68a3      	ldr	r3, [r4, #8]
 8006758:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800675c:	3b01      	subs	r3, #1
 800675e:	60a3      	str	r3, [r4, #8]
 8006760:	bb39      	cbnz	r1, 80067b2 <_puts_r+0x9e>
 8006762:	2b00      	cmp	r3, #0
 8006764:	da38      	bge.n	80067d8 <_puts_r+0xc4>
 8006766:	4622      	mov	r2, r4
 8006768:	210a      	movs	r1, #10
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f9cc 	bl	8006b08 <__swbuf_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d011      	beq.n	8006798 <_puts_r+0x84>
 8006774:	250a      	movs	r5, #10
 8006776:	e011      	b.n	800679c <_puts_r+0x88>
 8006778:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <_puts_r+0xd4>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d101      	bne.n	8006782 <_puts_r+0x6e>
 800677e:	68ac      	ldr	r4, [r5, #8]
 8006780:	e7da      	b.n	8006738 <_puts_r+0x24>
 8006782:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <_puts_r+0xd8>)
 8006784:	429c      	cmp	r4, r3
 8006786:	bf08      	it	eq
 8006788:	68ec      	ldreq	r4, [r5, #12]
 800678a:	e7d5      	b.n	8006738 <_puts_r+0x24>
 800678c:	4621      	mov	r1, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f000 fa1e 	bl	8006bd0 <__swsetup_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	d0dd      	beq.n	8006754 <_puts_r+0x40>
 8006798:	f04f 35ff 	mov.w	r5, #4294967295
 800679c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800679e:	07da      	lsls	r2, r3, #31
 80067a0:	d405      	bmi.n	80067ae <_puts_r+0x9a>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	059b      	lsls	r3, r3, #22
 80067a6:	d402      	bmi.n	80067ae <_puts_r+0x9a>
 80067a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067aa:	f7ff ff07 	bl	80065bc <__retarget_lock_release_recursive>
 80067ae:	4628      	mov	r0, r5
 80067b0:	bd70      	pop	{r4, r5, r6, pc}
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da04      	bge.n	80067c0 <_puts_r+0xac>
 80067b6:	69a2      	ldr	r2, [r4, #24]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	dc06      	bgt.n	80067ca <_puts_r+0xb6>
 80067bc:	290a      	cmp	r1, #10
 80067be:	d004      	beq.n	80067ca <_puts_r+0xb6>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	6022      	str	r2, [r4, #0]
 80067c6:	7019      	strb	r1, [r3, #0]
 80067c8:	e7c5      	b.n	8006756 <_puts_r+0x42>
 80067ca:	4622      	mov	r2, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 f99b 	bl	8006b08 <__swbuf_r>
 80067d2:	3001      	adds	r0, #1
 80067d4:	d1bf      	bne.n	8006756 <_puts_r+0x42>
 80067d6:	e7df      	b.n	8006798 <_puts_r+0x84>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	250a      	movs	r5, #10
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	6022      	str	r2, [r4, #0]
 80067e0:	701d      	strb	r5, [r3, #0]
 80067e2:	e7db      	b.n	800679c <_puts_r+0x88>
 80067e4:	08007134 	.word	0x08007134
 80067e8:	08007154 	.word	0x08007154
 80067ec:	08007114 	.word	0x08007114

080067f0 <puts>:
 80067f0:	4b02      	ldr	r3, [pc, #8]	; (80067fc <puts+0xc>)
 80067f2:	4601      	mov	r1, r0
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	f7ff bf8d 	b.w	8006714 <_puts_r>
 80067fa:	bf00      	nop
 80067fc:	20000014 	.word	0x20000014

08006800 <cleanup_glue>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	460c      	mov	r4, r1
 8006804:	6809      	ldr	r1, [r1, #0]
 8006806:	4605      	mov	r5, r0
 8006808:	b109      	cbz	r1, 800680e <cleanup_glue+0xe>
 800680a:	f7ff fff9 	bl	8006800 <cleanup_glue>
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006816:	f000 bba7 	b.w	8006f68 <_free_r>
	...

0800681c <_reclaim_reent>:
 800681c:	4b2c      	ldr	r3, [pc, #176]	; (80068d0 <_reclaim_reent+0xb4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4283      	cmp	r3, r0
 8006822:	b570      	push	{r4, r5, r6, lr}
 8006824:	4604      	mov	r4, r0
 8006826:	d051      	beq.n	80068cc <_reclaim_reent+0xb0>
 8006828:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800682a:	b143      	cbz	r3, 800683e <_reclaim_reent+0x22>
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d14a      	bne.n	80068c8 <_reclaim_reent+0xac>
 8006832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006834:	6819      	ldr	r1, [r3, #0]
 8006836:	b111      	cbz	r1, 800683e <_reclaim_reent+0x22>
 8006838:	4620      	mov	r0, r4
 800683a:	f000 fb95 	bl	8006f68 <_free_r>
 800683e:	6961      	ldr	r1, [r4, #20]
 8006840:	b111      	cbz	r1, 8006848 <_reclaim_reent+0x2c>
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fb90 	bl	8006f68 <_free_r>
 8006848:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800684a:	b111      	cbz	r1, 8006852 <_reclaim_reent+0x36>
 800684c:	4620      	mov	r0, r4
 800684e:	f000 fb8b 	bl	8006f68 <_free_r>
 8006852:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006854:	b111      	cbz	r1, 800685c <_reclaim_reent+0x40>
 8006856:	4620      	mov	r0, r4
 8006858:	f000 fb86 	bl	8006f68 <_free_r>
 800685c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800685e:	b111      	cbz	r1, 8006866 <_reclaim_reent+0x4a>
 8006860:	4620      	mov	r0, r4
 8006862:	f000 fb81 	bl	8006f68 <_free_r>
 8006866:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006868:	b111      	cbz	r1, 8006870 <_reclaim_reent+0x54>
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fb7c 	bl	8006f68 <_free_r>
 8006870:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006872:	b111      	cbz	r1, 800687a <_reclaim_reent+0x5e>
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fb77 	bl	8006f68 <_free_r>
 800687a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800687c:	b111      	cbz	r1, 8006884 <_reclaim_reent+0x68>
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fb72 	bl	8006f68 <_free_r>
 8006884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006886:	b111      	cbz	r1, 800688e <_reclaim_reent+0x72>
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fb6d 	bl	8006f68 <_free_r>
 800688e:	69a3      	ldr	r3, [r4, #24]
 8006890:	b1e3      	cbz	r3, 80068cc <_reclaim_reent+0xb0>
 8006892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006894:	4620      	mov	r0, r4
 8006896:	4798      	blx	r3
 8006898:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800689a:	b1b9      	cbz	r1, 80068cc <_reclaim_reent+0xb0>
 800689c:	4620      	mov	r0, r4
 800689e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068a2:	f7ff bfad 	b.w	8006800 <cleanup_glue>
 80068a6:	5949      	ldr	r1, [r1, r5]
 80068a8:	b941      	cbnz	r1, 80068bc <_reclaim_reent+0xa0>
 80068aa:	3504      	adds	r5, #4
 80068ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068ae:	2d80      	cmp	r5, #128	; 0x80
 80068b0:	68d9      	ldr	r1, [r3, #12]
 80068b2:	d1f8      	bne.n	80068a6 <_reclaim_reent+0x8a>
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fb57 	bl	8006f68 <_free_r>
 80068ba:	e7ba      	b.n	8006832 <_reclaim_reent+0x16>
 80068bc:	680e      	ldr	r6, [r1, #0]
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fb52 	bl	8006f68 <_free_r>
 80068c4:	4631      	mov	r1, r6
 80068c6:	e7ef      	b.n	80068a8 <_reclaim_reent+0x8c>
 80068c8:	2500      	movs	r5, #0
 80068ca:	e7ef      	b.n	80068ac <_reclaim_reent+0x90>
 80068cc:	bd70      	pop	{r4, r5, r6, pc}
 80068ce:	bf00      	nop
 80068d0:	20000014 	.word	0x20000014

080068d4 <_sbrk_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d06      	ldr	r5, [pc, #24]	; (80068f0 <_sbrk_r+0x1c>)
 80068d8:	2300      	movs	r3, #0
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	602b      	str	r3, [r5, #0]
 80068e0:	f7fa fa66 	bl	8000db0 <_sbrk>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d102      	bne.n	80068ee <_sbrk_r+0x1a>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b103      	cbz	r3, 80068ee <_sbrk_r+0x1a>
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	20004cc4 	.word	0x20004cc4

080068f4 <setvbuf>:
 80068f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068f8:	461d      	mov	r5, r3
 80068fa:	4b5d      	ldr	r3, [pc, #372]	; (8006a70 <setvbuf+0x17c>)
 80068fc:	681f      	ldr	r7, [r3, #0]
 80068fe:	4604      	mov	r4, r0
 8006900:	460e      	mov	r6, r1
 8006902:	4690      	mov	r8, r2
 8006904:	b127      	cbz	r7, 8006910 <setvbuf+0x1c>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	b913      	cbnz	r3, 8006910 <setvbuf+0x1c>
 800690a:	4638      	mov	r0, r7
 800690c:	f7ff fd92 	bl	8006434 <__sinit>
 8006910:	4b58      	ldr	r3, [pc, #352]	; (8006a74 <setvbuf+0x180>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d167      	bne.n	80069e6 <setvbuf+0xf2>
 8006916:	687c      	ldr	r4, [r7, #4]
 8006918:	f1b8 0f02 	cmp.w	r8, #2
 800691c:	d006      	beq.n	800692c <setvbuf+0x38>
 800691e:	f1b8 0f01 	cmp.w	r8, #1
 8006922:	f200 809f 	bhi.w	8006a64 <setvbuf+0x170>
 8006926:	2d00      	cmp	r5, #0
 8006928:	f2c0 809c 	blt.w	8006a64 <setvbuf+0x170>
 800692c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800692e:	07db      	lsls	r3, r3, #31
 8006930:	d405      	bmi.n	800693e <setvbuf+0x4a>
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	0598      	lsls	r0, r3, #22
 8006936:	d402      	bmi.n	800693e <setvbuf+0x4a>
 8006938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800693a:	f7ff fe3e 	bl	80065ba <__retarget_lock_acquire_recursive>
 800693e:	4621      	mov	r1, r4
 8006940:	4638      	mov	r0, r7
 8006942:	f000 fa49 	bl	8006dd8 <_fflush_r>
 8006946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006948:	b141      	cbz	r1, 800695c <setvbuf+0x68>
 800694a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800694e:	4299      	cmp	r1, r3
 8006950:	d002      	beq.n	8006958 <setvbuf+0x64>
 8006952:	4638      	mov	r0, r7
 8006954:	f000 fb08 	bl	8006f68 <_free_r>
 8006958:	2300      	movs	r3, #0
 800695a:	6363      	str	r3, [r4, #52]	; 0x34
 800695c:	2300      	movs	r3, #0
 800695e:	61a3      	str	r3, [r4, #24]
 8006960:	6063      	str	r3, [r4, #4]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	0619      	lsls	r1, r3, #24
 8006966:	d503      	bpl.n	8006970 <setvbuf+0x7c>
 8006968:	6921      	ldr	r1, [r4, #16]
 800696a:	4638      	mov	r0, r7
 800696c:	f000 fafc 	bl	8006f68 <_free_r>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	f1b8 0f02 	cmp.w	r8, #2
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	d06c      	beq.n	8006a5c <setvbuf+0x168>
 8006982:	ab01      	add	r3, sp, #4
 8006984:	466a      	mov	r2, sp
 8006986:	4621      	mov	r1, r4
 8006988:	4638      	mov	r0, r7
 800698a:	f000 fa73 	bl	8006e74 <__swhatbuf_r>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	4318      	orrs	r0, r3
 8006992:	81a0      	strh	r0, [r4, #12]
 8006994:	2d00      	cmp	r5, #0
 8006996:	d130      	bne.n	80069fa <setvbuf+0x106>
 8006998:	9d00      	ldr	r5, [sp, #0]
 800699a:	4628      	mov	r0, r5
 800699c:	f000 fad0 	bl	8006f40 <malloc>
 80069a0:	4606      	mov	r6, r0
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d155      	bne.n	8006a52 <setvbuf+0x15e>
 80069a6:	f8dd 9000 	ldr.w	r9, [sp]
 80069aa:	45a9      	cmp	r9, r5
 80069ac:	d14a      	bne.n	8006a44 <setvbuf+0x150>
 80069ae:	f04f 35ff 	mov.w	r5, #4294967295
 80069b2:	2200      	movs	r2, #0
 80069b4:	60a2      	str	r2, [r4, #8]
 80069b6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	6122      	str	r2, [r4, #16]
 80069be:	2201      	movs	r2, #1
 80069c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c4:	6162      	str	r2, [r4, #20]
 80069c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	07d2      	lsls	r2, r2, #31
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	d405      	bmi.n	80069de <setvbuf+0xea>
 80069d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80069d6:	d102      	bne.n	80069de <setvbuf+0xea>
 80069d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069da:	f7ff fdef 	bl	80065bc <__retarget_lock_release_recursive>
 80069de:	4628      	mov	r0, r5
 80069e0:	b003      	add	sp, #12
 80069e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069e6:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <setvbuf+0x184>)
 80069e8:	429c      	cmp	r4, r3
 80069ea:	d101      	bne.n	80069f0 <setvbuf+0xfc>
 80069ec:	68bc      	ldr	r4, [r7, #8]
 80069ee:	e793      	b.n	8006918 <setvbuf+0x24>
 80069f0:	4b22      	ldr	r3, [pc, #136]	; (8006a7c <setvbuf+0x188>)
 80069f2:	429c      	cmp	r4, r3
 80069f4:	bf08      	it	eq
 80069f6:	68fc      	ldreq	r4, [r7, #12]
 80069f8:	e78e      	b.n	8006918 <setvbuf+0x24>
 80069fa:	2e00      	cmp	r6, #0
 80069fc:	d0cd      	beq.n	800699a <setvbuf+0xa6>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	b913      	cbnz	r3, 8006a08 <setvbuf+0x114>
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7ff fd16 	bl	8006434 <__sinit>
 8006a08:	f1b8 0f01 	cmp.w	r8, #1
 8006a0c:	bf08      	it	eq
 8006a0e:	89a3      	ldrheq	r3, [r4, #12]
 8006a10:	6026      	str	r6, [r4, #0]
 8006a12:	bf04      	itt	eq
 8006a14:	f043 0301 	orreq.w	r3, r3, #1
 8006a18:	81a3      	strheq	r3, [r4, #12]
 8006a1a:	89a2      	ldrh	r2, [r4, #12]
 8006a1c:	f012 0308 	ands.w	r3, r2, #8
 8006a20:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006a24:	d01c      	beq.n	8006a60 <setvbuf+0x16c>
 8006a26:	07d3      	lsls	r3, r2, #31
 8006a28:	bf41      	itttt	mi
 8006a2a:	2300      	movmi	r3, #0
 8006a2c:	426d      	negmi	r5, r5
 8006a2e:	60a3      	strmi	r3, [r4, #8]
 8006a30:	61a5      	strmi	r5, [r4, #24]
 8006a32:	bf58      	it	pl
 8006a34:	60a5      	strpl	r5, [r4, #8]
 8006a36:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006a38:	f015 0501 	ands.w	r5, r5, #1
 8006a3c:	d115      	bne.n	8006a6a <setvbuf+0x176>
 8006a3e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006a42:	e7c8      	b.n	80069d6 <setvbuf+0xe2>
 8006a44:	4648      	mov	r0, r9
 8006a46:	f000 fa7b 	bl	8006f40 <malloc>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0ae      	beq.n	80069ae <setvbuf+0xba>
 8006a50:	464d      	mov	r5, r9
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	e7d0      	b.n	80069fe <setvbuf+0x10a>
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	e7a8      	b.n	80069b2 <setvbuf+0xbe>
 8006a60:	60a3      	str	r3, [r4, #8]
 8006a62:	e7e8      	b.n	8006a36 <setvbuf+0x142>
 8006a64:	f04f 35ff 	mov.w	r5, #4294967295
 8006a68:	e7b9      	b.n	80069de <setvbuf+0xea>
 8006a6a:	2500      	movs	r5, #0
 8006a6c:	e7b7      	b.n	80069de <setvbuf+0xea>
 8006a6e:	bf00      	nop
 8006a70:	20000014 	.word	0x20000014
 8006a74:	08007134 	.word	0x08007134
 8006a78:	08007154 	.word	0x08007154
 8006a7c:	08007114 	.word	0x08007114

08006a80 <__sread>:
 8006a80:	b510      	push	{r4, lr}
 8006a82:	460c      	mov	r4, r1
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	f000 faba 	bl	8007000 <_read_r>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	bfab      	itete	ge
 8006a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a92:	89a3      	ldrhlt	r3, [r4, #12]
 8006a94:	181b      	addge	r3, r3, r0
 8006a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a9a:	bfac      	ite	ge
 8006a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a9e:	81a3      	strhlt	r3, [r4, #12]
 8006aa0:	bd10      	pop	{r4, pc}

08006aa2 <__swrite>:
 8006aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	898b      	ldrh	r3, [r1, #12]
 8006aaa:	05db      	lsls	r3, r3, #23
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	d505      	bpl.n	8006ac0 <__swrite+0x1e>
 8006ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab8:	2302      	movs	r3, #2
 8006aba:	2200      	movs	r2, #0
 8006abc:	f000 f9c8 	bl	8006e50 <_lseek_r>
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	4632      	mov	r2, r6
 8006ace:	463b      	mov	r3, r7
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad6:	f000 b869 	b.w	8006bac <_write_r>

08006ada <__sseek>:
 8006ada:	b510      	push	{r4, lr}
 8006adc:	460c      	mov	r4, r1
 8006ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae2:	f000 f9b5 	bl	8006e50 <_lseek_r>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	bf15      	itete	ne
 8006aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006af6:	81a3      	strheq	r3, [r4, #12]
 8006af8:	bf18      	it	ne
 8006afa:	81a3      	strhne	r3, [r4, #12]
 8006afc:	bd10      	pop	{r4, pc}

08006afe <__sclose>:
 8006afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b02:	f000 b8d3 	b.w	8006cac <_close_r>
	...

08006b08 <__swbuf_r>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	460e      	mov	r6, r1
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	4605      	mov	r5, r0
 8006b10:	b118      	cbz	r0, 8006b1a <__swbuf_r+0x12>
 8006b12:	6983      	ldr	r3, [r0, #24]
 8006b14:	b90b      	cbnz	r3, 8006b1a <__swbuf_r+0x12>
 8006b16:	f7ff fc8d 	bl	8006434 <__sinit>
 8006b1a:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <__swbuf_r+0x98>)
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	d12b      	bne.n	8006b78 <__swbuf_r+0x70>
 8006b20:	686c      	ldr	r4, [r5, #4]
 8006b22:	69a3      	ldr	r3, [r4, #24]
 8006b24:	60a3      	str	r3, [r4, #8]
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	071a      	lsls	r2, r3, #28
 8006b2a:	d52f      	bpl.n	8006b8c <__swbuf_r+0x84>
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	b36b      	cbz	r3, 8006b8c <__swbuf_r+0x84>
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	6820      	ldr	r0, [r4, #0]
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	6963      	ldr	r3, [r4, #20]
 8006b38:	b2f6      	uxtb	r6, r6
 8006b3a:	4283      	cmp	r3, r0
 8006b3c:	4637      	mov	r7, r6
 8006b3e:	dc04      	bgt.n	8006b4a <__swbuf_r+0x42>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 f948 	bl	8006dd8 <_fflush_r>
 8006b48:	bb30      	cbnz	r0, 8006b98 <__swbuf_r+0x90>
 8006b4a:	68a3      	ldr	r3, [r4, #8]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	60a3      	str	r3, [r4, #8]
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	6022      	str	r2, [r4, #0]
 8006b56:	701e      	strb	r6, [r3, #0]
 8006b58:	6963      	ldr	r3, [r4, #20]
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	4283      	cmp	r3, r0
 8006b5e:	d004      	beq.n	8006b6a <__swbuf_r+0x62>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	07db      	lsls	r3, r3, #31
 8006b64:	d506      	bpl.n	8006b74 <__swbuf_r+0x6c>
 8006b66:	2e0a      	cmp	r6, #10
 8006b68:	d104      	bne.n	8006b74 <__swbuf_r+0x6c>
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 f933 	bl	8006dd8 <_fflush_r>
 8006b72:	b988      	cbnz	r0, 8006b98 <__swbuf_r+0x90>
 8006b74:	4638      	mov	r0, r7
 8006b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <__swbuf_r+0x9c>)
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	d101      	bne.n	8006b82 <__swbuf_r+0x7a>
 8006b7e:	68ac      	ldr	r4, [r5, #8]
 8006b80:	e7cf      	b.n	8006b22 <__swbuf_r+0x1a>
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <__swbuf_r+0xa0>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	bf08      	it	eq
 8006b88:	68ec      	ldreq	r4, [r5, #12]
 8006b8a:	e7ca      	b.n	8006b22 <__swbuf_r+0x1a>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 f81e 	bl	8006bd0 <__swsetup_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d0cb      	beq.n	8006b30 <__swbuf_r+0x28>
 8006b98:	f04f 37ff 	mov.w	r7, #4294967295
 8006b9c:	e7ea      	b.n	8006b74 <__swbuf_r+0x6c>
 8006b9e:	bf00      	nop
 8006ba0:	08007134 	.word	0x08007134
 8006ba4:	08007154 	.word	0x08007154
 8006ba8:	08007114 	.word	0x08007114

08006bac <_write_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4d07      	ldr	r5, [pc, #28]	; (8006bcc <_write_r+0x20>)
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	602a      	str	r2, [r5, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f7f9 ff5a 	bl	8000a74 <_write>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_write_r+0x1e>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_write_r+0x1e>
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	20004cc4 	.word	0x20004cc4

08006bd0 <__swsetup_r>:
 8006bd0:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <__swsetup_r+0xcc>)
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	b125      	cbz	r5, 8006be6 <__swsetup_r+0x16>
 8006bdc:	69ab      	ldr	r3, [r5, #24]
 8006bde:	b913      	cbnz	r3, 8006be6 <__swsetup_r+0x16>
 8006be0:	4628      	mov	r0, r5
 8006be2:	f7ff fc27 	bl	8006434 <__sinit>
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <__swsetup_r+0xd0>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d10f      	bne.n	8006c0c <__swsetup_r+0x3c>
 8006bec:	686c      	ldr	r4, [r5, #4]
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf4:	0719      	lsls	r1, r3, #28
 8006bf6:	d42c      	bmi.n	8006c52 <__swsetup_r+0x82>
 8006bf8:	06dd      	lsls	r5, r3, #27
 8006bfa:	d411      	bmi.n	8006c20 <__swsetup_r+0x50>
 8006bfc:	2309      	movs	r3, #9
 8006bfe:	6033      	str	r3, [r6, #0]
 8006c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	e03e      	b.n	8006c8a <__swsetup_r+0xba>
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <__swsetup_r+0xd4>)
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	d101      	bne.n	8006c16 <__swsetup_r+0x46>
 8006c12:	68ac      	ldr	r4, [r5, #8]
 8006c14:	e7eb      	b.n	8006bee <__swsetup_r+0x1e>
 8006c16:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <__swsetup_r+0xd8>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	bf08      	it	eq
 8006c1c:	68ec      	ldreq	r4, [r5, #12]
 8006c1e:	e7e6      	b.n	8006bee <__swsetup_r+0x1e>
 8006c20:	0758      	lsls	r0, r3, #29
 8006c22:	d512      	bpl.n	8006c4a <__swsetup_r+0x7a>
 8006c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c26:	b141      	cbz	r1, 8006c3a <__swsetup_r+0x6a>
 8006c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	d002      	beq.n	8006c36 <__swsetup_r+0x66>
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f999 	bl	8006f68 <_free_r>
 8006c36:	2300      	movs	r3, #0
 8006c38:	6363      	str	r3, [r4, #52]	; 0x34
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	2300      	movs	r3, #0
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f043 0308 	orr.w	r3, r3, #8
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	b94b      	cbnz	r3, 8006c6a <__swsetup_r+0x9a>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c60:	d003      	beq.n	8006c6a <__swsetup_r+0x9a>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4630      	mov	r0, r6
 8006c66:	f000 f92b 	bl	8006ec0 <__smakebuf_r>
 8006c6a:	89a0      	ldrh	r0, [r4, #12]
 8006c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c70:	f010 0301 	ands.w	r3, r0, #1
 8006c74:	d00a      	beq.n	8006c8c <__swsetup_r+0xbc>
 8006c76:	2300      	movs	r3, #0
 8006c78:	60a3      	str	r3, [r4, #8]
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	61a3      	str	r3, [r4, #24]
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	b943      	cbnz	r3, 8006c96 <__swsetup_r+0xc6>
 8006c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c88:	d1ba      	bne.n	8006c00 <__swsetup_r+0x30>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	0781      	lsls	r1, r0, #30
 8006c8e:	bf58      	it	pl
 8006c90:	6963      	ldrpl	r3, [r4, #20]
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	e7f4      	b.n	8006c80 <__swsetup_r+0xb0>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e7f7      	b.n	8006c8a <__swsetup_r+0xba>
 8006c9a:	bf00      	nop
 8006c9c:	20000014 	.word	0x20000014
 8006ca0:	08007134 	.word	0x08007134
 8006ca4:	08007154 	.word	0x08007154
 8006ca8:	08007114 	.word	0x08007114

08006cac <_close_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_close_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7f9 ff08 	bl	8000acc <_close>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_close_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_close_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20004cc4 	.word	0x20004cc4

08006ccc <__sflush_r>:
 8006ccc:	898a      	ldrh	r2, [r1, #12]
 8006cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	0710      	lsls	r0, r2, #28
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	d458      	bmi.n	8006d8c <__sflush_r+0xc0>
 8006cda:	684b      	ldr	r3, [r1, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dc05      	bgt.n	8006cec <__sflush_r+0x20>
 8006ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dc02      	bgt.n	8006cec <__sflush_r+0x20>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d0f9      	beq.n	8006ce6 <__sflush_r+0x1a>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cf8:	682f      	ldr	r7, [r5, #0]
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	d032      	beq.n	8006d64 <__sflush_r+0x98>
 8006cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	075a      	lsls	r2, r3, #29
 8006d04:	d505      	bpl.n	8006d12 <__sflush_r+0x46>
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	1ac0      	subs	r0, r0, r3
 8006d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d0c:	b10b      	cbz	r3, 8006d12 <__sflush_r+0x46>
 8006d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d10:	1ac0      	subs	r0, r0, r3
 8006d12:	2300      	movs	r3, #0
 8006d14:	4602      	mov	r2, r0
 8006d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d18:	6a21      	ldr	r1, [r4, #32]
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b0      	blx	r6
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	d106      	bne.n	8006d32 <__sflush_r+0x66>
 8006d24:	6829      	ldr	r1, [r5, #0]
 8006d26:	291d      	cmp	r1, #29
 8006d28:	d82c      	bhi.n	8006d84 <__sflush_r+0xb8>
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <__sflush_r+0x108>)
 8006d2c:	40ca      	lsrs	r2, r1
 8006d2e:	07d6      	lsls	r6, r2, #31
 8006d30:	d528      	bpl.n	8006d84 <__sflush_r+0xb8>
 8006d32:	2200      	movs	r2, #0
 8006d34:	6062      	str	r2, [r4, #4]
 8006d36:	04d9      	lsls	r1, r3, #19
 8006d38:	6922      	ldr	r2, [r4, #16]
 8006d3a:	6022      	str	r2, [r4, #0]
 8006d3c:	d504      	bpl.n	8006d48 <__sflush_r+0x7c>
 8006d3e:	1c42      	adds	r2, r0, #1
 8006d40:	d101      	bne.n	8006d46 <__sflush_r+0x7a>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	b903      	cbnz	r3, 8006d48 <__sflush_r+0x7c>
 8006d46:	6560      	str	r0, [r4, #84]	; 0x54
 8006d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d4a:	602f      	str	r7, [r5, #0]
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d0ca      	beq.n	8006ce6 <__sflush_r+0x1a>
 8006d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d002      	beq.n	8006d5e <__sflush_r+0x92>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 f905 	bl	8006f68 <_free_r>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	6360      	str	r0, [r4, #52]	; 0x34
 8006d62:	e7c1      	b.n	8006ce8 <__sflush_r+0x1c>
 8006d64:	6a21      	ldr	r1, [r4, #32]
 8006d66:	2301      	movs	r3, #1
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b0      	blx	r6
 8006d6c:	1c41      	adds	r1, r0, #1
 8006d6e:	d1c7      	bne.n	8006d00 <__sflush_r+0x34>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0c4      	beq.n	8006d00 <__sflush_r+0x34>
 8006d76:	2b1d      	cmp	r3, #29
 8006d78:	d001      	beq.n	8006d7e <__sflush_r+0xb2>
 8006d7a:	2b16      	cmp	r3, #22
 8006d7c:	d101      	bne.n	8006d82 <__sflush_r+0xb6>
 8006d7e:	602f      	str	r7, [r5, #0]
 8006d80:	e7b1      	b.n	8006ce6 <__sflush_r+0x1a>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	e7ad      	b.n	8006ce8 <__sflush_r+0x1c>
 8006d8c:	690f      	ldr	r7, [r1, #16]
 8006d8e:	2f00      	cmp	r7, #0
 8006d90:	d0a9      	beq.n	8006ce6 <__sflush_r+0x1a>
 8006d92:	0793      	lsls	r3, r2, #30
 8006d94:	680e      	ldr	r6, [r1, #0]
 8006d96:	bf08      	it	eq
 8006d98:	694b      	ldreq	r3, [r1, #20]
 8006d9a:	600f      	str	r7, [r1, #0]
 8006d9c:	bf18      	it	ne
 8006d9e:	2300      	movne	r3, #0
 8006da0:	eba6 0807 	sub.w	r8, r6, r7
 8006da4:	608b      	str	r3, [r1, #8]
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	dd9c      	ble.n	8006ce6 <__sflush_r+0x1a>
 8006dac:	6a21      	ldr	r1, [r4, #32]
 8006dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006db0:	4643      	mov	r3, r8
 8006db2:	463a      	mov	r2, r7
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b0      	blx	r6
 8006db8:	2800      	cmp	r0, #0
 8006dba:	dc06      	bgt.n	8006dca <__sflush_r+0xfe>
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	e78e      	b.n	8006ce8 <__sflush_r+0x1c>
 8006dca:	4407      	add	r7, r0
 8006dcc:	eba8 0800 	sub.w	r8, r8, r0
 8006dd0:	e7e9      	b.n	8006da6 <__sflush_r+0xda>
 8006dd2:	bf00      	nop
 8006dd4:	20400001 	.word	0x20400001

08006dd8 <_fflush_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	690b      	ldr	r3, [r1, #16]
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	b913      	cbnz	r3, 8006de8 <_fflush_r+0x10>
 8006de2:	2500      	movs	r5, #0
 8006de4:	4628      	mov	r0, r5
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	b118      	cbz	r0, 8006df2 <_fflush_r+0x1a>
 8006dea:	6983      	ldr	r3, [r0, #24]
 8006dec:	b90b      	cbnz	r3, 8006df2 <_fflush_r+0x1a>
 8006dee:	f7ff fb21 	bl	8006434 <__sinit>
 8006df2:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <_fflush_r+0x6c>)
 8006df4:	429c      	cmp	r4, r3
 8006df6:	d11b      	bne.n	8006e30 <_fflush_r+0x58>
 8006df8:	686c      	ldr	r4, [r5, #4]
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0ef      	beq.n	8006de2 <_fflush_r+0xa>
 8006e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e04:	07d0      	lsls	r0, r2, #31
 8006e06:	d404      	bmi.n	8006e12 <_fflush_r+0x3a>
 8006e08:	0599      	lsls	r1, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_fflush_r+0x3a>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0e:	f7ff fbd4 	bl	80065ba <__retarget_lock_acquire_recursive>
 8006e12:	4628      	mov	r0, r5
 8006e14:	4621      	mov	r1, r4
 8006e16:	f7ff ff59 	bl	8006ccc <__sflush_r>
 8006e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e1c:	07da      	lsls	r2, r3, #31
 8006e1e:	4605      	mov	r5, r0
 8006e20:	d4e0      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	059b      	lsls	r3, r3, #22
 8006e26:	d4dd      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e2a:	f7ff fbc7 	bl	80065bc <__retarget_lock_release_recursive>
 8006e2e:	e7d9      	b.n	8006de4 <_fflush_r+0xc>
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <_fflush_r+0x70>)
 8006e32:	429c      	cmp	r4, r3
 8006e34:	d101      	bne.n	8006e3a <_fflush_r+0x62>
 8006e36:	68ac      	ldr	r4, [r5, #8]
 8006e38:	e7df      	b.n	8006dfa <_fflush_r+0x22>
 8006e3a:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <_fflush_r+0x74>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	bf08      	it	eq
 8006e40:	68ec      	ldreq	r4, [r5, #12]
 8006e42:	e7da      	b.n	8006dfa <_fflush_r+0x22>
 8006e44:	08007134 	.word	0x08007134
 8006e48:	08007154 	.word	0x08007154
 8006e4c:	08007114 	.word	0x08007114

08006e50 <_lseek_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d07      	ldr	r5, [pc, #28]	; (8006e70 <_lseek_r+0x20>)
 8006e54:	4604      	mov	r4, r0
 8006e56:	4608      	mov	r0, r1
 8006e58:	4611      	mov	r1, r2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7f9 fe4b 	bl	8000afa <_lseek>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_lseek_r+0x1e>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_lseek_r+0x1e>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20004cc4 	.word	0x20004cc4

08006e74 <__swhatbuf_r>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	460e      	mov	r6, r1
 8006e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	b096      	sub	sp, #88	; 0x58
 8006e80:	4614      	mov	r4, r2
 8006e82:	461d      	mov	r5, r3
 8006e84:	da08      	bge.n	8006e98 <__swhatbuf_r+0x24>
 8006e86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	602a      	str	r2, [r5, #0]
 8006e8e:	061a      	lsls	r2, r3, #24
 8006e90:	d410      	bmi.n	8006eb4 <__swhatbuf_r+0x40>
 8006e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e96:	e00e      	b.n	8006eb6 <__swhatbuf_r+0x42>
 8006e98:	466a      	mov	r2, sp
 8006e9a:	f000 f8c3 	bl	8007024 <_fstat_r>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	dbf1      	blt.n	8006e86 <__swhatbuf_r+0x12>
 8006ea2:	9a01      	ldr	r2, [sp, #4]
 8006ea4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ea8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006eac:	425a      	negs	r2, r3
 8006eae:	415a      	adcs	r2, r3
 8006eb0:	602a      	str	r2, [r5, #0]
 8006eb2:	e7ee      	b.n	8006e92 <__swhatbuf_r+0x1e>
 8006eb4:	2340      	movs	r3, #64	; 0x40
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	b016      	add	sp, #88	; 0x58
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ec0 <__smakebuf_r>:
 8006ec0:	898b      	ldrh	r3, [r1, #12]
 8006ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ec4:	079d      	lsls	r5, r3, #30
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	460c      	mov	r4, r1
 8006eca:	d507      	bpl.n	8006edc <__smakebuf_r+0x1c>
 8006ecc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	6123      	str	r3, [r4, #16]
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	6163      	str	r3, [r4, #20]
 8006ed8:	b002      	add	sp, #8
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	ab01      	add	r3, sp, #4
 8006ede:	466a      	mov	r2, sp
 8006ee0:	f7ff ffc8 	bl	8006e74 <__swhatbuf_r>
 8006ee4:	9900      	ldr	r1, [sp, #0]
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7ff fb9f 	bl	800662c <_malloc_r>
 8006eee:	b948      	cbnz	r0, 8006f04 <__smakebuf_r+0x44>
 8006ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef4:	059a      	lsls	r2, r3, #22
 8006ef6:	d4ef      	bmi.n	8006ed8 <__smakebuf_r+0x18>
 8006ef8:	f023 0303 	bic.w	r3, r3, #3
 8006efc:	f043 0302 	orr.w	r3, r3, #2
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	e7e3      	b.n	8006ecc <__smakebuf_r+0xc>
 8006f04:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <__smakebuf_r+0x7c>)
 8006f06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	6020      	str	r0, [r4, #0]
 8006f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	9b00      	ldr	r3, [sp, #0]
 8006f14:	6163      	str	r3, [r4, #20]
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	6120      	str	r0, [r4, #16]
 8006f1a:	b15b      	cbz	r3, 8006f34 <__smakebuf_r+0x74>
 8006f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f20:	4630      	mov	r0, r6
 8006f22:	f000 f891 	bl	8007048 <_isatty_r>
 8006f26:	b128      	cbz	r0, 8006f34 <__smakebuf_r+0x74>
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	89a0      	ldrh	r0, [r4, #12]
 8006f36:	4305      	orrs	r5, r0
 8006f38:	81a5      	strh	r5, [r4, #12]
 8006f3a:	e7cd      	b.n	8006ed8 <__smakebuf_r+0x18>
 8006f3c:	080063cd 	.word	0x080063cd

08006f40 <malloc>:
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <malloc+0xc>)
 8006f42:	4601      	mov	r1, r0
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	f7ff bb71 	b.w	800662c <_malloc_r>
 8006f4a:	bf00      	nop
 8006f4c:	20000014 	.word	0x20000014

08006f50 <__malloc_lock>:
 8006f50:	4801      	ldr	r0, [pc, #4]	; (8006f58 <__malloc_lock+0x8>)
 8006f52:	f7ff bb32 	b.w	80065ba <__retarget_lock_acquire_recursive>
 8006f56:	bf00      	nop
 8006f58:	20004cb8 	.word	0x20004cb8

08006f5c <__malloc_unlock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_unlock+0x8>)
 8006f5e:	f7ff bb2d 	b.w	80065bc <__retarget_lock_release_recursive>
 8006f62:	bf00      	nop
 8006f64:	20004cb8 	.word	0x20004cb8

08006f68 <_free_r>:
 8006f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	d044      	beq.n	8006ff8 <_free_r+0x90>
 8006f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f72:	9001      	str	r0, [sp, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f1a1 0404 	sub.w	r4, r1, #4
 8006f7a:	bfb8      	it	lt
 8006f7c:	18e4      	addlt	r4, r4, r3
 8006f7e:	f7ff ffe7 	bl	8006f50 <__malloc_lock>
 8006f82:	4a1e      	ldr	r2, [pc, #120]	; (8006ffc <_free_r+0x94>)
 8006f84:	9801      	ldr	r0, [sp, #4]
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	b933      	cbnz	r3, 8006f98 <_free_r+0x30>
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	6014      	str	r4, [r2, #0]
 8006f8e:	b003      	add	sp, #12
 8006f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f94:	f7ff bfe2 	b.w	8006f5c <__malloc_unlock>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d908      	bls.n	8006fae <_free_r+0x46>
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	1961      	adds	r1, r4, r5
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf01      	itttt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	1949      	addeq	r1, r1, r5
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	e7ed      	b.n	8006f8a <_free_r+0x22>
 8006fae:	461a      	mov	r2, r3
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b10b      	cbz	r3, 8006fb8 <_free_r+0x50>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d9fa      	bls.n	8006fae <_free_r+0x46>
 8006fb8:	6811      	ldr	r1, [r2, #0]
 8006fba:	1855      	adds	r5, r2, r1
 8006fbc:	42a5      	cmp	r5, r4
 8006fbe:	d10b      	bne.n	8006fd8 <_free_r+0x70>
 8006fc0:	6824      	ldr	r4, [r4, #0]
 8006fc2:	4421      	add	r1, r4
 8006fc4:	1854      	adds	r4, r2, r1
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	d1e0      	bne.n	8006f8e <_free_r+0x26>
 8006fcc:	681c      	ldr	r4, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	4421      	add	r1, r4
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	e7da      	b.n	8006f8e <_free_r+0x26>
 8006fd8:	d902      	bls.n	8006fe0 <_free_r+0x78>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	6003      	str	r3, [r0, #0]
 8006fde:	e7d6      	b.n	8006f8e <_free_r+0x26>
 8006fe0:	6825      	ldr	r5, [r4, #0]
 8006fe2:	1961      	adds	r1, r4, r5
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	bf04      	itt	eq
 8006fe8:	6819      	ldreq	r1, [r3, #0]
 8006fea:	685b      	ldreq	r3, [r3, #4]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	bf04      	itt	eq
 8006ff0:	1949      	addeq	r1, r1, r5
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	6054      	str	r4, [r2, #4]
 8006ff6:	e7ca      	b.n	8006f8e <_free_r+0x26>
 8006ff8:	b003      	add	sp, #12
 8006ffa:	bd30      	pop	{r4, r5, pc}
 8006ffc:	20004cbc 	.word	0x20004cbc

08007000 <_read_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	; (8007020 <_read_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7f9 fd84 	bl	8000b1c <_read>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_read_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_read_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20004cc4 	.word	0x20004cc4

08007024 <_fstat_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	; (8007044 <_fstat_r+0x20>)
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	f7f9 fd9b 	bl	8000b6c <_fstat>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d102      	bne.n	8007040 <_fstat_r+0x1c>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	b103      	cbz	r3, 8007040 <_fstat_r+0x1c>
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20004cc4 	.word	0x20004cc4

08007048 <_isatty_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	; (8007064 <_isatty_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7f9 fcf8 	bl	8000a48 <_isatty>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_isatty_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_isatty_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20004cc4 	.word	0x20004cc4

08007068 <_init>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr

08007074 <_fini>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr
