
TimestampExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018470  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff4  08018640  08018640  00028640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b634  0801b634  00030a2c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b634  0801b634  0002b634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b63c  0801b63c  00030a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b63c  0801b63c  0002b63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b644  0801b644  0002b644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a2c  20000000  0801b648  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a18  20000a30  0801c074  00030a30  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007448  0801c074  00037448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204e3  00000000  00000000  00030a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000549a  00000000  00000000  00050f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000563e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  000579e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000325b9  00000000  00000000  00058f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025edd  00000000  00000000  0008b4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108ea1  00000000  00000000  000b13d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ba277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073e4  00000000  00000000  001ba2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a30 	.word	0x20000a30
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018628 	.word	0x08018628

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a34 	.word	0x20000a34
 800020c:	08018628 	.word	0x08018628

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1a:	f000 b9bf 	b.w	8000f9c <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b974 	b.w	8000f9c <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9d08      	ldr	r5, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	468e      	mov	lr, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14d      	bne.n	8000d76 <__udivmoddi4+0xaa>
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	4694      	mov	ip, r2
 8000cde:	d969      	bls.n	8000db4 <__udivmoddi4+0xe8>
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b152      	cbz	r2, 8000cfc <__udivmoddi4+0x30>
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	f1c2 0120 	rsb	r1, r2, #32
 8000cee:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cfa:	4094      	lsls	r4, r2
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	0c21      	lsrs	r1, r4, #16
 8000d02:	fbbe f6f8 	udiv	r6, lr, r8
 8000d06:	fa1f f78c 	uxth.w	r7, ip
 8000d0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d12:	fb06 f107 	mul.w	r1, r6, r7
 8000d16:	4299      	cmp	r1, r3
 8000d18:	d90a      	bls.n	8000d30 <__udivmoddi4+0x64>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d22:	f080 811f 	bcs.w	8000f64 <__udivmoddi4+0x298>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 811c 	bls.w	8000f64 <__udivmoddi4+0x298>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	4463      	add	r3, ip
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3310 	mls	r3, r8, r0, r3
 8000d3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d40:	fb00 f707 	mul.w	r7, r0, r7
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x92>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d50:	f080 810a 	bcs.w	8000f68 <__udivmoddi4+0x29c>
 8000d54:	42a7      	cmp	r7, r4
 8000d56:	f240 8107 	bls.w	8000f68 <__udivmoddi4+0x29c>
 8000d5a:	4464      	add	r4, ip
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d62:	1be4      	subs	r4, r4, r7
 8000d64:	2600      	movs	r6, #0
 8000d66:	b11d      	cbz	r5, 8000d70 <__udivmoddi4+0xa4>
 8000d68:	40d4      	lsrs	r4, r2
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0xc2>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	f000 80ef 	beq.w	8000f5e <__udivmoddi4+0x292>
 8000d80:	2600      	movs	r6, #0
 8000d82:	e9c5 0100 	strd	r0, r1, [r5]
 8000d86:	4630      	mov	r0, r6
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f683 	clz	r6, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d14a      	bne.n	8000e2c <__udivmoddi4+0x160>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xd4>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80f9 	bhi.w	8000f92 <__udivmoddi4+0x2c6>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0303 	sbc.w	r3, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	469e      	mov	lr, r3
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e0      	beq.n	8000d70 <__udivmoddi4+0xa4>
 8000dae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000db2:	e7dd      	b.n	8000d70 <__udivmoddi4+0xa4>
 8000db4:	b902      	cbnz	r2, 8000db8 <__udivmoddi4+0xec>
 8000db6:	deff      	udf	#255	; 0xff
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	f040 8092 	bne.w	8000ee6 <__udivmoddi4+0x21a>
 8000dc2:	eba1 010c 	sub.w	r1, r1, ip
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2601      	movs	r6, #1
 8000dd0:	0c20      	lsrs	r0, r4, #16
 8000dd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dde:	fb0e f003 	mul.w	r0, lr, r3
 8000de2:	4288      	cmp	r0, r1
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x12c>
 8000de6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x12a>
 8000df0:	4288      	cmp	r0, r1
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2c0>
 8000df6:	4643      	mov	r3, r8
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e00:	fb07 1110 	mls	r1, r7, r0, r1
 8000e04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x156>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x154>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2ca>
 8000e20:	4608      	mov	r0, r1
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e2a:	e79c      	b.n	8000d66 <__udivmoddi4+0x9a>
 8000e2c:	f1c6 0720 	rsb	r7, r6, #32
 8000e30:	40b3      	lsls	r3, r6
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e42:	431c      	orrs	r4, r3
 8000e44:	40f9      	lsrs	r1, r7
 8000e46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e52:	0c20      	lsrs	r0, r4, #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fb09 1118 	mls	r1, r9, r8, r1
 8000e5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e60:	fb08 f00e 	mul.w	r0, r8, lr
 8000e64:	4288      	cmp	r0, r1
 8000e66:	fa02 f206 	lsl.w	r2, r2, r6
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b8>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2bc>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2bc>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1a09      	subs	r1, r1, r0
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e98:	458e      	cmp	lr, r1
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1e2>
 8000e9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2b4>
 8000ea6:	458e      	cmp	lr, r1
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2b4>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4461      	add	r1, ip
 8000eae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb6:	eba1 010e 	sub.w	r1, r1, lr
 8000eba:	42a1      	cmp	r1, r4
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46a6      	mov	lr, r4
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x2a4>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x2a0>
 8000ec4:	b15d      	cbz	r5, 8000ede <__udivmoddi4+0x212>
 8000ec6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ece:	fa01 f707 	lsl.w	r7, r1, r7
 8000ed2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed6:	40f1      	lsrs	r1, r6
 8000ed8:	431f      	orrs	r7, r3
 8000eda:	e9c5 7100 	strd	r7, r1, [r5]
 8000ede:	2600      	movs	r6, #0
 8000ee0:	4631      	mov	r1, r6
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	f1c2 0320 	rsb	r3, r2, #32
 8000eea:	40d8      	lsrs	r0, r3
 8000eec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	4301      	orrs	r1, r0
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f04:	fb07 3610 	mls	r6, r7, r0, r3
 8000f08:	0c0b      	lsrs	r3, r1, #16
 8000f0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f12:	429e      	cmp	r6, r3
 8000f14:	fa04 f402 	lsl.w	r4, r4, r2
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x260>
 8000f1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b8>
 8000f24:	429e      	cmp	r6, r3
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b8>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4463      	add	r3, ip
 8000f2c:	1b9b      	subs	r3, r3, r6
 8000f2e:	b289      	uxth	r1, r1
 8000f30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f34:	fb07 3316 	mls	r3, r7, r6, r3
 8000f38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x28a>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f52:	3e02      	subs	r6, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0x104>
 8000f5e:	462e      	mov	r6, r5
 8000f60:	4628      	mov	r0, r5
 8000f62:	e705      	b.n	8000d70 <__udivmoddi4+0xa4>
 8000f64:	4606      	mov	r6, r0
 8000f66:	e6e3      	b.n	8000d30 <__udivmoddi4+0x64>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6f8      	b.n	8000d5e <__udivmoddi4+0x92>
 8000f6c:	454b      	cmp	r3, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f8>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f78:	3801      	subs	r0, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f8>
 8000f7c:	4646      	mov	r6, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x28a>
 8000f80:	4620      	mov	r0, r4
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1e2>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x260>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b8>
 8000f8c:	3b02      	subs	r3, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x12c>
 8000f92:	4630      	mov	r0, r6
 8000f94:	e709      	b.n	8000daa <__udivmoddi4+0xde>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x156>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <UdpNTP_Konf>:
}



int8_t UdpNTP_Konf(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	NtpPcb = udp_new();
 8000fa4:	f00c fe44 	bl	800dc30 <udp_new>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fac:	6013      	str	r3, [r2, #0]
	IP4_ADDR(&NtpPcb->remote_ip,REMOTEIP_1,REMOTEIP_2,REMOTEIP_3,REMOTEIP_4);
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <UdpNTP_Konf+0x74>)
 8000fb4:	605a      	str	r2, [r3, #4]
	NtpPcb->remote_port = NTP_PORT;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	227b      	movs	r2, #123	; 0x7b
 8000fbc:	829a      	strh	r2, [r3, #20]
	IP4_ADDR(&NtpPcb->local_ip,LOCALIP_1,LOCALIP_2,LOCALIP_3,LOCALIP_4);
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <UdpNTP_Konf+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
	NtpPcb->local_port = NTP_LOCALPORT;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f241 6222 	movw	r2, #5666	; 0x1622
 8000fce:	825a      	strh	r2, [r3, #18]
	NtpErr = udp_bind(NtpPcb, &NtpPcb->local_ip,NtpPcb->local_port);
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <UdpNTP_Konf+0x70>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	8a5b      	ldrh	r3, [r3, #18]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f00c fd7d 	bl	800dae0 <udp_bind>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <UdpNTP_Konf+0x7c>)
 8000fec:	701a      	strb	r2, [r3, #0]
	if(NtpErr == 0){
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <UdpNTP_Konf+0x7c>)
 8000ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d106      	bne.n	8001006 <UdpNTP_Konf+0x66>
		udp_recv(NtpPcb, &udpNtpcallback, NULL);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <UdpNTP_Konf+0x70>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <UdpNTP_Konf+0x80>)
 8001000:	4618      	mov	r0, r3
 8001002:	f00c fdf5 	bl	800dbf0 <udp_recv>
	}
	return NtpErr;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <UdpNTP_Konf+0x7c>)
 8001008:	f993 3000 	ldrsb.w	r3, [r3]
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000a88 	.word	0x20000a88
 8001014:	01002a0a 	.word	0x01002a0a
 8001018:	0a002a0a 	.word	0x0a002a0a
 800101c:	20000a90 	.word	0x20000a90
 8001020:	08001101 	.word	0x08001101

08001024 <NtpMesajParcala>:



void NtpMesajParcala(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
    const unsigned long seventyYears = 2208988800UL;
 800102a:	492f      	ldr	r1, [pc, #188]	; (80010e8 <NtpMesajParcala+0xc4>)
 800102c:	60f9      	str	r1, [r7, #12]
    static unsigned long secsSince1900 = 0;
    struct tm *stmU;
    time_t epoch;

    secsSince1900 = (Ntp_Message[ 40 ] << 24) | (Ntp_Message[ 41 ] << 16) | (Ntp_Message[ 42 ] <<  8) | (Ntp_Message[ 43 ]);
 800102e:	492f      	ldr	r1, [pc, #188]	; (80010ec <NtpMesajParcala+0xc8>)
 8001030:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8001034:	0608      	lsls	r0, r1, #24
 8001036:	492d      	ldr	r1, [pc, #180]	; (80010ec <NtpMesajParcala+0xc8>)
 8001038:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 800103c:	0409      	lsls	r1, r1, #16
 800103e:	4308      	orrs	r0, r1
 8001040:	492a      	ldr	r1, [pc, #168]	; (80010ec <NtpMesajParcala+0xc8>)
 8001042:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
 8001046:	0209      	lsls	r1, r1, #8
 8001048:	4301      	orrs	r1, r0
 800104a:	4828      	ldr	r0, [pc, #160]	; (80010ec <NtpMesajParcala+0xc8>)
 800104c:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
 8001050:	4301      	orrs	r1, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4926      	ldr	r1, [pc, #152]	; (80010f0 <NtpMesajParcala+0xcc>)
 8001056:	6008      	str	r0, [r1, #0]
    epoch = secsSince1900 - seventyYears;
 8001058:	4925      	ldr	r1, [pc, #148]	; (80010f0 <NtpMesajParcala+0xcc>)
 800105a:	6808      	ldr	r0, [r1, #0]
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	1a41      	subs	r1, r0, r1
 8001060:	2000      	movs	r0, #0
 8001062:	460a      	mov	r2, r1
 8001064:	4603      	mov	r3, r0
 8001066:	e9c7 2300 	strd	r2, r3, [r7]
	stmU = localtime(&epoch);
 800106a:	463b      	mov	r3, r7
 800106c:	4618      	mov	r0, r3
 800106e:	f00f f911 	bl	8010294 <localtime>
 8001072:	60b8      	str	r0, [r7, #8]
	sDate.Year = stmU->tm_year - 100;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3b64      	subs	r3, #100	; 0x64
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <NtpMesajParcala+0xd0>)
 8001080:	70da      	strb	r2, [r3, #3]
	sDate.Month = stmU->tm_mon + 1;
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <NtpMesajParcala+0xd0>)
 800108e:	705a      	strb	r2, [r3, #1]
	sDate.Date = stmU->tm_mday;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <NtpMesajParcala+0xd0>)
 8001098:	709a      	strb	r2, [r3, #2]
//	sTime.Hours = stmU->tm_hour + 3;
	sTime.Hours = stmU->tm_hour;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <NtpMesajParcala+0xd4>)
 80010a2:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = stmU->tm_min;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <NtpMesajParcala+0xd4>)
 80010ac:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = stmU->tm_sec;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <NtpMesajParcala+0xd4>)
 80010b6:	709a      	strb	r2, [r3, #2]

	/** Initialize RTC and set the Time and Date*/
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010b8:	2200      	movs	r2, #0
 80010ba:	490f      	ldr	r1, [pc, #60]	; (80010f8 <NtpMesajParcala+0xd4>)
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <NtpMesajParcala+0xd8>)
 80010be:	f003 fb75 	bl	80047ac <HAL_RTC_SetTime>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <NtpMesajParcala+0xa8>
		Error_Handler();
 80010c8:	f000 fb5c 	bl	8001784 <Error_Handler>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010cc:	2200      	movs	r2, #0
 80010ce:	4909      	ldr	r1, [pc, #36]	; (80010f4 <NtpMesajParcala+0xd0>)
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <NtpMesajParcala+0xd8>)
 80010d2:	f003 fc87 	bl	80049e4 <HAL_RTC_SetDate>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <NtpMesajParcala+0xbc>
		Error_Handler();
 80010dc:	f000 fb52 	bl	8001784 <Error_Handler>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	83aa7e80 	.word	0x83aa7e80
 80010ec:	20000a94 	.word	0x20000a94
 80010f0:	20000b80 	.word	0x20000b80
 80010f4:	20000a84 	.word	0x20000a84
 80010f8:	20000a6c 	.word	0x20000a6c
 80010fc:	20000a4c 	.word	0x20000a4c

08001100 <udpNtpcallback>:

void udpNtpcallback(void *arg,struct udp_pcb *NtpPcb,struct pbuf *NtpBuffer,const ip_addr_t *addr,u16_t port)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
	memset(Ntp_Message,0x00,NTP_MSJ_BOYUT);
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <udpNtpcallback+0x3c>)
 8001114:	f00f f9f2 	bl	80104fc <memset>
	memcpy(Ntp_Message, NtpBuffer -> payload, NtpBuffer -> tot_len);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	891b      	ldrh	r3, [r3, #8]
 8001120:	461a      	mov	r2, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <udpNtpcallback+0x3c>)
 8001124:	f00f f9c2 	bl	80104ac <memcpy>
	pbuf_free(NtpBuffer);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f006 fb8b 	bl	8007844 <pbuf_free>

	NtpMesajParcala();
 800112e:	f7ff ff79 	bl	8001024 <NtpMesajParcala>

}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000a94 	.word	0x20000a94

08001140 <UdpNtpVeriPaketiGonder>:


void UdpNtpVeriPaketiGonder(char arr[],uint8_t boyut,uint16_t port)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
 800114c:	4613      	mov	r3, r2
 800114e:	803b      	strh	r3, [r7, #0]
	  NtpBuffer = pbuf_alloc(PBUF_TRANSPORT,boyut, PBUF_POOL);
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001158:	4619      	mov	r1, r3
 800115a:	2036      	movs	r0, #54	; 0x36
 800115c:	f006 f88e 	bl	800727c <pbuf_alloc>
 8001160:	4603      	mov	r3, r0
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <UdpNtpVeriPaketiGonder+0x64>)
 8001164:	6013      	str	r3, [r2, #0]
	  /* allocate pbuf from pool*/
	 if(NtpBuffer != NULL){
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <UdpNtpVeriPaketiGonder+0x64>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d011      	beq.n	8001192 <UdpNtpVeriPaketiGonder+0x52>
		/* copy data to pbuf */
		pbuf_take(NtpBuffer,arr,boyut);
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <UdpNtpVeriPaketiGonder+0x64>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	b292      	uxth	r2, r2
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fdcf 	bl	8007d1c <pbuf_take>
		/* send udp data */
//		udp_send(NtpPcb,NtpBuffer);
		udp_sendto(NtpPcb, NtpBuffer, &NtpPcb->remote_ip, port);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <UdpNtpVeriPaketiGonder+0x68>)
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <UdpNtpVeriPaketiGonder+0x64>)
 8001184:	6819      	ldr	r1, [r3, #0]
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <UdpNtpVeriPaketiGonder+0x68>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1d1a      	adds	r2, r3, #4
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	f00c faf1 	bl	800d774 <udp_sendto>
	 }
		/* free pbuf */
		pbuf_free(NtpBuffer);
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <UdpNtpVeriPaketiGonder+0x64>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f006 fb54 	bl	8007844 <pbuf_free>
//		NtpBuffer = NULL;
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000a8c 	.word	0x20000a8c
 80011a8:	20000a88 	.word	0x20000a88

080011ac <NtpIstekGonder>:


void NtpIstekGonder(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    Ntp_Message[0] = 0x1B;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <NtpIstekGonder+0x18>)
 80011b2:	221b      	movs	r2, #27
 80011b4:	701a      	strb	r2, [r3, #0]
    UdpNtpVeriPaketiGonder(Ntp_Message,NTP_MSJ_BOYUT,NTP_PORT);
 80011b6:	227b      	movs	r2, #123	; 0x7b
 80011b8:	2130      	movs	r1, #48	; 0x30
 80011ba:	4802      	ldr	r0, [pc, #8]	; (80011c4 <NtpIstekGonder+0x18>)
 80011bc:	f7ff ffc0 	bl	8001140 <UdpNtpVeriPaketiGonder>
//	pbuf_free(NtpBuffer);
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000a94 	.word	0x20000a94

080011c8 <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80011c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011cc:	b08a      	sub	sp, #40	; 0x28
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	6178      	str	r0, [r7, #20]
	static RTC_DateTypeDef sDate;
	static char message[50];
	static size_t size;

	// Get current time and date
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80011d2:	2200      	movs	r2, #0
 80011d4:	496c      	ldr	r1, [pc, #432]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f003 fba6 	bl	8004928 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80011dc:	2200      	movs	r2, #0
 80011de:	496b      	ldr	r1, [pc, #428]	; (800138c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>)
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f003 fca7 	bl	8004b34 <HAL_RTC_GetDate>
	currTime.tm_year = sDate.Year + 100;
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>)
 80011e8:	78db      	ldrb	r3, [r3, #3]
 80011ea:	3364      	adds	r3, #100	; 0x64
 80011ec:	4a68      	ldr	r2, [pc, #416]	; (8001390 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c8>)
 80011ee:	6153      	str	r3, [r2, #20]
	currTime.tm_mday = sDate.Date;
 80011f0:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>)
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b66      	ldr	r3, [pc, #408]	; (8001390 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c8>)
 80011f8:	60da      	str	r2, [r3, #12]
	currTime.tm_mon =  sDate.Month - 1;
 80011fa:	4b64      	ldr	r3, [pc, #400]	; (800138c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>)
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a63      	ldr	r2, [pc, #396]	; (8001390 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c8>)
 8001202:	6113      	str	r3, [r2, #16]
	currTime.tm_hour = sTime.Hours;
 8001204:	4b60      	ldr	r3, [pc, #384]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b61      	ldr	r3, [pc, #388]	; (8001390 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c8>)
 800120c:	609a      	str	r2, [r3, #8]
	currTime.tm_min = sTime.Minutes;
 800120e:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	461a      	mov	r2, r3
 8001214:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c8>)
 8001216:	605a      	str	r2, [r3, #4]
	currTime.tm_sec = sTime.Seconds;
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	461a      	mov	r2, r3
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c8>)
 8001220:	601a      	str	r2, [r3, #0]
	uint16_t mseconds = (sTime.SubSeconds * 1000) / (sTime.SecondFraction + 1);
 8001222:	4b59      	ldr	r3, [pc, #356]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122a:	fb03 f202 	mul.w	r2, r3, r2
 800122e:	4b56      	ldr	r3, [pc, #344]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	3301      	adds	r3, #1
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
 8001238:	83fb      	strh	r3, [r7, #30]
	timestamp = (mktime(&currTime) * 1000 + mseconds);
 800123a:	4855      	ldr	r0, [pc, #340]	; (8001390 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c8>)
 800123c:	f00f fa3e 	bl	80106bc <mktime>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0a00 	mov.w	sl, #0
 8001248:	f04f 0b00 	mov.w	fp, #0
 800124c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001250:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001254:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001258:	4652      	mov	r2, sl
 800125a:	465b      	mov	r3, fp
 800125c:	1a14      	subs	r4, r2, r0
 800125e:	eb63 0501 	sbc.w	r5, r3, r1
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	00ab      	lsls	r3, r5, #2
 800126c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001270:	00a2      	lsls	r2, r4, #2
 8001272:	4614      	mov	r4, r2
 8001274:	461d      	mov	r5, r3
 8001276:	eb14 0800 	adds.w	r8, r4, r0
 800127a:	eb45 0901 	adc.w	r9, r5, r1
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800128a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800128e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001292:	4690      	mov	r8, r2
 8001294:	4699      	mov	r9, r3
 8001296:	4642      	mov	r2, r8
 8001298:	464b      	mov	r3, r9
 800129a:	8bf9      	ldrh	r1, [r7, #30]
 800129c:	2000      	movs	r0, #0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80012a6:	4621      	mov	r1, r4
 80012a8:	1851      	adds	r1, r2, r1
 80012aa:	6039      	str	r1, [r7, #0]
 80012ac:	4629      	mov	r1, r5
 80012ae:	eb43 0101 	adc.w	r1, r3, r1
 80012b2:	6079      	str	r1, [r7, #4]
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_RTCEx_WakeUpTimerEventCallback+0x1cc>)
 80012b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012ba:	e9c3 1200 	strd	r1, r2, [r3]
	longtimestamp = timestamp;
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_RTCEx_WakeUpTimerEventCallback+0x1cc>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	4934      	ldr	r1, [pc, #208]	; (8001398 <HAL_RTCEx_WakeUpTimerEventCallback+0x1d0>)
 80012c6:	e9c1 2300 	strd	r2, r3, [r1]
	__NOP();
 80012ca:	bf00      	nop
//		MsecArr[MsecArrCntr] = mseconds;
//		MsecArrCntr++;
//	}

	// Send time and date over uart
	size = sprintf(message, "Date: %2.2u-%2.2u-%4.4u\n\r", sDate.Date, sDate.Month, sDate.Year + YearStart);
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>)
 80012ce:	789b      	ldrb	r3, [r3, #2]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>)
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	4618      	mov	r0, r3
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>)
 80012da:	78db      	ldrb	r3, [r3, #3]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_RTCEx_WakeUpTimerEventCallback+0x1d4>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	492d      	ldr	r1, [pc, #180]	; (80013a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x1d8>)
 80012ec:	482d      	ldr	r0, [pc, #180]	; (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1dc>)
 80012ee:	f00f fbad 	bl	8010a4c <sprintf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e0>)
 80012f8:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(UartHandle, (uint8_t*)message, size, 50);
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	2332      	movs	r3, #50	; 0x32
 8001302:	4928      	ldr	r1, [pc, #160]	; (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1dc>)
 8001304:	4829      	ldr	r0, [pc, #164]	; (80013ac <HAL_RTCEx_WakeUpTimerEventCallback+0x1e4>)
 8001306:	f003 fe87 	bl	8005018 <HAL_UART_Transmit>
	size = sprintf(message, "Time: %2.2u:%2.2u:%2.2u:%3.3u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds, mseconds);
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	4618      	mov	r0, r3
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c0>)
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	461a      	mov	r2, r3
 800131c:	8bfb      	ldrh	r3, [r7, #30]
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	4922      	ldr	r1, [pc, #136]	; (80013b0 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e8>)
 8001328:	481e      	ldr	r0, [pc, #120]	; (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1dc>)
 800132a:	f00f fb8f 	bl	8010a4c <sprintf>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e0>)
 8001334:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(UartHandle, (uint8_t*)message, size, 50);
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29a      	uxth	r2, r3
 800133c:	2332      	movs	r3, #50	; 0x32
 800133e:	4919      	ldr	r1, [pc, #100]	; (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1dc>)
 8001340:	481a      	ldr	r0, [pc, #104]	; (80013ac <HAL_RTCEx_WakeUpTimerEventCallback+0x1e4>)
 8001342:	f003 fe69 	bl	8005018 <HAL_UART_Transmit>
	size = sprintf(message, "%lld\n\r",longtimestamp);
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_RTCEx_WakeUpTimerEventCallback+0x1d0>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	4919      	ldr	r1, [pc, #100]	; (80013b4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1ec>)
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1dc>)
 8001350:	f00f fb7c 	bl	8010a4c <sprintf>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e0>)
 800135a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(UartHandle, (uint8_t*)message, size, 50);
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b29a      	uxth	r2, r3
 8001362:	2332      	movs	r3, #50	; 0x32
 8001364:	490f      	ldr	r1, [pc, #60]	; (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1dc>)
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <HAL_RTCEx_WakeUpTimerEventCallback+0x1e4>)
 8001368:	f003 fe56 	bl	8005018 <HAL_UART_Transmit>

	UdpNtpVeriPaketiGonder(message, size, (uint16_t)5667);
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f241 6223 	movw	r2, #5667	; 0x1623
 8001376:	4619      	mov	r1, r3
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1dc>)
 800137a:	f7ff fee1 	bl	8001140 <UdpNtpVeriPaketiGonder>

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001388:	20000b84 	.word	0x20000b84
 800138c:	20000b9c 	.word	0x20000b9c
 8001390:	20000b50 	.word	0x20000b50
 8001394:	20000b48 	.word	0x20000b48
 8001398:	20000b78 	.word	0x20000b78
 800139c:	20000000 	.word	0x20000000
 80013a0:	08018640 	.word	0x08018640
 80013a4:	20000ba0 	.word	0x20000ba0
 80013a8:	20000bd4 	.word	0x20000bd4
 80013ac:	20000ac4 	.word	0x20000ac4
 80013b0:	0801865c 	.word	0x0801865c
 80013b4:	0801867c 	.word	0x0801867c

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013bc:	f000 fbe9 	bl	8001b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c0:	f000 f818 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c4:	f000 f924 	bl	8001610 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80013c8:	f000 f8f2 	bl	80015b0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80013cc:	f000 f888 	bl	80014e0 <MX_RTC_Init>
  MX_LWIP_Init();
 80013d0:	f004 fab4 	bl	800593c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
//  RetargetInit(&huart3);

  // Disable Wakeup Timer and configure it
  HAL_RTCEx_DeactivateWakeUpTimer(RtcHandle);
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <main+0x38>)
 80013d6:	f003 fd55 	bl	8004e84 <HAL_RTCEx_DeactivateWakeUpTimer>
//  sTime.Hours = 8;
//  sTime.Minutes = 57;
//  HAL_RTC_SetTime(RtcHandle, &sTime, RTC_FORMAT_BIN);

  // Start Wakeup timer with configuration (32768Hz / 16 = 2048) -> Counter = 2048
  HAL_RTCEx_SetWakeUpTimer_IT(RtcHandle, 2048-1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80013da:	2200      	movs	r2, #0
 80013dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <main+0x38>)
 80013e2:	f003 fc87 	bl	8004cf4 <HAL_RTCEx_SetWakeUpTimer_IT>

//  // Start Wakeup timer with configuration (32768Hz / 2 = 16384) -> Counter = 16384
//  HAL_RTCEx_SetWakeUpTimer_IT(RtcHandle, 9-1, RTC_WAKEUPCLOCK_RTCCLK_DIV2);


  UdpNTP_Konf();
 80013e6:	f7ff fddb 	bl	8000fa0 <UdpNTP_Konf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MX_LWIP_Process();
 80013ea:	f004 fbd9 	bl	8005ba0 <MX_LWIP_Process>
 80013ee:	e7fc      	b.n	80013ea <main+0x32>
 80013f0:	20000a4c 	.word	0x20000a4c

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00f f87a 	bl	80104fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001418:	f002 f81c 	bl	8003454 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <SystemClock_Config+0xe4>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <SystemClock_Config+0xe4>)
 8001422:	f023 0318 	bic.w	r3, r3, #24
 8001426:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <SystemClock_Config+0xe4>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <SystemClock_Config+0xe4>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <SystemClock_Config+0xe4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <SystemClock_Config+0xe8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <SystemClock_Config+0xe8>)
 8001446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <SystemClock_Config+0xe8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001458:	2305      	movs	r3, #5
 800145a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800145c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001462:	2301      	movs	r3, #1
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001466:	2302      	movs	r3, #2
 8001468:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001470:	2304      	movs	r3, #4
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001474:	23d8      	movs	r3, #216	; 0xd8
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800147c:	2309      	movs	r3, #9
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f845 	bl	8003514 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001490:	f000 f978 	bl	8001784 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001494:	f001 ffee 	bl	8003474 <HAL_PWREx_EnableOverDrive>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800149e:	f000 f971 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a2:	230f      	movs	r3, #15
 80014a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a6:	2302      	movs	r3, #2
 80014a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2107      	movs	r1, #7
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 facb 	bl	8003a5c <HAL_RCC_ClockConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80014cc:	f000 f95a 	bl	8001784 <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3750      	adds	r7, #80	; 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000

080014e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_RTC_Init+0xc8>)
 80014fe:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <MX_RTC_Init+0xcc>)
 8001500:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_RTC_Init+0xc8>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <MX_RTC_Init+0xc8>)
 800150a:	221f      	movs	r2, #31
 800150c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_RTC_Init+0xc8>)
 8001510:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001514:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <MX_RTC_Init+0xc8>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_RTC_Init+0xc8>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_RTC_Init+0xc8>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001528:	481f      	ldr	r0, [pc, #124]	; (80015a8 <MX_RTC_Init+0xc8>)
 800152a:	f003 f8ad 	bl	8004688 <HAL_RTC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001534:	f000 f926 	bl	8001784 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001538:	2300      	movs	r3, #0
 800153a:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800153c:	2300      	movs	r3, #0
 800153e:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001540:	2300      	movs	r3, #0
 8001542:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_RTC_Init+0xc8>)
 8001556:	f003 f929 	bl	80047ac <HAL_RTC_SetTime>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001560:	f000 f910 	bl	8001784 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001564:	2301      	movs	r3, #1
 8001566:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001568:	2301      	movs	r3, #1
 800156a:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800156c:	2301      	movs	r3, #1
 800156e:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001570:	2300      	movs	r3, #0
 8001572:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2201      	movs	r2, #1
 8001578:	4619      	mov	r1, r3
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <MX_RTC_Init+0xc8>)
 800157c:	f003 fa32 	bl	80049e4 <HAL_RTC_SetDate>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001586:	f000 f8fd 	bl	8001784 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_RTC_Init+0xc8>)
 8001590:	f003 fbb0 	bl	8004cf4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 800159a:	f000 f8f3 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000a4c 	.word	0x20000a4c
 80015ac:	40002800 	.word	0x40002800

080015b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <MX_USART3_UART_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015f4:	f003 fcc2 	bl	8004f7c <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 f8c1 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000ac4 	.word	0x20000ac4
 800160c:	40004800 	.word	0x40004800

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <MX_GPIO_Init+0x150>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <MX_GPIO_Init+0x150>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <MX_GPIO_Init+0x150>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163e:	4b48      	ldr	r3, [pc, #288]	; (8001760 <MX_GPIO_Init+0x150>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a47      	ldr	r2, [pc, #284]	; (8001760 <MX_GPIO_Init+0x150>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b45      	ldr	r3, [pc, #276]	; (8001760 <MX_GPIO_Init+0x150>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <MX_GPIO_Init+0x150>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a41      	ldr	r2, [pc, #260]	; (8001760 <MX_GPIO_Init+0x150>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <MX_GPIO_Init+0x150>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <MX_GPIO_Init+0x150>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a3b      	ldr	r2, [pc, #236]	; (8001760 <MX_GPIO_Init+0x150>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <MX_GPIO_Init+0x150>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <MX_GPIO_Init+0x150>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a35      	ldr	r2, [pc, #212]	; (8001760 <MX_GPIO_Init+0x150>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <MX_GPIO_Init+0x150>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <MX_GPIO_Init+0x150>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <MX_GPIO_Init+0x150>)
 80016a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <MX_GPIO_Init+0x150>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80016bc:	4829      	ldr	r0, [pc, #164]	; (8001764 <MX_GPIO_Init+0x154>)
 80016be:	f001 fe97 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2140      	movs	r1, #64	; 0x40
 80016c6:	4828      	ldr	r0, [pc, #160]	; (8001768 <MX_GPIO_Init+0x158>)
 80016c8:	f001 fe92 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	481f      	ldr	r0, [pc, #124]	; (8001764 <MX_GPIO_Init+0x154>)
 80016e6:	f001 fcd7 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016ea:	2340      	movs	r3, #64	; 0x40
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4819      	ldr	r0, [pc, #100]	; (8001768 <MX_GPIO_Init+0x158>)
 8001702:	f001 fcc9 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <MX_GPIO_Init+0x158>)
 800171a:	f001 fcbd 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 800171e:	2330      	movs	r3, #48	; 0x30
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001722:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001728:	2302      	movs	r3, #2
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_GPIO_Init+0x154>)
 8001734:	f001 fcb0 	bl	8003098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	200a      	movs	r0, #10
 800173e:	f000 fb84 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001742:	200a      	movs	r0, #10
 8001744:	f000 fb9d 	bl	8001e82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2017      	movs	r0, #23
 800174e:	f000 fb7c 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001752:	2017      	movs	r0, #23
 8001754:	f000 fb95 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8001758:	bf00      	nop
 800175a:	3730      	adds	r7, #48	; 0x30
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400
 8001768:	40021800 	.word	0x40021800

0800176c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  __NOP();
 8001776:	bf00      	nop

  NtpIstekGonder();
 8001778:	f7ff fd18 	bl	80011ac <NtpIstekGonder>
//  LocalNtp_Request();

}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x44>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x44>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x44>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x44>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0a4      	sub	sp, #144	; 0x90
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2284      	movs	r2, #132	; 0x84
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00e fe87 	bl	80104fc <memset>
  if(hrtc->Instance==RTC)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <HAL_RTC_MspInit+0x64>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d11c      	bne.n	8001832 <HAL_RTC_MspInit+0x5a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017f8:	2320      	movs	r3, #32
 80017fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fb4e 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001812:	f7ff ffb7 	bl	8001784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RTC_MspInit+0x68>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RTC_MspInit+0x68>)
 800181c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2003      	movs	r0, #3
 8001828:	f000 fb0f 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 fb28 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3790      	adds	r7, #144	; 0x90
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40002800 	.word	0x40002800
 8001840:	40023800 	.word	0x40023800

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0aa      	sub	sp, #168	; 0xa8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2284      	movs	r2, #132	; 0x84
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f00e fe49 	bl	80104fc <memset>
  if(huart->Instance==USART3)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_UART_MspInit+0xb4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d13c      	bne.n	80018ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001878:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800187a:	2300      	movs	r3, #0
 800187c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fb10 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800188e:	f7ff ff79 	bl	8001784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_UART_MspInit+0xb8>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_UART_MspInit+0xb8>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_UART_MspInit+0xb8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018dc:	2307      	movs	r3, #7
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_UART_MspInit+0xbc>)
 80018ea:	f001 fbd5 	bl	8003098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	37a8      	adds	r7, #168	; 0xa8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004800 	.word	0x40004800
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020c00 	.word	0x40020c00

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f95c 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <RTC_WKUP_IRQHandler+0x10>)
 800195e:	f003 fae9 	bl	8004f34 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000a4c 	.word	0x20000a4c

0800196c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON2_Pin);
 8001970:	2010      	movs	r0, #16
 8001972:	f001 fd57 	bl	8003424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON1_Pin);
 800197e:	2020      	movs	r0, #32
 8001980:	f001 fd50 	bl	8003424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_kill>:

int _kill(int pid, int sig)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <_kill+0x20>)
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
	return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	200073e4 	.word	0x200073e4

080019bc <_exit>:

void _exit (int status)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffe5 	bl	8001998 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ce:	e7fe      	b.n	80019ce <_exit+0x12>

080019d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e00a      	b.n	80019f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019e2:	f3af 8000 	nop.w
 80019e6:	4601      	mov	r1, r0
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	b2ca      	uxtb	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf0      	blt.n	80019e2 <_read+0x12>
	}

return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e009      	b.n	8001a30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf1      	blt.n	8001a1c <_write+0x12>
	}
	return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_close>:

int _close(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	return -1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_isatty>:

int _isatty(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	return 1;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d205      	bcs.n	8001ae8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <_sbrk+0x6c>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20050000 	.word	0x20050000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	20000bdc 	.word	0x20000bdc
 8001b14:	20007448 	.word	0x20007448
 8001b18:	200073e4 	.word	0x200073e4

08001b1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b46:	490e      	ldr	r1, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b5c:	4c0b      	ldr	r4, [pc, #44]	; (8001b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6a:	f7ff ffd7 	bl	8001b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f00e fb6d 	bl	801024c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff fc21 	bl	80013b8 <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	20000a2c 	.word	0x20000a2c
  ldr r2, =_sidata
 8001b84:	0801b648 	.word	0x0801b648
  ldr r2, =_sbss
 8001b88:	20000a30 	.word	0x20000a30
  ldr r4, =_ebss
 8001b8c:	20007448 	.word	0x20007448

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>

08001b92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b96:	2003      	movs	r0, #3
 8001b98:	f000 f94c 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9c:	200f      	movs	r0, #15
 8001b9e:	f000 f805 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba2:	f7ff fdf5 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f967 	bl	8001e9e <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f92f 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000010 	.word	0x20000010
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000010 	.word	0x20000010
 8001c30:	20000be0 	.word	0x20000be0

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000be0 	.word	0x20000be0

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000010 	.word	0x20000010

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	05fa0000 	.word	0x05fa0000

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001ec8:	4ba0      	ldr	r3, [pc, #640]	; (800214c <HAL_ETH_Init+0x294>)
 8001eca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e180      	b.n	80021e0 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f003 fe60 	bl	8005bb8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef8:	4b95      	ldr	r3, [pc, #596]	; (8002150 <HAL_ETH_Init+0x298>)
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	4a94      	ldr	r2, [pc, #592]	; (8002150 <HAL_ETH_Init+0x298>)
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	6453      	str	r3, [r2, #68]	; 0x44
 8001f04:	4b92      	ldr	r3, [pc, #584]	; (8002150 <HAL_ETH_Init+0x298>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f10:	4b90      	ldr	r3, [pc, #576]	; (8002154 <HAL_ETH_Init+0x29c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a8f      	ldr	r2, [pc, #572]	; (8002154 <HAL_ETH_Init+0x29c>)
 8001f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f1a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f1c:	4b8d      	ldr	r3, [pc, #564]	; (8002154 <HAL_ETH_Init+0x29c>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	498b      	ldr	r1, [pc, #556]	; (8002154 <HAL_ETH_Init+0x29c>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f40:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f42:	f7ff fe77 	bl	8001c34 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f48:	e011      	b.n	8001f6e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f4a:	f7ff fe73 	bl	8001c34 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f58:	d909      	bls.n	8001f6e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e138      	b.n	80021e0 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e4      	bne.n	8001f4a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f023 031c 	bic.w	r3, r3, #28
 8001f8e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f90:	f001 ff56 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8001f94:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4a6f      	ldr	r2, [pc, #444]	; (8002158 <HAL_ETH_Init+0x2a0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d908      	bls.n	8001fb0 <HAL_ETH_Init+0xf8>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4a6e      	ldr	r2, [pc, #440]	; (800215c <HAL_ETH_Init+0x2a4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d804      	bhi.n	8001fb0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e027      	b.n	8002000 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	4a6a      	ldr	r2, [pc, #424]	; (800215c <HAL_ETH_Init+0x2a4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d908      	bls.n	8001fca <HAL_ETH_Init+0x112>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	4a64      	ldr	r2, [pc, #400]	; (800214c <HAL_ETH_Init+0x294>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d204      	bcs.n	8001fca <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f043 030c 	orr.w	r3, r3, #12
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e01a      	b.n	8002000 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4a5f      	ldr	r2, [pc, #380]	; (800214c <HAL_ETH_Init+0x294>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d303      	bcc.n	8001fda <HAL_ETH_Init+0x122>
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4a62      	ldr	r2, [pc, #392]	; (8002160 <HAL_ETH_Init+0x2a8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d911      	bls.n	8001ffe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4a60      	ldr	r2, [pc, #384]	; (8002160 <HAL_ETH_Init+0x2a8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_ETH_Init+0x13c>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4a5f      	ldr	r2, [pc, #380]	; (8002164 <HAL_ETH_Init+0x2ac>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d804      	bhi.n	8001ff4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e005      	b.n	8002000 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	e000      	b.n	8002000 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ffe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002008:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800200c:	2100      	movs	r1, #0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fb94 	bl	800273c <HAL_ETH_WritePHYRegister>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800201e:	6939      	ldr	r1, [r7, #16]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fd49 	bl	8002ab8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0d6      	b.n	80021e0 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002032:	20ff      	movs	r0, #255	; 0xff
 8002034:	f7ff fe0a 	bl	8001c4c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a4 	beq.w	800218a <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002042:	f7ff fdf7 	bl	8001c34 <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	461a      	mov	r2, r3
 800204e:	2101      	movs	r1, #1
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fb0b 	bl	800266c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002056:	f7ff fded 	bl	8001c34 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d90f      	bls.n	8002088 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800206c:	6939      	ldr	r1, [r7, #16]
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fd22 	bl	8002ab8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0ab      	b.n	80021e0 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0da      	beq.n	8002048 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002092:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002096:	2100      	movs	r1, #0
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fb4f 	bl	800273c <HAL_ETH_WritePHYRegister>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fd04 	bl	8002ab8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020b8:	2301      	movs	r3, #1
 80020ba:	e091      	b.n	80021e0 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80020bc:	f7ff fdba 	bl	8001c34 <HAL_GetTick>
 80020c0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	461a      	mov	r2, r3
 80020c8:	2101      	movs	r1, #1
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 face 	bl	800266c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80020d0:	f7ff fdb0 	bl	8001c34 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d90f      	bls.n	8002102 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fce5 	bl	8002ab8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e06e      	b.n	80021e0 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0da      	beq.n	80020c2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	461a      	mov	r2, r3
 8002112:	2110      	movs	r1, #16
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 faa9 	bl	800266c <HAL_ETH_ReadPHYRegister>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fcc6 	bl	8002ab8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002134:	2301      	movs	r3, #1
 8002136:	e053      	b.n	80021e0 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	e010      	b.n	800216e <HAL_ETH_Init+0x2b6>
 800214c:	03938700 	.word	0x03938700
 8002150:	40023800 	.word	0x40023800
 8002154:	40013800 	.word	0x40013800
 8002158:	01312cff 	.word	0x01312cff
 800215c:	02160ebf 	.word	0x02160ebf
 8002160:	05f5e0ff 	.word	0x05f5e0ff
 8002164:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	e026      	b.n	80021ce <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e021      	b.n	80021ce <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800219a:	4313      	orrs	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	2100      	movs	r1, #0
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 faca 	bl	800273c <HAL_ETH_WritePHYRegister>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021b2:	6939      	ldr	r1, [r7, #16]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fc7f 	bl	8002ab8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00c      	b.n	80021e0 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80021c6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80021ca:	f7ff fd3f 	bl	8001c4c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80021ce:	6939      	ldr	r1, [r7, #16]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fc71 	bl	8002ab8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_ETH_DMATxDescListInit+0x20>
 8002204:	2302      	movs	r3, #2
 8002206:	e051      	b.n	80022ac <HAL_ETH_DMATxDescListInit+0xc4>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e030      	b.n	8002286 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	4413      	add	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002234:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	461a      	mov	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	3b01      	subs	r3, #1
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d208      	bcs.n	800227a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	015b      	lsls	r3, r3, #5
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	461a      	mov	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	e002      	b.n	8002280 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3ca      	bcc.n	8002224 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002298:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_ETH_DMARxDescListInit+0x20>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e055      	b.n	8002384 <HAL_ETH_DMARxDescListInit+0xcc>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e034      	b.n	800235e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	4413      	add	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002304:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800230c:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	461a      	mov	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d208      	bcs.n	8002352 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	015b      	lsls	r3, r3, #5
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	461a      	mov	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	e002      	b.n	8002358 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3301      	adds	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3c6      	bcc.n	80022f4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002370:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_ETH_TransmitFrame+0x24>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e0cc      	b.n	800254e <HAL_ETH_TransmitFrame+0x1be>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80023da:	2301      	movs	r3, #1
 80023dc:	e0b7      	b.n	800254e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da09      	bge.n	80023fc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2212      	movs	r2, #18
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0a8      	b.n	800254e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002402:	4293      	cmp	r3, r2
 8002404:	d915      	bls.n	8002432 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	4a54      	ldr	r2, [pc, #336]	; (800255c <HAL_ETH_TransmitFrame+0x1cc>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4b51      	ldr	r3, [pc, #324]	; (800255c <HAL_ETH_TransmitFrame+0x1cc>)
 8002416:	fba3 1302 	umull	r1, r3, r3, r2
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e001      	b.n	8002436 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11c      	bne.n	8002476 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800244a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002456:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002466:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
 8002474:	e04b      	b.n	800250e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e044      	b.n	8002506 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800248a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024a0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80024aa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d116      	bne.n	80024e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4a25      	ldr	r2, [pc, #148]	; (8002560 <HAL_ETH_TransmitFrame+0x1d0>)
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80024d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024e2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	3301      	adds	r3, #1
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	429a      	cmp	r2, r3
 800250c:	d3b6      	bcc.n	800247c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002528:	461a      	mov	r2, r3
 800252a:	2304      	movs	r3, #4
 800252c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002536:	461a      	mov	r2, r3
 8002538:	2300      	movs	r3, #0
 800253a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	ac02b00b 	.word	0xac02b00b
 8002560:	fffffa0c 	.word	0xfffffa0c

08002564 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ETH_GetReceivedFrame+0x1a>
 800257a:	2302      	movs	r3, #2
 800257c:	e070      	b.n	8002660 <HAL_ETH_GetReceivedFrame+0xfc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db5a      	blt.n	800264e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d030      	beq.n	8002608 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d103      	bne.n	80025c0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0c1b      	lsrs	r3, r3, #16
 80025d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025d4:	3b04      	subs	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e02b      	b.n	8002660 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	d010      	beq.n	8002638 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	461a      	mov	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
 8002636:	e00a      	b.n	800264e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	460b      	mov	r3, r1
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b82      	cmp	r3, #130	; 0x82
 800268c:	d101      	bne.n	8002692 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	e050      	b.n	8002734 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2282      	movs	r2, #130	; 0x82
 8002696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 031c 	and.w	r3, r3, #28
 80026a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8a1b      	ldrh	r3, [r3, #16]
 80026ae:	02db      	lsls	r3, r3, #11
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026b8:	897b      	ldrh	r3, [r7, #10]
 80026ba:	019b      	lsls	r3, r3, #6
 80026bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 0302 	bic.w	r3, r3, #2
 80026cc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026de:	f7ff faa9 	bl	8001c34 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026e4:	e015      	b.n	8002712 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026e6:	f7ff faa5 	bl	8001c34 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d309      	bcc.n	800270a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e014      	b.n	8002734 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e4      	bne.n	80026e6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	460b      	mov	r3, r1
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b42      	cmp	r3, #66	; 0x42
 800275c:	d101      	bne.n	8002762 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	e04e      	b.n	8002800 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2242      	movs	r2, #66	; 0x42
 8002766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 031c 	and.w	r3, r3, #28
 8002778:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8a1b      	ldrh	r3, [r3, #16]
 800277e:	02db      	lsls	r3, r3, #11
 8002780:	b29b      	uxth	r3, r3
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002788:	897b      	ldrh	r3, [r7, #10]
 800278a:	019b      	lsls	r3, r3, #6
 800278c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80027b8:	f7ff fa3c 	bl	8001c34 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027be:	e015      	b.n	80027ec <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80027c0:	f7ff fa38 	bl	8001c34 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ce:	d309      	bcc.n	80027e4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e00d      	b.n	8002800 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e4      	bne.n	80027c0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ETH_Start+0x16>
 800281a:	2302      	movs	r3, #2
 800281c:	e01f      	b.n	800285e <HAL_ETH_Start+0x56>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fb40 	bl	8002eb4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fb77 	bl	8002f28 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fc06 	bl	800304c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fbab 	bl	8002f9c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fbd4 	bl	8002ff4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_ETH_Stop+0x16>
 8002878:	2302      	movs	r3, #2
 800287a:	e01f      	b.n	80028bc <HAL_ETH_Stop+0x56>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fb9b 	bl	8002fc8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fbc4 	bl	8003020 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fb62 	bl	8002f62 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fbd4 	bl	800304c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fb22 	bl	8002eee <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_ETH_ConfigMAC+0x1c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0e4      	b.n	8002aaa <HAL_ETH_ConfigMAC+0x1e6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80b1 	beq.w	8002a5a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002910:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002916:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800291c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002922:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002928:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800292e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002934:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800293a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002940:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002946:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800294c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002952:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800296a:	2001      	movs	r0, #1
 800296c:	f7ff f96e 	bl	8001c4c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002980:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002986:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800298c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002992:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002998:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800299e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80029aa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029ac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff f948 	bl	8001c4c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029cc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029d6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029f4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80029fa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002a00:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002a06:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002a0c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7ff f911 	bl	8001c4c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7ff f8fe 	bl	8001c4c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	61da      	str	r2, [r3, #28]
 8002a58:	e01e      	b.n	8002a98 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a68:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f7ff f8de 	bl	8001c4c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	ff20810f 	.word	0xff20810f

08002ab8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0b0      	sub	sp, #192	; 0xc0
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002adc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b02:	663b      	str	r3, [r7, #96]	; 0x60
 8002b04:	e001      	b.n	8002b0a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b14:	2300      	movs	r3, #0
 8002b16:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b24:	2340      	movs	r3, #64	; 0x40
 8002b26:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002b8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b90:	4ba9      	ldr	r3, [pc, #676]	; (8002e38 <ETH_MACDMAConfig+0x380>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b9c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002ba0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002ba4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002baa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002bae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002bb2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002bb8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002bbc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002bc0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002bc4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002bc8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002bcc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002be0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7ff f82d 	bl	8001c4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bfa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bfc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c00:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002c02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002c04:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002c0a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002c10:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c16:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c1c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c20:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c28:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c2a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7ff f808 	bl	8001c4c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c44:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c4e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c58:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002c64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c68:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c76:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c7c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c82:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c88:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c8e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c94:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ca8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7fe ffc9 	bl	8001c4c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cc2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cc4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002cc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7fe ffb4 	bl	8001c4c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002cfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d00:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d12:	2304      	movs	r3, #4
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002d48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d4c:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <ETH_MACDMAConfig+0x384>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d54:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d56:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d58:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d5a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d5c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d5e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d60:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d62:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d64:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d66:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d68:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d6c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d70:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d74:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d8e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7fe ff54 	bl	8001c4c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002db2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002db8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002dbc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dc0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002dc4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002dca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002dce:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ddc:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fe ff2d 	bl	8001c4c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e00:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10b      	bne.n	8002e22 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e12:	69d9      	ldr	r1, [r3, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <ETH_MACDMAConfig+0x388>)
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e20:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	461a      	mov	r2, r3
 8002e28:	2100      	movs	r1, #0
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f80a 	bl	8002e44 <ETH_MACAddressConfig>
}
 8002e30:	bf00      	nop
 8002e32:	37c0      	adds	r7, #192	; 0xc0
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	ff20810f 	.word	0xff20810f
 8002e3c:	f8de3f23 	.word	0xf8de3f23
 8002e40:	00010040 	.word	0x00010040

08002e44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3305      	adds	r3, #5
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	3204      	adds	r2, #4
 8002e5c:	7812      	ldrb	r2, [r2, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <ETH_MACAddressConfig+0x68>)
 8002e66:	4413      	add	r3, r2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3303      	adds	r3, #3
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	061a      	lsls	r2, r3, #24
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3301      	adds	r3, #1
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <ETH_MACAddressConfig+0x6c>)
 8002e96:	4413      	add	r3, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6013      	str	r3, [r2, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40028040 	.word	0x40028040
 8002eb0:	40028044 	.word	0x40028044

08002eb4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f7fe feb7 	bl	8001c4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0208 	bic.w	r2, r2, #8
 8002f08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7fe fe9a 	bl	8001c4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0204 	orr.w	r2, r2, #4
 8002f42:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7fe fe7d 	bl	8001c4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0204 	bic.w	r2, r2, #4
 8002f7c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7fe fe60 	bl	8001c4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fba:	6193      	str	r3, [r2, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fe6:	6193      	str	r3, [r2, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003012:	6193      	str	r3, [r2, #24]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	f023 0302 	bic.w	r3, r3, #2
 800303a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800303e:	6193      	str	r3, [r2, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800306e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800307c:	2001      	movs	r0, #1
 800307e:	f7fe fde5 	bl	8001c4c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800308c:	6193      	str	r3, [r2, #24]
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e175      	b.n	80033a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f040 8164 	bne.w	800339e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d005      	beq.n	80030ee <HAL_GPIO_Init+0x56>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d130      	bne.n	8003150 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003124:	2201      	movs	r2, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 0201 	and.w	r2, r3, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d017      	beq.n	800318c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d123      	bne.n	80031e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0203 	and.w	r2, r3, #3
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80be 	beq.w	800339e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_GPIO_Init+0x324>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_GPIO_Init+0x324>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b63      	ldr	r3, [pc, #396]	; (80033bc <HAL_GPIO_Init+0x324>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800323a:	4a61      	ldr	r2, [pc, #388]	; (80033c0 <HAL_GPIO_Init+0x328>)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_GPIO_Init+0x32c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d037      	beq.n	80032d6 <HAL_GPIO_Init+0x23e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_GPIO_Init+0x330>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_GPIO_Init+0x23a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a56      	ldr	r2, [pc, #344]	; (80033cc <HAL_GPIO_Init+0x334>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02b      	beq.n	80032ce <HAL_GPIO_Init+0x236>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a55      	ldr	r2, [pc, #340]	; (80033d0 <HAL_GPIO_Init+0x338>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d025      	beq.n	80032ca <HAL_GPIO_Init+0x232>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a54      	ldr	r2, [pc, #336]	; (80033d4 <HAL_GPIO_Init+0x33c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01f      	beq.n	80032c6 <HAL_GPIO_Init+0x22e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a53      	ldr	r2, [pc, #332]	; (80033d8 <HAL_GPIO_Init+0x340>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d019      	beq.n	80032c2 <HAL_GPIO_Init+0x22a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_GPIO_Init+0x344>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <HAL_GPIO_Init+0x226>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a51      	ldr	r2, [pc, #324]	; (80033e0 <HAL_GPIO_Init+0x348>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00d      	beq.n	80032ba <HAL_GPIO_Init+0x222>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a50      	ldr	r2, [pc, #320]	; (80033e4 <HAL_GPIO_Init+0x34c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <HAL_GPIO_Init+0x21e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4f      	ldr	r2, [pc, #316]	; (80033e8 <HAL_GPIO_Init+0x350>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_GPIO_Init+0x21a>
 80032ae:	2309      	movs	r3, #9
 80032b0:	e012      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032b2:	230a      	movs	r3, #10
 80032b4:	e010      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032b6:	2308      	movs	r3, #8
 80032b8:	e00e      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00c      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032be:	2306      	movs	r3, #6
 80032c0:	e00a      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032c2:	2305      	movs	r3, #5
 80032c4:	e008      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032c6:	2304      	movs	r3, #4
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x240>
 80032d6:	2300      	movs	r3, #0
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	f002 0203 	and.w	r2, r2, #3
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032e8:	4935      	ldr	r1, [pc, #212]	; (80033c0 <HAL_GPIO_Init+0x328>)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f6:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <HAL_GPIO_Init+0x354>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_GPIO_Init+0x354>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003320:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_GPIO_Init+0x354>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003344:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_GPIO_Init+0x354>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_GPIO_Init+0x354>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_GPIO_Init+0x354>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_GPIO_Init+0x354>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003398:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_GPIO_Init+0x354>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b0f      	cmp	r3, #15
 80033a8:	f67f ae86 	bls.w	80030b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40021400 	.word	0x40021400
 80033dc:	40021800 	.word	0x40021800
 80033e0:	40021c00 	.word	0x40021c00
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40022400 	.word	0x40022400
 80033ec:	40013c00 	.word	0x40013c00

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800340c:	e003      	b.n	8003416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800343a:	4a05      	ldr	r2, [pc, #20]	; (8003450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe f992 	bl	800176c <HAL_GPIO_EXTI_Callback>
  }
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40013c00 	.word	0x40013c00

08003454 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40007000 	.word	0x40007000

08003474 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <HAL_PWREx_EnableOverDrive+0x98>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a22      	ldr	r2, [pc, #136]	; (800350c <HAL_PWREx_EnableOverDrive+0x98>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_PWREx_EnableOverDrive+0x98>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a2:	f7fe fbc7 	bl	8001c34 <HAL_GetTick>
 80034a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034a8:	e009      	b.n	80034be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034aa:	f7fe fbc3 	bl	8001c34 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b8:	d901      	bls.n	80034be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e022      	b.n	8003504 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d1ee      	bne.n	80034aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d8:	f7fe fbac 	bl	8001c34 <HAL_GetTick>
 80034dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034de:	e009      	b.n	80034f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034e0:	f7fe fba8 	bl	8001c34 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ee:	d901      	bls.n	80034f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e007      	b.n	8003504 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003500:	d1ee      	bne.n	80034e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000

08003514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800351c:	2300      	movs	r3, #0
 800351e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e291      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8087 	beq.w	8003646 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003538:	4b96      	ldr	r3, [pc, #600]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b04      	cmp	r3, #4
 8003542:	d00c      	beq.n	800355e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003544:	4b93      	ldr	r3, [pc, #588]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d112      	bne.n	8003576 <HAL_RCC_OscConfig+0x62>
 8003550:	4b90      	ldr	r3, [pc, #576]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355c:	d10b      	bne.n	8003576 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355e:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06c      	beq.n	8003644 <HAL_RCC_OscConfig+0x130>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d168      	bne.n	8003644 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e26b      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x7a>
 8003580:	4b84      	ldr	r3, [pc, #528]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a83      	ldr	r2, [pc, #524]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	e02e      	b.n	80035ec <HAL_RCC_OscConfig+0xd8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x9c>
 8003596:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7e      	ldr	r2, [pc, #504]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7b      	ldr	r2, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e01d      	b.n	80035ec <HAL_RCC_OscConfig+0xd8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0xc0>
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0xd8>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6b      	ldr	r2, [pc, #428]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe fb1e 	bl	8001c34 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe fb1a 	bl	8001c34 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e21f      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b61      	ldr	r3, [pc, #388]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0xe8>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe fb0a 	bl	8001c34 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fe fb06 	bl	8001c34 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e20b      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x110>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d069      	beq.n	8003726 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d11c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x190>
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d116      	bne.n	80036a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x17a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e1df      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	493d      	ldr	r1, [pc, #244]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	e040      	b.n	8003726 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d023      	beq.n	80036f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a38      	ldr	r2, [pc, #224]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe fabc 	bl	8001c34 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fe fab8 	bl	8001c34 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1bd      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4929      	ldr	r1, [pc, #164]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
 80036f2:	e018      	b.n	8003726 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a26      	ldr	r2, [pc, #152]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fa98 	bl	8001c34 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003708:	f7fe fa94 	bl	8001c34 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e199      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d038      	beq.n	80037a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d019      	beq.n	800376e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fe fa75 	bl	8001c34 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374e:	f7fe fa71 	bl	8001c34 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e176      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x23a>
 800376c:	e01a      	b.n	80037a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fe fa5b 	bl	8001c34 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003782:	f7fe fa57 	bl	8001c34 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d903      	bls.n	8003798 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e15c      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
 8003794:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	4b91      	ldr	r3, [pc, #580]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ee      	bne.n	8003782 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80a4 	beq.w	80038fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b8b      	ldr	r3, [pc, #556]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a87      	ldr	r2, [pc, #540]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b85      	ldr	r3, [pc, #532]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037da:	4b82      	ldr	r3, [pc, #520]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037e6:	4b7f      	ldr	r3, [pc, #508]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7e      	ldr	r2, [pc, #504]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fa1f 	bl	8001c34 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fe fa1b 	bl	8001c34 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	; 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e120      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380c:	4b75      	ldr	r3, [pc, #468]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x31a>
 8003820:	4b6f      	ldr	r3, [pc, #444]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a6e      	ldr	r2, [pc, #440]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	e02d      	b.n	800388a <HAL_RCC_OscConfig+0x376>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x33c>
 8003836:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a69      	ldr	r2, [pc, #420]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a66      	ldr	r2, [pc, #408]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	e01c      	b.n	800388a <HAL_RCC_OscConfig+0x376>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d10c      	bne.n	8003872 <HAL_RCC_OscConfig+0x35e>
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a60      	ldr	r2, [pc, #384]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a5d      	ldr	r2, [pc, #372]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	e00b      	b.n	800388a <HAL_RCC_OscConfig+0x376>
 8003872:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5a      	ldr	r2, [pc, #360]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d015      	beq.n	80038be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe f9cf 	bl	8001c34 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe f9cb 	bl	8001c34 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0ce      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ee      	beq.n	800389a <HAL_RCC_OscConfig+0x386>
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe f9b9 	bl	8001c34 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe f9b5 	bl	8001c34 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0b8      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ee      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a3b      	ldr	r2, [pc, #236]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a4 	beq.w	8003a4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d06b      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d149      	bne.n	80039ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a30      	ldr	r2, [pc, #192]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe f986 	bl	8001c34 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe f982 	bl	8001c34 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e087      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	3b01      	subs	r3, #1
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	4313      	orrs	r3, r2
 8003970:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003976:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe f956 	bl	8001c34 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe f952 	bl	8001c34 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e057      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x478>
 80039aa:	e04f      	b.n	8003a4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80039b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe f93c 	bl	8001c34 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe f938 	bl	8001c34 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e03d      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCC_OscConfig+0x4cc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4ac>
 80039de:	e035      	b.n	8003a4c <HAL_RCC_OscConfig+0x538>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <HAL_RCC_OscConfig+0x544>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d028      	beq.n	8003a48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d121      	bne.n	8003a48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d11a      	bne.n	8003a48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d111      	bne.n	8003a48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	3b01      	subs	r3, #1
 8003a32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800

08003a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0d0      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d910      	bls.n	8003aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b67      	ldr	r3, [pc, #412]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 020f 	bic.w	r2, r3, #15
 8003a8a:	4965      	ldr	r1, [pc, #404]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0b8      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003abc:	4b59      	ldr	r3, [pc, #356]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ac6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad4:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a52      	ldr	r2, [pc, #328]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ade:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae0:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	494d      	ldr	r1, [pc, #308]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d040      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d115      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e07f      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e073      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06b      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4936      	ldr	r1, [pc, #216]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fe f870 	bl	8001c34 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fe f86c 	bl	8001c34 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e053      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2d      	ldr	r3, [pc, #180]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d210      	bcs.n	8003bb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 020f 	bic.w	r2, r3, #15
 8003b96:	4922      	ldr	r1, [pc, #136]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e032      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4916      	ldr	r1, [pc, #88]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	490e      	ldr	r1, [pc, #56]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bee:	f000 f821 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	490a      	ldr	r1, [pc, #40]	; (8003c28 <HAL_RCC_ClockConfig+0x1cc>)
 8003c00:	5ccb      	ldrb	r3, [r1, r3]
 8003c02:	fa22 f303 	lsr.w	r3, r2, r3
 8003c06:	4a09      	ldr	r2, [pc, #36]	; (8003c2c <HAL_RCC_ClockConfig+0x1d0>)
 8003c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c0a:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCC_ClockConfig+0x1d4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd ffcc 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0801b064 	.word	0x0801b064
 8003c2c:	20000008 	.word	0x20000008
 8003c30:	2000000c 	.word	0x2000000c

08003c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c38:	b094      	sub	sp, #80	; 0x50
 8003c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c40:	2300      	movs	r3, #0
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c44:	2300      	movs	r3, #0
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c4c:	4b79      	ldr	r3, [pc, #484]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d00d      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x40>
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	f200 80e1 	bhi.w	8003e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x34>
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c66:	e0db      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b73      	ldr	r3, [pc, #460]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c6c:	e0db      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c6e:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c72:	e0d8      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c7e:	4b6d      	ldr	r3, [pc, #436]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	2200      	movs	r2, #0
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	f04f 0000 	mov.w	r0, #0
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb8:	0150      	lsls	r0, r2, #5
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	1a51      	subs	r1, r2, r1
 8003cc2:	6139      	str	r1, [r7, #16]
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd8:	4659      	mov	r1, fp
 8003cda:	018b      	lsls	r3, r1, #6
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	018a      	lsls	r2, r1, #6
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8003cec:	4659      	mov	r1, fp
 8003cee:	eb63 0901 	sbc.w	r9, r3, r1
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d06:	4690      	mov	r8, r2
 8003d08:	4699      	mov	r9, r3
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	eb18 0303 	adds.w	r3, r8, r3
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	462b      	mov	r3, r5
 8003d14:	eb49 0303 	adc.w	r3, r9, r3
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d26:	4629      	mov	r1, r5
 8003d28:	024b      	lsls	r3, r1, #9
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d30:	4621      	mov	r1, r4
 8003d32:	024a      	lsls	r2, r1, #9
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d44:	f7fc ffaa 	bl	8000c9c <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d50:	e058      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	464b      	mov	r3, r9
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	0159      	lsls	r1, r3, #5
 8003d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7e:	0150      	lsls	r0, r2, #5
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4641      	mov	r1, r8
 8003d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003da4:	ebb2 040a 	subs.w	r4, r2, sl
 8003da8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	00eb      	lsls	r3, r5, #3
 8003db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dba:	00e2      	lsls	r2, r4, #3
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	18e3      	adds	r3, r4, r3
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	eb45 0303 	adc.w	r3, r5, r3
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dda:	4629      	mov	r1, r5
 8003ddc:	028b      	lsls	r3, r1, #10
 8003dde:	4621      	mov	r1, r4
 8003de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de4:	4621      	mov	r1, r4
 8003de6:	028a      	lsls	r2, r1, #10
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dee:	2200      	movs	r2, #0
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	61fa      	str	r2, [r7, #28]
 8003df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df8:	f7fc ff50 	bl	8000c9c <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3750      	adds	r7, #80	; 0x50
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	007a1200 	.word	0x007a1200

08003e40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000008 	.word	0x20000008

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e5c:	f7ff fff0 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	0801b074 	.word	0x0801b074

08003e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e84:	f7ff ffdc 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0b5b      	lsrs	r3, r3, #13
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	0801b074 	.word	0x0801b074

08003ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ed0:	4b69      	ldr	r3, [pc, #420]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eda:	6093      	str	r3, [r2, #8]
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	4964      	ldr	r1, [pc, #400]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d017      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f02:	4b5d      	ldr	r3, [pc, #372]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	4959      	ldr	r1, [pc, #356]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f20:	d101      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d017      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f3e:	4b4e      	ldr	r3, [pc, #312]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	494a      	ldr	r1, [pc, #296]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 808b 	beq.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	4a39      	ldr	r2, [pc, #228]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6413      	str	r3, [r2, #64]	; 0x40
 8003f98:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fa4:	4b35      	ldr	r3, [pc, #212]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a34      	ldr	r2, [pc, #208]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb0:	f7fd fe40 	bl	8001c34 <HAL_GetTick>
 8003fb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb8:	f7fd fe3c 	bl	8001c34 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e357      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d035      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d02e      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d114      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fe04 	bl	8001c34 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fd fe00 	bl	8001c34 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e319      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ee      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800405e:	d111      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800406e:	400b      	ands	r3, r1
 8004070:	4901      	ldr	r1, [pc, #4]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
 8004076:	e00b      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004078:	40023800 	.word	0x40023800
 800407c:	40007000 	.word	0x40007000
 8004080:	0ffffcff 	.word	0x0ffffcff
 8004084:	4baa      	ldr	r3, [pc, #680]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4aa9      	ldr	r2, [pc, #676]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	4ba7      	ldr	r3, [pc, #668]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409c:	49a4      	ldr	r1, [pc, #656]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ae:	4ba0      	ldr	r3, [pc, #640]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b4:	4a9e      	ldr	r2, [pc, #632]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040be:	4b9c      	ldr	r3, [pc, #624]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	4999      	ldr	r1, [pc, #612]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040dc:	4b94      	ldr	r3, [pc, #592]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ea:	4991      	ldr	r1, [pc, #580]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040fe:	4b8c      	ldr	r3, [pc, #560]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800410c:	4988      	ldr	r1, [pc, #544]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004120:	4b83      	ldr	r3, [pc, #524]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412e:	4980      	ldr	r1, [pc, #512]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004142:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	4977      	ldr	r1, [pc, #476]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004164:	4b72      	ldr	r3, [pc, #456]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	496f      	ldr	r1, [pc, #444]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004186:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f023 020c 	bic.w	r2, r3, #12
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	4966      	ldr	r1, [pc, #408]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041a8:	4b61      	ldr	r3, [pc, #388]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	495e      	ldr	r1, [pc, #376]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ca:	4b59      	ldr	r3, [pc, #356]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	4955      	ldr	r1, [pc, #340]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ec:	4b50      	ldr	r3, [pc, #320]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	494d      	ldr	r1, [pc, #308]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800420e:	4b48      	ldr	r3, [pc, #288]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	4944      	ldr	r1, [pc, #272]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004230:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	493c      	ldr	r1, [pc, #240]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	4933      	ldr	r1, [pc, #204]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004282:	492b      	ldr	r1, [pc, #172]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d011      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004296:	4b26      	ldr	r3, [pc, #152]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a4:	4922      	ldr	r1, [pc, #136]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042d6:	4b16      	ldr	r3, [pc, #88]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	4912      	ldr	r1, [pc, #72]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004308:	4909      	ldr	r1, [pc, #36]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d006      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80d9 	beq.w	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004324:	4b02      	ldr	r3, [pc, #8]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a01      	ldr	r2, [pc, #4]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800432e:	e001      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004330:	40023800 	.word	0x40023800
 8004334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fd fc7d 	bl	8001c34 <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800433e:	f7fd fc79 	bl	8001c34 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	; 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e194      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004350:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d021      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11d      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004370:	4b64      	ldr	r3, [pc, #400]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800437e:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	0e1b      	lsrs	r3, r3, #24
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	019a      	lsls	r2, r3, #6
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	071b      	lsls	r3, r3, #28
 80043a4:	4957      	ldr	r1, [pc, #348]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02e      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d129      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043d8:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	0f1b      	lsrs	r3, r3, #28
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	019a      	lsls	r2, r3, #6
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	431a      	orrs	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	071b      	lsls	r3, r3, #28
 800440c:	493d      	ldr	r1, [pc, #244]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441a:	f023 021f 	bic.w	r2, r3, #31
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	3b01      	subs	r3, #1
 8004424:	4937      	ldr	r1, [pc, #220]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01d      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004438:	4b32      	ldr	r3, [pc, #200]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	0e1b      	lsrs	r3, r3, #24
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004446:	4b2f      	ldr	r3, [pc, #188]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444c:	0f1b      	lsrs	r3, r3, #28
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	019a      	lsls	r2, r3, #6
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	431a      	orrs	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	431a      	orrs	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	071b      	lsls	r3, r3, #28
 800446c:	4925      	ldr	r1, [pc, #148]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d011      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	019a      	lsls	r2, r3, #6
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	071b      	lsls	r3, r3, #28
 800449c:	4919      	ldr	r1, [pc, #100]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044a4:	4b17      	ldr	r3, [pc, #92]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a16      	ldr	r2, [pc, #88]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b0:	f7fd fbc0 	bl	8001c34 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044b8:	f7fd fbbc 	bl	8001c34 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0d7      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ca:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f040 80cd 	bne.w	8004678 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ea:	f7fd fba3 	bl	8001c34 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044f0:	e00a      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044f2:	f7fd fb9f 	bl	8001c34 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	; 0x64
 80044fe:	d903      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0ba      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004504:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004508:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004514:	d0ed      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02e      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d12a      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800453e:	4b51      	ldr	r3, [pc, #324]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800454c:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	0f1b      	lsrs	r3, r3, #28
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	019a      	lsls	r2, r3, #6
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	071b      	lsls	r3, r3, #28
 8004572:	4944      	ldr	r1, [pc, #272]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800457a:	4b42      	ldr	r3, [pc, #264]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800457c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004580:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	493d      	ldr	r1, [pc, #244]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d022      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a8:	d11d      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045aa:	4b36      	ldr	r3, [pc, #216]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	0e1b      	lsrs	r3, r3, #24
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045b8:	4b32      	ldr	r3, [pc, #200]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	0f1b      	lsrs	r3, r3, #28
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	019a      	lsls	r2, r3, #6
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	071b      	lsls	r3, r3, #28
 80045de:	4929      	ldr	r1, [pc, #164]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	0e1b      	lsrs	r3, r3, #24
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004600:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	019a      	lsls	r2, r3, #6
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	431a      	orrs	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	4917      	ldr	r1, [pc, #92]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4911      	ldr	r1, [pc, #68]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004650:	f7fd faf0 	bl	8001c34 <HAL_GetTick>
 8004654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004658:	f7fd faec 	bl	8001c34 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e007      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004676:	d1ef      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800

08004688 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e081      	b.n	800479e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7f5b      	ldrb	r3, [r3, #29]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd f894 	bl	80017d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	22ca      	movs	r2, #202	; 0xca
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2253      	movs	r2, #83	; 0x53
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 faac 	bl	8004c24 <RTC_EnterInitMode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	22ff      	movs	r2, #255	; 0xff
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2204      	movs	r2, #4
 80046de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e05c      	b.n	800479e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6899      	ldr	r1, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RTC_Init+0x120>)
 80046f0:	400b      	ands	r3, r1
 80046f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6899      	ldr	r1, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6919      	ldr	r1, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	041a      	lsls	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fa40 	bl	8004bd4 <HAL_RTC_WaitForSynchro>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	22ff      	movs	r2, #255	; 0xff
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2204      	movs	r2, #4
 8004766:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e018      	b.n	800479e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	22ff      	movs	r2, #255	; 0xff
 8004794:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
  }
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	ff8fffbf 	.word	0xff8fffbf

080047ac <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	7f1b      	ldrb	r3, [r3, #28]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_RTC_SetTime+0x1c>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e0a8      	b.n	800491a <HAL_RTC_SetTime+0x16e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2202      	movs	r2, #2
 80047d2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d126      	bne.n	8004828 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2200      	movs	r2, #0
 80047ec:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fa42 	bl	8004c7c <RTC_ByteToBcd2>
 80047f8:	4603      	mov	r3, r0
 80047fa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fa3b 	bl	8004c7c <RTC_ByteToBcd2>
 8004806:	4603      	mov	r3, r0
 8004808:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800480a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	789b      	ldrb	r3, [r3, #2]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa33 	bl	8004c7c <RTC_ByteToBcd2>
 8004816:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004818:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	7b1b      	ldrb	r3, [r3, #12]
 8004820:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e018      	b.n	800485a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004848:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800484e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	7b1b      	ldrb	r3, [r3, #12]
 8004854:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	22ca      	movs	r2, #202	; 0xca
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2253      	movs	r2, #83	; 0x53
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f9da 	bl	8004c24 <RTC_EnterInitMode>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	22ff      	movs	r2, #255	; 0xff
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2204      	movs	r2, #4
 8004882:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e045      	b.n	800491a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_RTC_SetTime+0x178>)
 8004896:	400b      	ands	r3, r1
 8004898:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048a8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6899      	ldr	r1, [r3, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d111      	bne.n	8004904 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f977 	bl	8004bd4 <HAL_RTC_WaitForSynchro>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	22ff      	movs	r2, #255	; 0xff
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2204      	movs	r2, #4
 80048f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e00a      	b.n	800491a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004918:	2300      	movs	r3, #0
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd90      	pop	{r4, r7, pc}
 8004922:	bf00      	nop
 8004924:	007f7f7f 	.word	0x007f7f7f

08004928 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_RTC_GetTime+0xb8>)
 8004958:	4013      	ands	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11a      	bne.n	80049d6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 f987 	bl	8004cb8 <RTC_Bcd2ToByte>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f97e 	bl	8004cb8 <RTC_Bcd2ToByte>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	789b      	ldrb	r3, [r3, #2]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f975 	bl	8004cb8 <RTC_Bcd2ToByte>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	007f7f7f 	.word	0x007f7f7f

080049e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	7f1b      	ldrb	r3, [r3, #28]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_RTC_SetDate+0x1c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e092      	b.n	8004b26 <HAL_RTC_SetDate+0x142>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10e      	bne.n	8004a30 <HAL_RTC_SetDate+0x4c>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	330a      	adds	r3, #10
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d11c      	bne.n	8004a70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	78db      	ldrb	r3, [r3, #3]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f91e 	bl	8004c7c <RTC_ByteToBcd2>
 8004a40:	4603      	mov	r3, r0
 8004a42:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f917 	bl	8004c7c <RTC_ByteToBcd2>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004a52:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	789b      	ldrb	r3, [r3, #2]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 f90f 	bl	8004c7c <RTC_ByteToBcd2>
 8004a5e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004a60:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e00e      	b.n	8004a8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	78db      	ldrb	r3, [r3, #3]
 8004a74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004a7c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8004a82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	22ca      	movs	r2, #202	; 0xca
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2253      	movs	r2, #83	; 0x53
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f8c0 	bl	8004c24 <RTC_EnterInitMode>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	22ff      	movs	r2, #255	; 0xff
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e031      	b.n	8004b26 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	6979      	ldr	r1, [r7, #20]
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RTC_SetDate+0x14c>)
 8004aca:	400b      	ands	r3, r1
 8004acc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004adc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d111      	bne.n	8004b10 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f871 	bl	8004bd4 <HAL_RTC_WaitForSynchro>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	22ff      	movs	r2, #255	; 0xff
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2204      	movs	r2, #4
 8004b04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e00a      	b.n	8004b26 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
  }
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd90      	pop	{r4, r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	00ffff3f 	.word	0x00ffff3f

08004b34 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <HAL_RTC_GetDate+0x9c>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11a      	bne.n	8004bc4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	78db      	ldrb	r3, [r3, #3]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f890 	bl	8004cb8 <RTC_Bcd2ToByte>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f887 	bl	8004cb8 <RTC_Bcd2ToByte>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	789b      	ldrb	r3, [r3, #2]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f87e 	bl	8004cb8 <RTC_Bcd2ToByte>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	00ffff3f 	.word	0x00ffff3f

08004bd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7fd f820 	bl	8001c34 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004bf6:	e009      	b.n	8004c0c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bf8:	f7fd f81c 	bl	8001c34 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c06:	d901      	bls.n	8004c0c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e007      	b.n	8004c1c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ee      	beq.n	8004bf8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c48:	f7fc fff4 	bl	8001c34 <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c4e:	e009      	b.n	8004c64 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c50:	f7fc fff0 	bl	8001c34 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c5e:	d901      	bls.n	8004c64 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e007      	b.n	8004c74 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0ee      	beq.n	8004c50 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8004c8a:	e005      	b.n	8004c98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	3b0a      	subs	r3, #10
 8004c96:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	d8f6      	bhi.n	8004c8c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b2db      	uxtb	r3, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	b2db      	uxtb	r3, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	7f1b      	ldrb	r3, [r3, #28]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0ae      	b.n	8004e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2202      	movs	r2, #2
 8004d16:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	22ca      	movs	r2, #202	; 0xca
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2253      	movs	r2, #83	; 0x53
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d36:	609a      	str	r2, [r3, #8]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d022      	beq.n	8004d8c <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8004d46:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	0adb      	lsrs	r3, r3, #11
 8004d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	617a      	str	r2, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2203      	movs	r2, #3
 8004d72:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e075      	b.n	8004e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e7      	bne.n	8004d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a36      	ldr	r2, [pc, #216]	; (8004e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0adb      	lsrs	r3, r3, #11
 8004da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	1e5a      	subs	r2, r3, #1
 8004db6:	617a      	str	r2, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	22ff      	movs	r2, #255	; 0xff
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e04a      	b.n	8004e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0e7      	beq.n	8004db2 <HAL_RTCEx_SetWakeUpTimer_IT+0xbe>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0207 	bic.w	r2, r2, #7
 8004df8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e14:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e20:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004e32:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e42:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e52:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	22ff      	movs	r2, #255	; 0xff
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000008 	.word	0x20000008
 8004e7c:	10624dd3 	.word	0x10624dd3
 8004e80:	40013c00 	.word	0x40013c00

08004e84 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7f1b      	ldrb	r3, [r3, #28]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e047      	b.n	8004f2c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	22ca      	movs	r2, #202	; 0xca
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2253      	movs	r2, #83	; 0x53
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed8:	f7fc feac 	bl	8001c34 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004ede:	e013      	b.n	8004f08 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ee0:	f7fc fea8 	bl	8001c34 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eee:	d90b      	bls.n	8004f08 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	22ff      	movs	r2, #255	; 0xff
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2203      	movs	r2, #3
 8004efc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e011      	b.n	8004f2c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0e4      	beq.n	8004ee0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc f93c 	bl	80011c8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004f60:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8004f64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004f68:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	775a      	strb	r2, [r3, #29]
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40013c00 	.word	0x40013c00

08004f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e040      	b.n	8005010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc fc50 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8c0 	bl	8005140 <UART_SetConfig>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e022      	b.n	8005010 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fb18 	bl	8005608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fb9f 	bl	800574c <UART_CheckIdleState>
 800500e:	4603      	mov	r3, r0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800502c:	2b20      	cmp	r3, #32
 800502e:	f040 8081 	bne.w	8005134 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_UART_Transmit+0x26>
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e079      	b.n	8005136 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_UART_Transmit+0x38>
 800504c:	2302      	movs	r3, #2
 800504e:	e072      	b.n	8005136 <HAL_UART_Transmit+0x11e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2221      	movs	r2, #33	; 0x21
 8005064:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005066:	f7fc fde5 	bl	8001c34 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005084:	d108      	bne.n	8005098 <HAL_UART_Transmit+0x80>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	e003      	b.n	80050a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050a8:	e02c      	b.n	8005104 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2180      	movs	r1, #128	; 0x80
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fb7c 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e038      	b.n	8005136 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	3302      	adds	r3, #2
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	e007      	b.n	80050f2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	3301      	adds	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1cc      	bne.n	80050aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2200      	movs	r2, #0
 8005118:	2140      	movs	r1, #64	; 0x40
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fb49 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e005      	b.n	8005136 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	e000      	b.n	8005136 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005134:	2302      	movs	r3, #2
  }
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4ba6      	ldr	r3, [pc, #664]	; (8005404 <UART_SetConfig+0x2c4>)
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6979      	ldr	r1, [r7, #20]
 8005174:	430b      	orrs	r3, r1
 8005176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a94      	ldr	r2, [pc, #592]	; (8005408 <UART_SetConfig+0x2c8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d120      	bne.n	80051fe <UART_SetConfig+0xbe>
 80051bc:	4b93      	ldr	r3, [pc, #588]	; (800540c <UART_SetConfig+0x2cc>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d816      	bhi.n	80051f8 <UART_SetConfig+0xb8>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x90>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051e7 	.word	0x080051e7
 80051dc:	080051f3 	.word	0x080051f3
 80051e0:	2301      	movs	r3, #1
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e150      	b.n	8005488 <UART_SetConfig+0x348>
 80051e6:	2302      	movs	r3, #2
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e14d      	b.n	8005488 <UART_SetConfig+0x348>
 80051ec:	2304      	movs	r3, #4
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e14a      	b.n	8005488 <UART_SetConfig+0x348>
 80051f2:	2308      	movs	r3, #8
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e147      	b.n	8005488 <UART_SetConfig+0x348>
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e144      	b.n	8005488 <UART_SetConfig+0x348>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a83      	ldr	r2, [pc, #524]	; (8005410 <UART_SetConfig+0x2d0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d132      	bne.n	800526e <UART_SetConfig+0x12e>
 8005208:	4b80      	ldr	r3, [pc, #512]	; (800540c <UART_SetConfig+0x2cc>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b0c      	cmp	r3, #12
 8005214:	d828      	bhi.n	8005268 <UART_SetConfig+0x128>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0xdc>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005251 	.word	0x08005251
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	0800525d 	.word	0x0800525d
 8005230:	08005269 	.word	0x08005269
 8005234:	08005269 	.word	0x08005269
 8005238:	08005269 	.word	0x08005269
 800523c:	08005257 	.word	0x08005257
 8005240:	08005269 	.word	0x08005269
 8005244:	08005269 	.word	0x08005269
 8005248:	08005269 	.word	0x08005269
 800524c:	08005263 	.word	0x08005263
 8005250:	2300      	movs	r3, #0
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e118      	b.n	8005488 <UART_SetConfig+0x348>
 8005256:	2302      	movs	r3, #2
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e115      	b.n	8005488 <UART_SetConfig+0x348>
 800525c:	2304      	movs	r3, #4
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e112      	b.n	8005488 <UART_SetConfig+0x348>
 8005262:	2308      	movs	r3, #8
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e10f      	b.n	8005488 <UART_SetConfig+0x348>
 8005268:	2310      	movs	r3, #16
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e10c      	b.n	8005488 <UART_SetConfig+0x348>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a68      	ldr	r2, [pc, #416]	; (8005414 <UART_SetConfig+0x2d4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d120      	bne.n	80052ba <UART_SetConfig+0x17a>
 8005278:	4b64      	ldr	r3, [pc, #400]	; (800540c <UART_SetConfig+0x2cc>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005282:	2b30      	cmp	r3, #48	; 0x30
 8005284:	d013      	beq.n	80052ae <UART_SetConfig+0x16e>
 8005286:	2b30      	cmp	r3, #48	; 0x30
 8005288:	d814      	bhi.n	80052b4 <UART_SetConfig+0x174>
 800528a:	2b20      	cmp	r3, #32
 800528c:	d009      	beq.n	80052a2 <UART_SetConfig+0x162>
 800528e:	2b20      	cmp	r3, #32
 8005290:	d810      	bhi.n	80052b4 <UART_SetConfig+0x174>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <UART_SetConfig+0x15c>
 8005296:	2b10      	cmp	r3, #16
 8005298:	d006      	beq.n	80052a8 <UART_SetConfig+0x168>
 800529a:	e00b      	b.n	80052b4 <UART_SetConfig+0x174>
 800529c:	2300      	movs	r3, #0
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e0f2      	b.n	8005488 <UART_SetConfig+0x348>
 80052a2:	2302      	movs	r3, #2
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e0ef      	b.n	8005488 <UART_SetConfig+0x348>
 80052a8:	2304      	movs	r3, #4
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e0ec      	b.n	8005488 <UART_SetConfig+0x348>
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e0e9      	b.n	8005488 <UART_SetConfig+0x348>
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e0e6      	b.n	8005488 <UART_SetConfig+0x348>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a56      	ldr	r2, [pc, #344]	; (8005418 <UART_SetConfig+0x2d8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d120      	bne.n	8005306 <UART_SetConfig+0x1c6>
 80052c4:	4b51      	ldr	r3, [pc, #324]	; (800540c <UART_SetConfig+0x2cc>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ce:	2bc0      	cmp	r3, #192	; 0xc0
 80052d0:	d013      	beq.n	80052fa <UART_SetConfig+0x1ba>
 80052d2:	2bc0      	cmp	r3, #192	; 0xc0
 80052d4:	d814      	bhi.n	8005300 <UART_SetConfig+0x1c0>
 80052d6:	2b80      	cmp	r3, #128	; 0x80
 80052d8:	d009      	beq.n	80052ee <UART_SetConfig+0x1ae>
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d810      	bhi.n	8005300 <UART_SetConfig+0x1c0>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <UART_SetConfig+0x1a8>
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d006      	beq.n	80052f4 <UART_SetConfig+0x1b4>
 80052e6:	e00b      	b.n	8005300 <UART_SetConfig+0x1c0>
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e0cc      	b.n	8005488 <UART_SetConfig+0x348>
 80052ee:	2302      	movs	r3, #2
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e0c9      	b.n	8005488 <UART_SetConfig+0x348>
 80052f4:	2304      	movs	r3, #4
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0c6      	b.n	8005488 <UART_SetConfig+0x348>
 80052fa:	2308      	movs	r3, #8
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0c3      	b.n	8005488 <UART_SetConfig+0x348>
 8005300:	2310      	movs	r3, #16
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0c0      	b.n	8005488 <UART_SetConfig+0x348>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a44      	ldr	r2, [pc, #272]	; (800541c <UART_SetConfig+0x2dc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d125      	bne.n	800535c <UART_SetConfig+0x21c>
 8005310:	4b3e      	ldr	r3, [pc, #248]	; (800540c <UART_SetConfig+0x2cc>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531e:	d017      	beq.n	8005350 <UART_SetConfig+0x210>
 8005320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005324:	d817      	bhi.n	8005356 <UART_SetConfig+0x216>
 8005326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532a:	d00b      	beq.n	8005344 <UART_SetConfig+0x204>
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d811      	bhi.n	8005356 <UART_SetConfig+0x216>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <UART_SetConfig+0x1fe>
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d006      	beq.n	800534a <UART_SetConfig+0x20a>
 800533c:	e00b      	b.n	8005356 <UART_SetConfig+0x216>
 800533e:	2300      	movs	r3, #0
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e0a1      	b.n	8005488 <UART_SetConfig+0x348>
 8005344:	2302      	movs	r3, #2
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e09e      	b.n	8005488 <UART_SetConfig+0x348>
 800534a:	2304      	movs	r3, #4
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e09b      	b.n	8005488 <UART_SetConfig+0x348>
 8005350:	2308      	movs	r3, #8
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e098      	b.n	8005488 <UART_SetConfig+0x348>
 8005356:	2310      	movs	r3, #16
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e095      	b.n	8005488 <UART_SetConfig+0x348>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <UART_SetConfig+0x2e0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d125      	bne.n	80053b2 <UART_SetConfig+0x272>
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <UART_SetConfig+0x2cc>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005374:	d017      	beq.n	80053a6 <UART_SetConfig+0x266>
 8005376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800537a:	d817      	bhi.n	80053ac <UART_SetConfig+0x26c>
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005380:	d00b      	beq.n	800539a <UART_SetConfig+0x25a>
 8005382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005386:	d811      	bhi.n	80053ac <UART_SetConfig+0x26c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <UART_SetConfig+0x254>
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d006      	beq.n	80053a0 <UART_SetConfig+0x260>
 8005392:	e00b      	b.n	80053ac <UART_SetConfig+0x26c>
 8005394:	2301      	movs	r3, #1
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e076      	b.n	8005488 <UART_SetConfig+0x348>
 800539a:	2302      	movs	r3, #2
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e073      	b.n	8005488 <UART_SetConfig+0x348>
 80053a0:	2304      	movs	r3, #4
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e070      	b.n	8005488 <UART_SetConfig+0x348>
 80053a6:	2308      	movs	r3, #8
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e06d      	b.n	8005488 <UART_SetConfig+0x348>
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e06a      	b.n	8005488 <UART_SetConfig+0x348>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <UART_SetConfig+0x2e4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d138      	bne.n	800542e <UART_SetConfig+0x2ee>
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <UART_SetConfig+0x2cc>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053ca:	d017      	beq.n	80053fc <UART_SetConfig+0x2bc>
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d0:	d82a      	bhi.n	8005428 <UART_SetConfig+0x2e8>
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	d00b      	beq.n	80053f0 <UART_SetConfig+0x2b0>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d824      	bhi.n	8005428 <UART_SetConfig+0x2e8>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <UART_SetConfig+0x2aa>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d006      	beq.n	80053f6 <UART_SetConfig+0x2b6>
 80053e8:	e01e      	b.n	8005428 <UART_SetConfig+0x2e8>
 80053ea:	2300      	movs	r3, #0
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e04b      	b.n	8005488 <UART_SetConfig+0x348>
 80053f0:	2302      	movs	r3, #2
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e048      	b.n	8005488 <UART_SetConfig+0x348>
 80053f6:	2304      	movs	r3, #4
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e045      	b.n	8005488 <UART_SetConfig+0x348>
 80053fc:	2308      	movs	r3, #8
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e042      	b.n	8005488 <UART_SetConfig+0x348>
 8005402:	bf00      	nop
 8005404:	efff69f3 	.word	0xefff69f3
 8005408:	40011000 	.word	0x40011000
 800540c:	40023800 	.word	0x40023800
 8005410:	40004400 	.word	0x40004400
 8005414:	40004800 	.word	0x40004800
 8005418:	40004c00 	.word	0x40004c00
 800541c:	40005000 	.word	0x40005000
 8005420:	40011400 	.word	0x40011400
 8005424:	40007800 	.word	0x40007800
 8005428:	2310      	movs	r3, #16
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e02c      	b.n	8005488 <UART_SetConfig+0x348>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a72      	ldr	r2, [pc, #456]	; (80055fc <UART_SetConfig+0x4bc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d125      	bne.n	8005484 <UART_SetConfig+0x344>
 8005438:	4b71      	ldr	r3, [pc, #452]	; (8005600 <UART_SetConfig+0x4c0>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005442:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005446:	d017      	beq.n	8005478 <UART_SetConfig+0x338>
 8005448:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800544c:	d817      	bhi.n	800547e <UART_SetConfig+0x33e>
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d00b      	beq.n	800546c <UART_SetConfig+0x32c>
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	d811      	bhi.n	800547e <UART_SetConfig+0x33e>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <UART_SetConfig+0x326>
 800545e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005462:	d006      	beq.n	8005472 <UART_SetConfig+0x332>
 8005464:	e00b      	b.n	800547e <UART_SetConfig+0x33e>
 8005466:	2300      	movs	r3, #0
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e00d      	b.n	8005488 <UART_SetConfig+0x348>
 800546c:	2302      	movs	r3, #2
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e00a      	b.n	8005488 <UART_SetConfig+0x348>
 8005472:	2304      	movs	r3, #4
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e007      	b.n	8005488 <UART_SetConfig+0x348>
 8005478:	2308      	movs	r3, #8
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e004      	b.n	8005488 <UART_SetConfig+0x348>
 800547e:	2310      	movs	r3, #16
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e001      	b.n	8005488 <UART_SetConfig+0x348>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005490:	d15b      	bne.n	800554a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005492:	7ffb      	ldrb	r3, [r7, #31]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d828      	bhi.n	80054ea <UART_SetConfig+0x3aa>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0x360>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054eb 	.word	0x080054eb
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054eb 	.word	0x080054eb
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	080054eb 	.word	0x080054eb
 80054c0:	080054e3 	.word	0x080054e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe fcc8 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 80054c8:	61b8      	str	r0, [r7, #24]
        break;
 80054ca:	e013      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fcd8 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 80054d0:	61b8      	str	r0, [r7, #24]
        break;
 80054d2:	e00f      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <UART_SetConfig+0x4c4>)
 80054d6:	61bb      	str	r3, [r7, #24]
        break;
 80054d8:	e00c      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fe fbab 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 80054de:	61b8      	str	r0, [r7, #24]
        break;
 80054e0:	e008      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e6:	61bb      	str	r3, [r7, #24]
        break;
 80054e8:	e004      	b.n	80054f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	77bb      	strb	r3, [r7, #30]
        break;
 80054f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d074      	beq.n	80055e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	005a      	lsls	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d916      	bls.n	8005544 <UART_SetConfig+0x404>
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d212      	bcs.n	8005544 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f023 030f 	bic.w	r3, r3, #15
 8005526:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	b29a      	uxth	r2, r3
 8005534:	89fb      	ldrh	r3, [r7, #14]
 8005536:	4313      	orrs	r3, r2
 8005538:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	89fa      	ldrh	r2, [r7, #14]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	e04f      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	77bb      	strb	r3, [r7, #30]
 8005548:	e04c      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554a:	7ffb      	ldrb	r3, [r7, #31]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d828      	bhi.n	80055a2 <UART_SetConfig+0x462>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0x418>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005585 	.word	0x08005585
 8005560:	0800558d 	.word	0x0800558d
 8005564:	080055a3 	.word	0x080055a3
 8005568:	08005593 	.word	0x08005593
 800556c:	080055a3 	.word	0x080055a3
 8005570:	080055a3 	.word	0x080055a3
 8005574:	080055a3 	.word	0x080055a3
 8005578:	0800559b 	.word	0x0800559b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557c:	f7fe fc6c 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8005580:	61b8      	str	r0, [r7, #24]
        break;
 8005582:	e013      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005584:	f7fe fc7c 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 8005588:	61b8      	str	r0, [r7, #24]
        break;
 800558a:	e00f      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <UART_SetConfig+0x4c4>)
 800558e:	61bb      	str	r3, [r7, #24]
        break;
 8005590:	e00c      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005592:	f7fe fb4f 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8005596:	61b8      	str	r0, [r7, #24]
        break;
 8005598:	e008      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559e:	61bb      	str	r3, [r7, #24]
        break;
 80055a0:	e004      	b.n	80055ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	77bb      	strb	r3, [r7, #30]
        break;
 80055aa:	bf00      	nop
    }

    if (pclk != 0U)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d018      	beq.n	80055e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	085a      	lsrs	r2, r3, #1
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	441a      	add	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b0f      	cmp	r3, #15
 80055ca:	d909      	bls.n	80055e0 <UART_SetConfig+0x4a0>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d2:	d205      	bcs.n	80055e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	e001      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40007c00 	.word	0x40007c00
 8005600:	40023800 	.word	0x40023800
 8005604:	00f42400 	.word	0x00f42400

08005608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01a      	beq.n	800571e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005706:	d10a      	bne.n	800571e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af02      	add	r7, sp, #8
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800575c:	f7fc fa6a 	bl	8001c34 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b08      	cmp	r3, #8
 800576e:	d10e      	bne.n	800578e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f817 	bl	80057b2 <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e00d      	b.n	80057aa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b09c      	sub	sp, #112	; 0x70
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c2:	e0a5      	b.n	8005910 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	f000 80a1 	beq.w	8005910 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ce:	f7fc fa31 	bl	8001c34 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057da:	429a      	cmp	r2, r3
 80057dc:	d302      	bcc.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80057de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d13e      	bne.n	8005862 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f8:	667b      	str	r3, [r7, #100]	; 0x64
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005804:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005808:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e6      	bne.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3308      	adds	r3, #8
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	663b      	str	r3, [r7, #96]	; 0x60
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005836:	64ba      	str	r2, [r7, #72]	; 0x48
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800583c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e5      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e067      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d04f      	beq.n	8005910 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587e:	d147      	bne.n	8005910 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005888:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800589e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3308      	adds	r3, #8
 80058c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	613b      	str	r3, [r7, #16]
   return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058dc:	623a      	str	r2, [r7, #32]
 80058de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e010      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	429a      	cmp	r2, r3
 800592c:	f43f af4a 	beq.w	80057c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3770      	adds	r7, #112	; 0x70
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005942:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <MX_LWIP_Init+0x23c>)
 8005944:	220a      	movs	r2, #10
 8005946:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8005948:	4b8b      	ldr	r3, [pc, #556]	; (8005b78 <MX_LWIP_Init+0x23c>)
 800594a:	222a      	movs	r2, #42	; 0x2a
 800594c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800594e:	4b8a      	ldr	r3, [pc, #552]	; (8005b78 <MX_LWIP_Init+0x23c>)
 8005950:	2200      	movs	r2, #0
 8005952:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8005954:	4b88      	ldr	r3, [pc, #544]	; (8005b78 <MX_LWIP_Init+0x23c>)
 8005956:	220a      	movs	r2, #10
 8005958:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800595a:	4b88      	ldr	r3, [pc, #544]	; (8005b7c <MX_LWIP_Init+0x240>)
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005960:	4b86      	ldr	r3, [pc, #536]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005962:	22ff      	movs	r2, #255	; 0xff
 8005964:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005966:	4b85      	ldr	r3, [pc, #532]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800596c:	4b83      	ldr	r3, [pc, #524]	; (8005b7c <MX_LWIP_Init+0x240>)
 800596e:	2200      	movs	r2, #0
 8005970:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005972:	4b83      	ldr	r3, [pc, #524]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005978:	4b81      	ldr	r3, [pc, #516]	; (8005b80 <MX_LWIP_Init+0x244>)
 800597a:	2200      	movs	r2, #0
 800597c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800597e:	4b80      	ldr	r3, [pc, #512]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005980:	2200      	movs	r2, #0
 8005982:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005984:	4b7e      	ldr	r3, [pc, #504]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005986:	2200      	movs	r2, #0
 8005988:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800598a:	f000 fcd5 	bl	8006338 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800598e:	4b7a      	ldr	r3, [pc, #488]	; (8005b78 <MX_LWIP_Init+0x23c>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	061a      	lsls	r2, r3, #24
 8005994:	4b78      	ldr	r3, [pc, #480]	; (8005b78 <MX_LWIP_Init+0x23c>)
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	431a      	orrs	r2, r3
 800599c:	4b76      	ldr	r3, [pc, #472]	; (8005b78 <MX_LWIP_Init+0x23c>)
 800599e:	789b      	ldrb	r3, [r3, #2]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	4313      	orrs	r3, r2
 80059a4:	4a74      	ldr	r2, [pc, #464]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059a6:	78d2      	ldrb	r2, [r2, #3]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	061a      	lsls	r2, r3, #24
 80059ac:	4b72      	ldr	r3, [pc, #456]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	0619      	lsls	r1, r3, #24
 80059b2:	4b71      	ldr	r3, [pc, #452]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	4319      	orrs	r1, r3
 80059ba:	4b6f      	ldr	r3, [pc, #444]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059bc:	789b      	ldrb	r3, [r3, #2]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	430b      	orrs	r3, r1
 80059c2:	496d      	ldr	r1, [pc, #436]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059c4:	78c9      	ldrb	r1, [r1, #3]
 80059c6:	430b      	orrs	r3, r1
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059ce:	431a      	orrs	r2, r3
 80059d0:	4b69      	ldr	r3, [pc, #420]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	0619      	lsls	r1, r3, #24
 80059d6:	4b68      	ldr	r3, [pc, #416]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	4319      	orrs	r1, r3
 80059de:	4b66      	ldr	r3, [pc, #408]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059e0:	789b      	ldrb	r3, [r3, #2]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	430b      	orrs	r3, r1
 80059e6:	4964      	ldr	r1, [pc, #400]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059e8:	78c9      	ldrb	r1, [r1, #3]
 80059ea:	430b      	orrs	r3, r1
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059f2:	431a      	orrs	r2, r3
 80059f4:	4b60      	ldr	r3, [pc, #384]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	0619      	lsls	r1, r3, #24
 80059fa:	4b5f      	ldr	r3, [pc, #380]	; (8005b78 <MX_LWIP_Init+0x23c>)
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	4319      	orrs	r1, r3
 8005a02:	4b5d      	ldr	r3, [pc, #372]	; (8005b78 <MX_LWIP_Init+0x23c>)
 8005a04:	789b      	ldrb	r3, [r3, #2]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	495b      	ldr	r1, [pc, #364]	; (8005b78 <MX_LWIP_Init+0x23c>)
 8005a0c:	78c9      	ldrb	r1, [r1, #3]
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	0e1b      	lsrs	r3, r3, #24
 8005a12:	4313      	orrs	r3, r2
 8005a14:	4a5b      	ldr	r2, [pc, #364]	; (8005b84 <MX_LWIP_Init+0x248>)
 8005a16:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005a18:	4b58      	ldr	r3, [pc, #352]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	061a      	lsls	r2, r3, #24
 8005a1e:	4b57      	ldr	r3, [pc, #348]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	431a      	orrs	r2, r3
 8005a26:	4b55      	ldr	r3, [pc, #340]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a28:	789b      	ldrb	r3, [r3, #2]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	4a53      	ldr	r2, [pc, #332]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a30:	78d2      	ldrb	r2, [r2, #3]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	061a      	lsls	r2, r3, #24
 8005a36:	4b51      	ldr	r3, [pc, #324]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	0619      	lsls	r1, r3, #24
 8005a3c:	4b4f      	ldr	r3, [pc, #316]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	041b      	lsls	r3, r3, #16
 8005a42:	4319      	orrs	r1, r3
 8005a44:	4b4d      	ldr	r3, [pc, #308]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a46:	789b      	ldrb	r3, [r3, #2]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	494b      	ldr	r1, [pc, #300]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a4e:	78c9      	ldrb	r1, [r1, #3]
 8005a50:	430b      	orrs	r3, r1
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	4b48      	ldr	r3, [pc, #288]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	0619      	lsls	r1, r3, #24
 8005a60:	4b46      	ldr	r3, [pc, #280]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	4319      	orrs	r1, r3
 8005a68:	4b44      	ldr	r3, [pc, #272]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a6a:	789b      	ldrb	r3, [r3, #2]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	4942      	ldr	r1, [pc, #264]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a72:	78c9      	ldrb	r1, [r1, #3]
 8005a74:	430b      	orrs	r3, r1
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	0619      	lsls	r1, r3, #24
 8005a84:	4b3d      	ldr	r3, [pc, #244]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	4319      	orrs	r1, r3
 8005a8c:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a8e:	789b      	ldrb	r3, [r3, #2]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	430b      	orrs	r3, r1
 8005a94:	4939      	ldr	r1, [pc, #228]	; (8005b7c <MX_LWIP_Init+0x240>)
 8005a96:	78c9      	ldrb	r1, [r1, #3]
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	0e1b      	lsrs	r3, r3, #24
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <MX_LWIP_Init+0x24c>)
 8005aa0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005aa2:	4b37      	ldr	r3, [pc, #220]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	061a      	lsls	r2, r3, #24
 8005aa8:	4b35      	ldr	r3, [pc, #212]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	4b33      	ldr	r3, [pc, #204]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005ab2:	789b      	ldrb	r3, [r3, #2]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	4a31      	ldr	r2, [pc, #196]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005aba:	78d2      	ldrb	r2, [r2, #3]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	061a      	lsls	r2, r3, #24
 8005ac0:	4b2f      	ldr	r3, [pc, #188]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	0619      	lsls	r1, r3, #24
 8005ac6:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	4319      	orrs	r1, r3
 8005ace:	4b2c      	ldr	r3, [pc, #176]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005ad0:	789b      	ldrb	r3, [r3, #2]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	492a      	ldr	r1, [pc, #168]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005ad8:	78c9      	ldrb	r1, [r1, #3]
 8005ada:	430b      	orrs	r3, r1
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	0619      	lsls	r1, r3, #24
 8005aea:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	4319      	orrs	r1, r3
 8005af2:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005af4:	789b      	ldrb	r3, [r3, #2]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	430b      	orrs	r3, r1
 8005afa:	4921      	ldr	r1, [pc, #132]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005afc:	78c9      	ldrb	r1, [r1, #3]
 8005afe:	430b      	orrs	r3, r1
 8005b00:	0a1b      	lsrs	r3, r3, #8
 8005b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b06:	431a      	orrs	r2, r3
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	0619      	lsls	r1, r3, #24
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	4319      	orrs	r1, r3
 8005b16:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005b18:	789b      	ldrb	r3, [r3, #2]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	4918      	ldr	r1, [pc, #96]	; (8005b80 <MX_LWIP_Init+0x244>)
 8005b20:	78c9      	ldrb	r1, [r1, #3]
 8005b22:	430b      	orrs	r3, r1
 8005b24:	0e1b      	lsrs	r3, r3, #24
 8005b26:	4313      	orrs	r3, r2
 8005b28:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <MX_LWIP_Init+0x250>)
 8005b2a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <MX_LWIP_Init+0x254>)
 8005b2e:	9302      	str	r3, [sp, #8]
 8005b30:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <MX_LWIP_Init+0x258>)
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	2300      	movs	r3, #0
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <MX_LWIP_Init+0x250>)
 8005b3a:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <MX_LWIP_Init+0x24c>)
 8005b3c:	4911      	ldr	r1, [pc, #68]	; (8005b84 <MX_LWIP_Init+0x248>)
 8005b3e:	4816      	ldr	r0, [pc, #88]	; (8005b98 <MX_LWIP_Init+0x25c>)
 8005b40:	f001 f8a0 	bl	8006c84 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005b44:	4814      	ldr	r0, [pc, #80]	; (8005b98 <MX_LWIP_Init+0x25c>)
 8005b46:	f001 fa4f 	bl	8006fe8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <MX_LWIP_Init+0x25c>)
 8005b4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b50:	089b      	lsrs	r3, r3, #2
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005b5c:	480e      	ldr	r0, [pc, #56]	; (8005b98 <MX_LWIP_Init+0x25c>)
 8005b5e:	f001 fa53 	bl	8007008 <netif_set_up>
 8005b62:	e002      	b.n	8005b6a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005b64:	480c      	ldr	r0, [pc, #48]	; (8005b98 <MX_LWIP_Init+0x25c>)
 8005b66:	f001 fabb 	bl	80070e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005b6a:	490c      	ldr	r1, [pc, #48]	; (8005b9c <MX_LWIP_Init+0x260>)
 8005b6c:	480a      	ldr	r0, [pc, #40]	; (8005b98 <MX_LWIP_Init+0x25c>)
 8005b6e:	f001 fae9 	bl	8007144 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005b72:	bf00      	nop
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000c24 	.word	0x20000c24
 8005b7c:	20000c28 	.word	0x20000c28
 8005b80:	20000c2c 	.word	0x20000c2c
 8005b84:	20000c18 	.word	0x20000c18
 8005b88:	20000c1c 	.word	0x20000c1c
 8005b8c:	20000c20 	.word	0x20000c20
 8005b90:	080100a1 	.word	0x080100a1
 8005b94:	08006165 	.word	0x08006165
 8005b98:	20000be4 	.word	0x20000be4
 8005b9c:	080061d1 	.word	0x080061d1

08005ba0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005ba4:	4803      	ldr	r0, [pc, #12]	; (8005bb4 <MX_LWIP_Process+0x14>)
 8005ba6:	f000 fabd 	bl	8006124 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005baa:	f007 fbdf 	bl	800d36c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000be4 	.word	0x20000be4

08005bb8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08e      	sub	sp, #56	; 0x38
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a4e      	ldr	r2, [pc, #312]	; (8005d10 <HAL_ETH_MspInit+0x158>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f040 8096 	bne.w	8005d08 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005bdc:	4b4d      	ldr	r3, [pc, #308]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	4a4c      	ldr	r2, [pc, #304]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005be6:	6313      	str	r3, [r2, #48]	; 0x30
 8005be8:	4b4a      	ldr	r3, [pc, #296]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	4a46      	ldr	r2, [pc, #280]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8005c00:	4b44      	ldr	r3, [pc, #272]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4b41      	ldr	r3, [pc, #260]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	4a40      	ldr	r2, [pc, #256]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c16:	6313      	str	r3, [r2, #48]	; 0x30
 8005c18:	4b3e      	ldr	r3, [pc, #248]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c24:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	4a3a      	ldr	r2, [pc, #232]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c2a:	f043 0304 	orr.w	r3, r3, #4
 8005c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c30:	4b38      	ldr	r3, [pc, #224]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3c:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	4a34      	ldr	r2, [pc, #208]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	6313      	str	r3, [r2, #48]	; 0x30
 8005c48:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c54:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	4a2e      	ldr	r2, [pc, #184]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c5a:	f043 0302 	orr.w	r3, r3, #2
 8005c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c60:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c6c:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c76:	6313      	str	r3, [r2, #48]	; 0x30
 8005c78:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <HAL_ETH_MspInit+0x15c>)
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	60bb      	str	r3, [r7, #8]
 8005c82:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005c84:	2332      	movs	r3, #50	; 0x32
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c90:	2303      	movs	r3, #3
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c94:	230b      	movs	r3, #11
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	481e      	ldr	r0, [pc, #120]	; (8005d18 <HAL_ETH_MspInit+0x160>)
 8005ca0:	f7fd f9fa 	bl	8003098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005ca4:	2386      	movs	r3, #134	; 0x86
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cb4:	230b      	movs	r3, #11
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4817      	ldr	r0, [pc, #92]	; (8005d1c <HAL_ETH_MspInit+0x164>)
 8005cc0:	f7fd f9ea 	bl	8003098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cd6:	230b      	movs	r3, #11
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cde:	4619      	mov	r1, r3
 8005ce0:	480f      	ldr	r0, [pc, #60]	; (8005d20 <HAL_ETH_MspInit+0x168>)
 8005ce2:	f7fd f9d9 	bl	8003098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005ce6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cec:	2302      	movs	r3, #2
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cf8:	230b      	movs	r3, #11
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d00:	4619      	mov	r1, r3
 8005d02:	4808      	ldr	r0, [pc, #32]	; (8005d24 <HAL_ETH_MspInit+0x16c>)
 8005d04:	f7fd f9c8 	bl	8003098 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3738      	adds	r7, #56	; 0x38
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40028000 	.word	0x40028000
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40020800 	.word	0x40020800
 8005d1c:	40020000 	.word	0x40020000
 8005d20:	40020400 	.word	0x40020400
 8005d24:	40021800 	.word	0x40021800

08005d28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005d34:	4b4d      	ldr	r3, [pc, #308]	; (8005e6c <low_level_init+0x144>)
 8005d36:	4a4e      	ldr	r2, [pc, #312]	; (8005e70 <low_level_init+0x148>)
 8005d38:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005d3a:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <low_level_init+0x144>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005d40:	4b4a      	ldr	r3, [pc, #296]	; (8005e6c <low_level_init+0x144>)
 8005d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d46:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005d48:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <low_level_init+0x144>)
 8005d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d4e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005d50:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <low_level_init+0x144>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005d56:	2300      	movs	r3, #0
 8005d58:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005d5e:	23e1      	movs	r3, #225	; 0xe1
 8005d60:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005d62:	2300      	movs	r3, #0
 8005d64:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005d66:	2300      	movs	r3, #0
 8005d68:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005d6e:	4a3f      	ldr	r2, [pc, #252]	; (8005e6c <low_level_init+0x144>)
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005d76:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <low_level_init+0x144>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005d7c:	4b3b      	ldr	r3, [pc, #236]	; (8005e6c <low_level_init+0x144>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005d82:	4b3a      	ldr	r3, [pc, #232]	; (8005e6c <low_level_init+0x144>)
 8005d84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005d88:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005d8a:	4838      	ldr	r0, [pc, #224]	; (8005e6c <low_level_init+0x144>)
 8005d8c:	f7fc f894 	bl	8001eb8 <HAL_ETH_Init>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d108      	bne.n	8005dac <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005da0:	f043 0304 	orr.w	r3, r3, #4
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005dac:	2304      	movs	r3, #4
 8005dae:	4a31      	ldr	r2, [pc, #196]	; (8005e74 <low_level_init+0x14c>)
 8005db0:	4931      	ldr	r1, [pc, #196]	; (8005e78 <low_level_init+0x150>)
 8005db2:	482e      	ldr	r0, [pc, #184]	; (8005e6c <low_level_init+0x144>)
 8005db4:	f7fc fa18 	bl	80021e8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005db8:	2304      	movs	r3, #4
 8005dba:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <low_level_init+0x154>)
 8005dbc:	4930      	ldr	r1, [pc, #192]	; (8005e80 <low_level_init+0x158>)
 8005dbe:	482b      	ldr	r0, [pc, #172]	; (8005e6c <low_level_init+0x144>)
 8005dc0:	f7fc fa7a 	bl	80022b8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2206      	movs	r2, #6
 8005dc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005dcc:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <low_level_init+0x144>)
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005dd8:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <low_level_init+0x144>)
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	785a      	ldrb	r2, [r3, #1]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005de4:	4b21      	ldr	r3, [pc, #132]	; (8005e6c <low_level_init+0x144>)
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	789a      	ldrb	r2, [r3, #2]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005df0:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <low_level_init+0x144>)
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	78da      	ldrb	r2, [r3, #3]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <low_level_init+0x144>)
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	791a      	ldrb	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <low_level_init+0x144>)
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	795a      	ldrb	r2, [r3, #5]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005e1a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e22:	f043 030a 	orr.w	r3, r3, #10
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005e2e:	480f      	ldr	r0, [pc, #60]	; (8005e6c <low_level_init+0x144>)
 8005e30:	f7fc fcea 	bl	8002808 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005e34:	f107 0310 	add.w	r3, r7, #16
 8005e38:	461a      	mov	r2, r3
 8005e3a:	211d      	movs	r1, #29
 8005e3c:	480b      	ldr	r0, [pc, #44]	; (8005e6c <low_level_init+0x144>)
 8005e3e:	f7fc fc15 	bl	800266c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f043 030b 	orr.w	r3, r3, #11
 8005e48:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	211d      	movs	r1, #29
 8005e50:	4806      	ldr	r0, [pc, #24]	; (8005e6c <low_level_init+0x144>)
 8005e52:	f7fc fc73 	bl	800273c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005e56:	f107 0310 	add.w	r3, r7, #16
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	211d      	movs	r1, #29
 8005e5e:	4803      	ldr	r0, [pc, #12]	; (8005e6c <low_level_init+0x144>)
 8005e60:	f7fc fc04 	bl	800266c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005e64:	bf00      	nop
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20003cd0 	.word	0x20003cd0
 8005e70:	40028000 	.word	0x40028000
 8005e74:	20002500 	.word	0x20002500
 8005e78:	20000cb0 	.word	0x20000cb0
 8005e7c:	20000d30 	.word	0x20000d30
 8005e80:	20000c30 	.word	0x20000c30

08005e84 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08a      	sub	sp, #40	; 0x28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005e8e:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <low_level_output+0x138>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005ea6:	4b45      	ldr	r3, [pc, #276]	; (8005fbc <low_level_output+0x138>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	e05a      	b.n	8005f6c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da03      	bge.n	8005ec6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005ebe:	23f8      	movs	r3, #248	; 0xf8
 8005ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005ec4:	e05c      	b.n	8005f80 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	895b      	ldrh	r3, [r3, #10]
 8005eca:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005ed0:	e02f      	b.n	8005f32 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	18d0      	adds	r0, r2, r3
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	18d1      	adds	r1, r2, r3
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f00a fadf 	bl	80104ac <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	da03      	bge.n	8005f04 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005efc:	23f8      	movs	r3, #248	; 0xf8
 8005efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005f02:	e03d      	b.n	8005f80 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005f14:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005f20:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005f2c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d8c8      	bhi.n	8005ed2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	18d0      	adds	r0, r2, r3
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4619      	mov	r1, r3
 8005f52:	f00a faab 	bl	80104ac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1a1      	bne.n	8005eb6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	4811      	ldr	r0, [pc, #68]	; (8005fbc <low_level_output+0x138>)
 8005f76:	f7fc fa0b 	bl	8002390 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <low_level_output+0x138>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <low_level_output+0x138>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <low_level_output+0x138>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	461a      	mov	r2, r3
 8005faa:	2300      	movs	r3, #0
 8005fac:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8005fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3728      	adds	r7, #40	; 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20003cd0 	.word	0x20003cd0

08005fc0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005fe4:	484e      	ldr	r0, [pc, #312]	; (8006120 <low_level_input+0x160>)
 8005fe6:	f7fc fabd 	bl	8002564 <HAL_ETH_GetReceivedFrame>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <low_level_input+0x34>

    return NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e091      	b.n	8006118 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005ff4:	4b4a      	ldr	r3, [pc, #296]	; (8006120 <low_level_input+0x160>)
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005ffa:	4b49      	ldr	r3, [pc, #292]	; (8006120 <low_level_input+0x160>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006000:	89fb      	ldrh	r3, [r7, #14]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006006:	89fb      	ldrh	r3, [r7, #14]
 8006008:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800600c:	4619      	mov	r1, r3
 800600e:	2000      	movs	r0, #0
 8006010:	f001 f934 	bl	800727c <pbuf_alloc>
 8006014:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d04b      	beq.n	80060b4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800601c:	4b40      	ldr	r3, [pc, #256]	; (8006120 <low_level_input+0x160>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	62bb      	str	r3, [r7, #40]	; 0x28
 800602a:	e040      	b.n	80060ae <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	895b      	ldrh	r3, [r3, #10]
 8006030:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006036:	e021      	b.n	800607c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	18d0      	adds	r0, r2, r3
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	18d1      	adds	r1, r2, r3
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	461a      	mov	r2, r3
 8006050:	f00a fa2c 	bl	80104ac <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800606a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006076:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006086:	4293      	cmp	r3, r2
 8006088:	d8d6      	bhi.n	8006038 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	18d0      	adds	r0, r2, r3
 8006092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4619      	mov	r1, r3
 800609c:	f00a fa06 	bl	80104ac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1bb      	bne.n	800602c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <low_level_input+0x160>)
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e00b      	b.n	80060d8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3301      	adds	r3, #1
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	4b11      	ldr	r3, [pc, #68]	; (8006120 <low_level_input+0x160>)
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d3ee      	bcc.n	80060c0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80060e2:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <low_level_input+0x160>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80060e8:	4b0d      	ldr	r3, [pc, #52]	; (8006120 <low_level_input+0x160>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <low_level_input+0x160>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006102:	461a      	mov	r2, r3
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006108:	4b05      	ldr	r3, [pc, #20]	; (8006120 <low_level_input+0x160>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006110:	461a      	mov	r2, r3
 8006112:	2300      	movs	r3, #0
 8006114:	6093      	str	r3, [r2, #8]
  }
  return p;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006118:	4618      	mov	r0, r3
 800611a:	3730      	adds	r7, #48	; 0x30
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20003cd0 	.word	0x20003cd0

08006124 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff47 	bl	8005fc0 <low_level_input>
 8006132:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d010      	beq.n	800615c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	4798      	blx	r3
 8006144:	4603      	mov	r3, r0
 8006146:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006148:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f001 fb77 	bl	8007844 <pbuf_free>
    p = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e000      	b.n	800615e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800615c:	bf00      	nop
  }
}
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <ethernetif_init+0x1c>
 8006172:	4b0e      	ldr	r3, [pc, #56]	; (80061ac <ethernetif_init+0x48>)
 8006174:	f240 2212 	movw	r2, #530	; 0x212
 8006178:	490d      	ldr	r1, [pc, #52]	; (80061b0 <ethernetif_init+0x4c>)
 800617a:	480e      	ldr	r0, [pc, #56]	; (80061b4 <ethernetif_init+0x50>)
 800617c:	f00a fc38 	bl	80109f0 <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2273      	movs	r2, #115	; 0x73
 8006184:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2274      	movs	r2, #116	; 0x74
 800618c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <ethernetif_init+0x54>)
 8006194:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a08      	ldr	r2, [pc, #32]	; (80061bc <ethernetif_init+0x58>)
 800619a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fdc3 	bl	8005d28 <low_level_init>

  return ERR_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	08018684 	.word	0x08018684
 80061b0:	080186a0 	.word	0x080186a0
 80061b4:	080186b0 	.word	0x080186b0
 80061b8:	0800e559 	.word	0x0800e559
 80061bc:	08005e85 	.word	0x08005e85

080061c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80061c4:	f7fb fd36 	bl	8001c34 <HAL_GetTick>
 80061c8:	4603      	mov	r3, r0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d05d      	beq.n	80062ae <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80061f2:	4b34      	ldr	r3, [pc, #208]	; (80062c4 <ethernetif_update_config+0xf4>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d03f      	beq.n	800627a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80061fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061fe:	2100      	movs	r1, #0
 8006200:	4830      	ldr	r0, [pc, #192]	; (80062c4 <ethernetif_update_config+0xf4>)
 8006202:	f7fc fa9b 	bl	800273c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006206:	f7fb fd15 	bl	8001c34 <HAL_GetTick>
 800620a:	4603      	mov	r3, r0
 800620c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	461a      	mov	r2, r3
 8006214:	2101      	movs	r1, #1
 8006216:	482b      	ldr	r0, [pc, #172]	; (80062c4 <ethernetif_update_config+0xf4>)
 8006218:	f7fc fa28 	bl	800266c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800621c:	f7fb fd0a 	bl	8001c34 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800622a:	d828      	bhi.n	800627e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0eb      	beq.n	800620e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	461a      	mov	r2, r3
 800623c:	2110      	movs	r1, #16
 800623e:	4821      	ldr	r0, [pc, #132]	; (80062c4 <ethernetif_update_config+0xf4>)
 8006240:	f7fc fa14 	bl	800266c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800624e:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <ethernetif_update_config+0xf4>)
 8006250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e002      	b.n	800625e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <ethernetif_update_config+0xf4>)
 800625a:	2200      	movs	r2, #0
 800625c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006268:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <ethernetif_update_config+0xf4>)
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
 800626e:	e016      	b.n	800629e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006270:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <ethernetif_update_config+0xf4>)
 8006272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	e011      	b.n	800629e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <ethernetif_update_config+0xb0>
          goto error;
 800627e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <ethernetif_update_config+0xf4>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <ethernetif_update_config+0xf4>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006290:	4313      	orrs	r3, r2
 8006292:	b29b      	uxth	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	2100      	movs	r1, #0
 8006298:	480a      	ldr	r0, [pc, #40]	; (80062c4 <ethernetif_update_config+0xf4>)
 800629a:	f7fc fa4f 	bl	800273c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800629e:	2100      	movs	r1, #0
 80062a0:	4808      	ldr	r0, [pc, #32]	; (80062c4 <ethernetif_update_config+0xf4>)
 80062a2:	f7fc fb0f 	bl	80028c4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80062a6:	4807      	ldr	r0, [pc, #28]	; (80062c4 <ethernetif_update_config+0xf4>)
 80062a8:	f7fc faae 	bl	8002808 <HAL_ETH_Start>
 80062ac:	e002      	b.n	80062b4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80062ae:	4805      	ldr	r0, [pc, #20]	; (80062c4 <ethernetif_update_config+0xf4>)
 80062b0:	f7fc fad9 	bl	8002866 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f807 	bl	80062c8 <ethernetif_notify_conn_changed>
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20003cd0 	.word	0x20003cd0

080062c8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	b21a      	sxth	r2, r3
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b21b      	sxth	r3, r3
 80062f4:	4313      	orrs	r3, r2
 80062f6:	b21b      	sxth	r3, r3
 80062f8:	b29b      	uxth	r3, r3
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	061a      	lsls	r2, r3, #24
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	0e1b      	lsrs	r3, r3, #24
 800632a:	4313      	orrs	r3, r2
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006342:	f000 f8d5 	bl	80064f0 <mem_init>
  memp_init();
 8006346:	f000 fbdb 	bl	8006b00 <memp_init>
  pbuf_init();
  netif_init();
 800634a:	f000 fc93 	bl	8006c74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800634e:	f007 f84f 	bl	800d3f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006352:	f001 fda7 	bl	8007ea4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006356:	f006 ffc1 	bl	800d2dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800636e:	4b05      	ldr	r3, [pc, #20]	; (8006384 <ptr_to_mem+0x20>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	4413      	add	r3, r2
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20004384 	.word	0x20004384

08006388 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006390:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <mem_to_ptr+0x20>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	b29b      	uxth	r3, r3
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20004384 	.word	0x20004384

080063ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80063b4:	4b45      	ldr	r3, [pc, #276]	; (80064cc <plug_holes+0x120>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d206      	bcs.n	80063cc <plug_holes+0x20>
 80063be:	4b44      	ldr	r3, [pc, #272]	; (80064d0 <plug_holes+0x124>)
 80063c0:	f240 12df 	movw	r2, #479	; 0x1df
 80063c4:	4943      	ldr	r1, [pc, #268]	; (80064d4 <plug_holes+0x128>)
 80063c6:	4844      	ldr	r0, [pc, #272]	; (80064d8 <plug_holes+0x12c>)
 80063c8:	f00a fb12 	bl	80109f0 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <plug_holes+0x130>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d306      	bcc.n	80063e4 <plug_holes+0x38>
 80063d6:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <plug_holes+0x124>)
 80063d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80063dc:	4940      	ldr	r1, [pc, #256]	; (80064e0 <plug_holes+0x134>)
 80063de:	483e      	ldr	r0, [pc, #248]	; (80064d8 <plug_holes+0x12c>)
 80063e0:	f00a fb06 	bl	80109f0 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	791b      	ldrb	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <plug_holes+0x4e>
 80063ec:	4b38      	ldr	r3, [pc, #224]	; (80064d0 <plug_holes+0x124>)
 80063ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 80063f2:	493c      	ldr	r1, [pc, #240]	; (80064e4 <plug_holes+0x138>)
 80063f4:	4838      	ldr	r0, [pc, #224]	; (80064d8 <plug_holes+0x12c>)
 80063f6:	f00a fafb 	bl	80109f0 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006402:	d906      	bls.n	8006412 <plug_holes+0x66>
 8006404:	4b32      	ldr	r3, [pc, #200]	; (80064d0 <plug_holes+0x124>)
 8006406:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800640a:	4937      	ldr	r1, [pc, #220]	; (80064e8 <plug_holes+0x13c>)
 800640c:	4832      	ldr	r0, [pc, #200]	; (80064d8 <plug_holes+0x12c>)
 800640e:	f00a faef 	bl	80109f0 <printf>

  nmem = ptr_to_mem(mem->next);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff ffa4 	bl	8006364 <ptr_to_mem>
 800641c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	429a      	cmp	r2, r3
 8006424:	d024      	beq.n	8006470 <plug_holes+0xc4>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	791b      	ldrb	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d120      	bne.n	8006470 <plug_holes+0xc4>
 800642e:	4b2b      	ldr	r3, [pc, #172]	; (80064dc <plug_holes+0x130>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d01b      	beq.n	8006470 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006438:	4b2c      	ldr	r3, [pc, #176]	; (80064ec <plug_holes+0x140>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	429a      	cmp	r2, r3
 8006440:	d102      	bne.n	8006448 <plug_holes+0x9c>
      lfree = mem;
 8006442:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <plug_holes+0x140>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	881a      	ldrh	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006458:	d00a      	beq.n	8006470 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff ff80 	bl	8006364 <ptr_to_mem>
 8006464:	4604      	mov	r4, r0
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff ff8e 	bl	8006388 <mem_to_ptr>
 800646c:	4603      	mov	r3, r0
 800646e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	885b      	ldrh	r3, [r3, #2]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ff75 	bl	8006364 <ptr_to_mem>
 800647a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d01f      	beq.n	80064c4 <plug_holes+0x118>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	791b      	ldrb	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d11b      	bne.n	80064c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800648c:	4b17      	ldr	r3, [pc, #92]	; (80064ec <plug_holes+0x140>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d102      	bne.n	800649c <plug_holes+0xf0>
      lfree = pmem;
 8006496:	4a15      	ldr	r2, [pc, #84]	; (80064ec <plug_holes+0x140>)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	881a      	ldrh	r2, [r3, #0]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064ac:	d00a      	beq.n	80064c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff ff56 	bl	8006364 <ptr_to_mem>
 80064b8:	4604      	mov	r4, r0
 80064ba:	68b8      	ldr	r0, [r7, #8]
 80064bc:	f7ff ff64 	bl	8006388 <mem_to_ptr>
 80064c0:	4603      	mov	r3, r0
 80064c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}
 80064cc:	20004384 	.word	0x20004384
 80064d0:	080186d8 	.word	0x080186d8
 80064d4:	08018708 	.word	0x08018708
 80064d8:	08018720 	.word	0x08018720
 80064dc:	20004388 	.word	0x20004388
 80064e0:	08018748 	.word	0x08018748
 80064e4:	08018764 	.word	0x08018764
 80064e8:	08018780 	.word	0x08018780
 80064ec:	2000438c 	.word	0x2000438c

080064f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <mem_init+0x68>)
 80064f8:	3303      	adds	r3, #3
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	461a      	mov	r2, r3
 8006500:	4b16      	ldr	r3, [pc, #88]	; (800655c <mem_init+0x6c>)
 8006502:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <mem_init+0x6c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006510:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800651e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8006522:	f7ff ff1f 	bl	8006364 <ptr_to_mem>
 8006526:	4603      	mov	r3, r0
 8006528:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <mem_init+0x70>)
 800652a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800652c:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <mem_init+0x70>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <mem_init+0x70>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800653c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800653e:	4b08      	ldr	r3, [pc, #32]	; (8006560 <mem_init+0x70>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006546:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <mem_init+0x6c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a05      	ldr	r2, [pc, #20]	; (8006564 <mem_init+0x74>)
 800654e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20003d30 	.word	0x20003d30
 800655c:	20004384 	.word	0x20004384
 8006560:	20004388 	.word	0x20004388
 8006564:	2000438c 	.word	0x2000438c

08006568 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ff09 	bl	8006388 <mem_to_ptr>
 8006576:	4603      	mov	r3, r0
 8006578:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fef0 	bl	8006364 <ptr_to_mem>
 8006584:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	885b      	ldrh	r3, [r3, #2]
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff feea 	bl	8006364 <ptr_to_mem>
 8006590:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800659a:	d818      	bhi.n	80065ce <mem_link_valid+0x66>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	885b      	ldrh	r3, [r3, #2]
 80065a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80065a4:	d813      	bhi.n	80065ce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80065aa:	8afa      	ldrh	r2, [r7, #22]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d004      	beq.n	80065ba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	8afa      	ldrh	r2, [r7, #22]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d109      	bne.n	80065ce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <mem_link_valid+0x74>)
 80065bc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d006      	beq.n	80065d2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	885b      	ldrh	r3, [r3, #2]
 80065c8:	8afa      	ldrh	r2, [r7, #22]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d001      	beq.n	80065d2 <mem_link_valid+0x6a>
    return 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e000      	b.n	80065d4 <mem_link_valid+0x6c>
  }
  return 1;
 80065d2:	2301      	movs	r3, #1
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20004388 	.word	0x20004388

080065e0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d04c      	beq.n	8006688 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <mem_free+0xb0>)
 80065fa:	f240 2273 	movw	r2, #627	; 0x273
 80065fe:	4925      	ldr	r1, [pc, #148]	; (8006694 <mem_free+0xb4>)
 8006600:	4825      	ldr	r0, [pc, #148]	; (8006698 <mem_free+0xb8>)
 8006602:	f00a f9f5 	bl	80109f0 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006606:	e040      	b.n	800668a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3b08      	subs	r3, #8
 800660c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <mem_free+0xbc>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	429a      	cmp	r2, r3
 8006616:	d306      	bcc.n	8006626 <mem_free+0x46>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f103 020c 	add.w	r2, r3, #12
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <mem_free+0xc0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d907      	bls.n	8006636 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <mem_free+0xb0>)
 8006628:	f240 227f 	movw	r2, #639	; 0x27f
 800662c:	491d      	ldr	r1, [pc, #116]	; (80066a4 <mem_free+0xc4>)
 800662e:	481a      	ldr	r0, [pc, #104]	; (8006698 <mem_free+0xb8>)
 8006630:	f00a f9de 	bl	80109f0 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006634:	e029      	b.n	800668a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	791b      	ldrb	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d107      	bne.n	800664e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <mem_free+0xb0>)
 8006640:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006644:	4918      	ldr	r1, [pc, #96]	; (80066a8 <mem_free+0xc8>)
 8006646:	4814      	ldr	r0, [pc, #80]	; (8006698 <mem_free+0xb8>)
 8006648:	f00a f9d2 	bl	80109f0 <printf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800664c:	e01d      	b.n	800668a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff ff8a 	bl	8006568 <mem_link_valid>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800665a:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <mem_free+0xb0>)
 800665c:	f240 2295 	movw	r2, #661	; 0x295
 8006660:	4912      	ldr	r1, [pc, #72]	; (80066ac <mem_free+0xcc>)
 8006662:	480d      	ldr	r0, [pc, #52]	; (8006698 <mem_free+0xb8>)
 8006664:	f00a f9c4 	bl	80109f0 <printf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006668:	e00f      	b.n	800668a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <mem_free+0xd0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	429a      	cmp	r2, r3
 8006678:	d202      	bcs.n	8006680 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800667a:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <mem_free+0xd0>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff fe93 	bl	80063ac <plug_holes>
 8006686:	e000      	b.n	800668a <mem_free+0xaa>
    return;
 8006688:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	080186d8 	.word	0x080186d8
 8006694:	080187ac 	.word	0x080187ac
 8006698:	08018720 	.word	0x08018720
 800669c:	20004384 	.word	0x20004384
 80066a0:	20004388 	.word	0x20004388
 80066a4:	080187d0 	.word	0x080187d0
 80066a8:	080187ec 	.word	0x080187ec
 80066ac:	08018814 	.word	0x08018814
 80066b0:	2000438c 	.word	0x2000438c

080066b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80066c0:	887b      	ldrh	r3, [r7, #2]
 80066c2:	3303      	adds	r3, #3
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80066cc:	8bfb      	ldrh	r3, [r7, #30]
 80066ce:	2b0b      	cmp	r3, #11
 80066d0:	d801      	bhi.n	80066d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80066d2:	230c      	movs	r3, #12
 80066d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80066d6:	8bfb      	ldrh	r3, [r7, #30]
 80066d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066dc:	d803      	bhi.n	80066e6 <mem_trim+0x32>
 80066de:	8bfa      	ldrh	r2, [r7, #30]
 80066e0:	887b      	ldrh	r3, [r7, #2]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d201      	bcs.n	80066ea <mem_trim+0x36>
    return NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e0cc      	b.n	8006884 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80066ea:	4b68      	ldr	r3, [pc, #416]	; (800688c <mem_trim+0x1d8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d304      	bcc.n	80066fe <mem_trim+0x4a>
 80066f4:	4b66      	ldr	r3, [pc, #408]	; (8006890 <mem_trim+0x1dc>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d306      	bcc.n	800670c <mem_trim+0x58>
 80066fe:	4b65      	ldr	r3, [pc, #404]	; (8006894 <mem_trim+0x1e0>)
 8006700:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006704:	4964      	ldr	r1, [pc, #400]	; (8006898 <mem_trim+0x1e4>)
 8006706:	4865      	ldr	r0, [pc, #404]	; (800689c <mem_trim+0x1e8>)
 8006708:	f00a f972 	bl	80109f0 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800670c:	4b5f      	ldr	r3, [pc, #380]	; (800688c <mem_trim+0x1d8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	429a      	cmp	r2, r3
 8006714:	d304      	bcc.n	8006720 <mem_trim+0x6c>
 8006716:	4b5e      	ldr	r3, [pc, #376]	; (8006890 <mem_trim+0x1dc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d301      	bcc.n	8006724 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	e0af      	b.n	8006884 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3b08      	subs	r3, #8
 8006728:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800672a:	69b8      	ldr	r0, [r7, #24]
 800672c:	f7ff fe2c 	bl	8006388 <mem_to_ptr>
 8006730:	4603      	mov	r3, r0
 8006732:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	881a      	ldrh	r2, [r3, #0]
 8006738:	8afb      	ldrh	r3, [r7, #22]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b08      	subs	r3, #8
 8006740:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006742:	8bfa      	ldrh	r2, [r7, #30]
 8006744:	8abb      	ldrh	r3, [r7, #20]
 8006746:	429a      	cmp	r2, r3
 8006748:	d906      	bls.n	8006758 <mem_trim+0xa4>
 800674a:	4b52      	ldr	r3, [pc, #328]	; (8006894 <mem_trim+0x1e0>)
 800674c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006750:	4953      	ldr	r1, [pc, #332]	; (80068a0 <mem_trim+0x1ec>)
 8006752:	4852      	ldr	r0, [pc, #328]	; (800689c <mem_trim+0x1e8>)
 8006754:	f00a f94c 	bl	80109f0 <printf>
  if (newsize > size) {
 8006758:	8bfa      	ldrh	r2, [r7, #30]
 800675a:	8abb      	ldrh	r3, [r7, #20]
 800675c:	429a      	cmp	r2, r3
 800675e:	d901      	bls.n	8006764 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	e08f      	b.n	8006884 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006764:	8bfa      	ldrh	r2, [r7, #30]
 8006766:	8abb      	ldrh	r3, [r7, #20]
 8006768:	429a      	cmp	r2, r3
 800676a:	d101      	bne.n	8006770 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	e089      	b.n	8006884 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fdf5 	bl	8006364 <ptr_to_mem>
 800677a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	791b      	ldrb	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d13f      	bne.n	8006804 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800678c:	d106      	bne.n	800679c <mem_trim+0xe8>
 800678e:	4b41      	ldr	r3, [pc, #260]	; (8006894 <mem_trim+0x1e0>)
 8006790:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006794:	4943      	ldr	r1, [pc, #268]	; (80068a4 <mem_trim+0x1f0>)
 8006796:	4841      	ldr	r0, [pc, #260]	; (800689c <mem_trim+0x1e8>)
 8006798:	f00a f92a 	bl	80109f0 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80067a2:	8afa      	ldrh	r2, [r7, #22]
 80067a4:	8bfb      	ldrh	r3, [r7, #30]
 80067a6:	4413      	add	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3308      	adds	r3, #8
 80067ac:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80067ae:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <mem_trim+0x1f4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d106      	bne.n	80067c6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80067b8:	89fb      	ldrh	r3, [r7, #14]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fdd2 	bl	8006364 <ptr_to_mem>
 80067c0:	4603      	mov	r3, r0
 80067c2:	4a39      	ldr	r2, [pc, #228]	; (80068a8 <mem_trim+0x1f4>)
 80067c4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80067c6:	89fb      	ldrh	r3, [r7, #14]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff fdcb 	bl	8006364 <ptr_to_mem>
 80067ce:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2200      	movs	r2, #0
 80067d4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	89ba      	ldrh	r2, [r7, #12]
 80067da:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	8afa      	ldrh	r2, [r7, #22]
 80067e0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	89fa      	ldrh	r2, [r7, #14]
 80067e6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067f0:	d047      	beq.n	8006882 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fdb4 	bl	8006364 <ptr_to_mem>
 80067fc:	4602      	mov	r2, r0
 80067fe:	89fb      	ldrh	r3, [r7, #14]
 8006800:	8053      	strh	r3, [r2, #2]
 8006802:	e03e      	b.n	8006882 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006804:	8bfb      	ldrh	r3, [r7, #30]
 8006806:	f103 0214 	add.w	r2, r3, #20
 800680a:	8abb      	ldrh	r3, [r7, #20]
 800680c:	429a      	cmp	r2, r3
 800680e:	d838      	bhi.n	8006882 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006810:	8afa      	ldrh	r2, [r7, #22]
 8006812:	8bfb      	ldrh	r3, [r7, #30]
 8006814:	4413      	add	r3, r2
 8006816:	b29b      	uxth	r3, r3
 8006818:	3308      	adds	r3, #8
 800681a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006824:	d106      	bne.n	8006834 <mem_trim+0x180>
 8006826:	4b1b      	ldr	r3, [pc, #108]	; (8006894 <mem_trim+0x1e0>)
 8006828:	f240 3216 	movw	r2, #790	; 0x316
 800682c:	491d      	ldr	r1, [pc, #116]	; (80068a4 <mem_trim+0x1f0>)
 800682e:	481b      	ldr	r0, [pc, #108]	; (800689c <mem_trim+0x1e8>)
 8006830:	f00a f8de 	bl	80109f0 <printf>
    mem2 = ptr_to_mem(ptr2);
 8006834:	89fb      	ldrh	r3, [r7, #14]
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff fd94 	bl	8006364 <ptr_to_mem>
 800683c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800683e:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <mem_trim+0x1f4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	429a      	cmp	r2, r3
 8006846:	d202      	bcs.n	800684e <mem_trim+0x19a>
      lfree = mem2;
 8006848:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <mem_trim+0x1f4>)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2200      	movs	r2, #0
 8006852:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	881a      	ldrh	r2, [r3, #0]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	8afa      	ldrh	r2, [r7, #22]
 8006860:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	89fa      	ldrh	r2, [r7, #14]
 8006866:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006870:	d007      	beq.n	8006882 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fd74 	bl	8006364 <ptr_to_mem>
 800687c:	4602      	mov	r2, r0
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006882:	687b      	ldr	r3, [r7, #4]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20004384 	.word	0x20004384
 8006890:	20004388 	.word	0x20004388
 8006894:	080186d8 	.word	0x080186d8
 8006898:	08018848 	.word	0x08018848
 800689c:	08018720 	.word	0x08018720
 80068a0:	08018860 	.word	0x08018860
 80068a4:	08018880 	.word	0x08018880
 80068a8:	2000438c 	.word	0x2000438c

080068ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <mem_malloc+0x14>
    return NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	e0d9      	b.n	8006a74 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	3303      	adds	r3, #3
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80068cc:	8bbb      	ldrh	r3, [r7, #28]
 80068ce:	2b0b      	cmp	r3, #11
 80068d0:	d801      	bhi.n	80068d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80068d2:	230c      	movs	r3, #12
 80068d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80068d6:	8bbb      	ldrh	r3, [r7, #28]
 80068d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068dc:	d803      	bhi.n	80068e6 <mem_malloc+0x3a>
 80068de:	8bba      	ldrh	r2, [r7, #28]
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d201      	bcs.n	80068ea <mem_malloc+0x3e>
    return NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e0c4      	b.n	8006a74 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80068ea:	4b64      	ldr	r3, [pc, #400]	; (8006a7c <mem_malloc+0x1d0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fd4a 	bl	8006388 <mem_to_ptr>
 80068f4:	4603      	mov	r3, r0
 80068f6:	83fb      	strh	r3, [r7, #30]
 80068f8:	e0b4      	b.n	8006a64 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80068fa:	8bfb      	ldrh	r3, [r7, #30]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fd31 	bl	8006364 <ptr_to_mem>
 8006902:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	791b      	ldrb	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f040 80a4 	bne.w	8006a56 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	8bfb      	ldrh	r3, [r7, #30]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f1a3 0208 	sub.w	r2, r3, #8
 800691c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800691e:	429a      	cmp	r2, r3
 8006920:	f0c0 8099 	bcc.w	8006a56 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	8bfb      	ldrh	r3, [r7, #30]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f1a3 0208 	sub.w	r2, r3, #8
 8006932:	8bbb      	ldrh	r3, [r7, #28]
 8006934:	3314      	adds	r3, #20
 8006936:	429a      	cmp	r2, r3
 8006938:	d333      	bcc.n	80069a2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800693a:	8bfa      	ldrh	r2, [r7, #30]
 800693c:	8bbb      	ldrh	r3, [r7, #28]
 800693e:	4413      	add	r3, r2
 8006940:	b29b      	uxth	r3, r3
 8006942:	3308      	adds	r3, #8
 8006944:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006946:	8a7b      	ldrh	r3, [r7, #18]
 8006948:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800694c:	d106      	bne.n	800695c <mem_malloc+0xb0>
 800694e:	4b4c      	ldr	r3, [pc, #304]	; (8006a80 <mem_malloc+0x1d4>)
 8006950:	f240 3287 	movw	r2, #903	; 0x387
 8006954:	494b      	ldr	r1, [pc, #300]	; (8006a84 <mem_malloc+0x1d8>)
 8006956:	484c      	ldr	r0, [pc, #304]	; (8006a88 <mem_malloc+0x1dc>)
 8006958:	f00a f84a 	bl	80109f0 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800695c:	8a7b      	ldrh	r3, [r7, #18]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fd00 	bl	8006364 <ptr_to_mem>
 8006964:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	881a      	ldrh	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8bfa      	ldrh	r2, [r7, #30]
 8006978:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	8a7a      	ldrh	r2, [r7, #18]
 800697e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2201      	movs	r2, #1
 8006984:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800698e:	d00b      	beq.n	80069a8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fce5 	bl	8006364 <ptr_to_mem>
 800699a:	4602      	mov	r2, r0
 800699c:	8a7b      	ldrh	r3, [r7, #18]
 800699e:	8053      	strh	r3, [r2, #2]
 80069a0:	e002      	b.n	80069a8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2201      	movs	r2, #1
 80069a6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80069a8:	4b34      	ldr	r3, [pc, #208]	; (8006a7c <mem_malloc+0x1d0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d127      	bne.n	8006a02 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80069b2:	4b32      	ldr	r3, [pc, #200]	; (8006a7c <mem_malloc+0x1d0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80069b8:	e005      	b.n	80069c6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fcd0 	bl	8006364 <ptr_to_mem>
 80069c4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	791b      	ldrb	r3, [r3, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <mem_malloc+0x12c>
 80069ce:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <mem_malloc+0x1e0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d1f0      	bne.n	80069ba <mem_malloc+0x10e>
          }
          lfree = cur;
 80069d8:	4a28      	ldr	r2, [pc, #160]	; (8006a7c <mem_malloc+0x1d0>)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80069de:	4b27      	ldr	r3, [pc, #156]	; (8006a7c <mem_malloc+0x1d0>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b2a      	ldr	r3, [pc, #168]	; (8006a8c <mem_malloc+0x1e0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d00b      	beq.n	8006a02 <mem_malloc+0x156>
 80069ea:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <mem_malloc+0x1d0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	791b      	ldrb	r3, [r3, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <mem_malloc+0x156>
 80069f4:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <mem_malloc+0x1d4>)
 80069f6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80069fa:	4925      	ldr	r1, [pc, #148]	; (8006a90 <mem_malloc+0x1e4>)
 80069fc:	4822      	ldr	r0, [pc, #136]	; (8006a88 <mem_malloc+0x1dc>)
 80069fe:	f009 fff7 	bl	80109f0 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006a02:	8bba      	ldrh	r2, [r7, #28]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	4413      	add	r3, r2
 8006a08:	3308      	adds	r3, #8
 8006a0a:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <mem_malloc+0x1e0>)
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d906      	bls.n	8006a20 <mem_malloc+0x174>
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <mem_malloc+0x1d4>)
 8006a14:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006a18:	491e      	ldr	r1, [pc, #120]	; (8006a94 <mem_malloc+0x1e8>)
 8006a1a:	481b      	ldr	r0, [pc, #108]	; (8006a88 <mem_malloc+0x1dc>)
 8006a1c:	f009 ffe8 	bl	80109f0 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <mem_malloc+0x18c>
 8006a2a:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <mem_malloc+0x1d4>)
 8006a2c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006a30:	4919      	ldr	r1, [pc, #100]	; (8006a98 <mem_malloc+0x1ec>)
 8006a32:	4815      	ldr	r0, [pc, #84]	; (8006a88 <mem_malloc+0x1dc>)
 8006a34:	f009 ffdc 	bl	80109f0 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d006      	beq.n	8006a50 <mem_malloc+0x1a4>
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <mem_malloc+0x1d4>)
 8006a44:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006a48:	4914      	ldr	r1, [pc, #80]	; (8006a9c <mem_malloc+0x1f0>)
 8006a4a:	480f      	ldr	r0, [pc, #60]	; (8006a88 <mem_malloc+0x1dc>)
 8006a4c:	f009 ffd0 	bl	80109f0 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	3308      	adds	r3, #8
 8006a54:	e00e      	b.n	8006a74 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006a56:	8bfb      	ldrh	r3, [r7, #30]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fc83 	bl	8006364 <ptr_to_mem>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a64:	8bfa      	ldrh	r2, [r7, #30]
 8006a66:	8bbb      	ldrh	r3, [r7, #28]
 8006a68:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	f4ff af44 	bcc.w	80068fa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	2000438c 	.word	0x2000438c
 8006a80:	080186d8 	.word	0x080186d8
 8006a84:	08018880 	.word	0x08018880
 8006a88:	08018720 	.word	0x08018720
 8006a8c:	20004388 	.word	0x20004388
 8006a90:	08018894 	.word	0x08018894
 8006a94:	080188b0 	.word	0x080188b0
 8006a98:	080188e0 	.word	0x080188e0
 8006a9c:	08018910 	.word	0x08018910

08006aa0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	3303      	adds	r3, #3
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	e011      	b.n	8006ae6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	885b      	ldrh	r3, [r3, #2]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4293      	cmp	r3, r2
 8006af0:	dbe7      	blt.n	8006ac2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006b06:	2300      	movs	r3, #0
 8006b08:	80fb      	strh	r3, [r7, #6]
 8006b0a:	e009      	b.n	8006b20 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <memp_init+0x30>)
 8006b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ffc3 	bl	8006aa0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	80fb      	strh	r3, [r7, #6]
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d9f2      	bls.n	8006b0c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	0801b0e8 	.word	0x0801b0e8

08006b34 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d012      	beq.n	8006b70 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d006      	beq.n	8006b6c <do_memp_malloc_pool+0x38>
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <do_memp_malloc_pool+0x48>)
 8006b60:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b64:	4906      	ldr	r1, [pc, #24]	; (8006b80 <do_memp_malloc_pool+0x4c>)
 8006b66:	4807      	ldr	r0, [pc, #28]	; (8006b84 <do_memp_malloc_pool+0x50>)
 8006b68:	f009 ff42 	bl	80109f0 <printf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	e000      	b.n	8006b72 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	08018934 	.word	0x08018934
 8006b80:	08018964 	.word	0x08018964
 8006b84:	08018988 	.word	0x08018988

08006b88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d908      	bls.n	8006baa <memp_malloc+0x22>
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <memp_malloc+0x3c>)
 8006b9a:	f240 1257 	movw	r2, #343	; 0x157
 8006b9e:	490a      	ldr	r1, [pc, #40]	; (8006bc8 <memp_malloc+0x40>)
 8006ba0:	480a      	ldr	r0, [pc, #40]	; (8006bcc <memp_malloc+0x44>)
 8006ba2:	f009 ff25 	bl	80109f0 <printf>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e008      	b.n	8006bbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	4a08      	ldr	r2, [pc, #32]	; (8006bd0 <memp_malloc+0x48>)
 8006bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff ffbe 	bl	8006b34 <do_memp_malloc_pool>
 8006bb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	08018934 	.word	0x08018934
 8006bc8:	080189c4 	.word	0x080189c4
 8006bcc:	08018988 	.word	0x08018988
 8006bd0:	0801b0e8 	.word	0x0801b0e8

08006bd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <do_memp_free_pool+0x22>
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <do_memp_free_pool+0x40>)
 8006bea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006bee:	490a      	ldr	r1, [pc, #40]	; (8006c18 <do_memp_free_pool+0x44>)
 8006bf0:	480a      	ldr	r0, [pc, #40]	; (8006c1c <do_memp_free_pool+0x48>)
 8006bf2:	f009 fefd 	bl	80109f0 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006c0c:	bf00      	nop
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	08018934 	.word	0x08018934
 8006c18:	080189e4 	.word	0x080189e4
 8006c1c:	08018988 	.word	0x08018988

08006c20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d907      	bls.n	8006c42 <memp_free+0x22>
 8006c32:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <memp_free+0x44>)
 8006c34:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006c38:	490b      	ldr	r1, [pc, #44]	; (8006c68 <memp_free+0x48>)
 8006c3a:	480c      	ldr	r0, [pc, #48]	; (8006c6c <memp_free+0x4c>)
 8006c3c:	f009 fed8 	bl	80109f0 <printf>
 8006c40:	e00c      	b.n	8006c5c <memp_free+0x3c>

  if (mem == NULL) {
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <memp_free+0x50>)
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff ffbe 	bl	8006bd4 <do_memp_free_pool>
 8006c58:	e000      	b.n	8006c5c <memp_free+0x3c>
    return;
 8006c5a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	08018934 	.word	0x08018934
 8006c68:	08018a04 	.word	0x08018a04
 8006c6c:	08018988 	.word	0x08018988
 8006c70:	0801b0e8 	.word	0x0801b0e8

08006c74 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006c78:	bf00      	nop
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d108      	bne.n	8006caa <netif_add+0x26>
 8006c98:	4b57      	ldr	r3, [pc, #348]	; (8006df8 <netif_add+0x174>)
 8006c9a:	f240 1227 	movw	r2, #295	; 0x127
 8006c9e:	4957      	ldr	r1, [pc, #348]	; (8006dfc <netif_add+0x178>)
 8006ca0:	4857      	ldr	r0, [pc, #348]	; (8006e00 <netif_add+0x17c>)
 8006ca2:	f009 fea5 	bl	80109f0 <printf>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e0a2      	b.n	8006df0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d108      	bne.n	8006cc2 <netif_add+0x3e>
 8006cb0:	4b51      	ldr	r3, [pc, #324]	; (8006df8 <netif_add+0x174>)
 8006cb2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006cb6:	4953      	ldr	r1, [pc, #332]	; (8006e04 <netif_add+0x180>)
 8006cb8:	4851      	ldr	r0, [pc, #324]	; (8006e00 <netif_add+0x17c>)
 8006cba:	f009 fe99 	bl	80109f0 <printf>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e096      	b.n	8006df0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006cc8:	4b4f      	ldr	r3, [pc, #316]	; (8006e08 <netif_add+0x184>)
 8006cca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006cd2:	4b4d      	ldr	r3, [pc, #308]	; (8006e08 <netif_add+0x184>)
 8006cd4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006cdc:	4b4a      	ldr	r3, [pc, #296]	; (8006e08 <netif_add+0x184>)
 8006cde:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a45      	ldr	r2, [pc, #276]	; (8006e0c <netif_add+0x188>)
 8006cf6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a3a      	ldr	r2, [r7, #32]
 8006d10:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006d12:	4b3f      	ldr	r3, [pc, #252]	; (8006e10 <netif_add+0x18c>)
 8006d14:	781a      	ldrb	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d20:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f913 	bl	8006f54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	4798      	blx	r3
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <netif_add+0xba>
    return NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e058      	b.n	8006df0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d44:	2bff      	cmp	r3, #255	; 0xff
 8006d46:	d103      	bne.n	8006d50 <netif_add+0xcc>
        netif->num = 0;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006d54:	4b2f      	ldr	r3, [pc, #188]	; (8006e14 <netif_add+0x190>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e02b      	b.n	8006db4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d106      	bne.n	8006d72 <netif_add+0xee>
 8006d64:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <netif_add+0x174>)
 8006d66:	f240 128b 	movw	r2, #395	; 0x18b
 8006d6a:	492b      	ldr	r1, [pc, #172]	; (8006e18 <netif_add+0x194>)
 8006d6c:	4824      	ldr	r0, [pc, #144]	; (8006e00 <netif_add+0x17c>)
 8006d6e:	f009 fe3f 	bl	80109f0 <printf>
        num_netifs++;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2bff      	cmp	r3, #255	; 0xff
 8006d7c:	dd06      	ble.n	8006d8c <netif_add+0x108>
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <netif_add+0x174>)
 8006d80:	f240 128d 	movw	r2, #397	; 0x18d
 8006d84:	4925      	ldr	r1, [pc, #148]	; (8006e1c <netif_add+0x198>)
 8006d86:	481e      	ldr	r0, [pc, #120]	; (8006e00 <netif_add+0x17c>)
 8006d88:	f009 fe32 	bl	80109f0 <printf>
        if (netif2->num == netif->num) {
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d108      	bne.n	8006dae <netif_add+0x12a>
          netif->num++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006da2:	3301      	adds	r3, #1
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006dac:	e005      	b.n	8006dba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1d0      	bne.n	8006d5c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1be      	bne.n	8006d3e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dc6:	2bfe      	cmp	r3, #254	; 0xfe
 8006dc8:	d103      	bne.n	8006dd2 <netif_add+0x14e>
    netif_num = 0;
 8006dca:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <netif_add+0x18c>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	e006      	b.n	8006de0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dd8:	3301      	adds	r3, #1
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <netif_add+0x18c>)
 8006dde:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <netif_add+0x190>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006de8:	4a0a      	ldr	r2, [pc, #40]	; (8006e14 <netif_add+0x190>)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006dee:	68fb      	ldr	r3, [r7, #12]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	08018a20 	.word	0x08018a20
 8006dfc:	08018ab4 	.word	0x08018ab4
 8006e00:	08018a70 	.word	0x08018a70
 8006e04:	08018ad0 	.word	0x08018ad0
 8006e08:	0801b14c 	.word	0x0801b14c
 8006e0c:	08007167 	.word	0x08007167
 8006e10:	20007284 	.word	0x20007284
 8006e14:	2000727c 	.word	0x2000727c
 8006e18:	08018af4 	.word	0x08018af4
 8006e1c:	08018b08 	.word	0x08018b08

08006e20 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f002 fb81 	bl	8009534 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f006 ff13 	bl	800dc60 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <netif_do_set_ipaddr+0x20>
 8006e56:	4b1d      	ldr	r3, [pc, #116]	; (8006ecc <netif_do_set_ipaddr+0x88>)
 8006e58:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006e5c:	491c      	ldr	r1, [pc, #112]	; (8006ed0 <netif_do_set_ipaddr+0x8c>)
 8006e5e:	481d      	ldr	r0, [pc, #116]	; (8006ed4 <netif_do_set_ipaddr+0x90>)
 8006e60:	f009 fdc6 	bl	80109f0 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <netif_do_set_ipaddr+0x34>
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <netif_do_set_ipaddr+0x88>)
 8006e6c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006e70:	4917      	ldr	r1, [pc, #92]	; (8006ed0 <netif_do_set_ipaddr+0x8c>)
 8006e72:	4818      	ldr	r0, [pc, #96]	; (8006ed4 <netif_do_set_ipaddr+0x90>)
 8006e74:	f009 fdbc 	bl	80109f0 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d01c      	beq.n	8006ec0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006e96:	f107 0314 	add.w	r3, r7, #20
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ffbf 	bl	8006e20 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <netif_do_set_ipaddr+0x6a>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	e000      	b.n	8006eb0 <netif_do_set_ipaddr+0x6c>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f8d2 	bl	8007060 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	08018a20 	.word	0x08018a20
 8006ed0:	08018b38 	.word	0x08018b38
 8006ed4:	08018a70 	.word	0x08018a70

08006ed8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3308      	adds	r3, #8
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d00a      	beq.n	8006f08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <netif_do_set_netmask+0x26>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	e000      	b.n	8006f00 <netif_do_set_netmask+0x28>
 8006efe:	2300      	movs	r3, #0
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d00a      	beq.n	8006f46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <netif_do_set_gw+0x26>
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	e000      	b.n	8006f3e <netif_do_set_gw+0x28>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006f70:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <netif_set_addr+0x90>)
 8006f72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	; (8006fe4 <netif_set_addr+0x90>)
 8006f7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006f84:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <netif_set_addr+0x90>)
 8006f86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <netif_set_addr+0x42>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <netif_set_addr+0x46>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <netif_set_addr+0x48>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fa4:	f107 0310 	add.w	r3, r7, #16
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff ff49 	bl	8006e44 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff ff8e 	bl	8006ed8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff ffa8 	bl	8006f16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fcc:	f107 0310 	add.w	r3, r7, #16
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff ff35 	bl	8006e44 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006fda:	bf00      	nop
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	0801b14c 	.word	0x0801b14c

08006fe8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006ff0:	4a04      	ldr	r2, [pc, #16]	; (8007004 <netif_set_default+0x1c>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20007280 	.word	0x20007280

08007008 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d107      	bne.n	8007026 <netif_set_up+0x1e>
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <netif_set_up+0x4c>)
 8007018:	f44f 7254 	mov.w	r2, #848	; 0x350
 800701c:	490e      	ldr	r1, [pc, #56]	; (8007058 <netif_set_up+0x50>)
 800701e:	480f      	ldr	r0, [pc, #60]	; (800705c <netif_set_up+0x54>)
 8007020:	f009 fce6 	bl	80109f0 <printf>
 8007024:	e013      	b.n	800704e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10c      	bne.n	800704e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007046:	2103      	movs	r1, #3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f809 	bl	8007060 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	08018a20 	.word	0x08018a20
 8007058:	08018ba8 	.word	0x08018ba8
 800705c:	08018a70 	.word	0x08018a70

08007060 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <netif_issue_reports+0x20>
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <netif_issue_reports+0x74>)
 8007074:	f240 326d 	movw	r2, #877	; 0x36d
 8007078:	4917      	ldr	r1, [pc, #92]	; (80070d8 <netif_issue_reports+0x78>)
 800707a:	4818      	ldr	r0, [pc, #96]	; (80070dc <netif_issue_reports+0x7c>)
 800707c:	f009 fcb8 	bl	80109f0 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01e      	beq.n	80070cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007094:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d013      	beq.n	80070ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3304      	adds	r3, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00e      	beq.n	80070ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f007 fd35 	bl	800eb34 <etharp_request>
 80070ca:	e000      	b.n	80070ce <netif_issue_reports+0x6e>
    return;
 80070cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	08018a20 	.word	0x08018a20
 80070d8:	08018bc4 	.word	0x08018bc4
 80070dc:	08018a70 	.word	0x08018a70

080070e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <netif_set_down+0x1e>
 80070ee:	4b12      	ldr	r3, [pc, #72]	; (8007138 <netif_set_down+0x58>)
 80070f0:	f240 329b 	movw	r2, #923	; 0x39b
 80070f4:	4911      	ldr	r1, [pc, #68]	; (800713c <netif_set_down+0x5c>)
 80070f6:	4812      	ldr	r0, [pc, #72]	; (8007140 <netif_set_down+0x60>)
 80070f8:	f009 fc7a 	bl	80109f0 <printf>
 80070fc:	e019      	b.n	8007132 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d012      	beq.n	8007132 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007112:	f023 0301 	bic.w	r3, r3, #1
 8007116:	b2da      	uxtb	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f007 f8bf 	bl	800e2b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	08018a20 	.word	0x08018a20
 800713c:	08018be8 	.word	0x08018be8
 8007140:	08018a70 	.word	0x08018a70

08007144 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	61da      	str	r2, [r3, #28]
  }
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007172:	f06f 030b 	mvn.w	r3, #11
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d013      	beq.n	80071bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007194:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <netif_get_by_index+0x48>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e00c      	b.n	80071b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071a2:	3301      	adds	r3, #1
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	79fa      	ldrb	r2, [r7, #7]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d101      	bne.n	80071b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	e006      	b.n	80071be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1ef      	bne.n	800719c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	2000727c 	.word	0x2000727c

080071d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <pbuf_free_ooseq+0x38>)
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <pbuf_free_ooseq+0x3c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e00a      	b.n	80071fa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f002 f9df 	bl	80095b0 <tcp_free_ooseq>
      return;
 80071f2:	e005      	b.n	8007200 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	607b      	str	r3, [r7, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f1      	bne.n	80071e4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20007285 	.word	0x20007285
 800720c:	20007294 	.word	0x20007294

08007210 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <pbuf_pool_is_empty+0x14>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800721a:	bf00      	nop
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20007285 	.word	0x20007285

08007228 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	460b      	mov	r3, r1
 8007238:	80fb      	strh	r3, [r7, #6]
 800723a:	4613      	mov	r3, r2
 800723c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	88fa      	ldrh	r2, [r7, #6]
 800724e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	88ba      	ldrh	r2, [r7, #4]
 8007254:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007256:	8b3b      	ldrh	r3, [r7, #24]
 8007258:	b2da      	uxtb	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	7f3a      	ldrb	r2, [r7, #28]
 8007262:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	73da      	strb	r2, [r3, #15]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08c      	sub	sp, #48	; 0x30
 8007280:	af02      	add	r7, sp, #8
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
 8007286:	460b      	mov	r3, r1
 8007288:	80bb      	strh	r3, [r7, #4]
 800728a:	4613      	mov	r3, r2
 800728c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007292:	887b      	ldrh	r3, [r7, #2]
 8007294:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007298:	d07f      	beq.n	800739a <pbuf_alloc+0x11e>
 800729a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800729e:	f300 80c8 	bgt.w	8007432 <pbuf_alloc+0x1b6>
 80072a2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80072a6:	d010      	beq.n	80072ca <pbuf_alloc+0x4e>
 80072a8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80072ac:	f300 80c1 	bgt.w	8007432 <pbuf_alloc+0x1b6>
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d002      	beq.n	80072ba <pbuf_alloc+0x3e>
 80072b4:	2b41      	cmp	r3, #65	; 0x41
 80072b6:	f040 80bc 	bne.w	8007432 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80072ba:	887a      	ldrh	r2, [r7, #2]
 80072bc:	88bb      	ldrh	r3, [r7, #4]
 80072be:	4619      	mov	r1, r3
 80072c0:	2000      	movs	r0, #0
 80072c2:	f000 f8d1 	bl	8007468 <pbuf_alloc_reference>
 80072c6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80072c8:	e0bd      	b.n	8007446 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80072d2:	88bb      	ldrh	r3, [r7, #4]
 80072d4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072d6:	2008      	movs	r0, #8
 80072d8:	f7ff fc56 	bl	8006b88 <memp_malloc>
 80072dc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d109      	bne.n	80072f8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80072e4:	f7ff ff94 	bl	8007210 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80072ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f0:	f000 faa8 	bl	8007844 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e0a7      	b.n	8007448 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80072f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072fa:	3303      	adds	r3, #3
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	b29b      	uxth	r3, r3
 8007304:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007308:	b29b      	uxth	r3, r3
 800730a:	8b7a      	ldrh	r2, [r7, #26]
 800730c:	4293      	cmp	r3, r2
 800730e:	bf28      	it	cs
 8007310:	4613      	movcs	r3, r2
 8007312:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007316:	3310      	adds	r3, #16
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4413      	add	r3, r2
 800731c:	3303      	adds	r3, #3
 800731e:	f023 0303 	bic.w	r3, r3, #3
 8007322:	4618      	mov	r0, r3
 8007324:	89f9      	ldrh	r1, [r7, #14]
 8007326:	8b7a      	ldrh	r2, [r7, #26]
 8007328:	2300      	movs	r3, #0
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	887b      	ldrh	r3, [r7, #2]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	460b      	mov	r3, r1
 8007332:	4601      	mov	r1, r0
 8007334:	6938      	ldr	r0, [r7, #16]
 8007336:	f7ff ff77 	bl	8007228 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d006      	beq.n	8007354 <pbuf_alloc+0xd8>
 8007346:	4b42      	ldr	r3, [pc, #264]	; (8007450 <pbuf_alloc+0x1d4>)
 8007348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800734c:	4941      	ldr	r1, [pc, #260]	; (8007454 <pbuf_alloc+0x1d8>)
 800734e:	4842      	ldr	r0, [pc, #264]	; (8007458 <pbuf_alloc+0x1dc>)
 8007350:	f009 fb4e 	bl	80109f0 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007356:	3303      	adds	r3, #3
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007360:	d106      	bne.n	8007370 <pbuf_alloc+0xf4>
 8007362:	4b3b      	ldr	r3, [pc, #236]	; (8007450 <pbuf_alloc+0x1d4>)
 8007364:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007368:	493c      	ldr	r1, [pc, #240]	; (800745c <pbuf_alloc+0x1e0>)
 800736a:	483b      	ldr	r0, [pc, #236]	; (8007458 <pbuf_alloc+0x1dc>)
 800736c:	f009 fb40 	bl	80109f0 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
 800737a:	e002      	b.n	8007382 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007386:	8b7a      	ldrh	r2, [r7, #26]
 8007388:	89fb      	ldrh	r3, [r7, #14]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007392:	8b7b      	ldrh	r3, [r7, #26]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d19e      	bne.n	80072d6 <pbuf_alloc+0x5a>
      break;
 8007398:	e055      	b.n	8007446 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800739a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800739c:	3303      	adds	r3, #3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	88bb      	ldrh	r3, [r7, #4]
 80073a8:	3303      	adds	r3, #3
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80073b6:	8b3b      	ldrh	r3, [r7, #24]
 80073b8:	3310      	adds	r3, #16
 80073ba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073bc:	8b3a      	ldrh	r2, [r7, #24]
 80073be:	88bb      	ldrh	r3, [r7, #4]
 80073c0:	3303      	adds	r3, #3
 80073c2:	f023 0303 	bic.w	r3, r3, #3
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d306      	bcc.n	80073d8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80073ca:	8afa      	ldrh	r2, [r7, #22]
 80073cc:	88bb      	ldrh	r3, [r7, #4]
 80073ce:	3303      	adds	r3, #3
 80073d0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d201      	bcs.n	80073dc <pbuf_alloc+0x160>
        return NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	e035      	b.n	8007448 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80073dc:	8afb      	ldrh	r3, [r7, #22]
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff fa64 	bl	80068ac <mem_malloc>
 80073e4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <pbuf_alloc+0x174>
        return NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	e02b      	b.n	8007448 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80073f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073f2:	3310      	adds	r3, #16
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	4413      	add	r3, r2
 80073f8:	3303      	adds	r3, #3
 80073fa:	f023 0303 	bic.w	r3, r3, #3
 80073fe:	4618      	mov	r0, r3
 8007400:	88b9      	ldrh	r1, [r7, #4]
 8007402:	88ba      	ldrh	r2, [r7, #4]
 8007404:	2300      	movs	r3, #0
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	887b      	ldrh	r3, [r7, #2]
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	460b      	mov	r3, r1
 800740e:	4601      	mov	r1, r0
 8007410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007412:	f7ff ff09 	bl	8007228 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d010      	beq.n	8007444 <pbuf_alloc+0x1c8>
 8007422:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <pbuf_alloc+0x1d4>)
 8007424:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007428:	490d      	ldr	r1, [pc, #52]	; (8007460 <pbuf_alloc+0x1e4>)
 800742a:	480b      	ldr	r0, [pc, #44]	; (8007458 <pbuf_alloc+0x1dc>)
 800742c:	f009 fae0 	bl	80109f0 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007430:	e008      	b.n	8007444 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <pbuf_alloc+0x1d4>)
 8007434:	f240 1227 	movw	r2, #295	; 0x127
 8007438:	490a      	ldr	r1, [pc, #40]	; (8007464 <pbuf_alloc+0x1e8>)
 800743a:	4807      	ldr	r0, [pc, #28]	; (8007458 <pbuf_alloc+0x1dc>)
 800743c:	f009 fad8 	bl	80109f0 <printf>
      return NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	e001      	b.n	8007448 <pbuf_alloc+0x1cc>
      break;
 8007444:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007448:	4618      	mov	r0, r3
 800744a:	3728      	adds	r7, #40	; 0x28
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	08018c50 	.word	0x08018c50
 8007454:	08018c80 	.word	0x08018c80
 8007458:	08018cb0 	.word	0x08018cb0
 800745c:	08018cd8 	.word	0x08018cd8
 8007460:	08018d0c 	.word	0x08018d0c
 8007464:	08018d38 	.word	0x08018d38

08007468 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af02      	add	r7, sp, #8
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	807b      	strh	r3, [r7, #2]
 8007474:	4613      	mov	r3, r2
 8007476:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007478:	883b      	ldrh	r3, [r7, #0]
 800747a:	2b41      	cmp	r3, #65	; 0x41
 800747c:	d009      	beq.n	8007492 <pbuf_alloc_reference+0x2a>
 800747e:	883b      	ldrh	r3, [r7, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d006      	beq.n	8007492 <pbuf_alloc_reference+0x2a>
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <pbuf_alloc_reference+0x5c>)
 8007486:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800748a:	490f      	ldr	r1, [pc, #60]	; (80074c8 <pbuf_alloc_reference+0x60>)
 800748c:	480f      	ldr	r0, [pc, #60]	; (80074cc <pbuf_alloc_reference+0x64>)
 800748e:	f009 faaf 	bl	80109f0 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007492:	2007      	movs	r0, #7
 8007494:	f7ff fb78 	bl	8006b88 <memp_malloc>
 8007498:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	e00b      	b.n	80074bc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80074a4:	8879      	ldrh	r1, [r7, #2]
 80074a6:	887a      	ldrh	r2, [r7, #2]
 80074a8:	2300      	movs	r3, #0
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	883b      	ldrh	r3, [r7, #0]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	460b      	mov	r3, r1
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff feb7 	bl	8007228 <pbuf_init_alloced_pbuf>
  return p;
 80074ba:	68fb      	ldr	r3, [r7, #12]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	08018c50 	.word	0x08018c50
 80074c8:	08018d54 	.word	0x08018d54
 80074cc:	08018cb0 	.word	0x08018cb0

080074d0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	607b      	str	r3, [r7, #4]
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	460b      	mov	r3, r1
 80074de:	81bb      	strh	r3, [r7, #12]
 80074e0:	4613      	mov	r3, r2
 80074e2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80074e8:	8a7b      	ldrh	r3, [r7, #18]
 80074ea:	3303      	adds	r3, #3
 80074ec:	f023 0203 	bic.w	r2, r3, #3
 80074f0:	89bb      	ldrh	r3, [r7, #12]
 80074f2:	441a      	add	r2, r3
 80074f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d901      	bls.n	80074fe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e018      	b.n	8007530 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007504:	8a7b      	ldrh	r3, [r7, #18]
 8007506:	3303      	adds	r3, #3
 8007508:	f023 0303 	bic.w	r3, r3, #3
 800750c:	6a3a      	ldr	r2, [r7, #32]
 800750e:	4413      	add	r3, r2
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e001      	b.n	8007518 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	89b9      	ldrh	r1, [r7, #12]
 800751c:	89ba      	ldrh	r2, [r7, #12]
 800751e:	2302      	movs	r3, #2
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	897b      	ldrh	r3, [r7, #10]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	460b      	mov	r3, r1
 8007528:	6979      	ldr	r1, [r7, #20]
 800752a:	f7ff fe7d 	bl	8007228 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800752e:	687b      	ldr	r3, [r7, #4]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <pbuf_realloc+0x20>
 800754a:	4b3a      	ldr	r3, [pc, #232]	; (8007634 <pbuf_realloc+0xfc>)
 800754c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007550:	4939      	ldr	r1, [pc, #228]	; (8007638 <pbuf_realloc+0x100>)
 8007552:	483a      	ldr	r0, [pc, #232]	; (800763c <pbuf_realloc+0x104>)
 8007554:	f009 fa4c 	bl	80109f0 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	891b      	ldrh	r3, [r3, #8]
 800755c:	887a      	ldrh	r2, [r7, #2]
 800755e:	429a      	cmp	r2, r3
 8007560:	d263      	bcs.n	800762a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	891a      	ldrh	r2, [r3, #8]
 8007566:	887b      	ldrh	r3, [r7, #2]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800756c:	887b      	ldrh	r3, [r7, #2]
 800756e:	817b      	strh	r3, [r7, #10]
  q = p;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007574:	e018      	b.n	80075a8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	895b      	ldrh	r3, [r3, #10]
 800757a:	897a      	ldrh	r2, [r7, #10]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	891a      	ldrh	r2, [r3, #8]
 8007584:	893b      	ldrh	r3, [r7, #8]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <pbuf_realloc+0x70>
 800759a:	4b26      	ldr	r3, [pc, #152]	; (8007634 <pbuf_realloc+0xfc>)
 800759c:	f240 12af 	movw	r2, #431	; 0x1af
 80075a0:	4927      	ldr	r1, [pc, #156]	; (8007640 <pbuf_realloc+0x108>)
 80075a2:	4826      	ldr	r0, [pc, #152]	; (800763c <pbuf_realloc+0x104>)
 80075a4:	f009 fa24 	bl	80109f0 <printf>
  while (rem_len > q->len) {
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	895b      	ldrh	r3, [r3, #10]
 80075ac:	897a      	ldrh	r2, [r7, #10]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d8e1      	bhi.n	8007576 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	7b1b      	ldrb	r3, [r3, #12]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d121      	bne.n	8007602 <pbuf_realloc+0xca>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	895b      	ldrh	r3, [r3, #10]
 80075c2:	897a      	ldrh	r2, [r7, #10]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d01c      	beq.n	8007602 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	7b5b      	ldrb	r3, [r3, #13]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d116      	bne.n	8007602 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	b29a      	uxth	r2, r3
 80075de:	897b      	ldrh	r3, [r7, #10]
 80075e0:	4413      	add	r3, r2
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4619      	mov	r1, r3
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff f864 	bl	80066b4 <mem_trim>
 80075ec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <pbuf_realloc+0xca>
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <pbuf_realloc+0xfc>)
 80075f6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80075fa:	4912      	ldr	r1, [pc, #72]	; (8007644 <pbuf_realloc+0x10c>)
 80075fc:	480f      	ldr	r0, [pc, #60]	; (800763c <pbuf_realloc+0x104>)
 80075fe:	f009 f9f7 	bl	80109f0 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	897a      	ldrh	r2, [r7, #10]
 8007606:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	895a      	ldrh	r2, [r3, #10]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f000 f911 	bl	8007844 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	e000      	b.n	800762c <pbuf_realloc+0xf4>
    return;
 800762a:	bf00      	nop

}
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	08018c50 	.word	0x08018c50
 8007638:	08018d68 	.word	0x08018d68
 800763c:	08018cb0 	.word	0x08018cb0
 8007640:	08018d80 	.word	0x08018d80
 8007644:	08018d98 	.word	0x08018d98

08007648 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	4613      	mov	r3, r2
 8007654:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <pbuf_add_header_impl+0x22>
 800765c:	4b2b      	ldr	r3, [pc, #172]	; (800770c <pbuf_add_header_impl+0xc4>)
 800765e:	f240 12df 	movw	r2, #479	; 0x1df
 8007662:	492b      	ldr	r1, [pc, #172]	; (8007710 <pbuf_add_header_impl+0xc8>)
 8007664:	482b      	ldr	r0, [pc, #172]	; (8007714 <pbuf_add_header_impl+0xcc>)
 8007666:	f009 f9c3 	bl	80109f0 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <pbuf_add_header_impl+0x30>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007676:	d301      	bcc.n	800767c <pbuf_add_header_impl+0x34>
    return 1;
 8007678:	2301      	movs	r3, #1
 800767a:	e043      	b.n	8007704 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <pbuf_add_header_impl+0x3e>
    return 0;
 8007682:	2300      	movs	r3, #0
 8007684:	e03e      	b.n	8007704 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	891a      	ldrh	r2, [r3, #8]
 800768e:	8a7b      	ldrh	r3, [r7, #18]
 8007690:	4413      	add	r3, r2
 8007692:	b29b      	uxth	r3, r3
 8007694:	8a7a      	ldrh	r2, [r7, #18]
 8007696:	429a      	cmp	r2, r3
 8007698:	d901      	bls.n	800769e <pbuf_add_header_impl+0x56>
    return 1;
 800769a:	2301      	movs	r3, #1
 800769c:	e032      	b.n	8007704 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	7b1b      	ldrb	r3, [r3, #12]
 80076a2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80076a4:	8a3b      	ldrh	r3, [r7, #16]
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	425b      	negs	r3, r3
 80076b6:	4413      	add	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3310      	adds	r3, #16
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d20d      	bcs.n	80076e0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e01d      	b.n	8007704 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	425b      	negs	r3, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	e001      	b.n	80076e0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80076dc:	2301      	movs	r3, #1
 80076de:	e011      	b.n	8007704 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	895a      	ldrh	r2, [r3, #10]
 80076ea:	8a7b      	ldrh	r3, [r7, #18]
 80076ec:	4413      	add	r3, r2
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	891a      	ldrh	r2, [r3, #8]
 80076f8:	8a7b      	ldrh	r3, [r7, #18]
 80076fa:	4413      	add	r3, r2
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	811a      	strh	r2, [r3, #8]


  return 0;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	08018c50 	.word	0x08018c50
 8007710:	08018db4 	.word	0x08018db4
 8007714:	08018cb0 	.word	0x08018cb0

08007718 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007722:	2200      	movs	r2, #0
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff ff8e 	bl	8007648 <pbuf_add_header_impl>
 800772c:	4603      	mov	r3, r0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <pbuf_remove_header+0x1e>
 8007748:	4b20      	ldr	r3, [pc, #128]	; (80077cc <pbuf_remove_header+0x94>)
 800774a:	f240 224b 	movw	r2, #587	; 0x24b
 800774e:	4920      	ldr	r1, [pc, #128]	; (80077d0 <pbuf_remove_header+0x98>)
 8007750:	4820      	ldr	r0, [pc, #128]	; (80077d4 <pbuf_remove_header+0x9c>)
 8007752:	f009 f94d 	bl	80109f0 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <pbuf_remove_header+0x2c>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007762:	d301      	bcc.n	8007768 <pbuf_remove_header+0x30>
    return 1;
 8007764:	2301      	movs	r3, #1
 8007766:	e02c      	b.n	80077c2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <pbuf_remove_header+0x3a>
    return 0;
 800776e:	2300      	movs	r3, #0
 8007770:	e027      	b.n	80077c2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	895b      	ldrh	r3, [r3, #10]
 800777a:	89fa      	ldrh	r2, [r7, #14]
 800777c:	429a      	cmp	r2, r3
 800777e:	d908      	bls.n	8007792 <pbuf_remove_header+0x5a>
 8007780:	4b12      	ldr	r3, [pc, #72]	; (80077cc <pbuf_remove_header+0x94>)
 8007782:	f240 2255 	movw	r2, #597	; 0x255
 8007786:	4914      	ldr	r1, [pc, #80]	; (80077d8 <pbuf_remove_header+0xa0>)
 8007788:	4812      	ldr	r0, [pc, #72]	; (80077d4 <pbuf_remove_header+0x9c>)
 800778a:	f009 f931 	bl	80109f0 <printf>
 800778e:	2301      	movs	r3, #1
 8007790:	e017      	b.n	80077c2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	441a      	add	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	895a      	ldrh	r2, [r3, #10]
 80077a8:	89fb      	ldrh	r3, [r7, #14]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	891a      	ldrh	r2, [r3, #8]
 80077b6:	89fb      	ldrh	r3, [r7, #14]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	08018c50 	.word	0x08018c50
 80077d0:	08018db4 	.word	0x08018db4
 80077d4:	08018cb0 	.word	0x08018cb0
 80077d8:	08018dc0 	.word	0x08018dc0

080077dc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	807b      	strh	r3, [r7, #2]
 80077e8:	4613      	mov	r3, r2
 80077ea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80077ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	da08      	bge.n	8007806 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80077f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077f8:	425b      	negs	r3, r3
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff ff9b 	bl	8007738 <pbuf_remove_header>
 8007802:	4603      	mov	r3, r0
 8007804:	e007      	b.n	8007816 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007806:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800780a:	787a      	ldrb	r2, [r7, #1]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff1a 	bl	8007648 <pbuf_add_header_impl>
 8007814:	4603      	mov	r3, r0
  }
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800782a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800782e:	2201      	movs	r2, #1
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff ffd2 	bl	80077dc <pbuf_header_impl>
 8007838:	4603      	mov	r3, r0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <pbuf_free+0x22>
 8007858:	4b38      	ldr	r3, [pc, #224]	; (800793c <pbuf_free+0xf8>)
 800785a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800785e:	4938      	ldr	r1, [pc, #224]	; (8007940 <pbuf_free+0xfc>)
 8007860:	4838      	ldr	r0, [pc, #224]	; (8007944 <pbuf_free+0x100>)
 8007862:	f009 f8c5 	bl	80109f0 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007866:	2300      	movs	r3, #0
 8007868:	e063      	b.n	8007932 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800786e:	e05c      	b.n	800792a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7b9b      	ldrb	r3, [r3, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <pbuf_free+0x42>
 8007878:	4b30      	ldr	r3, [pc, #192]	; (800793c <pbuf_free+0xf8>)
 800787a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800787e:	4932      	ldr	r1, [pc, #200]	; (8007948 <pbuf_free+0x104>)
 8007880:	4830      	ldr	r0, [pc, #192]	; (8007944 <pbuf_free+0x100>)
 8007882:	f009 f8b5 	bl	80109f0 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7b9b      	ldrb	r3, [r3, #14]
 800788a:	3b01      	subs	r3, #1
 800788c:	b2da      	uxtb	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	739a      	strb	r2, [r3, #14]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7b9b      	ldrb	r3, [r3, #14]
 8007896:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007898:	7dbb      	ldrb	r3, [r7, #22]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d143      	bne.n	8007926 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7b1b      	ldrb	r3, [r3, #12]
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7b5b      	ldrb	r3, [r3, #13]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d011      	beq.n	80078de <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <pbuf_free+0x90>
 80078c6:	4b1d      	ldr	r3, [pc, #116]	; (800793c <pbuf_free+0xf8>)
 80078c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80078cc:	491f      	ldr	r1, [pc, #124]	; (800794c <pbuf_free+0x108>)
 80078ce:	481d      	ldr	r0, [pc, #116]	; (8007944 <pbuf_free+0x100>)
 80078d0:	f009 f88e 	bl	80109f0 <printf>
        pc->custom_free_function(p);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
 80078dc:	e01d      	b.n	800791a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d104      	bne.n	80078ee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	2008      	movs	r0, #8
 80078e8:	f7ff f99a 	bl	8006c20 <memp_free>
 80078ec:	e015      	b.n	800791a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d104      	bne.n	80078fe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	2007      	movs	r0, #7
 80078f8:	f7ff f992 	bl	8006c20 <memp_free>
 80078fc:	e00d      	b.n	800791a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <pbuf_free+0xc8>
          mem_free(p);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7fe fe6b 	bl	80065e0 <mem_free>
 800790a:	e006      	b.n	800791a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800790c:	4b0b      	ldr	r3, [pc, #44]	; (800793c <pbuf_free+0xf8>)
 800790e:	f240 320f 	movw	r2, #783	; 0x30f
 8007912:	490f      	ldr	r1, [pc, #60]	; (8007950 <pbuf_free+0x10c>)
 8007914:	480b      	ldr	r0, [pc, #44]	; (8007944 <pbuf_free+0x100>)
 8007916:	f009 f86b 	bl	80109f0 <printf>
        }
      }
      count++;
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	3301      	adds	r3, #1
 800791e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	607b      	str	r3, [r7, #4]
 8007924:	e001      	b.n	800792a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d19f      	bne.n	8007870 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	08018c50 	.word	0x08018c50
 8007940:	08018db4 	.word	0x08018db4
 8007944:	08018cb0 	.word	0x08018cb0
 8007948:	08018de0 	.word	0x08018de0
 800794c:	08018df8 	.word	0x08018df8
 8007950:	08018e1c 	.word	0x08018e1c

08007954 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007960:	e005      	b.n	800796e <pbuf_clen+0x1a>
    ++len;
 8007962:	89fb      	ldrh	r3, [r7, #14]
 8007964:	3301      	adds	r3, #1
 8007966:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1f6      	bne.n	8007962 <pbuf_clen+0xe>
  }
  return len;
 8007974:	89fb      	ldrh	r3, [r7, #14]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d010      	beq.n	80079b4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7b9b      	ldrb	r3, [r3, #14]
 8007996:	3301      	adds	r3, #1
 8007998:	b2da      	uxtb	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7b9b      	ldrb	r3, [r3, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <pbuf_ref+0x30>
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <pbuf_ref+0x38>)
 80079a8:	f240 3242 	movw	r2, #834	; 0x342
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <pbuf_ref+0x3c>)
 80079ae:	4805      	ldr	r0, [pc, #20]	; (80079c4 <pbuf_ref+0x40>)
 80079b0:	f009 f81e 	bl	80109f0 <printf>
  }
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	08018c50 	.word	0x08018c50
 80079c0:	08018e30 	.word	0x08018e30
 80079c4:	08018cb0 	.word	0x08018cb0

080079c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <pbuf_cat+0x16>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <pbuf_cat+0x26>
 80079de:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <pbuf_cat+0x98>)
 80079e0:	f240 3259 	movw	r2, #857	; 0x359
 80079e4:	491f      	ldr	r1, [pc, #124]	; (8007a64 <pbuf_cat+0x9c>)
 80079e6:	4820      	ldr	r0, [pc, #128]	; (8007a68 <pbuf_cat+0xa0>)
 80079e8:	f009 f802 	bl	80109f0 <printf>
 80079ec:	e034      	b.n	8007a58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e00a      	b.n	8007a0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	891a      	ldrh	r2, [r3, #8]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	891b      	ldrh	r3, [r3, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1f0      	bne.n	80079f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	891a      	ldrh	r2, [r3, #8]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	895b      	ldrh	r3, [r3, #10]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d006      	beq.n	8007a2c <pbuf_cat+0x64>
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <pbuf_cat+0x98>)
 8007a20:	f240 3262 	movw	r2, #866	; 0x362
 8007a24:	4911      	ldr	r1, [pc, #68]	; (8007a6c <pbuf_cat+0xa4>)
 8007a26:	4810      	ldr	r0, [pc, #64]	; (8007a68 <pbuf_cat+0xa0>)
 8007a28:	f008 ffe2 	bl	80109f0 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <pbuf_cat+0x7a>
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <pbuf_cat+0x98>)
 8007a36:	f240 3263 	movw	r2, #867	; 0x363
 8007a3a:	490d      	ldr	r1, [pc, #52]	; (8007a70 <pbuf_cat+0xa8>)
 8007a3c:	480a      	ldr	r0, [pc, #40]	; (8007a68 <pbuf_cat+0xa0>)
 8007a3e:	f008 ffd7 	bl	80109f0 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	891a      	ldrh	r2, [r3, #8]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	891b      	ldrh	r3, [r3, #8]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	08018c50 	.word	0x08018c50
 8007a64:	08018e44 	.word	0x08018e44
 8007a68:	08018cb0 	.word	0x08018cb0
 8007a6c:	08018e7c 	.word	0x08018e7c
 8007a70:	08018eac 	.word	0x08018eac

08007a74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ffa1 	bl	80079c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007a86:	6838      	ldr	r0, [r7, #0]
 8007a88:	f7ff ff7c 	bl	8007984 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <pbuf_copy+0x2a>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <pbuf_copy+0x2a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	891a      	ldrh	r2, [r3, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	891b      	ldrh	r3, [r3, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d209      	bcs.n	8007ad2 <pbuf_copy+0x3e>
 8007abe:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <pbuf_copy+0x188>)
 8007ac0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007ac4:	4956      	ldr	r1, [pc, #344]	; (8007c20 <pbuf_copy+0x18c>)
 8007ac6:	4857      	ldr	r0, [pc, #348]	; (8007c24 <pbuf_copy+0x190>)
 8007ac8:	f008 ff92 	bl	80109f0 <printf>
 8007acc:	f06f 030f 	mvn.w	r3, #15
 8007ad0:	e09f      	b.n	8007c12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	895b      	ldrh	r3, [r3, #10]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	895b      	ldrh	r3, [r3, #10]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1acb      	subs	r3, r1, r3
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d306      	bcc.n	8007af8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	895b      	ldrh	r3, [r3, #10]
 8007aee:	461a      	mov	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	e005      	b.n	8007b04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	895b      	ldrh	r3, [r3, #10]
 8007afc:	461a      	mov	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	18d0      	adds	r0, r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	4413      	add	r3, r2
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4619      	mov	r1, r3
 8007b18:	f008 fcc8 	bl	80104ac <memcpy>
    offset_to += len;
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	895b      	ldrh	r3, [r3, #10]
 8007b30:	461a      	mov	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d906      	bls.n	8007b46 <pbuf_copy+0xb2>
 8007b38:	4b38      	ldr	r3, [pc, #224]	; (8007c1c <pbuf_copy+0x188>)
 8007b3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007b3e:	493a      	ldr	r1, [pc, #232]	; (8007c28 <pbuf_copy+0x194>)
 8007b40:	4838      	ldr	r0, [pc, #224]	; (8007c24 <pbuf_copy+0x190>)
 8007b42:	f008 ff55 	bl	80109f0 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	895b      	ldrh	r3, [r3, #10]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d906      	bls.n	8007b60 <pbuf_copy+0xcc>
 8007b52:	4b32      	ldr	r3, [pc, #200]	; (8007c1c <pbuf_copy+0x188>)
 8007b54:	f240 32da 	movw	r2, #986	; 0x3da
 8007b58:	4934      	ldr	r1, [pc, #208]	; (8007c2c <pbuf_copy+0x198>)
 8007b5a:	4832      	ldr	r0, [pc, #200]	; (8007c24 <pbuf_copy+0x190>)
 8007b5c:	f008 ff48 	bl	80109f0 <printf>
    if (offset_from >= p_from->len) {
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	895b      	ldrh	r3, [r3, #10]
 8007b64:	461a      	mov	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d304      	bcc.n	8007b76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	895b      	ldrh	r3, [r3, #10]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d114      	bne.n	8007bac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10c      	bne.n	8007bac <pbuf_copy+0x118>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d009      	beq.n	8007bac <pbuf_copy+0x118>
 8007b98:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <pbuf_copy+0x188>)
 8007b9a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007b9e:	4924      	ldr	r1, [pc, #144]	; (8007c30 <pbuf_copy+0x19c>)
 8007ba0:	4820      	ldr	r0, [pc, #128]	; (8007c24 <pbuf_copy+0x190>)
 8007ba2:	f008 ff25 	bl	80109f0 <printf>
 8007ba6:	f06f 030f 	mvn.w	r3, #15
 8007baa:	e032      	b.n	8007c12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d013      	beq.n	8007bda <pbuf_copy+0x146>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	895a      	ldrh	r2, [r3, #10]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	891b      	ldrh	r3, [r3, #8]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d10d      	bne.n	8007bda <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <pbuf_copy+0x146>
 8007bc6:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <pbuf_copy+0x188>)
 8007bc8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007bcc:	4919      	ldr	r1, [pc, #100]	; (8007c34 <pbuf_copy+0x1a0>)
 8007bce:	4815      	ldr	r0, [pc, #84]	; (8007c24 <pbuf_copy+0x190>)
 8007bd0:	f008 ff0e 	bl	80109f0 <printf>
 8007bd4:	f06f 0305 	mvn.w	r3, #5
 8007bd8:	e01b      	b.n	8007c12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d013      	beq.n	8007c08 <pbuf_copy+0x174>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	895a      	ldrh	r2, [r3, #10]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	891b      	ldrh	r3, [r3, #8]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d10d      	bne.n	8007c08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <pbuf_copy+0x174>
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <pbuf_copy+0x188>)
 8007bf6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007bfa:	490e      	ldr	r1, [pc, #56]	; (8007c34 <pbuf_copy+0x1a0>)
 8007bfc:	4809      	ldr	r0, [pc, #36]	; (8007c24 <pbuf_copy+0x190>)
 8007bfe:	f008 fef7 	bl	80109f0 <printf>
 8007c02:	f06f 0305 	mvn.w	r3, #5
 8007c06:	e004      	b.n	8007c12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f47f af61 	bne.w	8007ad2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08018c50 	.word	0x08018c50
 8007c20:	08018ef8 	.word	0x08018ef8
 8007c24:	08018cb0 	.word	0x08018cb0
 8007c28:	08018f28 	.word	0x08018f28
 8007c2c:	08018f40 	.word	0x08018f40
 8007c30:	08018f5c 	.word	0x08018f5c
 8007c34:	08018f6c 	.word	0x08018f6c

08007c38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4611      	mov	r1, r2
 8007c44:	461a      	mov	r2, r3
 8007c46:	460b      	mov	r3, r1
 8007c48:	80fb      	strh	r3, [r7, #6]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d108      	bne.n	8007c6e <pbuf_copy_partial+0x36>
 8007c5c:	4b2b      	ldr	r3, [pc, #172]	; (8007d0c <pbuf_copy_partial+0xd4>)
 8007c5e:	f240 420a 	movw	r2, #1034	; 0x40a
 8007c62:	492b      	ldr	r1, [pc, #172]	; (8007d10 <pbuf_copy_partial+0xd8>)
 8007c64:	482b      	ldr	r0, [pc, #172]	; (8007d14 <pbuf_copy_partial+0xdc>)
 8007c66:	f008 fec3 	bl	80109f0 <printf>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e04a      	b.n	8007d04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d108      	bne.n	8007c86 <pbuf_copy_partial+0x4e>
 8007c74:	4b25      	ldr	r3, [pc, #148]	; (8007d0c <pbuf_copy_partial+0xd4>)
 8007c76:	f240 420b 	movw	r2, #1035	; 0x40b
 8007c7a:	4927      	ldr	r1, [pc, #156]	; (8007d18 <pbuf_copy_partial+0xe0>)
 8007c7c:	4825      	ldr	r0, [pc, #148]	; (8007d14 <pbuf_copy_partial+0xdc>)
 8007c7e:	f008 feb7 	bl	80109f0 <printf>
 8007c82:	2300      	movs	r3, #0
 8007c84:	e03e      	b.n	8007d04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	61fb      	str	r3, [r7, #28]
 8007c8a:	e034      	b.n	8007cf6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007c8c:	88bb      	ldrh	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <pbuf_copy_partial+0x70>
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	895b      	ldrh	r3, [r3, #10]
 8007c96:	88ba      	ldrh	r2, [r7, #4]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d305      	bcc.n	8007ca8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	895b      	ldrh	r3, [r3, #10]
 8007ca0:	88ba      	ldrh	r2, [r7, #4]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	80bb      	strh	r3, [r7, #4]
 8007ca6:	e023      	b.n	8007cf0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	895a      	ldrh	r2, [r3, #10]
 8007cac:	88bb      	ldrh	r3, [r7, #4]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007cb2:	8b3a      	ldrh	r2, [r7, #24]
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d901      	bls.n	8007cbe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cbe:	8b7b      	ldrh	r3, [r7, #26]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	18d0      	adds	r0, r2, r3
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	88bb      	ldrh	r3, [r7, #4]
 8007cca:	4413      	add	r3, r2
 8007ccc:	8b3a      	ldrh	r2, [r7, #24]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	f008 fbec 	bl	80104ac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007cd4:	8afa      	ldrh	r2, [r7, #22]
 8007cd6:	8b3b      	ldrh	r3, [r7, #24]
 8007cd8:	4413      	add	r3, r2
 8007cda:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007cdc:	8b7a      	ldrh	r2, [r7, #26]
 8007cde:	8b3b      	ldrh	r3, [r7, #24]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007ce4:	88fa      	ldrh	r2, [r7, #6]
 8007ce6:	8b3b      	ldrh	r3, [r7, #24]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <pbuf_copy_partial+0xca>
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1c4      	bne.n	8007c8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007d02:	8afb      	ldrh	r3, [r7, #22]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	08018c50 	.word	0x08018c50
 8007d10:	08018f98 	.word	0x08018f98
 8007d14:	08018cb0 	.word	0x08018cb0
 8007d18:	08018fb8 	.word	0x08018fb8

08007d1c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d109      	bne.n	8007d4c <pbuf_take+0x30>
 8007d38:	4b3a      	ldr	r3, [pc, #232]	; (8007e24 <pbuf_take+0x108>)
 8007d3a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8007d3e:	493a      	ldr	r1, [pc, #232]	; (8007e28 <pbuf_take+0x10c>)
 8007d40:	483a      	ldr	r0, [pc, #232]	; (8007e2c <pbuf_take+0x110>)
 8007d42:	f008 fe55 	bl	80109f0 <printf>
 8007d46:	f06f 030f 	mvn.w	r3, #15
 8007d4a:	e067      	b.n	8007e1c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d109      	bne.n	8007d66 <pbuf_take+0x4a>
 8007d52:	4b34      	ldr	r3, [pc, #208]	; (8007e24 <pbuf_take+0x108>)
 8007d54:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007d58:	4935      	ldr	r1, [pc, #212]	; (8007e30 <pbuf_take+0x114>)
 8007d5a:	4834      	ldr	r0, [pc, #208]	; (8007e2c <pbuf_take+0x110>)
 8007d5c:	f008 fe48 	bl	80109f0 <printf>
 8007d60:	f06f 030f 	mvn.w	r3, #15
 8007d64:	e05a      	b.n	8007e1c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	891b      	ldrh	r3, [r3, #8]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d909      	bls.n	8007d84 <pbuf_take+0x68>
 8007d70:	4b2c      	ldr	r3, [pc, #176]	; (8007e24 <pbuf_take+0x108>)
 8007d72:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8007d76:	492f      	ldr	r1, [pc, #188]	; (8007e34 <pbuf_take+0x118>)
 8007d78:	482c      	ldr	r0, [pc, #176]	; (8007e2c <pbuf_take+0x110>)
 8007d7a:	f008 fe39 	bl	80109f0 <printf>
 8007d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d82:	e04b      	b.n	8007e1c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <pbuf_take+0x7e>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <pbuf_take+0x7e>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	891b      	ldrh	r3, [r3, #8]
 8007d94:	88fa      	ldrh	r2, [r7, #6]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d902      	bls.n	8007da0 <pbuf_take+0x84>
    return ERR_ARG;
 8007d9a:	f06f 030f 	mvn.w	r3, #15
 8007d9e:	e03d      	b.n	8007e1c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	e028      	b.n	8007df8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d106      	bne.n	8007dba <pbuf_take+0x9e>
 8007dac:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <pbuf_take+0x108>)
 8007dae:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007db2:	4921      	ldr	r1, [pc, #132]	; (8007e38 <pbuf_take+0x11c>)
 8007db4:	481d      	ldr	r0, [pc, #116]	; (8007e2c <pbuf_take+0x110>)
 8007db6:	f008 fe1b 	bl	80109f0 <printf>
    buf_copy_len = total_copy_len;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	895b      	ldrh	r3, [r3, #10]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d902      	bls.n	8007dd0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	895b      	ldrh	r3, [r3, #10]
 8007dce:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	6858      	ldr	r0, [r3, #4]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	4413      	add	r3, r2
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	f008 fb65 	bl	80104ac <memcpy>
    total_copy_len -= buf_copy_len;
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	4413      	add	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1d3      	bne.n	8007da6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <pbuf_take+0xf0>
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d006      	beq.n	8007e1a <pbuf_take+0xfe>
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <pbuf_take+0x108>)
 8007e0e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8007e12:	490a      	ldr	r1, [pc, #40]	; (8007e3c <pbuf_take+0x120>)
 8007e14:	4805      	ldr	r0, [pc, #20]	; (8007e2c <pbuf_take+0x110>)
 8007e16:	f008 fdeb 	bl	80109f0 <printf>
  return ERR_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3720      	adds	r7, #32
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	08018c50 	.word	0x08018c50
 8007e28:	08019028 	.word	0x08019028
 8007e2c:	08018cb0 	.word	0x08018cb0
 8007e30:	08019040 	.word	0x08019040
 8007e34:	0801905c 	.word	0x0801905c
 8007e38:	0801907c 	.word	0x0801907c
 8007e3c:	08019094 	.word	0x08019094

08007e40 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	603a      	str	r2, [r7, #0]
 8007e4a:	71fb      	strb	r3, [r7, #7]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	8919      	ldrh	r1, [r3, #8]
 8007e54:	88ba      	ldrh	r2, [r7, #4]
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff fa0f 	bl	800727c <pbuf_alloc>
 8007e5e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <pbuf_clone+0x2a>
    return NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	e011      	b.n	8007e8e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7ff fe11 	bl	8007a94 <pbuf_copy>
 8007e72:	4603      	mov	r3, r0
 8007e74:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007e76:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d006      	beq.n	8007e8c <pbuf_clone+0x4c>
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <pbuf_clone+0x58>)
 8007e80:	f240 5224 	movw	r2, #1316	; 0x524
 8007e84:	4905      	ldr	r1, [pc, #20]	; (8007e9c <pbuf_clone+0x5c>)
 8007e86:	4806      	ldr	r0, [pc, #24]	; (8007ea0 <pbuf_clone+0x60>)
 8007e88:	f008 fdb2 	bl	80109f0 <printf>
  return q;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	08018c50 	.word	0x08018c50
 8007e9c:	080190c4 	.word	0x080190c4
 8007ea0:	08018cb0 	.word	0x08018cb0

08007ea4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007ea8:	f008 fdb4 	bl	8010a14 <rand>
 8007eac:	4603      	mov	r3, r0
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	4b01      	ldr	r3, [pc, #4]	; (8007ec4 <tcp_init+0x20>)
 8007ebe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007ec0:	bf00      	nop
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000012 	.word	0x20000012

08007ec8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7d1b      	ldrb	r3, [r3, #20]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d105      	bne.n	8007ee4 <tcp_free+0x1c>
 8007ed8:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <tcp_free+0x2c>)
 8007eda:	22d4      	movs	r2, #212	; 0xd4
 8007edc:	4906      	ldr	r1, [pc, #24]	; (8007ef8 <tcp_free+0x30>)
 8007ede:	4807      	ldr	r0, [pc, #28]	; (8007efc <tcp_free+0x34>)
 8007ee0:	f008 fd86 	bl	80109f0 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	f7fe fe9a 	bl	8006c20 <memp_free>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	08019150 	.word	0x08019150
 8007ef8:	08019180 	.word	0x08019180
 8007efc:	08019194 	.word	0x08019194

08007f00 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7d1b      	ldrb	r3, [r3, #20]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d105      	bne.n	8007f1c <tcp_free_listen+0x1c>
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <tcp_free_listen+0x2c>)
 8007f12:	22df      	movs	r2, #223	; 0xdf
 8007f14:	4906      	ldr	r1, [pc, #24]	; (8007f30 <tcp_free_listen+0x30>)
 8007f16:	4807      	ldr	r0, [pc, #28]	; (8007f34 <tcp_free_listen+0x34>)
 8007f18:	f008 fd6a 	bl	80109f0 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	2002      	movs	r0, #2
 8007f20:	f7fe fe7e 	bl	8006c20 <memp_free>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	08019150 	.word	0x08019150
 8007f30:	080191bc 	.word	0x080191bc
 8007f34:	08019194 	.word	0x08019194

08007f38 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007f3c:	f000 fea2 	bl	8008c84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <tcp_tmr+0x28>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	3301      	adds	r3, #1
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <tcp_tmr+0x28>)
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <tcp_tmr+0x28>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007f58:	f000 fb54 	bl	8008604 <tcp_slowtmr>
  }
}
 8007f5c:	bf00      	nop
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	2000729d 	.word	0x2000729d

08007f64 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d105      	bne.n	8007f80 <tcp_remove_listener+0x1c>
 8007f74:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <tcp_remove_listener+0x48>)
 8007f76:	22ff      	movs	r2, #255	; 0xff
 8007f78:	490d      	ldr	r1, [pc, #52]	; (8007fb0 <tcp_remove_listener+0x4c>)
 8007f7a:	480e      	ldr	r0, [pc, #56]	; (8007fb4 <tcp_remove_listener+0x50>)
 8007f7c:	f008 fd38 	bl	80109f0 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e00a      	b.n	8007f9c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d102      	bne.n	8007f96 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f1      	bne.n	8007f86 <tcp_remove_listener+0x22>
    }
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	08019150 	.word	0x08019150
 8007fb0:	080191d8 	.word	0x080191d8
 8007fb4:	08019194 	.word	0x08019194

08007fb8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <tcp_listen_closed+0x1c>
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <tcp_listen_closed+0x60>)
 8007fc8:	f240 1211 	movw	r2, #273	; 0x111
 8007fcc:	4913      	ldr	r1, [pc, #76]	; (800801c <tcp_listen_closed+0x64>)
 8007fce:	4814      	ldr	r0, [pc, #80]	; (8008020 <tcp_listen_closed+0x68>)
 8007fd0:	f008 fd0e 	bl	80109f0 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	7d1b      	ldrb	r3, [r3, #20]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d006      	beq.n	8007fea <tcp_listen_closed+0x32>
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <tcp_listen_closed+0x60>)
 8007fde:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007fe2:	4910      	ldr	r1, [pc, #64]	; (8008024 <tcp_listen_closed+0x6c>)
 8007fe4:	480e      	ldr	r0, [pc, #56]	; (8008020 <tcp_listen_closed+0x68>)
 8007fe6:	f008 fd03 	bl	80109f0 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007fea:	2301      	movs	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e00b      	b.n	8008008 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007ff0:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <tcp_listen_closed+0x70>)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff ffb1 	bl	8007f64 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b03      	cmp	r3, #3
 800800c:	d9f0      	bls.n	8007ff0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	08019150 	.word	0x08019150
 800801c:	08019200 	.word	0x08019200
 8008020:	08019194 	.word	0x08019194
 8008024:	0801920c 	.word	0x0801920c
 8008028:	0801b124 	.word	0x0801b124

0800802c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800802c:	b5b0      	push	{r4, r5, r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af04      	add	r7, sp, #16
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <tcp_close_shutdown+0x20>
 800803e:	4b63      	ldr	r3, [pc, #396]	; (80081cc <tcp_close_shutdown+0x1a0>)
 8008040:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008044:	4962      	ldr	r1, [pc, #392]	; (80081d0 <tcp_close_shutdown+0x1a4>)
 8008046:	4863      	ldr	r0, [pc, #396]	; (80081d4 <tcp_close_shutdown+0x1a8>)
 8008048:	f008 fcd2 	bl	80109f0 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d066      	beq.n	8008120 <tcp_close_shutdown+0xf4>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7d1b      	ldrb	r3, [r3, #20]
 8008056:	2b04      	cmp	r3, #4
 8008058:	d003      	beq.n	8008062 <tcp_close_shutdown+0x36>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7d1b      	ldrb	r3, [r3, #20]
 800805e:	2b07      	cmp	r3, #7
 8008060:	d15e      	bne.n	8008120 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <tcp_close_shutdown+0x48>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008072:	d055      	beq.n	8008120 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	8b5b      	ldrh	r3, [r3, #26]
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d106      	bne.n	800808e <tcp_close_shutdown+0x62>
 8008080:	4b52      	ldr	r3, [pc, #328]	; (80081cc <tcp_close_shutdown+0x1a0>)
 8008082:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008086:	4954      	ldr	r1, [pc, #336]	; (80081d8 <tcp_close_shutdown+0x1ac>)
 8008088:	4852      	ldr	r0, [pc, #328]	; (80081d4 <tcp_close_shutdown+0x1a8>)
 800808a:	f008 fcb1 	bl	80109f0 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008096:	687d      	ldr	r5, [r7, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3304      	adds	r3, #4
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	8ad2      	ldrh	r2, [r2, #22]
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	8b09      	ldrh	r1, [r1, #24]
 80080a4:	9102      	str	r1, [sp, #8]
 80080a6:	9201      	str	r2, [sp, #4]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	462b      	mov	r3, r5
 80080ac:	4622      	mov	r2, r4
 80080ae:	4601      	mov	r1, r0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f004 fe91 	bl	800cdd8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 f8c6 	bl	8009248 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80080bc:	4b47      	ldr	r3, [pc, #284]	; (80081dc <tcp_close_shutdown+0x1b0>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d105      	bne.n	80080d2 <tcp_close_shutdown+0xa6>
 80080c6:	4b45      	ldr	r3, [pc, #276]	; (80081dc <tcp_close_shutdown+0x1b0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	4a43      	ldr	r2, [pc, #268]	; (80081dc <tcp_close_shutdown+0x1b0>)
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	e013      	b.n	80080fa <tcp_close_shutdown+0xce>
 80080d2:	4b42      	ldr	r3, [pc, #264]	; (80081dc <tcp_close_shutdown+0x1b0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	e00c      	b.n	80080f4 <tcp_close_shutdown+0xc8>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d104      	bne.n	80080ee <tcp_close_shutdown+0xc2>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	60da      	str	r2, [r3, #12]
 80080ec:	e005      	b.n	80080fa <tcp_close_shutdown+0xce>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1ef      	bne.n	80080da <tcp_close_shutdown+0xae>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	60da      	str	r2, [r3, #12]
 8008100:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <tcp_close_shutdown+0x1b4>)
 8008102:	2201      	movs	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008106:	4b37      	ldr	r3, [pc, #220]	; (80081e4 <tcp_close_shutdown+0x1b8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d102      	bne.n	8008116 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008110:	f003 fd5e 	bl	800bbd0 <tcp_trigger_input_pcb_close>
 8008114:	e002      	b.n	800811c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fed6 	bl	8007ec8 <tcp_free>
      }
      return ERR_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e050      	b.n	80081c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7d1b      	ldrb	r3, [r3, #20]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d03b      	beq.n	80081a0 <tcp_close_shutdown+0x174>
 8008128:	2b02      	cmp	r3, #2
 800812a:	dc44      	bgt.n	80081b6 <tcp_close_shutdown+0x18a>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <tcp_close_shutdown+0x10a>
 8008130:	2b01      	cmp	r3, #1
 8008132:	d02a      	beq.n	800818a <tcp_close_shutdown+0x15e>
 8008134:	e03f      	b.n	80081b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	8adb      	ldrh	r3, [r3, #22]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d021      	beq.n	8008182 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800813e:	4b2a      	ldr	r3, [pc, #168]	; (80081e8 <tcp_close_shutdown+0x1bc>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d105      	bne.n	8008154 <tcp_close_shutdown+0x128>
 8008148:	4b27      	ldr	r3, [pc, #156]	; (80081e8 <tcp_close_shutdown+0x1bc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <tcp_close_shutdown+0x1bc>)
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	e013      	b.n	800817c <tcp_close_shutdown+0x150>
 8008154:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <tcp_close_shutdown+0x1bc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	e00c      	b.n	8008176 <tcp_close_shutdown+0x14a>
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d104      	bne.n	8008170 <tcp_close_shutdown+0x144>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	60da      	str	r2, [r3, #12]
 800816e:	e005      	b.n	800817c <tcp_close_shutdown+0x150>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1ef      	bne.n	800815c <tcp_close_shutdown+0x130>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff fea0 	bl	8007ec8 <tcp_free>
      break;
 8008188:	e01a      	b.n	80081c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff ff14 	bl	8007fb8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4816      	ldr	r0, [pc, #88]	; (80081ec <tcp_close_shutdown+0x1c0>)
 8008194:	f001 f8a8 	bl	80092e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff feb1 	bl	8007f00 <tcp_free_listen>
      break;
 800819e:	e00f      	b.n	80081c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	480e      	ldr	r0, [pc, #56]	; (80081dc <tcp_close_shutdown+0x1b0>)
 80081a4:	f001 f8a0 	bl	80092e8 <tcp_pcb_remove>
 80081a8:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <tcp_close_shutdown+0x1b4>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fe8a 	bl	8007ec8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80081b4:	e004      	b.n	80081c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f81a 	bl	80081f0 <tcp_close_shutdown_fin>
 80081bc:	4603      	mov	r3, r0
 80081be:	e000      	b.n	80081c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bdb0      	pop	{r4, r5, r7, pc}
 80081ca:	bf00      	nop
 80081cc:	08019150 	.word	0x08019150
 80081d0:	08019224 	.word	0x08019224
 80081d4:	08019194 	.word	0x08019194
 80081d8:	08019244 	.word	0x08019244
 80081dc:	20007294 	.word	0x20007294
 80081e0:	2000729c 	.word	0x2000729c
 80081e4:	200072d4 	.word	0x200072d4
 80081e8:	2000728c 	.word	0x2000728c
 80081ec:	20007290 	.word	0x20007290

080081f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <tcp_close_shutdown_fin+0x1c>
 80081fe:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <tcp_close_shutdown_fin+0xc8>)
 8008200:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008204:	492d      	ldr	r1, [pc, #180]	; (80082bc <tcp_close_shutdown_fin+0xcc>)
 8008206:	482e      	ldr	r0, [pc, #184]	; (80082c0 <tcp_close_shutdown_fin+0xd0>)
 8008208:	f008 fbf2 	bl	80109f0 <printf>

  switch (pcb->state) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	7d1b      	ldrb	r3, [r3, #20]
 8008210:	2b07      	cmp	r3, #7
 8008212:	d020      	beq.n	8008256 <tcp_close_shutdown_fin+0x66>
 8008214:	2b07      	cmp	r3, #7
 8008216:	dc2b      	bgt.n	8008270 <tcp_close_shutdown_fin+0x80>
 8008218:	2b03      	cmp	r3, #3
 800821a:	d002      	beq.n	8008222 <tcp_close_shutdown_fin+0x32>
 800821c:	2b04      	cmp	r3, #4
 800821e:	d00d      	beq.n	800823c <tcp_close_shutdown_fin+0x4c>
 8008220:	e026      	b.n	8008270 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f003 fee6 	bl	800bff4 <tcp_send_fin>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800822c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11f      	bne.n	8008274 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2205      	movs	r2, #5
 8008238:	751a      	strb	r2, [r3, #20]
      }
      break;
 800823a:	e01b      	b.n	8008274 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f003 fed9 	bl	800bff4 <tcp_send_fin>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d114      	bne.n	8008278 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2205      	movs	r2, #5
 8008252:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008254:	e010      	b.n	8008278 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f003 fecc 	bl	800bff4 <tcp_send_fin>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2209      	movs	r2, #9
 800826c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800826e:	e005      	b.n	800827c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e01c      	b.n	80082ae <tcp_close_shutdown_fin+0xbe>
      break;
 8008274:	bf00      	nop
 8008276:	e002      	b.n	800827e <tcp_close_shutdown_fin+0x8e>
      break;
 8008278:	bf00      	nop
 800827a:	e000      	b.n	800827e <tcp_close_shutdown_fin+0x8e>
      break;
 800827c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800827e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f003 fff2 	bl	800c270 <tcp_output>
 800828c:	e00d      	b.n	80082aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800828e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008296:	d108      	bne.n	80082aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8b5b      	ldrh	r3, [r3, #26]
 800829c:	f043 0308 	orr.w	r3, r3, #8
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e001      	b.n	80082ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80082aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	08019150 	.word	0x08019150
 80082bc:	08019200 	.word	0x08019200
 80082c0:	08019194 	.word	0x08019194

080082c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d109      	bne.n	80082e6 <tcp_close+0x22>
 80082d2:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <tcp_close+0x4c>)
 80082d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80082d8:	490e      	ldr	r1, [pc, #56]	; (8008314 <tcp_close+0x50>)
 80082da:	480f      	ldr	r0, [pc, #60]	; (8008318 <tcp_close+0x54>)
 80082dc:	f008 fb88 	bl	80109f0 <printf>
 80082e0:	f06f 030f 	mvn.w	r3, #15
 80082e4:	e00f      	b.n	8008306 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7d1b      	ldrb	r3, [r3, #20]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d006      	beq.n	80082fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8b5b      	ldrh	r3, [r3, #26]
 80082f2:	f043 0310 	orr.w	r3, r3, #16
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80082fc:	2101      	movs	r1, #1
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff fe94 	bl	800802c <tcp_close_shutdown>
 8008304:	4603      	mov	r3, r0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	08019150 	.word	0x08019150
 8008314:	08019260 	.word	0x08019260
 8008318:	08019194 	.word	0x08019194

0800831c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08e      	sub	sp, #56	; 0x38
 8008320:	af04      	add	r7, sp, #16
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d107      	bne.n	800833c <tcp_abandon+0x20>
 800832c:	4b52      	ldr	r3, [pc, #328]	; (8008478 <tcp_abandon+0x15c>)
 800832e:	f240 223d 	movw	r2, #573	; 0x23d
 8008332:	4952      	ldr	r1, [pc, #328]	; (800847c <tcp_abandon+0x160>)
 8008334:	4852      	ldr	r0, [pc, #328]	; (8008480 <tcp_abandon+0x164>)
 8008336:	f008 fb5b 	bl	80109f0 <printf>
 800833a:	e099      	b.n	8008470 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7d1b      	ldrb	r3, [r3, #20]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <tcp_abandon+0x36>
 8008344:	4b4c      	ldr	r3, [pc, #304]	; (8008478 <tcp_abandon+0x15c>)
 8008346:	f44f 7210 	mov.w	r2, #576	; 0x240
 800834a:	494e      	ldr	r1, [pc, #312]	; (8008484 <tcp_abandon+0x168>)
 800834c:	484c      	ldr	r0, [pc, #304]	; (8008480 <tcp_abandon+0x164>)
 800834e:	f008 fb4f 	bl	80109f0 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	7d1b      	ldrb	r3, [r3, #20]
 8008356:	2b0a      	cmp	r3, #10
 8008358:	d107      	bne.n	800836a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	484a      	ldr	r0, [pc, #296]	; (8008488 <tcp_abandon+0x16c>)
 800835e:	f000 ffc3 	bl	80092e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff fdb0 	bl	8007ec8 <tcp_free>
 8008368:	e082      	b.n	8008470 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008376:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008384:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	7d1b      	ldrb	r3, [r3, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d126      	bne.n	80083e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	8adb      	ldrh	r3, [r3, #22]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d02e      	beq.n	80083fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800839c:	4b3b      	ldr	r3, [pc, #236]	; (800848c <tcp_abandon+0x170>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d105      	bne.n	80083b2 <tcp_abandon+0x96>
 80083a6:	4b39      	ldr	r3, [pc, #228]	; (800848c <tcp_abandon+0x170>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	4a37      	ldr	r2, [pc, #220]	; (800848c <tcp_abandon+0x170>)
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	e013      	b.n	80083da <tcp_abandon+0xbe>
 80083b2:	4b36      	ldr	r3, [pc, #216]	; (800848c <tcp_abandon+0x170>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	61fb      	str	r3, [r7, #28]
 80083b8:	e00c      	b.n	80083d4 <tcp_abandon+0xb8>
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d104      	bne.n	80083ce <tcp_abandon+0xb2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	60da      	str	r2, [r3, #12]
 80083cc:	e005      	b.n	80083da <tcp_abandon+0xbe>
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1ef      	bne.n	80083ba <tcp_abandon+0x9e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	60da      	str	r2, [r3, #12]
 80083e0:	e00b      	b.n	80083fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8adb      	ldrh	r3, [r3, #22]
 80083ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4828      	ldr	r0, [pc, #160]	; (8008490 <tcp_abandon+0x174>)
 80083f0:	f000 ff7a 	bl	80092e8 <tcp_pcb_remove>
 80083f4:	4b27      	ldr	r3, [pc, #156]	; (8008494 <tcp_abandon+0x178>)
 80083f6:	2201      	movs	r2, #1
 80083f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fd1c 	bl	8008e44 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fd13 	bl	8008e44 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008422:	2b00      	cmp	r3, #0
 8008424:	d004      	beq.n	8008430 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fd0a 	bl	8008e44 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00e      	beq.n	8008454 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	8b12      	ldrh	r2, [r2, #24]
 8008440:	9202      	str	r2, [sp, #8]
 8008442:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008444:	9201      	str	r2, [sp, #4]
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	460b      	mov	r3, r1
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	69b9      	ldr	r1, [r7, #24]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f004 fcc2 	bl	800cdd8 <tcp_rst>
    }
    last_state = pcb->state;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7d1b      	ldrb	r3, [r3, #20]
 8008458:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff fd34 	bl	8007ec8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <tcp_abandon+0x154>
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f06f 010c 	mvn.w	r1, #12
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	4798      	blx	r3
  }
}
 8008470:	3728      	adds	r7, #40	; 0x28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	08019150 	.word	0x08019150
 800847c:	08019294 	.word	0x08019294
 8008480:	08019194 	.word	0x08019194
 8008484:	080192b0 	.word	0x080192b0
 8008488:	20007298 	.word	0x20007298
 800848c:	2000728c 	.word	0x2000728c
 8008490:	20007294 	.word	0x20007294
 8008494:	2000729c 	.word	0x2000729c

08008498 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80084a0:	2101      	movs	r1, #1
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff ff3a 	bl	800831c <tcp_abandon>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <tcp_update_rcv_ann_wnd+0x1c>
 80084be:	4b25      	ldr	r3, [pc, #148]	; (8008554 <tcp_update_rcv_ann_wnd+0xa4>)
 80084c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80084c4:	4924      	ldr	r1, [pc, #144]	; (8008558 <tcp_update_rcv_ann_wnd+0xa8>)
 80084c6:	4825      	ldr	r0, [pc, #148]	; (800855c <tcp_update_rcv_ann_wnd+0xac>)
 80084c8:	f008 fa92 	bl	80109f0 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80084d4:	4413      	add	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80084e0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80084e4:	bf28      	it	cs
 80084e6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80084ea:	b292      	uxth	r2, r2
 80084ec:	4413      	add	r3, r2
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	db08      	blt.n	8008508 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	e020      	b.n	800854a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	dd03      	ble.n	800851e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800851c:	e014      	b.n	8008548 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008530:	d306      	bcc.n	8008540 <tcp_update_rcv_ann_wnd+0x90>
 8008532:	4b08      	ldr	r3, [pc, #32]	; (8008554 <tcp_update_rcv_ann_wnd+0xa4>)
 8008534:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008538:	4909      	ldr	r1, [pc, #36]	; (8008560 <tcp_update_rcv_ann_wnd+0xb0>)
 800853a:	4808      	ldr	r0, [pc, #32]	; (800855c <tcp_update_rcv_ann_wnd+0xac>)
 800853c:	f008 fa58 	bl	80109f0 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008548:	2300      	movs	r3, #0
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	08019150 	.word	0x08019150
 8008558:	080193ac 	.word	0x080193ac
 800855c:	08019194 	.word	0x08019194
 8008560:	080193d0 	.word	0x080193d0

08008564 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d107      	bne.n	8008586 <tcp_recved+0x22>
 8008576:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <tcp_recved+0x90>)
 8008578:	f240 32cf 	movw	r2, #975	; 0x3cf
 800857c:	491e      	ldr	r1, [pc, #120]	; (80085f8 <tcp_recved+0x94>)
 800857e:	481f      	ldr	r0, [pc, #124]	; (80085fc <tcp_recved+0x98>)
 8008580:	f008 fa36 	bl	80109f0 <printf>
 8008584:	e032      	b.n	80085ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	7d1b      	ldrb	r3, [r3, #20]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d106      	bne.n	800859c <tcp_recved+0x38>
 800858e:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <tcp_recved+0x90>)
 8008590:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008594:	491a      	ldr	r1, [pc, #104]	; (8008600 <tcp_recved+0x9c>)
 8008596:	4819      	ldr	r0, [pc, #100]	; (80085fc <tcp_recved+0x98>)
 8008598:	f008 fa2a 	bl	80109f0 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80085a0:	887b      	ldrh	r3, [r7, #2]
 80085a2:	4413      	add	r3, r2
 80085a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80085a6:	89fb      	ldrh	r3, [r7, #14]
 80085a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80085ac:	d804      	bhi.n	80085b8 <tcp_recved+0x54>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b2:	89fa      	ldrh	r2, [r7, #14]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d204      	bcs.n	80085c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80085be:	851a      	strh	r2, [r3, #40]	; 0x28
 80085c0:	e002      	b.n	80085c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	89fa      	ldrh	r2, [r7, #14]
 80085c6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff ff71 	bl	80084b0 <tcp_update_rcv_ann_wnd>
 80085ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80085d6:	d309      	bcc.n	80085ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8b5b      	ldrh	r3, [r3, #26]
 80085dc:	f043 0302 	orr.w	r3, r3, #2
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f003 fe42 	bl	800c270 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	08019150 	.word	0x08019150
 80085f8:	080193ec 	.word	0x080193ec
 80085fc:	08019194 	.word	0x08019194
 8008600:	08019404 	.word	0x08019404

08008604 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008604:	b5b0      	push	{r4, r5, r7, lr}
 8008606:	b090      	sub	sp, #64	; 0x40
 8008608:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008610:	4b94      	ldr	r3, [pc, #592]	; (8008864 <tcp_slowtmr+0x260>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	4a93      	ldr	r2, [pc, #588]	; (8008864 <tcp_slowtmr+0x260>)
 8008618:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800861a:	4b93      	ldr	r3, [pc, #588]	; (8008868 <tcp_slowtmr+0x264>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	3301      	adds	r3, #1
 8008620:	b2da      	uxtb	r2, r3
 8008622:	4b91      	ldr	r3, [pc, #580]	; (8008868 <tcp_slowtmr+0x264>)
 8008624:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800862a:	4b90      	ldr	r3, [pc, #576]	; (800886c <tcp_slowtmr+0x268>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008630:	e29d      	b.n	8008b6e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	7d1b      	ldrb	r3, [r3, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <tcp_slowtmr+0x44>
 800863a:	4b8d      	ldr	r3, [pc, #564]	; (8008870 <tcp_slowtmr+0x26c>)
 800863c:	f240 42be 	movw	r2, #1214	; 0x4be
 8008640:	498c      	ldr	r1, [pc, #560]	; (8008874 <tcp_slowtmr+0x270>)
 8008642:	488d      	ldr	r0, [pc, #564]	; (8008878 <tcp_slowtmr+0x274>)
 8008644:	f008 f9d4 	bl	80109f0 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864a:	7d1b      	ldrb	r3, [r3, #20]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d106      	bne.n	800865e <tcp_slowtmr+0x5a>
 8008650:	4b87      	ldr	r3, [pc, #540]	; (8008870 <tcp_slowtmr+0x26c>)
 8008652:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008656:	4989      	ldr	r1, [pc, #548]	; (800887c <tcp_slowtmr+0x278>)
 8008658:	4887      	ldr	r0, [pc, #540]	; (8008878 <tcp_slowtmr+0x274>)
 800865a:	f008 f9c9 	bl	80109f0 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	7d1b      	ldrb	r3, [r3, #20]
 8008662:	2b0a      	cmp	r3, #10
 8008664:	d106      	bne.n	8008674 <tcp_slowtmr+0x70>
 8008666:	4b82      	ldr	r3, [pc, #520]	; (8008870 <tcp_slowtmr+0x26c>)
 8008668:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800866c:	4984      	ldr	r1, [pc, #528]	; (8008880 <tcp_slowtmr+0x27c>)
 800866e:	4882      	ldr	r0, [pc, #520]	; (8008878 <tcp_slowtmr+0x274>)
 8008670:	f008 f9be 	bl	80109f0 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	7f9a      	ldrb	r2, [r3, #30]
 8008678:	4b7b      	ldr	r3, [pc, #492]	; (8008868 <tcp_slowtmr+0x264>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d105      	bne.n	800868c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800868a:	e270      	b.n	8008b6e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800868c:	4b76      	ldr	r3, [pc, #472]	; (8008868 <tcp_slowtmr+0x264>)
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a2:	7d1b      	ldrb	r3, [r3, #20]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d10a      	bne.n	80086be <tcp_slowtmr+0xba>
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086ae:	2b05      	cmp	r3, #5
 80086b0:	d905      	bls.n	80086be <tcp_slowtmr+0xba>
      ++pcb_remove;
 80086b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b6:	3301      	adds	r3, #1
 80086b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086bc:	e11e      	b.n	80088fc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086c4:	2b0b      	cmp	r3, #11
 80086c6:	d905      	bls.n	80086d4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80086c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086cc:	3301      	adds	r3, #1
 80086ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086d2:	e113      	b.n	80088fc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d075      	beq.n	80087ca <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d006      	beq.n	80086f4 <tcp_slowtmr+0xf0>
 80086e6:	4b62      	ldr	r3, [pc, #392]	; (8008870 <tcp_slowtmr+0x26c>)
 80086e8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80086ec:	4965      	ldr	r1, [pc, #404]	; (8008884 <tcp_slowtmr+0x280>)
 80086ee:	4862      	ldr	r0, [pc, #392]	; (8008878 <tcp_slowtmr+0x274>)
 80086f0:	f008 f97e 	bl	80109f0 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d106      	bne.n	800870a <tcp_slowtmr+0x106>
 80086fc:	4b5c      	ldr	r3, [pc, #368]	; (8008870 <tcp_slowtmr+0x26c>)
 80086fe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008702:	4961      	ldr	r1, [pc, #388]	; (8008888 <tcp_slowtmr+0x284>)
 8008704:	485c      	ldr	r0, [pc, #368]	; (8008878 <tcp_slowtmr+0x274>)
 8008706:	f008 f973 	bl	80109f0 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008710:	2b0b      	cmp	r3, #11
 8008712:	d905      	bls.n	8008720 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008718:	3301      	adds	r3, #1
 800871a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800871e:	e0ed      	b.n	80088fc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008722:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008726:	3b01      	subs	r3, #1
 8008728:	4a58      	ldr	r2, [pc, #352]	; (800888c <tcp_slowtmr+0x288>)
 800872a:	5cd3      	ldrb	r3, [r2, r3]
 800872c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008734:	7c7a      	ldrb	r2, [r7, #17]
 8008736:	429a      	cmp	r2, r3
 8008738:	d907      	bls.n	800874a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008740:	3301      	adds	r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008750:	7c7a      	ldrb	r2, [r7, #17]
 8008752:	429a      	cmp	r2, r3
 8008754:	f200 80d2 	bhi.w	80088fc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008758:	2301      	movs	r3, #1
 800875a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008762:	2b00      	cmp	r3, #0
 8008764:	d108      	bne.n	8008778 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008768:	f004 fc2a 	bl	800cfc0 <tcp_zero_window_probe>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d014      	beq.n	800879c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008772:	2300      	movs	r3, #0
 8008774:	623b      	str	r3, [r7, #32]
 8008776:	e011      	b.n	800879c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800877e:	4619      	mov	r1, r3
 8008780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008782:	f003 faef 	bl	800bd64 <tcp_split_unsent_seg>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d107      	bne.n	800879c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800878c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800878e:	f003 fd6f 	bl	800c270 <tcp_output>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 80ac 	beq.w	80088fc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80087a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80087b2:	2b06      	cmp	r3, #6
 80087b4:	f200 80a2 	bhi.w	80088fc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80087be:	3301      	adds	r3, #1
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80087c8:	e098      	b.n	80088fc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	db0f      	blt.n	80087f4 <tcp_slowtmr+0x1f0>
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80087da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80087de:	4293      	cmp	r3, r2
 80087e0:	d008      	beq.n	80087f4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3301      	adds	r3, #1
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	b21a      	sxth	r2, r3
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008800:	429a      	cmp	r2, r3
 8008802:	db7b      	blt.n	80088fc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008806:	f004 f825 	bl	800c854 <tcp_rexmit_rto_prepare>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <tcp_slowtmr+0x21c>
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008814:	2b00      	cmp	r3, #0
 8008816:	d171      	bne.n	80088fc <tcp_slowtmr+0x2f8>
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d06d      	beq.n	80088fc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	7d1b      	ldrb	r3, [r3, #20]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d03a      	beq.n	800889e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800882e:	2b0c      	cmp	r3, #12
 8008830:	bf28      	it	cs
 8008832:	230c      	movcs	r3, #12
 8008834:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800883c:	10db      	asrs	r3, r3, #3
 800883e:	b21b      	sxth	r3, r3
 8008840:	461a      	mov	r2, r3
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008844:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008848:	4413      	add	r3, r2
 800884a:	7efa      	ldrb	r2, [r7, #27]
 800884c:	4910      	ldr	r1, [pc, #64]	; (8008890 <tcp_slowtmr+0x28c>)
 800884e:	5c8a      	ldrb	r2, [r1, r2]
 8008850:	4093      	lsls	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800885a:	4293      	cmp	r3, r2
 800885c:	dc1a      	bgt.n	8008894 <tcp_slowtmr+0x290>
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	b21a      	sxth	r2, r3
 8008862:	e019      	b.n	8008898 <tcp_slowtmr+0x294>
 8008864:	20007288 	.word	0x20007288
 8008868:	2000729e 	.word	0x2000729e
 800886c:	20007294 	.word	0x20007294
 8008870:	08019150 	.word	0x08019150
 8008874:	08019494 	.word	0x08019494
 8008878:	08019194 	.word	0x08019194
 800887c:	080194c0 	.word	0x080194c0
 8008880:	080194ec 	.word	0x080194ec
 8008884:	0801951c 	.word	0x0801951c
 8008888:	08019550 	.word	0x08019550
 800888c:	0801b11c 	.word	0x0801b11c
 8008890:	0801b10c 	.word	0x0801b10c
 8008894:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	2200      	movs	r2, #0
 80088a2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088b0:	4293      	cmp	r3, r2
 80088b2:	bf28      	it	cs
 80088b4:	4613      	movcs	r3, r2
 80088b6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80088b8:	8a7b      	ldrh	r3, [r7, #18]
 80088ba:	085b      	lsrs	r3, r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d206      	bcs.n	80088e4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	2200      	movs	r2, #0
 80088f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80088f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088f8:	f004 f81c 	bl	800c934 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	7d1b      	ldrb	r3, [r3, #20]
 8008900:	2b06      	cmp	r3, #6
 8008902:	d111      	bne.n	8008928 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	8b5b      	ldrh	r3, [r3, #26]
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008910:	4b9c      	ldr	r3, [pc, #624]	; (8008b84 <tcp_slowtmr+0x580>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b28      	cmp	r3, #40	; 0x28
 800891c:	d904      	bls.n	8008928 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800891e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008922:	3301      	adds	r3, #1
 8008924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892a:	7a5b      	ldrb	r3, [r3, #9]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d04a      	beq.n	80089ca <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008938:	2b04      	cmp	r3, #4
 800893a:	d003      	beq.n	8008944 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008940:	2b07      	cmp	r3, #7
 8008942:	d142      	bne.n	80089ca <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008944:	4b8f      	ldr	r3, [pc, #572]	; (8008b84 <tcp_slowtmr+0x580>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008954:	4b8c      	ldr	r3, [pc, #560]	; (8008b88 <tcp_slowtmr+0x584>)
 8008956:	440b      	add	r3, r1
 8008958:	498c      	ldr	r1, [pc, #560]	; (8008b8c <tcp_slowtmr+0x588>)
 800895a:	fba1 1303 	umull	r1, r3, r1, r3
 800895e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008960:	429a      	cmp	r2, r3
 8008962:	d90a      	bls.n	800897a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008968:	3301      	adds	r3, #1
 800896a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800896e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008972:	3301      	adds	r3, #1
 8008974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008978:	e027      	b.n	80089ca <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800897a:	4b82      	ldr	r3, [pc, #520]	; (8008b84 <tcp_slowtmr+0x580>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008990:	4618      	mov	r0, r3
 8008992:	4b7f      	ldr	r3, [pc, #508]	; (8008b90 <tcp_slowtmr+0x58c>)
 8008994:	fb00 f303 	mul.w	r3, r0, r3
 8008998:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800899a:	497c      	ldr	r1, [pc, #496]	; (8008b8c <tcp_slowtmr+0x588>)
 800899c:	fba1 1303 	umull	r1, r3, r1, r3
 80089a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d911      	bls.n	80089ca <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80089a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a8:	f004 faca 	bl	800cf40 <tcp_keepalive>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80089b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d107      	bne.n	80089ca <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80089c0:	3301      	adds	r3, #1
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d011      	beq.n	80089f6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80089d2:	4b6c      	ldr	r3, [pc, #432]	; (8008b84 <tcp_slowtmr+0x580>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80089e2:	4619      	mov	r1, r3
 80089e4:	460b      	mov	r3, r1
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	440b      	add	r3, r1
 80089ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d302      	bcc.n	80089f6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80089f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089f2:	f000 fddd 	bl	80095b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	7d1b      	ldrb	r3, [r3, #20]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d10b      	bne.n	8008a16 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80089fe:	4b61      	ldr	r3, [pc, #388]	; (8008b84 <tcp_slowtmr+0x580>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b28      	cmp	r3, #40	; 0x28
 8008a0a:	d904      	bls.n	8008a16 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a10:	3301      	adds	r3, #1
 8008a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	7d1b      	ldrb	r3, [r3, #20]
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	d10b      	bne.n	8008a36 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008a1e:	4b59      	ldr	r3, [pc, #356]	; (8008b84 <tcp_slowtmr+0x580>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2bf0      	cmp	r3, #240	; 0xf0
 8008a2a:	d904      	bls.n	8008a36 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a30:	3301      	adds	r3, #1
 8008a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d060      	beq.n	8008b00 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a44:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a48:	f000 fbfe 	bl	8009248 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d010      	beq.n	8008a74 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008a52:	4b50      	ldr	r3, [pc, #320]	; (8008b94 <tcp_slowtmr+0x590>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d106      	bne.n	8008a6a <tcp_slowtmr+0x466>
 8008a5c:	4b4e      	ldr	r3, [pc, #312]	; (8008b98 <tcp_slowtmr+0x594>)
 8008a5e:	f240 526d 	movw	r2, #1389	; 0x56d
 8008a62:	494e      	ldr	r1, [pc, #312]	; (8008b9c <tcp_slowtmr+0x598>)
 8008a64:	484e      	ldr	r0, [pc, #312]	; (8008ba0 <tcp_slowtmr+0x59c>)
 8008a66:	f007 ffc3 	bl	80109f0 <printf>
        prev->next = pcb->next;
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	60da      	str	r2, [r3, #12]
 8008a72:	e00f      	b.n	8008a94 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008a74:	4b47      	ldr	r3, [pc, #284]	; (8008b94 <tcp_slowtmr+0x590>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d006      	beq.n	8008a8c <tcp_slowtmr+0x488>
 8008a7e:	4b46      	ldr	r3, [pc, #280]	; (8008b98 <tcp_slowtmr+0x594>)
 8008a80:	f240 5271 	movw	r2, #1393	; 0x571
 8008a84:	4947      	ldr	r1, [pc, #284]	; (8008ba4 <tcp_slowtmr+0x5a0>)
 8008a86:	4846      	ldr	r0, [pc, #280]	; (8008ba0 <tcp_slowtmr+0x59c>)
 8008a88:	f007 ffb2 	bl	80109f0 <printf>
        tcp_active_pcbs = pcb->next;
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	4a40      	ldr	r2, [pc, #256]	; (8008b94 <tcp_slowtmr+0x590>)
 8008a92:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d013      	beq.n	8008ac4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008aa4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aac:	8ad2      	ldrh	r2, [r2, #22]
 8008aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ab0:	8b09      	ldrh	r1, [r1, #24]
 8008ab2:	9102      	str	r1, [sp, #8]
 8008ab4:	9201      	str	r2, [sp, #4]
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	462b      	mov	r3, r5
 8008aba:	4622      	mov	r2, r4
 8008abc:	4601      	mov	r1, r0
 8008abe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ac0:	f004 f98a 	bl	800cdd8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	7d1b      	ldrb	r3, [r3, #20]
 8008ace:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	f7ff f9f4 	bl	8007ec8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008ae0:	4b31      	ldr	r3, [pc, #196]	; (8008ba8 <tcp_slowtmr+0x5a4>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <tcp_slowtmr+0x4f2>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f06f 010c 	mvn.w	r1, #12
 8008af2:	68b8      	ldr	r0, [r7, #8]
 8008af4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008af6:	4b2c      	ldr	r3, [pc, #176]	; (8008ba8 <tcp_slowtmr+0x5a4>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d037      	beq.n	8008b6e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008afe:	e592      	b.n	8008626 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	7f1b      	ldrb	r3, [r3, #28]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	7f1a      	ldrb	r2, [r3, #28]
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	7f5b      	ldrb	r3, [r3, #29]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d325      	bcc.n	8008b6e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008b28:	4b1f      	ldr	r3, [pc, #124]	; (8008ba8 <tcp_slowtmr+0x5a4>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <tcp_slowtmr+0x54c>
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b40:	6912      	ldr	r2, [r2, #16]
 8008b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b44:	4610      	mov	r0, r2
 8008b46:	4798      	blx	r3
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008b4e:	e002      	b.n	8008b56 <tcp_slowtmr+0x552>
 8008b50:	2300      	movs	r3, #0
 8008b52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008b56:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <tcp_slowtmr+0x5a4>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d000      	beq.n	8008b60 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008b5e:	e562      	b.n	8008626 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008b60:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6a:	f003 fb81 	bl	800c270 <tcp_output>
  while (pcb != NULL) {
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f ad5e 	bne.w	8008632 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <tcp_slowtmr+0x5a8>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008b80:	e069      	b.n	8008c56 <tcp_slowtmr+0x652>
 8008b82:	bf00      	nop
 8008b84:	20007288 	.word	0x20007288
 8008b88:	000a4cb8 	.word	0x000a4cb8
 8008b8c:	10624dd3 	.word	0x10624dd3
 8008b90:	000124f8 	.word	0x000124f8
 8008b94:	20007294 	.word	0x20007294
 8008b98:	08019150 	.word	0x08019150
 8008b9c:	08019588 	.word	0x08019588
 8008ba0:	08019194 	.word	0x08019194
 8008ba4:	080195b4 	.word	0x080195b4
 8008ba8:	2000729c 	.word	0x2000729c
 8008bac:	20007298 	.word	0x20007298
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	7d1b      	ldrb	r3, [r3, #20]
 8008bb4:	2b0a      	cmp	r3, #10
 8008bb6:	d006      	beq.n	8008bc6 <tcp_slowtmr+0x5c2>
 8008bb8:	4b2b      	ldr	r3, [pc, #172]	; (8008c68 <tcp_slowtmr+0x664>)
 8008bba:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008bbe:	492b      	ldr	r1, [pc, #172]	; (8008c6c <tcp_slowtmr+0x668>)
 8008bc0:	482b      	ldr	r0, [pc, #172]	; (8008c70 <tcp_slowtmr+0x66c>)
 8008bc2:	f007 ff15 	bl	80109f0 <printf>
    pcb_remove = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008bcc:	4b29      	ldr	r3, [pc, #164]	; (8008c74 <tcp_slowtmr+0x670>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	2bf0      	cmp	r3, #240	; 0xf0
 8008bd8:	d904      	bls.n	8008be4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bde:	3301      	adds	r3, #1
 8008be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02f      	beq.n	8008c4c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bee:	f000 fb2b 	bl	8009248 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d010      	beq.n	8008c1a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008bf8:	4b1f      	ldr	r3, [pc, #124]	; (8008c78 <tcp_slowtmr+0x674>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d106      	bne.n	8008c10 <tcp_slowtmr+0x60c>
 8008c02:	4b19      	ldr	r3, [pc, #100]	; (8008c68 <tcp_slowtmr+0x664>)
 8008c04:	f240 52af 	movw	r2, #1455	; 0x5af
 8008c08:	491c      	ldr	r1, [pc, #112]	; (8008c7c <tcp_slowtmr+0x678>)
 8008c0a:	4819      	ldr	r0, [pc, #100]	; (8008c70 <tcp_slowtmr+0x66c>)
 8008c0c:	f007 fef0 	bl	80109f0 <printf>
        prev->next = pcb->next;
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	60da      	str	r2, [r3, #12]
 8008c18:	e00f      	b.n	8008c3a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008c1a:	4b17      	ldr	r3, [pc, #92]	; (8008c78 <tcp_slowtmr+0x674>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d006      	beq.n	8008c32 <tcp_slowtmr+0x62e>
 8008c24:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <tcp_slowtmr+0x664>)
 8008c26:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008c2a:	4915      	ldr	r1, [pc, #84]	; (8008c80 <tcp_slowtmr+0x67c>)
 8008c2c:	4810      	ldr	r0, [pc, #64]	; (8008c70 <tcp_slowtmr+0x66c>)
 8008c2e:	f007 fedf 	bl	80109f0 <printf>
        tcp_tw_pcbs = pcb->next;
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	4a10      	ldr	r2, [pc, #64]	; (8008c78 <tcp_slowtmr+0x674>)
 8008c38:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008c44:	69f8      	ldr	r0, [r7, #28]
 8008c46:	f7ff f93f 	bl	8007ec8 <tcp_free>
 8008c4a:	e004      	b.n	8008c56 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1a9      	bne.n	8008bb0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	3730      	adds	r7, #48	; 0x30
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bdb0      	pop	{r4, r5, r7, pc}
 8008c66:	bf00      	nop
 8008c68:	08019150 	.word	0x08019150
 8008c6c:	080195e0 	.word	0x080195e0
 8008c70:	08019194 	.word	0x08019194
 8008c74:	20007288 	.word	0x20007288
 8008c78:	20007298 	.word	0x20007298
 8008c7c:	08019610 	.word	0x08019610
 8008c80:	08019638 	.word	0x08019638

08008c84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008c8a:	4b2d      	ldr	r3, [pc, #180]	; (8008d40 <tcp_fasttmr+0xbc>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	4b2b      	ldr	r3, [pc, #172]	; (8008d40 <tcp_fasttmr+0xbc>)
 8008c94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008c96:	4b2b      	ldr	r3, [pc, #172]	; (8008d44 <tcp_fasttmr+0xc0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008c9c:	e048      	b.n	8008d30 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7f9a      	ldrb	r2, [r3, #30]
 8008ca2:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <tcp_fasttmr+0xbc>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d03f      	beq.n	8008d2a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008caa:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <tcp_fasttmr+0xbc>)
 8008cac:	781a      	ldrb	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	8b5b      	ldrh	r3, [r3, #26]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d010      	beq.n	8008ce0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	8b5b      	ldrh	r3, [r3, #26]
 8008cc2:	f043 0302 	orr.w	r3, r3, #2
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f003 facf 	bl	800c270 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	8b5b      	ldrh	r3, [r3, #26]
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	8b5b      	ldrh	r3, [r3, #26]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d009      	beq.n	8008d00 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	8b5b      	ldrh	r3, [r3, #26]
 8008cf0:	f023 0308 	bic.w	r3, r3, #8
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff fa78 	bl	80081f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008d0e:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <tcp_fasttmr+0xc4>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f819 	bl	8008d4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008d1a:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <tcp_fasttmr+0xc4>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d000      	beq.n	8008d24 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008d22:	e7b8      	b.n	8008c96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	607b      	str	r3, [r7, #4]
 8008d28:	e002      	b.n	8008d30 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1b3      	bne.n	8008c9e <tcp_fasttmr+0x1a>
    }
  }
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	2000729e 	.word	0x2000729e
 8008d44:	20007294 	.word	0x20007294
 8008d48:	2000729c 	.word	0x2000729c

08008d4c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008d4c:	b590      	push	{r4, r7, lr}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <tcp_process_refused_data+0x22>
 8008d5a:	4b37      	ldr	r3, [pc, #220]	; (8008e38 <tcp_process_refused_data+0xec>)
 8008d5c:	f240 6209 	movw	r2, #1545	; 0x609
 8008d60:	4936      	ldr	r1, [pc, #216]	; (8008e3c <tcp_process_refused_data+0xf0>)
 8008d62:	4837      	ldr	r0, [pc, #220]	; (8008e40 <tcp_process_refused_data+0xf4>)
 8008d64:	f007 fe44 	bl	80109f0 <printf>
 8008d68:	f06f 030f 	mvn.w	r3, #15
 8008d6c:	e060      	b.n	8008e30 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d72:	7b5b      	ldrb	r3, [r3, #13]
 8008d74:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d7a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <tcp_process_refused_data+0x58>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6918      	ldr	r0, [r3, #16]
 8008d96:	2300      	movs	r3, #0
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	47a0      	blx	r4
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
 8008da2:	e007      	b.n	8008db4 <tcp_process_refused_data+0x68>
 8008da4:	2300      	movs	r3, #0
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	2000      	movs	r0, #0
 8008dac:	f000 f8a4 	bl	8008ef8 <tcp_recv_null>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d12a      	bne.n	8008e12 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d033      	beq.n	8008e2e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008dce:	d005      	beq.n	8008ddc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00b      	beq.n	8008dfe <tcp_process_refused_data+0xb2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6918      	ldr	r0, [r3, #16]
 8008df0:	2300      	movs	r3, #0
 8008df2:	2200      	movs	r2, #0
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	47a0      	blx	r4
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	e001      	b.n	8008e02 <tcp_process_refused_data+0xb6>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e06:	f113 0f0d 	cmn.w	r3, #13
 8008e0a:	d110      	bne.n	8008e2e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008e0c:	f06f 030c 	mvn.w	r3, #12
 8008e10:	e00e      	b.n	8008e30 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e16:	f113 0f0d 	cmn.w	r3, #13
 8008e1a:	d102      	bne.n	8008e22 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008e1c:	f06f 030c 	mvn.w	r3, #12
 8008e20:	e006      	b.n	8008e30 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008e28:	f06f 0304 	mvn.w	r3, #4
 8008e2c:	e000      	b.n	8008e30 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd90      	pop	{r4, r7, pc}
 8008e38:	08019150 	.word	0x08019150
 8008e3c:	08019660 	.word	0x08019660
 8008e40:	08019194 	.word	0x08019194

08008e44 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008e4c:	e007      	b.n	8008e5e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f80a 	bl	8008e6e <tcp_seg_free>
    seg = next;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1f4      	bne.n	8008e4e <tcp_segs_free+0xa>
  }
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00c      	beq.n	8008e96 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fcdb 	bl	8007844 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	2003      	movs	r0, #3
 8008e92:	f7fd fec5 	bl	8006c20 <memp_free>
  }
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <tcp_seg_copy+0x1c>
 8008eae:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <tcp_seg_copy+0x4c>)
 8008eb0:	f240 6282 	movw	r2, #1666	; 0x682
 8008eb4:	490e      	ldr	r1, [pc, #56]	; (8008ef0 <tcp_seg_copy+0x50>)
 8008eb6:	480f      	ldr	r0, [pc, #60]	; (8008ef4 <tcp_seg_copy+0x54>)
 8008eb8:	f007 fd9a 	bl	80109f0 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008ebc:	2003      	movs	r0, #3
 8008ebe:	f7fd fe63 	bl	8006b88 <memp_malloc>
 8008ec2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <tcp_seg_copy+0x2e>
    return NULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e00a      	b.n	8008ee4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008ece:	2210      	movs	r2, #16
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f007 faea 	bl	80104ac <memcpy>
  pbuf_ref(cseg->p);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fd51 	bl	8007984 <pbuf_ref>
  return cseg;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	08019150 	.word	0x08019150
 8008ef0:	080196a4 	.word	0x080196a4
 8008ef4:	08019194 	.word	0x08019194

08008ef8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <tcp_recv_null+0x28>
 8008f0c:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <tcp_recv_null+0x60>)
 8008f0e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008f12:	4912      	ldr	r1, [pc, #72]	; (8008f5c <tcp_recv_null+0x64>)
 8008f14:	4812      	ldr	r0, [pc, #72]	; (8008f60 <tcp_recv_null+0x68>)
 8008f16:	f007 fd6b 	bl	80109f0 <printf>
 8008f1a:	f06f 030f 	mvn.w	r3, #15
 8008f1e:	e016      	b.n	8008f4e <tcp_recv_null+0x56>

  if (p != NULL) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d009      	beq.n	8008f3a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	891b      	ldrh	r3, [r3, #8]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	68b8      	ldr	r0, [r7, #8]
 8008f2e:	f7ff fb19 	bl	8008564 <tcp_recved>
    pbuf_free(p);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fe fc86 	bl	8007844 <pbuf_free>
 8008f38:	e008      	b.n	8008f4c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008f42:	68b8      	ldr	r0, [r7, #8]
 8008f44:	f7ff f9be 	bl	80082c4 <tcp_close>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	e000      	b.n	8008f4e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	08019150 	.word	0x08019150
 8008f5c:	080196c0 	.word	0x080196c0
 8008f60:	08019194 	.word	0x08019194

08008f64 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	db01      	blt.n	8008f7a <tcp_kill_prio+0x16>
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	e000      	b.n	8008f7c <tcp_kill_prio+0x18>
 8008f7a:	237f      	movs	r3, #127	; 0x7f
 8008f7c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d034      	beq.n	8008fee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f92:	4b19      	ldr	r3, [pc, #100]	; (8008ff8 <tcp_kill_prio+0x94>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	e01f      	b.n	8008fda <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	7d5b      	ldrb	r3, [r3, #21]
 8008f9e:	7afa      	ldrb	r2, [r7, #11]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d80c      	bhi.n	8008fbe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008fa8:	7afa      	ldrb	r2, [r7, #11]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d112      	bne.n	8008fd4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <tcp_kill_prio+0x98>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d80a      	bhi.n	8008fd4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <tcp_kill_prio+0x98>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	7d5b      	ldrb	r3, [r3, #21]
 8008fd2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1dc      	bne.n	8008f9a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008fe6:	6938      	ldr	r0, [r7, #16]
 8008fe8:	f7ff fa56 	bl	8008498 <tcp_abort>
 8008fec:	e000      	b.n	8008ff0 <tcp_kill_prio+0x8c>
    return;
 8008fee:	bf00      	nop
  }
}
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20007294 	.word	0x20007294
 8008ffc:	20007288 	.word	0x20007288

08009000 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	2b08      	cmp	r3, #8
 800900e:	d009      	beq.n	8009024 <tcp_kill_state+0x24>
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	2b09      	cmp	r3, #9
 8009014:	d006      	beq.n	8009024 <tcp_kill_state+0x24>
 8009016:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <tcp_kill_state+0x80>)
 8009018:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800901c:	4919      	ldr	r1, [pc, #100]	; (8009084 <tcp_kill_state+0x84>)
 800901e:	481a      	ldr	r0, [pc, #104]	; (8009088 <tcp_kill_state+0x88>)
 8009020:	f007 fce6 	bl	80109f0 <printf>

  inactivity = 0;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800902c:	4b17      	ldr	r3, [pc, #92]	; (800908c <tcp_kill_state+0x8c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	e017      	b.n	8009064 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	7d1b      	ldrb	r3, [r3, #20]
 8009038:	79fa      	ldrb	r2, [r7, #7]
 800903a:	429a      	cmp	r2, r3
 800903c:	d10f      	bne.n	800905e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800903e:	4b14      	ldr	r3, [pc, #80]	; (8009090 <tcp_kill_state+0x90>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	429a      	cmp	r2, r3
 800904c:	d807      	bhi.n	800905e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800904e:	4b10      	ldr	r3, [pc, #64]	; (8009090 <tcp_kill_state+0x90>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e4      	bne.n	8009034 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009070:	2100      	movs	r1, #0
 8009072:	6938      	ldr	r0, [r7, #16]
 8009074:	f7ff f952 	bl	800831c <tcp_abandon>
  }
}
 8009078:	bf00      	nop
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	08019150 	.word	0x08019150
 8009084:	080196dc 	.word	0x080196dc
 8009088:	08019194 	.word	0x08019194
 800908c:	20007294 	.word	0x20007294
 8009090:	20007288 	.word	0x20007288

08009094 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <tcp_kill_timewait+0x58>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	e012      	b.n	80090d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80090aa:	4b11      	ldr	r3, [pc, #68]	; (80090f0 <tcp_kill_timewait+0x5c>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d807      	bhi.n	80090ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80090ba:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <tcp_kill_timewait+0x5c>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e9      	bne.n	80090aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80090dc:	68b8      	ldr	r0, [r7, #8]
 80090de:	f7ff f9db 	bl	8008498 <tcp_abort>
  }
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20007298 	.word	0x20007298
 80090f0:	20007288 	.word	0x20007288

080090f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80090fa:	4b10      	ldr	r3, [pc, #64]	; (800913c <tcp_handle_closepend+0x48>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009100:	e014      	b.n	800912c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	8b5b      	ldrh	r3, [r3, #26]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d009      	beq.n	8009128 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8b5b      	ldrh	r3, [r3, #26]
 8009118:	f023 0308 	bic.w	r3, r3, #8
 800911c:	b29a      	uxth	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff f864 	bl	80081f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e7      	bne.n	8009102 <tcp_handle_closepend+0xe>
  }
}
 8009132:	bf00      	nop
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20007294 	.word	0x20007294

08009140 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800914a:	2001      	movs	r0, #1
 800914c:	f7fd fd1c 	bl	8006b88 <memp_malloc>
 8009150:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d126      	bne.n	80091a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009158:	f7ff ffcc 	bl	80090f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800915c:	f7ff ff9a 	bl	8009094 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009160:	2001      	movs	r0, #1
 8009162:	f7fd fd11 	bl	8006b88 <memp_malloc>
 8009166:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d11b      	bne.n	80091a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800916e:	2009      	movs	r0, #9
 8009170:	f7ff ff46 	bl	8009000 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009174:	2001      	movs	r0, #1
 8009176:	f7fd fd07 	bl	8006b88 <memp_malloc>
 800917a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d111      	bne.n	80091a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009182:	2008      	movs	r0, #8
 8009184:	f7ff ff3c 	bl	8009000 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009188:	2001      	movs	r0, #1
 800918a:	f7fd fcfd 	bl	8006b88 <memp_malloc>
 800918e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fee3 	bl	8008f64 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800919e:	2001      	movs	r0, #1
 80091a0:	f7fd fcf2 	bl	8006b88 <memp_malloc>
 80091a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d03f      	beq.n	800922c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80091ac:	229c      	movs	r2, #156	; 0x9c
 80091ae:	2100      	movs	r1, #0
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f007 f9a3 	bl	80104fc <memset>
    pcb->prio = prio;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	79fa      	ldrb	r2, [r7, #7]
 80091ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80091c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80091cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	22ff      	movs	r2, #255	; 0xff
 80091da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f44f 7206 	mov.w	r2, #536	; 0x218
 80091e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2206      	movs	r2, #6
 80091e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2206      	movs	r2, #6
 80091f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009202:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <tcp_alloc+0xf8>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <tcp_alloc+0xfc>)
 800920c:	781a      	ldrb	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009218:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4a08      	ldr	r2, [pc, #32]	; (8009240 <tcp_alloc+0x100>)
 8009220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4a07      	ldr	r2, [pc, #28]	; (8009244 <tcp_alloc+0x104>)
 8009228:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800922c:	68fb      	ldr	r3, [r7, #12]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20007288 	.word	0x20007288
 800923c:	2000729e 	.word	0x2000729e
 8009240:	08008ef9 	.word	0x08008ef9
 8009244:	006ddd00 	.word	0x006ddd00

08009248 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d107      	bne.n	8009266 <tcp_pcb_purge+0x1e>
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <tcp_pcb_purge+0x94>)
 8009258:	f640 0251 	movw	r2, #2129	; 0x851
 800925c:	4920      	ldr	r1, [pc, #128]	; (80092e0 <tcp_pcb_purge+0x98>)
 800925e:	4821      	ldr	r0, [pc, #132]	; (80092e4 <tcp_pcb_purge+0x9c>)
 8009260:	f007 fbc6 	bl	80109f0 <printf>
 8009264:	e037      	b.n	80092d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	7d1b      	ldrb	r3, [r3, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d033      	beq.n	80092d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009272:	2b0a      	cmp	r3, #10
 8009274:	d02f      	beq.n	80092d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800927a:	2b01      	cmp	r3, #1
 800927c:	d02b      	beq.n	80092d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fada 	bl	8007844 <pbuf_free>
      pcb->refused_data = NULL;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f986 	bl	80095b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff fdc7 	bl	8008e44 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fdc2 	bl	8008e44 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	08019150 	.word	0x08019150
 80092e0:	0801979c 	.word	0x0801979c
 80092e4:	08019194 	.word	0x08019194

080092e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <tcp_pcb_remove+0x1e>
 80092f8:	4b3e      	ldr	r3, [pc, #248]	; (80093f4 <tcp_pcb_remove+0x10c>)
 80092fa:	f640 0283 	movw	r2, #2179	; 0x883
 80092fe:	493e      	ldr	r1, [pc, #248]	; (80093f8 <tcp_pcb_remove+0x110>)
 8009300:	483e      	ldr	r0, [pc, #248]	; (80093fc <tcp_pcb_remove+0x114>)
 8009302:	f007 fb75 	bl	80109f0 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <tcp_pcb_remove+0x32>
 800930c:	4b39      	ldr	r3, [pc, #228]	; (80093f4 <tcp_pcb_remove+0x10c>)
 800930e:	f640 0284 	movw	r2, #2180	; 0x884
 8009312:	493b      	ldr	r1, [pc, #236]	; (8009400 <tcp_pcb_remove+0x118>)
 8009314:	4839      	ldr	r0, [pc, #228]	; (80093fc <tcp_pcb_remove+0x114>)
 8009316:	f007 fb6b 	bl	80109f0 <printf>

  TCP_RMV(pcblist, pcb);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d105      	bne.n	8009330 <tcp_pcb_remove+0x48>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	e013      	b.n	8009358 <tcp_pcb_remove+0x70>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e00c      	b.n	8009352 <tcp_pcb_remove+0x6a>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d104      	bne.n	800934c <tcp_pcb_remove+0x64>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	60da      	str	r2, [r3, #12]
 800934a:	e005      	b.n	8009358 <tcp_pcb_remove+0x70>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1ef      	bne.n	8009338 <tcp_pcb_remove+0x50>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2200      	movs	r2, #0
 800935c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800935e:	6838      	ldr	r0, [r7, #0]
 8009360:	f7ff ff72 	bl	8009248 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	7d1b      	ldrb	r3, [r3, #20]
 8009368:	2b0a      	cmp	r3, #10
 800936a:	d013      	beq.n	8009394 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009370:	2b01      	cmp	r3, #1
 8009372:	d00f      	beq.n	8009394 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	8b5b      	ldrh	r3, [r3, #26]
 8009378:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800937c:	2b00      	cmp	r3, #0
 800937e:	d009      	beq.n	8009394 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	8b5b      	ldrh	r3, [r3, #26]
 8009384:	f043 0302 	orr.w	r3, r3, #2
 8009388:	b29a      	uxth	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800938e:	6838      	ldr	r0, [r7, #0]
 8009390:	f002 ff6e 	bl	800c270 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	7d1b      	ldrb	r3, [r3, #20]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d020      	beq.n	80093de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d006      	beq.n	80093b2 <tcp_pcb_remove+0xca>
 80093a4:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <tcp_pcb_remove+0x10c>)
 80093a6:	f640 0293 	movw	r2, #2195	; 0x893
 80093aa:	4916      	ldr	r1, [pc, #88]	; (8009404 <tcp_pcb_remove+0x11c>)
 80093ac:	4813      	ldr	r0, [pc, #76]	; (80093fc <tcp_pcb_remove+0x114>)
 80093ae:	f007 fb1f 	bl	80109f0 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d006      	beq.n	80093c8 <tcp_pcb_remove+0xe0>
 80093ba:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <tcp_pcb_remove+0x10c>)
 80093bc:	f640 0294 	movw	r2, #2196	; 0x894
 80093c0:	4911      	ldr	r1, [pc, #68]	; (8009408 <tcp_pcb_remove+0x120>)
 80093c2:	480e      	ldr	r0, [pc, #56]	; (80093fc <tcp_pcb_remove+0x114>)
 80093c4:	f007 fb14 	bl	80109f0 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d006      	beq.n	80093de <tcp_pcb_remove+0xf6>
 80093d0:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <tcp_pcb_remove+0x10c>)
 80093d2:	f640 0296 	movw	r2, #2198	; 0x896
 80093d6:	490d      	ldr	r1, [pc, #52]	; (800940c <tcp_pcb_remove+0x124>)
 80093d8:	4808      	ldr	r0, [pc, #32]	; (80093fc <tcp_pcb_remove+0x114>)
 80093da:	f007 fb09 	bl	80109f0 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2200      	movs	r2, #0
 80093e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2200      	movs	r2, #0
 80093e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	08019150 	.word	0x08019150
 80093f8:	080197b8 	.word	0x080197b8
 80093fc:	08019194 	.word	0x08019194
 8009400:	080197d4 	.word	0x080197d4
 8009404:	080197f4 	.word	0x080197f4
 8009408:	0801980c 	.word	0x0801980c
 800940c:	08019828 	.word	0x08019828

08009410 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <tcp_next_iss+0x1c>
 800941e:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <tcp_next_iss+0x38>)
 8009420:	f640 02af 	movw	r2, #2223	; 0x8af
 8009424:	4909      	ldr	r1, [pc, #36]	; (800944c <tcp_next_iss+0x3c>)
 8009426:	480a      	ldr	r0, [pc, #40]	; (8009450 <tcp_next_iss+0x40>)
 8009428:	f007 fae2 	bl	80109f0 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <tcp_next_iss+0x44>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	4b09      	ldr	r3, [pc, #36]	; (8009458 <tcp_next_iss+0x48>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4413      	add	r3, r2
 8009436:	4a07      	ldr	r2, [pc, #28]	; (8009454 <tcp_next_iss+0x44>)
 8009438:	6013      	str	r3, [r2, #0]
  return iss;
 800943a:	4b06      	ldr	r3, [pc, #24]	; (8009454 <tcp_next_iss+0x44>)
 800943c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	08019150 	.word	0x08019150
 800944c:	08019840 	.word	0x08019840
 8009450:	08019194 	.word	0x08019194
 8009454:	20000014 	.word	0x20000014
 8009458:	20007288 	.word	0x20007288

0800945c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <tcp_eff_send_mss_netif+0x22>
 8009470:	4b14      	ldr	r3, [pc, #80]	; (80094c4 <tcp_eff_send_mss_netif+0x68>)
 8009472:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009476:	4914      	ldr	r1, [pc, #80]	; (80094c8 <tcp_eff_send_mss_netif+0x6c>)
 8009478:	4814      	ldr	r0, [pc, #80]	; (80094cc <tcp_eff_send_mss_netif+0x70>)
 800947a:	f007 fab9 	bl	80109f0 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	e019      	b.n	80094bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800948c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800948e:	8afb      	ldrh	r3, [r7, #22]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d012      	beq.n	80094ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009494:	2328      	movs	r3, #40	; 0x28
 8009496:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009498:	8afa      	ldrh	r2, [r7, #22]
 800949a:	8abb      	ldrh	r3, [r7, #20]
 800949c:	429a      	cmp	r2, r3
 800949e:	d904      	bls.n	80094aa <tcp_eff_send_mss_netif+0x4e>
 80094a0:	8afa      	ldrh	r2, [r7, #22]
 80094a2:	8abb      	ldrh	r3, [r7, #20]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	e000      	b.n	80094ac <tcp_eff_send_mss_netif+0x50>
 80094aa:	2300      	movs	r3, #0
 80094ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80094ae:	8a7a      	ldrh	r2, [r7, #18]
 80094b0:	89fb      	ldrh	r3, [r7, #14]
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bf28      	it	cs
 80094b6:	4613      	movcs	r3, r2
 80094b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80094ba:	89fb      	ldrh	r3, [r7, #14]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	08019150 	.word	0x08019150
 80094c8:	0801985c 	.word	0x0801985c
 80094cc:	08019194 	.word	0x08019194

080094d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d119      	bne.n	8009518 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80094e4:	4b10      	ldr	r3, [pc, #64]	; (8009528 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80094e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80094ea:	4910      	ldr	r1, [pc, #64]	; (800952c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80094ec:	4810      	ldr	r0, [pc, #64]	; (8009530 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80094ee:	f007 fa7f 	bl	80109f0 <printf>

  while (pcb != NULL) {
 80094f2:	e011      	b.n	8009518 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d108      	bne.n	8009512 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f7fe ffc6 	bl	8008498 <tcp_abort>
      pcb = next;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e002      	b.n	8009518 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1ea      	bne.n	80094f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	08019150 	.word	0x08019150
 800952c:	08019884 	.word	0x08019884
 8009530:	08019194 	.word	0x08019194

08009534 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d02a      	beq.n	800959a <tcp_netif_ip_addr_changed+0x66>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d026      	beq.n	800959a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <tcp_netif_ip_addr_changed+0x70>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7ff ffbc 	bl	80094d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009558:	4b13      	ldr	r3, [pc, #76]	; (80095a8 <tcp_netif_ip_addr_changed+0x74>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff ffb6 	bl	80094d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d017      	beq.n	800959a <tcp_netif_ip_addr_changed+0x66>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d013      	beq.n	800959a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009572:	4b0e      	ldr	r3, [pc, #56]	; (80095ac <tcp_netif_ip_addr_changed+0x78>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e00c      	b.n	8009594 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d103      	bne.n	800958e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1ef      	bne.n	800957a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20007294 	.word	0x20007294
 80095a8:	2000728c 	.word	0x2000728c
 80095ac:	20007290 	.word	0x20007290

080095b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff fc3d 	bl	8008e44 <tcp_segs_free>
    pcb->ooseq = NULL;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80095d8:	b590      	push	{r4, r7, lr}
 80095da:	b08d      	sub	sp, #52	; 0x34
 80095dc:	af04      	add	r7, sp, #16
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d105      	bne.n	80095f4 <tcp_input+0x1c>
 80095e8:	4b9b      	ldr	r3, [pc, #620]	; (8009858 <tcp_input+0x280>)
 80095ea:	2283      	movs	r2, #131	; 0x83
 80095ec:	499b      	ldr	r1, [pc, #620]	; (800985c <tcp_input+0x284>)
 80095ee:	489c      	ldr	r0, [pc, #624]	; (8009860 <tcp_input+0x288>)
 80095f0:	f007 f9fe 	bl	80109f0 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4a9a      	ldr	r2, [pc, #616]	; (8009864 <tcp_input+0x28c>)
 80095fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	895b      	ldrh	r3, [r3, #10]
 8009600:	2b13      	cmp	r3, #19
 8009602:	f240 83d1 	bls.w	8009da8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009606:	4b98      	ldr	r3, [pc, #608]	; (8009868 <tcp_input+0x290>)
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	4a97      	ldr	r2, [pc, #604]	; (8009868 <tcp_input+0x290>)
 800960c:	6812      	ldr	r2, [r2, #0]
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f005 fec5 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f040 83c7 	bne.w	8009dac <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800961e:	4b92      	ldr	r3, [pc, #584]	; (8009868 <tcp_input+0x290>)
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009626:	2be0      	cmp	r3, #224	; 0xe0
 8009628:	f000 83c0 	beq.w	8009dac <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800962c:	4b8d      	ldr	r3, [pc, #564]	; (8009864 <tcp_input+0x28c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	899b      	ldrh	r3, [r3, #12]
 8009632:	b29b      	uxth	r3, r3
 8009634:	4618      	mov	r0, r3
 8009636:	f7fc fe51 	bl	80062dc <lwip_htons>
 800963a:	4603      	mov	r3, r0
 800963c:	0b1b      	lsrs	r3, r3, #12
 800963e:	b29b      	uxth	r3, r3
 8009640:	b2db      	uxtb	r3, r3
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009646:	7cbb      	ldrb	r3, [r7, #18]
 8009648:	2b13      	cmp	r3, #19
 800964a:	f240 83b1 	bls.w	8009db0 <tcp_input+0x7d8>
 800964e:	7cbb      	ldrb	r3, [r7, #18]
 8009650:	b29a      	uxth	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	891b      	ldrh	r3, [r3, #8]
 8009656:	429a      	cmp	r2, r3
 8009658:	f200 83aa 	bhi.w	8009db0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800965c:	7cbb      	ldrb	r3, [r7, #18]
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b14      	subs	r3, #20
 8009662:	b29a      	uxth	r2, r3
 8009664:	4b81      	ldr	r3, [pc, #516]	; (800986c <tcp_input+0x294>)
 8009666:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009668:	4b81      	ldr	r3, [pc, #516]	; (8009870 <tcp_input+0x298>)
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	895a      	ldrh	r2, [r3, #10]
 8009672:	7cbb      	ldrb	r3, [r7, #18]
 8009674:	b29b      	uxth	r3, r3
 8009676:	429a      	cmp	r2, r3
 8009678:	d309      	bcc.n	800968e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800967a:	4b7c      	ldr	r3, [pc, #496]	; (800986c <tcp_input+0x294>)
 800967c:	881a      	ldrh	r2, [r3, #0]
 800967e:	4b7d      	ldr	r3, [pc, #500]	; (8009874 <tcp_input+0x29c>)
 8009680:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009682:	7cbb      	ldrb	r3, [r7, #18]
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7fe f856 	bl	8007738 <pbuf_remove_header>
 800968c:	e04e      	b.n	800972c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d105      	bne.n	80096a2 <tcp_input+0xca>
 8009696:	4b70      	ldr	r3, [pc, #448]	; (8009858 <tcp_input+0x280>)
 8009698:	22c2      	movs	r2, #194	; 0xc2
 800969a:	4977      	ldr	r1, [pc, #476]	; (8009878 <tcp_input+0x2a0>)
 800969c:	4870      	ldr	r0, [pc, #448]	; (8009860 <tcp_input+0x288>)
 800969e:	f007 f9a7 	bl	80109f0 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80096a2:	2114      	movs	r1, #20
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7fe f847 	bl	8007738 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	895a      	ldrh	r2, [r3, #10]
 80096ae:	4b71      	ldr	r3, [pc, #452]	; (8009874 <tcp_input+0x29c>)
 80096b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80096b2:	4b6e      	ldr	r3, [pc, #440]	; (800986c <tcp_input+0x294>)
 80096b4:	881a      	ldrh	r2, [r3, #0]
 80096b6:	4b6f      	ldr	r3, [pc, #444]	; (8009874 <tcp_input+0x29c>)
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80096be:	4b6d      	ldr	r3, [pc, #436]	; (8009874 <tcp_input+0x29c>)
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7fe f837 	bl	8007738 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	895b      	ldrh	r3, [r3, #10]
 80096d0:	8a3a      	ldrh	r2, [r7, #16]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	f200 836e 	bhi.w	8009db4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	4a64      	ldr	r2, [pc, #400]	; (8009870 <tcp_input+0x298>)
 80096e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	8a3a      	ldrh	r2, [r7, #16]
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe f824 	bl	8007738 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	891a      	ldrh	r2, [r3, #8]
 80096f4:	8a3b      	ldrh	r3, [r7, #16]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	895b      	ldrh	r3, [r3, #10]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d005      	beq.n	8009712 <tcp_input+0x13a>
 8009706:	4b54      	ldr	r3, [pc, #336]	; (8009858 <tcp_input+0x280>)
 8009708:	22df      	movs	r2, #223	; 0xdf
 800970a:	495c      	ldr	r1, [pc, #368]	; (800987c <tcp_input+0x2a4>)
 800970c:	4854      	ldr	r0, [pc, #336]	; (8009860 <tcp_input+0x288>)
 800970e:	f007 f96f 	bl	80109f0 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	891a      	ldrh	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	891b      	ldrh	r3, [r3, #8]
 800971c:	429a      	cmp	r2, r3
 800971e:	d005      	beq.n	800972c <tcp_input+0x154>
 8009720:	4b4d      	ldr	r3, [pc, #308]	; (8009858 <tcp_input+0x280>)
 8009722:	22e0      	movs	r2, #224	; 0xe0
 8009724:	4956      	ldr	r1, [pc, #344]	; (8009880 <tcp_input+0x2a8>)
 8009726:	484e      	ldr	r0, [pc, #312]	; (8009860 <tcp_input+0x288>)
 8009728:	f007 f962 	bl	80109f0 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800972c:	4b4d      	ldr	r3, [pc, #308]	; (8009864 <tcp_input+0x28c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	4a4b      	ldr	r2, [pc, #300]	; (8009864 <tcp_input+0x28c>)
 8009736:	6814      	ldr	r4, [r2, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7fc fdcf 	bl	80062dc <lwip_htons>
 800973e:	4603      	mov	r3, r0
 8009740:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009742:	4b48      	ldr	r3, [pc, #288]	; (8009864 <tcp_input+0x28c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	885b      	ldrh	r3, [r3, #2]
 8009748:	b29b      	uxth	r3, r3
 800974a:	4a46      	ldr	r2, [pc, #280]	; (8009864 <tcp_input+0x28c>)
 800974c:	6814      	ldr	r4, [r2, #0]
 800974e:	4618      	mov	r0, r3
 8009750:	f7fc fdc4 	bl	80062dc <lwip_htons>
 8009754:	4603      	mov	r3, r0
 8009756:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009758:	4b42      	ldr	r3, [pc, #264]	; (8009864 <tcp_input+0x28c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	4a41      	ldr	r2, [pc, #260]	; (8009864 <tcp_input+0x28c>)
 8009760:	6814      	ldr	r4, [r2, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7fc fdcf 	bl	8006306 <lwip_htonl>
 8009768:	4603      	mov	r3, r0
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	4a45      	ldr	r2, [pc, #276]	; (8009884 <tcp_input+0x2ac>)
 8009770:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009772:	4b3c      	ldr	r3, [pc, #240]	; (8009864 <tcp_input+0x28c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	4a3a      	ldr	r2, [pc, #232]	; (8009864 <tcp_input+0x28c>)
 800977a:	6814      	ldr	r4, [r2, #0]
 800977c:	4618      	mov	r0, r3
 800977e:	f7fc fdc2 	bl	8006306 <lwip_htonl>
 8009782:	4603      	mov	r3, r0
 8009784:	60a3      	str	r3, [r4, #8]
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	4a3f      	ldr	r2, [pc, #252]	; (8009888 <tcp_input+0x2b0>)
 800978a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800978c:	4b35      	ldr	r3, [pc, #212]	; (8009864 <tcp_input+0x28c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	89db      	ldrh	r3, [r3, #14]
 8009792:	b29b      	uxth	r3, r3
 8009794:	4a33      	ldr	r2, [pc, #204]	; (8009864 <tcp_input+0x28c>)
 8009796:	6814      	ldr	r4, [r2, #0]
 8009798:	4618      	mov	r0, r3
 800979a:	f7fc fd9f 	bl	80062dc <lwip_htons>
 800979e:	4603      	mov	r3, r0
 80097a0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80097a2:	4b30      	ldr	r3, [pc, #192]	; (8009864 <tcp_input+0x28c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	899b      	ldrh	r3, [r3, #12]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fc fd96 	bl	80062dc <lwip_htons>
 80097b0:	4603      	mov	r3, r0
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4b34      	ldr	r3, [pc, #208]	; (800988c <tcp_input+0x2b4>)
 80097bc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	891a      	ldrh	r2, [r3, #8]
 80097c2:	4b33      	ldr	r3, [pc, #204]	; (8009890 <tcp_input+0x2b8>)
 80097c4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80097c6:	4b31      	ldr	r3, [pc, #196]	; (800988c <tcp_input+0x2b4>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00c      	beq.n	80097ec <tcp_input+0x214>
    tcplen++;
 80097d2:	4b2f      	ldr	r3, [pc, #188]	; (8009890 <tcp_input+0x2b8>)
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	3301      	adds	r3, #1
 80097d8:	b29a      	uxth	r2, r3
 80097da:	4b2d      	ldr	r3, [pc, #180]	; (8009890 <tcp_input+0x2b8>)
 80097dc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	891a      	ldrh	r2, [r3, #8]
 80097e2:	4b2b      	ldr	r3, [pc, #172]	; (8009890 <tcp_input+0x2b8>)
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	f200 82e6 	bhi.w	8009db8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097f0:	4b28      	ldr	r3, [pc, #160]	; (8009894 <tcp_input+0x2bc>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	61fb      	str	r3, [r7, #28]
 80097f6:	e09d      	b.n	8009934 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	7d1b      	ldrb	r3, [r3, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d105      	bne.n	800980c <tcp_input+0x234>
 8009800:	4b15      	ldr	r3, [pc, #84]	; (8009858 <tcp_input+0x280>)
 8009802:	22fb      	movs	r2, #251	; 0xfb
 8009804:	4924      	ldr	r1, [pc, #144]	; (8009898 <tcp_input+0x2c0>)
 8009806:	4816      	ldr	r0, [pc, #88]	; (8009860 <tcp_input+0x288>)
 8009808:	f007 f8f2 	bl	80109f0 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	7d1b      	ldrb	r3, [r3, #20]
 8009810:	2b0a      	cmp	r3, #10
 8009812:	d105      	bne.n	8009820 <tcp_input+0x248>
 8009814:	4b10      	ldr	r3, [pc, #64]	; (8009858 <tcp_input+0x280>)
 8009816:	22fc      	movs	r2, #252	; 0xfc
 8009818:	4920      	ldr	r1, [pc, #128]	; (800989c <tcp_input+0x2c4>)
 800981a:	4811      	ldr	r0, [pc, #68]	; (8009860 <tcp_input+0x288>)
 800981c:	f007 f8e8 	bl	80109f0 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	7d1b      	ldrb	r3, [r3, #20]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d105      	bne.n	8009834 <tcp_input+0x25c>
 8009828:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <tcp_input+0x280>)
 800982a:	22fd      	movs	r2, #253	; 0xfd
 800982c:	491c      	ldr	r1, [pc, #112]	; (80098a0 <tcp_input+0x2c8>)
 800982e:	480c      	ldr	r0, [pc, #48]	; (8009860 <tcp_input+0x288>)
 8009830:	f007 f8de 	bl	80109f0 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	7a1b      	ldrb	r3, [r3, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d033      	beq.n	80098a4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	7a1a      	ldrb	r2, [r3, #8]
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <tcp_input+0x290>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009848:	3301      	adds	r3, #1
 800984a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800984c:	429a      	cmp	r2, r3
 800984e:	d029      	beq.n	80098a4 <tcp_input+0x2cc>
      prev = pcb;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	61bb      	str	r3, [r7, #24]
      continue;
 8009854:	e06b      	b.n	800992e <tcp_input+0x356>
 8009856:	bf00      	nop
 8009858:	080198b8 	.word	0x080198b8
 800985c:	080198ec 	.word	0x080198ec
 8009860:	08019904 	.word	0x08019904
 8009864:	200072b0 	.word	0x200072b0
 8009868:	20003d18 	.word	0x20003d18
 800986c:	200072b4 	.word	0x200072b4
 8009870:	200072b8 	.word	0x200072b8
 8009874:	200072b6 	.word	0x200072b6
 8009878:	0801992c 	.word	0x0801992c
 800987c:	0801993c 	.word	0x0801993c
 8009880:	08019948 	.word	0x08019948
 8009884:	200072c0 	.word	0x200072c0
 8009888:	200072c4 	.word	0x200072c4
 800988c:	200072cc 	.word	0x200072cc
 8009890:	200072ca 	.word	0x200072ca
 8009894:	20007294 	.word	0x20007294
 8009898:	08019968 	.word	0x08019968
 800989c:	08019990 	.word	0x08019990
 80098a0:	080199bc 	.word	0x080199bc
    }

    if (pcb->remote_port == tcphdr->src &&
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	8b1a      	ldrh	r2, [r3, #24]
 80098a8:	4b72      	ldr	r3, [pc, #456]	; (8009a74 <tcp_input+0x49c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d13a      	bne.n	800992a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	8ada      	ldrh	r2, [r3, #22]
 80098b8:	4b6e      	ldr	r3, [pc, #440]	; (8009a74 <tcp_input+0x49c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	885b      	ldrh	r3, [r3, #2]
 80098be:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d132      	bne.n	800992a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	4b6b      	ldr	r3, [pc, #428]	; (8009a78 <tcp_input+0x4a0>)
 80098ca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d12c      	bne.n	800992a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	4b68      	ldr	r3, [pc, #416]	; (8009a78 <tcp_input+0x4a0>)
 80098d6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80098d8:	429a      	cmp	r2, r3
 80098da:	d126      	bne.n	800992a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	69fa      	ldr	r2, [r7, #28]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d106      	bne.n	80098f4 <tcp_input+0x31c>
 80098e6:	4b65      	ldr	r3, [pc, #404]	; (8009a7c <tcp_input+0x4a4>)
 80098e8:	f240 120d 	movw	r2, #269	; 0x10d
 80098ec:	4964      	ldr	r1, [pc, #400]	; (8009a80 <tcp_input+0x4a8>)
 80098ee:	4865      	ldr	r0, [pc, #404]	; (8009a84 <tcp_input+0x4ac>)
 80098f0:	f007 f87e 	bl	80109f0 <printf>
      if (prev != NULL) {
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <tcp_input+0x338>
        prev->next = pcb->next;
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	68da      	ldr	r2, [r3, #12]
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009902:	4b61      	ldr	r3, [pc, #388]	; (8009a88 <tcp_input+0x4b0>)
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800990a:	4a5f      	ldr	r2, [pc, #380]	; (8009a88 <tcp_input+0x4b0>)
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	69fa      	ldr	r2, [r7, #28]
 8009916:	429a      	cmp	r2, r3
 8009918:	d111      	bne.n	800993e <tcp_input+0x366>
 800991a:	4b58      	ldr	r3, [pc, #352]	; (8009a7c <tcp_input+0x4a4>)
 800991c:	f240 1215 	movw	r2, #277	; 0x115
 8009920:	495a      	ldr	r1, [pc, #360]	; (8009a8c <tcp_input+0x4b4>)
 8009922:	4858      	ldr	r0, [pc, #352]	; (8009a84 <tcp_input+0x4ac>)
 8009924:	f007 f864 	bl	80109f0 <printf>
      break;
 8009928:	e009      	b.n	800993e <tcp_input+0x366>
    }
    prev = pcb;
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	61fb      	str	r3, [r7, #28]
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f47f af5e 	bne.w	80097f8 <tcp_input+0x220>
 800993c:	e000      	b.n	8009940 <tcp_input+0x368>
      break;
 800993e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f040 80aa 	bne.w	8009a9c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009948:	4b51      	ldr	r3, [pc, #324]	; (8009a90 <tcp_input+0x4b8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	61fb      	str	r3, [r7, #28]
 800994e:	e03f      	b.n	80099d0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	7d1b      	ldrb	r3, [r3, #20]
 8009954:	2b0a      	cmp	r3, #10
 8009956:	d006      	beq.n	8009966 <tcp_input+0x38e>
 8009958:	4b48      	ldr	r3, [pc, #288]	; (8009a7c <tcp_input+0x4a4>)
 800995a:	f240 121f 	movw	r2, #287	; 0x11f
 800995e:	494d      	ldr	r1, [pc, #308]	; (8009a94 <tcp_input+0x4bc>)
 8009960:	4848      	ldr	r0, [pc, #288]	; (8009a84 <tcp_input+0x4ac>)
 8009962:	f007 f845 	bl	80109f0 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	7a1b      	ldrb	r3, [r3, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	7a1a      	ldrb	r2, [r3, #8]
 8009972:	4b41      	ldr	r3, [pc, #260]	; (8009a78 <tcp_input+0x4a0>)
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800997a:	3301      	adds	r3, #1
 800997c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800997e:	429a      	cmp	r2, r3
 8009980:	d122      	bne.n	80099c8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	8b1a      	ldrh	r2, [r3, #24]
 8009986:	4b3b      	ldr	r3, [pc, #236]	; (8009a74 <tcp_input+0x49c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29b      	uxth	r3, r3
 800998e:	429a      	cmp	r2, r3
 8009990:	d11b      	bne.n	80099ca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	8ada      	ldrh	r2, [r3, #22]
 8009996:	4b37      	ldr	r3, [pc, #220]	; (8009a74 <tcp_input+0x49c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	885b      	ldrh	r3, [r3, #2]
 800999c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800999e:	429a      	cmp	r2, r3
 80099a0:	d113      	bne.n	80099ca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	4b34      	ldr	r3, [pc, #208]	; (8009a78 <tcp_input+0x4a0>)
 80099a8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d10d      	bne.n	80099ca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	4b31      	ldr	r3, [pc, #196]	; (8009a78 <tcp_input+0x4a0>)
 80099b4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d107      	bne.n	80099ca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80099ba:	69f8      	ldr	r0, [r7, #28]
 80099bc:	f000 fb56 	bl	800a06c <tcp_timewait_input>
        }
        pbuf_free(p);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7fd ff3f 	bl	8007844 <pbuf_free>
        return;
 80099c6:	e1fd      	b.n	8009dc4 <tcp_input+0x7ec>
        continue;
 80099c8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1bc      	bne.n	8009950 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80099da:	4b2f      	ldr	r3, [pc, #188]	; (8009a98 <tcp_input+0x4c0>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	e02a      	b.n	8009a38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	7a1b      	ldrb	r3, [r3, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00c      	beq.n	8009a04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	7a1a      	ldrb	r2, [r3, #8]
 80099ee:	4b22      	ldr	r3, [pc, #136]	; (8009a78 <tcp_input+0x4a0>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099f6:	3301      	adds	r3, #1
 80099f8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d002      	beq.n	8009a04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	61bb      	str	r3, [r7, #24]
        continue;
 8009a02:	e016      	b.n	8009a32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	8ada      	ldrh	r2, [r3, #22]
 8009a08:	4b1a      	ldr	r3, [pc, #104]	; (8009a74 <tcp_input+0x49c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	885b      	ldrh	r3, [r3, #2]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d10c      	bne.n	8009a2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	4b17      	ldr	r3, [pc, #92]	; (8009a78 <tcp_input+0x4a0>)
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d00f      	beq.n	8009a40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <tcp_input+0x46a>
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d009      	beq.n	8009a42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1d1      	bne.n	80099e2 <tcp_input+0x40a>
 8009a3e:	e000      	b.n	8009a42 <tcp_input+0x46a>
            break;
 8009a40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d029      	beq.n	8009a9c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009a56:	4b10      	ldr	r3, [pc, #64]	; (8009a98 <tcp_input+0x4c0>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009a5e:	4a0e      	ldr	r2, [pc, #56]	; (8009a98 <tcp_input+0x4c0>)
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009a64:	6978      	ldr	r0, [r7, #20]
 8009a66:	f000 fa03 	bl	8009e70 <tcp_listen_input>
      }
      pbuf_free(p);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7fd feea 	bl	8007844 <pbuf_free>
      return;
 8009a70:	e1a8      	b.n	8009dc4 <tcp_input+0x7ec>
 8009a72:	bf00      	nop
 8009a74:	200072b0 	.word	0x200072b0
 8009a78:	20003d18 	.word	0x20003d18
 8009a7c:	080198b8 	.word	0x080198b8
 8009a80:	080199e4 	.word	0x080199e4
 8009a84:	08019904 	.word	0x08019904
 8009a88:	20007294 	.word	0x20007294
 8009a8c:	08019a10 	.word	0x08019a10
 8009a90:	20007298 	.word	0x20007298
 8009a94:	08019a3c 	.word	0x08019a3c
 8009a98:	20007290 	.word	0x20007290
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 8158 	beq.w	8009d54 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009aa4:	4b95      	ldr	r3, [pc, #596]	; (8009cfc <tcp_input+0x724>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	891a      	ldrh	r2, [r3, #8]
 8009aae:	4b93      	ldr	r3, [pc, #588]	; (8009cfc <tcp_input+0x724>)
 8009ab0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009ab2:	4a92      	ldr	r2, [pc, #584]	; (8009cfc <tcp_input+0x724>)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009ab8:	4b91      	ldr	r3, [pc, #580]	; (8009d00 <tcp_input+0x728>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a8f      	ldr	r2, [pc, #572]	; (8009cfc <tcp_input+0x724>)
 8009abe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009ac0:	4b90      	ldr	r3, [pc, #576]	; (8009d04 <tcp_input+0x72c>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009ac6:	4b90      	ldr	r3, [pc, #576]	; (8009d08 <tcp_input+0x730>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009acc:	4b8f      	ldr	r3, [pc, #572]	; (8009d0c <tcp_input+0x734>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009ad2:	4b8f      	ldr	r3, [pc, #572]	; (8009d10 <tcp_input+0x738>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	f003 0308 	and.w	r3, r3, #8
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d006      	beq.n	8009aec <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	7b5b      	ldrb	r3, [r3, #13]
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d017      	beq.n	8009b24 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009af4:	69f8      	ldr	r0, [r7, #28]
 8009af6:	f7ff f929 	bl	8008d4c <tcp_process_refused_data>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f113 0f0d 	cmn.w	r3, #13
 8009b00:	d007      	beq.n	8009b12 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00c      	beq.n	8009b24 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009b0a:	4b82      	ldr	r3, [pc, #520]	; (8009d14 <tcp_input+0x73c>)
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d008      	beq.n	8009b24 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 80e3 	bne.w	8009ce2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009b1c:	69f8      	ldr	r0, [r7, #28]
 8009b1e:	f003 f9ad 	bl	800ce7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009b22:	e0de      	b.n	8009ce2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009b24:	4a7c      	ldr	r2, [pc, #496]	; (8009d18 <tcp_input+0x740>)
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009b2a:	69f8      	ldr	r0, [r7, #28]
 8009b2c:	f000 fb18 	bl	800a160 <tcp_process>
 8009b30:	4603      	mov	r3, r0
 8009b32:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009b34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b38:	f113 0f0d 	cmn.w	r3, #13
 8009b3c:	f000 80d3 	beq.w	8009ce6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009b40:	4b71      	ldr	r3, [pc, #452]	; (8009d08 <tcp_input+0x730>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d015      	beq.n	8009b78 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d008      	beq.n	8009b68 <tcp_input+0x590>
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	6912      	ldr	r2, [r2, #16]
 8009b60:	f06f 010d 	mvn.w	r1, #13
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009b68:	69f9      	ldr	r1, [r7, #28]
 8009b6a:	486c      	ldr	r0, [pc, #432]	; (8009d1c <tcp_input+0x744>)
 8009b6c:	f7ff fbbc 	bl	80092e8 <tcp_pcb_remove>
        tcp_free(pcb);
 8009b70:	69f8      	ldr	r0, [r7, #28]
 8009b72:	f7fe f9a9 	bl	8007ec8 <tcp_free>
 8009b76:	e0da      	b.n	8009d2e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009b7c:	4b63      	ldr	r3, [pc, #396]	; (8009d0c <tcp_input+0x734>)
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01d      	beq.n	8009bc0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009b84:	4b61      	ldr	r3, [pc, #388]	; (8009d0c <tcp_input+0x734>)
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <tcp_input+0x5d2>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	6910      	ldr	r0, [r2, #16]
 8009b9e:	89fa      	ldrh	r2, [r7, #14]
 8009ba0:	69f9      	ldr	r1, [r7, #28]
 8009ba2:	4798      	blx	r3
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	74fb      	strb	r3, [r7, #19]
 8009ba8:	e001      	b.n	8009bae <tcp_input+0x5d6>
 8009baa:	2300      	movs	r3, #0
 8009bac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009bae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bb2:	f113 0f0d 	cmn.w	r3, #13
 8009bb6:	f000 8098 	beq.w	8009cea <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009bba:	4b54      	ldr	r3, [pc, #336]	; (8009d0c <tcp_input+0x734>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009bc0:	69f8      	ldr	r0, [r7, #28]
 8009bc2:	f000 f915 	bl	8009df0 <tcp_input_delayed_close>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f040 8090 	bne.w	8009cee <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009bce:	4b4d      	ldr	r3, [pc, #308]	; (8009d04 <tcp_input+0x72c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d041      	beq.n	8009c5a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d006      	beq.n	8009bec <tcp_input+0x614>
 8009bde:	4b50      	ldr	r3, [pc, #320]	; (8009d20 <tcp_input+0x748>)
 8009be0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009be4:	494f      	ldr	r1, [pc, #316]	; (8009d24 <tcp_input+0x74c>)
 8009be6:	4850      	ldr	r0, [pc, #320]	; (8009d28 <tcp_input+0x750>)
 8009be8:	f006 ff02 	bl	80109f0 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	8b5b      	ldrh	r3, [r3, #26]
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d008      	beq.n	8009c0a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009bf8:	4b42      	ldr	r3, [pc, #264]	; (8009d04 <tcp_input+0x72c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fd fe21 	bl	8007844 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009c02:	69f8      	ldr	r0, [r7, #28]
 8009c04:	f7fe fc48 	bl	8008498 <tcp_abort>
            goto aborted;
 8009c08:	e091      	b.n	8009d2e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00c      	beq.n	8009c2e <tcp_input+0x656>
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	6918      	ldr	r0, [r3, #16]
 8009c1e:	4b39      	ldr	r3, [pc, #228]	; (8009d04 <tcp_input+0x72c>)
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	2300      	movs	r3, #0
 8009c24:	69f9      	ldr	r1, [r7, #28]
 8009c26:	47a0      	blx	r4
 8009c28:	4603      	mov	r3, r0
 8009c2a:	74fb      	strb	r3, [r7, #19]
 8009c2c:	e008      	b.n	8009c40 <tcp_input+0x668>
 8009c2e:	4b35      	ldr	r3, [pc, #212]	; (8009d04 <tcp_input+0x72c>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	2300      	movs	r3, #0
 8009c34:	69f9      	ldr	r1, [r7, #28]
 8009c36:	2000      	movs	r0, #0
 8009c38:	f7ff f95e 	bl	8008ef8 <tcp_recv_null>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009c40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c44:	f113 0f0d 	cmn.w	r3, #13
 8009c48:	d053      	beq.n	8009cf2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009c4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009c52:	4b2c      	ldr	r3, [pc, #176]	; (8009d04 <tcp_input+0x72c>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009c5a:	4b2b      	ldr	r3, [pc, #172]	; (8009d08 <tcp_input+0x730>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	f003 0320 	and.w	r3, r3, #32
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d030      	beq.n	8009cc8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d009      	beq.n	8009c82 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c72:	7b5a      	ldrb	r2, [r3, #13]
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c78:	f042 0220 	orr.w	r2, r2, #32
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	735a      	strb	r2, [r3, #13]
 8009c80:	e022      	b.n	8009cc8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c8a:	d005      	beq.n	8009c98 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c90:	3301      	adds	r3, #1
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00b      	beq.n	8009cba <tcp_input+0x6e2>
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	6918      	ldr	r0, [r3, #16]
 8009cac:	2300      	movs	r3, #0
 8009cae:	2200      	movs	r2, #0
 8009cb0:	69f9      	ldr	r1, [r7, #28]
 8009cb2:	47a0      	blx	r4
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	74fb      	strb	r3, [r7, #19]
 8009cb8:	e001      	b.n	8009cbe <tcp_input+0x6e6>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009cbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cc2:	f113 0f0d 	cmn.w	r3, #13
 8009cc6:	d016      	beq.n	8009cf6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009cc8:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <tcp_input+0x740>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009cce:	69f8      	ldr	r0, [r7, #28]
 8009cd0:	f000 f88e 	bl	8009df0 <tcp_input_delayed_close>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d128      	bne.n	8009d2c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009cda:	69f8      	ldr	r0, [r7, #28]
 8009cdc:	f002 fac8 	bl	800c270 <tcp_output>
 8009ce0:	e025      	b.n	8009d2e <tcp_input+0x756>
        goto aborted;
 8009ce2:	bf00      	nop
 8009ce4:	e023      	b.n	8009d2e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009ce6:	bf00      	nop
 8009ce8:	e021      	b.n	8009d2e <tcp_input+0x756>
              goto aborted;
 8009cea:	bf00      	nop
 8009cec:	e01f      	b.n	8009d2e <tcp_input+0x756>
          goto aborted;
 8009cee:	bf00      	nop
 8009cf0:	e01d      	b.n	8009d2e <tcp_input+0x756>
            goto aborted;
 8009cf2:	bf00      	nop
 8009cf4:	e01b      	b.n	8009d2e <tcp_input+0x756>
              goto aborted;
 8009cf6:	bf00      	nop
 8009cf8:	e019      	b.n	8009d2e <tcp_input+0x756>
 8009cfa:	bf00      	nop
 8009cfc:	200072a0 	.word	0x200072a0
 8009d00:	200072b0 	.word	0x200072b0
 8009d04:	200072d0 	.word	0x200072d0
 8009d08:	200072cd 	.word	0x200072cd
 8009d0c:	200072c8 	.word	0x200072c8
 8009d10:	200072cc 	.word	0x200072cc
 8009d14:	200072ca 	.word	0x200072ca
 8009d18:	200072d4 	.word	0x200072d4
 8009d1c:	20007294 	.word	0x20007294
 8009d20:	080198b8 	.word	0x080198b8
 8009d24:	08019a6c 	.word	0x08019a6c
 8009d28:	08019904 	.word	0x08019904
          goto aborted;
 8009d2c:	bf00      	nop
    tcp_input_pcb = NULL;
 8009d2e:	4b27      	ldr	r3, [pc, #156]	; (8009dcc <tcp_input+0x7f4>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009d34:	4b26      	ldr	r3, [pc, #152]	; (8009dd0 <tcp_input+0x7f8>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009d3a:	4b26      	ldr	r3, [pc, #152]	; (8009dd4 <tcp_input+0x7fc>)
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d03f      	beq.n	8009dc2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009d42:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <tcp_input+0x7fc>)
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd fd7c 	bl	8007844 <pbuf_free>
      inseg.p = NULL;
 8009d4c:	4b21      	ldr	r3, [pc, #132]	; (8009dd4 <tcp_input+0x7fc>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009d52:	e036      	b.n	8009dc2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009d54:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <tcp_input+0x800>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	899b      	ldrh	r3, [r3, #12]
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fc fabd 	bl	80062dc <lwip_htons>
 8009d62:	4603      	mov	r3, r0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d118      	bne.n	8009da0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d6e:	4b1b      	ldr	r3, [pc, #108]	; (8009ddc <tcp_input+0x804>)
 8009d70:	6819      	ldr	r1, [r3, #0]
 8009d72:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <tcp_input+0x808>)
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	4b1a      	ldr	r3, [pc, #104]	; (8009de4 <tcp_input+0x80c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d7e:	4b16      	ldr	r3, [pc, #88]	; (8009dd8 <tcp_input+0x800>)
 8009d80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d82:	885b      	ldrh	r3, [r3, #2]
 8009d84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d86:	4a14      	ldr	r2, [pc, #80]	; (8009dd8 <tcp_input+0x800>)
 8009d88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d8a:	8812      	ldrh	r2, [r2, #0]
 8009d8c:	b292      	uxth	r2, r2
 8009d8e:	9202      	str	r2, [sp, #8]
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <tcp_input+0x810>)
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	4b15      	ldr	r3, [pc, #84]	; (8009dec <tcp_input+0x814>)
 8009d98:	4602      	mov	r2, r0
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	f003 f81c 	bl	800cdd8 <tcp_rst>
    pbuf_free(p);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7fd fd4f 	bl	8007844 <pbuf_free>
  return;
 8009da6:	e00c      	b.n	8009dc2 <tcp_input+0x7ea>
    goto dropped;
 8009da8:	bf00      	nop
 8009daa:	e006      	b.n	8009dba <tcp_input+0x7e2>
    goto dropped;
 8009dac:	bf00      	nop
 8009dae:	e004      	b.n	8009dba <tcp_input+0x7e2>
    goto dropped;
 8009db0:	bf00      	nop
 8009db2:	e002      	b.n	8009dba <tcp_input+0x7e2>
      goto dropped;
 8009db4:	bf00      	nop
 8009db6:	e000      	b.n	8009dba <tcp_input+0x7e2>
      goto dropped;
 8009db8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fd fd42 	bl	8007844 <pbuf_free>
 8009dc0:	e000      	b.n	8009dc4 <tcp_input+0x7ec>
  return;
 8009dc2:	bf00      	nop
}
 8009dc4:	3724      	adds	r7, #36	; 0x24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd90      	pop	{r4, r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	200072d4 	.word	0x200072d4
 8009dd0:	200072d0 	.word	0x200072d0
 8009dd4:	200072a0 	.word	0x200072a0
 8009dd8:	200072b0 	.word	0x200072b0
 8009ddc:	200072c4 	.word	0x200072c4
 8009de0:	200072ca 	.word	0x200072ca
 8009de4:	200072c0 	.word	0x200072c0
 8009de8:	20003d28 	.word	0x20003d28
 8009dec:	20003d2c 	.word	0x20003d2c

08009df0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <tcp_input_delayed_close+0x1c>
 8009dfe:	4b17      	ldr	r3, [pc, #92]	; (8009e5c <tcp_input_delayed_close+0x6c>)
 8009e00:	f240 225a 	movw	r2, #602	; 0x25a
 8009e04:	4916      	ldr	r1, [pc, #88]	; (8009e60 <tcp_input_delayed_close+0x70>)
 8009e06:	4817      	ldr	r0, [pc, #92]	; (8009e64 <tcp_input_delayed_close+0x74>)
 8009e08:	f006 fdf2 	bl	80109f0 <printf>

  if (recv_flags & TF_CLOSED) {
 8009e0c:	4b16      	ldr	r3, [pc, #88]	; (8009e68 <tcp_input_delayed_close+0x78>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	f003 0310 	and.w	r3, r3, #16
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01c      	beq.n	8009e52 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	8b5b      	ldrh	r3, [r3, #26]
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10d      	bne.n	8009e40 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d008      	beq.n	8009e40 <tcp_input_delayed_close+0x50>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	6912      	ldr	r2, [r2, #16]
 8009e38:	f06f 010e 	mvn.w	r1, #14
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	480a      	ldr	r0, [pc, #40]	; (8009e6c <tcp_input_delayed_close+0x7c>)
 8009e44:	f7ff fa50 	bl	80092e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7fe f83d 	bl	8007ec8 <tcp_free>
    return 1;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	080198b8 	.word	0x080198b8
 8009e60:	08019a88 	.word	0x08019a88
 8009e64:	08019904 	.word	0x08019904
 8009e68:	200072cd 	.word	0x200072cd
 8009e6c:	20007294 	.word	0x20007294

08009e70 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009e70:	b590      	push	{r4, r7, lr}
 8009e72:	b08b      	sub	sp, #44	; 0x2c
 8009e74:	af04      	add	r7, sp, #16
 8009e76:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009e78:	4b6f      	ldr	r3, [pc, #444]	; (800a038 <tcp_listen_input+0x1c8>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f040 80d2 	bne.w	800a02a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <tcp_listen_input+0x2a>
 8009e8c:	4b6b      	ldr	r3, [pc, #428]	; (800a03c <tcp_listen_input+0x1cc>)
 8009e8e:	f240 2281 	movw	r2, #641	; 0x281
 8009e92:	496b      	ldr	r1, [pc, #428]	; (800a040 <tcp_listen_input+0x1d0>)
 8009e94:	486b      	ldr	r0, [pc, #428]	; (800a044 <tcp_listen_input+0x1d4>)
 8009e96:	f006 fdab 	bl	80109f0 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009e9a:	4b67      	ldr	r3, [pc, #412]	; (800a038 <tcp_listen_input+0x1c8>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	f003 0310 	and.w	r3, r3, #16
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d019      	beq.n	8009eda <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ea6:	4b68      	ldr	r3, [pc, #416]	; (800a048 <tcp_listen_input+0x1d8>)
 8009ea8:	6819      	ldr	r1, [r3, #0]
 8009eaa:	4b68      	ldr	r3, [pc, #416]	; (800a04c <tcp_listen_input+0x1dc>)
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	4b67      	ldr	r3, [pc, #412]	; (800a050 <tcp_listen_input+0x1e0>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009eb6:	4b67      	ldr	r3, [pc, #412]	; (800a054 <tcp_listen_input+0x1e4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009eba:	885b      	ldrh	r3, [r3, #2]
 8009ebc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ebe:	4a65      	ldr	r2, [pc, #404]	; (800a054 <tcp_listen_input+0x1e4>)
 8009ec0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ec2:	8812      	ldrh	r2, [r2, #0]
 8009ec4:	b292      	uxth	r2, r2
 8009ec6:	9202      	str	r2, [sp, #8]
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	4b63      	ldr	r3, [pc, #396]	; (800a058 <tcp_listen_input+0x1e8>)
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	4b63      	ldr	r3, [pc, #396]	; (800a05c <tcp_listen_input+0x1ec>)
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f002 ff80 	bl	800cdd8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009ed8:	e0a9      	b.n	800a02e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009eda:	4b57      	ldr	r3, [pc, #348]	; (800a038 <tcp_listen_input+0x1c8>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 80a3 	beq.w	800a02e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	7d5b      	ldrb	r3, [r3, #21]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff f927 	bl	8009140 <tcp_alloc>
 8009ef2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d111      	bne.n	8009f1e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <tcp_listen_input+0xa8>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6910      	ldr	r0, [r2, #16]
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	2100      	movs	r1, #0
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	73bb      	strb	r3, [r7, #14]
      return;
 8009f16:	e08b      	b.n	800a030 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009f18:	23f0      	movs	r3, #240	; 0xf0
 8009f1a:	73bb      	strb	r3, [r7, #14]
      return;
 8009f1c:	e088      	b.n	800a030 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009f1e:	4b50      	ldr	r3, [pc, #320]	; (800a060 <tcp_listen_input+0x1f0>)
 8009f20:	695a      	ldr	r2, [r3, #20]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009f26:	4b4e      	ldr	r3, [pc, #312]	; (800a060 <tcp_listen_input+0x1f0>)
 8009f28:	691a      	ldr	r2, [r3, #16]
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	8ada      	ldrh	r2, [r3, #22]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009f36:	4b47      	ldr	r3, [pc, #284]	; (800a054 <tcp_listen_input+0x1e4>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2203      	movs	r2, #3
 8009f46:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009f48:	4b41      	ldr	r3, [pc, #260]	; (800a050 <tcp_listen_input+0x1e0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009f5a:	6978      	ldr	r0, [r7, #20]
 8009f5c:	f7ff fa58 	bl	8009410 <tcp_next_iss>
 8009f60:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009f7a:	4b35      	ldr	r3, [pc, #212]	; (800a050 <tcp_listen_input+0x1e0>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	1e5a      	subs	r2, r3, #1
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	691a      	ldr	r2, [r3, #16]
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	7a5b      	ldrb	r3, [r3, #9]
 8009f96:	f003 030c 	and.w	r3, r3, #12
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	7a1a      	ldrb	r2, [r3, #8]
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009fa8:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <tcp_listen_input+0x1f4>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	60da      	str	r2, [r3, #12]
 8009fb0:	4a2c      	ldr	r2, [pc, #176]	; (800a064 <tcp_listen_input+0x1f4>)
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	f003 f8d1 	bl	800d15c <tcp_timer_needed>
 8009fba:	4b2b      	ldr	r3, [pc, #172]	; (800a068 <tcp_listen_input+0x1f8>)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009fc0:	6978      	ldr	r0, [r7, #20]
 8009fc2:	f001 fd8f 	bl	800bae4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009fc6:	4b23      	ldr	r3, [pc, #140]	; (800a054 <tcp_listen_input+0x1e4>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	89db      	ldrh	r3, [r3, #14]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f004 ff43 	bl	800ee74 <ip4_route>
 8009fee:	4601      	mov	r1, r0
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f7ff fa30 	bl	800945c <tcp_eff_send_mss_netif>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	461a      	mov	r2, r3
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a004:	2112      	movs	r1, #18
 800a006:	6978      	ldr	r0, [r7, #20]
 800a008:	f002 f844 	bl	800c094 <tcp_enqueue_flags>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a018:	2100      	movs	r1, #0
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	f7fe f97e 	bl	800831c <tcp_abandon>
      return;
 800a020:	e006      	b.n	800a030 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a022:	6978      	ldr	r0, [r7, #20]
 800a024:	f002 f924 	bl	800c270 <tcp_output>
  return;
 800a028:	e001      	b.n	800a02e <tcp_listen_input+0x1be>
    return;
 800a02a:	bf00      	nop
 800a02c:	e000      	b.n	800a030 <tcp_listen_input+0x1c0>
  return;
 800a02e:	bf00      	nop
}
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	bd90      	pop	{r4, r7, pc}
 800a036:	bf00      	nop
 800a038:	200072cc 	.word	0x200072cc
 800a03c:	080198b8 	.word	0x080198b8
 800a040:	08019ab0 	.word	0x08019ab0
 800a044:	08019904 	.word	0x08019904
 800a048:	200072c4 	.word	0x200072c4
 800a04c:	200072ca 	.word	0x200072ca
 800a050:	200072c0 	.word	0x200072c0
 800a054:	200072b0 	.word	0x200072b0
 800a058:	20003d28 	.word	0x20003d28
 800a05c:	20003d2c 	.word	0x20003d2c
 800a060:	20003d18 	.word	0x20003d18
 800a064:	20007294 	.word	0x20007294
 800a068:	2000729c 	.word	0x2000729c

0800a06c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af04      	add	r7, sp, #16
 800a072:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a074:	4b2f      	ldr	r3, [pc, #188]	; (800a134 <tcp_timewait_input+0xc8>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d153      	bne.n	800a128 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d106      	bne.n	800a094 <tcp_timewait_input+0x28>
 800a086:	4b2c      	ldr	r3, [pc, #176]	; (800a138 <tcp_timewait_input+0xcc>)
 800a088:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a08c:	492b      	ldr	r1, [pc, #172]	; (800a13c <tcp_timewait_input+0xd0>)
 800a08e:	482c      	ldr	r0, [pc, #176]	; (800a140 <tcp_timewait_input+0xd4>)
 800a090:	f006 fcae 	bl	80109f0 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a094:	4b27      	ldr	r3, [pc, #156]	; (800a134 <tcp_timewait_input+0xc8>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	f003 0302 	and.w	r3, r3, #2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d02a      	beq.n	800a0f6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a0a0:	4b28      	ldr	r3, [pc, #160]	; (800a144 <tcp_timewait_input+0xd8>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	db2d      	blt.n	800a10a <tcp_timewait_input+0x9e>
 800a0ae:	4b25      	ldr	r3, [pc, #148]	; (800a144 <tcp_timewait_input+0xd8>)
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0ba:	440b      	add	r3, r1
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dc23      	bgt.n	800a10a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0c2:	4b21      	ldr	r3, [pc, #132]	; (800a148 <tcp_timewait_input+0xdc>)
 800a0c4:	6819      	ldr	r1, [r3, #0]
 800a0c6:	4b21      	ldr	r3, [pc, #132]	; (800a14c <tcp_timewait_input+0xe0>)
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b1d      	ldr	r3, [pc, #116]	; (800a144 <tcp_timewait_input+0xd8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0d2:	4b1f      	ldr	r3, [pc, #124]	; (800a150 <tcp_timewait_input+0xe4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0d6:	885b      	ldrh	r3, [r3, #2]
 800a0d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0da:	4a1d      	ldr	r2, [pc, #116]	; (800a150 <tcp_timewait_input+0xe4>)
 800a0dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0de:	8812      	ldrh	r2, [r2, #0]
 800a0e0:	b292      	uxth	r2, r2
 800a0e2:	9202      	str	r2, [sp, #8]
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	4b1b      	ldr	r3, [pc, #108]	; (800a154 <tcp_timewait_input+0xe8>)
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <tcp_timewait_input+0xec>)
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f002 fe72 	bl	800cdd8 <tcp_rst>
      return;
 800a0f4:	e01b      	b.n	800a12e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a0f6:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <tcp_timewait_input+0xc8>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a102:	4b16      	ldr	r3, [pc, #88]	; (800a15c <tcp_timewait_input+0xf0>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a10a:	4b10      	ldr	r3, [pc, #64]	; (800a14c <tcp_timewait_input+0xe0>)
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00c      	beq.n	800a12c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	8b5b      	ldrh	r3, [r3, #26]
 800a116:	f043 0302 	orr.w	r3, r3, #2
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f002 f8a5 	bl	800c270 <tcp_output>
  }
  return;
 800a126:	e001      	b.n	800a12c <tcp_timewait_input+0xc0>
    return;
 800a128:	bf00      	nop
 800a12a:	e000      	b.n	800a12e <tcp_timewait_input+0xc2>
  return;
 800a12c:	bf00      	nop
}
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	200072cc 	.word	0x200072cc
 800a138:	080198b8 	.word	0x080198b8
 800a13c:	08019ad0 	.word	0x08019ad0
 800a140:	08019904 	.word	0x08019904
 800a144:	200072c0 	.word	0x200072c0
 800a148:	200072c4 	.word	0x200072c4
 800a14c:	200072ca 	.word	0x200072ca
 800a150:	200072b0 	.word	0x200072b0
 800a154:	20003d28 	.word	0x20003d28
 800a158:	20003d2c 	.word	0x20003d2c
 800a15c:	20007288 	.word	0x20007288

0800a160 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a160:	b590      	push	{r4, r7, lr}
 800a162:	b08d      	sub	sp, #52	; 0x34
 800a164:	af04      	add	r7, sp, #16
 800a166:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d106      	bne.n	800a184 <tcp_process+0x24>
 800a176:	4b9d      	ldr	r3, [pc, #628]	; (800a3ec <tcp_process+0x28c>)
 800a178:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a17c:	499c      	ldr	r1, [pc, #624]	; (800a3f0 <tcp_process+0x290>)
 800a17e:	489d      	ldr	r0, [pc, #628]	; (800a3f4 <tcp_process+0x294>)
 800a180:	f006 fc36 	bl	80109f0 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a184:	4b9c      	ldr	r3, [pc, #624]	; (800a3f8 <tcp_process+0x298>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d04e      	beq.n	800a22e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7d1b      	ldrb	r3, [r3, #20]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d108      	bne.n	800a1aa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a19c:	4b97      	ldr	r3, [pc, #604]	; (800a3fc <tcp_process+0x29c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d123      	bne.n	800a1ec <tcp_process+0x8c>
        acceptable = 1;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	76fb      	strb	r3, [r7, #27]
 800a1a8:	e020      	b.n	800a1ec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1ae:	4b94      	ldr	r3, [pc, #592]	; (800a400 <tcp_process+0x2a0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d102      	bne.n	800a1bc <tcp_process+0x5c>
        acceptable = 1;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	76fb      	strb	r3, [r7, #27]
 800a1ba:	e017      	b.n	800a1ec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a1bc:	4b90      	ldr	r3, [pc, #576]	; (800a400 <tcp_process+0x2a0>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	db10      	blt.n	800a1ec <tcp_process+0x8c>
 800a1ca:	4b8d      	ldr	r3, [pc, #564]	; (800a400 <tcp_process+0x2a0>)
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1d6:	440b      	add	r3, r1
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dc06      	bgt.n	800a1ec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	8b5b      	ldrh	r3, [r3, #26]
 800a1e2:	f043 0302 	orr.w	r3, r3, #2
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a1ec:	7efb      	ldrb	r3, [r7, #27]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d01b      	beq.n	800a22a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7d1b      	ldrb	r3, [r3, #20]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <tcp_process+0xa8>
 800a1fa:	4b7c      	ldr	r3, [pc, #496]	; (800a3ec <tcp_process+0x28c>)
 800a1fc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a200:	4980      	ldr	r1, [pc, #512]	; (800a404 <tcp_process+0x2a4>)
 800a202:	487c      	ldr	r0, [pc, #496]	; (800a3f4 <tcp_process+0x294>)
 800a204:	f006 fbf4 	bl	80109f0 <printf>
      recv_flags |= TF_RESET;
 800a208:	4b7f      	ldr	r3, [pc, #508]	; (800a408 <tcp_process+0x2a8>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	f043 0308 	orr.w	r3, r3, #8
 800a210:	b2da      	uxtb	r2, r3
 800a212:	4b7d      	ldr	r3, [pc, #500]	; (800a408 <tcp_process+0x2a8>)
 800a214:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	8b5b      	ldrh	r3, [r3, #26]
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a224:	f06f 030d 	mvn.w	r3, #13
 800a228:	e37a      	b.n	800a920 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e378      	b.n	800a920 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a22e:	4b72      	ldr	r3, [pc, #456]	; (800a3f8 <tcp_process+0x298>)
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d010      	beq.n	800a25c <tcp_process+0xfc>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7d1b      	ldrb	r3, [r3, #20]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d00c      	beq.n	800a25c <tcp_process+0xfc>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7d1b      	ldrb	r3, [r3, #20]
 800a246:	2b03      	cmp	r3, #3
 800a248:	d008      	beq.n	800a25c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	8b5b      	ldrh	r3, [r3, #26]
 800a24e:	f043 0302 	orr.w	r3, r3, #2
 800a252:	b29a      	uxth	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	e361      	b.n	800a920 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	8b5b      	ldrh	r3, [r3, #26]
 800a260:	f003 0310 	and.w	r3, r3, #16
 800a264:	2b00      	cmp	r3, #0
 800a266:	d103      	bne.n	800a270 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a268:	4b68      	ldr	r3, [pc, #416]	; (800a40c <tcp_process+0x2ac>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 fc2f 	bl	800bae4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7d1b      	ldrb	r3, [r3, #20]
 800a28a:	3b02      	subs	r3, #2
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	f200 8337 	bhi.w	800a900 <tcp_process+0x7a0>
 800a292:	a201      	add	r2, pc, #4	; (adr r2, 800a298 <tcp_process+0x138>)
 800a294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a298:	0800a2b9 	.word	0x0800a2b9
 800a29c:	0800a4e9 	.word	0x0800a4e9
 800a2a0:	0800a661 	.word	0x0800a661
 800a2a4:	0800a68b 	.word	0x0800a68b
 800a2a8:	0800a7af 	.word	0x0800a7af
 800a2ac:	0800a661 	.word	0x0800a661
 800a2b0:	0800a83b 	.word	0x0800a83b
 800a2b4:	0800a8cb 	.word	0x0800a8cb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a2b8:	4b4f      	ldr	r3, [pc, #316]	; (800a3f8 <tcp_process+0x298>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	f003 0310 	and.w	r3, r3, #16
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 80e4 	beq.w	800a48e <tcp_process+0x32e>
 800a2c6:	4b4c      	ldr	r3, [pc, #304]	; (800a3f8 <tcp_process+0x298>)
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 80dd 	beq.w	800a48e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	4b48      	ldr	r3, [pc, #288]	; (800a3fc <tcp_process+0x29c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	f040 80d5 	bne.w	800a48e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a2e4:	4b46      	ldr	r3, [pc, #280]	; (800a400 <tcp_process+0x2a0>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a2f6:	4b41      	ldr	r3, [pc, #260]	; (800a3fc <tcp_process+0x29c>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a2fe:	4b44      	ldr	r3, [pc, #272]	; (800a410 <tcp_process+0x2b0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	89db      	ldrh	r3, [r3, #14]
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a318:	4b39      	ldr	r3, [pc, #228]	; (800a400 <tcp_process+0x2a0>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	1e5a      	subs	r2, r3, #1
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2204      	movs	r2, #4
 800a326:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3304      	adds	r3, #4
 800a330:	4618      	mov	r0, r3
 800a332:	f004 fd9f 	bl	800ee74 <ip4_route>
 800a336:	4601      	mov	r1, r0
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3304      	adds	r3, #4
 800a33c:	461a      	mov	r2, r3
 800a33e:	4620      	mov	r0, r4
 800a340:	f7ff f88c 	bl	800945c <tcp_eff_send_mss_netif>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a350:	009a      	lsls	r2, r3, #2
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	f241 111c 	movw	r1, #4380	; 0x111c
 800a35c:	428b      	cmp	r3, r1
 800a35e:	bf38      	it	cc
 800a360:	460b      	movcc	r3, r1
 800a362:	429a      	cmp	r2, r3
 800a364:	d204      	bcs.n	800a370 <tcp_process+0x210>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	e00d      	b.n	800a38c <tcp_process+0x22c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	f241 121c 	movw	r2, #4380	; 0x111c
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d904      	bls.n	800a388 <tcp_process+0x228>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	b29b      	uxth	r3, r3
 800a386:	e001      	b.n	800a38c <tcp_process+0x22c>
 800a388:	f241 131c 	movw	r3, #4380	; 0x111c
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d106      	bne.n	800a3aa <tcp_process+0x24a>
 800a39c:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <tcp_process+0x28c>)
 800a39e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a3a2:	491c      	ldr	r1, [pc, #112]	; (800a414 <tcp_process+0x2b4>)
 800a3a4:	4813      	ldr	r0, [pc, #76]	; (800a3f4 <tcp_process+0x294>)
 800a3a6:	f006 fb23 	bl	80109f0 <printf>
        --pcb->snd_queuelen;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3be:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d12a      	bne.n	800a41c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <tcp_process+0x280>
 800a3d2:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <tcp_process+0x28c>)
 800a3d4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a3d8:	490f      	ldr	r1, [pc, #60]	; (800a418 <tcp_process+0x2b8>)
 800a3da:	4806      	ldr	r0, [pc, #24]	; (800a3f4 <tcp_process+0x294>)
 800a3dc:	f006 fb08 	bl	80109f0 <printf>
          pcb->unsent = rseg->next;
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	66da      	str	r2, [r3, #108]	; 0x6c
 800a3e8:	e01c      	b.n	800a424 <tcp_process+0x2c4>
 800a3ea:	bf00      	nop
 800a3ec:	080198b8 	.word	0x080198b8
 800a3f0:	08019af0 	.word	0x08019af0
 800a3f4:	08019904 	.word	0x08019904
 800a3f8:	200072cc 	.word	0x200072cc
 800a3fc:	200072c4 	.word	0x200072c4
 800a400:	200072c0 	.word	0x200072c0
 800a404:	08019b0c 	.word	0x08019b0c
 800a408:	200072cd 	.word	0x200072cd
 800a40c:	20007288 	.word	0x20007288
 800a410:	200072b0 	.word	0x200072b0
 800a414:	08019b2c 	.word	0x08019b2c
 800a418:	08019b44 	.word	0x08019b44
        } else {
          pcb->unacked = rseg->next;
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a424:	69f8      	ldr	r0, [r7, #28]
 800a426:	f7fe fd22 	bl	8008e6e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d104      	bne.n	800a43c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a438:	861a      	strh	r2, [r3, #48]	; 0x30
 800a43a:	e006      	b.n	800a44a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <tcp_process+0x30a>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6910      	ldr	r0, [r2, #16]
 800a45e:	2200      	movs	r2, #0
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	4798      	blx	r3
 800a464:	4603      	mov	r3, r0
 800a466:	76bb      	strb	r3, [r7, #26]
 800a468:	e001      	b.n	800a46e <tcp_process+0x30e>
 800a46a:	2300      	movs	r3, #0
 800a46c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a46e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a472:	f113 0f0d 	cmn.w	r3, #13
 800a476:	d102      	bne.n	800a47e <tcp_process+0x31e>
          return ERR_ABRT;
 800a478:	f06f 030c 	mvn.w	r3, #12
 800a47c:	e250      	b.n	800a920 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	8b5b      	ldrh	r3, [r3, #26]
 800a482:	f043 0302 	orr.w	r3, r3, #2
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a48c:	e23a      	b.n	800a904 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a48e:	4b98      	ldr	r3, [pc, #608]	; (800a6f0 <tcp_process+0x590>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	f003 0310 	and.w	r3, r3, #16
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 8234 	beq.w	800a904 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a49c:	4b95      	ldr	r3, [pc, #596]	; (800a6f4 <tcp_process+0x594>)
 800a49e:	6819      	ldr	r1, [r3, #0]
 800a4a0:	4b95      	ldr	r3, [pc, #596]	; (800a6f8 <tcp_process+0x598>)
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4b95      	ldr	r3, [pc, #596]	; (800a6fc <tcp_process+0x59c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4ac:	4b94      	ldr	r3, [pc, #592]	; (800a700 <tcp_process+0x5a0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4b0:	885b      	ldrh	r3, [r3, #2]
 800a4b2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4b4:	4a92      	ldr	r2, [pc, #584]	; (800a700 <tcp_process+0x5a0>)
 800a4b6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4b8:	8812      	ldrh	r2, [r2, #0]
 800a4ba:	b292      	uxth	r2, r2
 800a4bc:	9202      	str	r2, [sp, #8]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	4b90      	ldr	r3, [pc, #576]	; (800a704 <tcp_process+0x5a4>)
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	4b90      	ldr	r3, [pc, #576]	; (800a708 <tcp_process+0x5a8>)
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f002 fc85 	bl	800cdd8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4d4:	2b05      	cmp	r3, #5
 800a4d6:	f200 8215 	bhi.w	800a904 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f002 fa4f 	bl	800c984 <tcp_rexmit_rto>
      break;
 800a4e6:	e20d      	b.n	800a904 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a4e8:	4b81      	ldr	r3, [pc, #516]	; (800a6f0 <tcp_process+0x590>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	f003 0310 	and.w	r3, r3, #16
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 80a1 	beq.w	800a638 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4f6:	4b7f      	ldr	r3, [pc, #508]	; (800a6f4 <tcp_process+0x594>)
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	3b01      	subs	r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	db7e      	blt.n	800a604 <tcp_process+0x4a4>
 800a506:	4b7b      	ldr	r3, [pc, #492]	; (800a6f4 <tcp_process+0x594>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	dc77      	bgt.n	800a604 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2204      	movs	r2, #4
 800a518:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a522:	23fa      	movs	r3, #250	; 0xfa
 800a524:	76bb      	strb	r3, [r7, #26]
 800a526:	e01d      	b.n	800a564 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <tcp_process+0x3e0>
 800a532:	4b76      	ldr	r3, [pc, #472]	; (800a70c <tcp_process+0x5ac>)
 800a534:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a538:	4975      	ldr	r1, [pc, #468]	; (800a710 <tcp_process+0x5b0>)
 800a53a:	4876      	ldr	r0, [pc, #472]	; (800a714 <tcp_process+0x5b4>)
 800a53c:	f006 fa58 	bl	80109f0 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <tcp_process+0x400>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	6910      	ldr	r0, [r2, #16]
 800a554:	2200      	movs	r2, #0
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4798      	blx	r3
 800a55a:	4603      	mov	r3, r0
 800a55c:	76bb      	strb	r3, [r7, #26]
 800a55e:	e001      	b.n	800a564 <tcp_process+0x404>
 800a560:	23f0      	movs	r3, #240	; 0xf0
 800a562:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a564:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a56c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a570:	f113 0f0d 	cmn.w	r3, #13
 800a574:	d002      	beq.n	800a57c <tcp_process+0x41c>
              tcp_abort(pcb);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7fd ff8e 	bl	8008498 <tcp_abort>
            }
            return ERR_ABRT;
 800a57c:	f06f 030c 	mvn.w	r3, #12
 800a580:	e1ce      	b.n	800a920 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fae0 	bl	800ab48 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a588:	4b63      	ldr	r3, [pc, #396]	; (800a718 <tcp_process+0x5b8>)
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d005      	beq.n	800a59c <tcp_process+0x43c>
            recv_acked--;
 800a590:	4b61      	ldr	r3, [pc, #388]	; (800a718 <tcp_process+0x5b8>)
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	3b01      	subs	r3, #1
 800a596:	b29a      	uxth	r2, r3
 800a598:	4b5f      	ldr	r3, [pc, #380]	; (800a718 <tcp_process+0x5b8>)
 800a59a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5a0:	009a      	lsls	r2, r3, #2
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	f241 111c 	movw	r1, #4380	; 0x111c
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf38      	it	cc
 800a5b0:	460b      	movcc	r3, r1
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d204      	bcs.n	800a5c0 <tcp_process+0x460>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	e00d      	b.n	800a5dc <tcp_process+0x47c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d904      	bls.n	800a5d8 <tcp_process+0x478>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	e001      	b.n	800a5dc <tcp_process+0x47c>
 800a5d8:	f241 131c 	movw	r3, #4380	; 0x111c
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a5e2:	4b4e      	ldr	r3, [pc, #312]	; (800a71c <tcp_process+0x5bc>)
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d037      	beq.n	800a65e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	8b5b      	ldrh	r3, [r3, #26]
 800a5f2:	f043 0302 	orr.w	r3, r3, #2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2207      	movs	r2, #7
 800a600:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a602:	e02c      	b.n	800a65e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a604:	4b3b      	ldr	r3, [pc, #236]	; (800a6f4 <tcp_process+0x594>)
 800a606:	6819      	ldr	r1, [r3, #0]
 800a608:	4b3b      	ldr	r3, [pc, #236]	; (800a6f8 <tcp_process+0x598>)
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	461a      	mov	r2, r3
 800a60e:	4b3b      	ldr	r3, [pc, #236]	; (800a6fc <tcp_process+0x59c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a614:	4b3a      	ldr	r3, [pc, #232]	; (800a700 <tcp_process+0x5a0>)
 800a616:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a618:	885b      	ldrh	r3, [r3, #2]
 800a61a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a61c:	4a38      	ldr	r2, [pc, #224]	; (800a700 <tcp_process+0x5a0>)
 800a61e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a620:	8812      	ldrh	r2, [r2, #0]
 800a622:	b292      	uxth	r2, r2
 800a624:	9202      	str	r2, [sp, #8]
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	4b36      	ldr	r3, [pc, #216]	; (800a704 <tcp_process+0x5a4>)
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4b36      	ldr	r3, [pc, #216]	; (800a708 <tcp_process+0x5a8>)
 800a62e:	4602      	mov	r2, r0
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f002 fbd1 	bl	800cdd8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a636:	e167      	b.n	800a908 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a638:	4b2d      	ldr	r3, [pc, #180]	; (800a6f0 <tcp_process+0x590>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 8161 	beq.w	800a908 <tcp_process+0x7a8>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64a:	1e5a      	subs	r2, r3, #1
 800a64c:	4b2b      	ldr	r3, [pc, #172]	; (800a6fc <tcp_process+0x59c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	f040 8159 	bne.w	800a908 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f002 f9b6 	bl	800c9c8 <tcp_rexmit>
      break;
 800a65c:	e154      	b.n	800a908 <tcp_process+0x7a8>
 800a65e:	e153      	b.n	800a908 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fa71 	bl	800ab48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a666:	4b2d      	ldr	r3, [pc, #180]	; (800a71c <tcp_process+0x5bc>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	f003 0320 	and.w	r3, r3, #32
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 814c 	beq.w	800a90c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	8b5b      	ldrh	r3, [r3, #26]
 800a678:	f043 0302 	orr.w	r3, r3, #2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2207      	movs	r2, #7
 800a686:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a688:	e140      	b.n	800a90c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa5c 	bl	800ab48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a690:	4b22      	ldr	r3, [pc, #136]	; (800a71c <tcp_process+0x5bc>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	f003 0320 	and.w	r3, r3, #32
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d071      	beq.n	800a780 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a69c:	4b14      	ldr	r3, [pc, #80]	; (800a6f0 <tcp_process+0x590>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f003 0310 	and.w	r3, r3, #16
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d060      	beq.n	800a76a <tcp_process+0x60a>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6ac:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <tcp_process+0x594>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d15a      	bne.n	800a76a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d156      	bne.n	800a76a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	8b5b      	ldrh	r3, [r3, #26]
 800a6c0:	f043 0302 	orr.w	r3, r3, #2
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7fe fdbc 	bl	8009248 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a6d0:	4b13      	ldr	r3, [pc, #76]	; (800a720 <tcp_process+0x5c0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d105      	bne.n	800a6e6 <tcp_process+0x586>
 800a6da:	4b11      	ldr	r3, [pc, #68]	; (800a720 <tcp_process+0x5c0>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	4a0f      	ldr	r2, [pc, #60]	; (800a720 <tcp_process+0x5c0>)
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	e02e      	b.n	800a744 <tcp_process+0x5e4>
 800a6e6:	4b0e      	ldr	r3, [pc, #56]	; (800a720 <tcp_process+0x5c0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	e027      	b.n	800a73e <tcp_process+0x5de>
 800a6ee:	bf00      	nop
 800a6f0:	200072cc 	.word	0x200072cc
 800a6f4:	200072c4 	.word	0x200072c4
 800a6f8:	200072ca 	.word	0x200072ca
 800a6fc:	200072c0 	.word	0x200072c0
 800a700:	200072b0 	.word	0x200072b0
 800a704:	20003d28 	.word	0x20003d28
 800a708:	20003d2c 	.word	0x20003d2c
 800a70c:	080198b8 	.word	0x080198b8
 800a710:	08019b58 	.word	0x08019b58
 800a714:	08019904 	.word	0x08019904
 800a718:	200072c8 	.word	0x200072c8
 800a71c:	200072cd 	.word	0x200072cd
 800a720:	20007294 	.word	0x20007294
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d104      	bne.n	800a738 <tcp_process+0x5d8>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	60da      	str	r2, [r3, #12]
 800a736:	e005      	b.n	800a744 <tcp_process+0x5e4>
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	617b      	str	r3, [r7, #20]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1ef      	bne.n	800a724 <tcp_process+0x5c4>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	60da      	str	r2, [r3, #12]
 800a74a:	4b77      	ldr	r3, [pc, #476]	; (800a928 <tcp_process+0x7c8>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	220a      	movs	r2, #10
 800a754:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a756:	4b75      	ldr	r3, [pc, #468]	; (800a92c <tcp_process+0x7cc>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	4a73      	ldr	r2, [pc, #460]	; (800a92c <tcp_process+0x7cc>)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	f002 fcfa 	bl	800d15c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a768:	e0d2      	b.n	800a910 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	8b5b      	ldrh	r3, [r3, #26]
 800a76e:	f043 0302 	orr.w	r3, r3, #2
 800a772:	b29a      	uxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2208      	movs	r2, #8
 800a77c:	751a      	strb	r2, [r3, #20]
      break;
 800a77e:	e0c7      	b.n	800a910 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a780:	4b6b      	ldr	r3, [pc, #428]	; (800a930 <tcp_process+0x7d0>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	f003 0310 	and.w	r3, r3, #16
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 80c1 	beq.w	800a910 <tcp_process+0x7b0>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a792:	4b68      	ldr	r3, [pc, #416]	; (800a934 <tcp_process+0x7d4>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	f040 80ba 	bne.w	800a910 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f040 80b5 	bne.w	800a910 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2206      	movs	r2, #6
 800a7aa:	751a      	strb	r2, [r3, #20]
      break;
 800a7ac:	e0b0      	b.n	800a910 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f9ca 	bl	800ab48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a7b4:	4b60      	ldr	r3, [pc, #384]	; (800a938 <tcp_process+0x7d8>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 80a9 	beq.w	800a914 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	8b5b      	ldrh	r3, [r3, #26]
 800a7c6:	f043 0302 	orr.w	r3, r3, #2
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7fe fd39 	bl	8009248 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a7d6:	4b59      	ldr	r3, [pc, #356]	; (800a93c <tcp_process+0x7dc>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d105      	bne.n	800a7ec <tcp_process+0x68c>
 800a7e0:	4b56      	ldr	r3, [pc, #344]	; (800a93c <tcp_process+0x7dc>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	4a55      	ldr	r2, [pc, #340]	; (800a93c <tcp_process+0x7dc>)
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	e013      	b.n	800a814 <tcp_process+0x6b4>
 800a7ec:	4b53      	ldr	r3, [pc, #332]	; (800a93c <tcp_process+0x7dc>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	e00c      	b.n	800a80e <tcp_process+0x6ae>
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d104      	bne.n	800a808 <tcp_process+0x6a8>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68da      	ldr	r2, [r3, #12]
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	60da      	str	r2, [r3, #12]
 800a806:	e005      	b.n	800a814 <tcp_process+0x6b4>
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	613b      	str	r3, [r7, #16]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ef      	bne.n	800a7f4 <tcp_process+0x694>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	60da      	str	r2, [r3, #12]
 800a81a:	4b43      	ldr	r3, [pc, #268]	; (800a928 <tcp_process+0x7c8>)
 800a81c:	2201      	movs	r2, #1
 800a81e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	220a      	movs	r2, #10
 800a824:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a826:	4b41      	ldr	r3, [pc, #260]	; (800a92c <tcp_process+0x7cc>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60da      	str	r2, [r3, #12]
 800a82e:	4a3f      	ldr	r2, [pc, #252]	; (800a92c <tcp_process+0x7cc>)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	f002 fc92 	bl	800d15c <tcp_timer_needed>
      }
      break;
 800a838:	e06c      	b.n	800a914 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f984 	bl	800ab48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a840:	4b3b      	ldr	r3, [pc, #236]	; (800a930 <tcp_process+0x7d0>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	f003 0310 	and.w	r3, r3, #16
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d065      	beq.n	800a918 <tcp_process+0x7b8>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a850:	4b38      	ldr	r3, [pc, #224]	; (800a934 <tcp_process+0x7d4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	429a      	cmp	r2, r3
 800a856:	d15f      	bne.n	800a918 <tcp_process+0x7b8>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d15b      	bne.n	800a918 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7fe fcf1 	bl	8009248 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a866:	4b35      	ldr	r3, [pc, #212]	; (800a93c <tcp_process+0x7dc>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d105      	bne.n	800a87c <tcp_process+0x71c>
 800a870:	4b32      	ldr	r3, [pc, #200]	; (800a93c <tcp_process+0x7dc>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	4a31      	ldr	r2, [pc, #196]	; (800a93c <tcp_process+0x7dc>)
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	e013      	b.n	800a8a4 <tcp_process+0x744>
 800a87c:	4b2f      	ldr	r3, [pc, #188]	; (800a93c <tcp_process+0x7dc>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	60fb      	str	r3, [r7, #12]
 800a882:	e00c      	b.n	800a89e <tcp_process+0x73e>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d104      	bne.n	800a898 <tcp_process+0x738>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	60da      	str	r2, [r3, #12]
 800a896:	e005      	b.n	800a8a4 <tcp_process+0x744>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1ef      	bne.n	800a884 <tcp_process+0x724>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	60da      	str	r2, [r3, #12]
 800a8aa:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <tcp_process+0x7c8>)
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	220a      	movs	r2, #10
 800a8b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a8b6:	4b1d      	ldr	r3, [pc, #116]	; (800a92c <tcp_process+0x7cc>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	60da      	str	r2, [r3, #12]
 800a8be:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <tcp_process+0x7cc>)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	f002 fc4a 	bl	800d15c <tcp_timer_needed>
      }
      break;
 800a8c8:	e026      	b.n	800a918 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f93c 	bl	800ab48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a8d0:	4b17      	ldr	r3, [pc, #92]	; (800a930 <tcp_process+0x7d0>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f003 0310 	and.w	r3, r3, #16
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01f      	beq.n	800a91c <tcp_process+0x7bc>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8e0:	4b14      	ldr	r3, [pc, #80]	; (800a934 <tcp_process+0x7d4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d119      	bne.n	800a91c <tcp_process+0x7bc>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d115      	bne.n	800a91c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a8f0:	4b11      	ldr	r3, [pc, #68]	; (800a938 <tcp_process+0x7d8>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f043 0310 	orr.w	r3, r3, #16
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <tcp_process+0x7d8>)
 800a8fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a8fe:	e00d      	b.n	800a91c <tcp_process+0x7bc>
    default:
      break;
 800a900:	bf00      	nop
 800a902:	e00c      	b.n	800a91e <tcp_process+0x7be>
      break;
 800a904:	bf00      	nop
 800a906:	e00a      	b.n	800a91e <tcp_process+0x7be>
      break;
 800a908:	bf00      	nop
 800a90a:	e008      	b.n	800a91e <tcp_process+0x7be>
      break;
 800a90c:	bf00      	nop
 800a90e:	e006      	b.n	800a91e <tcp_process+0x7be>
      break;
 800a910:	bf00      	nop
 800a912:	e004      	b.n	800a91e <tcp_process+0x7be>
      break;
 800a914:	bf00      	nop
 800a916:	e002      	b.n	800a91e <tcp_process+0x7be>
      break;
 800a918:	bf00      	nop
 800a91a:	e000      	b.n	800a91e <tcp_process+0x7be>
      break;
 800a91c:	bf00      	nop
  }
  return ERR_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3724      	adds	r7, #36	; 0x24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd90      	pop	{r4, r7, pc}
 800a928:	2000729c 	.word	0x2000729c
 800a92c:	20007298 	.word	0x20007298
 800a930:	200072cc 	.word	0x200072cc
 800a934:	200072c4 	.word	0x200072c4
 800a938:	200072cd 	.word	0x200072cd
 800a93c:	20007294 	.word	0x20007294

0800a940 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a940:	b590      	push	{r4, r7, lr}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <tcp_oos_insert_segment+0x1e>
 800a950:	4b3b      	ldr	r3, [pc, #236]	; (800aa40 <tcp_oos_insert_segment+0x100>)
 800a952:	f240 421f 	movw	r2, #1055	; 0x41f
 800a956:	493b      	ldr	r1, [pc, #236]	; (800aa44 <tcp_oos_insert_segment+0x104>)
 800a958:	483b      	ldr	r0, [pc, #236]	; (800aa48 <tcp_oos_insert_segment+0x108>)
 800a95a:	f006 f849 	bl	80109f0 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	899b      	ldrh	r3, [r3, #12]
 800a964:	b29b      	uxth	r3, r3
 800a966:	4618      	mov	r0, r3
 800a968:	f7fb fcb8 	bl	80062dc <lwip_htons>
 800a96c:	4603      	mov	r3, r0
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	d028      	beq.n	800a9ca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a978:	6838      	ldr	r0, [r7, #0]
 800a97a:	f7fe fa63 	bl	8008e44 <tcp_segs_free>
    next = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	603b      	str	r3, [r7, #0]
 800a982:	e056      	b.n	800aa32 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	899b      	ldrh	r3, [r3, #12]
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fb fca5 	bl	80062dc <lwip_htons>
 800a992:	4603      	mov	r3, r0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00d      	beq.n	800a9ba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	899b      	ldrh	r3, [r3, #12]
 800a9a4:	b29c      	uxth	r4, r3
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	f7fb fc98 	bl	80062dc <lwip_htons>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	4322      	orrs	r2, r4
 800a9b6:	b292      	uxth	r2, r2
 800a9b8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7fe fa52 	bl	8008e6e <tcp_seg_free>
    while (next &&
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00e      	beq.n	800a9ee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	891b      	ldrh	r3, [r3, #8]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4b1d      	ldr	r3, [pc, #116]	; (800aa4c <tcp_oos_insert_segment+0x10c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	441a      	add	r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	8909      	ldrh	r1, [r1, #8]
 800a9e6:	440b      	add	r3, r1
 800a9e8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	daca      	bge.n	800a984 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d01e      	beq.n	800aa32 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	891b      	ldrh	r3, [r3, #8]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4b14      	ldr	r3, [pc, #80]	; (800aa4c <tcp_oos_insert_segment+0x10c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	441a      	add	r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	1ad3      	subs	r3, r2, r3
    if (next &&
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	dd12      	ble.n	800aa32 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <tcp_oos_insert_segment+0x10c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	891b      	ldrh	r3, [r3, #8]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f7fc fd83 	bl	8007538 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	601a      	str	r2, [r3, #0]
}
 800aa38:	bf00      	nop
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd90      	pop	{r4, r7, pc}
 800aa40:	080198b8 	.word	0x080198b8
 800aa44:	08019b78 	.word	0x08019b78
 800aa48:	08019904 	.word	0x08019904
 800aa4c:	200072c0 	.word	0x200072c0

0800aa50 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800aa50:	b5b0      	push	{r4, r5, r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800aa5e:	e03e      	b.n	800aade <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fc ff70 	bl	8007954 <pbuf_clen>
 800aa74:	4603      	mov	r3, r0
 800aa76:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa7e:	8a7a      	ldrh	r2, [r7, #18]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d906      	bls.n	800aa92 <tcp_free_acked_segments+0x42>
 800aa84:	4b2a      	ldr	r3, [pc, #168]	; (800ab30 <tcp_free_acked_segments+0xe0>)
 800aa86:	f240 4257 	movw	r2, #1111	; 0x457
 800aa8a:	492a      	ldr	r1, [pc, #168]	; (800ab34 <tcp_free_acked_segments+0xe4>)
 800aa8c:	482a      	ldr	r0, [pc, #168]	; (800ab38 <tcp_free_acked_segments+0xe8>)
 800aa8e:	f005 ffaf 	bl	80109f0 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800aa98:	8a7b      	ldrh	r3, [r7, #18]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	891a      	ldrh	r2, [r3, #8]
 800aaa8:	4b24      	ldr	r3, [pc, #144]	; (800ab3c <tcp_free_acked_segments+0xec>)
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	4413      	add	r3, r2
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	4b22      	ldr	r3, [pc, #136]	; (800ab3c <tcp_free_acked_segments+0xec>)
 800aab2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800aab4:	6978      	ldr	r0, [r7, #20]
 800aab6:	f7fe f9da 	bl	8008e6e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00c      	beq.n	800aade <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d109      	bne.n	800aade <tcp_free_acked_segments+0x8e>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <tcp_free_acked_segments+0x8e>
 800aad0:	4b17      	ldr	r3, [pc, #92]	; (800ab30 <tcp_free_acked_segments+0xe0>)
 800aad2:	f240 4261 	movw	r2, #1121	; 0x461
 800aad6:	491a      	ldr	r1, [pc, #104]	; (800ab40 <tcp_free_acked_segments+0xf0>)
 800aad8:	4817      	ldr	r0, [pc, #92]	; (800ab38 <tcp_free_acked_segments+0xe8>)
 800aada:	f005 ff89 	bl	80109f0 <printf>
  while (seg_list != NULL &&
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d020      	beq.n	800ab26 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fb fc0b 	bl	8006306 <lwip_htonl>
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	891b      	ldrh	r3, [r3, #8]
 800aaf6:	461d      	mov	r5, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	899b      	ldrh	r3, [r3, #12]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fb fbeb 	bl	80062dc <lwip_htons>
 800ab06:	4603      	mov	r3, r0
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 0303 	and.w	r3, r3, #3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <tcp_free_acked_segments+0xc6>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <tcp_free_acked_segments+0xc8>
 800ab16:	2300      	movs	r3, #0
 800ab18:	442b      	add	r3, r5
 800ab1a:	18e2      	adds	r2, r4, r3
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <tcp_free_acked_segments+0xf4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dd9c      	ble.n	800aa60 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ab26:	68bb      	ldr	r3, [r7, #8]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ab30:	080198b8 	.word	0x080198b8
 800ab34:	08019ba0 	.word	0x08019ba0
 800ab38:	08019904 	.word	0x08019904
 800ab3c:	200072c8 	.word	0x200072c8
 800ab40:	08019bc8 	.word	0x08019bc8
 800ab44:	200072c4 	.word	0x200072c4

0800ab48 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ab48:	b5b0      	push	{r4, r5, r7, lr}
 800ab4a:	b094      	sub	sp, #80	; 0x50
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <tcp_receive+0x20>
 800ab5a:	4b91      	ldr	r3, [pc, #580]	; (800ada0 <tcp_receive+0x258>)
 800ab5c:	f240 427b 	movw	r2, #1147	; 0x47b
 800ab60:	4990      	ldr	r1, [pc, #576]	; (800ada4 <tcp_receive+0x25c>)
 800ab62:	4891      	ldr	r0, [pc, #580]	; (800ada8 <tcp_receive+0x260>)
 800ab64:	f005 ff44 	bl	80109f0 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	7d1b      	ldrb	r3, [r3, #20]
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d806      	bhi.n	800ab7e <tcp_receive+0x36>
 800ab70:	4b8b      	ldr	r3, [pc, #556]	; (800ada0 <tcp_receive+0x258>)
 800ab72:	f240 427c 	movw	r2, #1148	; 0x47c
 800ab76:	498d      	ldr	r1, [pc, #564]	; (800adac <tcp_receive+0x264>)
 800ab78:	488b      	ldr	r0, [pc, #556]	; (800ada8 <tcp_receive+0x260>)
 800ab7a:	f005 ff39 	bl	80109f0 <printf>

  if (flags & TCP_ACK) {
 800ab7e:	4b8c      	ldr	r3, [pc, #560]	; (800adb0 <tcp_receive+0x268>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f003 0310 	and.w	r3, r3, #16
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 8264 	beq.w	800b054 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab98:	4413      	add	r3, r2
 800ab9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aba0:	4b84      	ldr	r3, [pc, #528]	; (800adb4 <tcp_receive+0x26c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	db1b      	blt.n	800abe2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abae:	4b81      	ldr	r3, [pc, #516]	; (800adb4 <tcp_receive+0x26c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d106      	bne.n	800abc4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800abba:	4b7f      	ldr	r3, [pc, #508]	; (800adb8 <tcp_receive+0x270>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	db0e      	blt.n	800abe2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800abc8:	4b7b      	ldr	r3, [pc, #492]	; (800adb8 <tcp_receive+0x270>)
 800abca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800abcc:	429a      	cmp	r2, r3
 800abce:	d125      	bne.n	800ac1c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800abd0:	4b7a      	ldr	r3, [pc, #488]	; (800adbc <tcp_receive+0x274>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	89db      	ldrh	r3, [r3, #14]
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abde:	429a      	cmp	r2, r3
 800abe0:	d91c      	bls.n	800ac1c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800abe2:	4b76      	ldr	r3, [pc, #472]	; (800adbc <tcp_receive+0x274>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	89db      	ldrh	r3, [r3, #14]
 800abe8:	b29a      	uxth	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d205      	bcs.n	800ac0c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ac0c:	4b69      	ldr	r3, [pc, #420]	; (800adb4 <tcp_receive+0x26c>)
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ac14:	4b68      	ldr	r3, [pc, #416]	; (800adb8 <tcp_receive+0x270>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ac1c:	4b66      	ldr	r3, [pc, #408]	; (800adb8 <tcp_receive+0x270>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	dc58      	bgt.n	800acdc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ac2a:	4b65      	ldr	r3, [pc, #404]	; (800adc0 <tcp_receive+0x278>)
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d14b      	bne.n	800acca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ac3c:	4413      	add	r3, r2
 800ac3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d142      	bne.n	800acca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	db3d      	blt.n	800acca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac52:	4b59      	ldr	r3, [pc, #356]	; (800adb8 <tcp_receive+0x270>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d137      	bne.n	800acca <tcp_receive+0x182>
              found_dupack = 1;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac64:	2bff      	cmp	r3, #255	; 0xff
 800ac66:	d007      	beq.n	800ac78 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac6e:	3301      	adds	r3, #1
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d91b      	bls.n	800acba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac8c:	4413      	add	r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d30a      	bcc.n	800acb0 <tcp_receive+0x168>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aca4:	4413      	add	r3, r2
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800acae:	e004      	b.n	800acba <tcp_receive+0x172>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d902      	bls.n	800acca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f001 feeb 	bl	800caa0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800acca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800accc:	2b00      	cmp	r3, #0
 800acce:	f040 8161 	bne.w	800af94 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acda:	e15b      	b.n	800af94 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800acdc:	4b36      	ldr	r3, [pc, #216]	; (800adb8 <tcp_receive+0x270>)
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	3b01      	subs	r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f2c0 814e 	blt.w	800af8a <tcp_receive+0x442>
 800acee:	4b32      	ldr	r3, [pc, #200]	; (800adb8 <tcp_receive+0x270>)
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f300 8146 	bgt.w	800af8a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	8b5b      	ldrh	r3, [r3, #26]
 800ad02:	f003 0304 	and.w	r3, r3, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d010      	beq.n	800ad2c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	8b5b      	ldrh	r3, [r3, #26]
 800ad0e:	f023 0304 	bic.w	r3, r3, #4
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad3a:	10db      	asrs	r3, r3, #3
 800ad3c:	b21b      	sxth	r3, r3
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	4413      	add	r3, r2
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	b21a      	sxth	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ad54:	4b18      	ldr	r3, [pc, #96]	; (800adb8 <tcp_receive+0x270>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ad6c:	4b12      	ldr	r3, [pc, #72]	; (800adb8 <tcp_receive+0x270>)
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	7d1b      	ldrb	r3, [r3, #20]
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	f240 8097 	bls.w	800aeac <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d245      	bcs.n	800ae1a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	8b5b      	ldrh	r3, [r3, #26]
 800ad92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d014      	beq.n	800adc4 <tcp_receive+0x27c>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e013      	b.n	800adc6 <tcp_receive+0x27e>
 800ad9e:	bf00      	nop
 800ada0:	080198b8 	.word	0x080198b8
 800ada4:	08019be8 	.word	0x08019be8
 800ada8:	08019904 	.word	0x08019904
 800adac:	08019c04 	.word	0x08019c04
 800adb0:	200072cc 	.word	0x200072cc
 800adb4:	200072c0 	.word	0x200072c0
 800adb8:	200072c4 	.word	0x200072c4
 800adbc:	200072b0 	.word	0x200072b0
 800adc0:	200072ca 	.word	0x200072ca
 800adc4:	2302      	movs	r3, #2
 800adc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800adca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800add4:	fb12 f303 	smulbb	r3, r2, r3
 800add8:	b29b      	uxth	r3, r3
 800adda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800addc:	4293      	cmp	r3, r2
 800adde:	bf28      	it	cs
 800ade0:	4613      	movcs	r3, r2
 800ade2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800adea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800adec:	4413      	add	r3, r2
 800adee:	b29a      	uxth	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d309      	bcc.n	800ae0e <tcp_receive+0x2c6>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ae02:	4413      	add	r3, r2
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ae0c:	e04e      	b.n	800aeac <tcp_receive+0x364>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ae18:	e048      	b.n	800aeac <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ae20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae22:	4413      	add	r3, r2
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d309      	bcc.n	800ae44 <tcp_receive+0x2fc>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ae36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae38:	4413      	add	r3, r2
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae42:	e004      	b.n	800ae4e <tcp_receive+0x306>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d326      	bcc.n	800aeac <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae7e:	4413      	add	r3, r2
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d30a      	bcc.n	800aea2 <tcp_receive+0x35a>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae96:	4413      	add	r3, r2
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aea0:	e004      	b.n	800aeac <tcp_receive+0x364>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aea8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb4:	4a98      	ldr	r2, [pc, #608]	; (800b118 <tcp_receive+0x5d0>)
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff fdca 	bl	800aa50 <tcp_free_acked_segments>
 800aebc:	4602      	mov	r2, r0
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeca:	4a94      	ldr	r2, [pc, #592]	; (800b11c <tcp_receive+0x5d4>)
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff fdbf 	bl	800aa50 <tcp_free_acked_segments>
 800aed2:	4602      	mov	r2, r0
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d104      	bne.n	800aeea <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aee6:	861a      	strh	r2, [r3, #48]	; 0x30
 800aee8:	e002      	b.n	800aef0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d103      	bne.n	800af06 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800af0c:	4b84      	ldr	r3, [pc, #528]	; (800b120 <tcp_receive+0x5d8>)
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	4413      	add	r3, r2
 800af12:	b29a      	uxth	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8b5b      	ldrh	r3, [r3, #26]
 800af1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af22:	2b00      	cmp	r3, #0
 800af24:	d035      	beq.n	800af92 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d118      	bne.n	800af60 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00c      	beq.n	800af50 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	4618      	mov	r0, r3
 800af44:	f7fb f9df 	bl	8006306 <lwip_htonl>
 800af48:	4603      	mov	r3, r0
 800af4a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dc20      	bgt.n	800af92 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	8b5b      	ldrh	r3, [r3, #26]
 800af54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af58:	b29a      	uxth	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af5e:	e018      	b.n	800af92 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fb f9ca 	bl	8006306 <lwip_htonl>
 800af72:	4603      	mov	r3, r0
 800af74:	1ae3      	subs	r3, r4, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	dc0b      	bgt.n	800af92 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	8b5b      	ldrh	r3, [r3, #26]
 800af7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af88:	e003      	b.n	800af92 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 ff76 	bl	800ce7c <tcp_send_empty_ack>
 800af90:	e000      	b.n	800af94 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af92:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d05b      	beq.n	800b054 <tcp_receive+0x50c>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afa0:	4b60      	ldr	r3, [pc, #384]	; (800b124 <tcp_receive+0x5dc>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	da54      	bge.n	800b054 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800afaa:	4b5f      	ldr	r3, [pc, #380]	; (800b128 <tcp_receive+0x5e0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	b29b      	uxth	r3, r3
 800afba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800afbe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800afc8:	10db      	asrs	r3, r3, #3
 800afca:	b21b      	sxth	r3, r3
 800afcc:	b29b      	uxth	r3, r3
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800afdc:	b29a      	uxth	r2, r3
 800afde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800afe2:	4413      	add	r3, r2
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	b21a      	sxth	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800afec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	da05      	bge.n	800b000 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800aff4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aff8:	425b      	negs	r3, r3
 800affa:	b29b      	uxth	r3, r3
 800affc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b000:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b00a:	109b      	asrs	r3, r3, #2
 800b00c:	b21b      	sxth	r3, r3
 800b00e:	b29b      	uxth	r3, r3
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	b29b      	uxth	r3, r3
 800b014:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b01e:	b29a      	uxth	r2, r3
 800b020:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b024:	4413      	add	r3, r2
 800b026:	b29b      	uxth	r3, r3
 800b028:	b21a      	sxth	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b034:	10db      	asrs	r3, r3, #3
 800b036:	b21b      	sxth	r3, r3
 800b038:	b29a      	uxth	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b040:	b29b      	uxth	r3, r3
 800b042:	4413      	add	r3, r2
 800b044:	b29b      	uxth	r3, r3
 800b046:	b21a      	sxth	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b054:	4b35      	ldr	r3, [pc, #212]	; (800b12c <tcp_receive+0x5e4>)
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 84e2 	beq.w	800ba22 <tcp_receive+0xeda>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	7d1b      	ldrb	r3, [r3, #20]
 800b062:	2b06      	cmp	r3, #6
 800b064:	f200 84dd 	bhi.w	800ba22 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b06c:	4b30      	ldr	r3, [pc, #192]	; (800b130 <tcp_receive+0x5e8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	3b01      	subs	r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	f2c0 808f 	blt.w	800b198 <tcp_receive+0x650>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b07e:	4b2b      	ldr	r3, [pc, #172]	; (800b12c <tcp_receive+0x5e4>)
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	4619      	mov	r1, r3
 800b084:	4b2a      	ldr	r3, [pc, #168]	; (800b130 <tcp_receive+0x5e8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	440b      	add	r3, r1
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	3301      	adds	r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f300 8082 	bgt.w	800b198 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b094:	4b27      	ldr	r3, [pc, #156]	; (800b134 <tcp_receive+0x5ec>)
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b09e:	4b24      	ldr	r3, [pc, #144]	; (800b130 <tcp_receive+0x5e8>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b0a6:	4b23      	ldr	r3, [pc, #140]	; (800b134 <tcp_receive+0x5ec>)
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <tcp_receive+0x574>
 800b0ae:	4b22      	ldr	r3, [pc, #136]	; (800b138 <tcp_receive+0x5f0>)
 800b0b0:	f240 5294 	movw	r2, #1428	; 0x594
 800b0b4:	4921      	ldr	r1, [pc, #132]	; (800b13c <tcp_receive+0x5f4>)
 800b0b6:	4822      	ldr	r0, [pc, #136]	; (800b140 <tcp_receive+0x5f8>)
 800b0b8:	f005 fc9a 	bl	80109f0 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d906      	bls.n	800b0d4 <tcp_receive+0x58c>
 800b0c6:	4b1c      	ldr	r3, [pc, #112]	; (800b138 <tcp_receive+0x5f0>)
 800b0c8:	f240 5295 	movw	r2, #1429	; 0x595
 800b0cc:	491d      	ldr	r1, [pc, #116]	; (800b144 <tcp_receive+0x5fc>)
 800b0ce:	481c      	ldr	r0, [pc, #112]	; (800b140 <tcp_receive+0x5f8>)
 800b0d0:	f005 fc8e 	bl	80109f0 <printf>
      off = (u16_t)off32;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b0da:	4b16      	ldr	r3, [pc, #88]	; (800b134 <tcp_receive+0x5ec>)
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	891b      	ldrh	r3, [r3, #8]
 800b0e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d906      	bls.n	800b0f6 <tcp_receive+0x5ae>
 800b0e8:	4b13      	ldr	r3, [pc, #76]	; (800b138 <tcp_receive+0x5f0>)
 800b0ea:	f240 5297 	movw	r2, #1431	; 0x597
 800b0ee:	4916      	ldr	r1, [pc, #88]	; (800b148 <tcp_receive+0x600>)
 800b0f0:	4813      	ldr	r0, [pc, #76]	; (800b140 <tcp_receive+0x5f8>)
 800b0f2:	f005 fc7d 	bl	80109f0 <printf>
      inseg.len -= off;
 800b0f6:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <tcp_receive+0x5ec>)
 800b0f8:	891a      	ldrh	r2, [r3, #8]
 800b0fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	b29a      	uxth	r2, r3
 800b102:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <tcp_receive+0x5ec>)
 800b104:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b106:	4b0b      	ldr	r3, [pc, #44]	; (800b134 <tcp_receive+0x5ec>)
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	891a      	ldrh	r2, [r3, #8]
 800b10c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b114:	e02a      	b.n	800b16c <tcp_receive+0x624>
 800b116:	bf00      	nop
 800b118:	08019c20 	.word	0x08019c20
 800b11c:	08019c28 	.word	0x08019c28
 800b120:	200072c8 	.word	0x200072c8
 800b124:	200072c4 	.word	0x200072c4
 800b128:	20007288 	.word	0x20007288
 800b12c:	200072ca 	.word	0x200072ca
 800b130:	200072c0 	.word	0x200072c0
 800b134:	200072a0 	.word	0x200072a0
 800b138:	080198b8 	.word	0x080198b8
 800b13c:	08019c30 	.word	0x08019c30
 800b140:	08019904 	.word	0x08019904
 800b144:	08019c40 	.word	0x08019c40
 800b148:	08019c50 	.word	0x08019c50
        off -= p->len;
 800b14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b14e:	895b      	ldrh	r3, [r3, #10]
 800b150:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b15c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b15e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b162:	2200      	movs	r2, #0
 800b164:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b16e:	895b      	ldrh	r3, [r3, #10]
 800b170:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b174:	429a      	cmp	r2, r3
 800b176:	d8e9      	bhi.n	800b14c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b178:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b17c:	4619      	mov	r1, r3
 800b17e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b180:	f7fc fada 	bl	8007738 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	4a91      	ldr	r2, [pc, #580]	; (800b3d0 <tcp_receive+0x888>)
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	4b91      	ldr	r3, [pc, #580]	; (800b3d4 <tcp_receive+0x88c>)
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	4a8f      	ldr	r2, [pc, #572]	; (800b3d0 <tcp_receive+0x888>)
 800b192:	6812      	ldr	r2, [r2, #0]
 800b194:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b196:	e00d      	b.n	800b1b4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b198:	4b8d      	ldr	r3, [pc, #564]	; (800b3d0 <tcp_receive+0x888>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	da06      	bge.n	800b1b4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	8b5b      	ldrh	r3, [r3, #26]
 800b1aa:	f043 0302 	orr.w	r3, r3, #2
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b1b4:	4b86      	ldr	r3, [pc, #536]	; (800b3d0 <tcp_receive+0x888>)
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f2c0 842a 	blt.w	800ba18 <tcp_receive+0xed0>
 800b1c4:	4b82      	ldr	r3, [pc, #520]	; (800b3d0 <tcp_receive+0x888>)
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b1d0:	440b      	add	r3, r1
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f300 841e 	bgt.w	800ba18 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1e0:	4b7b      	ldr	r3, [pc, #492]	; (800b3d0 <tcp_receive+0x888>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	f040 829a 	bne.w	800b71e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b1ea:	4b7a      	ldr	r3, [pc, #488]	; (800b3d4 <tcp_receive+0x88c>)
 800b1ec:	891c      	ldrh	r4, [r3, #8]
 800b1ee:	4b79      	ldr	r3, [pc, #484]	; (800b3d4 <tcp_receive+0x88c>)
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	899b      	ldrh	r3, [r3, #12]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fb f870 	bl	80062dc <lwip_htons>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <tcp_receive+0x6c4>
 800b208:	2301      	movs	r3, #1
 800b20a:	e000      	b.n	800b20e <tcp_receive+0x6c6>
 800b20c:	2300      	movs	r3, #0
 800b20e:	4423      	add	r3, r4
 800b210:	b29a      	uxth	r2, r3
 800b212:	4b71      	ldr	r3, [pc, #452]	; (800b3d8 <tcp_receive+0x890>)
 800b214:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b21a:	4b6f      	ldr	r3, [pc, #444]	; (800b3d8 <tcp_receive+0x890>)
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d275      	bcs.n	800b30e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b222:	4b6c      	ldr	r3, [pc, #432]	; (800b3d4 <tcp_receive+0x88c>)
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	899b      	ldrh	r3, [r3, #12]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fb f856 	bl	80062dc <lwip_htons>
 800b230:	4603      	mov	r3, r0
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d01f      	beq.n	800b27c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b23c:	4b65      	ldr	r3, [pc, #404]	; (800b3d4 <tcp_receive+0x88c>)
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	899b      	ldrh	r3, [r3, #12]
 800b242:	b29b      	uxth	r3, r3
 800b244:	b21b      	sxth	r3, r3
 800b246:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b24a:	b21c      	sxth	r4, r3
 800b24c:	4b61      	ldr	r3, [pc, #388]	; (800b3d4 <tcp_receive+0x88c>)
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	899b      	ldrh	r3, [r3, #12]
 800b252:	b29b      	uxth	r3, r3
 800b254:	4618      	mov	r0, r3
 800b256:	f7fb f841 	bl	80062dc <lwip_htons>
 800b25a:	4603      	mov	r3, r0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	b29b      	uxth	r3, r3
 800b260:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b264:	b29b      	uxth	r3, r3
 800b266:	4618      	mov	r0, r3
 800b268:	f7fb f838 	bl	80062dc <lwip_htons>
 800b26c:	4603      	mov	r3, r0
 800b26e:	b21b      	sxth	r3, r3
 800b270:	4323      	orrs	r3, r4
 800b272:	b21a      	sxth	r2, r3
 800b274:	4b57      	ldr	r3, [pc, #348]	; (800b3d4 <tcp_receive+0x88c>)
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	b292      	uxth	r2, r2
 800b27a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b280:	4b54      	ldr	r3, [pc, #336]	; (800b3d4 <tcp_receive+0x88c>)
 800b282:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b284:	4b53      	ldr	r3, [pc, #332]	; (800b3d4 <tcp_receive+0x88c>)
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	899b      	ldrh	r3, [r3, #12]
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fb f825 	bl	80062dc <lwip_htons>
 800b292:	4603      	mov	r3, r0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d005      	beq.n	800b2aa <tcp_receive+0x762>
            inseg.len -= 1;
 800b29e:	4b4d      	ldr	r3, [pc, #308]	; (800b3d4 <tcp_receive+0x88c>)
 800b2a0:	891b      	ldrh	r3, [r3, #8]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	4b4b      	ldr	r3, [pc, #300]	; (800b3d4 <tcp_receive+0x88c>)
 800b2a8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b2aa:	4b4a      	ldr	r3, [pc, #296]	; (800b3d4 <tcp_receive+0x88c>)
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	4a49      	ldr	r2, [pc, #292]	; (800b3d4 <tcp_receive+0x88c>)
 800b2b0:	8912      	ldrh	r2, [r2, #8]
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fc f93f 	bl	8007538 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b2ba:	4b46      	ldr	r3, [pc, #280]	; (800b3d4 <tcp_receive+0x88c>)
 800b2bc:	891c      	ldrh	r4, [r3, #8]
 800b2be:	4b45      	ldr	r3, [pc, #276]	; (800b3d4 <tcp_receive+0x88c>)
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	899b      	ldrh	r3, [r3, #12]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fb f808 	bl	80062dc <lwip_htons>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	f003 0303 	and.w	r3, r3, #3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <tcp_receive+0x794>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e000      	b.n	800b2de <tcp_receive+0x796>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4423      	add	r3, r4
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	4b3d      	ldr	r3, [pc, #244]	; (800b3d8 <tcp_receive+0x890>)
 800b2e4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b2e6:	4b3c      	ldr	r3, [pc, #240]	; (800b3d8 <tcp_receive+0x890>)
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4b38      	ldr	r3, [pc, #224]	; (800b3d0 <tcp_receive+0x888>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	441a      	add	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b2fa:	440b      	add	r3, r1
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d006      	beq.n	800b30e <tcp_receive+0x7c6>
 800b300:	4b36      	ldr	r3, [pc, #216]	; (800b3dc <tcp_receive+0x894>)
 800b302:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b306:	4936      	ldr	r1, [pc, #216]	; (800b3e0 <tcp_receive+0x898>)
 800b308:	4836      	ldr	r0, [pc, #216]	; (800b3e4 <tcp_receive+0x89c>)
 800b30a:	f005 fb71 	bl	80109f0 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 80e7 	beq.w	800b4e6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b318:	4b2e      	ldr	r3, [pc, #184]	; (800b3d4 <tcp_receive+0x88c>)
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	899b      	ldrh	r3, [r3, #12]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	4618      	mov	r0, r3
 800b322:	f7fa ffdb 	bl	80062dc <lwip_htons>
 800b326:	4603      	mov	r3, r0
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d010      	beq.n	800b354 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b332:	e00a      	b.n	800b34a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b338:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f7fd fd92 	bl	8008e6e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1f0      	bne.n	800b334 <tcp_receive+0x7ec>
 800b352:	e0c8      	b.n	800b4e6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b35a:	e052      	b.n	800b402 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	899b      	ldrh	r3, [r3, #12]
 800b362:	b29b      	uxth	r3, r3
 800b364:	4618      	mov	r0, r3
 800b366:	f7fa ffb9 	bl	80062dc <lwip_htons>
 800b36a:	4603      	mov	r3, r0
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	d03d      	beq.n	800b3f2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b376:	4b17      	ldr	r3, [pc, #92]	; (800b3d4 <tcp_receive+0x88c>)
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	899b      	ldrh	r3, [r3, #12]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fa ffac 	bl	80062dc <lwip_htons>
 800b384:	4603      	mov	r3, r0
 800b386:	b2db      	uxtb	r3, r3
 800b388:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d130      	bne.n	800b3f2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b390:	4b10      	ldr	r3, [pc, #64]	; (800b3d4 <tcp_receive+0x88c>)
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	899b      	ldrh	r3, [r3, #12]
 800b396:	b29c      	uxth	r4, r3
 800b398:	2001      	movs	r0, #1
 800b39a:	f7fa ff9f 	bl	80062dc <lwip_htons>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b0c      	ldr	r3, [pc, #48]	; (800b3d4 <tcp_receive+0x88c>)
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	4322      	orrs	r2, r4
 800b3a8:	b292      	uxth	r2, r2
 800b3aa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b3ac:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <tcp_receive+0x88c>)
 800b3ae:	891c      	ldrh	r4, [r3, #8]
 800b3b0:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <tcp_receive+0x88c>)
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	899b      	ldrh	r3, [r3, #12]
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fa ff8f 	bl	80062dc <lwip_htons>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00e      	beq.n	800b3e8 <tcp_receive+0x8a0>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e00d      	b.n	800b3ea <tcp_receive+0x8a2>
 800b3ce:	bf00      	nop
 800b3d0:	200072c0 	.word	0x200072c0
 800b3d4:	200072a0 	.word	0x200072a0
 800b3d8:	200072ca 	.word	0x200072ca
 800b3dc:	080198b8 	.word	0x080198b8
 800b3e0:	08019c60 	.word	0x08019c60
 800b3e4:	08019904 	.word	0x08019904
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4423      	add	r3, r4
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	4b98      	ldr	r3, [pc, #608]	; (800b650 <tcp_receive+0xb08>)
 800b3f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b3fc:	6938      	ldr	r0, [r7, #16]
 800b3fe:	f7fd fd36 	bl	8008e6e <tcp_seg_free>
            while (next &&
 800b402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00e      	beq.n	800b426 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b408:	4b91      	ldr	r3, [pc, #580]	; (800b650 <tcp_receive+0xb08>)
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	461a      	mov	r2, r3
 800b40e:	4b91      	ldr	r3, [pc, #580]	; (800b654 <tcp_receive+0xb0c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	441a      	add	r2, r3
 800b414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b41c:	8909      	ldrh	r1, [r1, #8]
 800b41e:	440b      	add	r3, r1
 800b420:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b422:	2b00      	cmp	r3, #0
 800b424:	da9a      	bge.n	800b35c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d059      	beq.n	800b4e0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800b42c:	4b88      	ldr	r3, [pc, #544]	; (800b650 <tcp_receive+0xb08>)
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	461a      	mov	r2, r3
 800b432:	4b88      	ldr	r3, [pc, #544]	; (800b654 <tcp_receive+0xb0c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	441a      	add	r2, r3
 800b438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b440:	2b00      	cmp	r3, #0
 800b442:	dd4d      	ble.n	800b4e0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	4b81      	ldr	r3, [pc, #516]	; (800b654 <tcp_receive+0xb0c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	b29b      	uxth	r3, r3
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	b29a      	uxth	r2, r3
 800b456:	4b80      	ldr	r3, [pc, #512]	; (800b658 <tcp_receive+0xb10>)
 800b458:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b45a:	4b7f      	ldr	r3, [pc, #508]	; (800b658 <tcp_receive+0xb10>)
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	899b      	ldrh	r3, [r3, #12]
 800b460:	b29b      	uxth	r3, r3
 800b462:	4618      	mov	r0, r3
 800b464:	f7fa ff3a 	bl	80062dc <lwip_htons>
 800b468:	4603      	mov	r3, r0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	f003 0302 	and.w	r3, r3, #2
 800b470:	2b00      	cmp	r3, #0
 800b472:	d005      	beq.n	800b480 <tcp_receive+0x938>
                inseg.len -= 1;
 800b474:	4b78      	ldr	r3, [pc, #480]	; (800b658 <tcp_receive+0xb10>)
 800b476:	891b      	ldrh	r3, [r3, #8]
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	4b76      	ldr	r3, [pc, #472]	; (800b658 <tcp_receive+0xb10>)
 800b47e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b480:	4b75      	ldr	r3, [pc, #468]	; (800b658 <tcp_receive+0xb10>)
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	4a74      	ldr	r2, [pc, #464]	; (800b658 <tcp_receive+0xb10>)
 800b486:	8912      	ldrh	r2, [r2, #8]
 800b488:	4611      	mov	r1, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fc f854 	bl	8007538 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b490:	4b71      	ldr	r3, [pc, #452]	; (800b658 <tcp_receive+0xb10>)
 800b492:	891c      	ldrh	r4, [r3, #8]
 800b494:	4b70      	ldr	r3, [pc, #448]	; (800b658 <tcp_receive+0xb10>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	899b      	ldrh	r3, [r3, #12]
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fa ff1d 	bl	80062dc <lwip_htons>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d001      	beq.n	800b4b2 <tcp_receive+0x96a>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <tcp_receive+0x96c>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4423      	add	r3, r4
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	4b65      	ldr	r3, [pc, #404]	; (800b650 <tcp_receive+0xb08>)
 800b4ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b4bc:	4b64      	ldr	r3, [pc, #400]	; (800b650 <tcp_receive+0xb08>)
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b64      	ldr	r3, [pc, #400]	; (800b654 <tcp_receive+0xb0c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	441a      	add	r2, r3
 800b4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d006      	beq.n	800b4e0 <tcp_receive+0x998>
 800b4d2:	4b62      	ldr	r3, [pc, #392]	; (800b65c <tcp_receive+0xb14>)
 800b4d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b4d8:	4961      	ldr	r1, [pc, #388]	; (800b660 <tcp_receive+0xb18>)
 800b4da:	4862      	ldr	r0, [pc, #392]	; (800b664 <tcp_receive+0xb1c>)
 800b4dc:	f005 fa88 	bl	80109f0 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b4e6:	4b5a      	ldr	r3, [pc, #360]	; (800b650 <tcp_receive+0xb08>)
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4b59      	ldr	r3, [pc, #356]	; (800b654 <tcp_receive+0xb0c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	441a      	add	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4fa:	4b55      	ldr	r3, [pc, #340]	; (800b650 <tcp_receive+0xb08>)
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d206      	bcs.n	800b510 <tcp_receive+0x9c8>
 800b502:	4b56      	ldr	r3, [pc, #344]	; (800b65c <tcp_receive+0xb14>)
 800b504:	f240 6207 	movw	r2, #1543	; 0x607
 800b508:	4957      	ldr	r1, [pc, #348]	; (800b668 <tcp_receive+0xb20>)
 800b50a:	4856      	ldr	r0, [pc, #344]	; (800b664 <tcp_receive+0xb1c>)
 800b50c:	f005 fa70 	bl	80109f0 <printf>
        pcb->rcv_wnd -= tcplen;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b514:	4b4e      	ldr	r3, [pc, #312]	; (800b650 <tcp_receive+0xb08>)
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7fc ffc5 	bl	80084b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b526:	4b4c      	ldr	r3, [pc, #304]	; (800b658 <tcp_receive+0xb10>)
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	891b      	ldrh	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d006      	beq.n	800b53e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800b530:	4b49      	ldr	r3, [pc, #292]	; (800b658 <tcp_receive+0xb10>)
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	4a4d      	ldr	r2, [pc, #308]	; (800b66c <tcp_receive+0xb24>)
 800b536:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b538:	4b47      	ldr	r3, [pc, #284]	; (800b658 <tcp_receive+0xb10>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b53e:	4b46      	ldr	r3, [pc, #280]	; (800b658 <tcp_receive+0xb10>)
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	899b      	ldrh	r3, [r3, #12]
 800b544:	b29b      	uxth	r3, r3
 800b546:	4618      	mov	r0, r3
 800b548:	f7fa fec8 	bl	80062dc <lwip_htons>
 800b54c:	4603      	mov	r3, r0
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 80b8 	beq.w	800b6ca <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b55a:	4b45      	ldr	r3, [pc, #276]	; (800b670 <tcp_receive+0xb28>)
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	f043 0320 	orr.w	r3, r3, #32
 800b562:	b2da      	uxtb	r2, r3
 800b564:	4b42      	ldr	r3, [pc, #264]	; (800b670 <tcp_receive+0xb28>)
 800b566:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b568:	e0af      	b.n	800b6ca <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4a36      	ldr	r2, [pc, #216]	; (800b654 <tcp_receive+0xb0c>)
 800b57a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	891b      	ldrh	r3, [r3, #8]
 800b580:	461c      	mov	r4, r3
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	899b      	ldrh	r3, [r3, #12]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fa fea6 	bl	80062dc <lwip_htons>
 800b590:	4603      	mov	r3, r0
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <tcp_receive+0xa58>
 800b59c:	2301      	movs	r3, #1
 800b59e:	e000      	b.n	800b5a2 <tcp_receive+0xa5a>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	191a      	adds	r2, r3, r4
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	441a      	add	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b2:	461c      	mov	r4, r3
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	891b      	ldrh	r3, [r3, #8]
 800b5b8:	461d      	mov	r5, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	899b      	ldrh	r3, [r3, #12]
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fa fe8a 	bl	80062dc <lwip_htons>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	f003 0303 	and.w	r3, r3, #3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <tcp_receive+0xa90>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e000      	b.n	800b5da <tcp_receive+0xa92>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	442b      	add	r3, r5
 800b5dc:	429c      	cmp	r4, r3
 800b5de:	d206      	bcs.n	800b5ee <tcp_receive+0xaa6>
 800b5e0:	4b1e      	ldr	r3, [pc, #120]	; (800b65c <tcp_receive+0xb14>)
 800b5e2:	f240 622b 	movw	r2, #1579	; 0x62b
 800b5e6:	4923      	ldr	r1, [pc, #140]	; (800b674 <tcp_receive+0xb2c>)
 800b5e8:	481e      	ldr	r0, [pc, #120]	; (800b664 <tcp_receive+0xb1c>)
 800b5ea:	f005 fa01 	bl	80109f0 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	891b      	ldrh	r3, [r3, #8]
 800b5f2:	461c      	mov	r4, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	899b      	ldrh	r3, [r3, #12]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fa fe6d 	bl	80062dc <lwip_htons>
 800b602:	4603      	mov	r3, r0
 800b604:	b2db      	uxtb	r3, r3
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <tcp_receive+0xaca>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <tcp_receive+0xacc>
 800b612:	2300      	movs	r3, #0
 800b614:	1919      	adds	r1, r3, r4
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b61a:	b28b      	uxth	r3, r1
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	b29a      	uxth	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fc ff43 	bl	80084b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	891b      	ldrh	r3, [r3, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d028      	beq.n	800b686 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b634:	4b0d      	ldr	r3, [pc, #52]	; (800b66c <tcp_receive+0xb24>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d01d      	beq.n	800b678 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800b63c:	4b0b      	ldr	r3, [pc, #44]	; (800b66c <tcp_receive+0xb24>)
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	f7fc f9be 	bl	80079c8 <pbuf_cat>
 800b64c:	e018      	b.n	800b680 <tcp_receive+0xb38>
 800b64e:	bf00      	nop
 800b650:	200072ca 	.word	0x200072ca
 800b654:	200072c0 	.word	0x200072c0
 800b658:	200072a0 	.word	0x200072a0
 800b65c:	080198b8 	.word	0x080198b8
 800b660:	08019c98 	.word	0x08019c98
 800b664:	08019904 	.word	0x08019904
 800b668:	08019cd4 	.word	0x08019cd4
 800b66c:	200072d0 	.word	0x200072d0
 800b670:	200072cd 	.word	0x200072cd
 800b674:	08019cf4 	.word	0x08019cf4
            } else {
              recv_data = cseg->p;
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	4a70      	ldr	r2, [pc, #448]	; (800b840 <tcp_receive+0xcf8>)
 800b67e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2200      	movs	r2, #0
 800b684:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	899b      	ldrh	r3, [r3, #12]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fa fe24 	bl	80062dc <lwip_htons>
 800b694:	4603      	mov	r3, r0
 800b696:	b2db      	uxtb	r3, r3
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00d      	beq.n	800b6bc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b6a0:	4b68      	ldr	r3, [pc, #416]	; (800b844 <tcp_receive+0xcfc>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f043 0320 	orr.w	r3, r3, #32
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	4b66      	ldr	r3, [pc, #408]	; (800b844 <tcp_receive+0xcfc>)
 800b6ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	7d1b      	ldrb	r3, [r3, #20]
 800b6b2:	2b04      	cmp	r3, #4
 800b6b4:	d102      	bne.n	800b6bc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2207      	movs	r2, #7
 800b6ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b6c4:	68b8      	ldr	r0, [r7, #8]
 800b6c6:	f7fd fbd2 	bl	8008e6e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d008      	beq.n	800b6e4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	f43f af43 	beq.w	800b56a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	8b5b      	ldrh	r3, [r3, #26]
 800b6e8:	f003 0301 	and.w	r3, r3, #1
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00e      	beq.n	800b70e <tcp_receive+0xbc6>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	f023 0301 	bic.w	r3, r3, #1
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	835a      	strh	r2, [r3, #26]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	8b5b      	ldrh	r3, [r3, #26]
 800b702:	f043 0302 	orr.w	r3, r3, #2
 800b706:	b29a      	uxth	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b70c:	e188      	b.n	800ba20 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	8b5b      	ldrh	r3, [r3, #26]
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	b29a      	uxth	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b71c:	e180      	b.n	800ba20 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b726:	4848      	ldr	r0, [pc, #288]	; (800b848 <tcp_receive+0xd00>)
 800b728:	f7fd fbba 	bl	8008ea0 <tcp_seg_copy>
 800b72c:	4602      	mov	r2, r0
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	675a      	str	r2, [r3, #116]	; 0x74
 800b732:	e16d      	b.n	800ba10 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b734:	2300      	movs	r3, #0
 800b736:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b73c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b73e:	e157      	b.n	800b9f0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	4b41      	ldr	r3, [pc, #260]	; (800b84c <tcp_receive+0xd04>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d11d      	bne.n	800b78a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b74e:	4b3e      	ldr	r3, [pc, #248]	; (800b848 <tcp_receive+0xd00>)
 800b750:	891a      	ldrh	r2, [r3, #8]
 800b752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b754:	891b      	ldrh	r3, [r3, #8]
 800b756:	429a      	cmp	r2, r3
 800b758:	f240 814f 	bls.w	800b9fa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b75c:	483a      	ldr	r0, [pc, #232]	; (800b848 <tcp_receive+0xd00>)
 800b75e:	f7fd fb9f 	bl	8008ea0 <tcp_seg_copy>
 800b762:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 8149 	beq.w	800b9fe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <tcp_receive+0xc32>
                    prev->next = cseg;
 800b772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	e002      	b.n	800b780 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	f7ff f8dc 	bl	800a940 <tcp_oos_insert_segment>
                }
                break;
 800b788:	e139      	b.n	800b9fe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d117      	bne.n	800b7c0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b790:	4b2e      	ldr	r3, [pc, #184]	; (800b84c <tcp_receive+0xd04>)
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	da57      	bge.n	800b850 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b7a0:	4829      	ldr	r0, [pc, #164]	; (800b848 <tcp_receive+0xd00>)
 800b7a2:	f7fd fb7d 	bl	8008ea0 <tcp_seg_copy>
 800b7a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f000 8129 	beq.w	800ba02 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b7b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7b8:	69b8      	ldr	r0, [r7, #24]
 800b7ba:	f7ff f8c1 	bl	800a940 <tcp_oos_insert_segment>
                  }
                  break;
 800b7be:	e120      	b.n	800ba02 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b7c0:	4b22      	ldr	r3, [pc, #136]	; (800b84c <tcp_receive+0xd04>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	db3e      	blt.n	800b850 <tcp_receive+0xd08>
 800b7d2:	4b1e      	ldr	r3, [pc, #120]	; (800b84c <tcp_receive+0xd04>)
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	3301      	adds	r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dc35      	bgt.n	800b850 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b7e4:	4818      	ldr	r0, [pc, #96]	; (800b848 <tcp_receive+0xd00>)
 800b7e6:	f7fd fb5b 	bl	8008ea0 <tcp_seg_copy>
 800b7ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 8109 	beq.w	800ba06 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7fc:	8912      	ldrh	r2, [r2, #8]
 800b7fe:	441a      	add	r2, r3
 800b800:	4b12      	ldr	r3, [pc, #72]	; (800b84c <tcp_receive+0xd04>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	dd12      	ble.n	800b830 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b80a:	4b10      	ldr	r3, [pc, #64]	; (800b84c <tcp_receive+0xd04>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	b29a      	uxth	r2, r3
 800b810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	b29b      	uxth	r3, r3
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b826:	891b      	ldrh	r3, [r3, #8]
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fb fe84 	bl	8007538 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b832:	69fa      	ldr	r2, [r7, #28]
 800b834:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b836:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b838:	69f8      	ldr	r0, [r7, #28]
 800b83a:	f7ff f881 	bl	800a940 <tcp_oos_insert_segment>
                  }
                  break;
 800b83e:	e0e2      	b.n	800ba06 <tcp_receive+0xebe>
 800b840:	200072d0 	.word	0x200072d0
 800b844:	200072cd 	.word	0x200072cd
 800b848:	200072a0 	.word	0x200072a0
 800b84c:	200072c0 	.word	0x200072c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f040 80c6 	bne.w	800b9ea <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b85e:	4b80      	ldr	r3, [pc, #512]	; (800ba60 <tcp_receive+0xf18>)
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f340 80bd 	ble.w	800b9ea <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	899b      	ldrh	r3, [r3, #12]
 800b876:	b29b      	uxth	r3, r3
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fa fd2f 	bl	80062dc <lwip_htons>
 800b87e:	4603      	mov	r3, r0
 800b880:	b2db      	uxtb	r3, r3
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 80bf 	bne.w	800ba0a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b88c:	4875      	ldr	r0, [pc, #468]	; (800ba64 <tcp_receive+0xf1c>)
 800b88e:	f7fd fb07 	bl	8008ea0 <tcp_seg_copy>
 800b892:	4602      	mov	r2, r0
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 80b6 	beq.w	800ba0e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8aa:	8912      	ldrh	r2, [r2, #8]
 800b8ac:	441a      	add	r2, r3
 800b8ae:	4b6c      	ldr	r3, [pc, #432]	; (800ba60 <tcp_receive+0xf18>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dd12      	ble.n	800b8de <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b8b8:	4b69      	ldr	r3, [pc, #420]	; (800ba60 <tcp_receive+0xf18>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	891b      	ldrh	r3, [r3, #8]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f7fb fe2d 	bl	8007538 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b8de:	4b62      	ldr	r3, [pc, #392]	; (800ba68 <tcp_receive+0xf20>)
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4b5e      	ldr	r3, [pc, #376]	; (800ba60 <tcp_receive+0xf18>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	441a      	add	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ee:	6879      	ldr	r1, [r7, #4]
 800b8f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b8f2:	440b      	add	r3, r1
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f340 8089 	ble.w	800ba0e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	899b      	ldrh	r3, [r3, #12]
 800b904:	b29b      	uxth	r3, r3
 800b906:	4618      	mov	r0, r3
 800b908:	f7fa fce8 	bl	80062dc <lwip_htons>
 800b90c:	4603      	mov	r3, r0
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d022      	beq.n	800b95e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	899b      	ldrh	r3, [r3, #12]
 800b920:	b29b      	uxth	r3, r3
 800b922:	b21b      	sxth	r3, r3
 800b924:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b928:	b21c      	sxth	r4, r3
 800b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	899b      	ldrh	r3, [r3, #12]
 800b932:	b29b      	uxth	r3, r3
 800b934:	4618      	mov	r0, r3
 800b936:	f7fa fcd1 	bl	80062dc <lwip_htons>
 800b93a:	4603      	mov	r3, r0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b944:	b29b      	uxth	r3, r3
 800b946:	4618      	mov	r0, r3
 800b948:	f7fa fcc8 	bl	80062dc <lwip_htons>
 800b94c:	4603      	mov	r3, r0
 800b94e:	b21b      	sxth	r3, r3
 800b950:	4323      	orrs	r3, r4
 800b952:	b21a      	sxth	r2, r3
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	b292      	uxth	r2, r2
 800b95c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	b29a      	uxth	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b968:	4413      	add	r3, r2
 800b96a:	b299      	uxth	r1, r3
 800b96c:	4b3c      	ldr	r3, [pc, #240]	; (800ba60 <tcp_receive+0xf18>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	b29a      	uxth	r2, r3
 800b972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	1a8a      	subs	r2, r1, r2
 800b978:	b292      	uxth	r2, r2
 800b97a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	891b      	ldrh	r3, [r3, #8]
 800b988:	4619      	mov	r1, r3
 800b98a:	4610      	mov	r0, r2
 800b98c:	f7fb fdd4 	bl	8007538 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	891c      	ldrh	r4, [r3, #8]
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	899b      	ldrh	r3, [r3, #12]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fa fc9b 	bl	80062dc <lwip_htons>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <tcp_receive+0xe6e>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <tcp_receive+0xe70>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4423      	add	r3, r4
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <tcp_receive+0xf20>)
 800b9be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b9c0:	4b29      	ldr	r3, [pc, #164]	; (800ba68 <tcp_receive+0xf20>)
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4b26      	ldr	r3, [pc, #152]	; (800ba60 <tcp_receive+0xf18>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	441a      	add	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	6879      	ldr	r1, [r7, #4]
 800b9d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9d4:	440b      	add	r3, r1
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d019      	beq.n	800ba0e <tcp_receive+0xec6>
 800b9da:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <tcp_receive+0xf24>)
 800b9dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b9e0:	4923      	ldr	r1, [pc, #140]	; (800ba70 <tcp_receive+0xf28>)
 800b9e2:	4824      	ldr	r0, [pc, #144]	; (800ba74 <tcp_receive+0xf2c>)
 800b9e4:	f005 f804 	bl	80109f0 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b9e8:	e011      	b.n	800ba0e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f47f aea4 	bne.w	800b740 <tcp_receive+0xbf8>
 800b9f8:	e00a      	b.n	800ba10 <tcp_receive+0xec8>
                break;
 800b9fa:	bf00      	nop
 800b9fc:	e008      	b.n	800ba10 <tcp_receive+0xec8>
                break;
 800b9fe:	bf00      	nop
 800ba00:	e006      	b.n	800ba10 <tcp_receive+0xec8>
                  break;
 800ba02:	bf00      	nop
 800ba04:	e004      	b.n	800ba10 <tcp_receive+0xec8>
                  break;
 800ba06:	bf00      	nop
 800ba08:	e002      	b.n	800ba10 <tcp_receive+0xec8>
                  break;
 800ba0a:	bf00      	nop
 800ba0c:	e000      	b.n	800ba10 <tcp_receive+0xec8>
                break;
 800ba0e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f001 fa33 	bl	800ce7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ba16:	e003      	b.n	800ba20 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f001 fa2f 	bl	800ce7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ba1e:	e01a      	b.n	800ba56 <tcp_receive+0xf0e>
 800ba20:	e019      	b.n	800ba56 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ba22:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <tcp_receive+0xf18>)
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	db0a      	blt.n	800ba46 <tcp_receive+0xefe>
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <tcp_receive+0xf18>)
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ba3c:	440b      	add	r3, r1
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	3301      	adds	r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	dd07      	ble.n	800ba56 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8b5b      	ldrh	r3, [r3, #26]
 800ba4a:	f043 0302 	orr.w	r3, r3, #2
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ba54:	e7ff      	b.n	800ba56 <tcp_receive+0xf0e>
 800ba56:	bf00      	nop
 800ba58:	3750      	adds	r7, #80	; 0x50
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	200072c0 	.word	0x200072c0
 800ba64:	200072a0 	.word	0x200072a0
 800ba68:	200072ca 	.word	0x200072ca
 800ba6c:	080198b8 	.word	0x080198b8
 800ba70:	08019c60 	.word	0x08019c60
 800ba74:	08019904 	.word	0x08019904

0800ba78 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ba7e:	4b15      	ldr	r3, [pc, #84]	; (800bad4 <tcp_get_next_optbyte+0x5c>)
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	b291      	uxth	r1, r2
 800ba86:	4a13      	ldr	r2, [pc, #76]	; (800bad4 <tcp_get_next_optbyte+0x5c>)
 800ba88:	8011      	strh	r1, [r2, #0]
 800ba8a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba8c:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <tcp_get_next_optbyte+0x60>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d004      	beq.n	800ba9e <tcp_get_next_optbyte+0x26>
 800ba94:	4b11      	ldr	r3, [pc, #68]	; (800badc <tcp_get_next_optbyte+0x64>)
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	88fa      	ldrh	r2, [r7, #6]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d208      	bcs.n	800bab0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ba9e:	4b10      	ldr	r3, [pc, #64]	; (800bae0 <tcp_get_next_optbyte+0x68>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3314      	adds	r3, #20
 800baa4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800baa6:	88fb      	ldrh	r3, [r7, #6]
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	4413      	add	r3, r2
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	e00b      	b.n	800bac8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bab0:	88fb      	ldrh	r3, [r7, #6]
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <tcp_get_next_optbyte+0x64>)
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800babe:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <tcp_get_next_optbyte+0x60>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	797b      	ldrb	r3, [r7, #5]
 800bac4:	4413      	add	r3, r2
 800bac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	200072bc 	.word	0x200072bc
 800bad8:	200072b8 	.word	0x200072b8
 800badc:	200072b6 	.word	0x200072b6
 800bae0:	200072b0 	.word	0x200072b0

0800bae4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <tcp_parseopt+0x1c>
 800baf2:	4b32      	ldr	r3, [pc, #200]	; (800bbbc <tcp_parseopt+0xd8>)
 800baf4:	f240 727d 	movw	r2, #1917	; 0x77d
 800baf8:	4931      	ldr	r1, [pc, #196]	; (800bbc0 <tcp_parseopt+0xdc>)
 800bafa:	4832      	ldr	r0, [pc, #200]	; (800bbc4 <tcp_parseopt+0xe0>)
 800bafc:	f004 ff78 	bl	80109f0 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bb00:	4b31      	ldr	r3, [pc, #196]	; (800bbc8 <tcp_parseopt+0xe4>)
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d055      	beq.n	800bbb4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bb08:	4b30      	ldr	r3, [pc, #192]	; (800bbcc <tcp_parseopt+0xe8>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	801a      	strh	r2, [r3, #0]
 800bb0e:	e045      	b.n	800bb9c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800bb10:	f7ff ffb2 	bl	800ba78 <tcp_get_next_optbyte>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d006      	beq.n	800bb2c <tcp_parseopt+0x48>
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	dc2b      	bgt.n	800bb7a <tcp_parseopt+0x96>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d041      	beq.n	800bbaa <tcp_parseopt+0xc6>
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d127      	bne.n	800bb7a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800bb2a:	e037      	b.n	800bb9c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bb2c:	f7ff ffa4 	bl	800ba78 <tcp_get_next_optbyte>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d13b      	bne.n	800bbae <tcp_parseopt+0xca>
 800bb36:	4b25      	ldr	r3, [pc, #148]	; (800bbcc <tcp_parseopt+0xe8>)
 800bb38:	881b      	ldrh	r3, [r3, #0]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	4a22      	ldr	r2, [pc, #136]	; (800bbc8 <tcp_parseopt+0xe4>)
 800bb3e:	8812      	ldrh	r2, [r2, #0]
 800bb40:	4293      	cmp	r3, r2
 800bb42:	da34      	bge.n	800bbae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bb44:	f7ff ff98 	bl	800ba78 <tcp_get_next_optbyte>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	021b      	lsls	r3, r3, #8
 800bb4e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bb50:	f7ff ff92 	bl	800ba78 <tcp_get_next_optbyte>
 800bb54:	4603      	mov	r3, r0
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	89bb      	ldrh	r3, [r7, #12]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bb5e:	89bb      	ldrh	r3, [r7, #12]
 800bb60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bb64:	d804      	bhi.n	800bb70 <tcp_parseopt+0x8c>
 800bb66:	89bb      	ldrh	r3, [r7, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <tcp_parseopt+0x8c>
 800bb6c:	89ba      	ldrh	r2, [r7, #12]
 800bb6e:	e001      	b.n	800bb74 <tcp_parseopt+0x90>
 800bb70:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bb78:	e010      	b.n	800bb9c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bb7a:	f7ff ff7d 	bl	800ba78 <tcp_get_next_optbyte>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bb82:	7afb      	ldrb	r3, [r7, #11]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d914      	bls.n	800bbb2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bb88:	7afb      	ldrb	r3, [r7, #11]
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <tcp_parseopt+0xe8>)
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	4413      	add	r3, r2
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	3b02      	subs	r3, #2
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	4b0c      	ldr	r3, [pc, #48]	; (800bbcc <tcp_parseopt+0xe8>)
 800bb9a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bb9c:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <tcp_parseopt+0xe8>)
 800bb9e:	881a      	ldrh	r2, [r3, #0]
 800bba0:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <tcp_parseopt+0xe4>)
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d3b3      	bcc.n	800bb10 <tcp_parseopt+0x2c>
 800bba8:	e004      	b.n	800bbb4 <tcp_parseopt+0xd0>
          return;
 800bbaa:	bf00      	nop
 800bbac:	e002      	b.n	800bbb4 <tcp_parseopt+0xd0>
            return;
 800bbae:	bf00      	nop
 800bbb0:	e000      	b.n	800bbb4 <tcp_parseopt+0xd0>
            return;
 800bbb2:	bf00      	nop
      }
    }
  }
}
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	080198b8 	.word	0x080198b8
 800bbc0:	08019d1c 	.word	0x08019d1c
 800bbc4:	08019904 	.word	0x08019904
 800bbc8:	200072b4 	.word	0x200072b4
 800bbcc:	200072bc 	.word	0x200072bc

0800bbd0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bbd4:	4b05      	ldr	r3, [pc, #20]	; (800bbec <tcp_trigger_input_pcb_close+0x1c>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f043 0310 	orr.w	r3, r3, #16
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	4b03      	ldr	r3, [pc, #12]	; (800bbec <tcp_trigger_input_pcb_close+0x1c>)
 800bbe0:	701a      	strb	r2, [r3, #0]
}
 800bbe2:	bf00      	nop
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	200072cd 	.word	0x200072cd

0800bbf0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <tcp_route+0x28>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	7a1b      	ldrb	r3, [r3, #8]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d006      	beq.n	800bc18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	7a1b      	ldrb	r3, [r3, #8]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fb fab8 	bl	8007184 <netif_get_by_index>
 800bc14:	4603      	mov	r3, r0
 800bc16:	e003      	b.n	800bc20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f003 f92b 	bl	800ee74 <ip4_route>
 800bc1e:	4603      	mov	r3, r0
  }
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bc28:	b590      	push	{r4, r7, lr}
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	4613      	mov	r3, r2
 800bc36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d105      	bne.n	800bc4a <tcp_create_segment+0x22>
 800bc3e:	4b44      	ldr	r3, [pc, #272]	; (800bd50 <tcp_create_segment+0x128>)
 800bc40:	22a3      	movs	r2, #163	; 0xa3
 800bc42:	4944      	ldr	r1, [pc, #272]	; (800bd54 <tcp_create_segment+0x12c>)
 800bc44:	4844      	ldr	r0, [pc, #272]	; (800bd58 <tcp_create_segment+0x130>)
 800bc46:	f004 fed3 	bl	80109f0 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d105      	bne.n	800bc5c <tcp_create_segment+0x34>
 800bc50:	4b3f      	ldr	r3, [pc, #252]	; (800bd50 <tcp_create_segment+0x128>)
 800bc52:	22a4      	movs	r2, #164	; 0xa4
 800bc54:	4941      	ldr	r1, [pc, #260]	; (800bd5c <tcp_create_segment+0x134>)
 800bc56:	4840      	ldr	r0, [pc, #256]	; (800bd58 <tcp_create_segment+0x130>)
 800bc58:	f004 feca 	bl	80109f0 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bc5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	f003 0304 	and.w	r3, r3, #4
 800bc68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bc6a:	2003      	movs	r0, #3
 800bc6c:	f7fa ff8c 	bl	8006b88 <memp_malloc>
 800bc70:	6138      	str	r0, [r7, #16]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d104      	bne.n	800bc82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bc78:	68b8      	ldr	r0, [r7, #8]
 800bc7a:	f7fb fde3 	bl	8007844 <pbuf_free>
    return NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e061      	b.n	800bd46 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bc88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	891a      	ldrh	r2, [r3, #8]
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d205      	bcs.n	800bcae <tcp_create_segment+0x86>
 800bca2:	4b2b      	ldr	r3, [pc, #172]	; (800bd50 <tcp_create_segment+0x128>)
 800bca4:	22b0      	movs	r2, #176	; 0xb0
 800bca6:	492e      	ldr	r1, [pc, #184]	; (800bd60 <tcp_create_segment+0x138>)
 800bca8:	482b      	ldr	r0, [pc, #172]	; (800bd58 <tcp_create_segment+0x130>)
 800bcaa:	f004 fea1 	bl	80109f0 <printf>
  seg->len = p->tot_len - optlen;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	891a      	ldrh	r2, [r3, #8]
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bcbe:	2114      	movs	r1, #20
 800bcc0:	68b8      	ldr	r0, [r7, #8]
 800bcc2:	f7fb fd29 	bl	8007718 <pbuf_add_header>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d004      	beq.n	800bcd6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bccc:	6938      	ldr	r0, [r7, #16]
 800bcce:	f7fd f8ce 	bl	8008e6e <tcp_seg_free>
    return NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e037      	b.n	800bd46 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	8ada      	ldrh	r2, [r3, #22]
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	68dc      	ldr	r4, [r3, #12]
 800bce8:	4610      	mov	r0, r2
 800bcea:	f7fa faf7 	bl	80062dc <lwip_htons>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8b1a      	ldrh	r2, [r3, #24]
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	68dc      	ldr	r4, [r3, #12]
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	f7fa faee 	bl	80062dc <lwip_htons>
 800bd00:	4603      	mov	r3, r0
 800bd02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	68dc      	ldr	r4, [r3, #12]
 800bd08:	6838      	ldr	r0, [r7, #0]
 800bd0a:	f7fa fafc 	bl	8006306 <lwip_htonl>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	089b      	lsrs	r3, r3, #2
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	3305      	adds	r3, #5
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	031b      	lsls	r3, r3, #12
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4313      	orrs	r3, r2
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	68dc      	ldr	r4, [r3, #12]
 800bd2e:	4610      	mov	r0, r2
 800bd30:	f7fa fad4 	bl	80062dc <lwip_htons>
 800bd34:	4603      	mov	r3, r0
 800bd36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	749a      	strb	r2, [r3, #18]
 800bd40:	2200      	movs	r2, #0
 800bd42:	74da      	strb	r2, [r3, #19]
  return seg;
 800bd44:	693b      	ldr	r3, [r7, #16]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	371c      	adds	r7, #28
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd90      	pop	{r4, r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	08019d38 	.word	0x08019d38
 800bd54:	08019d6c 	.word	0x08019d6c
 800bd58:	08019d8c 	.word	0x08019d8c
 800bd5c:	08019db4 	.word	0x08019db4
 800bd60:	08019dd8 	.word	0x08019dd8

0800bd64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bd64:	b590      	push	{r4, r7, lr}
 800bd66:	b08b      	sub	sp, #44	; 0x2c
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bd70:	2300      	movs	r3, #0
 800bd72:	61fb      	str	r3, [r7, #28]
 800bd74:	2300      	movs	r3, #0
 800bd76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d106      	bne.n	800bd90 <tcp_split_unsent_seg+0x2c>
 800bd82:	4b95      	ldr	r3, [pc, #596]	; (800bfd8 <tcp_split_unsent_seg+0x274>)
 800bd84:	f240 324b 	movw	r2, #843	; 0x34b
 800bd88:	4994      	ldr	r1, [pc, #592]	; (800bfdc <tcp_split_unsent_seg+0x278>)
 800bd8a:	4895      	ldr	r0, [pc, #596]	; (800bfe0 <tcp_split_unsent_seg+0x27c>)
 800bd8c:	f004 fe30 	bl	80109f0 <printf>

  useg = pcb->unsent;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d102      	bne.n	800bda2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bda0:	e116      	b.n	800bfd0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bda2:	887b      	ldrh	r3, [r7, #2]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d109      	bne.n	800bdbc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bda8:	4b8b      	ldr	r3, [pc, #556]	; (800bfd8 <tcp_split_unsent_seg+0x274>)
 800bdaa:	f240 3253 	movw	r2, #851	; 0x353
 800bdae:	498d      	ldr	r1, [pc, #564]	; (800bfe4 <tcp_split_unsent_seg+0x280>)
 800bdb0:	488b      	ldr	r0, [pc, #556]	; (800bfe0 <tcp_split_unsent_seg+0x27c>)
 800bdb2:	f004 fe1d 	bl	80109f0 <printf>
    return ERR_VAL;
 800bdb6:	f06f 0305 	mvn.w	r3, #5
 800bdba:	e109      	b.n	800bfd0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	891b      	ldrh	r3, [r3, #8]
 800bdc0:	887a      	ldrh	r2, [r7, #2]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d301      	bcc.n	800bdca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e102      	b.n	800bfd0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdce:	887a      	ldrh	r2, [r7, #2]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d906      	bls.n	800bde2 <tcp_split_unsent_seg+0x7e>
 800bdd4:	4b80      	ldr	r3, [pc, #512]	; (800bfd8 <tcp_split_unsent_seg+0x274>)
 800bdd6:	f240 325b 	movw	r2, #859	; 0x35b
 800bdda:	4983      	ldr	r1, [pc, #524]	; (800bfe8 <tcp_split_unsent_seg+0x284>)
 800bddc:	4880      	ldr	r0, [pc, #512]	; (800bfe0 <tcp_split_unsent_seg+0x27c>)
 800bdde:	f004 fe07 	bl	80109f0 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	891b      	ldrh	r3, [r3, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d106      	bne.n	800bdf8 <tcp_split_unsent_seg+0x94>
 800bdea:	4b7b      	ldr	r3, [pc, #492]	; (800bfd8 <tcp_split_unsent_seg+0x274>)
 800bdec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bdf0:	497e      	ldr	r1, [pc, #504]	; (800bfec <tcp_split_unsent_seg+0x288>)
 800bdf2:	487b      	ldr	r0, [pc, #492]	; (800bfe0 <tcp_split_unsent_seg+0x27c>)
 800bdf4:	f004 fdfc 	bl	80109f0 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	7a9b      	ldrb	r3, [r3, #10]
 800bdfc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 0304 	and.w	r3, r3, #4
 800be08:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	891a      	ldrh	r2, [r3, #8]
 800be0e:	887b      	ldrh	r3, [r7, #2]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800be14:	7bbb      	ldrb	r3, [r7, #14]
 800be16:	b29a      	uxth	r2, r3
 800be18:	89bb      	ldrh	r3, [r7, #12]
 800be1a:	4413      	add	r3, r2
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800be22:	4619      	mov	r1, r3
 800be24:	2036      	movs	r0, #54	; 0x36
 800be26:	f7fb fa29 	bl	800727c <pbuf_alloc>
 800be2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 80b7 	beq.w	800bfa2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	891a      	ldrh	r2, [r3, #8]
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	891b      	ldrh	r3, [r3, #8]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	b29a      	uxth	r2, r3
 800be42:	887b      	ldrh	r3, [r7, #2]
 800be44:	4413      	add	r3, r2
 800be46:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	6858      	ldr	r0, [r3, #4]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	685a      	ldr	r2, [r3, #4]
 800be50:	7bbb      	ldrb	r3, [r7, #14]
 800be52:	18d1      	adds	r1, r2, r3
 800be54:	897b      	ldrh	r3, [r7, #10]
 800be56:	89ba      	ldrh	r2, [r7, #12]
 800be58:	f7fb feee 	bl	8007c38 <pbuf_copy_partial>
 800be5c:	4603      	mov	r3, r0
 800be5e:	461a      	mov	r2, r3
 800be60:	89bb      	ldrh	r3, [r7, #12]
 800be62:	4293      	cmp	r3, r2
 800be64:	f040 809f 	bne.w	800bfa6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	899b      	ldrh	r3, [r3, #12]
 800be6e:	b29b      	uxth	r3, r3
 800be70:	4618      	mov	r0, r3
 800be72:	f7fa fa33 	bl	80062dc <lwip_htons>
 800be76:	4603      	mov	r3, r0
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be7e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800be80:	2300      	movs	r3, #0
 800be82:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800be84:	7efb      	ldrb	r3, [r7, #27]
 800be86:	f003 0308 	and.w	r3, r3, #8
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800be8e:	7efb      	ldrb	r3, [r7, #27]
 800be90:	f023 0308 	bic.w	r3, r3, #8
 800be94:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800be96:	7ebb      	ldrb	r3, [r7, #26]
 800be98:	f043 0308 	orr.w	r3, r3, #8
 800be9c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800be9e:	7efb      	ldrb	r3, [r7, #27]
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d007      	beq.n	800beb8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bea8:	7efb      	ldrb	r3, [r7, #27]
 800beaa:	f023 0301 	bic.w	r3, r3, #1
 800beae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800beb0:	7ebb      	ldrb	r3, [r7, #26]
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fa fa21 	bl	8006306 <lwip_htonl>
 800bec4:	4602      	mov	r2, r0
 800bec6:	887b      	ldrh	r3, [r7, #2]
 800bec8:	18d1      	adds	r1, r2, r3
 800beca:	7eba      	ldrb	r2, [r7, #26]
 800becc:	7bfb      	ldrb	r3, [r7, #15]
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	460b      	mov	r3, r1
 800bed2:	6939      	ldr	r1, [r7, #16]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff fea7 	bl	800bc28 <tcp_create_segment>
 800beda:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d063      	beq.n	800bfaa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fb fd34 	bl	8007954 <pbuf_clen>
 800beec:	4603      	mov	r3, r0
 800beee:	461a      	mov	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bef6:	1a9b      	subs	r3, r3, r2
 800bef8:	b29a      	uxth	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	6858      	ldr	r0, [r3, #4]
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	891a      	ldrh	r2, [r3, #8]
 800bf0a:	89bb      	ldrh	r3, [r7, #12]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	4619      	mov	r1, r3
 800bf12:	f7fb fb11 	bl	8007538 <pbuf_realloc>
  useg->len -= remainder;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	891a      	ldrh	r2, [r3, #8]
 800bf1a:	89bb      	ldrh	r3, [r7, #12]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	899b      	ldrh	r3, [r3, #12]
 800bf2a:	b29c      	uxth	r4, r3
 800bf2c:	7efb      	ldrb	r3, [r7, #27]
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fa f9d3 	bl	80062dc <lwip_htons>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	4322      	orrs	r2, r4
 800bf40:	b292      	uxth	r2, r2
 800bf42:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fb fd03 	bl	8007954 <pbuf_clen>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	461a      	mov	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf58:	4413      	add	r3, r2
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fb fcf4 	bl	8007954 <pbuf_clen>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	461a      	mov	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf76:	4413      	add	r3, r2
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	69fa      	ldr	r2, [r7, #28]
 800bf8c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d103      	bne.n	800bf9e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e016      	b.n	800bfd0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bfa2:	bf00      	nop
 800bfa4:	e002      	b.n	800bfac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bfa6:	bf00      	nop
 800bfa8:	e000      	b.n	800bfac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bfaa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d006      	beq.n	800bfc0 <tcp_split_unsent_seg+0x25c>
 800bfb2:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <tcp_split_unsent_seg+0x274>)
 800bfb4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bfb8:	490d      	ldr	r1, [pc, #52]	; (800bff0 <tcp_split_unsent_seg+0x28c>)
 800bfba:	4809      	ldr	r0, [pc, #36]	; (800bfe0 <tcp_split_unsent_seg+0x27c>)
 800bfbc:	f004 fd18 	bl	80109f0 <printf>
  if (p != NULL) {
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bfc6:	6938      	ldr	r0, [r7, #16]
 800bfc8:	f7fb fc3c 	bl	8007844 <pbuf_free>
  }

  return ERR_MEM;
 800bfcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3724      	adds	r7, #36	; 0x24
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd90      	pop	{r4, r7, pc}
 800bfd8:	08019d38 	.word	0x08019d38
 800bfdc:	0801a0cc 	.word	0x0801a0cc
 800bfe0:	08019d8c 	.word	0x08019d8c
 800bfe4:	0801a0f0 	.word	0x0801a0f0
 800bfe8:	0801a114 	.word	0x0801a114
 800bfec:	0801a124 	.word	0x0801a124
 800bff0:	0801a134 	.word	0x0801a134

0800bff4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bff4:	b590      	push	{r4, r7, lr}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <tcp_send_fin+0x1c>
 800c002:	4b21      	ldr	r3, [pc, #132]	; (800c088 <tcp_send_fin+0x94>)
 800c004:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c008:	4920      	ldr	r1, [pc, #128]	; (800c08c <tcp_send_fin+0x98>)
 800c00a:	4821      	ldr	r0, [pc, #132]	; (800c090 <tcp_send_fin+0x9c>)
 800c00c:	f004 fcf0 	bl	80109f0 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d02e      	beq.n	800c076 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	e002      	b.n	800c026 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1f8      	bne.n	800c020 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	899b      	ldrh	r3, [r3, #12]
 800c034:	b29b      	uxth	r3, r3
 800c036:	4618      	mov	r0, r3
 800c038:	f7fa f950 	bl	80062dc <lwip_htons>
 800c03c:	4603      	mov	r3, r0
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	f003 0307 	and.w	r3, r3, #7
 800c044:	2b00      	cmp	r3, #0
 800c046:	d116      	bne.n	800c076 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	899b      	ldrh	r3, [r3, #12]
 800c04e:	b29c      	uxth	r4, r3
 800c050:	2001      	movs	r0, #1
 800c052:	f7fa f943 	bl	80062dc <lwip_htons>
 800c056:	4603      	mov	r3, r0
 800c058:	461a      	mov	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	4322      	orrs	r2, r4
 800c060:	b292      	uxth	r2, r2
 800c062:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	8b5b      	ldrh	r3, [r3, #26]
 800c068:	f043 0320 	orr.w	r3, r3, #32
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	e004      	b.n	800c080 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c076:	2101      	movs	r1, #1
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f80b 	bl	800c094 <tcp_enqueue_flags>
 800c07e:	4603      	mov	r3, r0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	bd90      	pop	{r4, r7, pc}
 800c088:	08019d38 	.word	0x08019d38
 800c08c:	0801a140 	.word	0x0801a140
 800c090:	08019d8c 	.word	0x08019d8c

0800c094 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08a      	sub	sp, #40	; 0x28
 800c098:	af02      	add	r7, sp, #8
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	460b      	mov	r3, r1
 800c09e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	f003 0303 	and.w	r3, r3, #3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <tcp_enqueue_flags+0x2c>
 800c0b2:	4b67      	ldr	r3, [pc, #412]	; (800c250 <tcp_enqueue_flags+0x1bc>)
 800c0b4:	f240 4211 	movw	r2, #1041	; 0x411
 800c0b8:	4966      	ldr	r1, [pc, #408]	; (800c254 <tcp_enqueue_flags+0x1c0>)
 800c0ba:	4867      	ldr	r0, [pc, #412]	; (800c258 <tcp_enqueue_flags+0x1c4>)
 800c0bc:	f004 fc98 	bl	80109f0 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d106      	bne.n	800c0d4 <tcp_enqueue_flags+0x40>
 800c0c6:	4b62      	ldr	r3, [pc, #392]	; (800c250 <tcp_enqueue_flags+0x1bc>)
 800c0c8:	f240 4213 	movw	r2, #1043	; 0x413
 800c0cc:	4963      	ldr	r1, [pc, #396]	; (800c25c <tcp_enqueue_flags+0x1c8>)
 800c0ce:	4862      	ldr	r0, [pc, #392]	; (800c258 <tcp_enqueue_flags+0x1c4>)
 800c0d0:	f004 fc8e 	bl	80109f0 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c0d4:	78fb      	ldrb	r3, [r7, #3]
 800c0d6:	f003 0302 	and.w	r3, r3, #2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d001      	beq.n	800c0e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c0e2:	7ffb      	ldrb	r3, [r7, #31]
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	f003 0304 	and.w	r3, r3, #4
 800c0ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	2036      	movs	r0, #54	; 0x36
 800c0fa:	f7fb f8bf 	bl	800727c <pbuf_alloc>
 800c0fe:	6138      	str	r0, [r7, #16]
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d109      	bne.n	800c11a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	8b5b      	ldrh	r3, [r3, #26]
 800c10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c10e:	b29a      	uxth	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c114:	f04f 33ff 	mov.w	r3, #4294967295
 800c118:	e095      	b.n	800c246 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	895a      	ldrh	r2, [r3, #10]
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
 800c120:	b29b      	uxth	r3, r3
 800c122:	429a      	cmp	r2, r3
 800c124:	d206      	bcs.n	800c134 <tcp_enqueue_flags+0xa0>
 800c126:	4b4a      	ldr	r3, [pc, #296]	; (800c250 <tcp_enqueue_flags+0x1bc>)
 800c128:	f240 4239 	movw	r2, #1081	; 0x439
 800c12c:	494c      	ldr	r1, [pc, #304]	; (800c260 <tcp_enqueue_flags+0x1cc>)
 800c12e:	484a      	ldr	r0, [pc, #296]	; (800c258 <tcp_enqueue_flags+0x1c4>)
 800c130:	f004 fc5e 	bl	80109f0 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c138:	78fa      	ldrb	r2, [r7, #3]
 800c13a:	7ffb      	ldrb	r3, [r7, #31]
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	460b      	mov	r3, r1
 800c140:	6939      	ldr	r1, [r7, #16]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff fd70 	bl	800bc28 <tcp_create_segment>
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d109      	bne.n	800c164 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	8b5b      	ldrh	r3, [r3, #26]
 800c154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c158:	b29a      	uxth	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c15e:	f04f 33ff 	mov.w	r3, #4294967295
 800c162:	e070      	b.n	800c246 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f003 0303 	and.w	r3, r3, #3
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d006      	beq.n	800c17e <tcp_enqueue_flags+0xea>
 800c170:	4b37      	ldr	r3, [pc, #220]	; (800c250 <tcp_enqueue_flags+0x1bc>)
 800c172:	f240 4242 	movw	r2, #1090	; 0x442
 800c176:	493b      	ldr	r1, [pc, #236]	; (800c264 <tcp_enqueue_flags+0x1d0>)
 800c178:	4837      	ldr	r0, [pc, #220]	; (800c258 <tcp_enqueue_flags+0x1c4>)
 800c17a:	f004 fc39 	bl	80109f0 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	891b      	ldrh	r3, [r3, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d006      	beq.n	800c194 <tcp_enqueue_flags+0x100>
 800c186:	4b32      	ldr	r3, [pc, #200]	; (800c250 <tcp_enqueue_flags+0x1bc>)
 800c188:	f240 4243 	movw	r2, #1091	; 0x443
 800c18c:	4936      	ldr	r1, [pc, #216]	; (800c268 <tcp_enqueue_flags+0x1d4>)
 800c18e:	4832      	ldr	r0, [pc, #200]	; (800c258 <tcp_enqueue_flags+0x1c4>)
 800c190:	f004 fc2e 	bl	80109f0 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d103      	bne.n	800c1a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c1a2:	e00d      	b.n	800c1c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1a8:	61bb      	str	r3, [r7, #24]
 800c1aa:	e002      	b.n	800c1b2 <tcp_enqueue_flags+0x11e>
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	61bb      	str	r3, [r7, #24]
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1f8      	bne.n	800c1ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c1c8:	78fb      	ldrb	r3, [r7, #3]
 800c1ca:	f003 0302 	and.w	r3, r3, #2
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d104      	bne.n	800c1dc <tcp_enqueue_flags+0x148>
 800c1d2:	78fb      	ldrb	r3, [r7, #3]
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d004      	beq.n	800c1e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1e0:	1c5a      	adds	r2, r3, #1
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c1e6:	78fb      	ldrb	r3, [r7, #3]
 800c1e8:	f003 0301 	and.w	r3, r3, #1
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d006      	beq.n	800c1fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	8b5b      	ldrh	r3, [r3, #26]
 800c1f4:	f043 0320 	orr.w	r3, r3, #32
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	4618      	mov	r0, r3
 800c204:	f7fb fba6 	bl	8007954 <pbuf_clen>
 800c208:	4603      	mov	r3, r0
 800c20a:	461a      	mov	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c212:	4413      	add	r3, r2
 800c214:	b29a      	uxth	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00e      	beq.n	800c244 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10a      	bne.n	800c244 <tcp_enqueue_flags+0x1b0>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c232:	2b00      	cmp	r3, #0
 800c234:	d106      	bne.n	800c244 <tcp_enqueue_flags+0x1b0>
 800c236:	4b06      	ldr	r3, [pc, #24]	; (800c250 <tcp_enqueue_flags+0x1bc>)
 800c238:	f240 4265 	movw	r2, #1125	; 0x465
 800c23c:	490b      	ldr	r1, [pc, #44]	; (800c26c <tcp_enqueue_flags+0x1d8>)
 800c23e:	4806      	ldr	r0, [pc, #24]	; (800c258 <tcp_enqueue_flags+0x1c4>)
 800c240:	f004 fbd6 	bl	80109f0 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	08019d38 	.word	0x08019d38
 800c254:	0801a15c 	.word	0x0801a15c
 800c258:	08019d8c 	.word	0x08019d8c
 800c25c:	0801a1b4 	.word	0x0801a1b4
 800c260:	0801a1d4 	.word	0x0801a1d4
 800c264:	0801a210 	.word	0x0801a210
 800c268:	0801a228 	.word	0x0801a228
 800c26c:	0801a254 	.word	0x0801a254

0800c270 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c270:	b5b0      	push	{r4, r5, r7, lr}
 800c272:	b08a      	sub	sp, #40	; 0x28
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d106      	bne.n	800c28c <tcp_output+0x1c>
 800c27e:	4b8a      	ldr	r3, [pc, #552]	; (800c4a8 <tcp_output+0x238>)
 800c280:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c284:	4989      	ldr	r1, [pc, #548]	; (800c4ac <tcp_output+0x23c>)
 800c286:	488a      	ldr	r0, [pc, #552]	; (800c4b0 <tcp_output+0x240>)
 800c288:	f004 fbb2 	bl	80109f0 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7d1b      	ldrb	r3, [r3, #20]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d106      	bne.n	800c2a2 <tcp_output+0x32>
 800c294:	4b84      	ldr	r3, [pc, #528]	; (800c4a8 <tcp_output+0x238>)
 800c296:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c29a:	4986      	ldr	r1, [pc, #536]	; (800c4b4 <tcp_output+0x244>)
 800c29c:	4884      	ldr	r0, [pc, #528]	; (800c4b0 <tcp_output+0x240>)
 800c29e:	f004 fba7 	bl	80109f0 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c2a2:	4b85      	ldr	r3, [pc, #532]	; (800c4b8 <tcp_output+0x248>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d101      	bne.n	800c2b0 <tcp_output+0x40>
    return ERR_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e1ce      	b.n	800c64e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	bf28      	it	cs
 800c2c0:	4613      	movcs	r3, r2
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10b      	bne.n	800c2ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8b5b      	ldrh	r3, [r3, #26]
 800c2d6:	f003 0302 	and.w	r3, r3, #2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 81aa 	beq.w	800c634 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fdcb 	bl	800ce7c <tcp_send_empty_ack>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	e1b1      	b.n	800c64e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fc7c 	bl	800bbf0 <tcp_route>
 800c2f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <tcp_output+0x96>
    return ERR_RTE;
 800c300:	f06f 0303 	mvn.w	r3, #3
 800c304:	e1a3      	b.n	800c64e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d003      	beq.n	800c314 <tcp_output+0xa4>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d111      	bne.n	800c338 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <tcp_output+0xb0>
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	3304      	adds	r3, #4
 800c31e:	e000      	b.n	800c322 <tcp_output+0xb2>
 800c320:	2300      	movs	r3, #0
 800c322:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d102      	bne.n	800c330 <tcp_output+0xc0>
      return ERR_RTE;
 800c32a:	f06f 0303 	mvn.w	r3, #3
 800c32e:	e18e      	b.n	800c64e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	4618      	mov	r0, r3
 800c340:	f7f9 ffe1 	bl	8006306 <lwip_htonl>
 800c344:	4602      	mov	r2, r0
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c34e:	8912      	ldrh	r2, [r2, #8]
 800c350:	4413      	add	r3, r2
 800c352:	69ba      	ldr	r2, [r7, #24]
 800c354:	429a      	cmp	r2, r3
 800c356:	d227      	bcs.n	800c3a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c35e:	461a      	mov	r2, r3
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	4293      	cmp	r3, r2
 800c364:	d114      	bne.n	800c390 <tcp_output+0x120>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d110      	bne.n	800c390 <tcp_output+0x120>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10b      	bne.n	800c390 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8b5b      	ldrh	r3, [r3, #26]
 800c394:	f003 0302 	and.w	r3, r3, #2
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 814d 	beq.w	800c638 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fd6c 	bl	800ce7c <tcp_send_empty_ack>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	e152      	b.n	800c64e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 811c 	beq.w	800c5f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c3be:	e002      	b.n	800c3c6 <tcp_output+0x156>
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	623b      	str	r3, [r7, #32]
 800c3c6:	6a3b      	ldr	r3, [r7, #32]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f8      	bne.n	800c3c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c3ce:	e112      	b.n	800c5f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	899b      	ldrh	r3, [r3, #12]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f9 ff7f 	bl	80062dc <lwip_htons>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	f003 0304 	and.w	r3, r3, #4
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d006      	beq.n	800c3f8 <tcp_output+0x188>
 800c3ea:	4b2f      	ldr	r3, [pc, #188]	; (800c4a8 <tcp_output+0x238>)
 800c3ec:	f240 5236 	movw	r2, #1334	; 0x536
 800c3f0:	4932      	ldr	r1, [pc, #200]	; (800c4bc <tcp_output+0x24c>)
 800c3f2:	482f      	ldr	r0, [pc, #188]	; (800c4b0 <tcp_output+0x240>)
 800c3f4:	f004 fafc 	bl	80109f0 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01f      	beq.n	800c440 <tcp_output+0x1d0>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	8b5b      	ldrh	r3, [r3, #26]
 800c404:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d119      	bne.n	800c440 <tcp_output+0x1d0>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00b      	beq.n	800c42c <tcp_output+0x1bc>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d110      	bne.n	800c440 <tcp_output+0x1d0>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c422:	891a      	ldrh	r2, [r3, #8]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c428:	429a      	cmp	r2, r3
 800c42a:	d209      	bcs.n	800c440 <tcp_output+0x1d0>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c432:	2b00      	cmp	r3, #0
 800c434:	d004      	beq.n	800c440 <tcp_output+0x1d0>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	d901      	bls.n	800c444 <tcp_output+0x1d4>
 800c440:	2301      	movs	r3, #1
 800c442:	e000      	b.n	800c446 <tcp_output+0x1d6>
 800c444:	2300      	movs	r3, #0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	8b5b      	ldrh	r3, [r3, #26]
 800c44e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 80e4 	beq.w	800c620 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	7d1b      	ldrb	r3, [r3, #20]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d00d      	beq.n	800c47c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	899b      	ldrh	r3, [r3, #12]
 800c466:	b29c      	uxth	r4, r3
 800c468:	2010      	movs	r0, #16
 800c46a:	f7f9 ff37 	bl	80062dc <lwip_htons>
 800c46e:	4603      	mov	r3, r0
 800c470:	461a      	mov	r2, r3
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	4322      	orrs	r2, r4
 800c478:	b292      	uxth	r2, r2
 800c47a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c482:	f000 f909 	bl	800c698 <tcp_output_segment>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d016      	beq.n	800c4c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	8b5b      	ldrh	r3, [r3, #26]
 800c496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	835a      	strh	r2, [r3, #26]
      return err;
 800c4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a4:	e0d3      	b.n	800c64e <tcp_output+0x3de>
 800c4a6:	bf00      	nop
 800c4a8:	08019d38 	.word	0x08019d38
 800c4ac:	0801a27c 	.word	0x0801a27c
 800c4b0:	08019d8c 	.word	0x08019d8c
 800c4b4:	0801a294 	.word	0x0801a294
 800c4b8:	200072d4 	.word	0x200072d4
 800c4bc:	0801a2bc 	.word	0x0801a2bc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	7d1b      	ldrb	r3, [r3, #20]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d006      	beq.n	800c4de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	8b5b      	ldrh	r3, [r3, #26]
 800c4d4:	f023 0303 	bic.w	r3, r3, #3
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7f9 ff0e 	bl	8006306 <lwip_htonl>
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	891b      	ldrh	r3, [r3, #8]
 800c4f0:	461d      	mov	r5, r3
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	899b      	ldrh	r3, [r3, #12]
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7f9 feee 	bl	80062dc <lwip_htons>
 800c500:	4603      	mov	r3, r0
 800c502:	b2db      	uxtb	r3, r3
 800c504:	f003 0303 	and.w	r3, r3, #3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <tcp_output+0x2a0>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e000      	b.n	800c512 <tcp_output+0x2a2>
 800c510:	2300      	movs	r3, #0
 800c512:	442b      	add	r3, r5
 800c514:	4423      	add	r3, r4
 800c516:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b00      	cmp	r3, #0
 800c522:	da02      	bge.n	800c52a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	891b      	ldrh	r3, [r3, #8]
 800c52e:	461c      	mov	r4, r3
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	899b      	ldrh	r3, [r3, #12]
 800c536:	b29b      	uxth	r3, r3
 800c538:	4618      	mov	r0, r3
 800c53a:	f7f9 fecf 	bl	80062dc <lwip_htons>
 800c53e:	4603      	mov	r3, r0
 800c540:	b2db      	uxtb	r3, r3
 800c542:	f003 0303 	and.w	r3, r3, #3
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <tcp_output+0x2de>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e000      	b.n	800c550 <tcp_output+0x2e0>
 800c54e:	2300      	movs	r3, #0
 800c550:	4423      	add	r3, r4
 800c552:	2b00      	cmp	r3, #0
 800c554:	d049      	beq.n	800c5ea <tcp_output+0x37a>
      seg->next = NULL;
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c560:	2b00      	cmp	r3, #0
 800c562:	d105      	bne.n	800c570 <tcp_output+0x300>
        pcb->unacked = seg;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c568:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	623b      	str	r3, [r7, #32]
 800c56e:	e03f      	b.n	800c5f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	f7f9 fec5 	bl	8006306 <lwip_htonl>
 800c57c:	4604      	mov	r4, r0
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	4618      	mov	r0, r3
 800c586:	f7f9 febe 	bl	8006306 <lwip_htonl>
 800c58a:	4603      	mov	r3, r0
 800c58c:	1ae3      	subs	r3, r4, r3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	da24      	bge.n	800c5dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	3370      	adds	r3, #112	; 0x70
 800c596:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c598:	e002      	b.n	800c5a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d011      	beq.n	800c5cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7f9 fea8 	bl	8006306 <lwip_htonl>
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7f9 fea1 	bl	8006306 <lwip_htonl>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dbe6      	blt.n	800c59a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	e009      	b.n	800c5f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	623b      	str	r3, [r7, #32]
 800c5e8:	e002      	b.n	800c5f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c5ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5ec:	f7fc fc3f 	bl	8008e6e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d012      	beq.n	800c622 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	4618      	mov	r0, r3
 800c604:	f7f9 fe7f 	bl	8006306 <lwip_htonl>
 800c608:	4602      	mov	r2, r0
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c612:	8912      	ldrh	r2, [r2, #8]
 800c614:	4413      	add	r3, r2
  while (seg != NULL &&
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	429a      	cmp	r2, r3
 800c61a:	f4bf aed9 	bcs.w	800c3d0 <tcp_output+0x160>
 800c61e:	e000      	b.n	800c622 <tcp_output+0x3b2>
      break;
 800c620:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c626:	2b00      	cmp	r3, #0
 800c628:	d108      	bne.n	800c63c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c632:	e004      	b.n	800c63e <tcp_output+0x3ce>
    goto output_done;
 800c634:	bf00      	nop
 800c636:	e002      	b.n	800c63e <tcp_output+0x3ce>
    goto output_done;
 800c638:	bf00      	nop
 800c63a:	e000      	b.n	800c63e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c63c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	8b5b      	ldrh	r3, [r3, #26]
 800c642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c646:	b29a      	uxth	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3728      	adds	r7, #40	; 0x28
 800c652:	46bd      	mov	sp, r7
 800c654:	bdb0      	pop	{r4, r5, r7, pc}
 800c656:	bf00      	nop

0800c658 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d106      	bne.n	800c674 <tcp_output_segment_busy+0x1c>
 800c666:	4b09      	ldr	r3, [pc, #36]	; (800c68c <tcp_output_segment_busy+0x34>)
 800c668:	f240 529a 	movw	r2, #1434	; 0x59a
 800c66c:	4908      	ldr	r1, [pc, #32]	; (800c690 <tcp_output_segment_busy+0x38>)
 800c66e:	4809      	ldr	r0, [pc, #36]	; (800c694 <tcp_output_segment_busy+0x3c>)
 800c670:	f004 f9be 	bl	80109f0 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	7b9b      	ldrb	r3, [r3, #14]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d001      	beq.n	800c682 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c67e:	2301      	movs	r3, #1
 800c680:	e000      	b.n	800c684 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	08019d38 	.word	0x08019d38
 800c690:	0801a2d4 	.word	0x0801a2d4
 800c694:	08019d8c 	.word	0x08019d8c

0800c698 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c698:	b5b0      	push	{r4, r5, r7, lr}
 800c69a:	b08c      	sub	sp, #48	; 0x30
 800c69c:	af04      	add	r7, sp, #16
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <tcp_output_segment+0x20>
 800c6aa:	4b63      	ldr	r3, [pc, #396]	; (800c838 <tcp_output_segment+0x1a0>)
 800c6ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c6b0:	4962      	ldr	r1, [pc, #392]	; (800c83c <tcp_output_segment+0x1a4>)
 800c6b2:	4863      	ldr	r0, [pc, #396]	; (800c840 <tcp_output_segment+0x1a8>)
 800c6b4:	f004 f99c 	bl	80109f0 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d106      	bne.n	800c6cc <tcp_output_segment+0x34>
 800c6be:	4b5e      	ldr	r3, [pc, #376]	; (800c838 <tcp_output_segment+0x1a0>)
 800c6c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c6c4:	495f      	ldr	r1, [pc, #380]	; (800c844 <tcp_output_segment+0x1ac>)
 800c6c6:	485e      	ldr	r0, [pc, #376]	; (800c840 <tcp_output_segment+0x1a8>)
 800c6c8:	f004 f992 	bl	80109f0 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <tcp_output_segment+0x48>
 800c6d2:	4b59      	ldr	r3, [pc, #356]	; (800c838 <tcp_output_segment+0x1a0>)
 800c6d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c6d8:	495b      	ldr	r1, [pc, #364]	; (800c848 <tcp_output_segment+0x1b0>)
 800c6da:	4859      	ldr	r0, [pc, #356]	; (800c840 <tcp_output_segment+0x1a8>)
 800c6dc:	f004 f988 	bl	80109f0 <printf>

  if (tcp_output_segment_busy(seg)) {
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7ff ffb9 	bl	800c658 <tcp_output_segment_busy>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e09f      	b.n	800c830 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	68dc      	ldr	r4, [r3, #12]
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	f7f9 fe04 	bl	8006306 <lwip_htonl>
 800c6fe:	4603      	mov	r3, r0
 800c700:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	68dc      	ldr	r4, [r3, #12]
 800c70a:	4610      	mov	r0, r2
 800c70c:	f7f9 fde6 	bl	80062dc <lwip_htons>
 800c710:	4603      	mov	r3, r0
 800c712:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c71c:	441a      	add	r2, r3
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	3314      	adds	r3, #20
 800c728:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	7a9b      	ldrb	r3, [r3, #10]
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	2b00      	cmp	r3, #0
 800c734:	d015      	beq.n	800c762 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	3304      	adds	r3, #4
 800c73a:	461a      	mov	r2, r3
 800c73c:	6879      	ldr	r1, [r7, #4]
 800c73e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c742:	f7fc fe8b 	bl	800945c <tcp_eff_send_mss_netif>
 800c746:	4603      	mov	r3, r0
 800c748:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c74a:	8b7b      	ldrh	r3, [r7, #26]
 800c74c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c750:	4618      	mov	r0, r3
 800c752:	f7f9 fdd8 	bl	8006306 <lwip_htonl>
 800c756:	4602      	mov	r2, r0
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	3304      	adds	r3, #4
 800c760:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c768:	2b00      	cmp	r3, #0
 800c76a:	da02      	bge.n	800c772 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2200      	movs	r2, #0
 800c770:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10c      	bne.n	800c794 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c77a:	4b34      	ldr	r3, [pc, #208]	; (800c84c <tcp_output_segment+0x1b4>)
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7f9 fdbc 	bl	8006306 <lwip_htonl>
 800c78e:	4602      	mov	r2, r0
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	68da      	ldr	r2, [r3, #12]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	8959      	ldrh	r1, [r3, #10]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	8b3a      	ldrh	r2, [r7, #24]
 800c7ae:	1a8a      	subs	r2, r1, r2
 800c7b0:	b292      	uxth	r2, r2
 800c7b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	8919      	ldrh	r1, [r3, #8]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	8b3a      	ldrh	r2, [r7, #24]
 800c7c0:	1a8a      	subs	r2, r1, r2
 800c7c2:	b292      	uxth	r2, r2
 800c7c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	68d2      	ldr	r2, [r2, #12]
 800c7ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	741a      	strb	r2, [r3, #16]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	f103 0214 	add.w	r2, r3, #20
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	7a9b      	ldrb	r3, [r3, #10]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	f003 0304 	and.w	r3, r3, #4
 800c7ee:	4413      	add	r3, r2
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d006      	beq.n	800c804 <tcp_output_segment+0x16c>
 800c7f6:	4b10      	ldr	r3, [pc, #64]	; (800c838 <tcp_output_segment+0x1a0>)
 800c7f8:	f240 621c 	movw	r2, #1564	; 0x61c
 800c7fc:	4914      	ldr	r1, [pc, #80]	; (800c850 <tcp_output_segment+0x1b8>)
 800c7fe:	4810      	ldr	r0, [pc, #64]	; (800c840 <tcp_output_segment+0x1a8>)
 800c800:	f004 f8f6 	bl	80109f0 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6858      	ldr	r0, [r3, #4]
 800c808:	68b9      	ldr	r1, [r7, #8]
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	1d1c      	adds	r4, r3, #4
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	7add      	ldrb	r5, [r3, #11]
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	7a9b      	ldrb	r3, [r3, #10]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	9202      	str	r2, [sp, #8]
 800c81a:	2206      	movs	r2, #6
 800c81c:	9201      	str	r2, [sp, #4]
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	462b      	mov	r3, r5
 800c822:	4622      	mov	r2, r4
 800c824:	f002 fce4 	bl	800f1f0 <ip4_output_if>
 800c828:	4603      	mov	r3, r0
 800c82a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c82c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3720      	adds	r7, #32
 800c834:	46bd      	mov	sp, r7
 800c836:	bdb0      	pop	{r4, r5, r7, pc}
 800c838:	08019d38 	.word	0x08019d38
 800c83c:	0801a2fc 	.word	0x0801a2fc
 800c840:	08019d8c 	.word	0x08019d8c
 800c844:	0801a31c 	.word	0x0801a31c
 800c848:	0801a33c 	.word	0x0801a33c
 800c84c:	20007288 	.word	0x20007288
 800c850:	0801a360 	.word	0x0801a360

0800c854 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c854:	b5b0      	push	{r4, r5, r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <tcp_rexmit_rto_prepare+0x1c>
 800c862:	4b31      	ldr	r3, [pc, #196]	; (800c928 <tcp_rexmit_rto_prepare+0xd4>)
 800c864:	f240 6263 	movw	r2, #1635	; 0x663
 800c868:	4930      	ldr	r1, [pc, #192]	; (800c92c <tcp_rexmit_rto_prepare+0xd8>)
 800c86a:	4831      	ldr	r0, [pc, #196]	; (800c930 <tcp_rexmit_rto_prepare+0xdc>)
 800c86c:	f004 f8c0 	bl	80109f0 <printf>

  if (pcb->unacked == NULL) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c874:	2b00      	cmp	r3, #0
 800c876:	d102      	bne.n	800c87e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c878:	f06f 0305 	mvn.w	r3, #5
 800c87c:	e050      	b.n	800c920 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	e00b      	b.n	800c89e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f7ff fee6 	bl	800c658 <tcp_output_segment_busy>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d002      	beq.n	800c898 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c892:	f06f 0305 	mvn.w	r3, #5
 800c896:	e043      	b.n	800c920 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1ef      	bne.n	800c886 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f7ff fed6 	bl	800c658 <tcp_output_segment_busy>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d002      	beq.n	800c8b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c8b2:	f06f 0305 	mvn.w	r3, #5
 800c8b6:	e033      	b.n	800c920 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	8b5b      	ldrh	r3, [r3, #26]
 800c8d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7f9 fd0f 	bl	8006306 <lwip_htonl>
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	891b      	ldrh	r3, [r3, #8]
 800c8ee:	461d      	mov	r5, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	899b      	ldrh	r3, [r3, #12]
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7f9 fcef 	bl	80062dc <lwip_htons>
 800c8fe:	4603      	mov	r3, r0
 800c900:	b2db      	uxtb	r3, r3
 800c902:	f003 0303 	and.w	r3, r3, #3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <tcp_rexmit_rto_prepare+0xba>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e000      	b.n	800c910 <tcp_rexmit_rto_prepare+0xbc>
 800c90e:	2300      	movs	r3, #0
 800c910:	442b      	add	r3, r5
 800c912:	18e2      	adds	r2, r4, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bdb0      	pop	{r4, r5, r7, pc}
 800c928:	08019d38 	.word	0x08019d38
 800c92c:	0801a374 	.word	0x0801a374
 800c930:	08019d8c 	.word	0x08019d8c

0800c934 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d106      	bne.n	800c950 <tcp_rexmit_rto_commit+0x1c>
 800c942:	4b0d      	ldr	r3, [pc, #52]	; (800c978 <tcp_rexmit_rto_commit+0x44>)
 800c944:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c948:	490c      	ldr	r1, [pc, #48]	; (800c97c <tcp_rexmit_rto_commit+0x48>)
 800c94a:	480d      	ldr	r0, [pc, #52]	; (800c980 <tcp_rexmit_rto_commit+0x4c>)
 800c94c:	f004 f850 	bl	80109f0 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c956:	2bff      	cmp	r3, #255	; 0xff
 800c958:	d007      	beq.n	800c96a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c960:	3301      	adds	r3, #1
 800c962:	b2da      	uxtb	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff fc80 	bl	800c270 <tcp_output>
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	08019d38 	.word	0x08019d38
 800c97c:	0801a398 	.word	0x0801a398
 800c980:	08019d8c 	.word	0x08019d8c

0800c984 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <tcp_rexmit_rto+0x1c>
 800c992:	4b0a      	ldr	r3, [pc, #40]	; (800c9bc <tcp_rexmit_rto+0x38>)
 800c994:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c998:	4909      	ldr	r1, [pc, #36]	; (800c9c0 <tcp_rexmit_rto+0x3c>)
 800c99a:	480a      	ldr	r0, [pc, #40]	; (800c9c4 <tcp_rexmit_rto+0x40>)
 800c99c:	f004 f828 	bl	80109f0 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff ff57 	bl	800c854 <tcp_rexmit_rto_prepare>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d102      	bne.n	800c9b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff ffc1 	bl	800c934 <tcp_rexmit_rto_commit>
  }
}
 800c9b2:	bf00      	nop
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	08019d38 	.word	0x08019d38
 800c9c0:	0801a3bc 	.word	0x0801a3bc
 800c9c4:	08019d8c 	.word	0x08019d8c

0800c9c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c9c8:	b590      	push	{r4, r7, lr}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d106      	bne.n	800c9e4 <tcp_rexmit+0x1c>
 800c9d6:	4b2f      	ldr	r3, [pc, #188]	; (800ca94 <tcp_rexmit+0xcc>)
 800c9d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c9dc:	492e      	ldr	r1, [pc, #184]	; (800ca98 <tcp_rexmit+0xd0>)
 800c9de:	482f      	ldr	r0, [pc, #188]	; (800ca9c <tcp_rexmit+0xd4>)
 800c9e0:	f004 f806 	bl	80109f0 <printf>

  if (pcb->unacked == NULL) {
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d102      	bne.n	800c9f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c9ec:	f06f 0305 	mvn.w	r3, #5
 800c9f0:	e04c      	b.n	800ca8c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c9f8:	68b8      	ldr	r0, [r7, #8]
 800c9fa:	f7ff fe2d 	bl	800c658 <tcp_output_segment_busy>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ca04:	f06f 0305 	mvn.w	r3, #5
 800ca08:	e040      	b.n	800ca8c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	336c      	adds	r3, #108	; 0x6c
 800ca16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ca18:	e002      	b.n	800ca20 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d011      	beq.n	800ca4c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7f9 fc68 	bl	8006306 <lwip_htonl>
 800ca36:	4604      	mov	r4, r0
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7f9 fc61 	bl	8006306 <lwip_htonl>
 800ca44:	4603      	mov	r3, r0
 800ca46:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	dbe6      	blt.n	800ca1a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca70:	2bff      	cmp	r3, #255	; 0xff
 800ca72:	d007      	beq.n	800ca84 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ca8a:	2300      	movs	r3, #0
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd90      	pop	{r4, r7, pc}
 800ca94:	08019d38 	.word	0x08019d38
 800ca98:	0801a3d8 	.word	0x0801a3d8
 800ca9c:	08019d8c 	.word	0x08019d8c

0800caa0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d106      	bne.n	800cabc <tcp_rexmit_fast+0x1c>
 800caae:	4b2a      	ldr	r3, [pc, #168]	; (800cb58 <tcp_rexmit_fast+0xb8>)
 800cab0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cab4:	4929      	ldr	r1, [pc, #164]	; (800cb5c <tcp_rexmit_fast+0xbc>)
 800cab6:	482a      	ldr	r0, [pc, #168]	; (800cb60 <tcp_rexmit_fast+0xc0>)
 800cab8:	f003 ff9a 	bl	80109f0 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d045      	beq.n	800cb50 <tcp_rexmit_fast+0xb0>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	8b5b      	ldrh	r3, [r3, #26]
 800cac8:	f003 0304 	and.w	r3, r3, #4
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d13f      	bne.n	800cb50 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff ff79 	bl	800c9c8 <tcp_rexmit>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d139      	bne.n	800cb50 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cae8:	4293      	cmp	r3, r2
 800caea:	bf28      	it	cs
 800caec:	4613      	movcs	r3, r2
 800caee:	b29b      	uxth	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	da00      	bge.n	800caf6 <tcp_rexmit_fast+0x56>
 800caf4:	3301      	adds	r3, #1
 800caf6:	105b      	asrs	r3, r3, #1
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cb06:	461a      	mov	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d206      	bcs.n	800cb20 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb16:	005b      	lsls	r3, r3, #1
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	0049      	lsls	r1, r1, #1
 800cb2e:	440b      	add	r3, r1
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	4413      	add	r3, r2
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	8b5b      	ldrh	r3, [r3, #26]
 800cb40:	f043 0304 	orr.w	r3, r3, #4
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	08019d38 	.word	0x08019d38
 800cb5c:	0801a3f0 	.word	0x0801a3f0
 800cb60:	08019d8c 	.word	0x08019d8c

0800cb64 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	607b      	str	r3, [r7, #4]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	817b      	strh	r3, [r7, #10]
 800cb72:	4613      	mov	r3, r2
 800cb74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cb76:	897a      	ldrh	r2, [r7, #10]
 800cb78:	893b      	ldrh	r3, [r7, #8]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	3314      	adds	r3, #20
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb86:	4619      	mov	r1, r3
 800cb88:	2022      	movs	r0, #34	; 0x22
 800cb8a:	f7fa fb77 	bl	800727c <pbuf_alloc>
 800cb8e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d04d      	beq.n	800cc32 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cb96:	897b      	ldrh	r3, [r7, #10]
 800cb98:	3313      	adds	r3, #19
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	8952      	ldrh	r2, [r2, #10]
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	db06      	blt.n	800cbb0 <tcp_output_alloc_header_common+0x4c>
 800cba2:	4b26      	ldr	r3, [pc, #152]	; (800cc3c <tcp_output_alloc_header_common+0xd8>)
 800cba4:	f240 7223 	movw	r2, #1827	; 0x723
 800cba8:	4925      	ldr	r1, [pc, #148]	; (800cc40 <tcp_output_alloc_header_common+0xdc>)
 800cbaa:	4826      	ldr	r0, [pc, #152]	; (800cc44 <tcp_output_alloc_header_common+0xe0>)
 800cbac:	f003 ff20 	bl	80109f0 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cbb6:	8c3b      	ldrh	r3, [r7, #32]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7f9 fb8f 	bl	80062dc <lwip_htons>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cbc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7f9 fb87 	bl	80062dc <lwip_htons>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7f9 fb92 	bl	8006306 <lwip_htonl>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cbe8:	897b      	ldrh	r3, [r7, #10]
 800cbea:	089b      	lsrs	r3, r3, #2
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	3305      	adds	r3, #5
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	031b      	lsls	r3, r3, #12
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7f9 fb6b 	bl	80062dc <lwip_htons>
 800cc06:	4603      	mov	r3, r0
 800cc08:	461a      	mov	r2, r3
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cc0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f9 fb63 	bl	80062dc <lwip_htons>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461a      	mov	r2, r3
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	2200      	movs	r2, #0
 800cc22:	741a      	strb	r2, [r3, #16]
 800cc24:	2200      	movs	r2, #0
 800cc26:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	749a      	strb	r2, [r3, #18]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cc32:	697b      	ldr	r3, [r7, #20]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	08019d38 	.word	0x08019d38
 800cc40:	0801a410 	.word	0x0801a410
 800cc44:	08019d8c 	.word	0x08019d8c

0800cc48 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cc48:	b5b0      	push	{r4, r5, r7, lr}
 800cc4a:	b08a      	sub	sp, #40	; 0x28
 800cc4c:	af04      	add	r7, sp, #16
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	607b      	str	r3, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	817b      	strh	r3, [r7, #10]
 800cc56:	4613      	mov	r3, r2
 800cc58:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d106      	bne.n	800cc6e <tcp_output_alloc_header+0x26>
 800cc60:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <tcp_output_alloc_header+0x70>)
 800cc62:	f240 7242 	movw	r2, #1858	; 0x742
 800cc66:	4915      	ldr	r1, [pc, #84]	; (800ccbc <tcp_output_alloc_header+0x74>)
 800cc68:	4815      	ldr	r0, [pc, #84]	; (800ccc0 <tcp_output_alloc_header+0x78>)
 800cc6a:	f003 fec1 	bl	80109f0 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	8adb      	ldrh	r3, [r3, #22]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	8b12      	ldrh	r2, [r2, #24]
 800cc7a:	68f9      	ldr	r1, [r7, #12]
 800cc7c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cc7e:	893d      	ldrh	r5, [r7, #8]
 800cc80:	897c      	ldrh	r4, [r7, #10]
 800cc82:	9103      	str	r1, [sp, #12]
 800cc84:	2110      	movs	r1, #16
 800cc86:	9102      	str	r1, [sp, #8]
 800cc88:	9201      	str	r2, [sp, #4]
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	462a      	mov	r2, r5
 800cc90:	4621      	mov	r1, r4
 800cc92:	f7ff ff67 	bl	800cb64 <tcp_output_alloc_header_common>
 800cc96:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d006      	beq.n	800ccac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cca6:	441a      	add	r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ccac:	697b      	ldr	r3, [r7, #20]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3718      	adds	r7, #24
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	08019d38 	.word	0x08019d38
 800ccbc:	0801a440 	.word	0x0801a440
 800ccc0:	08019d8c 	.word	0x08019d8c

0800ccc4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	4611      	mov	r1, r2
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	71fb      	strb	r3, [r7, #7]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <tcp_output_fill_options+0x2e>
 800cce4:	4b13      	ldr	r3, [pc, #76]	; (800cd34 <tcp_output_fill_options+0x70>)
 800cce6:	f240 7256 	movw	r2, #1878	; 0x756
 800ccea:	4913      	ldr	r1, [pc, #76]	; (800cd38 <tcp_output_fill_options+0x74>)
 800ccec:	4813      	ldr	r0, [pc, #76]	; (800cd3c <tcp_output_fill_options+0x78>)
 800ccee:	f003 fe7f 	bl	80109f0 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	f103 0214 	add.w	r2, r3, #20
 800cd04:	8bfb      	ldrh	r3, [r7, #30]
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4619      	mov	r1, r3
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	f003 0304 	and.w	r3, r3, #4
 800cd12:	440b      	add	r3, r1
 800cd14:	4413      	add	r3, r2
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d006      	beq.n	800cd2a <tcp_output_fill_options+0x66>
 800cd1c:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <tcp_output_fill_options+0x70>)
 800cd1e:	f240 7275 	movw	r2, #1909	; 0x775
 800cd22:	4907      	ldr	r1, [pc, #28]	; (800cd40 <tcp_output_fill_options+0x7c>)
 800cd24:	4805      	ldr	r0, [pc, #20]	; (800cd3c <tcp_output_fill_options+0x78>)
 800cd26:	f003 fe63 	bl	80109f0 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cd2a:	bf00      	nop
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	08019d38 	.word	0x08019d38
 800cd38:	0801a468 	.word	0x0801a468
 800cd3c:	08019d8c 	.word	0x08019d8c
 800cd40:	0801a360 	.word	0x0801a360

0800cd44 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08a      	sub	sp, #40	; 0x28
 800cd48:	af04      	add	r7, sp, #16
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
 800cd50:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d106      	bne.n	800cd66 <tcp_output_control_segment+0x22>
 800cd58:	4b1c      	ldr	r3, [pc, #112]	; (800cdcc <tcp_output_control_segment+0x88>)
 800cd5a:	f240 7287 	movw	r2, #1927	; 0x787
 800cd5e:	491c      	ldr	r1, [pc, #112]	; (800cdd0 <tcp_output_control_segment+0x8c>)
 800cd60:	481c      	ldr	r0, [pc, #112]	; (800cdd4 <tcp_output_control_segment+0x90>)
 800cd62:	f003 fe45 	bl	80109f0 <printf>

  netif = tcp_route(pcb, src, dst);
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7fe ff40 	bl	800bbf0 <tcp_route>
 800cd70:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d102      	bne.n	800cd7e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cd78:	23fc      	movs	r3, #252	; 0xfc
 800cd7a:	75fb      	strb	r3, [r7, #23]
 800cd7c:	e01c      	b.n	800cdb8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d006      	beq.n	800cd92 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	7adb      	ldrb	r3, [r3, #11]
 800cd88:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	7a9b      	ldrb	r3, [r3, #10]
 800cd8e:	757b      	strb	r3, [r7, #21]
 800cd90:	e003      	b.n	800cd9a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cd92:	23ff      	movs	r3, #255	; 0xff
 800cd94:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cd9a:	7dba      	ldrb	r2, [r7, #22]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	9302      	str	r3, [sp, #8]
 800cda0:	2306      	movs	r3, #6
 800cda2:	9301      	str	r3, [sp, #4]
 800cda4:	7d7b      	ldrb	r3, [r7, #21]
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	68b8      	ldr	r0, [r7, #8]
 800cdb0:	f002 fa1e 	bl	800f1f0 <ip4_output_if>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cdb8:	68b8      	ldr	r0, [r7, #8]
 800cdba:	f7fa fd43 	bl	8007844 <pbuf_free>
  return err;
 800cdbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	08019d38 	.word	0x08019d38
 800cdd0:	0801a490 	.word	0x0801a490
 800cdd4:	08019d8c 	.word	0x08019d8c

0800cdd8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cdd8:	b590      	push	{r4, r7, lr}
 800cdda:	b08b      	sub	sp, #44	; 0x2c
 800cddc:	af04      	add	r7, sp, #16
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d106      	bne.n	800cdfa <tcp_rst+0x22>
 800cdec:	4b1f      	ldr	r3, [pc, #124]	; (800ce6c <tcp_rst+0x94>)
 800cdee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cdf2:	491f      	ldr	r1, [pc, #124]	; (800ce70 <tcp_rst+0x98>)
 800cdf4:	481f      	ldr	r0, [pc, #124]	; (800ce74 <tcp_rst+0x9c>)
 800cdf6:	f003 fdfb 	bl	80109f0 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d106      	bne.n	800ce0e <tcp_rst+0x36>
 800ce00:	4b1a      	ldr	r3, [pc, #104]	; (800ce6c <tcp_rst+0x94>)
 800ce02:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ce06:	491c      	ldr	r1, [pc, #112]	; (800ce78 <tcp_rst+0xa0>)
 800ce08:	481a      	ldr	r0, [pc, #104]	; (800ce74 <tcp_rst+0x9c>)
 800ce0a:	f003 fdf1 	bl	80109f0 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ce0e:	2300      	movs	r3, #0
 800ce10:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ce12:	f246 0308 	movw	r3, #24584	; 0x6008
 800ce16:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ce18:	7dfb      	ldrb	r3, [r7, #23]
 800ce1a:	b29c      	uxth	r4, r3
 800ce1c:	68b8      	ldr	r0, [r7, #8]
 800ce1e:	f7f9 fa72 	bl	8006306 <lwip_htonl>
 800ce22:	4602      	mov	r2, r0
 800ce24:	8abb      	ldrh	r3, [r7, #20]
 800ce26:	9303      	str	r3, [sp, #12]
 800ce28:	2314      	movs	r3, #20
 800ce2a:	9302      	str	r3, [sp, #8]
 800ce2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	4613      	mov	r3, r2
 800ce36:	2200      	movs	r2, #0
 800ce38:	4621      	mov	r1, r4
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff fe92 	bl	800cb64 <tcp_output_alloc_header_common>
 800ce40:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00c      	beq.n	800ce62 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ce48:	7dfb      	ldrb	r3, [r7, #23]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	6939      	ldr	r1, [r7, #16]
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f7ff ff38 	bl	800ccc4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	6939      	ldr	r1, [r7, #16]
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f7ff ff72 	bl	800cd44 <tcp_output_control_segment>
 800ce60:	e000      	b.n	800ce64 <tcp_rst+0x8c>
    return;
 800ce62:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ce64:	371c      	adds	r7, #28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd90      	pop	{r4, r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	08019d38 	.word	0x08019d38
 800ce70:	0801a4bc 	.word	0x0801a4bc
 800ce74:	08019d8c 	.word	0x08019d8c
 800ce78:	0801a4d8 	.word	0x0801a4d8

0800ce7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ce7c:	b590      	push	{r4, r7, lr}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d106      	bne.n	800cea0 <tcp_send_empty_ack+0x24>
 800ce92:	4b28      	ldr	r3, [pc, #160]	; (800cf34 <tcp_send_empty_ack+0xb8>)
 800ce94:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ce98:	4927      	ldr	r1, [pc, #156]	; (800cf38 <tcp_send_empty_ack+0xbc>)
 800ce9a:	4828      	ldr	r0, [pc, #160]	; (800cf3c <tcp_send_empty_ack+0xc0>)
 800ce9c:	f003 fda8 	bl	80109f0 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	f003 0304 	and.w	r3, r3, #4
 800ceaa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ceac:	7d7b      	ldrb	r3, [r7, #21]
 800ceae:	b29c      	uxth	r4, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7f9 fa26 	bl	8006306 <lwip_htonl>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2200      	movs	r2, #0
 800cebe:	4621      	mov	r1, r4
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff fec1 	bl	800cc48 <tcp_output_alloc_header>
 800cec6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d109      	bne.n	800cee2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	8b5b      	ldrh	r3, [r3, #26]
 800ced2:	f043 0303 	orr.w	r3, r3, #3
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cedc:	f06f 0301 	mvn.w	r3, #1
 800cee0:	e023      	b.n	800cf2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cee2:	7dbb      	ldrb	r3, [r7, #22]
 800cee4:	7dfa      	ldrb	r2, [r7, #23]
 800cee6:	6939      	ldr	r1, [r7, #16]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff feeb 	bl	800ccc4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	3304      	adds	r3, #4
 800cef4:	6939      	ldr	r1, [r7, #16]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff ff24 	bl	800cd44 <tcp_output_control_segment>
 800cefc:	4603      	mov	r3, r0
 800cefe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cf00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d007      	beq.n	800cf18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	8b5b      	ldrh	r3, [r3, #26]
 800cf0c:	f043 0303 	orr.w	r3, r3, #3
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	835a      	strh	r2, [r3, #26]
 800cf16:	e006      	b.n	800cf26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	8b5b      	ldrh	r3, [r3, #26]
 800cf1c:	f023 0303 	bic.w	r3, r3, #3
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cf26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd90      	pop	{r4, r7, pc}
 800cf32:	bf00      	nop
 800cf34:	08019d38 	.word	0x08019d38
 800cf38:	0801a4f4 	.word	0x0801a4f4
 800cf3c:	08019d8c 	.word	0x08019d8c

0800cf40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cf40:	b590      	push	{r4, r7, lr}
 800cf42:	b087      	sub	sp, #28
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cf48:	2300      	movs	r3, #0
 800cf4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <tcp_keepalive+0x20>
 800cf52:	4b18      	ldr	r3, [pc, #96]	; (800cfb4 <tcp_keepalive+0x74>)
 800cf54:	f640 0224 	movw	r2, #2084	; 0x824
 800cf58:	4917      	ldr	r1, [pc, #92]	; (800cfb8 <tcp_keepalive+0x78>)
 800cf5a:	4818      	ldr	r0, [pc, #96]	; (800cfbc <tcp_keepalive+0x7c>)
 800cf5c:	f003 fd48 	bl	80109f0 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cf60:	7dfb      	ldrb	r3, [r7, #23]
 800cf62:	b29c      	uxth	r4, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7f9 f9cb 	bl	8006306 <lwip_htonl>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2200      	movs	r2, #0
 800cf74:	4621      	mov	r1, r4
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff fe66 	bl	800cc48 <tcp_output_alloc_header>
 800cf7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d102      	bne.n	800cf8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cf84:	f04f 33ff 	mov.w	r3, #4294967295
 800cf88:	e010      	b.n	800cfac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	6939      	ldr	r1, [r7, #16]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7ff fe97 	bl	800ccc4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	6939      	ldr	r1, [r7, #16]
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7ff fed0 	bl	800cd44 <tcp_output_control_segment>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cfa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	371c      	adds	r7, #28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd90      	pop	{r4, r7, pc}
 800cfb4:	08019d38 	.word	0x08019d38
 800cfb8:	0801a514 	.word	0x0801a514
 800cfbc:	08019d8c 	.word	0x08019d8c

0800cfc0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cfc0:	b590      	push	{r4, r7, lr}
 800cfc2:	b08b      	sub	sp, #44	; 0x2c
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d106      	bne.n	800cfe2 <tcp_zero_window_probe+0x22>
 800cfd4:	4b4c      	ldr	r3, [pc, #304]	; (800d108 <tcp_zero_window_probe+0x148>)
 800cfd6:	f640 024f 	movw	r2, #2127	; 0x84f
 800cfda:	494c      	ldr	r1, [pc, #304]	; (800d10c <tcp_zero_window_probe+0x14c>)
 800cfdc:	484c      	ldr	r0, [pc, #304]	; (800d110 <tcp_zero_window_probe+0x150>)
 800cfde:	f003 fd07 	bl	80109f0 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	e086      	b.n	800d100 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cff8:	2bff      	cmp	r3, #255	; 0xff
 800cffa:	d007      	beq.n	800d00c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d002:	3301      	adds	r3, #1
 800d004:	b2da      	uxtb	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	899b      	ldrh	r3, [r3, #12]
 800d012:	b29b      	uxth	r3, r3
 800d014:	4618      	mov	r0, r3
 800d016:	f7f9 f961 	bl	80062dc <lwip_htons>
 800d01a:	4603      	mov	r3, r0
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	d005      	beq.n	800d032 <tcp_zero_window_probe+0x72>
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	891b      	ldrh	r3, [r3, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d101      	bne.n	800d032 <tcp_zero_window_probe+0x72>
 800d02e:	2301      	movs	r3, #1
 800d030:	e000      	b.n	800d034 <tcp_zero_window_probe+0x74>
 800d032:	2300      	movs	r3, #0
 800d034:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d036:	7ffb      	ldrb	r3, [r7, #31]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bf0c      	ite	eq
 800d03c:	2301      	moveq	r3, #1
 800d03e:	2300      	movne	r3, #0
 800d040:	b2db      	uxtb	r3, r3
 800d042:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d048:	b299      	uxth	r1, r3
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	8bba      	ldrh	r2, [r7, #28]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7ff fdf8 	bl	800cc48 <tcp_output_alloc_header>
 800d058:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d060:	f04f 33ff 	mov.w	r3, #4294967295
 800d064:	e04c      	b.n	800d100 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d06c:	7ffb      	ldrb	r3, [r7, #31]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d011      	beq.n	800d096 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	899b      	ldrh	r3, [r3, #12]
 800d076:	b29b      	uxth	r3, r3
 800d078:	b21b      	sxth	r3, r3
 800d07a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d07e:	b21c      	sxth	r4, r3
 800d080:	2011      	movs	r0, #17
 800d082:	f7f9 f92b 	bl	80062dc <lwip_htons>
 800d086:	4603      	mov	r3, r0
 800d088:	b21b      	sxth	r3, r3
 800d08a:	4323      	orrs	r3, r4
 800d08c:	b21b      	sxth	r3, r3
 800d08e:	b29a      	uxth	r2, r3
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	819a      	strh	r2, [r3, #12]
 800d094:	e010      	b.n	800d0b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	3314      	adds	r3, #20
 800d09c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	6858      	ldr	r0, [r3, #4]
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	891a      	ldrh	r2, [r3, #8]
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	891b      	ldrh	r3, [r3, #8]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	6939      	ldr	r1, [r7, #16]
 800d0b4:	f7fa fdc0 	bl	8007c38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f9 f921 	bl	8006306 <lwip_htonl>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	da02      	bge.n	800d0dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	69b9      	ldr	r1, [r7, #24]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7ff fded 	bl	800ccc4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	69b9      	ldr	r1, [r7, #24]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fe26 	bl	800cd44 <tcp_output_control_segment>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d0fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d100:	4618      	mov	r0, r3
 800d102:	372c      	adds	r7, #44	; 0x2c
 800d104:	46bd      	mov	sp, r7
 800d106:	bd90      	pop	{r4, r7, pc}
 800d108:	08019d38 	.word	0x08019d38
 800d10c:	0801a530 	.word	0x0801a530
 800d110:	08019d8c 	.word	0x08019d8c

0800d114 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d11c:	f7fa ff0c 	bl	8007f38 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d120:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <tcpip_tcp_timer+0x38>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d103      	bne.n	800d130 <tcpip_tcp_timer+0x1c>
 800d128:	4b09      	ldr	r3, [pc, #36]	; (800d150 <tcpip_tcp_timer+0x3c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d005      	beq.n	800d13c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d130:	2200      	movs	r2, #0
 800d132:	4908      	ldr	r1, [pc, #32]	; (800d154 <tcpip_tcp_timer+0x40>)
 800d134:	20fa      	movs	r0, #250	; 0xfa
 800d136:	f000 f8f3 	bl	800d320 <sys_timeout>
 800d13a:	e003      	b.n	800d144 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d13c:	4b06      	ldr	r3, [pc, #24]	; (800d158 <tcpip_tcp_timer+0x44>)
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]
  }
}
 800d142:	bf00      	nop
 800d144:	bf00      	nop
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	20007294 	.word	0x20007294
 800d150:	20007298 	.word	0x20007298
 800d154:	0800d115 	.word	0x0800d115
 800d158:	200072e0 	.word	0x200072e0

0800d15c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d160:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <tcp_timer_needed+0x30>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10f      	bne.n	800d188 <tcp_timer_needed+0x2c>
 800d168:	4b09      	ldr	r3, [pc, #36]	; (800d190 <tcp_timer_needed+0x34>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d103      	bne.n	800d178 <tcp_timer_needed+0x1c>
 800d170:	4b08      	ldr	r3, [pc, #32]	; (800d194 <tcp_timer_needed+0x38>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d007      	beq.n	800d188 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d178:	4b04      	ldr	r3, [pc, #16]	; (800d18c <tcp_timer_needed+0x30>)
 800d17a:	2201      	movs	r2, #1
 800d17c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d17e:	2200      	movs	r2, #0
 800d180:	4905      	ldr	r1, [pc, #20]	; (800d198 <tcp_timer_needed+0x3c>)
 800d182:	20fa      	movs	r0, #250	; 0xfa
 800d184:	f000 f8cc 	bl	800d320 <sys_timeout>
  }
}
 800d188:	bf00      	nop
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	200072e0 	.word	0x200072e0
 800d190:	20007294 	.word	0x20007294
 800d194:	20007298 	.word	0x20007298
 800d198:	0800d115 	.word	0x0800d115

0800d19c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d1a8:	2006      	movs	r0, #6
 800d1aa:	f7f9 fced 	bl	8006b88 <memp_malloc>
 800d1ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d109      	bne.n	800d1ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d151      	bne.n	800d260 <sys_timeout_abs+0xc4>
 800d1bc:	4b2a      	ldr	r3, [pc, #168]	; (800d268 <sys_timeout_abs+0xcc>)
 800d1be:	22be      	movs	r2, #190	; 0xbe
 800d1c0:	492a      	ldr	r1, [pc, #168]	; (800d26c <sys_timeout_abs+0xd0>)
 800d1c2:	482b      	ldr	r0, [pc, #172]	; (800d270 <sys_timeout_abs+0xd4>)
 800d1c4:	f003 fc14 	bl	80109f0 <printf>
    return;
 800d1c8:	e04a      	b.n	800d260 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d1e2:	4b24      	ldr	r3, [pc, #144]	; (800d274 <sys_timeout_abs+0xd8>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d103      	bne.n	800d1f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d1ea:	4a22      	ldr	r2, [pc, #136]	; (800d274 <sys_timeout_abs+0xd8>)
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	6013      	str	r3, [r2, #0]
    return;
 800d1f0:	e037      	b.n	800d262 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	4b1f      	ldr	r3, [pc, #124]	; (800d274 <sys_timeout_abs+0xd8>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	0fdb      	lsrs	r3, r3, #31
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	b2db      	uxtb	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d007      	beq.n	800d21a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d20a:	4b1a      	ldr	r3, [pc, #104]	; (800d274 <sys_timeout_abs+0xd8>)
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d212:	4a18      	ldr	r2, [pc, #96]	; (800d274 <sys_timeout_abs+0xd8>)
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	e023      	b.n	800d262 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d21a:	4b16      	ldr	r3, [pc, #88]	; (800d274 <sys_timeout_abs+0xd8>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	617b      	str	r3, [r7, #20]
 800d220:	e01a      	b.n	800d258 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00b      	beq.n	800d242 <sys_timeout_abs+0xa6>
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	685a      	ldr	r2, [r3, #4]
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	0fdb      	lsrs	r3, r3, #31
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d007      	beq.n	800d252 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	601a      	str	r2, [r3, #0]
        break;
 800d250:	e007      	b.n	800d262 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	617b      	str	r3, [r7, #20]
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1e1      	bne.n	800d222 <sys_timeout_abs+0x86>
 800d25e:	e000      	b.n	800d262 <sys_timeout_abs+0xc6>
    return;
 800d260:	bf00      	nop
      }
    }
  }
}
 800d262:	3718      	adds	r7, #24
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	0801a554 	.word	0x0801a554
 800d26c:	0801a588 	.word	0x0801a588
 800d270:	0801a5c8 	.word	0x0801a5c8
 800d274:	200072d8 	.word	0x200072d8

0800d278 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4798      	blx	r3

  now = sys_now();
 800d28a:	f7f8 ff99 	bl	80061c0 <sys_now>
 800d28e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	4b0f      	ldr	r3, [pc, #60]	; (800d2d4 <lwip_cyclic_timer+0x5c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4413      	add	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	0fdb      	lsrs	r3, r3, #31
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d009      	beq.n	800d2c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	4907      	ldr	r1, [pc, #28]	; (800d2d8 <lwip_cyclic_timer+0x60>)
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff ff6e 	bl	800d19c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d2c0:	e004      	b.n	800d2cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	4904      	ldr	r1, [pc, #16]	; (800d2d8 <lwip_cyclic_timer+0x60>)
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f7ff ff68 	bl	800d19c <sys_timeout_abs>
}
 800d2cc:	bf00      	nop
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	200072dc 	.word	0x200072dc
 800d2d8:	0800d279 	.word	0x0800d279

0800d2dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	607b      	str	r3, [r7, #4]
 800d2e6:	e00e      	b.n	800d306 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d2e8:	4a0b      	ldr	r2, [pc, #44]	; (800d318 <sys_timeouts_init+0x3c>)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	00db      	lsls	r3, r3, #3
 800d2f4:	4a08      	ldr	r2, [pc, #32]	; (800d318 <sys_timeouts_init+0x3c>)
 800d2f6:	4413      	add	r3, r2
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	4908      	ldr	r1, [pc, #32]	; (800d31c <sys_timeouts_init+0x40>)
 800d2fc:	f000 f810 	bl	800d320 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3301      	adds	r3, #1
 800d304:	607b      	str	r3, [r7, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d9ed      	bls.n	800d2e8 <sys_timeouts_init+0xc>
  }
}
 800d30c:	bf00      	nop
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	0801b134 	.word	0x0801b134
 800d31c:	0800d279 	.word	0x0800d279

0800d320 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d332:	d306      	bcc.n	800d342 <sys_timeout+0x22>
 800d334:	4b0a      	ldr	r3, [pc, #40]	; (800d360 <sys_timeout+0x40>)
 800d336:	f240 1229 	movw	r2, #297	; 0x129
 800d33a:	490a      	ldr	r1, [pc, #40]	; (800d364 <sys_timeout+0x44>)
 800d33c:	480a      	ldr	r0, [pc, #40]	; (800d368 <sys_timeout+0x48>)
 800d33e:	f003 fb57 	bl	80109f0 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d342:	f7f8 ff3d 	bl	80061c0 <sys_now>
 800d346:	4602      	mov	r2, r0
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	4413      	add	r3, r2
 800d34c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	6978      	ldr	r0, [r7, #20]
 800d354:	f7ff ff22 	bl	800d19c <sys_timeout_abs>
#endif
}
 800d358:	bf00      	nop
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	0801a554 	.word	0x0801a554
 800d364:	0801a5f0 	.word	0x0801a5f0
 800d368:	0801a5c8 	.word	0x0801a5c8

0800d36c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d372:	f7f8 ff25 	bl	80061c0 <sys_now>
 800d376:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d378:	4b1a      	ldr	r3, [pc, #104]	; (800d3e4 <sys_check_timeouts+0x78>)
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <sys_check_timeouts+0x1a>
 800d382:	f7f9 ff25 	bl	80071d0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d386:	4b18      	ldr	r3, [pc, #96]	; (800d3e8 <sys_check_timeouts+0x7c>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d022      	beq.n	800d3d8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	0fdb      	lsrs	r3, r3, #31
 800d39c:	f003 0301 	and.w	r3, r3, #1
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d11a      	bne.n	800d3dc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a0f      	ldr	r2, [pc, #60]	; (800d3e8 <sys_check_timeouts+0x7c>)
 800d3ac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	4a0b      	ldr	r2, [pc, #44]	; (800d3ec <sys_check_timeouts+0x80>)
 800d3c0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d3c2:	68b9      	ldr	r1, [r7, #8]
 800d3c4:	2006      	movs	r0, #6
 800d3c6:	f7f9 fc2b 	bl	8006c20 <memp_free>
    if (handler != NULL) {
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d0d3      	beq.n	800d378 <sys_check_timeouts+0xc>
      handler(arg);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6838      	ldr	r0, [r7, #0]
 800d3d4:	4798      	blx	r3
  do {
 800d3d6:	e7cf      	b.n	800d378 <sys_check_timeouts+0xc>
      return;
 800d3d8:	bf00      	nop
 800d3da:	e000      	b.n	800d3de <sys_check_timeouts+0x72>
      return;
 800d3dc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	20007285 	.word	0x20007285
 800d3e8:	200072d8 	.word	0x200072d8
 800d3ec:	200072dc 	.word	0x200072dc

0800d3f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d3f4:	f003 fb0e 	bl	8010a14 <rand>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d400:	b29b      	uxth	r3, r3
 800d402:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d406:	b29a      	uxth	r2, r3
 800d408:	4b01      	ldr	r3, [pc, #4]	; (800d410 <udp_init+0x20>)
 800d40a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d40c:	bf00      	nop
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20000018 	.word	0x20000018

0800d414 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d41e:	4b17      	ldr	r3, [pc, #92]	; (800d47c <udp_new_port+0x68>)
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	1c5a      	adds	r2, r3, #1
 800d424:	b291      	uxth	r1, r2
 800d426:	4a15      	ldr	r2, [pc, #84]	; (800d47c <udp_new_port+0x68>)
 800d428:	8011      	strh	r1, [r2, #0]
 800d42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d42e:	4293      	cmp	r3, r2
 800d430:	d103      	bne.n	800d43a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d432:	4b12      	ldr	r3, [pc, #72]	; (800d47c <udp_new_port+0x68>)
 800d434:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d438:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d43a:	4b11      	ldr	r3, [pc, #68]	; (800d480 <udp_new_port+0x6c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	603b      	str	r3, [r7, #0]
 800d440:	e011      	b.n	800d466 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	8a5a      	ldrh	r2, [r3, #18]
 800d446:	4b0d      	ldr	r3, [pc, #52]	; (800d47c <udp_new_port+0x68>)
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d108      	bne.n	800d460 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d44e:	88fb      	ldrh	r3, [r7, #6]
 800d450:	3301      	adds	r3, #1
 800d452:	80fb      	strh	r3, [r7, #6]
 800d454:	88fb      	ldrh	r3, [r7, #6]
 800d456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d45a:	d3e0      	bcc.n	800d41e <udp_new_port+0xa>
        return 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	e007      	b.n	800d470 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	603b      	str	r3, [r7, #0]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1ea      	bne.n	800d442 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d46c:	4b03      	ldr	r3, [pc, #12]	; (800d47c <udp_new_port+0x68>)
 800d46e:	881b      	ldrh	r3, [r3, #0]
}
 800d470:	4618      	mov	r0, r3
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	20000018 	.word	0x20000018
 800d480:	200072e4 	.word	0x200072e4

0800d484 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4613      	mov	r3, r2
 800d490:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d105      	bne.n	800d4a4 <udp_input_local_match+0x20>
 800d498:	4b27      	ldr	r3, [pc, #156]	; (800d538 <udp_input_local_match+0xb4>)
 800d49a:	2287      	movs	r2, #135	; 0x87
 800d49c:	4927      	ldr	r1, [pc, #156]	; (800d53c <udp_input_local_match+0xb8>)
 800d49e:	4828      	ldr	r0, [pc, #160]	; (800d540 <udp_input_local_match+0xbc>)
 800d4a0:	f003 faa6 	bl	80109f0 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d105      	bne.n	800d4b6 <udp_input_local_match+0x32>
 800d4aa:	4b23      	ldr	r3, [pc, #140]	; (800d538 <udp_input_local_match+0xb4>)
 800d4ac:	2288      	movs	r2, #136	; 0x88
 800d4ae:	4925      	ldr	r1, [pc, #148]	; (800d544 <udp_input_local_match+0xc0>)
 800d4b0:	4823      	ldr	r0, [pc, #140]	; (800d540 <udp_input_local_match+0xbc>)
 800d4b2:	f003 fa9d 	bl	80109f0 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	7a1b      	ldrb	r3, [r3, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00b      	beq.n	800d4d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	7a1a      	ldrb	r2, [r3, #8]
 800d4c2:	4b21      	ldr	r3, [pc, #132]	; (800d548 <udp_input_local_match+0xc4>)
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d001      	beq.n	800d4d6 <udp_input_local_match+0x52>
    return 0;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	e02b      	b.n	800d52e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d018      	beq.n	800d50e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d013      	beq.n	800d50a <udp_input_local_match+0x86>
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00f      	beq.n	800d50a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d4ea:	4b17      	ldr	r3, [pc, #92]	; (800d548 <udp_input_local_match+0xc4>)
 800d4ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d00a      	beq.n	800d50a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b13      	ldr	r3, [pc, #76]	; (800d548 <udp_input_local_match+0xc4>)
 800d4fa:	695b      	ldr	r3, [r3, #20]
 800d4fc:	405a      	eors	r2, r3
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	3308      	adds	r3, #8
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d506:	2b00      	cmp	r3, #0
 800d508:	d110      	bne.n	800d52c <udp_input_local_match+0xa8>
          return 1;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e00f      	b.n	800d52e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d009      	beq.n	800d528 <udp_input_local_match+0xa4>
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d005      	beq.n	800d528 <udp_input_local_match+0xa4>
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	4b09      	ldr	r3, [pc, #36]	; (800d548 <udp_input_local_match+0xc4>)
 800d522:	695b      	ldr	r3, [r3, #20]
 800d524:	429a      	cmp	r2, r3
 800d526:	d101      	bne.n	800d52c <udp_input_local_match+0xa8>
        return 1;
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	0801a63c 	.word	0x0801a63c
 800d53c:	0801a66c 	.word	0x0801a66c
 800d540:	0801a690 	.word	0x0801a690
 800d544:	0801a6b8 	.word	0x0801a6b8
 800d548:	20003d18 	.word	0x20003d18

0800d54c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d54c:	b590      	push	{r4, r7, lr}
 800d54e:	b08d      	sub	sp, #52	; 0x34
 800d550:	af02      	add	r7, sp, #8
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d105      	bne.n	800d56c <udp_input+0x20>
 800d560:	4b7c      	ldr	r3, [pc, #496]	; (800d754 <udp_input+0x208>)
 800d562:	22cf      	movs	r2, #207	; 0xcf
 800d564:	497c      	ldr	r1, [pc, #496]	; (800d758 <udp_input+0x20c>)
 800d566:	487d      	ldr	r0, [pc, #500]	; (800d75c <udp_input+0x210>)
 800d568:	f003 fa42 	bl	80109f0 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d105      	bne.n	800d57e <udp_input+0x32>
 800d572:	4b78      	ldr	r3, [pc, #480]	; (800d754 <udp_input+0x208>)
 800d574:	22d0      	movs	r2, #208	; 0xd0
 800d576:	497a      	ldr	r1, [pc, #488]	; (800d760 <udp_input+0x214>)
 800d578:	4878      	ldr	r0, [pc, #480]	; (800d75c <udp_input+0x210>)
 800d57a:	f003 fa39 	bl	80109f0 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	895b      	ldrh	r3, [r3, #10]
 800d582:	2b07      	cmp	r3, #7
 800d584:	d803      	bhi.n	800d58e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7fa f95c 	bl	8007844 <pbuf_free>
    goto end;
 800d58c:	e0de      	b.n	800d74c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d594:	4b73      	ldr	r3, [pc, #460]	; (800d764 <udp_input+0x218>)
 800d596:	695b      	ldr	r3, [r3, #20]
 800d598:	4a72      	ldr	r2, [pc, #456]	; (800d764 <udp_input+0x218>)
 800d59a:	6812      	ldr	r2, [r2, #0]
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f001 fefe 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7f8 fe94 	bl	80062dc <lwip_htons>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	885b      	ldrh	r3, [r3, #2]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7f8 fe8c 	bl	80062dc <lwip_htons>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5d4:	4b64      	ldr	r3, [pc, #400]	; (800d768 <udp_input+0x21c>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d5da:	e054      	b.n	800d686 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	8a5b      	ldrh	r3, [r3, #18]
 800d5e0:	89fa      	ldrh	r2, [r7, #14]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d14a      	bne.n	800d67c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d5e6:	7cfb      	ldrb	r3, [r7, #19]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5ee:	f7ff ff49 	bl	800d484 <udp_input_local_match>
 800d5f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d041      	beq.n	800d67c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fa:	7c1b      	ldrb	r3, [r3, #16]
 800d5fc:	f003 0304 	and.w	r3, r3, #4
 800d600:	2b00      	cmp	r3, #0
 800d602:	d11d      	bne.n	800d640 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d102      	bne.n	800d610 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	61fb      	str	r3, [r7, #28]
 800d60e:	e017      	b.n	800d640 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d610:	7cfb      	ldrb	r3, [r7, #19]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d014      	beq.n	800d640 <udp_input+0xf4>
 800d616:	4b53      	ldr	r3, [pc, #332]	; (800d764 <udp_input+0x218>)
 800d618:	695b      	ldr	r3, [r3, #20]
 800d61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61e:	d10f      	bne.n	800d640 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	3304      	adds	r3, #4
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d008      	beq.n	800d640 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	3304      	adds	r3, #4
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d101      	bne.n	800d640 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	8a9b      	ldrh	r3, [r3, #20]
 800d644:	8a3a      	ldrh	r2, [r7, #16]
 800d646:	429a      	cmp	r2, r3
 800d648:	d118      	bne.n	800d67c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d005      	beq.n	800d65e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	685a      	ldr	r2, [r3, #4]
 800d656:	4b43      	ldr	r3, [pc, #268]	; (800d764 <udp_input+0x218>)
 800d658:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d10e      	bne.n	800d67c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d014      	beq.n	800d68e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	68da      	ldr	r2, [r3, #12]
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d66c:	4b3e      	ldr	r3, [pc, #248]	; (800d768 <udp_input+0x21c>)
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d674:	4a3c      	ldr	r2, [pc, #240]	; (800d768 <udp_input+0x21c>)
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d67a:	e008      	b.n	800d68e <udp_input+0x142>
      }
    }

    prev = pcb;
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	627b      	str	r3, [r7, #36]	; 0x24
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1a7      	bne.n	800d5dc <udp_input+0x90>
 800d68c:	e000      	b.n	800d690 <udp_input+0x144>
        break;
 800d68e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <udp_input+0x14e>
    pcb = uncon_pcb;
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <udp_input+0x15a>
    for_us = 1;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	76fb      	strb	r3, [r7, #27]
 800d6a4:	e00a      	b.n	800d6bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	4b2d      	ldr	r3, [pc, #180]	; (800d764 <udp_input+0x218>)
 800d6ae:	695b      	ldr	r3, [r3, #20]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	bf0c      	ite	eq
 800d6b4:	2301      	moveq	r3, #1
 800d6b6:	2300      	movne	r3, #0
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d6bc:	7efb      	ldrb	r3, [r7, #27]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d041      	beq.n	800d746 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d6c2:	2108      	movs	r1, #8
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7fa f837 	bl	8007738 <pbuf_remove_header>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00a      	beq.n	800d6e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d6d0:	4b20      	ldr	r3, [pc, #128]	; (800d754 <udp_input+0x208>)
 800d6d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d6d6:	4925      	ldr	r1, [pc, #148]	; (800d76c <udp_input+0x220>)
 800d6d8:	4820      	ldr	r0, [pc, #128]	; (800d75c <udp_input+0x210>)
 800d6da:	f003 f989 	bl	80109f0 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7fa f8b0 	bl	8007844 <pbuf_free>
      goto end;
 800d6e4:	e032      	b.n	800d74c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d012      	beq.n	800d712 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00a      	beq.n	800d70a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	699c      	ldr	r4, [r3, #24]
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	69d8      	ldr	r0, [r3, #28]
 800d6fc:	8a3b      	ldrh	r3, [r7, #16]
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	4b1b      	ldr	r3, [pc, #108]	; (800d770 <udp_input+0x224>)
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d706:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d708:	e021      	b.n	800d74e <udp_input+0x202>
        pbuf_free(p);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7fa f89a 	bl	8007844 <pbuf_free>
        goto end;
 800d710:	e01c      	b.n	800d74c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d712:	7cfb      	ldrb	r3, [r7, #19]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d112      	bne.n	800d73e <udp_input+0x1f2>
 800d718:	4b12      	ldr	r3, [pc, #72]	; (800d764 <udp_input+0x218>)
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d720:	2be0      	cmp	r3, #224	; 0xe0
 800d722:	d00c      	beq.n	800d73e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d724:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <udp_input+0x218>)
 800d726:	899b      	ldrh	r3, [r3, #12]
 800d728:	3308      	adds	r3, #8
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	b21b      	sxth	r3, r3
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7fa f874 	bl	800781e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d736:	2103      	movs	r1, #3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f001 fb11 	bl	800ed60 <icmp_dest_unreach>
      pbuf_free(p);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7fa f880 	bl	8007844 <pbuf_free>
  return;
 800d744:	e003      	b.n	800d74e <udp_input+0x202>
    pbuf_free(p);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fa f87c 	bl	8007844 <pbuf_free>
  return;
 800d74c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d74e:	372c      	adds	r7, #44	; 0x2c
 800d750:	46bd      	mov	sp, r7
 800d752:	bd90      	pop	{r4, r7, pc}
 800d754:	0801a63c 	.word	0x0801a63c
 800d758:	0801a6e0 	.word	0x0801a6e0
 800d75c:	0801a690 	.word	0x0801a690
 800d760:	0801a6f8 	.word	0x0801a6f8
 800d764:	20003d18 	.word	0x20003d18
 800d768:	200072e4 	.word	0x200072e4
 800d76c:	0801a714 	.word	0x0801a714
 800d770:	20003d28 	.word	0x20003d28

0800d774 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af02      	add	r7, sp, #8
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
 800d780:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d109      	bne.n	800d79c <udp_sendto+0x28>
 800d788:	4b23      	ldr	r3, [pc, #140]	; (800d818 <udp_sendto+0xa4>)
 800d78a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d78e:	4923      	ldr	r1, [pc, #140]	; (800d81c <udp_sendto+0xa8>)
 800d790:	4823      	ldr	r0, [pc, #140]	; (800d820 <udp_sendto+0xac>)
 800d792:	f003 f92d 	bl	80109f0 <printf>
 800d796:	f06f 030f 	mvn.w	r3, #15
 800d79a:	e038      	b.n	800d80e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d109      	bne.n	800d7b6 <udp_sendto+0x42>
 800d7a2:	4b1d      	ldr	r3, [pc, #116]	; (800d818 <udp_sendto+0xa4>)
 800d7a4:	f240 2219 	movw	r2, #537	; 0x219
 800d7a8:	491e      	ldr	r1, [pc, #120]	; (800d824 <udp_sendto+0xb0>)
 800d7aa:	481d      	ldr	r0, [pc, #116]	; (800d820 <udp_sendto+0xac>)
 800d7ac:	f003 f920 	bl	80109f0 <printf>
 800d7b0:	f06f 030f 	mvn.w	r3, #15
 800d7b4:	e02b      	b.n	800d80e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d109      	bne.n	800d7d0 <udp_sendto+0x5c>
 800d7bc:	4b16      	ldr	r3, [pc, #88]	; (800d818 <udp_sendto+0xa4>)
 800d7be:	f240 221a 	movw	r2, #538	; 0x21a
 800d7c2:	4919      	ldr	r1, [pc, #100]	; (800d828 <udp_sendto+0xb4>)
 800d7c4:	4816      	ldr	r0, [pc, #88]	; (800d820 <udp_sendto+0xac>)
 800d7c6:	f003 f913 	bl	80109f0 <printf>
 800d7ca:	f06f 030f 	mvn.w	r3, #15
 800d7ce:	e01e      	b.n	800d80e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	7a1b      	ldrb	r3, [r3, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d006      	beq.n	800d7e6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	7a1b      	ldrb	r3, [r3, #8]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7f9 fcd1 	bl	8007184 <netif_get_by_index>
 800d7e2:	6178      	str	r0, [r7, #20]
 800d7e4:	e003      	b.n	800d7ee <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f001 fb44 	bl	800ee74 <ip4_route>
 800d7ec:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800d7f4:	f06f 0303 	mvn.w	r3, #3
 800d7f8:	e009      	b.n	800d80e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d7fa:	887a      	ldrh	r2, [r7, #2]
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	4613      	mov	r3, r2
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	68b9      	ldr	r1, [r7, #8]
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 f810 	bl	800d82c <udp_sendto_if>
 800d80c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	0801a63c 	.word	0x0801a63c
 800d81c:	0801a760 	.word	0x0801a760
 800d820:	0801a690 	.word	0x0801a690
 800d824:	0801a778 	.word	0x0801a778
 800d828:	0801a794 	.word	0x0801a794

0800d82c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b088      	sub	sp, #32
 800d830:	af02      	add	r7, sp, #8
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d109      	bne.n	800d854 <udp_sendto_if+0x28>
 800d840:	4b2e      	ldr	r3, [pc, #184]	; (800d8fc <udp_sendto_if+0xd0>)
 800d842:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d846:	492e      	ldr	r1, [pc, #184]	; (800d900 <udp_sendto_if+0xd4>)
 800d848:	482e      	ldr	r0, [pc, #184]	; (800d904 <udp_sendto_if+0xd8>)
 800d84a:	f003 f8d1 	bl	80109f0 <printf>
 800d84e:	f06f 030f 	mvn.w	r3, #15
 800d852:	e04f      	b.n	800d8f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d109      	bne.n	800d86e <udp_sendto_if+0x42>
 800d85a:	4b28      	ldr	r3, [pc, #160]	; (800d8fc <udp_sendto_if+0xd0>)
 800d85c:	f240 2281 	movw	r2, #641	; 0x281
 800d860:	4929      	ldr	r1, [pc, #164]	; (800d908 <udp_sendto_if+0xdc>)
 800d862:	4828      	ldr	r0, [pc, #160]	; (800d904 <udp_sendto_if+0xd8>)
 800d864:	f003 f8c4 	bl	80109f0 <printf>
 800d868:	f06f 030f 	mvn.w	r3, #15
 800d86c:	e042      	b.n	800d8f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d109      	bne.n	800d888 <udp_sendto_if+0x5c>
 800d874:	4b21      	ldr	r3, [pc, #132]	; (800d8fc <udp_sendto_if+0xd0>)
 800d876:	f240 2282 	movw	r2, #642	; 0x282
 800d87a:	4924      	ldr	r1, [pc, #144]	; (800d90c <udp_sendto_if+0xe0>)
 800d87c:	4821      	ldr	r0, [pc, #132]	; (800d904 <udp_sendto_if+0xd8>)
 800d87e:	f003 f8b7 	bl	80109f0 <printf>
 800d882:	f06f 030f 	mvn.w	r3, #15
 800d886:	e035      	b.n	800d8f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d109      	bne.n	800d8a2 <udp_sendto_if+0x76>
 800d88e:	4b1b      	ldr	r3, [pc, #108]	; (800d8fc <udp_sendto_if+0xd0>)
 800d890:	f240 2283 	movw	r2, #643	; 0x283
 800d894:	491e      	ldr	r1, [pc, #120]	; (800d910 <udp_sendto_if+0xe4>)
 800d896:	481b      	ldr	r0, [pc, #108]	; (800d904 <udp_sendto_if+0xd8>)
 800d898:	f003 f8aa 	bl	80109f0 <printf>
 800d89c:	f06f 030f 	mvn.w	r3, #15
 800d8a0:	e028      	b.n	800d8f4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d009      	beq.n	800d8bc <udp_sendto_if+0x90>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d8b8:	2be0      	cmp	r3, #224	; 0xe0
 800d8ba:	d103      	bne.n	800d8c4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	3304      	adds	r3, #4
 800d8c0:	617b      	str	r3, [r7, #20]
 800d8c2:	e00b      	b.n	800d8dc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d002      	beq.n	800d8d8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d8d2:	f06f 0303 	mvn.w	r3, #3
 800d8d6:	e00d      	b.n	800d8f4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d8dc:	887a      	ldrh	r2, [r7, #2]
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	68b9      	ldr	r1, [r7, #8]
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f000 f811 	bl	800d914 <udp_sendto_if_src>
 800d8f2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	0801a63c 	.word	0x0801a63c
 800d900:	0801a7b0 	.word	0x0801a7b0
 800d904:	0801a690 	.word	0x0801a690
 800d908:	0801a7cc 	.word	0x0801a7cc
 800d90c:	0801a7e8 	.word	0x0801a7e8
 800d910:	0801a808 	.word	0x0801a808

0800d914 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08c      	sub	sp, #48	; 0x30
 800d918:	af04      	add	r7, sp, #16
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d109      	bne.n	800d93c <udp_sendto_if_src+0x28>
 800d928:	4b65      	ldr	r3, [pc, #404]	; (800dac0 <udp_sendto_if_src+0x1ac>)
 800d92a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d92e:	4965      	ldr	r1, [pc, #404]	; (800dac4 <udp_sendto_if_src+0x1b0>)
 800d930:	4865      	ldr	r0, [pc, #404]	; (800dac8 <udp_sendto_if_src+0x1b4>)
 800d932:	f003 f85d 	bl	80109f0 <printf>
 800d936:	f06f 030f 	mvn.w	r3, #15
 800d93a:	e0bc      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d109      	bne.n	800d956 <udp_sendto_if_src+0x42>
 800d942:	4b5f      	ldr	r3, [pc, #380]	; (800dac0 <udp_sendto_if_src+0x1ac>)
 800d944:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d948:	4960      	ldr	r1, [pc, #384]	; (800dacc <udp_sendto_if_src+0x1b8>)
 800d94a:	485f      	ldr	r0, [pc, #380]	; (800dac8 <udp_sendto_if_src+0x1b4>)
 800d94c:	f003 f850 	bl	80109f0 <printf>
 800d950:	f06f 030f 	mvn.w	r3, #15
 800d954:	e0af      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d109      	bne.n	800d970 <udp_sendto_if_src+0x5c>
 800d95c:	4b58      	ldr	r3, [pc, #352]	; (800dac0 <udp_sendto_if_src+0x1ac>)
 800d95e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d962:	495b      	ldr	r1, [pc, #364]	; (800dad0 <udp_sendto_if_src+0x1bc>)
 800d964:	4858      	ldr	r0, [pc, #352]	; (800dac8 <udp_sendto_if_src+0x1b4>)
 800d966:	f003 f843 	bl	80109f0 <printf>
 800d96a:	f06f 030f 	mvn.w	r3, #15
 800d96e:	e0a2      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	2b00      	cmp	r3, #0
 800d974:	d109      	bne.n	800d98a <udp_sendto_if_src+0x76>
 800d976:	4b52      	ldr	r3, [pc, #328]	; (800dac0 <udp_sendto_if_src+0x1ac>)
 800d978:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d97c:	4955      	ldr	r1, [pc, #340]	; (800dad4 <udp_sendto_if_src+0x1c0>)
 800d97e:	4852      	ldr	r0, [pc, #328]	; (800dac8 <udp_sendto_if_src+0x1b4>)
 800d980:	f003 f836 	bl	80109f0 <printf>
 800d984:	f06f 030f 	mvn.w	r3, #15
 800d988:	e095      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d109      	bne.n	800d9a4 <udp_sendto_if_src+0x90>
 800d990:	4b4b      	ldr	r3, [pc, #300]	; (800dac0 <udp_sendto_if_src+0x1ac>)
 800d992:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d996:	4950      	ldr	r1, [pc, #320]	; (800dad8 <udp_sendto_if_src+0x1c4>)
 800d998:	484b      	ldr	r0, [pc, #300]	; (800dac8 <udp_sendto_if_src+0x1b4>)
 800d99a:	f003 f829 	bl	80109f0 <printf>
 800d99e:	f06f 030f 	mvn.w	r3, #15
 800d9a2:	e088      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	8a5b      	ldrh	r3, [r3, #18]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10f      	bne.n	800d9cc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d9ac:	68f9      	ldr	r1, [r7, #12]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	8a5b      	ldrh	r3, [r3, #18]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 f893 	bl	800dae0 <udp_bind>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d9be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d9c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d9ca:	e074      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	891b      	ldrh	r3, [r3, #8]
 800d9d0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d902      	bls.n	800d9de <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9dc:	e06b      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d9de:	2108      	movs	r1, #8
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	f7f9 fe99 	bl	8007718 <pbuf_add_header>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d015      	beq.n	800da18 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d9ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9f0:	2108      	movs	r1, #8
 800d9f2:	2022      	movs	r0, #34	; 0x22
 800d9f4:	f7f9 fc42 	bl	800727c <pbuf_alloc>
 800d9f8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800da00:	f04f 33ff 	mov.w	r3, #4294967295
 800da04:	e057      	b.n	800dab6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	891b      	ldrh	r3, [r3, #8]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d006      	beq.n	800da1c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	69f8      	ldr	r0, [r7, #28]
 800da12:	f7fa f82f 	bl	8007a74 <pbuf_chain>
 800da16:	e001      	b.n	800da1c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	895b      	ldrh	r3, [r3, #10]
 800da20:	2b07      	cmp	r3, #7
 800da22:	d806      	bhi.n	800da32 <udp_sendto_if_src+0x11e>
 800da24:	4b26      	ldr	r3, [pc, #152]	; (800dac0 <udp_sendto_if_src+0x1ac>)
 800da26:	f240 320d 	movw	r2, #781	; 0x30d
 800da2a:	492c      	ldr	r1, [pc, #176]	; (800dadc <udp_sendto_if_src+0x1c8>)
 800da2c:	4826      	ldr	r0, [pc, #152]	; (800dac8 <udp_sendto_if_src+0x1b4>)
 800da2e:	f002 ffdf 	bl	80109f0 <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	8a5b      	ldrh	r3, [r3, #18]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7f8 fc4d 	bl	80062dc <lwip_htons>
 800da42:	4603      	mov	r3, r0
 800da44:	461a      	mov	r2, r3
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800da4a:	887b      	ldrh	r3, [r7, #2]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7f8 fc45 	bl	80062dc <lwip_htons>
 800da52:	4603      	mov	r3, r0
 800da54:	461a      	mov	r2, r3
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	2200      	movs	r2, #0
 800da5e:	719a      	strb	r2, [r3, #6]
 800da60:	2200      	movs	r2, #0
 800da62:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	891b      	ldrh	r3, [r3, #8]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7f8 fc37 	bl	80062dc <lwip_htons>
 800da6e:	4603      	mov	r3, r0
 800da70:	461a      	mov	r2, r3
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800da76:	2311      	movs	r3, #17
 800da78:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	7adb      	ldrb	r3, [r3, #11]
 800da7e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	7a9b      	ldrb	r3, [r3, #10]
 800da84:	7cb9      	ldrb	r1, [r7, #18]
 800da86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da88:	9202      	str	r2, [sp, #8]
 800da8a:	7cfa      	ldrb	r2, [r7, #19]
 800da8c:	9201      	str	r2, [sp, #4]
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	460b      	mov	r3, r1
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da96:	69f8      	ldr	r0, [r7, #28]
 800da98:	f001 fbd4 	bl	800f244 <ip4_output_if_src>
 800da9c:	4603      	mov	r3, r0
 800da9e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800daa0:	69fa      	ldr	r2, [r7, #28]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d004      	beq.n	800dab2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800daa8:	69f8      	ldr	r0, [r7, #28]
 800daaa:	f7f9 fecb 	bl	8007844 <pbuf_free>
    q = NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800dab2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3720      	adds	r7, #32
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	0801a63c 	.word	0x0801a63c
 800dac4:	0801a828 	.word	0x0801a828
 800dac8:	0801a690 	.word	0x0801a690
 800dacc:	0801a848 	.word	0x0801a848
 800dad0:	0801a868 	.word	0x0801a868
 800dad4:	0801a88c 	.word	0x0801a88c
 800dad8:	0801a8b0 	.word	0x0801a8b0
 800dadc:	0801a8d4 	.word	0x0801a8d4

0800dae0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4613      	mov	r3, r2
 800daec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800daf4:	4b39      	ldr	r3, [pc, #228]	; (800dbdc <udp_bind+0xfc>)
 800daf6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d109      	bne.n	800db12 <udp_bind+0x32>
 800dafe:	4b38      	ldr	r3, [pc, #224]	; (800dbe0 <udp_bind+0x100>)
 800db00:	f240 32b7 	movw	r2, #951	; 0x3b7
 800db04:	4937      	ldr	r1, [pc, #220]	; (800dbe4 <udp_bind+0x104>)
 800db06:	4838      	ldr	r0, [pc, #224]	; (800dbe8 <udp_bind+0x108>)
 800db08:	f002 ff72 	bl	80109f0 <printf>
 800db0c:	f06f 030f 	mvn.w	r3, #15
 800db10:	e060      	b.n	800dbd4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800db16:	4b35      	ldr	r3, [pc, #212]	; (800dbec <udp_bind+0x10c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	617b      	str	r3, [r7, #20]
 800db1c:	e009      	b.n	800db32 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	429a      	cmp	r2, r3
 800db24:	d102      	bne.n	800db2c <udp_bind+0x4c>
      rebind = 1;
 800db26:	2301      	movs	r3, #1
 800db28:	74fb      	strb	r3, [r7, #19]
      break;
 800db2a:	e005      	b.n	800db38 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	617b      	str	r3, [r7, #20]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1f2      	bne.n	800db1e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800db38:	88fb      	ldrh	r3, [r7, #6]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d109      	bne.n	800db52 <udp_bind+0x72>
    port = udp_new_port();
 800db3e:	f7ff fc69 	bl	800d414 <udp_new_port>
 800db42:	4603      	mov	r3, r0
 800db44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800db46:	88fb      	ldrh	r3, [r7, #6]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d12c      	bne.n	800dba6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800db4c:	f06f 0307 	mvn.w	r3, #7
 800db50:	e040      	b.n	800dbd4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800db52:	4b26      	ldr	r3, [pc, #152]	; (800dbec <udp_bind+0x10c>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	617b      	str	r3, [r7, #20]
 800db58:	e022      	b.n	800dba0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d01b      	beq.n	800db9a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	8a5b      	ldrh	r3, [r3, #18]
 800db66:	88fa      	ldrh	r2, [r7, #6]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d116      	bne.n	800db9a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800db74:	429a      	cmp	r2, r3
 800db76:	d00d      	beq.n	800db94 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00a      	beq.n	800db94 <udp_bind+0xb4>
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d006      	beq.n	800db94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800db86:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d102      	bne.n	800db9a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800db94:	f06f 0307 	mvn.w	r3, #7
 800db98:	e01c      	b.n	800dbd4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	617b      	str	r3, [r7, #20]
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1d9      	bne.n	800db5a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <udp_bind+0xd2>
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	e000      	b.n	800dbb4 <udp_bind+0xd4>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	88fa      	ldrh	r2, [r7, #6]
 800dbbc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800dbbe:	7cfb      	ldrb	r3, [r7, #19]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d106      	bne.n	800dbd2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <udp_bind+0x10c>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800dbcc:	4a07      	ldr	r2, [pc, #28]	; (800dbec <udp_bind+0x10c>)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	0801b14c 	.word	0x0801b14c
 800dbe0:	0801a63c 	.word	0x0801a63c
 800dbe4:	0801a904 	.word	0x0801a904
 800dbe8:	0801a690 	.word	0x0801a690
 800dbec:	200072e4 	.word	0x200072e4

0800dbf0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d107      	bne.n	800dc12 <udp_recv+0x22>
 800dc02:	4b08      	ldr	r3, [pc, #32]	; (800dc24 <udp_recv+0x34>)
 800dc04:	f240 428a 	movw	r2, #1162	; 0x48a
 800dc08:	4907      	ldr	r1, [pc, #28]	; (800dc28 <udp_recv+0x38>)
 800dc0a:	4808      	ldr	r0, [pc, #32]	; (800dc2c <udp_recv+0x3c>)
 800dc0c:	f002 fef0 	bl	80109f0 <printf>
 800dc10:	e005      	b.n	800dc1e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	61da      	str	r2, [r3, #28]
}
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	0801a63c 	.word	0x0801a63c
 800dc28:	0801a970 	.word	0x0801a970
 800dc2c:	0801a690 	.word	0x0801a690

0800dc30 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dc36:	2000      	movs	r0, #0
 800dc38:	f7f8 ffa6 	bl	8006b88 <memp_malloc>
 800dc3c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d007      	beq.n	800dc54 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800dc44:	2220      	movs	r2, #32
 800dc46:	2100      	movs	r1, #0
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f002 fc57 	bl	80104fc <memset>
    pcb->ttl = UDP_TTL;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	22ff      	movs	r2, #255	; 0xff
 800dc52:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800dc54:	687b      	ldr	r3, [r7, #4]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d01e      	beq.n	800dcae <udp_netif_ip_addr_changed+0x4e>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d01a      	beq.n	800dcae <udp_netif_ip_addr_changed+0x4e>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d017      	beq.n	800dcae <udp_netif_ip_addr_changed+0x4e>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d013      	beq.n	800dcae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dc86:	4b0d      	ldr	r3, [pc, #52]	; (800dcbc <udp_netif_ip_addr_changed+0x5c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	60fb      	str	r3, [r7, #12]
 800dc8c:	e00c      	b.n	800dca8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d103      	bne.n	800dca2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	60fb      	str	r3, [r7, #12]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1ef      	bne.n	800dc8e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dcae:	bf00      	nop
 800dcb0:	3714      	adds	r7, #20
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	200072e4 	.word	0x200072e4

0800dcc0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dcc8:	4915      	ldr	r1, [pc, #84]	; (800dd20 <etharp_free_entry+0x60>)
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	4613      	mov	r3, r2
 800dcce:	005b      	lsls	r3, r3, #1
 800dcd0:	4413      	add	r3, r2
 800dcd2:	00db      	lsls	r3, r3, #3
 800dcd4:	440b      	add	r3, r1
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d013      	beq.n	800dd04 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dcdc:	4910      	ldr	r1, [pc, #64]	; (800dd20 <etharp_free_entry+0x60>)
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	4613      	mov	r3, r2
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	4413      	add	r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	440b      	add	r3, r1
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7f9 fda9 	bl	8007844 <pbuf_free>
    arp_table[i].q = NULL;
 800dcf2:	490b      	ldr	r1, [pc, #44]	; (800dd20 <etharp_free_entry+0x60>)
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	4413      	add	r3, r2
 800dcfc:	00db      	lsls	r3, r3, #3
 800dcfe:	440b      	add	r3, r1
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dd04:	4906      	ldr	r1, [pc, #24]	; (800dd20 <etharp_free_entry+0x60>)
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	4613      	mov	r3, r2
 800dd0a:	005b      	lsls	r3, r3, #1
 800dd0c:	4413      	add	r3, r2
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	440b      	add	r3, r1
 800dd12:	3314      	adds	r3, #20
 800dd14:	2200      	movs	r2, #0
 800dd16:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800dd18:	bf00      	nop
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	200072e8 	.word	0x200072e8

0800dd24 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	607b      	str	r3, [r7, #4]
 800dd2e:	e096      	b.n	800de5e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dd30:	494f      	ldr	r1, [pc, #316]	; (800de70 <etharp_tmr+0x14c>)
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	4613      	mov	r3, r2
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	4413      	add	r3, r2
 800dd3a:	00db      	lsls	r3, r3, #3
 800dd3c:	440b      	add	r3, r1
 800dd3e:	3314      	adds	r3, #20
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800dd44:	78fb      	ldrb	r3, [r7, #3]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 8086 	beq.w	800de58 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dd4c:	4948      	ldr	r1, [pc, #288]	; (800de70 <etharp_tmr+0x14c>)
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	4613      	mov	r3, r2
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	4413      	add	r3, r2
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	440b      	add	r3, r1
 800dd5a:	3312      	adds	r3, #18
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	b298      	uxth	r0, r3
 800dd62:	4943      	ldr	r1, [pc, #268]	; (800de70 <etharp_tmr+0x14c>)
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	4613      	mov	r3, r2
 800dd68:	005b      	lsls	r3, r3, #1
 800dd6a:	4413      	add	r3, r2
 800dd6c:	00db      	lsls	r3, r3, #3
 800dd6e:	440b      	add	r3, r1
 800dd70:	3312      	adds	r3, #18
 800dd72:	4602      	mov	r2, r0
 800dd74:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dd76:	493e      	ldr	r1, [pc, #248]	; (800de70 <etharp_tmr+0x14c>)
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	4413      	add	r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	440b      	add	r3, r1
 800dd84:	3312      	adds	r3, #18
 800dd86:	881b      	ldrh	r3, [r3, #0]
 800dd88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dd8c:	d215      	bcs.n	800ddba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dd8e:	4938      	ldr	r1, [pc, #224]	; (800de70 <etharp_tmr+0x14c>)
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	4613      	mov	r3, r2
 800dd94:	005b      	lsls	r3, r3, #1
 800dd96:	4413      	add	r3, r2
 800dd98:	00db      	lsls	r3, r3, #3
 800dd9a:	440b      	add	r3, r1
 800dd9c:	3314      	adds	r3, #20
 800dd9e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d10e      	bne.n	800ddc2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dda4:	4932      	ldr	r1, [pc, #200]	; (800de70 <etharp_tmr+0x14c>)
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	4413      	add	r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	440b      	add	r3, r1
 800ddb2:	3312      	adds	r3, #18
 800ddb4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ddb6:	2b04      	cmp	r3, #4
 800ddb8:	d903      	bls.n	800ddc2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff ff80 	bl	800dcc0 <etharp_free_entry>
 800ddc0:	e04a      	b.n	800de58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ddc2:	492b      	ldr	r1, [pc, #172]	; (800de70 <etharp_tmr+0x14c>)
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	4413      	add	r3, r2
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	440b      	add	r3, r1
 800ddd0:	3314      	adds	r3, #20
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b03      	cmp	r3, #3
 800ddd6:	d10a      	bne.n	800ddee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ddd8:	4925      	ldr	r1, [pc, #148]	; (800de70 <etharp_tmr+0x14c>)
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	4613      	mov	r3, r2
 800ddde:	005b      	lsls	r3, r3, #1
 800dde0:	4413      	add	r3, r2
 800dde2:	00db      	lsls	r3, r3, #3
 800dde4:	440b      	add	r3, r1
 800dde6:	3314      	adds	r3, #20
 800dde8:	2204      	movs	r2, #4
 800ddea:	701a      	strb	r2, [r3, #0]
 800ddec:	e034      	b.n	800de58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ddee:	4920      	ldr	r1, [pc, #128]	; (800de70 <etharp_tmr+0x14c>)
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	4413      	add	r3, r2
 800ddf8:	00db      	lsls	r3, r3, #3
 800ddfa:	440b      	add	r3, r1
 800ddfc:	3314      	adds	r3, #20
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b04      	cmp	r3, #4
 800de02:	d10a      	bne.n	800de1a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800de04:	491a      	ldr	r1, [pc, #104]	; (800de70 <etharp_tmr+0x14c>)
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	4613      	mov	r3, r2
 800de0a:	005b      	lsls	r3, r3, #1
 800de0c:	4413      	add	r3, r2
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	440b      	add	r3, r1
 800de12:	3314      	adds	r3, #20
 800de14:	2202      	movs	r2, #2
 800de16:	701a      	strb	r2, [r3, #0]
 800de18:	e01e      	b.n	800de58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800de1a:	4915      	ldr	r1, [pc, #84]	; (800de70 <etharp_tmr+0x14c>)
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	4613      	mov	r3, r2
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	4413      	add	r3, r2
 800de24:	00db      	lsls	r3, r3, #3
 800de26:	440b      	add	r3, r1
 800de28:	3314      	adds	r3, #20
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d113      	bne.n	800de58 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800de30:	490f      	ldr	r1, [pc, #60]	; (800de70 <etharp_tmr+0x14c>)
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	4613      	mov	r3, r2
 800de36:	005b      	lsls	r3, r3, #1
 800de38:	4413      	add	r3, r2
 800de3a:	00db      	lsls	r3, r3, #3
 800de3c:	440b      	add	r3, r1
 800de3e:	3308      	adds	r3, #8
 800de40:	6818      	ldr	r0, [r3, #0]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	4613      	mov	r3, r2
 800de46:	005b      	lsls	r3, r3, #1
 800de48:	4413      	add	r3, r2
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	4a08      	ldr	r2, [pc, #32]	; (800de70 <etharp_tmr+0x14c>)
 800de4e:	4413      	add	r3, r2
 800de50:	3304      	adds	r3, #4
 800de52:	4619      	mov	r1, r3
 800de54:	f000 fe6e 	bl	800eb34 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3301      	adds	r3, #1
 800de5c:	607b      	str	r3, [r7, #4]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b09      	cmp	r3, #9
 800de62:	f77f af65 	ble.w	800dd30 <etharp_tmr+0xc>
      }
    }
  }
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	200072e8 	.word	0x200072e8

0800de74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08a      	sub	sp, #40	; 0x28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	460b      	mov	r3, r1
 800de7e:	607a      	str	r2, [r7, #4]
 800de80:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800de82:	230a      	movs	r3, #10
 800de84:	84fb      	strh	r3, [r7, #38]	; 0x26
 800de86:	230a      	movs	r3, #10
 800de88:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800de8a:	230a      	movs	r3, #10
 800de8c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800de92:	230a      	movs	r3, #10
 800de94:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	83bb      	strh	r3, [r7, #28]
 800de9a:	2300      	movs	r3, #0
 800de9c:	837b      	strh	r3, [r7, #26]
 800de9e:	2300      	movs	r3, #0
 800dea0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dea2:	2300      	movs	r3, #0
 800dea4:	843b      	strh	r3, [r7, #32]
 800dea6:	e0ae      	b.n	800e006 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dea8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800deac:	49a6      	ldr	r1, [pc, #664]	; (800e148 <etharp_find_entry+0x2d4>)
 800deae:	4613      	mov	r3, r2
 800deb0:	005b      	lsls	r3, r3, #1
 800deb2:	4413      	add	r3, r2
 800deb4:	00db      	lsls	r3, r3, #3
 800deb6:	440b      	add	r3, r1
 800deb8:	3314      	adds	r3, #20
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800debe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dec2:	2b0a      	cmp	r3, #10
 800dec4:	d105      	bne.n	800ded2 <etharp_find_entry+0x5e>
 800dec6:	7dfb      	ldrb	r3, [r7, #23]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d102      	bne.n	800ded2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800decc:	8c3b      	ldrh	r3, [r7, #32]
 800dece:	847b      	strh	r3, [r7, #34]	; 0x22
 800ded0:	e095      	b.n	800dffe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 8092 	beq.w	800dffe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800deda:	7dfb      	ldrb	r3, [r7, #23]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d009      	beq.n	800def4 <etharp_find_entry+0x80>
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d806      	bhi.n	800def4 <etharp_find_entry+0x80>
 800dee6:	4b99      	ldr	r3, [pc, #612]	; (800e14c <etharp_find_entry+0x2d8>)
 800dee8:	f240 1223 	movw	r2, #291	; 0x123
 800deec:	4998      	ldr	r1, [pc, #608]	; (800e150 <etharp_find_entry+0x2dc>)
 800deee:	4899      	ldr	r0, [pc, #612]	; (800e154 <etharp_find_entry+0x2e0>)
 800def0:	f002 fd7e 	bl	80109f0 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d020      	beq.n	800df3c <etharp_find_entry+0xc8>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6819      	ldr	r1, [r3, #0]
 800defe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df02:	4891      	ldr	r0, [pc, #580]	; (800e148 <etharp_find_entry+0x2d4>)
 800df04:	4613      	mov	r3, r2
 800df06:	005b      	lsls	r3, r3, #1
 800df08:	4413      	add	r3, r2
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	4403      	add	r3, r0
 800df0e:	3304      	adds	r3, #4
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4299      	cmp	r1, r3
 800df14:	d112      	bne.n	800df3c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00c      	beq.n	800df36 <etharp_find_entry+0xc2>
 800df1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df20:	4989      	ldr	r1, [pc, #548]	; (800e148 <etharp_find_entry+0x2d4>)
 800df22:	4613      	mov	r3, r2
 800df24:	005b      	lsls	r3, r3, #1
 800df26:	4413      	add	r3, r2
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	440b      	add	r3, r1
 800df2c:	3308      	adds	r3, #8
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	429a      	cmp	r2, r3
 800df34:	d102      	bne.n	800df3c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800df36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df3a:	e100      	b.n	800e13e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800df3c:	7dfb      	ldrb	r3, [r7, #23]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d140      	bne.n	800dfc4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800df42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df46:	4980      	ldr	r1, [pc, #512]	; (800e148 <etharp_find_entry+0x2d4>)
 800df48:	4613      	mov	r3, r2
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	4413      	add	r3, r2
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	440b      	add	r3, r1
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d01a      	beq.n	800df8e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800df58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df5c:	497a      	ldr	r1, [pc, #488]	; (800e148 <etharp_find_entry+0x2d4>)
 800df5e:	4613      	mov	r3, r2
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	4413      	add	r3, r2
 800df64:	00db      	lsls	r3, r3, #3
 800df66:	440b      	add	r3, r1
 800df68:	3312      	adds	r3, #18
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	8bba      	ldrh	r2, [r7, #28]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d845      	bhi.n	800dffe <etharp_find_entry+0x18a>
            old_queue = i;
 800df72:	8c3b      	ldrh	r3, [r7, #32]
 800df74:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800df76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df7a:	4973      	ldr	r1, [pc, #460]	; (800e148 <etharp_find_entry+0x2d4>)
 800df7c:	4613      	mov	r3, r2
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	4413      	add	r3, r2
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	440b      	add	r3, r1
 800df86:	3312      	adds	r3, #18
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	83bb      	strh	r3, [r7, #28]
 800df8c:	e037      	b.n	800dffe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800df8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df92:	496d      	ldr	r1, [pc, #436]	; (800e148 <etharp_find_entry+0x2d4>)
 800df94:	4613      	mov	r3, r2
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	4413      	add	r3, r2
 800df9a:	00db      	lsls	r3, r3, #3
 800df9c:	440b      	add	r3, r1
 800df9e:	3312      	adds	r3, #18
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	8b7a      	ldrh	r2, [r7, #26]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d82a      	bhi.n	800dffe <etharp_find_entry+0x18a>
            old_pending = i;
 800dfa8:	8c3b      	ldrh	r3, [r7, #32]
 800dfaa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800dfac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfb0:	4965      	ldr	r1, [pc, #404]	; (800e148 <etharp_find_entry+0x2d4>)
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	4413      	add	r3, r2
 800dfb8:	00db      	lsls	r3, r3, #3
 800dfba:	440b      	add	r3, r1
 800dfbc:	3312      	adds	r3, #18
 800dfbe:	881b      	ldrh	r3, [r3, #0]
 800dfc0:	837b      	strh	r3, [r7, #26]
 800dfc2:	e01c      	b.n	800dffe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d919      	bls.n	800dffe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dfca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfce:	495e      	ldr	r1, [pc, #376]	; (800e148 <etharp_find_entry+0x2d4>)
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	005b      	lsls	r3, r3, #1
 800dfd4:	4413      	add	r3, r2
 800dfd6:	00db      	lsls	r3, r3, #3
 800dfd8:	440b      	add	r3, r1
 800dfda:	3312      	adds	r3, #18
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	8b3a      	ldrh	r2, [r7, #24]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d80c      	bhi.n	800dffe <etharp_find_entry+0x18a>
            old_stable = i;
 800dfe4:	8c3b      	ldrh	r3, [r7, #32]
 800dfe6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800dfe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfec:	4956      	ldr	r1, [pc, #344]	; (800e148 <etharp_find_entry+0x2d4>)
 800dfee:	4613      	mov	r3, r2
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4413      	add	r3, r2
 800dff4:	00db      	lsls	r3, r3, #3
 800dff6:	440b      	add	r3, r1
 800dff8:	3312      	adds	r3, #18
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dffe:	8c3b      	ldrh	r3, [r7, #32]
 800e000:	3301      	adds	r3, #1
 800e002:	b29b      	uxth	r3, r3
 800e004:	843b      	strh	r3, [r7, #32]
 800e006:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e00a:	2b09      	cmp	r3, #9
 800e00c:	f77f af4c 	ble.w	800dea8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e010:	7afb      	ldrb	r3, [r7, #11]
 800e012:	f003 0302 	and.w	r3, r3, #2
 800e016:	2b00      	cmp	r3, #0
 800e018:	d108      	bne.n	800e02c <etharp_find_entry+0x1b8>
 800e01a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e01e:	2b0a      	cmp	r3, #10
 800e020:	d107      	bne.n	800e032 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e022:	7afb      	ldrb	r3, [r7, #11]
 800e024:	f003 0301 	and.w	r3, r3, #1
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d102      	bne.n	800e032 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e02c:	f04f 33ff 	mov.w	r3, #4294967295
 800e030:	e085      	b.n	800e13e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e032:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e036:	2b09      	cmp	r3, #9
 800e038:	dc02      	bgt.n	800e040 <etharp_find_entry+0x1cc>
    i = empty;
 800e03a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e03c:	843b      	strh	r3, [r7, #32]
 800e03e:	e039      	b.n	800e0b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e040:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e044:	2b09      	cmp	r3, #9
 800e046:	dc14      	bgt.n	800e072 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e04a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e04c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e050:	493d      	ldr	r1, [pc, #244]	; (800e148 <etharp_find_entry+0x2d4>)
 800e052:	4613      	mov	r3, r2
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	4413      	add	r3, r2
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	440b      	add	r3, r1
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d018      	beq.n	800e094 <etharp_find_entry+0x220>
 800e062:	4b3a      	ldr	r3, [pc, #232]	; (800e14c <etharp_find_entry+0x2d8>)
 800e064:	f240 126d 	movw	r2, #365	; 0x16d
 800e068:	493b      	ldr	r1, [pc, #236]	; (800e158 <etharp_find_entry+0x2e4>)
 800e06a:	483a      	ldr	r0, [pc, #232]	; (800e154 <etharp_find_entry+0x2e0>)
 800e06c:	f002 fcc0 	bl	80109f0 <printf>
 800e070:	e010      	b.n	800e094 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e072:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e076:	2b09      	cmp	r3, #9
 800e078:	dc02      	bgt.n	800e080 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e07a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e07c:	843b      	strh	r3, [r7, #32]
 800e07e:	e009      	b.n	800e094 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e080:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e084:	2b09      	cmp	r3, #9
 800e086:	dc02      	bgt.n	800e08e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e088:	8bfb      	ldrh	r3, [r7, #30]
 800e08a:	843b      	strh	r3, [r7, #32]
 800e08c:	e002      	b.n	800e094 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e08e:	f04f 33ff 	mov.w	r3, #4294967295
 800e092:	e054      	b.n	800e13e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e094:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e098:	2b09      	cmp	r3, #9
 800e09a:	dd06      	ble.n	800e0aa <etharp_find_entry+0x236>
 800e09c:	4b2b      	ldr	r3, [pc, #172]	; (800e14c <etharp_find_entry+0x2d8>)
 800e09e:	f240 127f 	movw	r2, #383	; 0x17f
 800e0a2:	492e      	ldr	r1, [pc, #184]	; (800e15c <etharp_find_entry+0x2e8>)
 800e0a4:	482b      	ldr	r0, [pc, #172]	; (800e154 <etharp_find_entry+0x2e0>)
 800e0a6:	f002 fca3 	bl	80109f0 <printf>
    etharp_free_entry(i);
 800e0aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff fe06 	bl	800dcc0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e0b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e0b8:	2b09      	cmp	r3, #9
 800e0ba:	dd06      	ble.n	800e0ca <etharp_find_entry+0x256>
 800e0bc:	4b23      	ldr	r3, [pc, #140]	; (800e14c <etharp_find_entry+0x2d8>)
 800e0be:	f240 1283 	movw	r2, #387	; 0x183
 800e0c2:	4926      	ldr	r1, [pc, #152]	; (800e15c <etharp_find_entry+0x2e8>)
 800e0c4:	4823      	ldr	r0, [pc, #140]	; (800e154 <etharp_find_entry+0x2e0>)
 800e0c6:	f002 fc93 	bl	80109f0 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e0ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0ce:	491e      	ldr	r1, [pc, #120]	; (800e148 <etharp_find_entry+0x2d4>)
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	440b      	add	r3, r1
 800e0da:	3314      	adds	r3, #20
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d006      	beq.n	800e0f0 <etharp_find_entry+0x27c>
 800e0e2:	4b1a      	ldr	r3, [pc, #104]	; (800e14c <etharp_find_entry+0x2d8>)
 800e0e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e0e8:	491d      	ldr	r1, [pc, #116]	; (800e160 <etharp_find_entry+0x2ec>)
 800e0ea:	481a      	ldr	r0, [pc, #104]	; (800e154 <etharp_find_entry+0x2e0>)
 800e0ec:	f002 fc80 	bl	80109f0 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00b      	beq.n	800e10e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e0f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6819      	ldr	r1, [r3, #0]
 800e0fe:	4812      	ldr	r0, [pc, #72]	; (800e148 <etharp_find_entry+0x2d4>)
 800e100:	4613      	mov	r3, r2
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	4413      	add	r3, r2
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	4403      	add	r3, r0
 800e10a:	3304      	adds	r3, #4
 800e10c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e10e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e112:	490d      	ldr	r1, [pc, #52]	; (800e148 <etharp_find_entry+0x2d4>)
 800e114:	4613      	mov	r3, r2
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	4413      	add	r3, r2
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	440b      	add	r3, r1
 800e11e:	3312      	adds	r3, #18
 800e120:	2200      	movs	r2, #0
 800e122:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e124:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e128:	4907      	ldr	r1, [pc, #28]	; (800e148 <etharp_find_entry+0x2d4>)
 800e12a:	4613      	mov	r3, r2
 800e12c:	005b      	lsls	r3, r3, #1
 800e12e:	4413      	add	r3, r2
 800e130:	00db      	lsls	r3, r3, #3
 800e132:	440b      	add	r3, r1
 800e134:	3308      	adds	r3, #8
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e13a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3728      	adds	r7, #40	; 0x28
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	200072e8 	.word	0x200072e8
 800e14c:	0801a9a0 	.word	0x0801a9a0
 800e150:	0801a9d8 	.word	0x0801a9d8
 800e154:	0801aa18 	.word	0x0801aa18
 800e158:	0801aa40 	.word	0x0801aa40
 800e15c:	0801aa58 	.word	0x0801aa58
 800e160:	0801aa6c 	.word	0x0801aa6c

0800e164 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af02      	add	r7, sp, #8
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e178:	2b06      	cmp	r3, #6
 800e17a:	d006      	beq.n	800e18a <etharp_update_arp_entry+0x26>
 800e17c:	4b48      	ldr	r3, [pc, #288]	; (800e2a0 <etharp_update_arp_entry+0x13c>)
 800e17e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e182:	4948      	ldr	r1, [pc, #288]	; (800e2a4 <etharp_update_arp_entry+0x140>)
 800e184:	4848      	ldr	r0, [pc, #288]	; (800e2a8 <etharp_update_arp_entry+0x144>)
 800e186:	f002 fc33 	bl	80109f0 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d012      	beq.n	800e1b6 <etharp_update_arp_entry+0x52>
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00e      	beq.n	800e1b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68f9      	ldr	r1, [r7, #12]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f001 f8fe 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800e1a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d105      	bne.n	800e1b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e1b2:	2be0      	cmp	r3, #224	; 0xe0
 800e1b4:	d102      	bne.n	800e1bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e1b6:	f06f 030f 	mvn.w	r3, #15
 800e1ba:	e06c      	b.n	800e296 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e1bc:	78fb      	ldrb	r3, [r7, #3]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	68b8      	ldr	r0, [r7, #8]
 800e1c4:	f7ff fe56 	bl	800de74 <etharp_find_entry>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e1cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	da02      	bge.n	800e1da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e1d4:	8afb      	ldrh	r3, [r7, #22]
 800e1d6:	b25b      	sxtb	r3, r3
 800e1d8:	e05d      	b.n	800e296 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e1da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e1de:	4933      	ldr	r1, [pc, #204]	; (800e2ac <etharp_update_arp_entry+0x148>)
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	4413      	add	r3, r2
 800e1e6:	00db      	lsls	r3, r3, #3
 800e1e8:	440b      	add	r3, r1
 800e1ea:	3314      	adds	r3, #20
 800e1ec:	2202      	movs	r2, #2
 800e1ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e1f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e1f4:	492d      	ldr	r1, [pc, #180]	; (800e2ac <etharp_update_arp_entry+0x148>)
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	4413      	add	r3, r2
 800e1fc:	00db      	lsls	r3, r3, #3
 800e1fe:	440b      	add	r3, r1
 800e200:	3308      	adds	r3, #8
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e206:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e20a:	4613      	mov	r3, r2
 800e20c:	005b      	lsls	r3, r3, #1
 800e20e:	4413      	add	r3, r2
 800e210:	00db      	lsls	r3, r3, #3
 800e212:	3308      	adds	r3, #8
 800e214:	4a25      	ldr	r2, [pc, #148]	; (800e2ac <etharp_update_arp_entry+0x148>)
 800e216:	4413      	add	r3, r2
 800e218:	3304      	adds	r3, #4
 800e21a:	2206      	movs	r2, #6
 800e21c:	6879      	ldr	r1, [r7, #4]
 800e21e:	4618      	mov	r0, r3
 800e220:	f002 f944 	bl	80104ac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e224:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e228:	4920      	ldr	r1, [pc, #128]	; (800e2ac <etharp_update_arp_entry+0x148>)
 800e22a:	4613      	mov	r3, r2
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	4413      	add	r3, r2
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	440b      	add	r3, r1
 800e234:	3312      	adds	r3, #18
 800e236:	2200      	movs	r2, #0
 800e238:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e23a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e23e:	491b      	ldr	r1, [pc, #108]	; (800e2ac <etharp_update_arp_entry+0x148>)
 800e240:	4613      	mov	r3, r2
 800e242:	005b      	lsls	r3, r3, #1
 800e244:	4413      	add	r3, r2
 800e246:	00db      	lsls	r3, r3, #3
 800e248:	440b      	add	r3, r1
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d021      	beq.n	800e294 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e250:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e254:	4915      	ldr	r1, [pc, #84]	; (800e2ac <etharp_update_arp_entry+0x148>)
 800e256:	4613      	mov	r3, r2
 800e258:	005b      	lsls	r3, r3, #1
 800e25a:	4413      	add	r3, r2
 800e25c:	00db      	lsls	r3, r3, #3
 800e25e:	440b      	add	r3, r1
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e264:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e268:	4910      	ldr	r1, [pc, #64]	; (800e2ac <etharp_update_arp_entry+0x148>)
 800e26a:	4613      	mov	r3, r2
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	4413      	add	r3, r2
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	440b      	add	r3, r1
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e27e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6939      	ldr	r1, [r7, #16]
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f001 ff97 	bl	80101bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e28e:	6938      	ldr	r0, [r7, #16]
 800e290:	f7f9 fad8 	bl	8007844 <pbuf_free>
  }
  return ERR_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	0801a9a0 	.word	0x0801a9a0
 800e2a4:	0801aa98 	.word	0x0801aa98
 800e2a8:	0801aa18 	.word	0x0801aa18
 800e2ac:	200072e8 	.word	0x200072e8

0800e2b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	e01e      	b.n	800e2fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e2be:	4913      	ldr	r1, [pc, #76]	; (800e30c <etharp_cleanup_netif+0x5c>)
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	005b      	lsls	r3, r3, #1
 800e2c6:	4413      	add	r3, r2
 800e2c8:	00db      	lsls	r3, r3, #3
 800e2ca:	440b      	add	r3, r1
 800e2cc:	3314      	adds	r3, #20
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e2d2:	7afb      	ldrb	r3, [r7, #11]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00e      	beq.n	800e2f6 <etharp_cleanup_netif+0x46>
 800e2d8:	490c      	ldr	r1, [pc, #48]	; (800e30c <etharp_cleanup_netif+0x5c>)
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	4613      	mov	r3, r2
 800e2de:	005b      	lsls	r3, r3, #1
 800e2e0:	4413      	add	r3, r2
 800e2e2:	00db      	lsls	r3, r3, #3
 800e2e4:	440b      	add	r3, r1
 800e2e6:	3308      	adds	r3, #8
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d102      	bne.n	800e2f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff fce5 	bl	800dcc0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b09      	cmp	r3, #9
 800e300:	dddd      	ble.n	800e2be <etharp_cleanup_netif+0xe>
    }
  }
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	200072e8 	.word	0x200072e8

0800e310 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e310:	b5b0      	push	{r4, r5, r7, lr}
 800e312:	b08a      	sub	sp, #40	; 0x28
 800e314:	af04      	add	r7, sp, #16
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d107      	bne.n	800e330 <etharp_input+0x20>
 800e320:	4b3d      	ldr	r3, [pc, #244]	; (800e418 <etharp_input+0x108>)
 800e322:	f240 228a 	movw	r2, #650	; 0x28a
 800e326:	493d      	ldr	r1, [pc, #244]	; (800e41c <etharp_input+0x10c>)
 800e328:	483d      	ldr	r0, [pc, #244]	; (800e420 <etharp_input+0x110>)
 800e32a:	f002 fb61 	bl	80109f0 <printf>
 800e32e:	e06f      	b.n	800e410 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e340:	d10c      	bne.n	800e35c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e346:	2b06      	cmp	r3, #6
 800e348:	d108      	bne.n	800e35c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e34e:	2b04      	cmp	r3, #4
 800e350:	d104      	bne.n	800e35c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	885b      	ldrh	r3, [r3, #2]
 800e356:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e358:	2b08      	cmp	r3, #8
 800e35a:	d003      	beq.n	800e364 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f7f9 fa71 	bl	8007844 <pbuf_free>
    return;
 800e362:	e055      	b.n	800e410 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	330e      	adds	r3, #14
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	3318      	adds	r3, #24
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	3304      	adds	r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d102      	bne.n	800e384 <etharp_input+0x74>
    for_us = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	75fb      	strb	r3, [r7, #23]
 800e382:	e009      	b.n	800e398 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	3304      	adds	r3, #4
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	bf0c      	ite	eq
 800e390:	2301      	moveq	r3, #1
 800e392:	2300      	movne	r3, #0
 800e394:	b2db      	uxtb	r3, r3
 800e396:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	f103 0208 	add.w	r2, r3, #8
 800e39e:	7dfb      	ldrb	r3, [r7, #23]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <etharp_input+0x98>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e000      	b.n	800e3aa <etharp_input+0x9a>
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	f107 010c 	add.w	r1, r7, #12
 800e3ae:	6838      	ldr	r0, [r7, #0]
 800e3b0:	f7ff fed8 	bl	800e164 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	88db      	ldrh	r3, [r3, #6]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3be:	d003      	beq.n	800e3c8 <etharp_input+0xb8>
 800e3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3c4:	d01e      	beq.n	800e404 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e3c6:	e020      	b.n	800e40a <etharp_input+0xfa>
      if (for_us) {
 800e3c8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d01c      	beq.n	800e408 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e3e4:	693a      	ldr	r2, [r7, #16]
 800e3e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e3e8:	2102      	movs	r1, #2
 800e3ea:	9103      	str	r1, [sp, #12]
 800e3ec:	f107 010c 	add.w	r1, r7, #12
 800e3f0:	9102      	str	r1, [sp, #8]
 800e3f2:	9201      	str	r2, [sp, #4]
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	462b      	mov	r3, r5
 800e3f8:	4622      	mov	r2, r4
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	6838      	ldr	r0, [r7, #0]
 800e3fe:	f000 faeb 	bl	800e9d8 <etharp_raw>
      break;
 800e402:	e001      	b.n	800e408 <etharp_input+0xf8>
      break;
 800e404:	bf00      	nop
 800e406:	e000      	b.n	800e40a <etharp_input+0xfa>
      break;
 800e408:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7f9 fa1a 	bl	8007844 <pbuf_free>
}
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bdb0      	pop	{r4, r5, r7, pc}
 800e416:	bf00      	nop
 800e418:	0801a9a0 	.word	0x0801a9a0
 800e41c:	0801aaf0 	.word	0x0801aaf0
 800e420:	0801aa18 	.word	0x0801aa18

0800e424 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b086      	sub	sp, #24
 800e428:	af02      	add	r7, sp, #8
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	60b9      	str	r1, [r7, #8]
 800e42e:	4613      	mov	r3, r2
 800e430:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e432:	79fa      	ldrb	r2, [r7, #7]
 800e434:	4944      	ldr	r1, [pc, #272]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e436:	4613      	mov	r3, r2
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	4413      	add	r3, r2
 800e43c:	00db      	lsls	r3, r3, #3
 800e43e:	440b      	add	r3, r1
 800e440:	3314      	adds	r3, #20
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d806      	bhi.n	800e456 <etharp_output_to_arp_index+0x32>
 800e448:	4b40      	ldr	r3, [pc, #256]	; (800e54c <etharp_output_to_arp_index+0x128>)
 800e44a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e44e:	4940      	ldr	r1, [pc, #256]	; (800e550 <etharp_output_to_arp_index+0x12c>)
 800e450:	4840      	ldr	r0, [pc, #256]	; (800e554 <etharp_output_to_arp_index+0x130>)
 800e452:	f002 facd 	bl	80109f0 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e456:	79fa      	ldrb	r2, [r7, #7]
 800e458:	493b      	ldr	r1, [pc, #236]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e45a:	4613      	mov	r3, r2
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	4413      	add	r3, r2
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	440b      	add	r3, r1
 800e464:	3314      	adds	r3, #20
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d153      	bne.n	800e514 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e46c:	79fa      	ldrb	r2, [r7, #7]
 800e46e:	4936      	ldr	r1, [pc, #216]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e470:	4613      	mov	r3, r2
 800e472:	005b      	lsls	r3, r3, #1
 800e474:	4413      	add	r3, r2
 800e476:	00db      	lsls	r3, r3, #3
 800e478:	440b      	add	r3, r1
 800e47a:	3312      	adds	r3, #18
 800e47c:	881b      	ldrh	r3, [r3, #0]
 800e47e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e482:	d919      	bls.n	800e4b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e484:	79fa      	ldrb	r2, [r7, #7]
 800e486:	4613      	mov	r3, r2
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	4413      	add	r3, r2
 800e48c:	00db      	lsls	r3, r3, #3
 800e48e:	4a2e      	ldr	r2, [pc, #184]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e490:	4413      	add	r3, r2
 800e492:	3304      	adds	r3, #4
 800e494:	4619      	mov	r1, r3
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f000 fb4c 	bl	800eb34 <etharp_request>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d138      	bne.n	800e514 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e4a2:	79fa      	ldrb	r2, [r7, #7]
 800e4a4:	4928      	ldr	r1, [pc, #160]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	4413      	add	r3, r2
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	440b      	add	r3, r1
 800e4b0:	3314      	adds	r3, #20
 800e4b2:	2203      	movs	r2, #3
 800e4b4:	701a      	strb	r2, [r3, #0]
 800e4b6:	e02d      	b.n	800e514 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e4b8:	79fa      	ldrb	r2, [r7, #7]
 800e4ba:	4923      	ldr	r1, [pc, #140]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e4bc:	4613      	mov	r3, r2
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	4413      	add	r3, r2
 800e4c2:	00db      	lsls	r3, r3, #3
 800e4c4:	440b      	add	r3, r1
 800e4c6:	3312      	adds	r3, #18
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e4ce:	d321      	bcc.n	800e514 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e4d0:	79fa      	ldrb	r2, [r7, #7]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	005b      	lsls	r3, r3, #1
 800e4d6:	4413      	add	r3, r2
 800e4d8:	00db      	lsls	r3, r3, #3
 800e4da:	4a1b      	ldr	r2, [pc, #108]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e4dc:	4413      	add	r3, r2
 800e4de:	1d19      	adds	r1, r3, #4
 800e4e0:	79fa      	ldrb	r2, [r7, #7]
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	4413      	add	r3, r2
 800e4e8:	00db      	lsls	r3, r3, #3
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	4a16      	ldr	r2, [pc, #88]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e4ee:	4413      	add	r3, r2
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f000 fafb 	bl	800eaf0 <etharp_request_dst>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d109      	bne.n	800e514 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e500:	79fa      	ldrb	r2, [r7, #7]
 800e502:	4911      	ldr	r1, [pc, #68]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e504:	4613      	mov	r3, r2
 800e506:	005b      	lsls	r3, r3, #1
 800e508:	4413      	add	r3, r2
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	440b      	add	r3, r1
 800e50e:	3314      	adds	r3, #20
 800e510:	2203      	movs	r2, #3
 800e512:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e51a:	79fa      	ldrb	r2, [r7, #7]
 800e51c:	4613      	mov	r3, r2
 800e51e:	005b      	lsls	r3, r3, #1
 800e520:	4413      	add	r3, r2
 800e522:	00db      	lsls	r3, r3, #3
 800e524:	3308      	adds	r3, #8
 800e526:	4a08      	ldr	r2, [pc, #32]	; (800e548 <etharp_output_to_arp_index+0x124>)
 800e528:	4413      	add	r3, r2
 800e52a:	3304      	adds	r3, #4
 800e52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e530:	9200      	str	r2, [sp, #0]
 800e532:	460a      	mov	r2, r1
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f001 fe40 	bl	80101bc <ethernet_output>
 800e53c:	4603      	mov	r3, r0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3710      	adds	r7, #16
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	200072e8 	.word	0x200072e8
 800e54c:	0801a9a0 	.word	0x0801a9a0
 800e550:	0801ab10 	.word	0x0801ab10
 800e554:	0801aa18 	.word	0x0801aa18

0800e558 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08a      	sub	sp, #40	; 0x28
 800e55c:	af02      	add	r7, sp, #8
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d106      	bne.n	800e57c <etharp_output+0x24>
 800e56e:	4b73      	ldr	r3, [pc, #460]	; (800e73c <etharp_output+0x1e4>)
 800e570:	f240 321e 	movw	r2, #798	; 0x31e
 800e574:	4972      	ldr	r1, [pc, #456]	; (800e740 <etharp_output+0x1e8>)
 800e576:	4873      	ldr	r0, [pc, #460]	; (800e744 <etharp_output+0x1ec>)
 800e578:	f002 fa3a 	bl	80109f0 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <etharp_output+0x38>
 800e582:	4b6e      	ldr	r3, [pc, #440]	; (800e73c <etharp_output+0x1e4>)
 800e584:	f240 321f 	movw	r2, #799	; 0x31f
 800e588:	496f      	ldr	r1, [pc, #444]	; (800e748 <etharp_output+0x1f0>)
 800e58a:	486e      	ldr	r0, [pc, #440]	; (800e744 <etharp_output+0x1ec>)
 800e58c:	f002 fa30 	bl	80109f0 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <etharp_output+0x4c>
 800e596:	4b69      	ldr	r3, [pc, #420]	; (800e73c <etharp_output+0x1e4>)
 800e598:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e59c:	496b      	ldr	r1, [pc, #428]	; (800e74c <etharp_output+0x1f4>)
 800e59e:	4869      	ldr	r0, [pc, #420]	; (800e744 <etharp_output+0x1ec>)
 800e5a0:	f002 fa26 	bl	80109f0 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68f9      	ldr	r1, [r7, #12]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f000 fef8 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d002      	beq.n	800e5bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e5b6:	4b66      	ldr	r3, [pc, #408]	; (800e750 <etharp_output+0x1f8>)
 800e5b8:	61fb      	str	r3, [r7, #28]
 800e5ba:	e0af      	b.n	800e71c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5c4:	2be0      	cmp	r3, #224	; 0xe0
 800e5c6:	d118      	bne.n	800e5fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e5d0:	235e      	movs	r3, #94	; 0x5e
 800e5d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	3302      	adds	r3, #2
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3303      	adds	r3, #3
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e5f2:	f107 0310 	add.w	r3, r7, #16
 800e5f6:	61fb      	str	r3, [r7, #28]
 800e5f8:	e090      	b.n	800e71c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	3304      	adds	r3, #4
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	405a      	eors	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	3308      	adds	r3, #8
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4013      	ands	r3, r2
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d012      	beq.n	800e638 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e618:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d00b      	beq.n	800e638 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	330c      	adds	r3, #12
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d003      	beq.n	800e632 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	330c      	adds	r3, #12
 800e62e:	61bb      	str	r3, [r7, #24]
 800e630:	e002      	b.n	800e638 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e632:	f06f 0303 	mvn.w	r3, #3
 800e636:	e07d      	b.n	800e734 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e638:	4b46      	ldr	r3, [pc, #280]	; (800e754 <etharp_output+0x1fc>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	4619      	mov	r1, r3
 800e63e:	4a46      	ldr	r2, [pc, #280]	; (800e758 <etharp_output+0x200>)
 800e640:	460b      	mov	r3, r1
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	440b      	add	r3, r1
 800e646:	00db      	lsls	r3, r3, #3
 800e648:	4413      	add	r3, r2
 800e64a:	3314      	adds	r3, #20
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d925      	bls.n	800e69e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e652:	4b40      	ldr	r3, [pc, #256]	; (800e754 <etharp_output+0x1fc>)
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	4619      	mov	r1, r3
 800e658:	4a3f      	ldr	r2, [pc, #252]	; (800e758 <etharp_output+0x200>)
 800e65a:	460b      	mov	r3, r1
 800e65c:	005b      	lsls	r3, r3, #1
 800e65e:	440b      	add	r3, r1
 800e660:	00db      	lsls	r3, r3, #3
 800e662:	4413      	add	r3, r2
 800e664:	3308      	adds	r3, #8
 800e666:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d117      	bne.n	800e69e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	4b38      	ldr	r3, [pc, #224]	; (800e754 <etharp_output+0x1fc>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	4618      	mov	r0, r3
 800e678:	4937      	ldr	r1, [pc, #220]	; (800e758 <etharp_output+0x200>)
 800e67a:	4603      	mov	r3, r0
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4403      	add	r3, r0
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	440b      	add	r3, r1
 800e684:	3304      	adds	r3, #4
 800e686:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e688:	429a      	cmp	r2, r3
 800e68a:	d108      	bne.n	800e69e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e68c:	4b31      	ldr	r3, [pc, #196]	; (800e754 <etharp_output+0x1fc>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	461a      	mov	r2, r3
 800e692:	68b9      	ldr	r1, [r7, #8]
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f7ff fec5 	bl	800e424 <etharp_output_to_arp_index>
 800e69a:	4603      	mov	r3, r0
 800e69c:	e04a      	b.n	800e734 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e69e:	2300      	movs	r3, #0
 800e6a0:	75fb      	strb	r3, [r7, #23]
 800e6a2:	e031      	b.n	800e708 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e6a4:	7dfa      	ldrb	r2, [r7, #23]
 800e6a6:	492c      	ldr	r1, [pc, #176]	; (800e758 <etharp_output+0x200>)
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	4413      	add	r3, r2
 800e6ae:	00db      	lsls	r3, r3, #3
 800e6b0:	440b      	add	r3, r1
 800e6b2:	3314      	adds	r3, #20
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d923      	bls.n	800e702 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e6ba:	7dfa      	ldrb	r2, [r7, #23]
 800e6bc:	4926      	ldr	r1, [pc, #152]	; (800e758 <etharp_output+0x200>)
 800e6be:	4613      	mov	r3, r2
 800e6c0:	005b      	lsls	r3, r3, #1
 800e6c2:	4413      	add	r3, r2
 800e6c4:	00db      	lsls	r3, r3, #3
 800e6c6:	440b      	add	r3, r1
 800e6c8:	3308      	adds	r3, #8
 800e6ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d117      	bne.n	800e702 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	6819      	ldr	r1, [r3, #0]
 800e6d6:	7dfa      	ldrb	r2, [r7, #23]
 800e6d8:	481f      	ldr	r0, [pc, #124]	; (800e758 <etharp_output+0x200>)
 800e6da:	4613      	mov	r3, r2
 800e6dc:	005b      	lsls	r3, r3, #1
 800e6de:	4413      	add	r3, r2
 800e6e0:	00db      	lsls	r3, r3, #3
 800e6e2:	4403      	add	r3, r0
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e6e8:	4299      	cmp	r1, r3
 800e6ea:	d10a      	bne.n	800e702 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e6ec:	4a19      	ldr	r2, [pc, #100]	; (800e754 <etharp_output+0x1fc>)
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e6f2:	7dfb      	ldrb	r3, [r7, #23]
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	68b9      	ldr	r1, [r7, #8]
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f7ff fe93 	bl	800e424 <etharp_output_to_arp_index>
 800e6fe:	4603      	mov	r3, r0
 800e700:	e018      	b.n	800e734 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e702:	7dfb      	ldrb	r3, [r7, #23]
 800e704:	3301      	adds	r3, #1
 800e706:	75fb      	strb	r3, [r7, #23]
 800e708:	7dfb      	ldrb	r3, [r7, #23]
 800e70a:	2b09      	cmp	r3, #9
 800e70c:	d9ca      	bls.n	800e6a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e70e:	68ba      	ldr	r2, [r7, #8]
 800e710:	69b9      	ldr	r1, [r7, #24]
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f000 f822 	bl	800e75c <etharp_query>
 800e718:	4603      	mov	r3, r0
 800e71a:	e00b      	b.n	800e734 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	68b9      	ldr	r1, [r7, #8]
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f001 fd45 	bl	80101bc <ethernet_output>
 800e732:	4603      	mov	r3, r0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3720      	adds	r7, #32
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	0801a9a0 	.word	0x0801a9a0
 800e740:	0801aaf0 	.word	0x0801aaf0
 800e744:	0801aa18 	.word	0x0801aa18
 800e748:	0801ab40 	.word	0x0801ab40
 800e74c:	0801aae0 	.word	0x0801aae0
 800e750:	0801b150 	.word	0x0801b150
 800e754:	200073d8 	.word	0x200073d8
 800e758:	200072e8 	.word	0x200072e8

0800e75c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b08c      	sub	sp, #48	; 0x30
 800e760:	af02      	add	r7, sp, #8
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3326      	adds	r3, #38	; 0x26
 800e76c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e76e:	23ff      	movs	r3, #255	; 0xff
 800e770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68f9      	ldr	r1, [r7, #12]
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 fe0e 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10c      	bne.n	800e7a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e792:	2be0      	cmp	r3, #224	; 0xe0
 800e794:	d006      	beq.n	800e7a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d003      	beq.n	800e7a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e7a4:	f06f 030f 	mvn.w	r3, #15
 800e7a8:	e101      	b.n	800e9ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	68b8      	ldr	r0, [r7, #8]
 800e7b0:	f7ff fb60 	bl	800de74 <etharp_find_entry>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e7b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	da02      	bge.n	800e7c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e7c0:	8a7b      	ldrh	r3, [r7, #18]
 800e7c2:	b25b      	sxtb	r3, r3
 800e7c4:	e0f3      	b.n	800e9ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e7c6:	8a7b      	ldrh	r3, [r7, #18]
 800e7c8:	2b7e      	cmp	r3, #126	; 0x7e
 800e7ca:	d906      	bls.n	800e7da <etharp_query+0x7e>
 800e7cc:	4b7a      	ldr	r3, [pc, #488]	; (800e9b8 <etharp_query+0x25c>)
 800e7ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e7d2:	497a      	ldr	r1, [pc, #488]	; (800e9bc <etharp_query+0x260>)
 800e7d4:	487a      	ldr	r0, [pc, #488]	; (800e9c0 <etharp_query+0x264>)
 800e7d6:	f002 f90b 	bl	80109f0 <printf>
  i = (netif_addr_idx_t)i_err;
 800e7da:	8a7b      	ldrh	r3, [r7, #18]
 800e7dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e7de:	7c7a      	ldrb	r2, [r7, #17]
 800e7e0:	4978      	ldr	r1, [pc, #480]	; (800e9c4 <etharp_query+0x268>)
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	4413      	add	r3, r2
 800e7e8:	00db      	lsls	r3, r3, #3
 800e7ea:	440b      	add	r3, r1
 800e7ec:	3314      	adds	r3, #20
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d115      	bne.n	800e820 <etharp_query+0xc4>
    is_new_entry = 1;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e7f8:	7c7a      	ldrb	r2, [r7, #17]
 800e7fa:	4972      	ldr	r1, [pc, #456]	; (800e9c4 <etharp_query+0x268>)
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	4413      	add	r3, r2
 800e802:	00db      	lsls	r3, r3, #3
 800e804:	440b      	add	r3, r1
 800e806:	3314      	adds	r3, #20
 800e808:	2201      	movs	r2, #1
 800e80a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e80c:	7c7a      	ldrb	r2, [r7, #17]
 800e80e:	496d      	ldr	r1, [pc, #436]	; (800e9c4 <etharp_query+0x268>)
 800e810:	4613      	mov	r3, r2
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	4413      	add	r3, r2
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	440b      	add	r3, r1
 800e81a:	3308      	adds	r3, #8
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e820:	7c7a      	ldrb	r2, [r7, #17]
 800e822:	4968      	ldr	r1, [pc, #416]	; (800e9c4 <etharp_query+0x268>)
 800e824:	4613      	mov	r3, r2
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	4413      	add	r3, r2
 800e82a:	00db      	lsls	r3, r3, #3
 800e82c:	440b      	add	r3, r1
 800e82e:	3314      	adds	r3, #20
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d011      	beq.n	800e85a <etharp_query+0xfe>
 800e836:	7c7a      	ldrb	r2, [r7, #17]
 800e838:	4962      	ldr	r1, [pc, #392]	; (800e9c4 <etharp_query+0x268>)
 800e83a:	4613      	mov	r3, r2
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	4413      	add	r3, r2
 800e840:	00db      	lsls	r3, r3, #3
 800e842:	440b      	add	r3, r1
 800e844:	3314      	adds	r3, #20
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d806      	bhi.n	800e85a <etharp_query+0xfe>
 800e84c:	4b5a      	ldr	r3, [pc, #360]	; (800e9b8 <etharp_query+0x25c>)
 800e84e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e852:	495d      	ldr	r1, [pc, #372]	; (800e9c8 <etharp_query+0x26c>)
 800e854:	485a      	ldr	r0, [pc, #360]	; (800e9c0 <etharp_query+0x264>)
 800e856:	f002 f8cb 	bl	80109f0 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d102      	bne.n	800e866 <etharp_query+0x10a>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10c      	bne.n	800e880 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e866:	68b9      	ldr	r1, [r7, #8]
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f000 f963 	bl	800eb34 <etharp_request>
 800e86e:	4603      	mov	r3, r0
 800e870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d102      	bne.n	800e880 <etharp_query+0x124>
      return result;
 800e87a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e87e:	e096      	b.n	800e9ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d106      	bne.n	800e894 <etharp_query+0x138>
 800e886:	4b4c      	ldr	r3, [pc, #304]	; (800e9b8 <etharp_query+0x25c>)
 800e888:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e88c:	494f      	ldr	r1, [pc, #316]	; (800e9cc <etharp_query+0x270>)
 800e88e:	484c      	ldr	r0, [pc, #304]	; (800e9c0 <etharp_query+0x264>)
 800e890:	f002 f8ae 	bl	80109f0 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e894:	7c7a      	ldrb	r2, [r7, #17]
 800e896:	494b      	ldr	r1, [pc, #300]	; (800e9c4 <etharp_query+0x268>)
 800e898:	4613      	mov	r3, r2
 800e89a:	005b      	lsls	r3, r3, #1
 800e89c:	4413      	add	r3, r2
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	440b      	add	r3, r1
 800e8a2:	3314      	adds	r3, #20
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d917      	bls.n	800e8da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e8aa:	4a49      	ldr	r2, [pc, #292]	; (800e9d0 <etharp_query+0x274>)
 800e8ac:	7c7b      	ldrb	r3, [r7, #17]
 800e8ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e8b0:	7c7a      	ldrb	r2, [r7, #17]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	4413      	add	r3, r2
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	3308      	adds	r3, #8
 800e8bc:	4a41      	ldr	r2, [pc, #260]	; (800e9c4 <etharp_query+0x268>)
 800e8be:	4413      	add	r3, r2
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8c6:	9200      	str	r2, [sp, #0]
 800e8c8:	697a      	ldr	r2, [r7, #20]
 800e8ca:	6879      	ldr	r1, [r7, #4]
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f001 fc75 	bl	80101bc <ethernet_output>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8d8:	e067      	b.n	800e9aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e8da:	7c7a      	ldrb	r2, [r7, #17]
 800e8dc:	4939      	ldr	r1, [pc, #228]	; (800e9c4 <etharp_query+0x268>)
 800e8de:	4613      	mov	r3, r2
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	4413      	add	r3, r2
 800e8e4:	00db      	lsls	r3, r3, #3
 800e8e6:	440b      	add	r3, r1
 800e8e8:	3314      	adds	r3, #20
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d15c      	bne.n	800e9aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e8f8:	e01c      	b.n	800e934 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	895a      	ldrh	r2, [r3, #10]
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	891b      	ldrh	r3, [r3, #8]
 800e902:	429a      	cmp	r2, r3
 800e904:	d10a      	bne.n	800e91c <etharp_query+0x1c0>
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d006      	beq.n	800e91c <etharp_query+0x1c0>
 800e90e:	4b2a      	ldr	r3, [pc, #168]	; (800e9b8 <etharp_query+0x25c>)
 800e910:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e914:	492f      	ldr	r1, [pc, #188]	; (800e9d4 <etharp_query+0x278>)
 800e916:	482a      	ldr	r0, [pc, #168]	; (800e9c0 <etharp_query+0x264>)
 800e918:	f002 f86a 	bl	80109f0 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	7b1b      	ldrb	r3, [r3, #12]
 800e920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <etharp_query+0x1d2>
        copy_needed = 1;
 800e928:	2301      	movs	r3, #1
 800e92a:	61bb      	str	r3, [r7, #24]
        break;
 800e92c:	e005      	b.n	800e93a <etharp_query+0x1de>
      }
      p = p->next;
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1df      	bne.n	800e8fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d007      	beq.n	800e950 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e946:	200e      	movs	r0, #14
 800e948:	f7f9 fa7a 	bl	8007e40 <pbuf_clone>
 800e94c:	61f8      	str	r0, [r7, #28]
 800e94e:	e004      	b.n	800e95a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e954:	69f8      	ldr	r0, [r7, #28]
 800e956:	f7f9 f815 	bl	8007984 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d021      	beq.n	800e9a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e960:	7c7a      	ldrb	r2, [r7, #17]
 800e962:	4918      	ldr	r1, [pc, #96]	; (800e9c4 <etharp_query+0x268>)
 800e964:	4613      	mov	r3, r2
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	4413      	add	r3, r2
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	440b      	add	r3, r1
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d00a      	beq.n	800e98a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e974:	7c7a      	ldrb	r2, [r7, #17]
 800e976:	4913      	ldr	r1, [pc, #76]	; (800e9c4 <etharp_query+0x268>)
 800e978:	4613      	mov	r3, r2
 800e97a:	005b      	lsls	r3, r3, #1
 800e97c:	4413      	add	r3, r2
 800e97e:	00db      	lsls	r3, r3, #3
 800e980:	440b      	add	r3, r1
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4618      	mov	r0, r3
 800e986:	f7f8 ff5d 	bl	8007844 <pbuf_free>
      }
      arp_table[i].q = p;
 800e98a:	7c7a      	ldrb	r2, [r7, #17]
 800e98c:	490d      	ldr	r1, [pc, #52]	; (800e9c4 <etharp_query+0x268>)
 800e98e:	4613      	mov	r3, r2
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	4413      	add	r3, r2
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	440b      	add	r3, r1
 800e998:	69fa      	ldr	r2, [r7, #28]
 800e99a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9a2:	e002      	b.n	800e9aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e9a4:	23ff      	movs	r3, #255	; 0xff
 800e9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e9aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3728      	adds	r7, #40	; 0x28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	0801a9a0 	.word	0x0801a9a0
 800e9bc:	0801ab4c 	.word	0x0801ab4c
 800e9c0:	0801aa18 	.word	0x0801aa18
 800e9c4:	200072e8 	.word	0x200072e8
 800e9c8:	0801ab5c 	.word	0x0801ab5c
 800e9cc:	0801ab40 	.word	0x0801ab40
 800e9d0:	200073d8 	.word	0x200073d8
 800e9d4:	0801ab84 	.word	0x0801ab84

0800e9d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b08a      	sub	sp, #40	; 0x28
 800e9dc:	af02      	add	r7, sp, #8
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <etharp_raw+0x26>
 800e9f0:	4b3a      	ldr	r3, [pc, #232]	; (800eadc <etharp_raw+0x104>)
 800e9f2:	f240 4257 	movw	r2, #1111	; 0x457
 800e9f6:	493a      	ldr	r1, [pc, #232]	; (800eae0 <etharp_raw+0x108>)
 800e9f8:	483a      	ldr	r0, [pc, #232]	; (800eae4 <etharp_raw+0x10c>)
 800e9fa:	f001 fff9 	bl	80109f0 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e9fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea02:	211c      	movs	r1, #28
 800ea04:	200e      	movs	r0, #14
 800ea06:	f7f8 fc39 	bl	800727c <pbuf_alloc>
 800ea0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ea12:	f04f 33ff 	mov.w	r3, #4294967295
 800ea16:	e05d      	b.n	800ead4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	895b      	ldrh	r3, [r3, #10]
 800ea1c:	2b1b      	cmp	r3, #27
 800ea1e:	d806      	bhi.n	800ea2e <etharp_raw+0x56>
 800ea20:	4b2e      	ldr	r3, [pc, #184]	; (800eadc <etharp_raw+0x104>)
 800ea22:	f240 4262 	movw	r2, #1122	; 0x462
 800ea26:	4930      	ldr	r1, [pc, #192]	; (800eae8 <etharp_raw+0x110>)
 800ea28:	482e      	ldr	r0, [pc, #184]	; (800eae4 <etharp_raw+0x10c>)
 800ea2a:	f001 ffe1 	bl	80109f0 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ea34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7f7 fc50 	bl	80062dc <lwip_htons>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	461a      	mov	r2, r3
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea4a:	2b06      	cmp	r3, #6
 800ea4c:	d006      	beq.n	800ea5c <etharp_raw+0x84>
 800ea4e:	4b23      	ldr	r3, [pc, #140]	; (800eadc <etharp_raw+0x104>)
 800ea50:	f240 4269 	movw	r2, #1129	; 0x469
 800ea54:	4925      	ldr	r1, [pc, #148]	; (800eaec <etharp_raw+0x114>)
 800ea56:	4823      	ldr	r0, [pc, #140]	; (800eae4 <etharp_raw+0x10c>)
 800ea58:	f001 ffca 	bl	80109f0 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	3308      	adds	r3, #8
 800ea60:	2206      	movs	r2, #6
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f001 fd21 	bl	80104ac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	3312      	adds	r3, #18
 800ea6e:	2206      	movs	r2, #6
 800ea70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea72:	4618      	mov	r0, r3
 800ea74:	f001 fd1a 	bl	80104ac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	330e      	adds	r3, #14
 800ea7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea7e:	6812      	ldr	r2, [r2, #0]
 800ea80:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	3318      	adds	r3, #24
 800ea86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea88:	6812      	ldr	r2, [r2, #0]
 800ea8a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	701a      	strb	r2, [r3, #0]
 800ea92:	2200      	movs	r2, #0
 800ea94:	f042 0201 	orr.w	r2, r2, #1
 800ea98:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f042 0208 	orr.w	r2, r2, #8
 800eaa2:	709a      	strb	r2, [r3, #2]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	2206      	movs	r2, #6
 800eaac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	2204      	movs	r2, #4
 800eab2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800eab4:	f640 0306 	movw	r3, #2054	; 0x806
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	69b9      	ldr	r1, [r7, #24]
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f001 fb7b 	bl	80101bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800eac6:	69b8      	ldr	r0, [r7, #24]
 800eac8:	f7f8 febc 	bl	8007844 <pbuf_free>
  p = NULL;
 800eacc:	2300      	movs	r3, #0
 800eace:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ead0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3720      	adds	r7, #32
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	0801a9a0 	.word	0x0801a9a0
 800eae0:	0801aaf0 	.word	0x0801aaf0
 800eae4:	0801aa18 	.word	0x0801aa18
 800eae8:	0801aba0 	.word	0x0801aba0
 800eaec:	0801abd4 	.word	0x0801abd4

0800eaf0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af04      	add	r7, sp, #16
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	9203      	str	r2, [sp, #12]
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	9202      	str	r2, [sp, #8]
 800eb14:	4a06      	ldr	r2, [pc, #24]	; (800eb30 <etharp_request_dst+0x40>)
 800eb16:	9201      	str	r2, [sp, #4]
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f7ff ff5a 	bl	800e9d8 <etharp_raw>
 800eb24:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	0801b158 	.word	0x0801b158

0800eb34 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800eb3e:	4a05      	ldr	r2, [pc, #20]	; (800eb54 <etharp_request+0x20>)
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff ffd4 	bl	800eaf0 <etharp_request_dst>
 800eb48:	4603      	mov	r3, r0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	0801b150 	.word	0x0801b150

0800eb58 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08e      	sub	sp, #56	; 0x38
 800eb5c:	af04      	add	r7, sp, #16
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800eb62:	4b79      	ldr	r3, [pc, #484]	; (800ed48 <icmp_input+0x1f0>)
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	f003 030f 	and.w	r3, r3, #15
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800eb78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb7a:	2b13      	cmp	r3, #19
 800eb7c:	f240 80cd 	bls.w	800ed1a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	895b      	ldrh	r3, [r3, #10]
 800eb84:	2b03      	cmp	r3, #3
 800eb86:	f240 80ca 	bls.w	800ed1e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800eb94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 80b7 	beq.w	800ed0c <icmp_input+0x1b4>
 800eb9e:	2b08      	cmp	r3, #8
 800eba0:	f040 80b7 	bne.w	800ed12 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800eba4:	4b69      	ldr	r3, [pc, #420]	; (800ed4c <icmp_input+0x1f4>)
 800eba6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eba8:	4b67      	ldr	r3, [pc, #412]	; (800ed48 <icmp_input+0x1f0>)
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebb0:	2be0      	cmp	r3, #224	; 0xe0
 800ebb2:	f000 80bb 	beq.w	800ed2c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ebb6:	4b64      	ldr	r3, [pc, #400]	; (800ed48 <icmp_input+0x1f0>)
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	4a63      	ldr	r2, [pc, #396]	; (800ed48 <icmp_input+0x1f0>)
 800ebbc:	6812      	ldr	r2, [r2, #0]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f000 fbed 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f040 80b1 	bne.w	800ed30 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	891b      	ldrh	r3, [r3, #8]
 800ebd2:	2b07      	cmp	r3, #7
 800ebd4:	f240 80a5 	bls.w	800ed22 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ebd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebda:	330e      	adds	r3, #14
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7f8 fd9a 	bl	8007718 <pbuf_add_header>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d04b      	beq.n	800ec82 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	891a      	ldrh	r2, [r3, #8]
 800ebee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebf0:	4413      	add	r3, r2
 800ebf2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	891b      	ldrh	r3, [r3, #8]
 800ebf8:	8b7a      	ldrh	r2, [r7, #26]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	f0c0 809a 	bcc.w	800ed34 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ec00:	8b7b      	ldrh	r3, [r7, #26]
 800ec02:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec06:	4619      	mov	r1, r3
 800ec08:	200e      	movs	r0, #14
 800ec0a:	f7f8 fb37 	bl	800727c <pbuf_alloc>
 800ec0e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f000 8090 	beq.w	800ed38 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	895b      	ldrh	r3, [r3, #10]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec20:	3308      	adds	r3, #8
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d203      	bcs.n	800ec2e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ec26:	6978      	ldr	r0, [r7, #20]
 800ec28:	f7f8 fe0c 	bl	8007844 <pbuf_free>
          goto icmperr;
 800ec2c:	e085      	b.n	800ed3a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec36:	4618      	mov	r0, r3
 800ec38:	f001 fc38 	bl	80104ac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ec3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec3e:	4619      	mov	r1, r3
 800ec40:	6978      	ldr	r0, [r7, #20]
 800ec42:	f7f8 fd79 	bl	8007738 <pbuf_remove_header>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d009      	beq.n	800ec60 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ec4c:	4b40      	ldr	r3, [pc, #256]	; (800ed50 <icmp_input+0x1f8>)
 800ec4e:	22b6      	movs	r2, #182	; 0xb6
 800ec50:	4940      	ldr	r1, [pc, #256]	; (800ed54 <icmp_input+0x1fc>)
 800ec52:	4841      	ldr	r0, [pc, #260]	; (800ed58 <icmp_input+0x200>)
 800ec54:	f001 fecc 	bl	80109f0 <printf>
          pbuf_free(r);
 800ec58:	6978      	ldr	r0, [r7, #20]
 800ec5a:	f7f8 fdf3 	bl	8007844 <pbuf_free>
          goto icmperr;
 800ec5e:	e06c      	b.n	800ed3a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	6978      	ldr	r0, [r7, #20]
 800ec64:	f7f8 ff16 	bl	8007a94 <pbuf_copy>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d003      	beq.n	800ec76 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ec6e:	6978      	ldr	r0, [r7, #20]
 800ec70:	f7f8 fde8 	bl	8007844 <pbuf_free>
          goto icmperr;
 800ec74:	e061      	b.n	800ed3a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7f8 fde4 	bl	8007844 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	607b      	str	r3, [r7, #4]
 800ec80:	e00f      	b.n	800eca2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ec82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec84:	330e      	adds	r3, #14
 800ec86:	4619      	mov	r1, r3
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f7f8 fd55 	bl	8007738 <pbuf_remove_header>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d006      	beq.n	800eca2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ec94:	4b2e      	ldr	r3, [pc, #184]	; (800ed50 <icmp_input+0x1f8>)
 800ec96:	22c7      	movs	r2, #199	; 0xc7
 800ec98:	4930      	ldr	r1, [pc, #192]	; (800ed5c <icmp_input+0x204>)
 800ec9a:	482f      	ldr	r0, [pc, #188]	; (800ed58 <icmp_input+0x200>)
 800ec9c:	f001 fea8 	bl	80109f0 <printf>
          goto icmperr;
 800eca0:	e04b      	b.n	800ed3a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800eca8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecaa:	4619      	mov	r1, r3
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f7f8 fd33 	bl	8007718 <pbuf_add_header>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d12b      	bne.n	800ed10 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ecc6:	4b20      	ldr	r3, [pc, #128]	; (800ed48 <icmp_input+0x1f0>)
 800ecc8:	691a      	ldr	r2, [r3, #16]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	709a      	strb	r2, [r3, #2]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	22ff      	movs	r2, #255	; 0xff
 800ece2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	729a      	strb	r2, [r3, #10]
 800ecea:	2200      	movs	r2, #0
 800ecec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	9302      	str	r3, [sp, #8]
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	23ff      	movs	r3, #255	; 0xff
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	69f9      	ldr	r1, [r7, #28]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fa75 	bl	800f1f0 <ip4_output_if>
 800ed06:	4603      	mov	r3, r0
 800ed08:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ed0a:	e001      	b.n	800ed10 <icmp_input+0x1b8>
      break;
 800ed0c:	bf00      	nop
 800ed0e:	e000      	b.n	800ed12 <icmp_input+0x1ba>
      break;
 800ed10:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7f8 fd96 	bl	8007844 <pbuf_free>
  return;
 800ed18:	e013      	b.n	800ed42 <icmp_input+0x1ea>
    goto lenerr;
 800ed1a:	bf00      	nop
 800ed1c:	e002      	b.n	800ed24 <icmp_input+0x1cc>
    goto lenerr;
 800ed1e:	bf00      	nop
 800ed20:	e000      	b.n	800ed24 <icmp_input+0x1cc>
        goto lenerr;
 800ed22:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f7f8 fd8d 	bl	8007844 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ed2a:	e00a      	b.n	800ed42 <icmp_input+0x1ea>
        goto icmperr;
 800ed2c:	bf00      	nop
 800ed2e:	e004      	b.n	800ed3a <icmp_input+0x1e2>
        goto icmperr;
 800ed30:	bf00      	nop
 800ed32:	e002      	b.n	800ed3a <icmp_input+0x1e2>
          goto icmperr;
 800ed34:	bf00      	nop
 800ed36:	e000      	b.n	800ed3a <icmp_input+0x1e2>
          goto icmperr;
 800ed38:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7f8 fd82 	bl	8007844 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ed40:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ed42:	3728      	adds	r7, #40	; 0x28
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20003d18 	.word	0x20003d18
 800ed4c:	20003d2c 	.word	0x20003d2c
 800ed50:	0801ac18 	.word	0x0801ac18
 800ed54:	0801ac50 	.word	0x0801ac50
 800ed58:	0801ac88 	.word	0x0801ac88
 800ed5c:	0801acb0 	.word	0x0801acb0

0800ed60 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	461a      	mov	r2, r3
 800ed70:	2103      	movs	r1, #3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f814 	bl	800eda0 <icmp_send_response>
}
 800ed78:	bf00      	nop
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ed8c:	78fb      	ldrb	r3, [r7, #3]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	210b      	movs	r1, #11
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 f804 	bl	800eda0 <icmp_send_response>
}
 800ed98:	bf00      	nop
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08c      	sub	sp, #48	; 0x30
 800eda4:	af04      	add	r7, sp, #16
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	460b      	mov	r3, r1
 800edaa:	70fb      	strb	r3, [r7, #3]
 800edac:	4613      	mov	r3, r2
 800edae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800edb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edb4:	2124      	movs	r1, #36	; 0x24
 800edb6:	2022      	movs	r0, #34	; 0x22
 800edb8:	f7f8 fa60 	bl	800727c <pbuf_alloc>
 800edbc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d04c      	beq.n	800ee5e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	895b      	ldrh	r3, [r3, #10]
 800edc8:	2b23      	cmp	r3, #35	; 0x23
 800edca:	d806      	bhi.n	800edda <icmp_send_response+0x3a>
 800edcc:	4b26      	ldr	r3, [pc, #152]	; (800ee68 <icmp_send_response+0xc8>)
 800edce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800edd2:	4926      	ldr	r1, [pc, #152]	; (800ee6c <icmp_send_response+0xcc>)
 800edd4:	4826      	ldr	r0, [pc, #152]	; (800ee70 <icmp_send_response+0xd0>)
 800edd6:	f001 fe0b 	bl	80109f0 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	78fa      	ldrb	r2, [r7, #3]
 800edea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	78ba      	ldrb	r2, [r7, #2]
 800edf0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	2200      	movs	r2, #0
 800edf6:	711a      	strb	r2, [r3, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	2200      	movs	r2, #0
 800ee00:	719a      	strb	r2, [r3, #6]
 800ee02:	2200      	movs	r2, #0
 800ee04:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	f103 0008 	add.w	r0, r3, #8
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	221c      	movs	r2, #28
 800ee14:	4619      	mov	r1, r3
 800ee16:	f001 fb49 	bl	80104ac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ee20:	f107 030c 	add.w	r3, r7, #12
 800ee24:	4618      	mov	r0, r3
 800ee26:	f000 f825 	bl	800ee74 <ip4_route>
 800ee2a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d011      	beq.n	800ee56 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	2200      	movs	r2, #0
 800ee36:	709a      	strb	r2, [r3, #2]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ee3c:	f107 020c 	add.w	r2, r7, #12
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	9302      	str	r3, [sp, #8]
 800ee44:	2301      	movs	r3, #1
 800ee46:	9301      	str	r3, [sp, #4]
 800ee48:	2300      	movs	r3, #0
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	23ff      	movs	r3, #255	; 0xff
 800ee4e:	2100      	movs	r1, #0
 800ee50:	69f8      	ldr	r0, [r7, #28]
 800ee52:	f000 f9cd 	bl	800f1f0 <ip4_output_if>
  }
  pbuf_free(q);
 800ee56:	69f8      	ldr	r0, [r7, #28]
 800ee58:	f7f8 fcf4 	bl	8007844 <pbuf_free>
 800ee5c:	e000      	b.n	800ee60 <icmp_send_response+0xc0>
    return;
 800ee5e:	bf00      	nop
}
 800ee60:	3720      	adds	r7, #32
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	0801ac18 	.word	0x0801ac18
 800ee6c:	0801ace4 	.word	0x0801ace4
 800ee70:	0801ac88 	.word	0x0801ac88

0800ee74 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ee7c:	4b33      	ldr	r3, [pc, #204]	; (800ef4c <ip4_route+0xd8>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	60fb      	str	r3, [r7, #12]
 800ee82:	e036      	b.n	800eef2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d02b      	beq.n	800eeec <ip4_route+0x78>
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee9a:	089b      	lsrs	r3, r3, #2
 800ee9c:	f003 0301 	and.w	r3, r3, #1
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d022      	beq.n	800eeec <ip4_route+0x78>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	3304      	adds	r3, #4
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d01d      	beq.n	800eeec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	405a      	eors	r2, r3
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	3308      	adds	r3, #8
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4013      	ands	r3, r2
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d101      	bne.n	800eecc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	e038      	b.n	800ef3e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eed2:	f003 0302 	and.w	r3, r3, #2
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d108      	bne.n	800eeec <ip4_route+0x78>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	330c      	adds	r3, #12
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d101      	bne.n	800eeec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	e028      	b.n	800ef3e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	60fb      	str	r3, [r7, #12]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1c5      	bne.n	800ee84 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eef8:	4b15      	ldr	r3, [pc, #84]	; (800ef50 <ip4_route+0xdc>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d01a      	beq.n	800ef36 <ip4_route+0xc2>
 800ef00:	4b13      	ldr	r3, [pc, #76]	; (800ef50 <ip4_route+0xdc>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef08:	f003 0301 	and.w	r3, r3, #1
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d012      	beq.n	800ef36 <ip4_route+0xc2>
 800ef10:	4b0f      	ldr	r3, [pc, #60]	; (800ef50 <ip4_route+0xdc>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef18:	f003 0304 	and.w	r3, r3, #4
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00a      	beq.n	800ef36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ef20:	4b0b      	ldr	r3, [pc, #44]	; (800ef50 <ip4_route+0xdc>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3304      	adds	r3, #4
 800ef26:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d004      	beq.n	800ef36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	2b7f      	cmp	r3, #127	; 0x7f
 800ef34:	d101      	bne.n	800ef3a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ef36:	2300      	movs	r3, #0
 800ef38:	e001      	b.n	800ef3e <ip4_route+0xca>
  }

  return netif_default;
 800ef3a:	4b05      	ldr	r3, [pc, #20]	; (800ef50 <ip4_route+0xdc>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	2000727c 	.word	0x2000727c
 800ef50:	20007280 	.word	0x20007280

0800ef54 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d016      	beq.n	800ef9a <ip4_input_accept+0x46>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	3304      	adds	r3, #4
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d011      	beq.n	800ef9a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ef76:	4b0b      	ldr	r3, [pc, #44]	; (800efa4 <ip4_input_accept+0x50>)
 800ef78:	695a      	ldr	r2, [r3, #20]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d008      	beq.n	800ef96 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ef84:	4b07      	ldr	r3, [pc, #28]	; (800efa4 <ip4_input_accept+0x50>)
 800ef86:	695b      	ldr	r3, [r3, #20]
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 fa08 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800ef90:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d001      	beq.n	800ef9a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ef96:	2301      	movs	r3, #1
 800ef98:	e000      	b.n	800ef9c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	20003d18 	.word	0x20003d18

0800efa8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	091b      	lsrs	r3, r3, #4
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b04      	cmp	r3, #4
 800efc2:	d004      	beq.n	800efce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7f8 fc3d 	bl	8007844 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800efca:	2300      	movs	r3, #0
 800efcc:	e107      	b.n	800f1de <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	f003 030f 	and.w	r3, r3, #15
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	885b      	ldrh	r3, [r3, #2]
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f7 f979 	bl	80062dc <lwip_htons>
 800efea:	4603      	mov	r3, r0
 800efec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	891b      	ldrh	r3, [r3, #8]
 800eff2:	89ba      	ldrh	r2, [r7, #12]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d204      	bcs.n	800f002 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eff8:	89bb      	ldrh	r3, [r7, #12]
 800effa:	4619      	mov	r1, r3
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7f8 fa9b 	bl	8007538 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	895b      	ldrh	r3, [r3, #10]
 800f006:	89fa      	ldrh	r2, [r7, #14]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d807      	bhi.n	800f01c <ip4_input+0x74>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	891b      	ldrh	r3, [r3, #8]
 800f010:	89ba      	ldrh	r2, [r7, #12]
 800f012:	429a      	cmp	r2, r3
 800f014:	d802      	bhi.n	800f01c <ip4_input+0x74>
 800f016:	89fb      	ldrh	r3, [r7, #14]
 800f018:	2b13      	cmp	r3, #19
 800f01a:	d804      	bhi.n	800f026 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7f8 fc11 	bl	8007844 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	e0db      	b.n	800f1de <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	4a6f      	ldr	r2, [pc, #444]	; (800f1e8 <ip4_input+0x240>)
 800f02c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	4a6d      	ldr	r2, [pc, #436]	; (800f1e8 <ip4_input+0x240>)
 800f034:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f036:	4b6c      	ldr	r3, [pc, #432]	; (800f1e8 <ip4_input+0x240>)
 800f038:	695b      	ldr	r3, [r3, #20]
 800f03a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f03e:	2be0      	cmp	r3, #224	; 0xe0
 800f040:	d112      	bne.n	800f068 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d007      	beq.n	800f062 <ip4_input+0xba>
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	3304      	adds	r3, #4
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <ip4_input+0xba>
      netif = inp;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	613b      	str	r3, [r7, #16]
 800f060:	e02a      	b.n	800f0b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f062:	2300      	movs	r3, #0
 800f064:	613b      	str	r3, [r7, #16]
 800f066:	e027      	b.n	800f0b8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f068:	6838      	ldr	r0, [r7, #0]
 800f06a:	f7ff ff73 	bl	800ef54 <ip4_input_accept>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <ip4_input+0xd2>
      netif = inp;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	613b      	str	r3, [r7, #16]
 800f078:	e01e      	b.n	800f0b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f07e:	4b5a      	ldr	r3, [pc, #360]	; (800f1e8 <ip4_input+0x240>)
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b7f      	cmp	r3, #127	; 0x7f
 800f086:	d017      	beq.n	800f0b8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f088:	4b58      	ldr	r3, [pc, #352]	; (800f1ec <ip4_input+0x244>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	613b      	str	r3, [r7, #16]
 800f08e:	e00e      	b.n	800f0ae <ip4_input+0x106>
          if (netif == inp) {
 800f090:	693a      	ldr	r2, [r7, #16]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	429a      	cmp	r2, r3
 800f096:	d006      	beq.n	800f0a6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f098:	6938      	ldr	r0, [r7, #16]
 800f09a:	f7ff ff5b 	bl	800ef54 <ip4_input_accept>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d108      	bne.n	800f0b6 <ip4_input+0x10e>
 800f0a4:	e000      	b.n	800f0a8 <ip4_input+0x100>
            continue;
 800f0a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	613b      	str	r3, [r7, #16]
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1ed      	bne.n	800f090 <ip4_input+0xe8>
 800f0b4:	e000      	b.n	800f0b8 <ip4_input+0x110>
            break;
 800f0b6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f0b8:	4b4b      	ldr	r3, [pc, #300]	; (800f1e8 <ip4_input+0x240>)
 800f0ba:	691b      	ldr	r3, [r3, #16]
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 f96e 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d105      	bne.n	800f0d6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f0ca:	4b47      	ldr	r3, [pc, #284]	; (800f1e8 <ip4_input+0x240>)
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f0d2:	2be0      	cmp	r3, #224	; 0xe0
 800f0d4:	d104      	bne.n	800f0e0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f7f8 fbb4 	bl	8007844 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	e07e      	b.n	800f1de <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d104      	bne.n	800f0f0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7f8 fbac 	bl	8007844 <pbuf_free>
    return ERR_OK;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	e076      	b.n	800f1de <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	88db      	ldrh	r3, [r3, #6]
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f0fc:	4013      	ands	r3, r2
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00b      	beq.n	800f11a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 fc92 	bl	800fa2c <ip4_reass>
 800f108:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <ip4_input+0x16c>
      return ERR_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	e064      	b.n	800f1de <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f11a:	4a33      	ldr	r2, [pc, #204]	; (800f1e8 <ip4_input+0x240>)
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f120:	4a31      	ldr	r2, [pc, #196]	; (800f1e8 <ip4_input+0x240>)
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f126:	4a30      	ldr	r2, [pc, #192]	; (800f1e8 <ip4_input+0x240>)
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	f003 030f 	and.w	r3, r3, #15
 800f134:	b2db      	uxtb	r3, r3
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	4b2a      	ldr	r3, [pc, #168]	; (800f1e8 <ip4_input+0x240>)
 800f13e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f140:	89fb      	ldrh	r3, [r7, #14]
 800f142:	4619      	mov	r1, r3
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7f8 faf7 	bl	8007738 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	7a5b      	ldrb	r3, [r3, #9]
 800f14e:	2b11      	cmp	r3, #17
 800f150:	d006      	beq.n	800f160 <ip4_input+0x1b8>
 800f152:	2b11      	cmp	r3, #17
 800f154:	dc13      	bgt.n	800f17e <ip4_input+0x1d6>
 800f156:	2b01      	cmp	r3, #1
 800f158:	d00c      	beq.n	800f174 <ip4_input+0x1cc>
 800f15a:	2b06      	cmp	r3, #6
 800f15c:	d005      	beq.n	800f16a <ip4_input+0x1c2>
 800f15e:	e00e      	b.n	800f17e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7fe f9f2 	bl	800d54c <udp_input>
        break;
 800f168:	e026      	b.n	800f1b8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f7fa fa33 	bl	80095d8 <tcp_input>
        break;
 800f172:	e021      	b.n	800f1b8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff fcee 	bl	800eb58 <icmp_input>
        break;
 800f17c:	e01c      	b.n	800f1b8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f17e:	4b1a      	ldr	r3, [pc, #104]	; (800f1e8 <ip4_input+0x240>)
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	6939      	ldr	r1, [r7, #16]
 800f184:	4618      	mov	r0, r3
 800f186:	f000 f90b 	bl	800f3a0 <ip4_addr_isbroadcast_u32>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10f      	bne.n	800f1b0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f190:	4b15      	ldr	r3, [pc, #84]	; (800f1e8 <ip4_input+0x240>)
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f198:	2be0      	cmp	r3, #224	; 0xe0
 800f19a:	d009      	beq.n	800f1b0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f19c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7f8 fb3b 	bl	800781e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f1a8:	2102      	movs	r1, #2
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff fdd8 	bl	800ed60 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7f8 fb47 	bl	8007844 <pbuf_free>
        break;
 800f1b6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f1b8:	4b0b      	ldr	r3, [pc, #44]	; (800f1e8 <ip4_input+0x240>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f1be:	4b0a      	ldr	r3, [pc, #40]	; (800f1e8 <ip4_input+0x240>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f1c4:	4b08      	ldr	r3, [pc, #32]	; (800f1e8 <ip4_input+0x240>)
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f1ca:	4b07      	ldr	r3, [pc, #28]	; (800f1e8 <ip4_input+0x240>)
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f1d0:	4b05      	ldr	r3, [pc, #20]	; (800f1e8 <ip4_input+0x240>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f1d6:	4b04      	ldr	r3, [pc, #16]	; (800f1e8 <ip4_input+0x240>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3718      	adds	r7, #24
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20003d18 	.word	0x20003d18
 800f1ec:	2000727c 	.word	0x2000727c

0800f1f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b08a      	sub	sp, #40	; 0x28
 800f1f4:	af04      	add	r7, sp, #16
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
 800f1fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d009      	beq.n	800f21c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d003      	beq.n	800f216 <ip4_output_if+0x26>
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d102      	bne.n	800f21c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	3304      	adds	r3, #4
 800f21a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f21c:	78fa      	ldrb	r2, [r7, #3]
 800f21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f220:	9302      	str	r3, [sp, #8]
 800f222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f226:	9301      	str	r3, [sp, #4]
 800f228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f22c:	9300      	str	r3, [sp, #0]
 800f22e:	4613      	mov	r3, r2
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	6979      	ldr	r1, [r7, #20]
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f000 f805 	bl	800f244 <ip4_output_if_src>
 800f23a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b088      	sub	sp, #32
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
 800f250:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	7b9b      	ldrb	r3, [r3, #14]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d006      	beq.n	800f268 <ip4_output_if_src+0x24>
 800f25a:	4b4b      	ldr	r3, [pc, #300]	; (800f388 <ip4_output_if_src+0x144>)
 800f25c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f260:	494a      	ldr	r1, [pc, #296]	; (800f38c <ip4_output_if_src+0x148>)
 800f262:	484b      	ldr	r0, [pc, #300]	; (800f390 <ip4_output_if_src+0x14c>)
 800f264:	f001 fbc4 	bl	80109f0 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d060      	beq.n	800f330 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f26e:	2314      	movs	r3, #20
 800f270:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f272:	2114      	movs	r1, #20
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7f8 fa4f 	bl	8007718 <pbuf_add_header>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f280:	f06f 0301 	mvn.w	r3, #1
 800f284:	e07c      	b.n	800f380 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	895b      	ldrh	r3, [r3, #10]
 800f290:	2b13      	cmp	r3, #19
 800f292:	d806      	bhi.n	800f2a2 <ip4_output_if_src+0x5e>
 800f294:	4b3c      	ldr	r3, [pc, #240]	; (800f388 <ip4_output_if_src+0x144>)
 800f296:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f29a:	493e      	ldr	r1, [pc, #248]	; (800f394 <ip4_output_if_src+0x150>)
 800f29c:	483c      	ldr	r0, [pc, #240]	; (800f390 <ip4_output_if_src+0x14c>)
 800f29e:	f001 fba7 	bl	80109f0 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	78fa      	ldrb	r2, [r7, #3]
 800f2a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f2ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f2b8:	8b7b      	ldrh	r3, [r7, #26]
 800f2ba:	089b      	lsrs	r3, r3, #2
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f2d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	891b      	ldrh	r3, [r3, #8]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7f7 f800 	bl	80062dc <lwip_htons>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	461a      	mov	r2, r3
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	719a      	strb	r2, [r3, #6]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f2ee:	4b2a      	ldr	r3, [pc, #168]	; (800f398 <ip4_output_if_src+0x154>)
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7f6 fff2 	bl	80062dc <lwip_htons>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f300:	4b25      	ldr	r3, [pc, #148]	; (800f398 <ip4_output_if_src+0x154>)
 800f302:	881b      	ldrh	r3, [r3, #0]
 800f304:	3301      	adds	r3, #1
 800f306:	b29a      	uxth	r2, r3
 800f308:	4b23      	ldr	r3, [pc, #140]	; (800f398 <ip4_output_if_src+0x154>)
 800f30a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d104      	bne.n	800f31c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f312:	4b22      	ldr	r3, [pc, #136]	; (800f39c <ip4_output_if_src+0x158>)
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	60da      	str	r2, [r3, #12]
 800f31a:	e003      	b.n	800f324 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	2200      	movs	r2, #0
 800f328:	729a      	strb	r2, [r3, #10]
 800f32a:	2200      	movs	r2, #0
 800f32c:	72da      	strb	r2, [r3, #11]
 800f32e:	e00f      	b.n	800f350 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	895b      	ldrh	r3, [r3, #10]
 800f334:	2b13      	cmp	r3, #19
 800f336:	d802      	bhi.n	800f33e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f338:	f06f 0301 	mvn.w	r3, #1
 800f33c:	e020      	b.n	800f380 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f34a:	f107 0314 	add.w	r3, r7, #20
 800f34e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00c      	beq.n	800f372 <ip4_output_if_src+0x12e>
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	891a      	ldrh	r2, [r3, #8]
 800f35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f360:	429a      	cmp	r2, r3
 800f362:	d906      	bls.n	800f372 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f000 fd53 	bl	800fe14 <ip4_frag>
 800f36e:	4603      	mov	r3, r0
 800f370:	e006      	b.n	800f380 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	695b      	ldr	r3, [r3, #20]
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	68f9      	ldr	r1, [r7, #12]
 800f37a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f37c:	4798      	blx	r3
 800f37e:	4603      	mov	r3, r0
}
 800f380:	4618      	mov	r0, r3
 800f382:	3720      	adds	r7, #32
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	0801ad10 	.word	0x0801ad10
 800f38c:	0801ad44 	.word	0x0801ad44
 800f390:	0801ad50 	.word	0x0801ad50
 800f394:	0801ad78 	.word	0x0801ad78
 800f398:	200073da 	.word	0x200073da
 800f39c:	0801b14c 	.word	0x0801b14c

0800f3a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b4:	d002      	beq.n	800f3bc <ip4_addr_isbroadcast_u32+0x1c>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d101      	bne.n	800f3c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e02a      	b.n	800f416 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f3c6:	f003 0302 	and.w	r3, r3, #2
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d101      	bne.n	800f3d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	e021      	b.n	800f416 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d101      	bne.n	800f3e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	e019      	b.n	800f416 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	3304      	adds	r3, #4
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	405a      	eors	r2, r3
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	3308      	adds	r3, #8
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4013      	ands	r3, r2
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d10d      	bne.n	800f414 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	3308      	adds	r3, #8
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	43da      	mvns	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	3308      	adds	r3, #8
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d101      	bne.n	800f414 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f410:	2301      	movs	r3, #1
 800f412:	e000      	b.n	800f416 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f414:	2300      	movs	r3, #0
  }
}
 800f416:	4618      	mov	r0, r3
 800f418:	3714      	adds	r7, #20
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
	...

0800f424 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f42e:	4b12      	ldr	r3, [pc, #72]	; (800f478 <ip_reass_tmr+0x54>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f434:	e018      	b.n	800f468 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	7fdb      	ldrb	r3, [r3, #31]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00b      	beq.n	800f456 <ip_reass_tmr+0x32>
      r->timer--;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	7fdb      	ldrb	r3, [r3, #31]
 800f442:	3b01      	subs	r3, #1
 800f444:	b2da      	uxtb	r2, r3
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	60fb      	str	r3, [r7, #12]
 800f454:	e008      	b.n	800f468 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f460:	68b9      	ldr	r1, [r7, #8]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 f80a 	bl	800f47c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1e3      	bne.n	800f436 <ip_reass_tmr+0x12>
    }
  }
}
 800f46e:	bf00      	nop
 800f470:	bf00      	nop
 800f472:	3710      	adds	r7, #16
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	200073dc 	.word	0x200073dc

0800f47c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b088      	sub	sp, #32
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f486:	2300      	movs	r3, #0
 800f488:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f48a:	683a      	ldr	r2, [r7, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d105      	bne.n	800f49e <ip_reass_free_complete_datagram+0x22>
 800f492:	4b45      	ldr	r3, [pc, #276]	; (800f5a8 <ip_reass_free_complete_datagram+0x12c>)
 800f494:	22ab      	movs	r2, #171	; 0xab
 800f496:	4945      	ldr	r1, [pc, #276]	; (800f5ac <ip_reass_free_complete_datagram+0x130>)
 800f498:	4845      	ldr	r0, [pc, #276]	; (800f5b0 <ip_reass_free_complete_datagram+0x134>)
 800f49a:	f001 faa9 	bl	80109f0 <printf>
  if (prev != NULL) {
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d00a      	beq.n	800f4ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d005      	beq.n	800f4ba <ip_reass_free_complete_datagram+0x3e>
 800f4ae:	4b3e      	ldr	r3, [pc, #248]	; (800f5a8 <ip_reass_free_complete_datagram+0x12c>)
 800f4b0:	22ad      	movs	r2, #173	; 0xad
 800f4b2:	4940      	ldr	r1, [pc, #256]	; (800f5b4 <ip_reass_free_complete_datagram+0x138>)
 800f4b4:	483e      	ldr	r0, [pc, #248]	; (800f5b0 <ip_reass_free_complete_datagram+0x134>)
 800f4b6:	f001 fa9b 	bl	80109f0 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	889b      	ldrh	r3, [r3, #4]
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d12a      	bne.n	800f522 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	6858      	ldr	r0, [r3, #4]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	3308      	adds	r3, #8
 800f4e2:	2214      	movs	r2, #20
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	f000 ffe1 	bl	80104ac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f4ea:	2101      	movs	r1, #1
 800f4ec:	69b8      	ldr	r0, [r7, #24]
 800f4ee:	f7ff fc47 	bl	800ed80 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f4f2:	69b8      	ldr	r0, [r7, #24]
 800f4f4:	f7f8 fa2e 	bl	8007954 <pbuf_clen>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f4fc:	8bfa      	ldrh	r2, [r7, #30]
 800f4fe:	8a7b      	ldrh	r3, [r7, #18]
 800f500:	4413      	add	r3, r2
 800f502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f506:	db05      	blt.n	800f514 <ip_reass_free_complete_datagram+0x98>
 800f508:	4b27      	ldr	r3, [pc, #156]	; (800f5a8 <ip_reass_free_complete_datagram+0x12c>)
 800f50a:	22bc      	movs	r2, #188	; 0xbc
 800f50c:	492a      	ldr	r1, [pc, #168]	; (800f5b8 <ip_reass_free_complete_datagram+0x13c>)
 800f50e:	4828      	ldr	r0, [pc, #160]	; (800f5b0 <ip_reass_free_complete_datagram+0x134>)
 800f510:	f001 fa6e 	bl	80109f0 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f514:	8bfa      	ldrh	r2, [r7, #30]
 800f516:	8a7b      	ldrh	r3, [r7, #18]
 800f518:	4413      	add	r3, r2
 800f51a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f51c:	69b8      	ldr	r0, [r7, #24]
 800f51e:	f7f8 f991 	bl	8007844 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f528:	e01f      	b.n	800f56a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f53a:	68f8      	ldr	r0, [r7, #12]
 800f53c:	f7f8 fa0a 	bl	8007954 <pbuf_clen>
 800f540:	4603      	mov	r3, r0
 800f542:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f544:	8bfa      	ldrh	r2, [r7, #30]
 800f546:	8a7b      	ldrh	r3, [r7, #18]
 800f548:	4413      	add	r3, r2
 800f54a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f54e:	db05      	blt.n	800f55c <ip_reass_free_complete_datagram+0xe0>
 800f550:	4b15      	ldr	r3, [pc, #84]	; (800f5a8 <ip_reass_free_complete_datagram+0x12c>)
 800f552:	22cc      	movs	r2, #204	; 0xcc
 800f554:	4918      	ldr	r1, [pc, #96]	; (800f5b8 <ip_reass_free_complete_datagram+0x13c>)
 800f556:	4816      	ldr	r0, [pc, #88]	; (800f5b0 <ip_reass_free_complete_datagram+0x134>)
 800f558:	f001 fa4a 	bl	80109f0 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f55c:	8bfa      	ldrh	r2, [r7, #30]
 800f55e:	8a7b      	ldrh	r3, [r7, #18]
 800f560:	4413      	add	r3, r2
 800f562:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f7f8 f96d 	bl	8007844 <pbuf_free>
  while (p != NULL) {
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1dc      	bne.n	800f52a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 f8c2 	bl	800f6fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f578:	4b10      	ldr	r3, [pc, #64]	; (800f5bc <ip_reass_free_complete_datagram+0x140>)
 800f57a:	881b      	ldrh	r3, [r3, #0]
 800f57c:	8bfa      	ldrh	r2, [r7, #30]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d905      	bls.n	800f58e <ip_reass_free_complete_datagram+0x112>
 800f582:	4b09      	ldr	r3, [pc, #36]	; (800f5a8 <ip_reass_free_complete_datagram+0x12c>)
 800f584:	22d2      	movs	r2, #210	; 0xd2
 800f586:	490e      	ldr	r1, [pc, #56]	; (800f5c0 <ip_reass_free_complete_datagram+0x144>)
 800f588:	4809      	ldr	r0, [pc, #36]	; (800f5b0 <ip_reass_free_complete_datagram+0x134>)
 800f58a:	f001 fa31 	bl	80109f0 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f58e:	4b0b      	ldr	r3, [pc, #44]	; (800f5bc <ip_reass_free_complete_datagram+0x140>)
 800f590:	881a      	ldrh	r2, [r3, #0]
 800f592:	8bfb      	ldrh	r3, [r7, #30]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	b29a      	uxth	r2, r3
 800f598:	4b08      	ldr	r3, [pc, #32]	; (800f5bc <ip_reass_free_complete_datagram+0x140>)
 800f59a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f59c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3720      	adds	r7, #32
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	0801ada8 	.word	0x0801ada8
 800f5ac:	0801ade4 	.word	0x0801ade4
 800f5b0:	0801adf0 	.word	0x0801adf0
 800f5b4:	0801ae18 	.word	0x0801ae18
 800f5b8:	0801ae2c 	.word	0x0801ae2c
 800f5bc:	200073e0 	.word	0x200073e0
 800f5c0:	0801ae4c 	.word	0x0801ae4c

0800f5c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b08a      	sub	sp, #40	; 0x28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f5e2:	4b28      	ldr	r3, [pc, #160]	; (800f684 <ip_reass_remove_oldest_datagram+0xc0>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f5e8:	e030      	b.n	800f64c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	695a      	ldr	r2, [r3, #20]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d10c      	bne.n	800f610 <ip_reass_remove_oldest_datagram+0x4c>
 800f5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f8:	699a      	ldr	r2, [r3, #24]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d106      	bne.n	800f610 <ip_reass_remove_oldest_datagram+0x4c>
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	899a      	ldrh	r2, [r3, #12]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	889b      	ldrh	r3, [r3, #4]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d014      	beq.n	800f63a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	3301      	adds	r3, #1
 800f614:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f616:	6a3b      	ldr	r3, [r7, #32]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d104      	bne.n	800f626 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	61bb      	str	r3, [r7, #24]
 800f624:	e009      	b.n	800f63a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f628:	7fda      	ldrb	r2, [r3, #31]
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	7fdb      	ldrb	r3, [r3, #31]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d803      	bhi.n	800f63a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f634:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d001      	beq.n	800f646 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f644:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d1cb      	bne.n	800f5ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f652:	6a3b      	ldr	r3, [r7, #32]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d008      	beq.n	800f66a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f658:	69b9      	ldr	r1, [r7, #24]
 800f65a:	6a38      	ldr	r0, [r7, #32]
 800f65c:	f7ff ff0e 	bl	800f47c <ip_reass_free_complete_datagram>
 800f660:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f662:	697a      	ldr	r2, [r7, #20]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	4413      	add	r3, r2
 800f668:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	429a      	cmp	r2, r3
 800f670:	da02      	bge.n	800f678 <ip_reass_remove_oldest_datagram+0xb4>
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	2b01      	cmp	r3, #1
 800f676:	dcac      	bgt.n	800f5d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f678:	697b      	ldr	r3, [r7, #20]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3728      	adds	r7, #40	; 0x28
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	200073dc 	.word	0x200073dc

0800f688 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f692:	2004      	movs	r0, #4
 800f694:	f7f7 fa78 	bl	8006b88 <memp_malloc>
 800f698:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d110      	bne.n	800f6c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f6a0:	6839      	ldr	r1, [r7, #0]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7ff ff8e 	bl	800f5c4 <ip_reass_remove_oldest_datagram>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	dc03      	bgt.n	800f6b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f6b0:	2004      	movs	r0, #4
 800f6b2:	f7f7 fa69 	bl	8006b88 <memp_malloc>
 800f6b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e016      	b.n	800f6f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f6c2:	2220      	movs	r2, #32
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	68f8      	ldr	r0, [r7, #12]
 800f6c8:	f000 ff18 	bl	80104fc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	220f      	movs	r2, #15
 800f6d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f6d2:	4b09      	ldr	r3, [pc, #36]	; (800f6f8 <ip_reass_enqueue_new_datagram+0x70>)
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f6da:	4a07      	ldr	r2, [pc, #28]	; (800f6f8 <ip_reass_enqueue_new_datagram+0x70>)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3308      	adds	r3, #8
 800f6e4:	2214      	movs	r2, #20
 800f6e6:	6879      	ldr	r1, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f000 fedf 	bl	80104ac <memcpy>
  return ipr;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	200073dc 	.word	0x200073dc

0800f6fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f706:	4b10      	ldr	r3, [pc, #64]	; (800f748 <ip_reass_dequeue_datagram+0x4c>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d104      	bne.n	800f71a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4a0c      	ldr	r2, [pc, #48]	; (800f748 <ip_reass_dequeue_datagram+0x4c>)
 800f716:	6013      	str	r3, [r2, #0]
 800f718:	e00d      	b.n	800f736 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d106      	bne.n	800f72e <ip_reass_dequeue_datagram+0x32>
 800f720:	4b0a      	ldr	r3, [pc, #40]	; (800f74c <ip_reass_dequeue_datagram+0x50>)
 800f722:	f240 1245 	movw	r2, #325	; 0x145
 800f726:	490a      	ldr	r1, [pc, #40]	; (800f750 <ip_reass_dequeue_datagram+0x54>)
 800f728:	480a      	ldr	r0, [pc, #40]	; (800f754 <ip_reass_dequeue_datagram+0x58>)
 800f72a:	f001 f961 	bl	80109f0 <printf>
    prev->next = ipr->next;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681a      	ldr	r2, [r3, #0]
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f736:	6879      	ldr	r1, [r7, #4]
 800f738:	2004      	movs	r0, #4
 800f73a:	f7f7 fa71 	bl	8006c20 <memp_free>
}
 800f73e:	bf00      	nop
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
 800f746:	bf00      	nop
 800f748:	200073dc 	.word	0x200073dc
 800f74c:	0801ada8 	.word	0x0801ada8
 800f750:	0801ae70 	.word	0x0801ae70
 800f754:	0801adf0 	.word	0x0801adf0

0800f758 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08c      	sub	sp, #48	; 0x30
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f764:	2300      	movs	r3, #0
 800f766:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f768:	2301      	movs	r3, #1
 800f76a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	885b      	ldrh	r3, [r3, #2]
 800f776:	b29b      	uxth	r3, r3
 800f778:	4618      	mov	r0, r3
 800f77a:	f7f6 fdaf 	bl	80062dc <lwip_htons>
 800f77e:	4603      	mov	r3, r0
 800f780:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	f003 030f 	and.w	r3, r3, #15
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f790:	7e7b      	ldrb	r3, [r7, #25]
 800f792:	b29b      	uxth	r3, r3
 800f794:	8b7a      	ldrh	r2, [r7, #26]
 800f796:	429a      	cmp	r2, r3
 800f798:	d202      	bcs.n	800f7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f79a:	f04f 33ff 	mov.w	r3, #4294967295
 800f79e:	e135      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f7a0:	7e7b      	ldrb	r3, [r7, #25]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	8b7a      	ldrh	r2, [r7, #26]
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	88db      	ldrh	r3, [r3, #6]
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7f6 fd93 	bl	80062dc <lwip_htons>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	701a      	strb	r2, [r3, #0]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	705a      	strb	r2, [r3, #1]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	709a      	strb	r2, [r3, #2]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7dc:	8afa      	ldrh	r2, [r7, #22]
 800f7de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f7e0:	8afa      	ldrh	r2, [r7, #22]
 800f7e2:	8b7b      	ldrh	r3, [r7, #26]
 800f7e4:	4413      	add	r3, r2
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	88db      	ldrh	r3, [r3, #6]
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	8afa      	ldrh	r2, [r7, #22]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d902      	bls.n	800f7fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fc:	e106      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	627b      	str	r3, [r7, #36]	; 0x24
 800f804:	e068      	b.n	800f8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80e:	889b      	ldrh	r3, [r3, #4]
 800f810:	b29a      	uxth	r2, r3
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	889b      	ldrh	r3, [r3, #4]
 800f816:	b29b      	uxth	r3, r3
 800f818:	429a      	cmp	r2, r3
 800f81a:	d235      	bcs.n	800f888 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f820:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f824:	2b00      	cmp	r3, #0
 800f826:	d020      	beq.n	800f86a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82a:	889b      	ldrh	r3, [r3, #4]
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f830:	88db      	ldrh	r3, [r3, #6]
 800f832:	b29b      	uxth	r3, r3
 800f834:	429a      	cmp	r2, r3
 800f836:	d307      	bcc.n	800f848 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	88db      	ldrh	r3, [r3, #6]
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	889b      	ldrh	r3, [r3, #4]
 800f842:	b29b      	uxth	r3, r3
 800f844:	429a      	cmp	r2, r3
 800f846:	d902      	bls.n	800f84e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f848:	f04f 33ff 	mov.w	r3, #4294967295
 800f84c:	e0de      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f850:	68ba      	ldr	r2, [r7, #8]
 800f852:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f856:	88db      	ldrh	r3, [r3, #6]
 800f858:	b29a      	uxth	r2, r3
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	889b      	ldrh	r3, [r3, #4]
 800f85e:	b29b      	uxth	r3, r3
 800f860:	429a      	cmp	r2, r3
 800f862:	d03d      	beq.n	800f8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f864:	2300      	movs	r3, #0
 800f866:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f868:	e03a      	b.n	800f8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86c:	88db      	ldrh	r3, [r3, #6]
 800f86e:	b29a      	uxth	r2, r3
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	889b      	ldrh	r3, [r3, #4]
 800f874:	b29b      	uxth	r3, r3
 800f876:	429a      	cmp	r2, r3
 800f878:	d902      	bls.n	800f880 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f87a:	f04f 33ff 	mov.w	r3, #4294967295
 800f87e:	e0c5      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	605a      	str	r2, [r3, #4]
      break;
 800f886:	e02b      	b.n	800f8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88a:	889b      	ldrh	r3, [r3, #4]
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	889b      	ldrh	r3, [r3, #4]
 800f892:	b29b      	uxth	r3, r3
 800f894:	429a      	cmp	r2, r3
 800f896:	d102      	bne.n	800f89e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f898:	f04f 33ff 	mov.w	r3, #4294967295
 800f89c:	e0b6      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a0:	889b      	ldrh	r3, [r3, #4]
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	88db      	ldrh	r3, [r3, #6]
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d202      	bcs.n	800f8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b2:	e0ab      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d009      	beq.n	800f8ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	88db      	ldrh	r3, [r3, #6]
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	889b      	ldrh	r3, [r3, #4]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d001      	beq.n	800f8ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d193      	bne.n	800f806 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f8de:	e000      	b.n	800f8e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f8e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d12d      	bne.n	800f944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d01c      	beq.n	800f928 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	88db      	ldrh	r3, [r3, #6]
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	889b      	ldrh	r3, [r3, #4]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d906      	bls.n	800f90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f8fe:	4b45      	ldr	r3, [pc, #276]	; (800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f900:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f904:	4944      	ldr	r1, [pc, #272]	; (800fa18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f906:	4845      	ldr	r0, [pc, #276]	; (800fa1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f908:	f001 f872 	bl	80109f0 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	88db      	ldrh	r3, [r3, #6]
 800f916:	b29a      	uxth	r2, r3
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	889b      	ldrh	r3, [r3, #4]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	429a      	cmp	r2, r3
 800f920:	d010      	beq.n	800f944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	623b      	str	r3, [r7, #32]
 800f926:	e00d      	b.n	800f944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d006      	beq.n	800f93e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f930:	4b38      	ldr	r3, [pc, #224]	; (800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f932:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f936:	493a      	ldr	r1, [pc, #232]	; (800fa20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f938:	4838      	ldr	r0, [pc, #224]	; (800fa1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f93a:	f001 f859 	bl	80109f0 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	68ba      	ldr	r2, [r7, #8]
 800f942:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d105      	bne.n	800f956 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	7f9b      	ldrb	r3, [r3, #30]
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	d059      	beq.n	800fa0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d04f      	beq.n	800f9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d006      	beq.n	800f972 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	889b      	ldrh	r3, [r3, #4]
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d002      	beq.n	800f978 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f972:	2300      	movs	r3, #0
 800f974:	623b      	str	r3, [r7, #32]
 800f976:	e041      	b.n	800f9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f982:	e012      	b.n	800f9aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98c:	88db      	ldrh	r3, [r3, #6]
 800f98e:	b29a      	uxth	r2, r3
 800f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f992:	889b      	ldrh	r3, [r3, #4]
 800f994:	b29b      	uxth	r3, r3
 800f996:	429a      	cmp	r2, r3
 800f998:	d002      	beq.n	800f9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f99a:	2300      	movs	r3, #0
 800f99c:	623b      	str	r3, [r7, #32]
            break;
 800f99e:	e007      	b.n	800f9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d1e9      	bne.n	800f984 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f9b0:	6a3b      	ldr	r3, [r7, #32]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d022      	beq.n	800f9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d106      	bne.n	800f9cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f9be:	4b15      	ldr	r3, [pc, #84]	; (800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f9c0:	f240 12df 	movw	r2, #479	; 0x1df
 800f9c4:	4917      	ldr	r1, [pc, #92]	; (800fa24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f9c6:	4815      	ldr	r0, [pc, #84]	; (800fa1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f9c8:	f001 f812 	bl	80109f0 <printf>
          LWIP_ASSERT("sanity check",
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d106      	bne.n	800f9e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f9d8:	4b0e      	ldr	r3, [pc, #56]	; (800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f9da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f9de:	4911      	ldr	r1, [pc, #68]	; (800fa24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f9e0:	480e      	ldr	r0, [pc, #56]	; (800fa1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f9e2:	f001 f805 	bl	80109f0 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d006      	beq.n	800f9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f9ee:	4b09      	ldr	r3, [pc, #36]	; (800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f9f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f9f4:	490c      	ldr	r1, [pc, #48]	; (800fa28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f9f6:	4809      	ldr	r0, [pc, #36]	; (800fa1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f9f8:	f000 fffa 	bl	80109f0 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f9fc:	6a3b      	ldr	r3, [r7, #32]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	bf14      	ite	ne
 800fa02:	2301      	movne	r3, #1
 800fa04:	2300      	moveq	r3, #0
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	e000      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fa0a:	2300      	movs	r3, #0
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3730      	adds	r7, #48	; 0x30
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	0801ada8 	.word	0x0801ada8
 800fa18:	0801ae8c 	.word	0x0801ae8c
 800fa1c:	0801adf0 	.word	0x0801adf0
 800fa20:	0801aeac 	.word	0x0801aeac
 800fa24:	0801aee4 	.word	0x0801aee4
 800fa28:	0801aef4 	.word	0x0801aef4

0800fa2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08e      	sub	sp, #56	; 0x38
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	685b      	ldr	r3, [r3, #4]
 800fa38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	f003 030f 	and.w	r3, r3, #15
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	2b14      	cmp	r3, #20
 800fa4a:	f040 8171 	bne.w	800fd30 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa50:	88db      	ldrh	r3, [r3, #6]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7f6 fc41 	bl	80062dc <lwip_htons>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	00db      	lsls	r3, r3, #3
 800fa64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa68:	885b      	ldrh	r3, [r3, #2]
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f6 fc35 	bl	80062dc <lwip_htons>
 800fa72:	4603      	mov	r3, r0
 800fa74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	f003 030f 	and.w	r3, r3, #15
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fa86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	f0c0 8150 	bcc.w	800fd34 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fa94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa9c:	1ad3      	subs	r3, r2, r3
 800fa9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7f7 ff57 	bl	8007954 <pbuf_clen>
 800faa6:	4603      	mov	r3, r0
 800faa8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800faaa:	4b8c      	ldr	r3, [pc, #560]	; (800fcdc <ip4_reass+0x2b0>)
 800faac:	881b      	ldrh	r3, [r3, #0]
 800faae:	461a      	mov	r2, r3
 800fab0:	8c3b      	ldrh	r3, [r7, #32]
 800fab2:	4413      	add	r3, r2
 800fab4:	2b0a      	cmp	r3, #10
 800fab6:	dd10      	ble.n	800fada <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fab8:	8c3b      	ldrh	r3, [r7, #32]
 800faba:	4619      	mov	r1, r3
 800fabc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fabe:	f7ff fd81 	bl	800f5c4 <ip_reass_remove_oldest_datagram>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f000 8137 	beq.w	800fd38 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800faca:	4b84      	ldr	r3, [pc, #528]	; (800fcdc <ip4_reass+0x2b0>)
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	461a      	mov	r2, r3
 800fad0:	8c3b      	ldrh	r3, [r7, #32]
 800fad2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fad4:	2b0a      	cmp	r3, #10
 800fad6:	f300 812f 	bgt.w	800fd38 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fada:	4b81      	ldr	r3, [pc, #516]	; (800fce0 <ip4_reass+0x2b4>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	633b      	str	r3, [r7, #48]	; 0x30
 800fae0:	e015      	b.n	800fb0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	695a      	ldr	r2, [r3, #20]
 800fae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	429a      	cmp	r2, r3
 800faec:	d10c      	bne.n	800fb08 <ip4_reass+0xdc>
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	699a      	ldr	r2, [r3, #24]
 800faf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf4:	691b      	ldr	r3, [r3, #16]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d106      	bne.n	800fb08 <ip4_reass+0xdc>
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	899a      	ldrh	r2, [r3, #12]
 800fafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb00:	889b      	ldrh	r3, [r3, #4]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d006      	beq.n	800fb16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	633b      	str	r3, [r7, #48]	; 0x30
 800fb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1e6      	bne.n	800fae2 <ip4_reass+0xb6>
 800fb14:	e000      	b.n	800fb18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fb16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d109      	bne.n	800fb32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fb1e:	8c3b      	ldrh	r3, [r7, #32]
 800fb20:	4619      	mov	r1, r3
 800fb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb24:	f7ff fdb0 	bl	800f688 <ip_reass_enqueue_new_datagram>
 800fb28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d11c      	bne.n	800fb6a <ip4_reass+0x13e>
      goto nullreturn;
 800fb30:	e105      	b.n	800fd3e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	88db      	ldrh	r3, [r3, #6]
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7f6 fbcf 	bl	80062dc <lwip_htons>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d110      	bne.n	800fb6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4a:	89db      	ldrh	r3, [r3, #14]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7f6 fbc5 	bl	80062dc <lwip_htons>
 800fb52:	4603      	mov	r3, r0
 800fb54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d006      	beq.n	800fb6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5e:	3308      	adds	r3, #8
 800fb60:	2214      	movs	r2, #20
 800fb62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 fca1 	bl	80104ac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6c:	88db      	ldrh	r3, [r3, #6]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	f003 0320 	and.w	r3, r3, #32
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	bf0c      	ite	eq
 800fb78:	2301      	moveq	r3, #1
 800fb7a:	2300      	movne	r3, #0
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00e      	beq.n	800fba4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fb86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fb88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb8a:	4413      	add	r3, r2
 800fb8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fb8e:	8b7a      	ldrh	r2, [r7, #26]
 800fb90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fb92:	429a      	cmp	r2, r3
 800fb94:	f0c0 80a0 	bcc.w	800fcd8 <ip4_reass+0x2ac>
 800fb98:	8b7b      	ldrh	r3, [r7, #26]
 800fb9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	f200 809a 	bhi.w	800fcd8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fba4:	69fa      	ldr	r2, [r7, #28]
 800fba6:	6879      	ldr	r1, [r7, #4]
 800fba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbaa:	f7ff fdd5 	bl	800f758 <ip_reass_chain_frag_into_datagram_and_validate>
 800fbae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb6:	f000 809b 	beq.w	800fcf0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fbba:	4b48      	ldr	r3, [pc, #288]	; (800fcdc <ip4_reass+0x2b0>)
 800fbbc:	881a      	ldrh	r2, [r3, #0]
 800fbbe:	8c3b      	ldrh	r3, [r7, #32]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	4b45      	ldr	r3, [pc, #276]	; (800fcdc <ip4_reass+0x2b0>)
 800fbc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00d      	beq.n	800fbea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fbce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fbd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbd2:	4413      	add	r3, r2
 800fbd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd8:	8a7a      	ldrh	r2, [r7, #18]
 800fbda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbde:	7f9b      	ldrb	r3, [r3, #30]
 800fbe0:	f043 0301 	orr.w	r3, r3, #1
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d171      	bne.n	800fcd4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf2:	8b9b      	ldrh	r3, [r3, #28]
 800fbf4:	3314      	adds	r3, #20
 800fbf6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	3308      	adds	r3, #8
 800fc0e:	2214      	movs	r2, #20
 800fc10:	4619      	mov	r1, r3
 800fc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc14:	f000 fc4a 	bl	80104ac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fc18:	8a3b      	ldrh	r3, [r7, #16]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7f6 fb5e 	bl	80062dc <lwip_htons>
 800fc20:	4603      	mov	r3, r0
 800fc22:	461a      	mov	r2, r3
 800fc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	719a      	strb	r2, [r3, #6]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc34:	2200      	movs	r2, #0
 800fc36:	729a      	strb	r2, [r3, #10]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fc42:	e00d      	b.n	800fc60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fc4a:	2114      	movs	r1, #20
 800fc4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc4e:	f7f7 fd73 	bl	8007738 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fc52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f7f7 feb7 	bl	80079c8 <pbuf_cat>
      r = iprh->next_pbuf;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1ee      	bne.n	800fc44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fc66:	4b1e      	ldr	r3, [pc, #120]	; (800fce0 <ip4_reass+0x2b4>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d102      	bne.n	800fc76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fc70:	2300      	movs	r3, #0
 800fc72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc74:	e010      	b.n	800fc98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fc76:	4b1a      	ldr	r3, [pc, #104]	; (800fce0 <ip4_reass+0x2b4>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc7c:	e007      	b.n	800fc8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d006      	beq.n	800fc96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d1f4      	bne.n	800fc7e <ip4_reass+0x252>
 800fc94:	e000      	b.n	800fc98 <ip4_reass+0x26c>
          break;
 800fc96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fc98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc9c:	f7ff fd2e 	bl	800f6fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7f7 fe57 	bl	8007954 <pbuf_clen>
 800fca6:	4603      	mov	r3, r0
 800fca8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fcaa:	4b0c      	ldr	r3, [pc, #48]	; (800fcdc <ip4_reass+0x2b0>)
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	8c3a      	ldrh	r2, [r7, #32]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d906      	bls.n	800fcc2 <ip4_reass+0x296>
 800fcb4:	4b0b      	ldr	r3, [pc, #44]	; (800fce4 <ip4_reass+0x2b8>)
 800fcb6:	f240 229b 	movw	r2, #667	; 0x29b
 800fcba:	490b      	ldr	r1, [pc, #44]	; (800fce8 <ip4_reass+0x2bc>)
 800fcbc:	480b      	ldr	r0, [pc, #44]	; (800fcec <ip4_reass+0x2c0>)
 800fcbe:	f000 fe97 	bl	80109f0 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fcc2:	4b06      	ldr	r3, [pc, #24]	; (800fcdc <ip4_reass+0x2b0>)
 800fcc4:	881a      	ldrh	r2, [r3, #0]
 800fcc6:	8c3b      	ldrh	r3, [r7, #32]
 800fcc8:	1ad3      	subs	r3, r2, r3
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	4b03      	ldr	r3, [pc, #12]	; (800fcdc <ip4_reass+0x2b0>)
 800fcce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	e038      	b.n	800fd46 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	e036      	b.n	800fd46 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800fcd8:	bf00      	nop
 800fcda:	e00a      	b.n	800fcf2 <ip4_reass+0x2c6>
 800fcdc:	200073e0 	.word	0x200073e0
 800fce0:	200073dc 	.word	0x200073dc
 800fce4:	0801ada8 	.word	0x0801ada8
 800fce8:	0801af18 	.word	0x0801af18
 800fcec:	0801adf0 	.word	0x0801adf0
    goto nullreturn_ipr;
 800fcf0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d106      	bne.n	800fd06 <ip4_reass+0x2da>
 800fcf8:	4b15      	ldr	r3, [pc, #84]	; (800fd50 <ip4_reass+0x324>)
 800fcfa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fcfe:	4915      	ldr	r1, [pc, #84]	; (800fd54 <ip4_reass+0x328>)
 800fd00:	4815      	ldr	r0, [pc, #84]	; (800fd58 <ip4_reass+0x32c>)
 800fd02:	f000 fe75 	bl	80109f0 <printf>
  if (ipr->p == NULL) {
 800fd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d116      	bne.n	800fd3c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fd0e:	4b13      	ldr	r3, [pc, #76]	; (800fd5c <ip4_reass+0x330>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d006      	beq.n	800fd26 <ip4_reass+0x2fa>
 800fd18:	4b0d      	ldr	r3, [pc, #52]	; (800fd50 <ip4_reass+0x324>)
 800fd1a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fd1e:	4910      	ldr	r1, [pc, #64]	; (800fd60 <ip4_reass+0x334>)
 800fd20:	480d      	ldr	r0, [pc, #52]	; (800fd58 <ip4_reass+0x32c>)
 800fd22:	f000 fe65 	bl	80109f0 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fd26:	2100      	movs	r1, #0
 800fd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd2a:	f7ff fce7 	bl	800f6fc <ip_reass_dequeue_datagram>
 800fd2e:	e006      	b.n	800fd3e <ip4_reass+0x312>
    goto nullreturn;
 800fd30:	bf00      	nop
 800fd32:	e004      	b.n	800fd3e <ip4_reass+0x312>
    goto nullreturn;
 800fd34:	bf00      	nop
 800fd36:	e002      	b.n	800fd3e <ip4_reass+0x312>
      goto nullreturn;
 800fd38:	bf00      	nop
 800fd3a:	e000      	b.n	800fd3e <ip4_reass+0x312>
  }

nullreturn:
 800fd3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7f7 fd80 	bl	8007844 <pbuf_free>
  return NULL;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3738      	adds	r7, #56	; 0x38
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	0801ada8 	.word	0x0801ada8
 800fd54:	0801af34 	.word	0x0801af34
 800fd58:	0801adf0 	.word	0x0801adf0
 800fd5c:	200073dc 	.word	0x200073dc
 800fd60:	0801af40 	.word	0x0801af40

0800fd64 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fd68:	2005      	movs	r0, #5
 800fd6a:	f7f6 ff0d 	bl	8006b88 <memp_malloc>
 800fd6e:	4603      	mov	r3, r0
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fd82:	4b07      	ldr	r3, [pc, #28]	; (800fda0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fd84:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fd88:	4906      	ldr	r1, [pc, #24]	; (800fda4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fd8a:	4807      	ldr	r0, [pc, #28]	; (800fda8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fd8c:	f000 fe30 	bl	80109f0 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fd90:	6879      	ldr	r1, [r7, #4]
 800fd92:	2005      	movs	r0, #5
 800fd94:	f7f6 ff44 	bl	8006c20 <memp_free>
}
 800fd98:	bf00      	nop
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	0801ada8 	.word	0x0801ada8
 800fda4:	0801af60 	.word	0x0801af60
 800fda8:	0801adf0 	.word	0x0801adf0

0800fdac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d106      	bne.n	800fdcc <ipfrag_free_pbuf_custom+0x20>
 800fdbe:	4b11      	ldr	r3, [pc, #68]	; (800fe04 <ipfrag_free_pbuf_custom+0x58>)
 800fdc0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fdc4:	4910      	ldr	r1, [pc, #64]	; (800fe08 <ipfrag_free_pbuf_custom+0x5c>)
 800fdc6:	4811      	ldr	r0, [pc, #68]	; (800fe0c <ipfrag_free_pbuf_custom+0x60>)
 800fdc8:	f000 fe12 	bl	80109f0 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d006      	beq.n	800fde2 <ipfrag_free_pbuf_custom+0x36>
 800fdd4:	4b0b      	ldr	r3, [pc, #44]	; (800fe04 <ipfrag_free_pbuf_custom+0x58>)
 800fdd6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fdda:	490d      	ldr	r1, [pc, #52]	; (800fe10 <ipfrag_free_pbuf_custom+0x64>)
 800fddc:	480b      	ldr	r0, [pc, #44]	; (800fe0c <ipfrag_free_pbuf_custom+0x60>)
 800fdde:	f000 fe07 	bl	80109f0 <printf>
  if (pcr->original != NULL) {
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	695b      	ldr	r3, [r3, #20]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d004      	beq.n	800fdf4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7f7 fd28 	bl	8007844 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7ff ffbd 	bl	800fd74 <ip_frag_free_pbuf_custom_ref>
}
 800fdfa:	bf00      	nop
 800fdfc:	3710      	adds	r7, #16
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	0801ada8 	.word	0x0801ada8
 800fe08:	0801af6c 	.word	0x0801af6c
 800fe0c:	0801adf0 	.word	0x0801adf0
 800fe10:	0801af78 	.word	0x0801af78

0800fe14 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b094      	sub	sp, #80	; 0x50
 800fe18:	af02      	add	r7, sp, #8
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fe20:	2300      	movs	r3, #0
 800fe22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe2a:	3b14      	subs	r3, #20
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	da00      	bge.n	800fe32 <ip4_frag+0x1e>
 800fe30:	3307      	adds	r3, #7
 800fe32:	10db      	asrs	r3, r3, #3
 800fe34:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fe36:	2314      	movs	r3, #20
 800fe38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fe40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe42:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fe44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f003 030f 	and.w	r3, r3, #15
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	009b      	lsls	r3, r3, #2
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	2b14      	cmp	r3, #20
 800fe54:	d002      	beq.n	800fe5c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fe56:	f06f 0305 	mvn.w	r3, #5
 800fe5a:	e110      	b.n	801007e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	895b      	ldrh	r3, [r3, #10]
 800fe60:	2b13      	cmp	r3, #19
 800fe62:	d809      	bhi.n	800fe78 <ip4_frag+0x64>
 800fe64:	4b88      	ldr	r3, [pc, #544]	; (8010088 <ip4_frag+0x274>)
 800fe66:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fe6a:	4988      	ldr	r1, [pc, #544]	; (801008c <ip4_frag+0x278>)
 800fe6c:	4888      	ldr	r0, [pc, #544]	; (8010090 <ip4_frag+0x27c>)
 800fe6e:	f000 fdbf 	bl	80109f0 <printf>
 800fe72:	f06f 0305 	mvn.w	r3, #5
 800fe76:	e102      	b.n	801007e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fe78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7a:	88db      	ldrh	r3, [r3, #6]
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7f6 fa2c 	bl	80062dc <lwip_htons>
 800fe84:	4603      	mov	r3, r0
 800fe86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fe88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fe92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fe98:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	891b      	ldrh	r3, [r3, #8]
 800fe9e:	3b14      	subs	r3, #20
 800fea0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fea4:	e0e1      	b.n	801006a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fea6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fea8:	00db      	lsls	r3, r3, #3
 800feaa:	b29b      	uxth	r3, r3
 800feac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feb0:	4293      	cmp	r3, r2
 800feb2:	bf28      	it	cs
 800feb4:	4613      	movcs	r3, r2
 800feb6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800feb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800febc:	2114      	movs	r1, #20
 800febe:	200e      	movs	r0, #14
 800fec0:	f7f7 f9dc 	bl	800727c <pbuf_alloc>
 800fec4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 80d5 	beq.w	8010078 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed0:	895b      	ldrh	r3, [r3, #10]
 800fed2:	2b13      	cmp	r3, #19
 800fed4:	d806      	bhi.n	800fee4 <ip4_frag+0xd0>
 800fed6:	4b6c      	ldr	r3, [pc, #432]	; (8010088 <ip4_frag+0x274>)
 800fed8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fedc:	496d      	ldr	r1, [pc, #436]	; (8010094 <ip4_frag+0x280>)
 800fede:	486c      	ldr	r0, [pc, #432]	; (8010090 <ip4_frag+0x27c>)
 800fee0:	f000 fd86 	bl	80109f0 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	2214      	movs	r2, #20
 800feea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800feec:	4618      	mov	r0, r3
 800feee:	f000 fadd 	bl	80104ac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fef8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fefa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fefe:	e064      	b.n	800ffca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	895a      	ldrh	r2, [r3, #10]
 800ff04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	895b      	ldrh	r3, [r3, #10]
 800ff0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d906      	bls.n	800ff22 <ip4_frag+0x10e>
 800ff14:	4b5c      	ldr	r3, [pc, #368]	; (8010088 <ip4_frag+0x274>)
 800ff16:	f240 322d 	movw	r2, #813	; 0x32d
 800ff1a:	495f      	ldr	r1, [pc, #380]	; (8010098 <ip4_frag+0x284>)
 800ff1c:	485c      	ldr	r0, [pc, #368]	; (8010090 <ip4_frag+0x27c>)
 800ff1e:	f000 fd67 	bl	80109f0 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ff22:	8bfa      	ldrh	r2, [r7, #30]
 800ff24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	bf28      	it	cs
 800ff2c:	4613      	movcs	r3, r2
 800ff2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ff32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d105      	bne.n	800ff46 <ip4_frag+0x132>
        poff = 0;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	60fb      	str	r3, [r7, #12]
        continue;
 800ff44:	e041      	b.n	800ffca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ff46:	f7ff ff0d 	bl	800fd64 <ip_frag_alloc_pbuf_custom_ref>
 800ff4a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ff4c:	69bb      	ldr	r3, [r7, #24]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d103      	bne.n	800ff5a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ff52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff54:	f7f7 fc76 	bl	8007844 <pbuf_free>
        goto memerr;
 800ff58:	e08f      	b.n	801007a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ff5a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ff60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff62:	4413      	add	r3, r2
 800ff64:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ff68:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ff6c:	9201      	str	r2, [sp, #4]
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	4603      	mov	r3, r0
 800ff72:	2241      	movs	r2, #65	; 0x41
 800ff74:	2000      	movs	r0, #0
 800ff76:	f7f7 faab 	bl	80074d0 <pbuf_alloced_custom>
 800ff7a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d106      	bne.n	800ff90 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ff82:	69b8      	ldr	r0, [r7, #24]
 800ff84:	f7ff fef6 	bl	800fd74 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ff88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff8a:	f7f7 fc5b 	bl	8007844 <pbuf_free>
        goto memerr;
 800ff8e:	e074      	b.n	801007a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ff90:	68f8      	ldr	r0, [r7, #12]
 800ff92:	f7f7 fcf7 	bl	8007984 <pbuf_ref>
      pcr->original = p;
 800ff96:	69bb      	ldr	r3, [r7, #24]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	4a3f      	ldr	r2, [pc, #252]	; (801009c <ip4_frag+0x288>)
 800ffa0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ffa2:	6979      	ldr	r1, [r7, #20]
 800ffa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffa6:	f7f7 fd0f 	bl	80079c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ffaa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ffae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ffb2:	1ad3      	subs	r3, r2, r3
 800ffb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ffb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d004      	beq.n	800ffca <ip4_frag+0x1b6>
        poff = 0;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ffca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d196      	bne.n	800ff00 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ffd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ffd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ffd8:	4413      	add	r3, r2
 800ffda:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffe0:	f1a3 0213 	sub.w	r2, r3, #19
 800ffe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	bfcc      	ite	gt
 800ffec:	2301      	movgt	r3, #1
 800ffee:	2300      	movle	r3, #0
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fff4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fffc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d002      	beq.n	801000a <ip4_frag+0x1f6>
 8010004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010006:	2b00      	cmp	r3, #0
 8010008:	d003      	beq.n	8010012 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801000a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801000c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010010:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010012:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010014:	4618      	mov	r0, r3
 8010016:	f7f6 f961 	bl	80062dc <lwip_htons>
 801001a:	4603      	mov	r3, r0
 801001c:	461a      	mov	r2, r3
 801001e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010020:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010022:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010024:	3314      	adds	r3, #20
 8010026:	b29b      	uxth	r3, r3
 8010028:	4618      	mov	r0, r3
 801002a:	f7f6 f957 	bl	80062dc <lwip_htons>
 801002e:	4603      	mov	r3, r0
 8010030:	461a      	mov	r2, r3
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010038:	2200      	movs	r2, #0
 801003a:	729a      	strb	r2, [r3, #10]
 801003c:	2200      	movs	r2, #0
 801003e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010048:	68b8      	ldr	r0, [r7, #8]
 801004a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801004c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801004e:	f7f7 fbf9 	bl	8007844 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010052:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801005e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010064:	4413      	add	r3, r2
 8010066:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801006a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801006e:	2b00      	cmp	r3, #0
 8010070:	f47f af19 	bne.w	800fea6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010074:	2300      	movs	r3, #0
 8010076:	e002      	b.n	801007e <ip4_frag+0x26a>
      goto memerr;
 8010078:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801007a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801007e:	4618      	mov	r0, r3
 8010080:	3748      	adds	r7, #72	; 0x48
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	0801ada8 	.word	0x0801ada8
 801008c:	0801af84 	.word	0x0801af84
 8010090:	0801adf0 	.word	0x0801adf0
 8010094:	0801afa0 	.word	0x0801afa0
 8010098:	0801afc0 	.word	0x0801afc0
 801009c:	0800fdad 	.word	0x0800fdad

080100a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80100aa:	230e      	movs	r3, #14
 80100ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	895b      	ldrh	r3, [r3, #10]
 80100b2:	2b0e      	cmp	r3, #14
 80100b4:	d96e      	bls.n	8010194 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	7bdb      	ldrb	r3, [r3, #15]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d106      	bne.n	80100cc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100c4:	3301      	adds	r3, #1
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	7b1a      	ldrb	r2, [r3, #12]
 80100d6:	7b5b      	ldrb	r3, [r3, #13]
 80100d8:	021b      	lsls	r3, r3, #8
 80100da:	4313      	orrs	r3, r2
 80100dc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d023      	beq.n	8010132 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d10f      	bne.n	8010112 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	785b      	ldrb	r3, [r3, #1]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d11b      	bne.n	8010132 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80100fe:	2b5e      	cmp	r3, #94	; 0x5e
 8010100:	d117      	bne.n	8010132 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	7b5b      	ldrb	r3, [r3, #13]
 8010106:	f043 0310 	orr.w	r3, r3, #16
 801010a:	b2da      	uxtb	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	735a      	strb	r2, [r3, #13]
 8010110:	e00f      	b.n	8010132 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	2206      	movs	r2, #6
 8010116:	4928      	ldr	r1, [pc, #160]	; (80101b8 <ethernet_input+0x118>)
 8010118:	4618      	mov	r0, r3
 801011a:	f000 f9b7 	bl	801048c <memcmp>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d106      	bne.n	8010132 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	7b5b      	ldrb	r3, [r3, #13]
 8010128:	f043 0308 	orr.w	r3, r3, #8
 801012c:	b2da      	uxtb	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010132:	89fb      	ldrh	r3, [r7, #14]
 8010134:	2b08      	cmp	r3, #8
 8010136:	d003      	beq.n	8010140 <ethernet_input+0xa0>
 8010138:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801013c:	d014      	beq.n	8010168 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801013e:	e032      	b.n	80101a6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010146:	f003 0308 	and.w	r3, r3, #8
 801014a:	2b00      	cmp	r3, #0
 801014c:	d024      	beq.n	8010198 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801014e:	8afb      	ldrh	r3, [r7, #22]
 8010150:	4619      	mov	r1, r3
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7f7 faf0 	bl	8007738 <pbuf_remove_header>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d11e      	bne.n	801019c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801015e:	6839      	ldr	r1, [r7, #0]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7fe ff21 	bl	800efa8 <ip4_input>
      break;
 8010166:	e013      	b.n	8010190 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801016e:	f003 0308 	and.w	r3, r3, #8
 8010172:	2b00      	cmp	r3, #0
 8010174:	d014      	beq.n	80101a0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010176:	8afb      	ldrh	r3, [r7, #22]
 8010178:	4619      	mov	r1, r3
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7f7 fadc 	bl	8007738 <pbuf_remove_header>
 8010180:	4603      	mov	r3, r0
 8010182:	2b00      	cmp	r3, #0
 8010184:	d10e      	bne.n	80101a4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f7fe f8c1 	bl	800e310 <etharp_input>
      break;
 801018e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010190:	2300      	movs	r3, #0
 8010192:	e00c      	b.n	80101ae <ethernet_input+0x10e>
    goto free_and_return;
 8010194:	bf00      	nop
 8010196:	e006      	b.n	80101a6 <ethernet_input+0x106>
        goto free_and_return;
 8010198:	bf00      	nop
 801019a:	e004      	b.n	80101a6 <ethernet_input+0x106>
        goto free_and_return;
 801019c:	bf00      	nop
 801019e:	e002      	b.n	80101a6 <ethernet_input+0x106>
        goto free_and_return;
 80101a0:	bf00      	nop
 80101a2:	e000      	b.n	80101a6 <ethernet_input+0x106>
        goto free_and_return;
 80101a4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7f7 fb4c 	bl	8007844 <pbuf_free>
  return ERR_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3718      	adds	r7, #24
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	0801b150 	.word	0x0801b150

080101bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80101bc:	b580      	push	{r7, lr}
 80101be:	b086      	sub	sp, #24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	607a      	str	r2, [r7, #4]
 80101c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80101ca:	8c3b      	ldrh	r3, [r7, #32]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7f6 f885 	bl	80062dc <lwip_htons>
 80101d2:	4603      	mov	r3, r0
 80101d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80101d6:	210e      	movs	r1, #14
 80101d8:	68b8      	ldr	r0, [r7, #8]
 80101da:	f7f7 fa9d 	bl	8007718 <pbuf_add_header>
 80101de:	4603      	mov	r3, r0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d125      	bne.n	8010230 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	8afa      	ldrh	r2, [r7, #22]
 80101ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	2206      	movs	r2, #6
 80101f4:	6839      	ldr	r1, [r7, #0]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f000 f958 	bl	80104ac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	3306      	adds	r3, #6
 8010200:	2206      	movs	r2, #6
 8010202:	6879      	ldr	r1, [r7, #4]
 8010204:	4618      	mov	r0, r3
 8010206:	f000 f951 	bl	80104ac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010210:	2b06      	cmp	r3, #6
 8010212:	d006      	beq.n	8010222 <ethernet_output+0x66>
 8010214:	4b0a      	ldr	r3, [pc, #40]	; (8010240 <ethernet_output+0x84>)
 8010216:	f44f 7299 	mov.w	r2, #306	; 0x132
 801021a:	490a      	ldr	r1, [pc, #40]	; (8010244 <ethernet_output+0x88>)
 801021c:	480a      	ldr	r0, [pc, #40]	; (8010248 <ethernet_output+0x8c>)
 801021e:	f000 fbe7 	bl	80109f0 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	68b9      	ldr	r1, [r7, #8]
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	4798      	blx	r3
 801022c:	4603      	mov	r3, r0
 801022e:	e002      	b.n	8010236 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010230:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010232:	f06f 0301 	mvn.w	r3, #1
}
 8010236:	4618      	mov	r0, r3
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	0801afd0 	.word	0x0801afd0
 8010244:	0801b008 	.word	0x0801b008
 8010248:	0801b03c 	.word	0x0801b03c

0801024c <__libc_init_array>:
 801024c:	b570      	push	{r4, r5, r6, lr}
 801024e:	4d0d      	ldr	r5, [pc, #52]	; (8010284 <__libc_init_array+0x38>)
 8010250:	4c0d      	ldr	r4, [pc, #52]	; (8010288 <__libc_init_array+0x3c>)
 8010252:	1b64      	subs	r4, r4, r5
 8010254:	10a4      	asrs	r4, r4, #2
 8010256:	2600      	movs	r6, #0
 8010258:	42a6      	cmp	r6, r4
 801025a:	d109      	bne.n	8010270 <__libc_init_array+0x24>
 801025c:	4d0b      	ldr	r5, [pc, #44]	; (801028c <__libc_init_array+0x40>)
 801025e:	4c0c      	ldr	r4, [pc, #48]	; (8010290 <__libc_init_array+0x44>)
 8010260:	f008 f9e2 	bl	8018628 <_init>
 8010264:	1b64      	subs	r4, r4, r5
 8010266:	10a4      	asrs	r4, r4, #2
 8010268:	2600      	movs	r6, #0
 801026a:	42a6      	cmp	r6, r4
 801026c:	d105      	bne.n	801027a <__libc_init_array+0x2e>
 801026e:	bd70      	pop	{r4, r5, r6, pc}
 8010270:	f855 3b04 	ldr.w	r3, [r5], #4
 8010274:	4798      	blx	r3
 8010276:	3601      	adds	r6, #1
 8010278:	e7ee      	b.n	8010258 <__libc_init_array+0xc>
 801027a:	f855 3b04 	ldr.w	r3, [r5], #4
 801027e:	4798      	blx	r3
 8010280:	3601      	adds	r6, #1
 8010282:	e7f2      	b.n	801026a <__libc_init_array+0x1e>
 8010284:	0801b63c 	.word	0x0801b63c
 8010288:	0801b63c 	.word	0x0801b63c
 801028c:	0801b63c 	.word	0x0801b63c
 8010290:	0801b644 	.word	0x0801b644

08010294 <localtime>:
 8010294:	4b02      	ldr	r3, [pc, #8]	; (80102a0 <localtime+0xc>)
 8010296:	6819      	ldr	r1, [r3, #0]
 8010298:	317c      	adds	r1, #124	; 0x7c
 801029a:	f000 b803 	b.w	80102a4 <localtime_r>
 801029e:	bf00      	nop
 80102a0:	2000001c 	.word	0x2000001c

080102a4 <localtime_r>:
 80102a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80102a8:	4680      	mov	r8, r0
 80102aa:	9101      	str	r1, [sp, #4]
 80102ac:	f004 fcb6 	bl	8014c1c <__gettzinfo>
 80102b0:	9901      	ldr	r1, [sp, #4]
 80102b2:	4605      	mov	r5, r0
 80102b4:	4640      	mov	r0, r8
 80102b6:	f004 fcb5 	bl	8014c24 <gmtime_r>
 80102ba:	6943      	ldr	r3, [r0, #20]
 80102bc:	0799      	lsls	r1, r3, #30
 80102be:	4604      	mov	r4, r0
 80102c0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80102c4:	d105      	bne.n	80102d2 <localtime_r+0x2e>
 80102c6:	2264      	movs	r2, #100	; 0x64
 80102c8:	fb97 f3f2 	sdiv	r3, r7, r2
 80102cc:	fb02 7313 	mls	r3, r2, r3, r7
 80102d0:	bb73      	cbnz	r3, 8010330 <localtime_r+0x8c>
 80102d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80102d6:	fb97 f6f3 	sdiv	r6, r7, r3
 80102da:	fb03 7616 	mls	r6, r3, r6, r7
 80102de:	fab6 f386 	clz	r3, r6
 80102e2:	095b      	lsrs	r3, r3, #5
 80102e4:	4e67      	ldr	r6, [pc, #412]	; (8010484 <localtime_r+0x1e0>)
 80102e6:	2230      	movs	r2, #48	; 0x30
 80102e8:	fb02 6603 	mla	r6, r2, r3, r6
 80102ec:	f001 fef6 	bl	80120dc <__tz_lock>
 80102f0:	f001 ff00 	bl	80120f4 <_tzset_unlocked>
 80102f4:	4b64      	ldr	r3, [pc, #400]	; (8010488 <localtime_r+0x1e4>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	b34b      	cbz	r3, 801034e <localtime_r+0xaa>
 80102fa:	686b      	ldr	r3, [r5, #4]
 80102fc:	42bb      	cmp	r3, r7
 80102fe:	d119      	bne.n	8010334 <localtime_r+0x90>
 8010300:	682f      	ldr	r7, [r5, #0]
 8010302:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010306:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801030a:	b9df      	cbnz	r7, 8010344 <localtime_r+0xa0>
 801030c:	4282      	cmp	r2, r0
 801030e:	eb73 0101 	sbcs.w	r1, r3, r1
 8010312:	da23      	bge.n	801035c <localtime_r+0xb8>
 8010314:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8010318:	4282      	cmp	r2, r0
 801031a:	eb73 0701 	sbcs.w	r7, r3, r1
 801031e:	bfb4      	ite	lt
 8010320:	2701      	movlt	r7, #1
 8010322:	2700      	movge	r7, #0
 8010324:	4282      	cmp	r2, r0
 8010326:	418b      	sbcs	r3, r1
 8010328:	6227      	str	r7, [r4, #32]
 801032a:	db19      	blt.n	8010360 <localtime_r+0xbc>
 801032c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801032e:	e018      	b.n	8010362 <localtime_r+0xbe>
 8010330:	2301      	movs	r3, #1
 8010332:	e7d7      	b.n	80102e4 <localtime_r+0x40>
 8010334:	4638      	mov	r0, r7
 8010336:	f001 fe27 	bl	8011f88 <__tzcalc_limits>
 801033a:	2800      	cmp	r0, #0
 801033c:	d1e0      	bne.n	8010300 <localtime_r+0x5c>
 801033e:	f04f 33ff 	mov.w	r3, #4294967295
 8010342:	e004      	b.n	801034e <localtime_r+0xaa>
 8010344:	4282      	cmp	r2, r0
 8010346:	eb73 0101 	sbcs.w	r1, r3, r1
 801034a:	da02      	bge.n	8010352 <localtime_r+0xae>
 801034c:	2300      	movs	r3, #0
 801034e:	6223      	str	r3, [r4, #32]
 8010350:	e7ec      	b.n	801032c <localtime_r+0x88>
 8010352:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8010356:	4282      	cmp	r2, r0
 8010358:	418b      	sbcs	r3, r1
 801035a:	daf7      	bge.n	801034c <localtime_r+0xa8>
 801035c:	2301      	movs	r3, #1
 801035e:	6223      	str	r3, [r4, #32]
 8010360:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010362:	6861      	ldr	r1, [r4, #4]
 8010364:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8010368:	203c      	movs	r0, #60	; 0x3c
 801036a:	fb93 f5f2 	sdiv	r5, r3, r2
 801036e:	fb02 3315 	mls	r3, r2, r5, r3
 8010372:	fb93 f2f0 	sdiv	r2, r3, r0
 8010376:	fb00 3012 	mls	r0, r0, r2, r3
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	1a89      	subs	r1, r1, r2
 801037e:	68a2      	ldr	r2, [r4, #8]
 8010380:	6061      	str	r1, [r4, #4]
 8010382:	1a1b      	subs	r3, r3, r0
 8010384:	1b52      	subs	r2, r2, r5
 8010386:	2b3b      	cmp	r3, #59	; 0x3b
 8010388:	6023      	str	r3, [r4, #0]
 801038a:	60a2      	str	r2, [r4, #8]
 801038c:	dd35      	ble.n	80103fa <localtime_r+0x156>
 801038e:	3101      	adds	r1, #1
 8010390:	6061      	str	r1, [r4, #4]
 8010392:	3b3c      	subs	r3, #60	; 0x3c
 8010394:	6023      	str	r3, [r4, #0]
 8010396:	6863      	ldr	r3, [r4, #4]
 8010398:	2b3b      	cmp	r3, #59	; 0x3b
 801039a:	dd34      	ble.n	8010406 <localtime_r+0x162>
 801039c:	3201      	adds	r2, #1
 801039e:	60a2      	str	r2, [r4, #8]
 80103a0:	3b3c      	subs	r3, #60	; 0x3c
 80103a2:	6063      	str	r3, [r4, #4]
 80103a4:	68a3      	ldr	r3, [r4, #8]
 80103a6:	2b17      	cmp	r3, #23
 80103a8:	dd33      	ble.n	8010412 <localtime_r+0x16e>
 80103aa:	69e2      	ldr	r2, [r4, #28]
 80103ac:	3201      	adds	r2, #1
 80103ae:	61e2      	str	r2, [r4, #28]
 80103b0:	69a2      	ldr	r2, [r4, #24]
 80103b2:	3201      	adds	r2, #1
 80103b4:	2a06      	cmp	r2, #6
 80103b6:	bfc8      	it	gt
 80103b8:	2200      	movgt	r2, #0
 80103ba:	61a2      	str	r2, [r4, #24]
 80103bc:	68e2      	ldr	r2, [r4, #12]
 80103be:	3b18      	subs	r3, #24
 80103c0:	3201      	adds	r2, #1
 80103c2:	60a3      	str	r3, [r4, #8]
 80103c4:	6923      	ldr	r3, [r4, #16]
 80103c6:	60e2      	str	r2, [r4, #12]
 80103c8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80103cc:	428a      	cmp	r2, r1
 80103ce:	dd0e      	ble.n	80103ee <localtime_r+0x14a>
 80103d0:	2b0b      	cmp	r3, #11
 80103d2:	eba2 0201 	sub.w	r2, r2, r1
 80103d6:	60e2      	str	r2, [r4, #12]
 80103d8:	f103 0201 	add.w	r2, r3, #1
 80103dc:	bf09      	itett	eq
 80103de:	6963      	ldreq	r3, [r4, #20]
 80103e0:	6122      	strne	r2, [r4, #16]
 80103e2:	2200      	moveq	r2, #0
 80103e4:	3301      	addeq	r3, #1
 80103e6:	bf02      	ittt	eq
 80103e8:	6122      	streq	r2, [r4, #16]
 80103ea:	6163      	streq	r3, [r4, #20]
 80103ec:	61e2      	streq	r2, [r4, #28]
 80103ee:	f001 fe7b 	bl	80120e8 <__tz_unlock>
 80103f2:	4620      	mov	r0, r4
 80103f4:	b002      	add	sp, #8
 80103f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	dacb      	bge.n	8010396 <localtime_r+0xf2>
 80103fe:	3901      	subs	r1, #1
 8010400:	6061      	str	r1, [r4, #4]
 8010402:	333c      	adds	r3, #60	; 0x3c
 8010404:	e7c6      	b.n	8010394 <localtime_r+0xf0>
 8010406:	2b00      	cmp	r3, #0
 8010408:	dacc      	bge.n	80103a4 <localtime_r+0x100>
 801040a:	3a01      	subs	r2, #1
 801040c:	60a2      	str	r2, [r4, #8]
 801040e:	333c      	adds	r3, #60	; 0x3c
 8010410:	e7c7      	b.n	80103a2 <localtime_r+0xfe>
 8010412:	2b00      	cmp	r3, #0
 8010414:	daeb      	bge.n	80103ee <localtime_r+0x14a>
 8010416:	69e2      	ldr	r2, [r4, #28]
 8010418:	3a01      	subs	r2, #1
 801041a:	61e2      	str	r2, [r4, #28]
 801041c:	69a2      	ldr	r2, [r4, #24]
 801041e:	3a01      	subs	r2, #1
 8010420:	bf48      	it	mi
 8010422:	2206      	movmi	r2, #6
 8010424:	61a2      	str	r2, [r4, #24]
 8010426:	68e2      	ldr	r2, [r4, #12]
 8010428:	3318      	adds	r3, #24
 801042a:	3a01      	subs	r2, #1
 801042c:	60e2      	str	r2, [r4, #12]
 801042e:	60a3      	str	r3, [r4, #8]
 8010430:	2a00      	cmp	r2, #0
 8010432:	d1dc      	bne.n	80103ee <localtime_r+0x14a>
 8010434:	6923      	ldr	r3, [r4, #16]
 8010436:	3b01      	subs	r3, #1
 8010438:	d405      	bmi.n	8010446 <localtime_r+0x1a2>
 801043a:	6123      	str	r3, [r4, #16]
 801043c:	6923      	ldr	r3, [r4, #16]
 801043e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8010442:	60e3      	str	r3, [r4, #12]
 8010444:	e7d3      	b.n	80103ee <localtime_r+0x14a>
 8010446:	230b      	movs	r3, #11
 8010448:	6123      	str	r3, [r4, #16]
 801044a:	6963      	ldr	r3, [r4, #20]
 801044c:	1e5a      	subs	r2, r3, #1
 801044e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8010452:	6162      	str	r2, [r4, #20]
 8010454:	079a      	lsls	r2, r3, #30
 8010456:	d105      	bne.n	8010464 <localtime_r+0x1c0>
 8010458:	2164      	movs	r1, #100	; 0x64
 801045a:	fb93 f2f1 	sdiv	r2, r3, r1
 801045e:	fb01 3212 	mls	r2, r1, r2, r3
 8010462:	b962      	cbnz	r2, 801047e <localtime_r+0x1da>
 8010464:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010468:	fb93 f1f2 	sdiv	r1, r3, r2
 801046c:	fb02 3311 	mls	r3, r2, r1, r3
 8010470:	fab3 f383 	clz	r3, r3
 8010474:	095b      	lsrs	r3, r3, #5
 8010476:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801047a:	61e3      	str	r3, [r4, #28]
 801047c:	e7de      	b.n	801043c <localtime_r+0x198>
 801047e:	2301      	movs	r3, #1
 8010480:	e7f9      	b.n	8010476 <localtime_r+0x1d2>
 8010482:	bf00      	nop
 8010484:	0801b2c4 	.word	0x0801b2c4
 8010488:	20007404 	.word	0x20007404

0801048c <memcmp>:
 801048c:	b510      	push	{r4, lr}
 801048e:	3901      	subs	r1, #1
 8010490:	4402      	add	r2, r0
 8010492:	4290      	cmp	r0, r2
 8010494:	d101      	bne.n	801049a <memcmp+0xe>
 8010496:	2000      	movs	r0, #0
 8010498:	e005      	b.n	80104a6 <memcmp+0x1a>
 801049a:	7803      	ldrb	r3, [r0, #0]
 801049c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80104a0:	42a3      	cmp	r3, r4
 80104a2:	d001      	beq.n	80104a8 <memcmp+0x1c>
 80104a4:	1b18      	subs	r0, r3, r4
 80104a6:	bd10      	pop	{r4, pc}
 80104a8:	3001      	adds	r0, #1
 80104aa:	e7f2      	b.n	8010492 <memcmp+0x6>

080104ac <memcpy>:
 80104ac:	440a      	add	r2, r1
 80104ae:	4291      	cmp	r1, r2
 80104b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80104b4:	d100      	bne.n	80104b8 <memcpy+0xc>
 80104b6:	4770      	bx	lr
 80104b8:	b510      	push	{r4, lr}
 80104ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104c2:	4291      	cmp	r1, r2
 80104c4:	d1f9      	bne.n	80104ba <memcpy+0xe>
 80104c6:	bd10      	pop	{r4, pc}

080104c8 <memmove>:
 80104c8:	4288      	cmp	r0, r1
 80104ca:	b510      	push	{r4, lr}
 80104cc:	eb01 0402 	add.w	r4, r1, r2
 80104d0:	d902      	bls.n	80104d8 <memmove+0x10>
 80104d2:	4284      	cmp	r4, r0
 80104d4:	4623      	mov	r3, r4
 80104d6:	d807      	bhi.n	80104e8 <memmove+0x20>
 80104d8:	1e43      	subs	r3, r0, #1
 80104da:	42a1      	cmp	r1, r4
 80104dc:	d008      	beq.n	80104f0 <memmove+0x28>
 80104de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104e6:	e7f8      	b.n	80104da <memmove+0x12>
 80104e8:	4402      	add	r2, r0
 80104ea:	4601      	mov	r1, r0
 80104ec:	428a      	cmp	r2, r1
 80104ee:	d100      	bne.n	80104f2 <memmove+0x2a>
 80104f0:	bd10      	pop	{r4, pc}
 80104f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104fa:	e7f7      	b.n	80104ec <memmove+0x24>

080104fc <memset>:
 80104fc:	4402      	add	r2, r0
 80104fe:	4603      	mov	r3, r0
 8010500:	4293      	cmp	r3, r2
 8010502:	d100      	bne.n	8010506 <memset+0xa>
 8010504:	4770      	bx	lr
 8010506:	f803 1b01 	strb.w	r1, [r3], #1
 801050a:	e7f9      	b.n	8010500 <memset+0x4>

0801050c <validate_structure>:
 801050c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801050e:	6801      	ldr	r1, [r0, #0]
 8010510:	293b      	cmp	r1, #59	; 0x3b
 8010512:	4604      	mov	r4, r0
 8010514:	d911      	bls.n	801053a <validate_structure+0x2e>
 8010516:	223c      	movs	r2, #60	; 0x3c
 8010518:	4668      	mov	r0, sp
 801051a:	f003 fa53 	bl	80139c4 <div>
 801051e:	9a01      	ldr	r2, [sp, #4]
 8010520:	6863      	ldr	r3, [r4, #4]
 8010522:	9900      	ldr	r1, [sp, #0]
 8010524:	2a00      	cmp	r2, #0
 8010526:	440b      	add	r3, r1
 8010528:	6063      	str	r3, [r4, #4]
 801052a:	bfbb      	ittet	lt
 801052c:	323c      	addlt	r2, #60	; 0x3c
 801052e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010532:	6022      	strge	r2, [r4, #0]
 8010534:	6022      	strlt	r2, [r4, #0]
 8010536:	bfb8      	it	lt
 8010538:	6063      	strlt	r3, [r4, #4]
 801053a:	6861      	ldr	r1, [r4, #4]
 801053c:	293b      	cmp	r1, #59	; 0x3b
 801053e:	d911      	bls.n	8010564 <validate_structure+0x58>
 8010540:	223c      	movs	r2, #60	; 0x3c
 8010542:	4668      	mov	r0, sp
 8010544:	f003 fa3e 	bl	80139c4 <div>
 8010548:	9a01      	ldr	r2, [sp, #4]
 801054a:	68a3      	ldr	r3, [r4, #8]
 801054c:	9900      	ldr	r1, [sp, #0]
 801054e:	2a00      	cmp	r2, #0
 8010550:	440b      	add	r3, r1
 8010552:	60a3      	str	r3, [r4, #8]
 8010554:	bfbb      	ittet	lt
 8010556:	323c      	addlt	r2, #60	; 0x3c
 8010558:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801055c:	6062      	strge	r2, [r4, #4]
 801055e:	6062      	strlt	r2, [r4, #4]
 8010560:	bfb8      	it	lt
 8010562:	60a3      	strlt	r3, [r4, #8]
 8010564:	68a1      	ldr	r1, [r4, #8]
 8010566:	2917      	cmp	r1, #23
 8010568:	d911      	bls.n	801058e <validate_structure+0x82>
 801056a:	2218      	movs	r2, #24
 801056c:	4668      	mov	r0, sp
 801056e:	f003 fa29 	bl	80139c4 <div>
 8010572:	9a01      	ldr	r2, [sp, #4]
 8010574:	68e3      	ldr	r3, [r4, #12]
 8010576:	9900      	ldr	r1, [sp, #0]
 8010578:	2a00      	cmp	r2, #0
 801057a:	440b      	add	r3, r1
 801057c:	60e3      	str	r3, [r4, #12]
 801057e:	bfbb      	ittet	lt
 8010580:	3218      	addlt	r2, #24
 8010582:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010586:	60a2      	strge	r2, [r4, #8]
 8010588:	60a2      	strlt	r2, [r4, #8]
 801058a:	bfb8      	it	lt
 801058c:	60e3      	strlt	r3, [r4, #12]
 801058e:	6921      	ldr	r1, [r4, #16]
 8010590:	290b      	cmp	r1, #11
 8010592:	d911      	bls.n	80105b8 <validate_structure+0xac>
 8010594:	220c      	movs	r2, #12
 8010596:	4668      	mov	r0, sp
 8010598:	f003 fa14 	bl	80139c4 <div>
 801059c:	9a01      	ldr	r2, [sp, #4]
 801059e:	6963      	ldr	r3, [r4, #20]
 80105a0:	9900      	ldr	r1, [sp, #0]
 80105a2:	2a00      	cmp	r2, #0
 80105a4:	440b      	add	r3, r1
 80105a6:	6163      	str	r3, [r4, #20]
 80105a8:	bfbb      	ittet	lt
 80105aa:	320c      	addlt	r2, #12
 80105ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80105b0:	6122      	strge	r2, [r4, #16]
 80105b2:	6122      	strlt	r2, [r4, #16]
 80105b4:	bfb8      	it	lt
 80105b6:	6163      	strlt	r3, [r4, #20]
 80105b8:	6963      	ldr	r3, [r4, #20]
 80105ba:	0798      	lsls	r0, r3, #30
 80105bc:	d120      	bne.n	8010600 <validate_structure+0xf4>
 80105be:	2164      	movs	r1, #100	; 0x64
 80105c0:	fb93 f2f1 	sdiv	r2, r3, r1
 80105c4:	fb01 3212 	mls	r2, r1, r2, r3
 80105c8:	b9e2      	cbnz	r2, 8010604 <validate_structure+0xf8>
 80105ca:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80105ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80105d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80105d6:	fb02 3311 	mls	r3, r2, r1, r3
 80105da:	2b00      	cmp	r3, #0
 80105dc:	bf14      	ite	ne
 80105de:	231c      	movne	r3, #28
 80105e0:	231d      	moveq	r3, #29
 80105e2:	68e2      	ldr	r2, [r4, #12]
 80105e4:	2a00      	cmp	r2, #0
 80105e6:	dc0f      	bgt.n	8010608 <validate_structure+0xfc>
 80105e8:	4f33      	ldr	r7, [pc, #204]	; (80106b8 <validate_structure+0x1ac>)
 80105ea:	260b      	movs	r6, #11
 80105ec:	2064      	movs	r0, #100	; 0x64
 80105ee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80105f2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80105f6:	f1bc 0f00 	cmp.w	ip, #0
 80105fa:	dd31      	ble.n	8010660 <validate_structure+0x154>
 80105fc:	b003      	add	sp, #12
 80105fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010600:	231c      	movs	r3, #28
 8010602:	e7ee      	b.n	80105e2 <validate_structure+0xd6>
 8010604:	231d      	movs	r3, #29
 8010606:	e7ec      	b.n	80105e2 <validate_structure+0xd6>
 8010608:	4e2b      	ldr	r6, [pc, #172]	; (80106b8 <validate_structure+0x1ac>)
 801060a:	2700      	movs	r7, #0
 801060c:	2064      	movs	r0, #100	; 0x64
 801060e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8010612:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8010616:	2a01      	cmp	r2, #1
 8010618:	bf14      	ite	ne
 801061a:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 801061e:	469c      	moveq	ip, r3
 8010620:	4561      	cmp	r1, ip
 8010622:	ddeb      	ble.n	80105fc <validate_structure+0xf0>
 8010624:	3201      	adds	r2, #1
 8010626:	eba1 010c 	sub.w	r1, r1, ip
 801062a:	2a0c      	cmp	r2, #12
 801062c:	60e1      	str	r1, [r4, #12]
 801062e:	6122      	str	r2, [r4, #16]
 8010630:	d1ef      	bne.n	8010612 <validate_structure+0x106>
 8010632:	6963      	ldr	r3, [r4, #20]
 8010634:	1c5a      	adds	r2, r3, #1
 8010636:	0791      	lsls	r1, r2, #30
 8010638:	e9c4 7204 	strd	r7, r2, [r4, #16]
 801063c:	d137      	bne.n	80106ae <validate_structure+0x1a2>
 801063e:	fb92 f1f0 	sdiv	r1, r2, r0
 8010642:	fb00 2211 	mls	r2, r0, r1, r2
 8010646:	2a00      	cmp	r2, #0
 8010648:	d133      	bne.n	80106b2 <validate_structure+0x1a6>
 801064a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801064e:	fb93 f2f5 	sdiv	r2, r3, r5
 8010652:	fb05 3312 	mls	r3, r5, r2, r3
 8010656:	2b00      	cmp	r3, #0
 8010658:	bf14      	ite	ne
 801065a:	231c      	movne	r3, #28
 801065c:	231d      	moveq	r3, #29
 801065e:	e7d8      	b.n	8010612 <validate_structure+0x106>
 8010660:	6921      	ldr	r1, [r4, #16]
 8010662:	3901      	subs	r1, #1
 8010664:	6121      	str	r1, [r4, #16]
 8010666:	3101      	adds	r1, #1
 8010668:	d114      	bne.n	8010694 <validate_structure+0x188>
 801066a:	6963      	ldr	r3, [r4, #20]
 801066c:	1e5a      	subs	r2, r3, #1
 801066e:	0791      	lsls	r1, r2, #30
 8010670:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8010674:	d117      	bne.n	80106a6 <validate_structure+0x19a>
 8010676:	fb92 f1f0 	sdiv	r1, r2, r0
 801067a:	fb00 2211 	mls	r2, r0, r1, r2
 801067e:	b9a2      	cbnz	r2, 80106aa <validate_structure+0x19e>
 8010680:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8010684:	fb93 f2f5 	sdiv	r2, r3, r5
 8010688:	fb05 3312 	mls	r3, r5, r2, r3
 801068c:	2b00      	cmp	r3, #0
 801068e:	bf14      	ite	ne
 8010690:	231c      	movne	r3, #28
 8010692:	231d      	moveq	r3, #29
 8010694:	6922      	ldr	r2, [r4, #16]
 8010696:	2a01      	cmp	r2, #1
 8010698:	bf14      	ite	ne
 801069a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801069e:	461a      	moveq	r2, r3
 80106a0:	4462      	add	r2, ip
 80106a2:	60e2      	str	r2, [r4, #12]
 80106a4:	e7a5      	b.n	80105f2 <validate_structure+0xe6>
 80106a6:	231c      	movs	r3, #28
 80106a8:	e7f4      	b.n	8010694 <validate_structure+0x188>
 80106aa:	231d      	movs	r3, #29
 80106ac:	e7f2      	b.n	8010694 <validate_structure+0x188>
 80106ae:	231c      	movs	r3, #28
 80106b0:	e7af      	b.n	8010612 <validate_structure+0x106>
 80106b2:	231d      	movs	r3, #29
 80106b4:	e7ad      	b.n	8010612 <validate_structure+0x106>
 80106b6:	bf00      	nop
 80106b8:	0801b264 	.word	0x0801b264

080106bc <mktime>:
 80106bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	b085      	sub	sp, #20
 80106c2:	4607      	mov	r7, r0
 80106c4:	f004 faaa 	bl	8014c1c <__gettzinfo>
 80106c8:	4681      	mov	r9, r0
 80106ca:	4638      	mov	r0, r7
 80106cc:	f7ff ff1e 	bl	801050c <validate_structure>
 80106d0:	e9d7 4000 	ldrd	r4, r0, [r7]
 80106d4:	233c      	movs	r3, #60	; 0x3c
 80106d6:	fb03 4400 	mla	r4, r3, r0, r4
 80106da:	68b8      	ldr	r0, [r7, #8]
 80106dc:	4abc      	ldr	r2, [pc, #752]	; (80109d0 <mktime+0x314>)
 80106de:	697e      	ldr	r6, [r7, #20]
 80106e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80106e4:	fb03 4400 	mla	r4, r3, r0, r4
 80106e8:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80106ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80106f0:	3d01      	subs	r5, #1
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	4415      	add	r5, r2
 80106f6:	dd11      	ble.n	801071c <mktime+0x60>
 80106f8:	07b1      	lsls	r1, r6, #30
 80106fa:	d10f      	bne.n	801071c <mktime+0x60>
 80106fc:	2264      	movs	r2, #100	; 0x64
 80106fe:	fb96 f3f2 	sdiv	r3, r6, r2
 8010702:	fb02 6313 	mls	r3, r2, r3, r6
 8010706:	b943      	cbnz	r3, 801071a <mktime+0x5e>
 8010708:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 801070c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010710:	fb93 f1f2 	sdiv	r1, r3, r2
 8010714:	fb02 3311 	mls	r3, r2, r1, r3
 8010718:	b903      	cbnz	r3, 801071c <mktime+0x60>
 801071a:	3501      	adds	r5, #1
 801071c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8010720:	3310      	adds	r3, #16
 8010722:	f644 6220 	movw	r2, #20000	; 0x4e20
 8010726:	4293      	cmp	r3, r2
 8010728:	61fd      	str	r5, [r7, #28]
 801072a:	f200 815d 	bhi.w	80109e8 <mktime+0x32c>
 801072e:	2e46      	cmp	r6, #70	; 0x46
 8010730:	dd71      	ble.n	8010816 <mktime+0x15a>
 8010732:	2346      	movs	r3, #70	; 0x46
 8010734:	f240 1c6d 	movw	ip, #365	; 0x16d
 8010738:	2164      	movs	r1, #100	; 0x64
 801073a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801073e:	079a      	lsls	r2, r3, #30
 8010740:	d163      	bne.n	801080a <mktime+0x14e>
 8010742:	fb93 f2f1 	sdiv	r2, r3, r1
 8010746:	fb01 3212 	mls	r2, r1, r2, r3
 801074a:	2a00      	cmp	r2, #0
 801074c:	d160      	bne.n	8010810 <mktime+0x154>
 801074e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8010752:	fb92 fef0 	sdiv	lr, r2, r0
 8010756:	fb00 221e 	mls	r2, r0, lr, r2
 801075a:	2a00      	cmp	r2, #0
 801075c:	bf14      	ite	ne
 801075e:	4662      	movne	r2, ip
 8010760:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8010764:	3301      	adds	r3, #1
 8010766:	429e      	cmp	r6, r3
 8010768:	4415      	add	r5, r2
 801076a:	d1e8      	bne.n	801073e <mktime+0x82>
 801076c:	4b99      	ldr	r3, [pc, #612]	; (80109d4 <mktime+0x318>)
 801076e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8010772:	fbc5 4803 	smlal	r4, r8, r5, r3
 8010776:	f001 fcb1 	bl	80120dc <__tz_lock>
 801077a:	f001 fcbb 	bl	80120f4 <_tzset_unlocked>
 801077e:	4b96      	ldr	r3, [pc, #600]	; (80109d8 <mktime+0x31c>)
 8010780:	f8d3 b000 	ldr.w	fp, [r3]
 8010784:	f1bb 0f00 	cmp.w	fp, #0
 8010788:	d039      	beq.n	80107fe <mktime+0x142>
 801078a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 801078e:	6978      	ldr	r0, [r7, #20]
 8010790:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010794:	f1bb 0f01 	cmp.w	fp, #1
 8010798:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801079c:	46da      	mov	sl, fp
 801079e:	bfa8      	it	ge
 80107a0:	f04f 0a01 	movge.w	sl, #1
 80107a4:	4283      	cmp	r3, r0
 80107a6:	d178      	bne.n	801089a <mktime+0x1de>
 80107a8:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80107ac:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80107b0:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80107b4:	1a5b      	subs	r3, r3, r1
 80107b6:	9302      	str	r3, [sp, #8]
 80107b8:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80107bc:	9303      	str	r3, [sp, #12]
 80107be:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80107c2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80107c6:	9301      	str	r3, [sp, #4]
 80107c8:	ebb3 0c02 	subs.w	ip, r3, r2
 80107cc:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80107d0:	4564      	cmp	r4, ip
 80107d2:	eb78 0300 	sbcs.w	r3, r8, r0
 80107d6:	da66      	bge.n	80108a6 <mktime+0x1ea>
 80107d8:	f8d9 3000 	ldr.w	r3, [r9]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d06f      	beq.n	80108c0 <mktime+0x204>
 80107e0:	9b02      	ldr	r3, [sp, #8]
 80107e2:	429c      	cmp	r4, r3
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	eb78 0303 	sbcs.w	r3, r8, r3
 80107ea:	db03      	blt.n	80107f4 <mktime+0x138>
 80107ec:	4564      	cmp	r4, ip
 80107ee:	eb78 0300 	sbcs.w	r3, r8, r0
 80107f2:	db6b      	blt.n	80108cc <mktime+0x210>
 80107f4:	f1bb 0f00 	cmp.w	fp, #0
 80107f8:	f04f 0b00 	mov.w	fp, #0
 80107fc:	da6b      	bge.n	80108d6 <mktime+0x21a>
 80107fe:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8010802:	190c      	adds	r4, r1, r4
 8010804:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8010808:	e0a9      	b.n	801095e <mktime+0x2a2>
 801080a:	f240 126d 	movw	r2, #365	; 0x16d
 801080e:	e7a9      	b.n	8010764 <mktime+0xa8>
 8010810:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8010814:	e7a6      	b.n	8010764 <mktime+0xa8>
 8010816:	d0a9      	beq.n	801076c <mktime+0xb0>
 8010818:	2345      	movs	r3, #69	; 0x45
 801081a:	f240 1c6d 	movw	ip, #365	; 0x16d
 801081e:	2164      	movs	r1, #100	; 0x64
 8010820:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010824:	e012      	b.n	801084c <mktime+0x190>
 8010826:	bb62      	cbnz	r2, 8010882 <mktime+0x1c6>
 8010828:	fb93 f2f1 	sdiv	r2, r3, r1
 801082c:	fb01 3212 	mls	r2, r1, r2, r3
 8010830:	bb52      	cbnz	r2, 8010888 <mktime+0x1cc>
 8010832:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8010836:	fb92 fef0 	sdiv	lr, r2, r0
 801083a:	fb00 221e 	mls	r2, r0, lr, r2
 801083e:	2a00      	cmp	r2, #0
 8010840:	bf14      	ite	ne
 8010842:	4662      	movne	r2, ip
 8010844:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8010848:	1aad      	subs	r5, r5, r2
 801084a:	3b01      	subs	r3, #1
 801084c:	429e      	cmp	r6, r3
 801084e:	f003 0203 	and.w	r2, r3, #3
 8010852:	dbe8      	blt.n	8010826 <mktime+0x16a>
 8010854:	b9da      	cbnz	r2, 801088e <mktime+0x1d2>
 8010856:	2264      	movs	r2, #100	; 0x64
 8010858:	fb96 f3f2 	sdiv	r3, r6, r2
 801085c:	fb02 6313 	mls	r3, r2, r3, r6
 8010860:	b9c3      	cbnz	r3, 8010894 <mktime+0x1d8>
 8010862:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8010866:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801086a:	fb93 f1f2 	sdiv	r1, r3, r2
 801086e:	fb02 3311 	mls	r3, r2, r1, r3
 8010872:	2b00      	cmp	r3, #0
 8010874:	f240 136d 	movw	r3, #365	; 0x16d
 8010878:	bf08      	it	eq
 801087a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801087e:	1aed      	subs	r5, r5, r3
 8010880:	e774      	b.n	801076c <mktime+0xb0>
 8010882:	f240 126d 	movw	r2, #365	; 0x16d
 8010886:	e7df      	b.n	8010848 <mktime+0x18c>
 8010888:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801088c:	e7dc      	b.n	8010848 <mktime+0x18c>
 801088e:	f240 136d 	movw	r3, #365	; 0x16d
 8010892:	e7f4      	b.n	801087e <mktime+0x1c2>
 8010894:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8010898:	e7f1      	b.n	801087e <mktime+0x1c2>
 801089a:	f001 fb75 	bl	8011f88 <__tzcalc_limits>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d182      	bne.n	80107a8 <mktime+0xec>
 80108a2:	46d3      	mov	fp, sl
 80108a4:	e050      	b.n	8010948 <mktime+0x28c>
 80108a6:	9b01      	ldr	r3, [sp, #4]
 80108a8:	1a5b      	subs	r3, r3, r1
 80108aa:	9301      	str	r3, [sp, #4]
 80108ac:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80108b0:	eb6e 0e03 	sbc.w	lr, lr, r3
 80108b4:	9b01      	ldr	r3, [sp, #4]
 80108b6:	429c      	cmp	r4, r3
 80108b8:	eb78 030e 	sbcs.w	r3, r8, lr
 80108bc:	dbf1      	blt.n	80108a2 <mktime+0x1e6>
 80108be:	e78b      	b.n	80107d8 <mktime+0x11c>
 80108c0:	9b02      	ldr	r3, [sp, #8]
 80108c2:	429c      	cmp	r4, r3
 80108c4:	9b03      	ldr	r3, [sp, #12]
 80108c6:	eb78 0303 	sbcs.w	r3, r8, r3
 80108ca:	db8f      	blt.n	80107ec <mktime+0x130>
 80108cc:	f1bb 0f00 	cmp.w	fp, #0
 80108d0:	db3e      	blt.n	8010950 <mktime+0x294>
 80108d2:	f04f 0b01 	mov.w	fp, #1
 80108d6:	ea8a 0a0b 	eor.w	sl, sl, fp
 80108da:	f1ba 0f01 	cmp.w	sl, #1
 80108de:	d133      	bne.n	8010948 <mktime+0x28c>
 80108e0:	f1bb 0f00 	cmp.w	fp, #0
 80108e4:	d04e      	beq.n	8010984 <mktime+0x2c8>
 80108e6:	1a52      	subs	r2, r2, r1
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80108ee:	4413      	add	r3, r2
 80108f0:	1914      	adds	r4, r2, r4
 80108f2:	603b      	str	r3, [r7, #0]
 80108f4:	4638      	mov	r0, r7
 80108f6:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80108fa:	f7ff fe07 	bl	801050c <validate_structure>
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	ebb2 020a 	subs.w	r2, r2, sl
 8010904:	d020      	beq.n	8010948 <mktime+0x28c>
 8010906:	2a01      	cmp	r2, #1
 8010908:	dc3e      	bgt.n	8010988 <mktime+0x2cc>
 801090a:	1c90      	adds	r0, r2, #2
 801090c:	bfd8      	it	le
 801090e:	2201      	movle	r2, #1
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	18d3      	adds	r3, r2, r3
 8010914:	4415      	add	r5, r2
 8010916:	d540      	bpl.n	801099a <mktime+0x2de>
 8010918:	1e73      	subs	r3, r6, #1
 801091a:	0799      	lsls	r1, r3, #30
 801091c:	d137      	bne.n	801098e <mktime+0x2d2>
 801091e:	2264      	movs	r2, #100	; 0x64
 8010920:	fb93 f1f2 	sdiv	r1, r3, r2
 8010924:	fb02 3311 	mls	r3, r2, r1, r3
 8010928:	bba3      	cbnz	r3, 8010994 <mktime+0x2d8>
 801092a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801092e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8010932:	fb96 f2f3 	sdiv	r2, r6, r3
 8010936:	fb03 6612 	mls	r6, r3, r2, r6
 801093a:	2e00      	cmp	r6, #0
 801093c:	f240 136d 	movw	r3, #365	; 0x16d
 8010940:	bf18      	it	ne
 8010942:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8010946:	61fb      	str	r3, [r7, #28]
 8010948:	f1bb 0f01 	cmp.w	fp, #1
 801094c:	f47f af57 	bne.w	80107fe <mktime+0x142>
 8010950:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8010954:	190c      	adds	r4, r1, r4
 8010956:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 801095a:	f04f 0b01 	mov.w	fp, #1
 801095e:	f001 fbc3 	bl	80120e8 <__tz_unlock>
 8010962:	3504      	adds	r5, #4
 8010964:	2307      	movs	r3, #7
 8010966:	fb95 f3f3 	sdiv	r3, r5, r3
 801096a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801096e:	1aed      	subs	r5, r5, r3
 8010970:	bf48      	it	mi
 8010972:	3507      	addmi	r5, #7
 8010974:	f8c7 b020 	str.w	fp, [r7, #32]
 8010978:	61bd      	str	r5, [r7, #24]
 801097a:	4620      	mov	r0, r4
 801097c:	4641      	mov	r1, r8
 801097e:	b005      	add	sp, #20
 8010980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010984:	1a8a      	subs	r2, r1, r2
 8010986:	e7af      	b.n	80108e8 <mktime+0x22c>
 8010988:	f04f 32ff 	mov.w	r2, #4294967295
 801098c:	e7c0      	b.n	8010910 <mktime+0x254>
 801098e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8010992:	e7d8      	b.n	8010946 <mktime+0x28a>
 8010994:	f240 136d 	movw	r3, #365	; 0x16d
 8010998:	e7d5      	b.n	8010946 <mktime+0x28a>
 801099a:	07b2      	lsls	r2, r6, #30
 801099c:	d11e      	bne.n	80109dc <mktime+0x320>
 801099e:	2164      	movs	r1, #100	; 0x64
 80109a0:	fb96 f2f1 	sdiv	r2, r6, r1
 80109a4:	fb01 6212 	mls	r2, r1, r2, r6
 80109a8:	b9da      	cbnz	r2, 80109e2 <mktime+0x326>
 80109aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80109ae:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80109b2:	fb96 f1f2 	sdiv	r1, r6, r2
 80109b6:	fb02 6611 	mls	r6, r2, r1, r6
 80109ba:	2e00      	cmp	r6, #0
 80109bc:	f240 126d 	movw	r2, #365	; 0x16d
 80109c0:	bf08      	it	eq
 80109c2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80109c6:	4293      	cmp	r3, r2
 80109c8:	bfa8      	it	ge
 80109ca:	1a9b      	subge	r3, r3, r2
 80109cc:	e7bb      	b.n	8010946 <mktime+0x28a>
 80109ce:	bf00      	nop
 80109d0:	0801b294 	.word	0x0801b294
 80109d4:	00015180 	.word	0x00015180
 80109d8:	20007404 	.word	0x20007404
 80109dc:	f240 126d 	movw	r2, #365	; 0x16d
 80109e0:	e7f1      	b.n	80109c6 <mktime+0x30a>
 80109e2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80109e6:	e7ee      	b.n	80109c6 <mktime+0x30a>
 80109e8:	f04f 34ff 	mov.w	r4, #4294967295
 80109ec:	46a0      	mov	r8, r4
 80109ee:	e7c4      	b.n	801097a <mktime+0x2be>

080109f0 <printf>:
 80109f0:	b40f      	push	{r0, r1, r2, r3}
 80109f2:	b507      	push	{r0, r1, r2, lr}
 80109f4:	4906      	ldr	r1, [pc, #24]	; (8010a10 <printf+0x20>)
 80109f6:	ab04      	add	r3, sp, #16
 80109f8:	6808      	ldr	r0, [r1, #0]
 80109fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80109fe:	6881      	ldr	r1, [r0, #8]
 8010a00:	9301      	str	r3, [sp, #4]
 8010a02:	f001 fcfd 	bl	8012400 <_vfprintf_r>
 8010a06:	b003      	add	sp, #12
 8010a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a0c:	b004      	add	sp, #16
 8010a0e:	4770      	bx	lr
 8010a10:	2000001c 	.word	0x2000001c

08010a14 <rand>:
 8010a14:	4b0a      	ldr	r3, [pc, #40]	; (8010a40 <rand+0x2c>)
 8010a16:	4a0b      	ldr	r2, [pc, #44]	; (8010a44 <rand+0x30>)
 8010a18:	490b      	ldr	r1, [pc, #44]	; (8010a48 <rand+0x34>)
 8010a1a:	b510      	push	{r4, lr}
 8010a1c:	681c      	ldr	r4, [r3, #0]
 8010a1e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8010a22:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8010a26:	4342      	muls	r2, r0
 8010a28:	fb01 2203 	mla	r2, r1, r3, r2
 8010a2c:	fba0 0101 	umull	r0, r1, r0, r1
 8010a30:	1c43      	adds	r3, r0, #1
 8010a32:	eb42 0001 	adc.w	r0, r2, r1
 8010a36:	e9c4 302a 	strd	r3, r0, [r4, #168]	; 0xa8
 8010a3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010a3e:	bd10      	pop	{r4, pc}
 8010a40:	2000001c 	.word	0x2000001c
 8010a44:	5851f42d 	.word	0x5851f42d
 8010a48:	4c957f2d 	.word	0x4c957f2d

08010a4c <sprintf>:
 8010a4c:	b40e      	push	{r1, r2, r3}
 8010a4e:	b500      	push	{lr}
 8010a50:	b09c      	sub	sp, #112	; 0x70
 8010a52:	ab1d      	add	r3, sp, #116	; 0x74
 8010a54:	9002      	str	r0, [sp, #8]
 8010a56:	9006      	str	r0, [sp, #24]
 8010a58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a5c:	4809      	ldr	r0, [pc, #36]	; (8010a84 <sprintf+0x38>)
 8010a5e:	9107      	str	r1, [sp, #28]
 8010a60:	9104      	str	r1, [sp, #16]
 8010a62:	4909      	ldr	r1, [pc, #36]	; (8010a88 <sprintf+0x3c>)
 8010a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a68:	9105      	str	r1, [sp, #20]
 8010a6a:	6800      	ldr	r0, [r0, #0]
 8010a6c:	9301      	str	r3, [sp, #4]
 8010a6e:	a902      	add	r1, sp, #8
 8010a70:	f000 f8a6 	bl	8010bc0 <_svfprintf_r>
 8010a74:	9b02      	ldr	r3, [sp, #8]
 8010a76:	2200      	movs	r2, #0
 8010a78:	701a      	strb	r2, [r3, #0]
 8010a7a:	b01c      	add	sp, #112	; 0x70
 8010a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a80:	b003      	add	sp, #12
 8010a82:	4770      	bx	lr
 8010a84:	2000001c 	.word	0x2000001c
 8010a88:	ffff0208 	.word	0xffff0208

08010a8c <strncmp>:
 8010a8c:	b510      	push	{r4, lr}
 8010a8e:	b17a      	cbz	r2, 8010ab0 <strncmp+0x24>
 8010a90:	4603      	mov	r3, r0
 8010a92:	3901      	subs	r1, #1
 8010a94:	1884      	adds	r4, r0, r2
 8010a96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010a9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a9e:	4290      	cmp	r0, r2
 8010aa0:	d101      	bne.n	8010aa6 <strncmp+0x1a>
 8010aa2:	42a3      	cmp	r3, r4
 8010aa4:	d101      	bne.n	8010aaa <strncmp+0x1e>
 8010aa6:	1a80      	subs	r0, r0, r2
 8010aa8:	bd10      	pop	{r4, pc}
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d1f3      	bne.n	8010a96 <strncmp+0xa>
 8010aae:	e7fa      	b.n	8010aa6 <strncmp+0x1a>
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	e7f9      	b.n	8010aa8 <strncmp+0x1c>

08010ab4 <_strtol_l.constprop.0>:
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aba:	d001      	beq.n	8010ac0 <_strtol_l.constprop.0+0xc>
 8010abc:	2b24      	cmp	r3, #36	; 0x24
 8010abe:	d906      	bls.n	8010ace <_strtol_l.constprop.0+0x1a>
 8010ac0:	f003 fdf8 	bl	80146b4 <__errno>
 8010ac4:	2316      	movs	r3, #22
 8010ac6:	6003      	str	r3, [r0, #0]
 8010ac8:	2000      	movs	r0, #0
 8010aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ace:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010bb4 <_strtol_l.constprop.0+0x100>
 8010ad2:	460d      	mov	r5, r1
 8010ad4:	462e      	mov	r6, r5
 8010ad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ada:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010ade:	f017 0708 	ands.w	r7, r7, #8
 8010ae2:	d1f7      	bne.n	8010ad4 <_strtol_l.constprop.0+0x20>
 8010ae4:	2c2d      	cmp	r4, #45	; 0x2d
 8010ae6:	d132      	bne.n	8010b4e <_strtol_l.constprop.0+0x9a>
 8010ae8:	782c      	ldrb	r4, [r5, #0]
 8010aea:	2701      	movs	r7, #1
 8010aec:	1cb5      	adds	r5, r6, #2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d05b      	beq.n	8010baa <_strtol_l.constprop.0+0xf6>
 8010af2:	2b10      	cmp	r3, #16
 8010af4:	d109      	bne.n	8010b0a <_strtol_l.constprop.0+0x56>
 8010af6:	2c30      	cmp	r4, #48	; 0x30
 8010af8:	d107      	bne.n	8010b0a <_strtol_l.constprop.0+0x56>
 8010afa:	782c      	ldrb	r4, [r5, #0]
 8010afc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010b00:	2c58      	cmp	r4, #88	; 0x58
 8010b02:	d14d      	bne.n	8010ba0 <_strtol_l.constprop.0+0xec>
 8010b04:	786c      	ldrb	r4, [r5, #1]
 8010b06:	2310      	movs	r3, #16
 8010b08:	3502      	adds	r5, #2
 8010b0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010b0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b12:	f04f 0c00 	mov.w	ip, #0
 8010b16:	fbb8 f9f3 	udiv	r9, r8, r3
 8010b1a:	4666      	mov	r6, ip
 8010b1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010b20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010b24:	f1be 0f09 	cmp.w	lr, #9
 8010b28:	d816      	bhi.n	8010b58 <_strtol_l.constprop.0+0xa4>
 8010b2a:	4674      	mov	r4, lr
 8010b2c:	42a3      	cmp	r3, r4
 8010b2e:	dd24      	ble.n	8010b7a <_strtol_l.constprop.0+0xc6>
 8010b30:	f1bc 0f00 	cmp.w	ip, #0
 8010b34:	db1e      	blt.n	8010b74 <_strtol_l.constprop.0+0xc0>
 8010b36:	45b1      	cmp	r9, r6
 8010b38:	d31c      	bcc.n	8010b74 <_strtol_l.constprop.0+0xc0>
 8010b3a:	d101      	bne.n	8010b40 <_strtol_l.constprop.0+0x8c>
 8010b3c:	45a2      	cmp	sl, r4
 8010b3e:	db19      	blt.n	8010b74 <_strtol_l.constprop.0+0xc0>
 8010b40:	fb06 4603 	mla	r6, r6, r3, r4
 8010b44:	f04f 0c01 	mov.w	ip, #1
 8010b48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b4c:	e7e8      	b.n	8010b20 <_strtol_l.constprop.0+0x6c>
 8010b4e:	2c2b      	cmp	r4, #43	; 0x2b
 8010b50:	bf04      	itt	eq
 8010b52:	782c      	ldrbeq	r4, [r5, #0]
 8010b54:	1cb5      	addeq	r5, r6, #2
 8010b56:	e7ca      	b.n	8010aee <_strtol_l.constprop.0+0x3a>
 8010b58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010b5c:	f1be 0f19 	cmp.w	lr, #25
 8010b60:	d801      	bhi.n	8010b66 <_strtol_l.constprop.0+0xb2>
 8010b62:	3c37      	subs	r4, #55	; 0x37
 8010b64:	e7e2      	b.n	8010b2c <_strtol_l.constprop.0+0x78>
 8010b66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010b6a:	f1be 0f19 	cmp.w	lr, #25
 8010b6e:	d804      	bhi.n	8010b7a <_strtol_l.constprop.0+0xc6>
 8010b70:	3c57      	subs	r4, #87	; 0x57
 8010b72:	e7db      	b.n	8010b2c <_strtol_l.constprop.0+0x78>
 8010b74:	f04f 3cff 	mov.w	ip, #4294967295
 8010b78:	e7e6      	b.n	8010b48 <_strtol_l.constprop.0+0x94>
 8010b7a:	f1bc 0f00 	cmp.w	ip, #0
 8010b7e:	da05      	bge.n	8010b8c <_strtol_l.constprop.0+0xd8>
 8010b80:	2322      	movs	r3, #34	; 0x22
 8010b82:	6003      	str	r3, [r0, #0]
 8010b84:	4646      	mov	r6, r8
 8010b86:	b942      	cbnz	r2, 8010b9a <_strtol_l.constprop.0+0xe6>
 8010b88:	4630      	mov	r0, r6
 8010b8a:	e79e      	b.n	8010aca <_strtol_l.constprop.0+0x16>
 8010b8c:	b107      	cbz	r7, 8010b90 <_strtol_l.constprop.0+0xdc>
 8010b8e:	4276      	negs	r6, r6
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	d0f9      	beq.n	8010b88 <_strtol_l.constprop.0+0xd4>
 8010b94:	f1bc 0f00 	cmp.w	ip, #0
 8010b98:	d000      	beq.n	8010b9c <_strtol_l.constprop.0+0xe8>
 8010b9a:	1e69      	subs	r1, r5, #1
 8010b9c:	6011      	str	r1, [r2, #0]
 8010b9e:	e7f3      	b.n	8010b88 <_strtol_l.constprop.0+0xd4>
 8010ba0:	2430      	movs	r4, #48	; 0x30
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1b1      	bne.n	8010b0a <_strtol_l.constprop.0+0x56>
 8010ba6:	2308      	movs	r3, #8
 8010ba8:	e7af      	b.n	8010b0a <_strtol_l.constprop.0+0x56>
 8010baa:	2c30      	cmp	r4, #48	; 0x30
 8010bac:	d0a5      	beq.n	8010afa <_strtol_l.constprop.0+0x46>
 8010bae:	230a      	movs	r3, #10
 8010bb0:	e7ab      	b.n	8010b0a <_strtol_l.constprop.0+0x56>
 8010bb2:	bf00      	nop
 8010bb4:	0801b15f 	.word	0x0801b15f

08010bb8 <_strtol_r>:
 8010bb8:	f7ff bf7c 	b.w	8010ab4 <_strtol_l.constprop.0>
 8010bbc:	0000      	movs	r0, r0
	...

08010bc0 <_svfprintf_r>:
 8010bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc4:	ed2d 8b04 	vpush	{d8-d9}
 8010bc8:	b0cf      	sub	sp, #316	; 0x13c
 8010bca:	4688      	mov	r8, r1
 8010bcc:	4691      	mov	r9, r2
 8010bce:	461e      	mov	r6, r3
 8010bd0:	4682      	mov	sl, r0
 8010bd2:	f004 f8d3 	bl	8014d7c <_localeconv_r>
 8010bd6:	6803      	ldr	r3, [r0, #0]
 8010bd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7ef fb18 	bl	8000210 <strlen>
 8010be0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8010be4:	900d      	str	r0, [sp, #52]	; 0x34
 8010be6:	0618      	lsls	r0, r3, #24
 8010be8:	d51a      	bpl.n	8010c20 <_svfprintf_r+0x60>
 8010bea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010bee:	b9bb      	cbnz	r3, 8010c20 <_svfprintf_r+0x60>
 8010bf0:	2140      	movs	r1, #64	; 0x40
 8010bf2:	4650      	mov	r0, sl
 8010bf4:	f004 f948 	bl	8014e88 <_malloc_r>
 8010bf8:	f8c8 0000 	str.w	r0, [r8]
 8010bfc:	f8c8 0010 	str.w	r0, [r8, #16]
 8010c00:	b958      	cbnz	r0, 8010c1a <_svfprintf_r+0x5a>
 8010c02:	230c      	movs	r3, #12
 8010c04:	f8ca 3000 	str.w	r3, [sl]
 8010c08:	f04f 33ff 	mov.w	r3, #4294967295
 8010c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8010c0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010c10:	b04f      	add	sp, #316	; 0x13c
 8010c12:	ecbd 8b04 	vpop	{d8-d9}
 8010c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1a:	2340      	movs	r3, #64	; 0x40
 8010c1c:	f8c8 3014 	str.w	r3, [r8, #20]
 8010c20:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8010e70 <_svfprintf_r+0x2b0>
 8010c24:	2500      	movs	r5, #0
 8010c26:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8010c2a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8010c2e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8010c32:	ac25      	add	r4, sp, #148	; 0x94
 8010c34:	9422      	str	r4, [sp, #136]	; 0x88
 8010c36:	9505      	str	r5, [sp, #20]
 8010c38:	950a      	str	r5, [sp, #40]	; 0x28
 8010c3a:	9512      	str	r5, [sp, #72]	; 0x48
 8010c3c:	9514      	str	r5, [sp, #80]	; 0x50
 8010c3e:	950c      	str	r5, [sp, #48]	; 0x30
 8010c40:	464b      	mov	r3, r9
 8010c42:	461d      	mov	r5, r3
 8010c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c48:	b10a      	cbz	r2, 8010c4e <_svfprintf_r+0x8e>
 8010c4a:	2a25      	cmp	r2, #37	; 0x25
 8010c4c:	d1f9      	bne.n	8010c42 <_svfprintf_r+0x82>
 8010c4e:	ebb5 0709 	subs.w	r7, r5, r9
 8010c52:	d00d      	beq.n	8010c70 <_svfprintf_r+0xb0>
 8010c54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010c56:	443b      	add	r3, r7
 8010c58:	9324      	str	r3, [sp, #144]	; 0x90
 8010c5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	2b07      	cmp	r3, #7
 8010c60:	e9c4 9700 	strd	r9, r7, [r4]
 8010c64:	9323      	str	r3, [sp, #140]	; 0x8c
 8010c66:	dc79      	bgt.n	8010d5c <_svfprintf_r+0x19c>
 8010c68:	3408      	adds	r4, #8
 8010c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c6c:	443b      	add	r3, r7
 8010c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c70:	782b      	ldrb	r3, [r5, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f001 8148 	beq.w	8011f08 <_svfprintf_r+0x1348>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c7e:	9204      	str	r2, [sp, #16]
 8010c80:	3501      	adds	r5, #1
 8010c82:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010c86:	9310      	str	r3, [sp, #64]	; 0x40
 8010c88:	469b      	mov	fp, r3
 8010c8a:	270a      	movs	r7, #10
 8010c8c:	222b      	movs	r2, #43	; 0x2b
 8010c8e:	462b      	mov	r3, r5
 8010c90:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010c94:	9106      	str	r1, [sp, #24]
 8010c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c98:	9b06      	ldr	r3, [sp, #24]
 8010c9a:	3b20      	subs	r3, #32
 8010c9c:	2b5a      	cmp	r3, #90	; 0x5a
 8010c9e:	f200 85bf 	bhi.w	8011820 <_svfprintf_r+0xc60>
 8010ca2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010ca6:	007e      	.short	0x007e
 8010ca8:	05bd05bd 	.word	0x05bd05bd
 8010cac:	05bd0086 	.word	0x05bd0086
 8010cb0:	05bd05bd 	.word	0x05bd05bd
 8010cb4:	05bd0065 	.word	0x05bd0065
 8010cb8:	008905bd 	.word	0x008905bd
 8010cbc:	05bd0093 	.word	0x05bd0093
 8010cc0:	00960090 	.word	0x00960090
 8010cc4:	00b305bd 	.word	0x00b305bd
 8010cc8:	00b600b6 	.word	0x00b600b6
 8010ccc:	00b600b6 	.word	0x00b600b6
 8010cd0:	00b600b6 	.word	0x00b600b6
 8010cd4:	00b600b6 	.word	0x00b600b6
 8010cd8:	05bd00b6 	.word	0x05bd00b6
 8010cdc:	05bd05bd 	.word	0x05bd05bd
 8010ce0:	05bd05bd 	.word	0x05bd05bd
 8010ce4:	05bd05bd 	.word	0x05bd05bd
 8010ce8:	05bd012c 	.word	0x05bd012c
 8010cec:	00fc00e9 	.word	0x00fc00e9
 8010cf0:	012c012c 	.word	0x012c012c
 8010cf4:	05bd012c 	.word	0x05bd012c
 8010cf8:	05bd05bd 	.word	0x05bd05bd
 8010cfc:	00c605bd 	.word	0x00c605bd
 8010d00:	05bd05bd 	.word	0x05bd05bd
 8010d04:	05bd0498 	.word	0x05bd0498
 8010d08:	05bd05bd 	.word	0x05bd05bd
 8010d0c:	05bd04e2 	.word	0x05bd04e2
 8010d10:	05bd0503 	.word	0x05bd0503
 8010d14:	052505bd 	.word	0x052505bd
 8010d18:	05bd05bd 	.word	0x05bd05bd
 8010d1c:	05bd05bd 	.word	0x05bd05bd
 8010d20:	05bd05bd 	.word	0x05bd05bd
 8010d24:	05bd05bd 	.word	0x05bd05bd
 8010d28:	05bd012c 	.word	0x05bd012c
 8010d2c:	00fe00e9 	.word	0x00fe00e9
 8010d30:	012c012c 	.word	0x012c012c
 8010d34:	00c9012c 	.word	0x00c9012c
 8010d38:	00dd00fe 	.word	0x00dd00fe
 8010d3c:	00d605bd 	.word	0x00d605bd
 8010d40:	047305bd 	.word	0x047305bd
 8010d44:	04d0049a 	.word	0x04d0049a
 8010d48:	05bd00dd 	.word	0x05bd00dd
 8010d4c:	007c04e2 	.word	0x007c04e2
 8010d50:	05bd0505 	.word	0x05bd0505
 8010d54:	054405bd 	.word	0x054405bd
 8010d58:	007c05bd 	.word	0x007c05bd
 8010d5c:	aa22      	add	r2, sp, #136	; 0x88
 8010d5e:	4641      	mov	r1, r8
 8010d60:	4650      	mov	r0, sl
 8010d62:	f004 ff61 	bl	8015c28 <__ssprint_r>
 8010d66:	2800      	cmp	r0, #0
 8010d68:	f040 8137 	bne.w	8010fda <_svfprintf_r+0x41a>
 8010d6c:	ac25      	add	r4, sp, #148	; 0x94
 8010d6e:	e77c      	b.n	8010c6a <_svfprintf_r+0xaa>
 8010d70:	4650      	mov	r0, sl
 8010d72:	f004 f803 	bl	8014d7c <_localeconv_r>
 8010d76:	6843      	ldr	r3, [r0, #4]
 8010d78:	9314      	str	r3, [sp, #80]	; 0x50
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7ef fa48 	bl	8000210 <strlen>
 8010d80:	9012      	str	r0, [sp, #72]	; 0x48
 8010d82:	4650      	mov	r0, sl
 8010d84:	f003 fffa 	bl	8014d7c <_localeconv_r>
 8010d88:	6883      	ldr	r3, [r0, #8]
 8010d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8010d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d8e:	222b      	movs	r2, #43	; 0x2b
 8010d90:	b12b      	cbz	r3, 8010d9e <_svfprintf_r+0x1de>
 8010d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d94:	b11b      	cbz	r3, 8010d9e <_svfprintf_r+0x1de>
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	b10b      	cbz	r3, 8010d9e <_svfprintf_r+0x1de>
 8010d9a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8010d9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010da0:	e775      	b.n	8010c8e <_svfprintf_r+0xce>
 8010da2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d1f9      	bne.n	8010d9e <_svfprintf_r+0x1de>
 8010daa:	2320      	movs	r3, #32
 8010dac:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010db0:	e7f5      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010db2:	f04b 0b01 	orr.w	fp, fp, #1
 8010db6:	e7f2      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010db8:	f856 3b04 	ldr.w	r3, [r6], #4
 8010dbc:	9310      	str	r3, [sp, #64]	; 0x40
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	daed      	bge.n	8010d9e <_svfprintf_r+0x1de>
 8010dc2:	425b      	negs	r3, r3
 8010dc4:	9310      	str	r3, [sp, #64]	; 0x40
 8010dc6:	f04b 0b04 	orr.w	fp, fp, #4
 8010dca:	e7e8      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010dcc:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8010dd0:	e7e5      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010dd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010dd4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010dd8:	9306      	str	r3, [sp, #24]
 8010dda:	2b2a      	cmp	r3, #42	; 0x2a
 8010ddc:	d113      	bne.n	8010e06 <_svfprintf_r+0x246>
 8010dde:	f856 0b04 	ldr.w	r0, [r6], #4
 8010de2:	950b      	str	r5, [sp, #44]	; 0x2c
 8010de4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8010de8:	9304      	str	r3, [sp, #16]
 8010dea:	e7d8      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010dec:	9904      	ldr	r1, [sp, #16]
 8010dee:	fb07 3301 	mla	r3, r7, r1, r3
 8010df2:	9304      	str	r3, [sp, #16]
 8010df4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010df8:	9306      	str	r3, [sp, #24]
 8010dfa:	9b06      	ldr	r3, [sp, #24]
 8010dfc:	3b30      	subs	r3, #48	; 0x30
 8010dfe:	2b09      	cmp	r3, #9
 8010e00:	d9f4      	bls.n	8010dec <_svfprintf_r+0x22c>
 8010e02:	950b      	str	r5, [sp, #44]	; 0x2c
 8010e04:	e748      	b.n	8010c98 <_svfprintf_r+0xd8>
 8010e06:	2300      	movs	r3, #0
 8010e08:	9304      	str	r3, [sp, #16]
 8010e0a:	e7f6      	b.n	8010dfa <_svfprintf_r+0x23a>
 8010e0c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8010e10:	e7c5      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010e12:	2300      	movs	r3, #0
 8010e14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010e16:	9310      	str	r3, [sp, #64]	; 0x40
 8010e18:	9b06      	ldr	r3, [sp, #24]
 8010e1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010e1c:	3b30      	subs	r3, #48	; 0x30
 8010e1e:	fb07 3301 	mla	r3, r7, r1, r3
 8010e22:	9310      	str	r3, [sp, #64]	; 0x40
 8010e24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010e28:	9306      	str	r3, [sp, #24]
 8010e2a:	3b30      	subs	r3, #48	; 0x30
 8010e2c:	2b09      	cmp	r3, #9
 8010e2e:	d9f3      	bls.n	8010e18 <_svfprintf_r+0x258>
 8010e30:	e7e7      	b.n	8010e02 <_svfprintf_r+0x242>
 8010e32:	f04b 0b08 	orr.w	fp, fp, #8
 8010e36:	e7b2      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	2b68      	cmp	r3, #104	; 0x68
 8010e3e:	bf01      	itttt	eq
 8010e40:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8010e42:	3301      	addeq	r3, #1
 8010e44:	930b      	streq	r3, [sp, #44]	; 0x2c
 8010e46:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8010e4a:	bf18      	it	ne
 8010e4c:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8010e50:	e7a5      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	2b6c      	cmp	r3, #108	; 0x6c
 8010e58:	d105      	bne.n	8010e66 <_svfprintf_r+0x2a6>
 8010e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e60:	f04b 0b20 	orr.w	fp, fp, #32
 8010e64:	e79b      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010e66:	f04b 0b10 	orr.w	fp, fp, #16
 8010e6a:	e798      	b.n	8010d9e <_svfprintf_r+0x1de>
 8010e6c:	f3af 8000 	nop.w
	...
 8010e78:	4632      	mov	r2, r6
 8010e7a:	2000      	movs	r0, #0
 8010e7c:	f852 3b04 	ldr.w	r3, [r2], #4
 8010e80:	9207      	str	r2, [sp, #28]
 8010e82:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8010e86:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8010e90:	9003      	str	r0, [sp, #12]
 8010e92:	9304      	str	r3, [sp, #16]
 8010e94:	4606      	mov	r6, r0
 8010e96:	4605      	mov	r5, r0
 8010e98:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8010e9c:	e1bc      	b.n	8011218 <_svfprintf_r+0x658>
 8010e9e:	f04b 0b10 	orr.w	fp, fp, #16
 8010ea2:	f01b 0f20 	tst.w	fp, #32
 8010ea6:	d012      	beq.n	8010ece <_svfprintf_r+0x30e>
 8010ea8:	1df3      	adds	r3, r6, #7
 8010eaa:	f023 0307 	bic.w	r3, r3, #7
 8010eae:	461a      	mov	r2, r3
 8010eb0:	685d      	ldr	r5, [r3, #4]
 8010eb2:	f852 6b08 	ldr.w	r6, [r2], #8
 8010eb6:	9207      	str	r2, [sp, #28]
 8010eb8:	2d00      	cmp	r5, #0
 8010eba:	da06      	bge.n	8010eca <_svfprintf_r+0x30a>
 8010ebc:	4276      	negs	r6, r6
 8010ebe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8010ec2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8010ec6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010eca:	2301      	movs	r3, #1
 8010ecc:	e396      	b.n	80115fc <_svfprintf_r+0xa3c>
 8010ece:	4633      	mov	r3, r6
 8010ed0:	f01b 0f10 	tst.w	fp, #16
 8010ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ed8:	9307      	str	r3, [sp, #28]
 8010eda:	d002      	beq.n	8010ee2 <_svfprintf_r+0x322>
 8010edc:	462e      	mov	r6, r5
 8010ede:	17ed      	asrs	r5, r5, #31
 8010ee0:	e7ea      	b.n	8010eb8 <_svfprintf_r+0x2f8>
 8010ee2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8010ee6:	d003      	beq.n	8010ef0 <_svfprintf_r+0x330>
 8010ee8:	b22e      	sxth	r6, r5
 8010eea:	f345 35c0 	sbfx	r5, r5, #15, #1
 8010eee:	e7e3      	b.n	8010eb8 <_svfprintf_r+0x2f8>
 8010ef0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8010ef4:	d0f2      	beq.n	8010edc <_svfprintf_r+0x31c>
 8010ef6:	b26e      	sxtb	r6, r5
 8010ef8:	f345 15c0 	sbfx	r5, r5, #7, #1
 8010efc:	e7dc      	b.n	8010eb8 <_svfprintf_r+0x2f8>
 8010efe:	3607      	adds	r6, #7
 8010f00:	f026 0307 	bic.w	r3, r6, #7
 8010f04:	ecb3 7b02 	vldmia	r3!, {d7}
 8010f08:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8010f0c:	9307      	str	r3, [sp, #28]
 8010f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f10:	ee09 3a10 	vmov	s18, r3
 8010f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f1a:	ee09 3a90 	vmov	s19, r3
 8010f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f22:	4b3a      	ldr	r3, [pc, #232]	; (801100c <_svfprintf_r+0x44c>)
 8010f24:	ec51 0b19 	vmov	r0, r1, d9
 8010f28:	f7ef fe2a 	bl	8000b80 <__aeabi_dcmpun>
 8010f2c:	bb10      	cbnz	r0, 8010f74 <_svfprintf_r+0x3b4>
 8010f2e:	4b37      	ldr	r3, [pc, #220]	; (801100c <_svfprintf_r+0x44c>)
 8010f30:	ec51 0b19 	vmov	r0, r1, d9
 8010f34:	f04f 32ff 	mov.w	r2, #4294967295
 8010f38:	f7ef fe04 	bl	8000b44 <__aeabi_dcmple>
 8010f3c:	b9d0      	cbnz	r0, 8010f74 <_svfprintf_r+0x3b4>
 8010f3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010f42:	2200      	movs	r2, #0
 8010f44:	2300      	movs	r3, #0
 8010f46:	f7ef fdf3 	bl	8000b30 <__aeabi_dcmplt>
 8010f4a:	b110      	cbz	r0, 8010f52 <_svfprintf_r+0x392>
 8010f4c:	232d      	movs	r3, #45	; 0x2d
 8010f4e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010f52:	4a2f      	ldr	r2, [pc, #188]	; (8011010 <_svfprintf_r+0x450>)
 8010f54:	482f      	ldr	r0, [pc, #188]	; (8011014 <_svfprintf_r+0x454>)
 8010f56:	9b06      	ldr	r3, [sp, #24]
 8010f58:	2100      	movs	r1, #0
 8010f5a:	2b47      	cmp	r3, #71	; 0x47
 8010f5c:	bfd4      	ite	le
 8010f5e:	4691      	movle	r9, r2
 8010f60:	4681      	movgt	r9, r0
 8010f62:	2303      	movs	r3, #3
 8010f64:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8010f68:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8010f6c:	2600      	movs	r6, #0
 8010f6e:	4633      	mov	r3, r6
 8010f70:	f001 b800 	b.w	8011f74 <_svfprintf_r+0x13b4>
 8010f74:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010f78:	4610      	mov	r0, r2
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	f7ef fe00 	bl	8000b80 <__aeabi_dcmpun>
 8010f80:	b140      	cbz	r0, 8010f94 <_svfprintf_r+0x3d4>
 8010f82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f84:	4a24      	ldr	r2, [pc, #144]	; (8011018 <_svfprintf_r+0x458>)
 8010f86:	4825      	ldr	r0, [pc, #148]	; (801101c <_svfprintf_r+0x45c>)
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	bfbc      	itt	lt
 8010f8c:	232d      	movlt	r3, #45	; 0x2d
 8010f8e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8010f92:	e7e0      	b.n	8010f56 <_svfprintf_r+0x396>
 8010f94:	9b06      	ldr	r3, [sp, #24]
 8010f96:	f023 0320 	bic.w	r3, r3, #32
 8010f9a:	2b41      	cmp	r3, #65	; 0x41
 8010f9c:	9308      	str	r3, [sp, #32]
 8010f9e:	d125      	bne.n	8010fec <_svfprintf_r+0x42c>
 8010fa0:	2330      	movs	r3, #48	; 0x30
 8010fa2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8010fa6:	9b06      	ldr	r3, [sp, #24]
 8010fa8:	2b61      	cmp	r3, #97	; 0x61
 8010faa:	bf0c      	ite	eq
 8010fac:	2378      	moveq	r3, #120	; 0x78
 8010fae:	2358      	movne	r3, #88	; 0x58
 8010fb0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8010fb4:	9b04      	ldr	r3, [sp, #16]
 8010fb6:	2b63      	cmp	r3, #99	; 0x63
 8010fb8:	f04b 0b02 	orr.w	fp, fp, #2
 8010fbc:	dd30      	ble.n	8011020 <_svfprintf_r+0x460>
 8010fbe:	1c59      	adds	r1, r3, #1
 8010fc0:	4650      	mov	r0, sl
 8010fc2:	f003 ff61 	bl	8014e88 <_malloc_r>
 8010fc6:	4681      	mov	r9, r0
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	f040 81fd 	bne.w	80113c8 <_svfprintf_r+0x808>
 8010fce:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8010fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fd6:	f8a8 300c 	strh.w	r3, [r8, #12]
 8010fda:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8010fde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fe4:	bf18      	it	ne
 8010fe6:	f04f 33ff 	movne.w	r3, #4294967295
 8010fea:	e60f      	b.n	8010c0c <_svfprintf_r+0x4c>
 8010fec:	9b04      	ldr	r3, [sp, #16]
 8010fee:	3301      	adds	r3, #1
 8010ff0:	f000 81ec 	beq.w	80113cc <_svfprintf_r+0x80c>
 8010ff4:	9b08      	ldr	r3, [sp, #32]
 8010ff6:	2b47      	cmp	r3, #71	; 0x47
 8010ff8:	f040 81eb 	bne.w	80113d2 <_svfprintf_r+0x812>
 8010ffc:	9b04      	ldr	r3, [sp, #16]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f040 81e7 	bne.w	80113d2 <_svfprintf_r+0x812>
 8011004:	9303      	str	r3, [sp, #12]
 8011006:	2301      	movs	r3, #1
 8011008:	9304      	str	r3, [sp, #16]
 801100a:	e00c      	b.n	8011026 <_svfprintf_r+0x466>
 801100c:	7fefffff 	.word	0x7fefffff
 8011010:	0801b324 	.word	0x0801b324
 8011014:	0801b328 	.word	0x0801b328
 8011018:	0801b32c 	.word	0x0801b32c
 801101c:	0801b330 	.word	0x0801b330
 8011020:	9003      	str	r0, [sp, #12]
 8011022:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8011026:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801102a:	9311      	str	r3, [sp, #68]	; 0x44
 801102c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801102e:	2b00      	cmp	r3, #0
 8011030:	f280 81d1 	bge.w	80113d6 <_svfprintf_r+0x816>
 8011034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011036:	ee08 3a10 	vmov	s16, r3
 801103a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801103c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011040:	ee08 3a90 	vmov	s17, r3
 8011044:	232d      	movs	r3, #45	; 0x2d
 8011046:	9318      	str	r3, [sp, #96]	; 0x60
 8011048:	9b08      	ldr	r3, [sp, #32]
 801104a:	2b41      	cmp	r3, #65	; 0x41
 801104c:	f040 81e1 	bne.w	8011412 <_svfprintf_r+0x852>
 8011050:	eeb0 0a48 	vmov.f32	s0, s16
 8011054:	eef0 0a68 	vmov.f32	s1, s17
 8011058:	a81c      	add	r0, sp, #112	; 0x70
 801105a:	f004 fc93 	bl	8015984 <frexp>
 801105e:	2200      	movs	r2, #0
 8011060:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011064:	ec51 0b10 	vmov	r0, r1, d0
 8011068:	f7ef faf0 	bl	800064c <__aeabi_dmul>
 801106c:	2200      	movs	r2, #0
 801106e:	2300      	movs	r3, #0
 8011070:	4606      	mov	r6, r0
 8011072:	460f      	mov	r7, r1
 8011074:	f7ef fd52 	bl	8000b1c <__aeabi_dcmpeq>
 8011078:	b108      	cbz	r0, 801107e <_svfprintf_r+0x4be>
 801107a:	2301      	movs	r3, #1
 801107c:	931c      	str	r3, [sp, #112]	; 0x70
 801107e:	4ba7      	ldr	r3, [pc, #668]	; (801131c <_svfprintf_r+0x75c>)
 8011080:	4aa7      	ldr	r2, [pc, #668]	; (8011320 <_svfprintf_r+0x760>)
 8011082:	9906      	ldr	r1, [sp, #24]
 8011084:	2961      	cmp	r1, #97	; 0x61
 8011086:	bf18      	it	ne
 8011088:	461a      	movne	r2, r3
 801108a:	9b04      	ldr	r3, [sp, #16]
 801108c:	9217      	str	r2, [sp, #92]	; 0x5c
 801108e:	3b01      	subs	r3, #1
 8011090:	9305      	str	r3, [sp, #20]
 8011092:	464d      	mov	r5, r9
 8011094:	4ba3      	ldr	r3, [pc, #652]	; (8011324 <_svfprintf_r+0x764>)
 8011096:	2200      	movs	r2, #0
 8011098:	4630      	mov	r0, r6
 801109a:	4639      	mov	r1, r7
 801109c:	f7ef fad6 	bl	800064c <__aeabi_dmul>
 80110a0:	460f      	mov	r7, r1
 80110a2:	4606      	mov	r6, r0
 80110a4:	f7ef fd82 	bl	8000bac <__aeabi_d2iz>
 80110a8:	9019      	str	r0, [sp, #100]	; 0x64
 80110aa:	f7ef fa65 	bl	8000578 <__aeabi_i2d>
 80110ae:	4602      	mov	r2, r0
 80110b0:	460b      	mov	r3, r1
 80110b2:	4630      	mov	r0, r6
 80110b4:	4639      	mov	r1, r7
 80110b6:	f7ef f911 	bl	80002dc <__aeabi_dsub>
 80110ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80110bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110be:	5c9b      	ldrb	r3, [r3, r2]
 80110c0:	f805 3b01 	strb.w	r3, [r5], #1
 80110c4:	9b05      	ldr	r3, [sp, #20]
 80110c6:	9309      	str	r3, [sp, #36]	; 0x24
 80110c8:	1c5a      	adds	r2, r3, #1
 80110ca:	4606      	mov	r6, r0
 80110cc:	460f      	mov	r7, r1
 80110ce:	d007      	beq.n	80110e0 <_svfprintf_r+0x520>
 80110d0:	3b01      	subs	r3, #1
 80110d2:	9305      	str	r3, [sp, #20]
 80110d4:	2200      	movs	r2, #0
 80110d6:	2300      	movs	r3, #0
 80110d8:	f7ef fd20 	bl	8000b1c <__aeabi_dcmpeq>
 80110dc:	2800      	cmp	r0, #0
 80110de:	d0d9      	beq.n	8011094 <_svfprintf_r+0x4d4>
 80110e0:	4b91      	ldr	r3, [pc, #580]	; (8011328 <_svfprintf_r+0x768>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	4630      	mov	r0, r6
 80110e6:	4639      	mov	r1, r7
 80110e8:	f7ef fd40 	bl	8000b6c <__aeabi_dcmpgt>
 80110ec:	b960      	cbnz	r0, 8011108 <_svfprintf_r+0x548>
 80110ee:	4b8e      	ldr	r3, [pc, #568]	; (8011328 <_svfprintf_r+0x768>)
 80110f0:	2200      	movs	r2, #0
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef fd11 	bl	8000b1c <__aeabi_dcmpeq>
 80110fa:	2800      	cmp	r0, #0
 80110fc:	f000 8184 	beq.w	8011408 <_svfprintf_r+0x848>
 8011100:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011102:	07db      	lsls	r3, r3, #31
 8011104:	f140 8180 	bpl.w	8011408 <_svfprintf_r+0x848>
 8011108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801110a:	9520      	str	r5, [sp, #128]	; 0x80
 801110c:	7bd9      	ldrb	r1, [r3, #15]
 801110e:	2030      	movs	r0, #48	; 0x30
 8011110:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011112:	1e53      	subs	r3, r2, #1
 8011114:	9320      	str	r3, [sp, #128]	; 0x80
 8011116:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801111a:	428b      	cmp	r3, r1
 801111c:	f000 8163 	beq.w	80113e6 <_svfprintf_r+0x826>
 8011120:	2b39      	cmp	r3, #57	; 0x39
 8011122:	bf0b      	itete	eq
 8011124:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8011126:	3301      	addne	r3, #1
 8011128:	7a9b      	ldrbeq	r3, [r3, #10]
 801112a:	b2db      	uxtbne	r3, r3
 801112c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011130:	eba5 0309 	sub.w	r3, r5, r9
 8011134:	9305      	str	r3, [sp, #20]
 8011136:	9b08      	ldr	r3, [sp, #32]
 8011138:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801113a:	2b47      	cmp	r3, #71	; 0x47
 801113c:	f040 81b1 	bne.w	80114a2 <_svfprintf_r+0x8e2>
 8011140:	1cef      	adds	r7, r5, #3
 8011142:	db03      	blt.n	801114c <_svfprintf_r+0x58c>
 8011144:	9b04      	ldr	r3, [sp, #16]
 8011146:	42ab      	cmp	r3, r5
 8011148:	f280 81d6 	bge.w	80114f8 <_svfprintf_r+0x938>
 801114c:	9b06      	ldr	r3, [sp, #24]
 801114e:	3b02      	subs	r3, #2
 8011150:	9306      	str	r3, [sp, #24]
 8011152:	9906      	ldr	r1, [sp, #24]
 8011154:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8011158:	f021 0120 	bic.w	r1, r1, #32
 801115c:	2941      	cmp	r1, #65	; 0x41
 801115e:	bf08      	it	eq
 8011160:	320f      	addeq	r2, #15
 8011162:	f105 33ff 	add.w	r3, r5, #4294967295
 8011166:	bf06      	itte	eq
 8011168:	b2d2      	uxtbeq	r2, r2
 801116a:	2101      	moveq	r1, #1
 801116c:	2100      	movne	r1, #0
 801116e:	2b00      	cmp	r3, #0
 8011170:	931c      	str	r3, [sp, #112]	; 0x70
 8011172:	bfb8      	it	lt
 8011174:	f1c5 0301 	rsblt	r3, r5, #1
 8011178:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801117c:	bfb4      	ite	lt
 801117e:	222d      	movlt	r2, #45	; 0x2d
 8011180:	222b      	movge	r2, #43	; 0x2b
 8011182:	2b09      	cmp	r3, #9
 8011184:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8011188:	f340 81a4 	ble.w	80114d4 <_svfprintf_r+0x914>
 801118c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8011190:	260a      	movs	r6, #10
 8011192:	4611      	mov	r1, r2
 8011194:	fb93 f5f6 	sdiv	r5, r3, r6
 8011198:	fb06 3015 	mls	r0, r6, r5, r3
 801119c:	3030      	adds	r0, #48	; 0x30
 801119e:	f801 0c01 	strb.w	r0, [r1, #-1]
 80111a2:	4618      	mov	r0, r3
 80111a4:	2863      	cmp	r0, #99	; 0x63
 80111a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80111aa:	462b      	mov	r3, r5
 80111ac:	dcf1      	bgt.n	8011192 <_svfprintf_r+0x5d2>
 80111ae:	3330      	adds	r3, #48	; 0x30
 80111b0:	1e88      	subs	r0, r1, #2
 80111b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111b6:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80111ba:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80111be:	4603      	mov	r3, r0
 80111c0:	42ab      	cmp	r3, r5
 80111c2:	f0c0 8182 	bcc.w	80114ca <_svfprintf_r+0x90a>
 80111c6:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80111ca:	1a52      	subs	r2, r2, r1
 80111cc:	42a8      	cmp	r0, r5
 80111ce:	bf88      	it	hi
 80111d0:	2200      	movhi	r2, #0
 80111d2:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80111d6:	441a      	add	r2, r3
 80111d8:	ab1e      	add	r3, sp, #120	; 0x78
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	9a05      	ldr	r2, [sp, #20]
 80111de:	9315      	str	r3, [sp, #84]	; 0x54
 80111e0:	2a01      	cmp	r2, #1
 80111e2:	4413      	add	r3, r2
 80111e4:	9304      	str	r3, [sp, #16]
 80111e6:	dc02      	bgt.n	80111ee <_svfprintf_r+0x62e>
 80111e8:	f01b 0f01 	tst.w	fp, #1
 80111ec:	d003      	beq.n	80111f6 <_svfprintf_r+0x636>
 80111ee:	9b04      	ldr	r3, [sp, #16]
 80111f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111f2:	4413      	add	r3, r2
 80111f4:	9304      	str	r3, [sp, #16]
 80111f6:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80111fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111fe:	9311      	str	r3, [sp, #68]	; 0x44
 8011200:	2300      	movs	r3, #0
 8011202:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011206:	461d      	mov	r5, r3
 8011208:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801120a:	b113      	cbz	r3, 8011212 <_svfprintf_r+0x652>
 801120c:	232d      	movs	r3, #45	; 0x2d
 801120e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8011212:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8011216:	2600      	movs	r6, #0
 8011218:	9b04      	ldr	r3, [sp, #16]
 801121a:	42b3      	cmp	r3, r6
 801121c:	bfb8      	it	lt
 801121e:	4633      	movlt	r3, r6
 8011220:	9311      	str	r3, [sp, #68]	; 0x44
 8011222:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8011226:	b113      	cbz	r3, 801122e <_svfprintf_r+0x66e>
 8011228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801122a:	3301      	adds	r3, #1
 801122c:	9311      	str	r3, [sp, #68]	; 0x44
 801122e:	f01b 0302 	ands.w	r3, fp, #2
 8011232:	9317      	str	r3, [sp, #92]	; 0x5c
 8011234:	bf1e      	ittt	ne
 8011236:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8011238:	3302      	addne	r3, #2
 801123a:	9311      	strne	r3, [sp, #68]	; 0x44
 801123c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8011240:	9318      	str	r3, [sp, #96]	; 0x60
 8011242:	d11f      	bne.n	8011284 <_svfprintf_r+0x6c4>
 8011244:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8011248:	1a9f      	subs	r7, r3, r2
 801124a:	2f00      	cmp	r7, #0
 801124c:	dd1a      	ble.n	8011284 <_svfprintf_r+0x6c4>
 801124e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011252:	4836      	ldr	r0, [pc, #216]	; (801132c <_svfprintf_r+0x76c>)
 8011254:	6020      	str	r0, [r4, #0]
 8011256:	2f10      	cmp	r7, #16
 8011258:	f103 0301 	add.w	r3, r3, #1
 801125c:	f104 0108 	add.w	r1, r4, #8
 8011260:	f300 82ed 	bgt.w	801183e <_svfprintf_r+0xc7e>
 8011264:	6067      	str	r7, [r4, #4]
 8011266:	2b07      	cmp	r3, #7
 8011268:	4417      	add	r7, r2
 801126a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801126e:	f340 82f9 	ble.w	8011864 <_svfprintf_r+0xca4>
 8011272:	aa22      	add	r2, sp, #136	; 0x88
 8011274:	4641      	mov	r1, r8
 8011276:	4650      	mov	r0, sl
 8011278:	f004 fcd6 	bl	8015c28 <__ssprint_r>
 801127c:	2800      	cmp	r0, #0
 801127e:	f040 8621 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011282:	ac25      	add	r4, sp, #148	; 0x94
 8011284:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8011288:	b173      	cbz	r3, 80112a8 <_svfprintf_r+0x6e8>
 801128a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801128e:	6023      	str	r3, [r4, #0]
 8011290:	2301      	movs	r3, #1
 8011292:	6063      	str	r3, [r4, #4]
 8011294:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011296:	3301      	adds	r3, #1
 8011298:	9324      	str	r3, [sp, #144]	; 0x90
 801129a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801129c:	3301      	adds	r3, #1
 801129e:	2b07      	cmp	r3, #7
 80112a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80112a2:	f300 82e1 	bgt.w	8011868 <_svfprintf_r+0xca8>
 80112a6:	3408      	adds	r4, #8
 80112a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112aa:	b16b      	cbz	r3, 80112c8 <_svfprintf_r+0x708>
 80112ac:	ab1b      	add	r3, sp, #108	; 0x6c
 80112ae:	6023      	str	r3, [r4, #0]
 80112b0:	2302      	movs	r3, #2
 80112b2:	6063      	str	r3, [r4, #4]
 80112b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80112b6:	3302      	adds	r3, #2
 80112b8:	9324      	str	r3, [sp, #144]	; 0x90
 80112ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80112bc:	3301      	adds	r3, #1
 80112be:	2b07      	cmp	r3, #7
 80112c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80112c2:	f300 82db 	bgt.w	801187c <_svfprintf_r+0xcbc>
 80112c6:	3408      	adds	r4, #8
 80112c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80112ca:	2b80      	cmp	r3, #128	; 0x80
 80112cc:	d11f      	bne.n	801130e <_svfprintf_r+0x74e>
 80112ce:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80112d2:	1a9f      	subs	r7, r3, r2
 80112d4:	2f00      	cmp	r7, #0
 80112d6:	dd1a      	ble.n	801130e <_svfprintf_r+0x74e>
 80112d8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80112dc:	4814      	ldr	r0, [pc, #80]	; (8011330 <_svfprintf_r+0x770>)
 80112de:	6020      	str	r0, [r4, #0]
 80112e0:	2f10      	cmp	r7, #16
 80112e2:	f103 0301 	add.w	r3, r3, #1
 80112e6:	f104 0108 	add.w	r1, r4, #8
 80112ea:	f300 82d1 	bgt.w	8011890 <_svfprintf_r+0xcd0>
 80112ee:	6067      	str	r7, [r4, #4]
 80112f0:	2b07      	cmp	r3, #7
 80112f2:	4417      	add	r7, r2
 80112f4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80112f8:	f340 82dd 	ble.w	80118b6 <_svfprintf_r+0xcf6>
 80112fc:	aa22      	add	r2, sp, #136	; 0x88
 80112fe:	4641      	mov	r1, r8
 8011300:	4650      	mov	r0, sl
 8011302:	f004 fc91 	bl	8015c28 <__ssprint_r>
 8011306:	2800      	cmp	r0, #0
 8011308:	f040 85dc 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 801130c:	ac25      	add	r4, sp, #148	; 0x94
 801130e:	9b04      	ldr	r3, [sp, #16]
 8011310:	1af6      	subs	r6, r6, r3
 8011312:	2e00      	cmp	r6, #0
 8011314:	dd28      	ble.n	8011368 <_svfprintf_r+0x7a8>
 8011316:	4f06      	ldr	r7, [pc, #24]	; (8011330 <_svfprintf_r+0x770>)
 8011318:	e00c      	b.n	8011334 <_svfprintf_r+0x774>
 801131a:	bf00      	nop
 801131c:	0801b345 	.word	0x0801b345
 8011320:	0801b334 	.word	0x0801b334
 8011324:	40300000 	.word	0x40300000
 8011328:	3fe00000 	.word	0x3fe00000
 801132c:	0801b358 	.word	0x0801b358
 8011330:	0801b368 	.word	0x0801b368
 8011334:	6027      	str	r7, [r4, #0]
 8011336:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801133a:	2e10      	cmp	r6, #16
 801133c:	f103 0301 	add.w	r3, r3, #1
 8011340:	f104 0108 	add.w	r1, r4, #8
 8011344:	f300 82b9 	bgt.w	80118ba <_svfprintf_r+0xcfa>
 8011348:	6066      	str	r6, [r4, #4]
 801134a:	2b07      	cmp	r3, #7
 801134c:	4416      	add	r6, r2
 801134e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8011352:	f340 82c5 	ble.w	80118e0 <_svfprintf_r+0xd20>
 8011356:	aa22      	add	r2, sp, #136	; 0x88
 8011358:	4641      	mov	r1, r8
 801135a:	4650      	mov	r0, sl
 801135c:	f004 fc64 	bl	8015c28 <__ssprint_r>
 8011360:	2800      	cmp	r0, #0
 8011362:	f040 85af 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011366:	ac25      	add	r4, sp, #148	; 0x94
 8011368:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801136c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801136e:	f040 82bd 	bne.w	80118ec <_svfprintf_r+0xd2c>
 8011372:	9b04      	ldr	r3, [sp, #16]
 8011374:	f8c4 9000 	str.w	r9, [r4]
 8011378:	441e      	add	r6, r3
 801137a:	6063      	str	r3, [r4, #4]
 801137c:	9624      	str	r6, [sp, #144]	; 0x90
 801137e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011380:	3301      	adds	r3, #1
 8011382:	2b07      	cmp	r3, #7
 8011384:	9323      	str	r3, [sp, #140]	; 0x8c
 8011386:	f300 82f6 	bgt.w	8011976 <_svfprintf_r+0xdb6>
 801138a:	3408      	adds	r4, #8
 801138c:	f01b 0f04 	tst.w	fp, #4
 8011390:	f040 857a 	bne.w	8011e88 <_svfprintf_r+0x12c8>
 8011394:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8011398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801139a:	428a      	cmp	r2, r1
 801139c:	bfac      	ite	ge
 801139e:	189b      	addge	r3, r3, r2
 80113a0:	185b      	addlt	r3, r3, r1
 80113a2:	930c      	str	r3, [sp, #48]	; 0x30
 80113a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80113a6:	b13b      	cbz	r3, 80113b8 <_svfprintf_r+0x7f8>
 80113a8:	aa22      	add	r2, sp, #136	; 0x88
 80113aa:	4641      	mov	r1, r8
 80113ac:	4650      	mov	r0, sl
 80113ae:	f004 fc3b 	bl	8015c28 <__ssprint_r>
 80113b2:	2800      	cmp	r0, #0
 80113b4:	f040 8586 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 80113b8:	2300      	movs	r3, #0
 80113ba:	9323      	str	r3, [sp, #140]	; 0x8c
 80113bc:	9b03      	ldr	r3, [sp, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f040 859c 	bne.w	8011efc <_svfprintf_r+0x133c>
 80113c4:	ac25      	add	r4, sp, #148	; 0x94
 80113c6:	e0ec      	b.n	80115a2 <_svfprintf_r+0x9e2>
 80113c8:	9003      	str	r0, [sp, #12]
 80113ca:	e62c      	b.n	8011026 <_svfprintf_r+0x466>
 80113cc:	9003      	str	r0, [sp, #12]
 80113ce:	2306      	movs	r3, #6
 80113d0:	e61a      	b.n	8011008 <_svfprintf_r+0x448>
 80113d2:	9003      	str	r0, [sp, #12]
 80113d4:	e627      	b.n	8011026 <_svfprintf_r+0x466>
 80113d6:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80113da:	2300      	movs	r3, #0
 80113dc:	eeb0 8a47 	vmov.f32	s16, s14
 80113e0:	eef0 8a67 	vmov.f32	s17, s15
 80113e4:	e62f      	b.n	8011046 <_svfprintf_r+0x486>
 80113e6:	f802 0c01 	strb.w	r0, [r2, #-1]
 80113ea:	e691      	b.n	8011110 <_svfprintf_r+0x550>
 80113ec:	f803 0b01 	strb.w	r0, [r3], #1
 80113f0:	1aca      	subs	r2, r1, r3
 80113f2:	2a00      	cmp	r2, #0
 80113f4:	dafa      	bge.n	80113ec <_svfprintf_r+0x82c>
 80113f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113fa:	3201      	adds	r2, #1
 80113fc:	f103 0301 	add.w	r3, r3, #1
 8011400:	bfb8      	it	lt
 8011402:	2300      	movlt	r3, #0
 8011404:	441d      	add	r5, r3
 8011406:	e693      	b.n	8011130 <_svfprintf_r+0x570>
 8011408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801140a:	462b      	mov	r3, r5
 801140c:	18a9      	adds	r1, r5, r2
 801140e:	2030      	movs	r0, #48	; 0x30
 8011410:	e7ee      	b.n	80113f0 <_svfprintf_r+0x830>
 8011412:	9b08      	ldr	r3, [sp, #32]
 8011414:	2b46      	cmp	r3, #70	; 0x46
 8011416:	d005      	beq.n	8011424 <_svfprintf_r+0x864>
 8011418:	2b45      	cmp	r3, #69	; 0x45
 801141a:	d11b      	bne.n	8011454 <_svfprintf_r+0x894>
 801141c:	9b04      	ldr	r3, [sp, #16]
 801141e:	1c5d      	adds	r5, r3, #1
 8011420:	2102      	movs	r1, #2
 8011422:	e001      	b.n	8011428 <_svfprintf_r+0x868>
 8011424:	9d04      	ldr	r5, [sp, #16]
 8011426:	2103      	movs	r1, #3
 8011428:	ab20      	add	r3, sp, #128	; 0x80
 801142a:	9301      	str	r3, [sp, #4]
 801142c:	ab1d      	add	r3, sp, #116	; 0x74
 801142e:	9300      	str	r3, [sp, #0]
 8011430:	462a      	mov	r2, r5
 8011432:	ab1c      	add	r3, sp, #112	; 0x70
 8011434:	4650      	mov	r0, sl
 8011436:	eeb0 0a48 	vmov.f32	s0, s16
 801143a:	eef0 0a68 	vmov.f32	s1, s17
 801143e:	f002 fb63 	bl	8013b08 <_dtoa_r>
 8011442:	9b08      	ldr	r3, [sp, #32]
 8011444:	2b47      	cmp	r3, #71	; 0x47
 8011446:	4681      	mov	r9, r0
 8011448:	d106      	bne.n	8011458 <_svfprintf_r+0x898>
 801144a:	f01b 0f01 	tst.w	fp, #1
 801144e:	d103      	bne.n	8011458 <_svfprintf_r+0x898>
 8011450:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8011452:	e66d      	b.n	8011130 <_svfprintf_r+0x570>
 8011454:	9d04      	ldr	r5, [sp, #16]
 8011456:	e7e3      	b.n	8011420 <_svfprintf_r+0x860>
 8011458:	9b08      	ldr	r3, [sp, #32]
 801145a:	2b46      	cmp	r3, #70	; 0x46
 801145c:	eb09 0605 	add.w	r6, r9, r5
 8011460:	d10f      	bne.n	8011482 <_svfprintf_r+0x8c2>
 8011462:	f899 3000 	ldrb.w	r3, [r9]
 8011466:	2b30      	cmp	r3, #48	; 0x30
 8011468:	d109      	bne.n	801147e <_svfprintf_r+0x8be>
 801146a:	ec51 0b18 	vmov	r0, r1, d8
 801146e:	2200      	movs	r2, #0
 8011470:	2300      	movs	r3, #0
 8011472:	f7ef fb53 	bl	8000b1c <__aeabi_dcmpeq>
 8011476:	b910      	cbnz	r0, 801147e <_svfprintf_r+0x8be>
 8011478:	f1c5 0501 	rsb	r5, r5, #1
 801147c:	951c      	str	r5, [sp, #112]	; 0x70
 801147e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011480:	441e      	add	r6, r3
 8011482:	ec51 0b18 	vmov	r0, r1, d8
 8011486:	2200      	movs	r2, #0
 8011488:	2300      	movs	r3, #0
 801148a:	f7ef fb47 	bl	8000b1c <__aeabi_dcmpeq>
 801148e:	b100      	cbz	r0, 8011492 <_svfprintf_r+0x8d2>
 8011490:	9620      	str	r6, [sp, #128]	; 0x80
 8011492:	2230      	movs	r2, #48	; 0x30
 8011494:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011496:	429e      	cmp	r6, r3
 8011498:	d9da      	bls.n	8011450 <_svfprintf_r+0x890>
 801149a:	1c59      	adds	r1, r3, #1
 801149c:	9120      	str	r1, [sp, #128]	; 0x80
 801149e:	701a      	strb	r2, [r3, #0]
 80114a0:	e7f8      	b.n	8011494 <_svfprintf_r+0x8d4>
 80114a2:	9b08      	ldr	r3, [sp, #32]
 80114a4:	2b46      	cmp	r3, #70	; 0x46
 80114a6:	f47f ae54 	bne.w	8011152 <_svfprintf_r+0x592>
 80114aa:	9a04      	ldr	r2, [sp, #16]
 80114ac:	f00b 0301 	and.w	r3, fp, #1
 80114b0:	2d00      	cmp	r5, #0
 80114b2:	ea43 0302 	orr.w	r3, r3, r2
 80114b6:	dd1a      	ble.n	80114ee <_svfprintf_r+0x92e>
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d034      	beq.n	8011526 <_svfprintf_r+0x966>
 80114bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114be:	18eb      	adds	r3, r5, r3
 80114c0:	441a      	add	r2, r3
 80114c2:	9204      	str	r2, [sp, #16]
 80114c4:	2366      	movs	r3, #102	; 0x66
 80114c6:	9306      	str	r3, [sp, #24]
 80114c8:	e033      	b.n	8011532 <_svfprintf_r+0x972>
 80114ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80114ce:	f802 6b01 	strb.w	r6, [r2], #1
 80114d2:	e675      	b.n	80111c0 <_svfprintf_r+0x600>
 80114d4:	b941      	cbnz	r1, 80114e8 <_svfprintf_r+0x928>
 80114d6:	2230      	movs	r2, #48	; 0x30
 80114d8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80114dc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80114e0:	3330      	adds	r3, #48	; 0x30
 80114e2:	f802 3b01 	strb.w	r3, [r2], #1
 80114e6:	e677      	b.n	80111d8 <_svfprintf_r+0x618>
 80114e8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80114ec:	e7f8      	b.n	80114e0 <_svfprintf_r+0x920>
 80114ee:	b1e3      	cbz	r3, 801152a <_svfprintf_r+0x96a>
 80114f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114f2:	9a04      	ldr	r2, [sp, #16]
 80114f4:	3301      	adds	r3, #1
 80114f6:	e7e3      	b.n	80114c0 <_svfprintf_r+0x900>
 80114f8:	9b05      	ldr	r3, [sp, #20]
 80114fa:	429d      	cmp	r5, r3
 80114fc:	db07      	blt.n	801150e <_svfprintf_r+0x94e>
 80114fe:	f01b 0f01 	tst.w	fp, #1
 8011502:	d02d      	beq.n	8011560 <_svfprintf_r+0x9a0>
 8011504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011506:	18eb      	adds	r3, r5, r3
 8011508:	9304      	str	r3, [sp, #16]
 801150a:	2367      	movs	r3, #103	; 0x67
 801150c:	e7db      	b.n	80114c6 <_svfprintf_r+0x906>
 801150e:	9b05      	ldr	r3, [sp, #20]
 8011510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011512:	2d00      	cmp	r5, #0
 8011514:	4413      	add	r3, r2
 8011516:	9304      	str	r3, [sp, #16]
 8011518:	dcf7      	bgt.n	801150a <_svfprintf_r+0x94a>
 801151a:	9a04      	ldr	r2, [sp, #16]
 801151c:	f1c5 0301 	rsb	r3, r5, #1
 8011520:	441a      	add	r2, r3
 8011522:	9204      	str	r2, [sp, #16]
 8011524:	e7f1      	b.n	801150a <_svfprintf_r+0x94a>
 8011526:	9504      	str	r5, [sp, #16]
 8011528:	e7cc      	b.n	80114c4 <_svfprintf_r+0x904>
 801152a:	2366      	movs	r3, #102	; 0x66
 801152c:	9306      	str	r3, [sp, #24]
 801152e:	2301      	movs	r3, #1
 8011530:	9304      	str	r3, [sp, #16]
 8011532:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8011536:	9309      	str	r3, [sp, #36]	; 0x24
 8011538:	d025      	beq.n	8011586 <_svfprintf_r+0x9c6>
 801153a:	2300      	movs	r3, #0
 801153c:	2d00      	cmp	r5, #0
 801153e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011542:	f77f ae61 	ble.w	8011208 <_svfprintf_r+0x648>
 8011546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	2bff      	cmp	r3, #255	; 0xff
 801154c:	d10a      	bne.n	8011564 <_svfprintf_r+0x9a4>
 801154e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011552:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011554:	4413      	add	r3, r2
 8011556:	9a04      	ldr	r2, [sp, #16]
 8011558:	fb01 2303 	mla	r3, r1, r3, r2
 801155c:	9304      	str	r3, [sp, #16]
 801155e:	e653      	b.n	8011208 <_svfprintf_r+0x648>
 8011560:	9504      	str	r5, [sp, #16]
 8011562:	e7d2      	b.n	801150a <_svfprintf_r+0x94a>
 8011564:	42ab      	cmp	r3, r5
 8011566:	daf2      	bge.n	801154e <_svfprintf_r+0x98e>
 8011568:	1aed      	subs	r5, r5, r3
 801156a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801156c:	785b      	ldrb	r3, [r3, #1]
 801156e:	b133      	cbz	r3, 801157e <_svfprintf_r+0x9be>
 8011570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011572:	3301      	adds	r3, #1
 8011574:	9309      	str	r3, [sp, #36]	; 0x24
 8011576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011578:	3301      	adds	r3, #1
 801157a:	930a      	str	r3, [sp, #40]	; 0x28
 801157c:	e7e3      	b.n	8011546 <_svfprintf_r+0x986>
 801157e:	9b08      	ldr	r3, [sp, #32]
 8011580:	3301      	adds	r3, #1
 8011582:	9308      	str	r3, [sp, #32]
 8011584:	e7df      	b.n	8011546 <_svfprintf_r+0x986>
 8011586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011588:	9308      	str	r3, [sp, #32]
 801158a:	e63d      	b.n	8011208 <_svfprintf_r+0x648>
 801158c:	1d33      	adds	r3, r6, #4
 801158e:	f01b 0f20 	tst.w	fp, #32
 8011592:	9307      	str	r3, [sp, #28]
 8011594:	d00a      	beq.n	80115ac <_svfprintf_r+0x9ec>
 8011596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011598:	6833      	ldr	r3, [r6, #0]
 801159a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801159c:	17d2      	asrs	r2, r2, #31
 801159e:	e9c3 1200 	strd	r1, r2, [r3]
 80115a2:	9e07      	ldr	r6, [sp, #28]
 80115a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80115a8:	f7ff bb4a 	b.w	8010c40 <_svfprintf_r+0x80>
 80115ac:	f01b 0f10 	tst.w	fp, #16
 80115b0:	d003      	beq.n	80115ba <_svfprintf_r+0x9fa>
 80115b2:	6833      	ldr	r3, [r6, #0]
 80115b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115b6:	601a      	str	r2, [r3, #0]
 80115b8:	e7f3      	b.n	80115a2 <_svfprintf_r+0x9e2>
 80115ba:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80115be:	d003      	beq.n	80115c8 <_svfprintf_r+0xa08>
 80115c0:	6833      	ldr	r3, [r6, #0]
 80115c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115c4:	801a      	strh	r2, [r3, #0]
 80115c6:	e7ec      	b.n	80115a2 <_svfprintf_r+0x9e2>
 80115c8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80115cc:	d0f1      	beq.n	80115b2 <_svfprintf_r+0x9f2>
 80115ce:	6833      	ldr	r3, [r6, #0]
 80115d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115d2:	701a      	strb	r2, [r3, #0]
 80115d4:	e7e5      	b.n	80115a2 <_svfprintf_r+0x9e2>
 80115d6:	f04b 0b10 	orr.w	fp, fp, #16
 80115da:	f01b 0320 	ands.w	r3, fp, #32
 80115de:	d01f      	beq.n	8011620 <_svfprintf_r+0xa60>
 80115e0:	1df3      	adds	r3, r6, #7
 80115e2:	f023 0307 	bic.w	r3, r3, #7
 80115e6:	461a      	mov	r2, r3
 80115e8:	685d      	ldr	r5, [r3, #4]
 80115ea:	f852 6b08 	ldr.w	r6, [r2], #8
 80115ee:	9207      	str	r2, [sp, #28]
 80115f0:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80115f4:	2300      	movs	r3, #0
 80115f6:	2200      	movs	r2, #0
 80115f8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80115fc:	9a04      	ldr	r2, [sp, #16]
 80115fe:	3201      	adds	r2, #1
 8011600:	f000 848d 	beq.w	8011f1e <_svfprintf_r+0x135e>
 8011604:	ea56 0205 	orrs.w	r2, r6, r5
 8011608:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 801160c:	f040 848c 	bne.w	8011f28 <_svfprintf_r+0x1368>
 8011610:	9a04      	ldr	r2, [sp, #16]
 8011612:	2a00      	cmp	r2, #0
 8011614:	f000 80f9 	beq.w	801180a <_svfprintf_r+0xc4a>
 8011618:	2b01      	cmp	r3, #1
 801161a:	f040 8488 	bne.w	8011f2e <_svfprintf_r+0x136e>
 801161e:	e09f      	b.n	8011760 <_svfprintf_r+0xba0>
 8011620:	4632      	mov	r2, r6
 8011622:	f01b 0510 	ands.w	r5, fp, #16
 8011626:	f852 6b04 	ldr.w	r6, [r2], #4
 801162a:	9207      	str	r2, [sp, #28]
 801162c:	d001      	beq.n	8011632 <_svfprintf_r+0xa72>
 801162e:	461d      	mov	r5, r3
 8011630:	e7de      	b.n	80115f0 <_svfprintf_r+0xa30>
 8011632:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8011636:	d001      	beq.n	801163c <_svfprintf_r+0xa7c>
 8011638:	b2b6      	uxth	r6, r6
 801163a:	e7d9      	b.n	80115f0 <_svfprintf_r+0xa30>
 801163c:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8011640:	d0d6      	beq.n	80115f0 <_svfprintf_r+0xa30>
 8011642:	b2f6      	uxtb	r6, r6
 8011644:	e7f3      	b.n	801162e <_svfprintf_r+0xa6e>
 8011646:	4633      	mov	r3, r6
 8011648:	2278      	movs	r2, #120	; 0x78
 801164a:	f853 6b04 	ldr.w	r6, [r3], #4
 801164e:	9307      	str	r3, [sp, #28]
 8011650:	2330      	movs	r3, #48	; 0x30
 8011652:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8011656:	4ba3      	ldr	r3, [pc, #652]	; (80118e4 <_svfprintf_r+0xd24>)
 8011658:	9316      	str	r3, [sp, #88]	; 0x58
 801165a:	2500      	movs	r5, #0
 801165c:	f04b 0b02 	orr.w	fp, fp, #2
 8011660:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8011664:	2302      	movs	r3, #2
 8011666:	9206      	str	r2, [sp, #24]
 8011668:	e7c5      	b.n	80115f6 <_svfprintf_r+0xa36>
 801166a:	4633      	mov	r3, r6
 801166c:	2500      	movs	r5, #0
 801166e:	f853 9b04 	ldr.w	r9, [r3], #4
 8011672:	9307      	str	r3, [sp, #28]
 8011674:	9b04      	ldr	r3, [sp, #16]
 8011676:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801167a:	1c58      	adds	r0, r3, #1
 801167c:	d010      	beq.n	80116a0 <_svfprintf_r+0xae0>
 801167e:	461a      	mov	r2, r3
 8011680:	4629      	mov	r1, r5
 8011682:	4648      	mov	r0, r9
 8011684:	f7ee fdcc 	bl	8000220 <memchr>
 8011688:	9003      	str	r0, [sp, #12]
 801168a:	2800      	cmp	r0, #0
 801168c:	f000 80d4 	beq.w	8011838 <_svfprintf_r+0xc78>
 8011690:	eba0 0309 	sub.w	r3, r0, r9
 8011694:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8011698:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801169c:	462e      	mov	r6, r5
 801169e:	e5bb      	b.n	8011218 <_svfprintf_r+0x658>
 80116a0:	4648      	mov	r0, r9
 80116a2:	f7ee fdb5 	bl	8000210 <strlen>
 80116a6:	e9cd 5003 	strd	r5, r0, [sp, #12]
 80116aa:	e45f      	b.n	8010f6c <_svfprintf_r+0x3ac>
 80116ac:	f04b 0b10 	orr.w	fp, fp, #16
 80116b0:	f01b 0320 	ands.w	r3, fp, #32
 80116b4:	d009      	beq.n	80116ca <_svfprintf_r+0xb0a>
 80116b6:	1df3      	adds	r3, r6, #7
 80116b8:	f023 0307 	bic.w	r3, r3, #7
 80116bc:	461a      	mov	r2, r3
 80116be:	685d      	ldr	r5, [r3, #4]
 80116c0:	f852 6b08 	ldr.w	r6, [r2], #8
 80116c4:	9207      	str	r2, [sp, #28]
 80116c6:	2301      	movs	r3, #1
 80116c8:	e795      	b.n	80115f6 <_svfprintf_r+0xa36>
 80116ca:	4632      	mov	r2, r6
 80116cc:	f01b 0510 	ands.w	r5, fp, #16
 80116d0:	f852 6b04 	ldr.w	r6, [r2], #4
 80116d4:	9207      	str	r2, [sp, #28]
 80116d6:	d001      	beq.n	80116dc <_svfprintf_r+0xb1c>
 80116d8:	461d      	mov	r5, r3
 80116da:	e7f4      	b.n	80116c6 <_svfprintf_r+0xb06>
 80116dc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80116e0:	d001      	beq.n	80116e6 <_svfprintf_r+0xb26>
 80116e2:	b2b6      	uxth	r6, r6
 80116e4:	e7ef      	b.n	80116c6 <_svfprintf_r+0xb06>
 80116e6:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80116ea:	d0ec      	beq.n	80116c6 <_svfprintf_r+0xb06>
 80116ec:	b2f6      	uxtb	r6, r6
 80116ee:	e7f3      	b.n	80116d8 <_svfprintf_r+0xb18>
 80116f0:	4b7d      	ldr	r3, [pc, #500]	; (80118e8 <_svfprintf_r+0xd28>)
 80116f2:	9316      	str	r3, [sp, #88]	; 0x58
 80116f4:	f01b 0320 	ands.w	r3, fp, #32
 80116f8:	d01b      	beq.n	8011732 <_svfprintf_r+0xb72>
 80116fa:	1df3      	adds	r3, r6, #7
 80116fc:	f023 0307 	bic.w	r3, r3, #7
 8011700:	461a      	mov	r2, r3
 8011702:	685d      	ldr	r5, [r3, #4]
 8011704:	f852 6b08 	ldr.w	r6, [r2], #8
 8011708:	9207      	str	r2, [sp, #28]
 801170a:	f01b 0f01 	tst.w	fp, #1
 801170e:	d00a      	beq.n	8011726 <_svfprintf_r+0xb66>
 8011710:	ea56 0305 	orrs.w	r3, r6, r5
 8011714:	d007      	beq.n	8011726 <_svfprintf_r+0xb66>
 8011716:	2330      	movs	r3, #48	; 0x30
 8011718:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801171c:	9b06      	ldr	r3, [sp, #24]
 801171e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8011722:	f04b 0b02 	orr.w	fp, fp, #2
 8011726:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801172a:	2302      	movs	r3, #2
 801172c:	e763      	b.n	80115f6 <_svfprintf_r+0xa36>
 801172e:	4b6d      	ldr	r3, [pc, #436]	; (80118e4 <_svfprintf_r+0xd24>)
 8011730:	e7df      	b.n	80116f2 <_svfprintf_r+0xb32>
 8011732:	4632      	mov	r2, r6
 8011734:	f01b 0510 	ands.w	r5, fp, #16
 8011738:	f852 6b04 	ldr.w	r6, [r2], #4
 801173c:	9207      	str	r2, [sp, #28]
 801173e:	d001      	beq.n	8011744 <_svfprintf_r+0xb84>
 8011740:	461d      	mov	r5, r3
 8011742:	e7e2      	b.n	801170a <_svfprintf_r+0xb4a>
 8011744:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8011748:	d001      	beq.n	801174e <_svfprintf_r+0xb8e>
 801174a:	b2b6      	uxth	r6, r6
 801174c:	e7dd      	b.n	801170a <_svfprintf_r+0xb4a>
 801174e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8011752:	d0da      	beq.n	801170a <_svfprintf_r+0xb4a>
 8011754:	b2f6      	uxtb	r6, r6
 8011756:	e7f3      	b.n	8011740 <_svfprintf_r+0xb80>
 8011758:	2e0a      	cmp	r6, #10
 801175a:	f175 0300 	sbcs.w	r3, r5, #0
 801175e:	d205      	bcs.n	801176c <_svfprintf_r+0xbac>
 8011760:	3630      	adds	r6, #48	; 0x30
 8011762:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8011766:	f20d 1937 	addw	r9, sp, #311	; 0x137
 801176a:	e3fb      	b.n	8011f64 <_svfprintf_r+0x13a4>
 801176c:	2300      	movs	r3, #0
 801176e:	9305      	str	r3, [sp, #20]
 8011770:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8011774:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8011778:	9303      	str	r3, [sp, #12]
 801177a:	220a      	movs	r2, #10
 801177c:	2300      	movs	r3, #0
 801177e:	4630      	mov	r0, r6
 8011780:	4629      	mov	r1, r5
 8011782:	f7ef fa8b 	bl	8000c9c <__aeabi_uldivmod>
 8011786:	9b05      	ldr	r3, [sp, #20]
 8011788:	3301      	adds	r3, #1
 801178a:	9305      	str	r3, [sp, #20]
 801178c:	9b03      	ldr	r3, [sp, #12]
 801178e:	3230      	adds	r2, #48	; 0x30
 8011790:	f10b 39ff 	add.w	r9, fp, #4294967295
 8011794:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8011798:	b1d3      	cbz	r3, 80117d0 <_svfprintf_r+0xc10>
 801179a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801179c:	9a05      	ldr	r2, [sp, #20]
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d115      	bne.n	80117d0 <_svfprintf_r+0xc10>
 80117a4:	2aff      	cmp	r2, #255	; 0xff
 80117a6:	d013      	beq.n	80117d0 <_svfprintf_r+0xc10>
 80117a8:	2e0a      	cmp	r6, #10
 80117aa:	f175 0300 	sbcs.w	r3, r5, #0
 80117ae:	d30f      	bcc.n	80117d0 <_svfprintf_r+0xc10>
 80117b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80117b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80117b4:	eba9 0903 	sub.w	r9, r9, r3
 80117b8:	461a      	mov	r2, r3
 80117ba:	4648      	mov	r0, r9
 80117bc:	f004 f9a3 	bl	8015b06 <strncpy>
 80117c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117c2:	785b      	ldrb	r3, [r3, #1]
 80117c4:	b11b      	cbz	r3, 80117ce <_svfprintf_r+0xc0e>
 80117c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117c8:	3301      	adds	r3, #1
 80117ca:	930a      	str	r3, [sp, #40]	; 0x28
 80117cc:	2300      	movs	r3, #0
 80117ce:	9305      	str	r3, [sp, #20]
 80117d0:	2300      	movs	r3, #0
 80117d2:	220a      	movs	r2, #10
 80117d4:	4630      	mov	r0, r6
 80117d6:	4629      	mov	r1, r5
 80117d8:	f7ef fa60 	bl	8000c9c <__aeabi_uldivmod>
 80117dc:	2e0a      	cmp	r6, #10
 80117de:	f175 0300 	sbcs.w	r3, r5, #0
 80117e2:	f0c0 83bf 	bcc.w	8011f64 <_svfprintf_r+0x13a4>
 80117e6:	4606      	mov	r6, r0
 80117e8:	460d      	mov	r5, r1
 80117ea:	46cb      	mov	fp, r9
 80117ec:	e7c5      	b.n	801177a <_svfprintf_r+0xbba>
 80117ee:	f006 030f 	and.w	r3, r6, #15
 80117f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80117f4:	0936      	lsrs	r6, r6, #4
 80117f6:	5cd3      	ldrb	r3, [r2, r3]
 80117f8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80117fc:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8011800:	092d      	lsrs	r5, r5, #4
 8011802:	ea56 0305 	orrs.w	r3, r6, r5
 8011806:	d1f2      	bne.n	80117ee <_svfprintf_r+0xc2e>
 8011808:	e3ac      	b.n	8011f64 <_svfprintf_r+0x13a4>
 801180a:	b933      	cbnz	r3, 801181a <_svfprintf_r+0xc5a>
 801180c:	f01b 0f01 	tst.w	fp, #1
 8011810:	d003      	beq.n	801181a <_svfprintf_r+0xc5a>
 8011812:	2330      	movs	r3, #48	; 0x30
 8011814:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8011818:	e7a5      	b.n	8011766 <_svfprintf_r+0xba6>
 801181a:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 801181e:	e3a1      	b.n	8011f64 <_svfprintf_r+0x13a4>
 8011820:	9b06      	ldr	r3, [sp, #24]
 8011822:	2b00      	cmp	r3, #0
 8011824:	f000 8370 	beq.w	8011f08 <_svfprintf_r+0x1348>
 8011828:	2000      	movs	r0, #0
 801182a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801182e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8011832:	9607      	str	r6, [sp, #28]
 8011834:	f7ff bb29 	b.w	8010e8a <_svfprintf_r+0x2ca>
 8011838:	9e03      	ldr	r6, [sp, #12]
 801183a:	f7ff bb98 	b.w	8010f6e <_svfprintf_r+0x3ae>
 801183e:	2010      	movs	r0, #16
 8011840:	4402      	add	r2, r0
 8011842:	2b07      	cmp	r3, #7
 8011844:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011848:	6060      	str	r0, [r4, #4]
 801184a:	dd08      	ble.n	801185e <_svfprintf_r+0xc9e>
 801184c:	aa22      	add	r2, sp, #136	; 0x88
 801184e:	4641      	mov	r1, r8
 8011850:	4650      	mov	r0, sl
 8011852:	f004 f9e9 	bl	8015c28 <__ssprint_r>
 8011856:	2800      	cmp	r0, #0
 8011858:	f040 8334 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 801185c:	a925      	add	r1, sp, #148	; 0x94
 801185e:	3f10      	subs	r7, #16
 8011860:	460c      	mov	r4, r1
 8011862:	e4f4      	b.n	801124e <_svfprintf_r+0x68e>
 8011864:	460c      	mov	r4, r1
 8011866:	e50d      	b.n	8011284 <_svfprintf_r+0x6c4>
 8011868:	aa22      	add	r2, sp, #136	; 0x88
 801186a:	4641      	mov	r1, r8
 801186c:	4650      	mov	r0, sl
 801186e:	f004 f9db 	bl	8015c28 <__ssprint_r>
 8011872:	2800      	cmp	r0, #0
 8011874:	f040 8326 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011878:	ac25      	add	r4, sp, #148	; 0x94
 801187a:	e515      	b.n	80112a8 <_svfprintf_r+0x6e8>
 801187c:	aa22      	add	r2, sp, #136	; 0x88
 801187e:	4641      	mov	r1, r8
 8011880:	4650      	mov	r0, sl
 8011882:	f004 f9d1 	bl	8015c28 <__ssprint_r>
 8011886:	2800      	cmp	r0, #0
 8011888:	f040 831c 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 801188c:	ac25      	add	r4, sp, #148	; 0x94
 801188e:	e51b      	b.n	80112c8 <_svfprintf_r+0x708>
 8011890:	2010      	movs	r0, #16
 8011892:	4402      	add	r2, r0
 8011894:	2b07      	cmp	r3, #7
 8011896:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801189a:	6060      	str	r0, [r4, #4]
 801189c:	dd08      	ble.n	80118b0 <_svfprintf_r+0xcf0>
 801189e:	aa22      	add	r2, sp, #136	; 0x88
 80118a0:	4641      	mov	r1, r8
 80118a2:	4650      	mov	r0, sl
 80118a4:	f004 f9c0 	bl	8015c28 <__ssprint_r>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	f040 830b 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 80118ae:	a925      	add	r1, sp, #148	; 0x94
 80118b0:	3f10      	subs	r7, #16
 80118b2:	460c      	mov	r4, r1
 80118b4:	e510      	b.n	80112d8 <_svfprintf_r+0x718>
 80118b6:	460c      	mov	r4, r1
 80118b8:	e529      	b.n	801130e <_svfprintf_r+0x74e>
 80118ba:	2010      	movs	r0, #16
 80118bc:	4402      	add	r2, r0
 80118be:	2b07      	cmp	r3, #7
 80118c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80118c4:	6060      	str	r0, [r4, #4]
 80118c6:	dd08      	ble.n	80118da <_svfprintf_r+0xd1a>
 80118c8:	aa22      	add	r2, sp, #136	; 0x88
 80118ca:	4641      	mov	r1, r8
 80118cc:	4650      	mov	r0, sl
 80118ce:	f004 f9ab 	bl	8015c28 <__ssprint_r>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	f040 82f6 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 80118d8:	a925      	add	r1, sp, #148	; 0x94
 80118da:	3e10      	subs	r6, #16
 80118dc:	460c      	mov	r4, r1
 80118de:	e529      	b.n	8011334 <_svfprintf_r+0x774>
 80118e0:	460c      	mov	r4, r1
 80118e2:	e541      	b.n	8011368 <_svfprintf_r+0x7a8>
 80118e4:	0801b334 	.word	0x0801b334
 80118e8:	0801b345 	.word	0x0801b345
 80118ec:	9b06      	ldr	r3, [sp, #24]
 80118ee:	2b65      	cmp	r3, #101	; 0x65
 80118f0:	f340 8230 	ble.w	8011d54 <_svfprintf_r+0x1194>
 80118f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80118f8:	2200      	movs	r2, #0
 80118fa:	2300      	movs	r3, #0
 80118fc:	f7ef f90e 	bl	8000b1c <__aeabi_dcmpeq>
 8011900:	2800      	cmp	r0, #0
 8011902:	d068      	beq.n	80119d6 <_svfprintf_r+0xe16>
 8011904:	4b6d      	ldr	r3, [pc, #436]	; (8011abc <_svfprintf_r+0xefc>)
 8011906:	6023      	str	r3, [r4, #0]
 8011908:	2301      	movs	r3, #1
 801190a:	441e      	add	r6, r3
 801190c:	6063      	str	r3, [r4, #4]
 801190e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011910:	9624      	str	r6, [sp, #144]	; 0x90
 8011912:	3301      	adds	r3, #1
 8011914:	2b07      	cmp	r3, #7
 8011916:	9323      	str	r3, [sp, #140]	; 0x8c
 8011918:	dc37      	bgt.n	801198a <_svfprintf_r+0xdca>
 801191a:	3408      	adds	r4, #8
 801191c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801191e:	9a05      	ldr	r2, [sp, #20]
 8011920:	4293      	cmp	r3, r2
 8011922:	db03      	blt.n	801192c <_svfprintf_r+0xd6c>
 8011924:	f01b 0f01 	tst.w	fp, #1
 8011928:	f43f ad30 	beq.w	801138c <_svfprintf_r+0x7cc>
 801192c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801192e:	6023      	str	r3, [r4, #0]
 8011930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011934:	6063      	str	r3, [r4, #4]
 8011936:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011938:	4413      	add	r3, r2
 801193a:	9324      	str	r3, [sp, #144]	; 0x90
 801193c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801193e:	3301      	adds	r3, #1
 8011940:	2b07      	cmp	r3, #7
 8011942:	9323      	str	r3, [sp, #140]	; 0x8c
 8011944:	dc2b      	bgt.n	801199e <_svfprintf_r+0xdde>
 8011946:	3408      	adds	r4, #8
 8011948:	9b05      	ldr	r3, [sp, #20]
 801194a:	1e5d      	subs	r5, r3, #1
 801194c:	2d00      	cmp	r5, #0
 801194e:	f77f ad1d 	ble.w	801138c <_svfprintf_r+0x7cc>
 8011952:	4e5b      	ldr	r6, [pc, #364]	; (8011ac0 <_svfprintf_r+0xf00>)
 8011954:	2710      	movs	r7, #16
 8011956:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801195a:	2d10      	cmp	r5, #16
 801195c:	f103 0301 	add.w	r3, r3, #1
 8011960:	f104 0108 	add.w	r1, r4, #8
 8011964:	6026      	str	r6, [r4, #0]
 8011966:	dc24      	bgt.n	80119b2 <_svfprintf_r+0xdf2>
 8011968:	6065      	str	r5, [r4, #4]
 801196a:	2b07      	cmp	r3, #7
 801196c:	4415      	add	r5, r2
 801196e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8011972:	f340 8286 	ble.w	8011e82 <_svfprintf_r+0x12c2>
 8011976:	aa22      	add	r2, sp, #136	; 0x88
 8011978:	4641      	mov	r1, r8
 801197a:	4650      	mov	r0, sl
 801197c:	f004 f954 	bl	8015c28 <__ssprint_r>
 8011980:	2800      	cmp	r0, #0
 8011982:	f040 829f 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011986:	ac25      	add	r4, sp, #148	; 0x94
 8011988:	e500      	b.n	801138c <_svfprintf_r+0x7cc>
 801198a:	aa22      	add	r2, sp, #136	; 0x88
 801198c:	4641      	mov	r1, r8
 801198e:	4650      	mov	r0, sl
 8011990:	f004 f94a 	bl	8015c28 <__ssprint_r>
 8011994:	2800      	cmp	r0, #0
 8011996:	f040 8295 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 801199a:	ac25      	add	r4, sp, #148	; 0x94
 801199c:	e7be      	b.n	801191c <_svfprintf_r+0xd5c>
 801199e:	aa22      	add	r2, sp, #136	; 0x88
 80119a0:	4641      	mov	r1, r8
 80119a2:	4650      	mov	r0, sl
 80119a4:	f004 f940 	bl	8015c28 <__ssprint_r>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	f040 828b 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 80119ae:	ac25      	add	r4, sp, #148	; 0x94
 80119b0:	e7ca      	b.n	8011948 <_svfprintf_r+0xd88>
 80119b2:	3210      	adds	r2, #16
 80119b4:	2b07      	cmp	r3, #7
 80119b6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80119ba:	6067      	str	r7, [r4, #4]
 80119bc:	dd08      	ble.n	80119d0 <_svfprintf_r+0xe10>
 80119be:	aa22      	add	r2, sp, #136	; 0x88
 80119c0:	4641      	mov	r1, r8
 80119c2:	4650      	mov	r0, sl
 80119c4:	f004 f930 	bl	8015c28 <__ssprint_r>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	f040 827b 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 80119ce:	a925      	add	r1, sp, #148	; 0x94
 80119d0:	3d10      	subs	r5, #16
 80119d2:	460c      	mov	r4, r1
 80119d4:	e7bf      	b.n	8011956 <_svfprintf_r+0xd96>
 80119d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80119d8:	2b00      	cmp	r3, #0
 80119da:	dc73      	bgt.n	8011ac4 <_svfprintf_r+0xf04>
 80119dc:	4b37      	ldr	r3, [pc, #220]	; (8011abc <_svfprintf_r+0xefc>)
 80119de:	6023      	str	r3, [r4, #0]
 80119e0:	2301      	movs	r3, #1
 80119e2:	441e      	add	r6, r3
 80119e4:	6063      	str	r3, [r4, #4]
 80119e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80119e8:	9624      	str	r6, [sp, #144]	; 0x90
 80119ea:	3301      	adds	r3, #1
 80119ec:	2b07      	cmp	r3, #7
 80119ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80119f0:	dc3d      	bgt.n	8011a6e <_svfprintf_r+0xeae>
 80119f2:	3408      	adds	r4, #8
 80119f4:	9905      	ldr	r1, [sp, #20]
 80119f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80119f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80119fa:	430a      	orrs	r2, r1
 80119fc:	f00b 0101 	and.w	r1, fp, #1
 8011a00:	430a      	orrs	r2, r1
 8011a02:	f43f acc3 	beq.w	801138c <_svfprintf_r+0x7cc>
 8011a06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011a08:	6022      	str	r2, [r4, #0]
 8011a0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a0c:	6062      	str	r2, [r4, #4]
 8011a0e:	4413      	add	r3, r2
 8011a10:	9324      	str	r3, [sp, #144]	; 0x90
 8011a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011a14:	3301      	adds	r3, #1
 8011a16:	2b07      	cmp	r3, #7
 8011a18:	9323      	str	r3, [sp, #140]	; 0x8c
 8011a1a:	dc32      	bgt.n	8011a82 <_svfprintf_r+0xec2>
 8011a1c:	3408      	adds	r4, #8
 8011a1e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8011a20:	2d00      	cmp	r5, #0
 8011a22:	da1b      	bge.n	8011a5c <_svfprintf_r+0xe9c>
 8011a24:	4e26      	ldr	r6, [pc, #152]	; (8011ac0 <_svfprintf_r+0xf00>)
 8011a26:	426d      	negs	r5, r5
 8011a28:	4623      	mov	r3, r4
 8011a2a:	2710      	movs	r7, #16
 8011a2c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8011a30:	2d10      	cmp	r5, #16
 8011a32:	f102 0201 	add.w	r2, r2, #1
 8011a36:	f104 0408 	add.w	r4, r4, #8
 8011a3a:	601e      	str	r6, [r3, #0]
 8011a3c:	dc2b      	bgt.n	8011a96 <_svfprintf_r+0xed6>
 8011a3e:	605d      	str	r5, [r3, #4]
 8011a40:	2a07      	cmp	r2, #7
 8011a42:	440d      	add	r5, r1
 8011a44:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8011a48:	dd08      	ble.n	8011a5c <_svfprintf_r+0xe9c>
 8011a4a:	aa22      	add	r2, sp, #136	; 0x88
 8011a4c:	4641      	mov	r1, r8
 8011a4e:	4650      	mov	r0, sl
 8011a50:	f004 f8ea 	bl	8015c28 <__ssprint_r>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	f040 8235 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011a5a:	ac25      	add	r4, sp, #148	; 0x94
 8011a5c:	9b05      	ldr	r3, [sp, #20]
 8011a5e:	9a05      	ldr	r2, [sp, #20]
 8011a60:	6063      	str	r3, [r4, #4]
 8011a62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011a64:	f8c4 9000 	str.w	r9, [r4]
 8011a68:	4413      	add	r3, r2
 8011a6a:	9324      	str	r3, [sp, #144]	; 0x90
 8011a6c:	e487      	b.n	801137e <_svfprintf_r+0x7be>
 8011a6e:	aa22      	add	r2, sp, #136	; 0x88
 8011a70:	4641      	mov	r1, r8
 8011a72:	4650      	mov	r0, sl
 8011a74:	f004 f8d8 	bl	8015c28 <__ssprint_r>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	f040 8223 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011a7e:	ac25      	add	r4, sp, #148	; 0x94
 8011a80:	e7b8      	b.n	80119f4 <_svfprintf_r+0xe34>
 8011a82:	aa22      	add	r2, sp, #136	; 0x88
 8011a84:	4641      	mov	r1, r8
 8011a86:	4650      	mov	r0, sl
 8011a88:	f004 f8ce 	bl	8015c28 <__ssprint_r>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	f040 8219 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011a92:	ac25      	add	r4, sp, #148	; 0x94
 8011a94:	e7c3      	b.n	8011a1e <_svfprintf_r+0xe5e>
 8011a96:	3110      	adds	r1, #16
 8011a98:	2a07      	cmp	r2, #7
 8011a9a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8011a9e:	605f      	str	r7, [r3, #4]
 8011aa0:	dd08      	ble.n	8011ab4 <_svfprintf_r+0xef4>
 8011aa2:	aa22      	add	r2, sp, #136	; 0x88
 8011aa4:	4641      	mov	r1, r8
 8011aa6:	4650      	mov	r0, sl
 8011aa8:	f004 f8be 	bl	8015c28 <__ssprint_r>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	f040 8209 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011ab2:	ac25      	add	r4, sp, #148	; 0x94
 8011ab4:	3d10      	subs	r5, #16
 8011ab6:	4623      	mov	r3, r4
 8011ab8:	e7b8      	b.n	8011a2c <_svfprintf_r+0xe6c>
 8011aba:	bf00      	nop
 8011abc:	0801b356 	.word	0x0801b356
 8011ac0:	0801b368 	.word	0x0801b368
 8011ac4:	9f05      	ldr	r7, [sp, #20]
 8011ac6:	42af      	cmp	r7, r5
 8011ac8:	bfa8      	it	ge
 8011aca:	462f      	movge	r7, r5
 8011acc:	2f00      	cmp	r7, #0
 8011ace:	dd0a      	ble.n	8011ae6 <_svfprintf_r+0xf26>
 8011ad0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	443e      	add	r6, r7
 8011ad6:	2b07      	cmp	r3, #7
 8011ad8:	e9c4 9700 	strd	r9, r7, [r4]
 8011adc:	9624      	str	r6, [sp, #144]	; 0x90
 8011ade:	9323      	str	r3, [sp, #140]	; 0x8c
 8011ae0:	f300 8085 	bgt.w	8011bee <_svfprintf_r+0x102e>
 8011ae4:	3408      	adds	r4, #8
 8011ae6:	2f00      	cmp	r7, #0
 8011ae8:	bfac      	ite	ge
 8011aea:	1bee      	subge	r6, r5, r7
 8011aec:	462e      	movlt	r6, r5
 8011aee:	2e00      	cmp	r6, #0
 8011af0:	dd19      	ble.n	8011b26 <_svfprintf_r+0xf66>
 8011af2:	4f97      	ldr	r7, [pc, #604]	; (8011d50 <_svfprintf_r+0x1190>)
 8011af4:	6027      	str	r7, [r4, #0]
 8011af6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011afa:	2e10      	cmp	r6, #16
 8011afc:	f103 0301 	add.w	r3, r3, #1
 8011b00:	f104 0108 	add.w	r1, r4, #8
 8011b04:	dc7d      	bgt.n	8011c02 <_svfprintf_r+0x1042>
 8011b06:	6066      	str	r6, [r4, #4]
 8011b08:	2b07      	cmp	r3, #7
 8011b0a:	4416      	add	r6, r2
 8011b0c:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8011b10:	f340 808a 	ble.w	8011c28 <_svfprintf_r+0x1068>
 8011b14:	aa22      	add	r2, sp, #136	; 0x88
 8011b16:	4641      	mov	r1, r8
 8011b18:	4650      	mov	r0, sl
 8011b1a:	f004 f885 	bl	8015c28 <__ssprint_r>
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	f040 81d0 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011b24:	ac25      	add	r4, sp, #148	; 0x94
 8011b26:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8011b2a:	444d      	add	r5, r9
 8011b2c:	d00a      	beq.n	8011b44 <_svfprintf_r+0xf84>
 8011b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d17b      	bne.n	8011c2c <_svfprintf_r+0x106c>
 8011b34:	9b08      	ldr	r3, [sp, #32]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d17b      	bne.n	8011c32 <_svfprintf_r+0x1072>
 8011b3a:	9b05      	ldr	r3, [sp, #20]
 8011b3c:	444b      	add	r3, r9
 8011b3e:	429d      	cmp	r5, r3
 8011b40:	bf28      	it	cs
 8011b42:	461d      	movcs	r5, r3
 8011b44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011b46:	9a05      	ldr	r2, [sp, #20]
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	db02      	blt.n	8011b52 <_svfprintf_r+0xf92>
 8011b4c:	f01b 0f01 	tst.w	fp, #1
 8011b50:	d00e      	beq.n	8011b70 <_svfprintf_r+0xfb0>
 8011b52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011b54:	6023      	str	r3, [r4, #0]
 8011b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b5a:	6063      	str	r3, [r4, #4]
 8011b5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011b5e:	4413      	add	r3, r2
 8011b60:	9324      	str	r3, [sp, #144]	; 0x90
 8011b62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b64:	3301      	adds	r3, #1
 8011b66:	2b07      	cmp	r3, #7
 8011b68:	9323      	str	r3, [sp, #140]	; 0x8c
 8011b6a:	f300 80dd 	bgt.w	8011d28 <_svfprintf_r+0x1168>
 8011b6e:	3408      	adds	r4, #8
 8011b70:	9b05      	ldr	r3, [sp, #20]
 8011b72:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011b74:	eb09 0203 	add.w	r2, r9, r3
 8011b78:	1b9e      	subs	r6, r3, r6
 8011b7a:	1b52      	subs	r2, r2, r5
 8011b7c:	4296      	cmp	r6, r2
 8011b7e:	bfa8      	it	ge
 8011b80:	4616      	movge	r6, r2
 8011b82:	2e00      	cmp	r6, #0
 8011b84:	dd0b      	ble.n	8011b9e <_svfprintf_r+0xfde>
 8011b86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011b88:	4433      	add	r3, r6
 8011b8a:	9324      	str	r3, [sp, #144]	; 0x90
 8011b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b8e:	3301      	adds	r3, #1
 8011b90:	2b07      	cmp	r3, #7
 8011b92:	e9c4 5600 	strd	r5, r6, [r4]
 8011b96:	9323      	str	r3, [sp, #140]	; 0x8c
 8011b98:	f300 80d0 	bgt.w	8011d3c <_svfprintf_r+0x117c>
 8011b9c:	3408      	adds	r4, #8
 8011b9e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8011ba0:	9b05      	ldr	r3, [sp, #20]
 8011ba2:	2e00      	cmp	r6, #0
 8011ba4:	eba3 0505 	sub.w	r5, r3, r5
 8011ba8:	bfa8      	it	ge
 8011baa:	1bad      	subge	r5, r5, r6
 8011bac:	2d00      	cmp	r5, #0
 8011bae:	f77f abed 	ble.w	801138c <_svfprintf_r+0x7cc>
 8011bb2:	4e67      	ldr	r6, [pc, #412]	; (8011d50 <_svfprintf_r+0x1190>)
 8011bb4:	2710      	movs	r7, #16
 8011bb6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011bba:	2d10      	cmp	r5, #16
 8011bbc:	f103 0301 	add.w	r3, r3, #1
 8011bc0:	f104 0108 	add.w	r1, r4, #8
 8011bc4:	6026      	str	r6, [r4, #0]
 8011bc6:	f77f aecf 	ble.w	8011968 <_svfprintf_r+0xda8>
 8011bca:	3210      	adds	r2, #16
 8011bcc:	2b07      	cmp	r3, #7
 8011bce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011bd2:	6067      	str	r7, [r4, #4]
 8011bd4:	dd08      	ble.n	8011be8 <_svfprintf_r+0x1028>
 8011bd6:	aa22      	add	r2, sp, #136	; 0x88
 8011bd8:	4641      	mov	r1, r8
 8011bda:	4650      	mov	r0, sl
 8011bdc:	f004 f824 	bl	8015c28 <__ssprint_r>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f040 816f 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011be6:	a925      	add	r1, sp, #148	; 0x94
 8011be8:	3d10      	subs	r5, #16
 8011bea:	460c      	mov	r4, r1
 8011bec:	e7e3      	b.n	8011bb6 <_svfprintf_r+0xff6>
 8011bee:	aa22      	add	r2, sp, #136	; 0x88
 8011bf0:	4641      	mov	r1, r8
 8011bf2:	4650      	mov	r0, sl
 8011bf4:	f004 f818 	bl	8015c28 <__ssprint_r>
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	f040 8163 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011bfe:	ac25      	add	r4, sp, #148	; 0x94
 8011c00:	e771      	b.n	8011ae6 <_svfprintf_r+0xf26>
 8011c02:	2010      	movs	r0, #16
 8011c04:	4402      	add	r2, r0
 8011c06:	2b07      	cmp	r3, #7
 8011c08:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011c0c:	6060      	str	r0, [r4, #4]
 8011c0e:	dd08      	ble.n	8011c22 <_svfprintf_r+0x1062>
 8011c10:	aa22      	add	r2, sp, #136	; 0x88
 8011c12:	4641      	mov	r1, r8
 8011c14:	4650      	mov	r0, sl
 8011c16:	f004 f807 	bl	8015c28 <__ssprint_r>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	f040 8152 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011c20:	a925      	add	r1, sp, #148	; 0x94
 8011c22:	3e10      	subs	r6, #16
 8011c24:	460c      	mov	r4, r1
 8011c26:	e765      	b.n	8011af4 <_svfprintf_r+0xf34>
 8011c28:	460c      	mov	r4, r1
 8011c2a:	e77c      	b.n	8011b26 <_svfprintf_r+0xf66>
 8011c2c:	9b08      	ldr	r3, [sp, #32]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d04a      	beq.n	8011cc8 <_svfprintf_r+0x1108>
 8011c32:	9b08      	ldr	r3, [sp, #32]
 8011c34:	3b01      	subs	r3, #1
 8011c36:	9308      	str	r3, [sp, #32]
 8011c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c3a:	6023      	str	r3, [r4, #0]
 8011c3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c40:	6063      	str	r3, [r4, #4]
 8011c42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011c44:	4413      	add	r3, r2
 8011c46:	9324      	str	r3, [sp, #144]	; 0x90
 8011c48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	2b07      	cmp	r3, #7
 8011c4e:	9323      	str	r3, [sp, #140]	; 0x8c
 8011c50:	dc41      	bgt.n	8011cd6 <_svfprintf_r+0x1116>
 8011c52:	3408      	adds	r4, #8
 8011c54:	9b05      	ldr	r3, [sp, #20]
 8011c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c58:	eb09 0703 	add.w	r7, r9, r3
 8011c5c:	1b7b      	subs	r3, r7, r5
 8011c5e:	7817      	ldrb	r7, [r2, #0]
 8011c60:	429f      	cmp	r7, r3
 8011c62:	bfa8      	it	ge
 8011c64:	461f      	movge	r7, r3
 8011c66:	2f00      	cmp	r7, #0
 8011c68:	dd0a      	ble.n	8011c80 <_svfprintf_r+0x10c0>
 8011c6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011c6c:	443b      	add	r3, r7
 8011c6e:	9324      	str	r3, [sp, #144]	; 0x90
 8011c70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011c72:	3301      	adds	r3, #1
 8011c74:	2b07      	cmp	r3, #7
 8011c76:	e9c4 5700 	strd	r5, r7, [r4]
 8011c7a:	9323      	str	r3, [sp, #140]	; 0x8c
 8011c7c:	dc35      	bgt.n	8011cea <_svfprintf_r+0x112a>
 8011c7e:	3408      	adds	r4, #8
 8011c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c82:	781e      	ldrb	r6, [r3, #0]
 8011c84:	2f00      	cmp	r7, #0
 8011c86:	bfa8      	it	ge
 8011c88:	1bf6      	subge	r6, r6, r7
 8011c8a:	2e00      	cmp	r6, #0
 8011c8c:	dd18      	ble.n	8011cc0 <_svfprintf_r+0x1100>
 8011c8e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011c92:	482f      	ldr	r0, [pc, #188]	; (8011d50 <_svfprintf_r+0x1190>)
 8011c94:	6020      	str	r0, [r4, #0]
 8011c96:	2e10      	cmp	r6, #16
 8011c98:	f103 0301 	add.w	r3, r3, #1
 8011c9c:	f104 0108 	add.w	r1, r4, #8
 8011ca0:	dc2d      	bgt.n	8011cfe <_svfprintf_r+0x113e>
 8011ca2:	4432      	add	r2, r6
 8011ca4:	2b07      	cmp	r3, #7
 8011ca6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011caa:	6066      	str	r6, [r4, #4]
 8011cac:	dd3a      	ble.n	8011d24 <_svfprintf_r+0x1164>
 8011cae:	aa22      	add	r2, sp, #136	; 0x88
 8011cb0:	4641      	mov	r1, r8
 8011cb2:	4650      	mov	r0, sl
 8011cb4:	f003 ffb8 	bl	8015c28 <__ssprint_r>
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	f040 8103 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011cbe:	ac25      	add	r4, sp, #148	; 0x94
 8011cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	441d      	add	r5, r3
 8011cc6:	e732      	b.n	8011b2e <_svfprintf_r+0xf6e>
 8011cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8011cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd4:	e7b0      	b.n	8011c38 <_svfprintf_r+0x1078>
 8011cd6:	aa22      	add	r2, sp, #136	; 0x88
 8011cd8:	4641      	mov	r1, r8
 8011cda:	4650      	mov	r0, sl
 8011cdc:	f003 ffa4 	bl	8015c28 <__ssprint_r>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	f040 80ef 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011ce6:	ac25      	add	r4, sp, #148	; 0x94
 8011ce8:	e7b4      	b.n	8011c54 <_svfprintf_r+0x1094>
 8011cea:	aa22      	add	r2, sp, #136	; 0x88
 8011cec:	4641      	mov	r1, r8
 8011cee:	4650      	mov	r0, sl
 8011cf0:	f003 ff9a 	bl	8015c28 <__ssprint_r>
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	f040 80e5 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011cfa:	ac25      	add	r4, sp, #148	; 0x94
 8011cfc:	e7c0      	b.n	8011c80 <_svfprintf_r+0x10c0>
 8011cfe:	2010      	movs	r0, #16
 8011d00:	4402      	add	r2, r0
 8011d02:	2b07      	cmp	r3, #7
 8011d04:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011d08:	6060      	str	r0, [r4, #4]
 8011d0a:	dd08      	ble.n	8011d1e <_svfprintf_r+0x115e>
 8011d0c:	aa22      	add	r2, sp, #136	; 0x88
 8011d0e:	4641      	mov	r1, r8
 8011d10:	4650      	mov	r0, sl
 8011d12:	f003 ff89 	bl	8015c28 <__ssprint_r>
 8011d16:	2800      	cmp	r0, #0
 8011d18:	f040 80d4 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011d1c:	a925      	add	r1, sp, #148	; 0x94
 8011d1e:	3e10      	subs	r6, #16
 8011d20:	460c      	mov	r4, r1
 8011d22:	e7b4      	b.n	8011c8e <_svfprintf_r+0x10ce>
 8011d24:	460c      	mov	r4, r1
 8011d26:	e7cb      	b.n	8011cc0 <_svfprintf_r+0x1100>
 8011d28:	aa22      	add	r2, sp, #136	; 0x88
 8011d2a:	4641      	mov	r1, r8
 8011d2c:	4650      	mov	r0, sl
 8011d2e:	f003 ff7b 	bl	8015c28 <__ssprint_r>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	f040 80c6 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011d38:	ac25      	add	r4, sp, #148	; 0x94
 8011d3a:	e719      	b.n	8011b70 <_svfprintf_r+0xfb0>
 8011d3c:	aa22      	add	r2, sp, #136	; 0x88
 8011d3e:	4641      	mov	r1, r8
 8011d40:	4650      	mov	r0, sl
 8011d42:	f003 ff71 	bl	8015c28 <__ssprint_r>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	f040 80bc 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011d4c:	ac25      	add	r4, sp, #148	; 0x94
 8011d4e:	e726      	b.n	8011b9e <_svfprintf_r+0xfde>
 8011d50:	0801b368 	.word	0x0801b368
 8011d54:	9a05      	ldr	r2, [sp, #20]
 8011d56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d58:	2a01      	cmp	r2, #1
 8011d5a:	f106 0601 	add.w	r6, r6, #1
 8011d5e:	f103 0301 	add.w	r3, r3, #1
 8011d62:	f104 0508 	add.w	r5, r4, #8
 8011d66:	dc02      	bgt.n	8011d6e <_svfprintf_r+0x11ae>
 8011d68:	f01b 0f01 	tst.w	fp, #1
 8011d6c:	d07e      	beq.n	8011e6c <_svfprintf_r+0x12ac>
 8011d6e:	2201      	movs	r2, #1
 8011d70:	2b07      	cmp	r3, #7
 8011d72:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8011d76:	f8c4 9000 	str.w	r9, [r4]
 8011d7a:	6062      	str	r2, [r4, #4]
 8011d7c:	dd08      	ble.n	8011d90 <_svfprintf_r+0x11d0>
 8011d7e:	aa22      	add	r2, sp, #136	; 0x88
 8011d80:	4641      	mov	r1, r8
 8011d82:	4650      	mov	r0, sl
 8011d84:	f003 ff50 	bl	8015c28 <__ssprint_r>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	f040 809b 	bne.w	8011ec4 <_svfprintf_r+0x1304>
 8011d8e:	ad25      	add	r5, sp, #148	; 0x94
 8011d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d92:	602b      	str	r3, [r5, #0]
 8011d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011d98:	606b      	str	r3, [r5, #4]
 8011d9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011d9c:	4413      	add	r3, r2
 8011d9e:	9324      	str	r3, [sp, #144]	; 0x90
 8011da0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011da2:	3301      	adds	r3, #1
 8011da4:	2b07      	cmp	r3, #7
 8011da6:	9323      	str	r3, [sp, #140]	; 0x8c
 8011da8:	dc32      	bgt.n	8011e10 <_svfprintf_r+0x1250>
 8011daa:	3508      	adds	r5, #8
 8011dac:	9b05      	ldr	r3, [sp, #20]
 8011dae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011db2:	1e5c      	subs	r4, r3, #1
 8011db4:	2200      	movs	r2, #0
 8011db6:	2300      	movs	r3, #0
 8011db8:	f7ee feb0 	bl	8000b1c <__aeabi_dcmpeq>
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d130      	bne.n	8011e22 <_svfprintf_r+0x1262>
 8011dc0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011dc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011dc4:	9a05      	ldr	r2, [sp, #20]
 8011dc6:	3101      	adds	r1, #1
 8011dc8:	3b01      	subs	r3, #1
 8011dca:	f109 0001 	add.w	r0, r9, #1
 8011dce:	4413      	add	r3, r2
 8011dd0:	2907      	cmp	r1, #7
 8011dd2:	e9c5 0400 	strd	r0, r4, [r5]
 8011dd6:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8011dda:	dd50      	ble.n	8011e7e <_svfprintf_r+0x12be>
 8011ddc:	aa22      	add	r2, sp, #136	; 0x88
 8011dde:	4641      	mov	r1, r8
 8011de0:	4650      	mov	r0, sl
 8011de2:	f003 ff21 	bl	8015c28 <__ssprint_r>
 8011de6:	2800      	cmp	r0, #0
 8011de8:	d16c      	bne.n	8011ec4 <_svfprintf_r+0x1304>
 8011dea:	ad25      	add	r5, sp, #148	; 0x94
 8011dec:	ab1e      	add	r3, sp, #120	; 0x78
 8011dee:	602b      	str	r3, [r5, #0]
 8011df0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011df2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011df4:	606b      	str	r3, [r5, #4]
 8011df6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011df8:	4413      	add	r3, r2
 8011dfa:	9324      	str	r3, [sp, #144]	; 0x90
 8011dfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011dfe:	3301      	adds	r3, #1
 8011e00:	2b07      	cmp	r3, #7
 8011e02:	9323      	str	r3, [sp, #140]	; 0x8c
 8011e04:	f73f adb7 	bgt.w	8011976 <_svfprintf_r+0xdb6>
 8011e08:	f105 0408 	add.w	r4, r5, #8
 8011e0c:	f7ff babe 	b.w	801138c <_svfprintf_r+0x7cc>
 8011e10:	aa22      	add	r2, sp, #136	; 0x88
 8011e12:	4641      	mov	r1, r8
 8011e14:	4650      	mov	r0, sl
 8011e16:	f003 ff07 	bl	8015c28 <__ssprint_r>
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	d152      	bne.n	8011ec4 <_svfprintf_r+0x1304>
 8011e1e:	ad25      	add	r5, sp, #148	; 0x94
 8011e20:	e7c4      	b.n	8011dac <_svfprintf_r+0x11ec>
 8011e22:	2c00      	cmp	r4, #0
 8011e24:	dde2      	ble.n	8011dec <_svfprintf_r+0x122c>
 8011e26:	4e56      	ldr	r6, [pc, #344]	; (8011f80 <_svfprintf_r+0x13c0>)
 8011e28:	2710      	movs	r7, #16
 8011e2a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011e2e:	2c10      	cmp	r4, #16
 8011e30:	f103 0301 	add.w	r3, r3, #1
 8011e34:	f105 0108 	add.w	r1, r5, #8
 8011e38:	602e      	str	r6, [r5, #0]
 8011e3a:	dc07      	bgt.n	8011e4c <_svfprintf_r+0x128c>
 8011e3c:	606c      	str	r4, [r5, #4]
 8011e3e:	2b07      	cmp	r3, #7
 8011e40:	4414      	add	r4, r2
 8011e42:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8011e46:	dcc9      	bgt.n	8011ddc <_svfprintf_r+0x121c>
 8011e48:	460d      	mov	r5, r1
 8011e4a:	e7cf      	b.n	8011dec <_svfprintf_r+0x122c>
 8011e4c:	3210      	adds	r2, #16
 8011e4e:	2b07      	cmp	r3, #7
 8011e50:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011e54:	606f      	str	r7, [r5, #4]
 8011e56:	dd06      	ble.n	8011e66 <_svfprintf_r+0x12a6>
 8011e58:	aa22      	add	r2, sp, #136	; 0x88
 8011e5a:	4641      	mov	r1, r8
 8011e5c:	4650      	mov	r0, sl
 8011e5e:	f003 fee3 	bl	8015c28 <__ssprint_r>
 8011e62:	bb78      	cbnz	r0, 8011ec4 <_svfprintf_r+0x1304>
 8011e64:	a925      	add	r1, sp, #148	; 0x94
 8011e66:	3c10      	subs	r4, #16
 8011e68:	460d      	mov	r5, r1
 8011e6a:	e7de      	b.n	8011e2a <_svfprintf_r+0x126a>
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	2b07      	cmp	r3, #7
 8011e70:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8011e74:	f8c4 9000 	str.w	r9, [r4]
 8011e78:	6062      	str	r2, [r4, #4]
 8011e7a:	ddb7      	ble.n	8011dec <_svfprintf_r+0x122c>
 8011e7c:	e7ae      	b.n	8011ddc <_svfprintf_r+0x121c>
 8011e7e:	3508      	adds	r5, #8
 8011e80:	e7b4      	b.n	8011dec <_svfprintf_r+0x122c>
 8011e82:	460c      	mov	r4, r1
 8011e84:	f7ff ba82 	b.w	801138c <_svfprintf_r+0x7cc>
 8011e88:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8011e8c:	1a9d      	subs	r5, r3, r2
 8011e8e:	2d00      	cmp	r5, #0
 8011e90:	f77f aa80 	ble.w	8011394 <_svfprintf_r+0x7d4>
 8011e94:	4e3b      	ldr	r6, [pc, #236]	; (8011f84 <_svfprintf_r+0x13c4>)
 8011e96:	2710      	movs	r7, #16
 8011e98:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011e9c:	2d10      	cmp	r5, #16
 8011e9e:	f103 0301 	add.w	r3, r3, #1
 8011ea2:	6026      	str	r6, [r4, #0]
 8011ea4:	dc18      	bgt.n	8011ed8 <_svfprintf_r+0x1318>
 8011ea6:	6065      	str	r5, [r4, #4]
 8011ea8:	2b07      	cmp	r3, #7
 8011eaa:	4415      	add	r5, r2
 8011eac:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8011eb0:	f77f aa70 	ble.w	8011394 <_svfprintf_r+0x7d4>
 8011eb4:	aa22      	add	r2, sp, #136	; 0x88
 8011eb6:	4641      	mov	r1, r8
 8011eb8:	4650      	mov	r0, sl
 8011eba:	f003 feb5 	bl	8015c28 <__ssprint_r>
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	f43f aa68 	beq.w	8011394 <_svfprintf_r+0x7d4>
 8011ec4:	9b03      	ldr	r3, [sp, #12]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f43f a887 	beq.w	8010fda <_svfprintf_r+0x41a>
 8011ecc:	4619      	mov	r1, r3
 8011ece:	4650      	mov	r0, sl
 8011ed0:	f002 fd80 	bl	80149d4 <_free_r>
 8011ed4:	f7ff b881 	b.w	8010fda <_svfprintf_r+0x41a>
 8011ed8:	3210      	adds	r2, #16
 8011eda:	2b07      	cmp	r3, #7
 8011edc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011ee0:	6067      	str	r7, [r4, #4]
 8011ee2:	dc02      	bgt.n	8011eea <_svfprintf_r+0x132a>
 8011ee4:	3408      	adds	r4, #8
 8011ee6:	3d10      	subs	r5, #16
 8011ee8:	e7d6      	b.n	8011e98 <_svfprintf_r+0x12d8>
 8011eea:	aa22      	add	r2, sp, #136	; 0x88
 8011eec:	4641      	mov	r1, r8
 8011eee:	4650      	mov	r0, sl
 8011ef0:	f003 fe9a 	bl	8015c28 <__ssprint_r>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d1e5      	bne.n	8011ec4 <_svfprintf_r+0x1304>
 8011ef8:	ac25      	add	r4, sp, #148	; 0x94
 8011efa:	e7f4      	b.n	8011ee6 <_svfprintf_r+0x1326>
 8011efc:	9903      	ldr	r1, [sp, #12]
 8011efe:	4650      	mov	r0, sl
 8011f00:	f002 fd68 	bl	80149d4 <_free_r>
 8011f04:	f7ff ba5e 	b.w	80113c4 <_svfprintf_r+0x804>
 8011f08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	f43f a865 	beq.w	8010fda <_svfprintf_r+0x41a>
 8011f10:	aa22      	add	r2, sp, #136	; 0x88
 8011f12:	4641      	mov	r1, r8
 8011f14:	4650      	mov	r0, sl
 8011f16:	f003 fe87 	bl	8015c28 <__ssprint_r>
 8011f1a:	f7ff b85e 	b.w	8010fda <_svfprintf_r+0x41a>
 8011f1e:	ea56 0205 	orrs.w	r2, r6, r5
 8011f22:	465f      	mov	r7, fp
 8011f24:	f43f ab78 	beq.w	8011618 <_svfprintf_r+0xa58>
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	f43f ac15 	beq.w	8011758 <_svfprintf_r+0xb98>
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8011f34:	f43f ac5b 	beq.w	80117ee <_svfprintf_r+0xc2e>
 8011f38:	f006 0307 	and.w	r3, r6, #7
 8011f3c:	08f6      	lsrs	r6, r6, #3
 8011f3e:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8011f42:	08ed      	lsrs	r5, r5, #3
 8011f44:	3330      	adds	r3, #48	; 0x30
 8011f46:	ea56 0105 	orrs.w	r1, r6, r5
 8011f4a:	464a      	mov	r2, r9
 8011f4c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011f50:	d1f2      	bne.n	8011f38 <_svfprintf_r+0x1378>
 8011f52:	07f9      	lsls	r1, r7, #31
 8011f54:	d506      	bpl.n	8011f64 <_svfprintf_r+0x13a4>
 8011f56:	2b30      	cmp	r3, #48	; 0x30
 8011f58:	d004      	beq.n	8011f64 <_svfprintf_r+0x13a4>
 8011f5a:	2330      	movs	r3, #48	; 0x30
 8011f5c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011f60:	f1a2 0902 	sub.w	r9, r2, #2
 8011f64:	ab4e      	add	r3, sp, #312	; 0x138
 8011f66:	eba3 0309 	sub.w	r3, r3, r9
 8011f6a:	9e04      	ldr	r6, [sp, #16]
 8011f6c:	9304      	str	r3, [sp, #16]
 8011f6e:	2300      	movs	r3, #0
 8011f70:	46bb      	mov	fp, r7
 8011f72:	9303      	str	r3, [sp, #12]
 8011f74:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011f78:	461d      	mov	r5, r3
 8011f7a:	f7ff b94d 	b.w	8011218 <_svfprintf_r+0x658>
 8011f7e:	bf00      	nop
 8011f80:	0801b368 	.word	0x0801b368
 8011f84:	0801b358 	.word	0x0801b358

08011f88 <__tzcalc_limits>:
 8011f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8c:	4605      	mov	r5, r0
 8011f8e:	f002 fe45 	bl	8014c1c <__gettzinfo>
 8011f92:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8011f96:	429d      	cmp	r5, r3
 8011f98:	f340 8099 	ble.w	80120ce <__tzcalc_limits+0x146>
 8011f9c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8011fa0:	18ac      	adds	r4, r5, r2
 8011fa2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8011fa6:	f240 126d 	movw	r2, #365	; 0x16d
 8011faa:	10a4      	asrs	r4, r4, #2
 8011fac:	fb02 4403 	mla	r4, r2, r3, r4
 8011fb0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8011fb4:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8011fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8011fbc:	441c      	add	r4, r3
 8011fbe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011fc2:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8011fc6:	fb95 fcf3 	sdiv	ip, r5, r3
 8011fca:	fb03 5c1c 	mls	ip, r3, ip, r5
 8011fce:	186a      	adds	r2, r5, r1
 8011fd0:	fabc f68c 	clz	r6, ip
 8011fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8011fd8:	f005 0303 	and.w	r3, r5, #3
 8011fdc:	4414      	add	r4, r2
 8011fde:	2264      	movs	r2, #100	; 0x64
 8011fe0:	6045      	str	r5, [r0, #4]
 8011fe2:	fb95 f7f2 	sdiv	r7, r5, r2
 8011fe6:	0976      	lsrs	r6, r6, #5
 8011fe8:	fb02 5717 	mls	r7, r2, r7, r5
 8011fec:	4601      	mov	r1, r0
 8011fee:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8011ff2:	9300      	str	r3, [sp, #0]
 8011ff4:	f04f 0a07 	mov.w	sl, #7
 8011ff8:	7a0d      	ldrb	r5, [r1, #8]
 8011ffa:	694b      	ldr	r3, [r1, #20]
 8011ffc:	2d4a      	cmp	r5, #74	; 0x4a
 8011ffe:	d12d      	bne.n	801205c <__tzcalc_limits+0xd4>
 8012000:	9a00      	ldr	r2, [sp, #0]
 8012002:	eb04 0e03 	add.w	lr, r4, r3
 8012006:	b902      	cbnz	r2, 801200a <__tzcalc_limits+0x82>
 8012008:	b917      	cbnz	r7, 8012010 <__tzcalc_limits+0x88>
 801200a:	f1bc 0f00 	cmp.w	ip, #0
 801200e:	d123      	bne.n	8012058 <__tzcalc_limits+0xd0>
 8012010:	2b3b      	cmp	r3, #59	; 0x3b
 8012012:	bfd4      	ite	le
 8012014:	2300      	movle	r3, #0
 8012016:	2301      	movgt	r3, #1
 8012018:	4473      	add	r3, lr
 801201a:	3b01      	subs	r3, #1
 801201c:	698d      	ldr	r5, [r1, #24]
 801201e:	4a2d      	ldr	r2, [pc, #180]	; (80120d4 <__tzcalc_limits+0x14c>)
 8012020:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8012024:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8012028:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801202a:	18ed      	adds	r5, r5, r3
 801202c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8012030:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8012034:	3128      	adds	r1, #40	; 0x28
 8012036:	458b      	cmp	fp, r1
 8012038:	d1de      	bne.n	8011ff8 <__tzcalc_limits+0x70>
 801203a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 801203e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8012042:	428c      	cmp	r4, r1
 8012044:	eb72 0303 	sbcs.w	r3, r2, r3
 8012048:	bfb4      	ite	lt
 801204a:	2301      	movlt	r3, #1
 801204c:	2300      	movge	r3, #0
 801204e:	6003      	str	r3, [r0, #0]
 8012050:	2001      	movs	r0, #1
 8012052:	b003      	add	sp, #12
 8012054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012058:	2300      	movs	r3, #0
 801205a:	e7dd      	b.n	8012018 <__tzcalc_limits+0x90>
 801205c:	2d44      	cmp	r5, #68	; 0x44
 801205e:	d101      	bne.n	8012064 <__tzcalc_limits+0xdc>
 8012060:	4423      	add	r3, r4
 8012062:	e7db      	b.n	801201c <__tzcalc_limits+0x94>
 8012064:	9a00      	ldr	r2, [sp, #0]
 8012066:	bb62      	cbnz	r2, 80120c2 <__tzcalc_limits+0x13a>
 8012068:	2f00      	cmp	r7, #0
 801206a:	bf0c      	ite	eq
 801206c:	4635      	moveq	r5, r6
 801206e:	2501      	movne	r5, #1
 8012070:	68ca      	ldr	r2, [r1, #12]
 8012072:	9201      	str	r2, [sp, #4]
 8012074:	4a18      	ldr	r2, [pc, #96]	; (80120d8 <__tzcalc_limits+0x150>)
 8012076:	f04f 0930 	mov.w	r9, #48	; 0x30
 801207a:	fb09 2505 	mla	r5, r9, r5, r2
 801207e:	46a6      	mov	lr, r4
 8012080:	f04f 0800 	mov.w	r8, #0
 8012084:	3d04      	subs	r5, #4
 8012086:	9a01      	ldr	r2, [sp, #4]
 8012088:	f108 0801 	add.w	r8, r8, #1
 801208c:	4542      	cmp	r2, r8
 801208e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8012092:	dc18      	bgt.n	80120c6 <__tzcalc_limits+0x13e>
 8012094:	f10e 0504 	add.w	r5, lr, #4
 8012098:	fb95 f8fa 	sdiv	r8, r5, sl
 801209c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80120a0:	eba5 0808 	sub.w	r8, r5, r8
 80120a4:	ebb3 0808 	subs.w	r8, r3, r8
 80120a8:	690b      	ldr	r3, [r1, #16]
 80120aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80120ae:	bf48      	it	mi
 80120b0:	f108 0807 	addmi.w	r8, r8, #7
 80120b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80120b8:	4443      	add	r3, r8
 80120ba:	454b      	cmp	r3, r9
 80120bc:	da05      	bge.n	80120ca <__tzcalc_limits+0x142>
 80120be:	4473      	add	r3, lr
 80120c0:	e7ac      	b.n	801201c <__tzcalc_limits+0x94>
 80120c2:	4635      	mov	r5, r6
 80120c4:	e7d4      	b.n	8012070 <__tzcalc_limits+0xe8>
 80120c6:	44ce      	add	lr, r9
 80120c8:	e7dd      	b.n	8012086 <__tzcalc_limits+0xfe>
 80120ca:	3b07      	subs	r3, #7
 80120cc:	e7f5      	b.n	80120ba <__tzcalc_limits+0x132>
 80120ce:	2000      	movs	r0, #0
 80120d0:	e7bf      	b.n	8012052 <__tzcalc_limits+0xca>
 80120d2:	bf00      	nop
 80120d4:	00015180 	.word	0x00015180
 80120d8:	0801b2c4 	.word	0x0801b2c4

080120dc <__tz_lock>:
 80120dc:	4801      	ldr	r0, [pc, #4]	; (80120e4 <__tz_lock+0x8>)
 80120de:	f002 be53 	b.w	8014d88 <__retarget_lock_acquire>
 80120e2:	bf00      	nop
 80120e4:	20007411 	.word	0x20007411

080120e8 <__tz_unlock>:
 80120e8:	4801      	ldr	r0, [pc, #4]	; (80120f0 <__tz_unlock+0x8>)
 80120ea:	f002 be4f 	b.w	8014d8c <__retarget_lock_release>
 80120ee:	bf00      	nop
 80120f0:	20007411 	.word	0x20007411

080120f4 <_tzset_unlocked>:
 80120f4:	4b01      	ldr	r3, [pc, #4]	; (80120fc <_tzset_unlocked+0x8>)
 80120f6:	6818      	ldr	r0, [r3, #0]
 80120f8:	f000 b802 	b.w	8012100 <_tzset_unlocked_r>
 80120fc:	2000001c 	.word	0x2000001c

08012100 <_tzset_unlocked_r>:
 8012100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012104:	b08d      	sub	sp, #52	; 0x34
 8012106:	4607      	mov	r7, r0
 8012108:	f002 fd88 	bl	8014c1c <__gettzinfo>
 801210c:	49b0      	ldr	r1, [pc, #704]	; (80123d0 <_tzset_unlocked_r+0x2d0>)
 801210e:	4eb1      	ldr	r6, [pc, #708]	; (80123d4 <_tzset_unlocked_r+0x2d4>)
 8012110:	4605      	mov	r5, r0
 8012112:	4638      	mov	r0, r7
 8012114:	f002 fd7a 	bl	8014c0c <_getenv_r>
 8012118:	4604      	mov	r4, r0
 801211a:	b970      	cbnz	r0, 801213a <_tzset_unlocked_r+0x3a>
 801211c:	4bae      	ldr	r3, [pc, #696]	; (80123d8 <_tzset_unlocked_r+0x2d8>)
 801211e:	4aaf      	ldr	r2, [pc, #700]	; (80123dc <_tzset_unlocked_r+0x2dc>)
 8012120:	6018      	str	r0, [r3, #0]
 8012122:	4baf      	ldr	r3, [pc, #700]	; (80123e0 <_tzset_unlocked_r+0x2e0>)
 8012124:	6018      	str	r0, [r3, #0]
 8012126:	4baf      	ldr	r3, [pc, #700]	; (80123e4 <_tzset_unlocked_r+0x2e4>)
 8012128:	6830      	ldr	r0, [r6, #0]
 801212a:	e9c3 2200 	strd	r2, r2, [r3]
 801212e:	f002 fea3 	bl	8014e78 <free>
 8012132:	6034      	str	r4, [r6, #0]
 8012134:	b00d      	add	sp, #52	; 0x34
 8012136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801213a:	6831      	ldr	r1, [r6, #0]
 801213c:	2900      	cmp	r1, #0
 801213e:	d162      	bne.n	8012206 <_tzset_unlocked_r+0x106>
 8012140:	6830      	ldr	r0, [r6, #0]
 8012142:	f002 fe99 	bl	8014e78 <free>
 8012146:	4620      	mov	r0, r4
 8012148:	f7ee f862 	bl	8000210 <strlen>
 801214c:	1c41      	adds	r1, r0, #1
 801214e:	4638      	mov	r0, r7
 8012150:	f002 fe9a 	bl	8014e88 <_malloc_r>
 8012154:	6030      	str	r0, [r6, #0]
 8012156:	2800      	cmp	r0, #0
 8012158:	d15a      	bne.n	8012210 <_tzset_unlocked_r+0x110>
 801215a:	7823      	ldrb	r3, [r4, #0]
 801215c:	4aa2      	ldr	r2, [pc, #648]	; (80123e8 <_tzset_unlocked_r+0x2e8>)
 801215e:	49a3      	ldr	r1, [pc, #652]	; (80123ec <_tzset_unlocked_r+0x2ec>)
 8012160:	2b3a      	cmp	r3, #58	; 0x3a
 8012162:	bf08      	it	eq
 8012164:	3401      	addeq	r4, #1
 8012166:	ae0a      	add	r6, sp, #40	; 0x28
 8012168:	4633      	mov	r3, r6
 801216a:	4620      	mov	r0, r4
 801216c:	f003 fc52 	bl	8015a14 <siscanf>
 8012170:	2800      	cmp	r0, #0
 8012172:	dddf      	ble.n	8012134 <_tzset_unlocked_r+0x34>
 8012174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012176:	18e7      	adds	r7, r4, r3
 8012178:	5ce3      	ldrb	r3, [r4, r3]
 801217a:	2b2d      	cmp	r3, #45	; 0x2d
 801217c:	d14c      	bne.n	8012218 <_tzset_unlocked_r+0x118>
 801217e:	3701      	adds	r7, #1
 8012180:	f04f 38ff 	mov.w	r8, #4294967295
 8012184:	f10d 0a20 	add.w	sl, sp, #32
 8012188:	f10d 0b1e 	add.w	fp, sp, #30
 801218c:	2400      	movs	r4, #0
 801218e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8012192:	4997      	ldr	r1, [pc, #604]	; (80123f0 <_tzset_unlocked_r+0x2f0>)
 8012194:	9603      	str	r6, [sp, #12]
 8012196:	f8cd b000 	str.w	fp, [sp]
 801219a:	4633      	mov	r3, r6
 801219c:	aa07      	add	r2, sp, #28
 801219e:	4638      	mov	r0, r7
 80121a0:	f8ad 401e 	strh.w	r4, [sp, #30]
 80121a4:	f8ad 4020 	strh.w	r4, [sp, #32]
 80121a8:	f003 fc34 	bl	8015a14 <siscanf>
 80121ac:	42a0      	cmp	r0, r4
 80121ae:	ddc1      	ble.n	8012134 <_tzset_unlocked_r+0x34>
 80121b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80121b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80121b8:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80123fc <_tzset_unlocked_r+0x2fc>
 80121bc:	213c      	movs	r1, #60	; 0x3c
 80121be:	fb01 3302 	mla	r3, r1, r2, r3
 80121c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80121c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80121ca:	fb01 3302 	mla	r3, r1, r2, r3
 80121ce:	fb08 f303 	mul.w	r3, r8, r3
 80121d2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80123e4 <_tzset_unlocked_r+0x2e4>
 80121d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80121d8:	4b83      	ldr	r3, [pc, #524]	; (80123e8 <_tzset_unlocked_r+0x2e8>)
 80121da:	f8c8 3000 	str.w	r3, [r8]
 80121de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121e0:	4982      	ldr	r1, [pc, #520]	; (80123ec <_tzset_unlocked_r+0x2ec>)
 80121e2:	441f      	add	r7, r3
 80121e4:	464a      	mov	r2, r9
 80121e6:	4633      	mov	r3, r6
 80121e8:	4638      	mov	r0, r7
 80121ea:	f003 fc13 	bl	8015a14 <siscanf>
 80121ee:	42a0      	cmp	r0, r4
 80121f0:	dc18      	bgt.n	8012224 <_tzset_unlocked_r+0x124>
 80121f2:	f8d8 3000 	ldr.w	r3, [r8]
 80121f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80121fa:	4b77      	ldr	r3, [pc, #476]	; (80123d8 <_tzset_unlocked_r+0x2d8>)
 80121fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80121fe:	601a      	str	r2, [r3, #0]
 8012200:	4b77      	ldr	r3, [pc, #476]	; (80123e0 <_tzset_unlocked_r+0x2e0>)
 8012202:	601c      	str	r4, [r3, #0]
 8012204:	e796      	b.n	8012134 <_tzset_unlocked_r+0x34>
 8012206:	f7ee f85b 	bl	80002c0 <strcmp>
 801220a:	2800      	cmp	r0, #0
 801220c:	d198      	bne.n	8012140 <_tzset_unlocked_r+0x40>
 801220e:	e791      	b.n	8012134 <_tzset_unlocked_r+0x34>
 8012210:	4621      	mov	r1, r4
 8012212:	f003 fc70 	bl	8015af6 <strcpy>
 8012216:	e7a0      	b.n	801215a <_tzset_unlocked_r+0x5a>
 8012218:	2b2b      	cmp	r3, #43	; 0x2b
 801221a:	bf08      	it	eq
 801221c:	3701      	addeq	r7, #1
 801221e:	f04f 0801 	mov.w	r8, #1
 8012222:	e7af      	b.n	8012184 <_tzset_unlocked_r+0x84>
 8012224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012226:	f8c8 9004 	str.w	r9, [r8, #4]
 801222a:	18fc      	adds	r4, r7, r3
 801222c:	5cfb      	ldrb	r3, [r7, r3]
 801222e:	2b2d      	cmp	r3, #45	; 0x2d
 8012230:	f040 808b 	bne.w	801234a <_tzset_unlocked_r+0x24a>
 8012234:	3401      	adds	r4, #1
 8012236:	f04f 37ff 	mov.w	r7, #4294967295
 801223a:	2300      	movs	r3, #0
 801223c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012240:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012244:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012248:	930a      	str	r3, [sp, #40]	; 0x28
 801224a:	e9cd a602 	strd	sl, r6, [sp, #8]
 801224e:	e9cd b600 	strd	fp, r6, [sp]
 8012252:	4967      	ldr	r1, [pc, #412]	; (80123f0 <_tzset_unlocked_r+0x2f0>)
 8012254:	4633      	mov	r3, r6
 8012256:	aa07      	add	r2, sp, #28
 8012258:	4620      	mov	r0, r4
 801225a:	f003 fbdb 	bl	8015a14 <siscanf>
 801225e:	2800      	cmp	r0, #0
 8012260:	dc78      	bgt.n	8012354 <_tzset_unlocked_r+0x254>
 8012262:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012264:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8012268:	652b      	str	r3, [r5, #80]	; 0x50
 801226a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801226c:	462f      	mov	r7, r5
 801226e:	441c      	add	r4, r3
 8012270:	f04f 0900 	mov.w	r9, #0
 8012274:	7823      	ldrb	r3, [r4, #0]
 8012276:	2b2c      	cmp	r3, #44	; 0x2c
 8012278:	bf08      	it	eq
 801227a:	3401      	addeq	r4, #1
 801227c:	f894 8000 	ldrb.w	r8, [r4]
 8012280:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8012284:	d178      	bne.n	8012378 <_tzset_unlocked_r+0x278>
 8012286:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801228a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801228e:	ab09      	add	r3, sp, #36	; 0x24
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	4958      	ldr	r1, [pc, #352]	; (80123f4 <_tzset_unlocked_r+0x2f4>)
 8012294:	9603      	str	r6, [sp, #12]
 8012296:	4633      	mov	r3, r6
 8012298:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801229c:	4620      	mov	r0, r4
 801229e:	f003 fbb9 	bl	8015a14 <siscanf>
 80122a2:	2803      	cmp	r0, #3
 80122a4:	f47f af46 	bne.w	8012134 <_tzset_unlocked_r+0x34>
 80122a8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80122ac:	1e4b      	subs	r3, r1, #1
 80122ae:	2b0b      	cmp	r3, #11
 80122b0:	f63f af40 	bhi.w	8012134 <_tzset_unlocked_r+0x34>
 80122b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80122b8:	1e53      	subs	r3, r2, #1
 80122ba:	2b04      	cmp	r3, #4
 80122bc:	f63f af3a 	bhi.w	8012134 <_tzset_unlocked_r+0x34>
 80122c0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80122c4:	2b06      	cmp	r3, #6
 80122c6:	f63f af35 	bhi.w	8012134 <_tzset_unlocked_r+0x34>
 80122ca:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80122ce:	f887 8008 	strb.w	r8, [r7, #8]
 80122d2:	617b      	str	r3, [r7, #20]
 80122d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122d6:	eb04 0803 	add.w	r8, r4, r3
 80122da:	2302      	movs	r3, #2
 80122dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80122e0:	2300      	movs	r3, #0
 80122e2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80122e6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80122ea:	930a      	str	r3, [sp, #40]	; 0x28
 80122ec:	f898 3000 	ldrb.w	r3, [r8]
 80122f0:	2b2f      	cmp	r3, #47	; 0x2f
 80122f2:	d109      	bne.n	8012308 <_tzset_unlocked_r+0x208>
 80122f4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80122f8:	e9cd b600 	strd	fp, r6, [sp]
 80122fc:	493e      	ldr	r1, [pc, #248]	; (80123f8 <_tzset_unlocked_r+0x2f8>)
 80122fe:	4633      	mov	r3, r6
 8012300:	aa07      	add	r2, sp, #28
 8012302:	4640      	mov	r0, r8
 8012304:	f003 fb86 	bl	8015a14 <siscanf>
 8012308:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801230c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012310:	213c      	movs	r1, #60	; 0x3c
 8012312:	fb01 3302 	mla	r3, r1, r2, r3
 8012316:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801231a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801231e:	fb01 3302 	mla	r3, r1, r2, r3
 8012322:	61bb      	str	r3, [r7, #24]
 8012324:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012326:	3728      	adds	r7, #40	; 0x28
 8012328:	4444      	add	r4, r8
 801232a:	f1b9 0f00 	cmp.w	r9, #0
 801232e:	d020      	beq.n	8012372 <_tzset_unlocked_r+0x272>
 8012330:	6868      	ldr	r0, [r5, #4]
 8012332:	f7ff fe29 	bl	8011f88 <__tzcalc_limits>
 8012336:	4b28      	ldr	r3, [pc, #160]	; (80123d8 <_tzset_unlocked_r+0x2d8>)
 8012338:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801233e:	1a9b      	subs	r3, r3, r2
 8012340:	4a27      	ldr	r2, [pc, #156]	; (80123e0 <_tzset_unlocked_r+0x2e0>)
 8012342:	bf18      	it	ne
 8012344:	2301      	movne	r3, #1
 8012346:	6013      	str	r3, [r2, #0]
 8012348:	e6f4      	b.n	8012134 <_tzset_unlocked_r+0x34>
 801234a:	2b2b      	cmp	r3, #43	; 0x2b
 801234c:	bf08      	it	eq
 801234e:	3401      	addeq	r4, #1
 8012350:	2701      	movs	r7, #1
 8012352:	e772      	b.n	801223a <_tzset_unlocked_r+0x13a>
 8012354:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012358:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801235c:	213c      	movs	r1, #60	; 0x3c
 801235e:	fb01 3302 	mla	r3, r1, r2, r3
 8012362:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012366:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801236a:	fb01 3302 	mla	r3, r1, r2, r3
 801236e:	437b      	muls	r3, r7
 8012370:	e77a      	b.n	8012268 <_tzset_unlocked_r+0x168>
 8012372:	f04f 0901 	mov.w	r9, #1
 8012376:	e77d      	b.n	8012274 <_tzset_unlocked_r+0x174>
 8012378:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801237c:	bf06      	itte	eq
 801237e:	3401      	addeq	r4, #1
 8012380:	4643      	moveq	r3, r8
 8012382:	2344      	movne	r3, #68	; 0x44
 8012384:	220a      	movs	r2, #10
 8012386:	a90b      	add	r1, sp, #44	; 0x2c
 8012388:	4620      	mov	r0, r4
 801238a:	9305      	str	r3, [sp, #20]
 801238c:	f003 fc42 	bl	8015c14 <strtoul>
 8012390:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012394:	9b05      	ldr	r3, [sp, #20]
 8012396:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801239a:	45a0      	cmp	r8, r4
 801239c:	d114      	bne.n	80123c8 <_tzset_unlocked_r+0x2c8>
 801239e:	234d      	movs	r3, #77	; 0x4d
 80123a0:	f1b9 0f00 	cmp.w	r9, #0
 80123a4:	d107      	bne.n	80123b6 <_tzset_unlocked_r+0x2b6>
 80123a6:	722b      	strb	r3, [r5, #8]
 80123a8:	2103      	movs	r1, #3
 80123aa:	2302      	movs	r3, #2
 80123ac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80123b0:	f8c5 9014 	str.w	r9, [r5, #20]
 80123b4:	e791      	b.n	80122da <_tzset_unlocked_r+0x1da>
 80123b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80123ba:	220b      	movs	r2, #11
 80123bc:	2301      	movs	r3, #1
 80123be:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80123c2:	2300      	movs	r3, #0
 80123c4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80123c6:	e788      	b.n	80122da <_tzset_unlocked_r+0x1da>
 80123c8:	b280      	uxth	r0, r0
 80123ca:	723b      	strb	r3, [r7, #8]
 80123cc:	6178      	str	r0, [r7, #20]
 80123ce:	e784      	b.n	80122da <_tzset_unlocked_r+0x1da>
 80123d0:	0801b378 	.word	0x0801b378
 80123d4:	20007400 	.word	0x20007400
 80123d8:	20007408 	.word	0x20007408
 80123dc:	0801b37b 	.word	0x0801b37b
 80123e0:	20007404 	.word	0x20007404
 80123e4:	20000448 	.word	0x20000448
 80123e8:	200073f3 	.word	0x200073f3
 80123ec:	0801b37f 	.word	0x0801b37f
 80123f0:	0801b3a2 	.word	0x0801b3a2
 80123f4:	0801b38e 	.word	0x0801b38e
 80123f8:	0801b3a1 	.word	0x0801b3a1
 80123fc:	200073e8 	.word	0x200073e8

08012400 <_vfprintf_r>:
 8012400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012404:	ed2d 8b04 	vpush	{d8-d9}
 8012408:	b0cf      	sub	sp, #316	; 0x13c
 801240a:	4689      	mov	r9, r1
 801240c:	4690      	mov	r8, r2
 801240e:	461c      	mov	r4, r3
 8012410:	461e      	mov	r6, r3
 8012412:	4682      	mov	sl, r0
 8012414:	f002 fcb2 	bl	8014d7c <_localeconv_r>
 8012418:	6803      	ldr	r3, [r0, #0]
 801241a:	9313      	str	r3, [sp, #76]	; 0x4c
 801241c:	4618      	mov	r0, r3
 801241e:	f7ed fef7 	bl	8000210 <strlen>
 8012422:	900e      	str	r0, [sp, #56]	; 0x38
 8012424:	f1ba 0f00 	cmp.w	sl, #0
 8012428:	d005      	beq.n	8012436 <_vfprintf_r+0x36>
 801242a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801242e:	b913      	cbnz	r3, 8012436 <_vfprintf_r+0x36>
 8012430:	4650      	mov	r0, sl
 8012432:	f002 fa3f 	bl	80148b4 <__sinit>
 8012436:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801243a:	07d8      	lsls	r0, r3, #31
 801243c:	d407      	bmi.n	801244e <_vfprintf_r+0x4e>
 801243e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8012442:	0599      	lsls	r1, r3, #22
 8012444:	d403      	bmi.n	801244e <_vfprintf_r+0x4e>
 8012446:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801244a:	f002 fc9e 	bl	8014d8a <__retarget_lock_acquire_recursive>
 801244e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8012452:	049a      	lsls	r2, r3, #18
 8012454:	d409      	bmi.n	801246a <_vfprintf_r+0x6a>
 8012456:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801245a:	f8a9 300c 	strh.w	r3, [r9, #12]
 801245e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8012462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012466:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801246a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801246e:	071b      	lsls	r3, r3, #28
 8012470:	d502      	bpl.n	8012478 <_vfprintf_r+0x78>
 8012472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012476:	b9d3      	cbnz	r3, 80124ae <_vfprintf_r+0xae>
 8012478:	4649      	mov	r1, r9
 801247a:	4650      	mov	r0, sl
 801247c:	f001 fa3a 	bl	80138f4 <__swsetup_r>
 8012480:	b1a8      	cbz	r0, 80124ae <_vfprintf_r+0xae>
 8012482:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8012486:	07df      	lsls	r7, r3, #31
 8012488:	d508      	bpl.n	801249c <_vfprintf_r+0x9c>
 801248a:	f04f 33ff 	mov.w	r3, #4294967295
 801248e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012490:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012492:	b04f      	add	sp, #316	; 0x13c
 8012494:	ecbd 8b04 	vpop	{d8-d9}
 8012498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80124a0:	059e      	lsls	r6, r3, #22
 80124a2:	d4f2      	bmi.n	801248a <_vfprintf_r+0x8a>
 80124a4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80124a8:	f002 fc71 	bl	8014d8e <__retarget_lock_release_recursive>
 80124ac:	e7ed      	b.n	801248a <_vfprintf_r+0x8a>
 80124ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80124b2:	f003 021a 	and.w	r2, r3, #26
 80124b6:	2a0a      	cmp	r2, #10
 80124b8:	d118      	bne.n	80124ec <_vfprintf_r+0xec>
 80124ba:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80124be:	2a00      	cmp	r2, #0
 80124c0:	db14      	blt.n	80124ec <_vfprintf_r+0xec>
 80124c2:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80124c6:	07d5      	lsls	r5, r2, #31
 80124c8:	d405      	bmi.n	80124d6 <_vfprintf_r+0xd6>
 80124ca:	0598      	lsls	r0, r3, #22
 80124cc:	d403      	bmi.n	80124d6 <_vfprintf_r+0xd6>
 80124ce:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80124d2:	f002 fc5c 	bl	8014d8e <__retarget_lock_release_recursive>
 80124d6:	4623      	mov	r3, r4
 80124d8:	4642      	mov	r2, r8
 80124da:	4649      	mov	r1, r9
 80124dc:	4650      	mov	r0, sl
 80124de:	b04f      	add	sp, #316	; 0x13c
 80124e0:	ecbd 8b04 	vpop	{d8-d9}
 80124e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e8:	f001 b9c4 	b.w	8013874 <__sbprintf>
 80124ec:	ed9f 7b92 	vldr	d7, [pc, #584]	; 8012738 <_vfprintf_r+0x338>
 80124f0:	2500      	movs	r5, #0
 80124f2:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80124f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80124fa:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80124fe:	ac25      	add	r4, sp, #148	; 0x94
 8012500:	9422      	str	r4, [sp, #136]	; 0x88
 8012502:	9505      	str	r5, [sp, #20]
 8012504:	950a      	str	r5, [sp, #40]	; 0x28
 8012506:	9512      	str	r5, [sp, #72]	; 0x48
 8012508:	9514      	str	r5, [sp, #80]	; 0x50
 801250a:	950f      	str	r5, [sp, #60]	; 0x3c
 801250c:	4643      	mov	r3, r8
 801250e:	461d      	mov	r5, r3
 8012510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012514:	b10a      	cbz	r2, 801251a <_vfprintf_r+0x11a>
 8012516:	2a25      	cmp	r2, #37	; 0x25
 8012518:	d1f9      	bne.n	801250e <_vfprintf_r+0x10e>
 801251a:	ebb5 0708 	subs.w	r7, r5, r8
 801251e:	d00d      	beq.n	801253c <_vfprintf_r+0x13c>
 8012520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012522:	443b      	add	r3, r7
 8012524:	9324      	str	r3, [sp, #144]	; 0x90
 8012526:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012528:	3301      	adds	r3, #1
 801252a:	2b07      	cmp	r3, #7
 801252c:	e9c4 8700 	strd	r8, r7, [r4]
 8012530:	9323      	str	r3, [sp, #140]	; 0x8c
 8012532:	dc79      	bgt.n	8012628 <_vfprintf_r+0x228>
 8012534:	3408      	adds	r4, #8
 8012536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012538:	443b      	add	r3, r7
 801253a:	930f      	str	r3, [sp, #60]	; 0x3c
 801253c:	782b      	ldrb	r3, [r5, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	f001 8154 	beq.w	80137ec <_vfprintf_r+0x13ec>
 8012544:	2300      	movs	r3, #0
 8012546:	f04f 32ff 	mov.w	r2, #4294967295
 801254a:	3501      	adds	r5, #1
 801254c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8012550:	9204      	str	r2, [sp, #16]
 8012552:	9310      	str	r3, [sp, #64]	; 0x40
 8012554:	469b      	mov	fp, r3
 8012556:	270a      	movs	r7, #10
 8012558:	212b      	movs	r1, #43	; 0x2b
 801255a:	462b      	mov	r3, r5
 801255c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012560:	9206      	str	r2, [sp, #24]
 8012562:	930b      	str	r3, [sp, #44]	; 0x2c
 8012564:	9b06      	ldr	r3, [sp, #24]
 8012566:	3b20      	subs	r3, #32
 8012568:	2b5a      	cmp	r3, #90	; 0x5a
 801256a:	f200 85c8 	bhi.w	80130fe <_vfprintf_r+0xcfe>
 801256e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012572:	007e      	.short	0x007e
 8012574:	05c605c6 	.word	0x05c605c6
 8012578:	05c60086 	.word	0x05c60086
 801257c:	05c605c6 	.word	0x05c605c6
 8012580:	05c60065 	.word	0x05c60065
 8012584:	008905c6 	.word	0x008905c6
 8012588:	05c60093 	.word	0x05c60093
 801258c:	00960090 	.word	0x00960090
 8012590:	00b205c6 	.word	0x00b205c6
 8012594:	00b500b5 	.word	0x00b500b5
 8012598:	00b500b5 	.word	0x00b500b5
 801259c:	00b500b5 	.word	0x00b500b5
 80125a0:	00b500b5 	.word	0x00b500b5
 80125a4:	05c600b5 	.word	0x05c600b5
 80125a8:	05c605c6 	.word	0x05c605c6
 80125ac:	05c605c6 	.word	0x05c605c6
 80125b0:	05c605c6 	.word	0x05c605c6
 80125b4:	05c6012a 	.word	0x05c6012a
 80125b8:	00fa00e7 	.word	0x00fa00e7
 80125bc:	012a012a 	.word	0x012a012a
 80125c0:	05c6012a 	.word	0x05c6012a
 80125c4:	05c605c6 	.word	0x05c605c6
 80125c8:	00c505c6 	.word	0x00c505c6
 80125cc:	05c605c6 	.word	0x05c605c6
 80125d0:	05c604a0 	.word	0x05c604a0
 80125d4:	05c605c6 	.word	0x05c605c6
 80125d8:	05c604ea 	.word	0x05c604ea
 80125dc:	05c6050b 	.word	0x05c6050b
 80125e0:	052d05c6 	.word	0x052d05c6
 80125e4:	05c605c6 	.word	0x05c605c6
 80125e8:	05c605c6 	.word	0x05c605c6
 80125ec:	05c605c6 	.word	0x05c605c6
 80125f0:	05c605c6 	.word	0x05c605c6
 80125f4:	05c6012a 	.word	0x05c6012a
 80125f8:	00fc00e7 	.word	0x00fc00e7
 80125fc:	012a012a 	.word	0x012a012a
 8012600:	00c8012a 	.word	0x00c8012a
 8012604:	00dc00fc 	.word	0x00dc00fc
 8012608:	00d505c6 	.word	0x00d505c6
 801260c:	047b05c6 	.word	0x047b05c6
 8012610:	04d804a2 	.word	0x04d804a2
 8012614:	05c600dc 	.word	0x05c600dc
 8012618:	007c04ea 	.word	0x007c04ea
 801261c:	05c6050d 	.word	0x05c6050d
 8012620:	054c05c6 	.word	0x054c05c6
 8012624:	007c05c6 	.word	0x007c05c6
 8012628:	aa22      	add	r2, sp, #136	; 0x88
 801262a:	4649      	mov	r1, r9
 801262c:	4650      	mov	r0, sl
 801262e:	f004 fbb8 	bl	8016da2 <__sprint_r>
 8012632:	2800      	cmp	r0, #0
 8012634:	f040 8135 	bne.w	80128a2 <_vfprintf_r+0x4a2>
 8012638:	ac25      	add	r4, sp, #148	; 0x94
 801263a:	e77c      	b.n	8012536 <_vfprintf_r+0x136>
 801263c:	4650      	mov	r0, sl
 801263e:	f002 fb9d 	bl	8014d7c <_localeconv_r>
 8012642:	6843      	ldr	r3, [r0, #4]
 8012644:	9314      	str	r3, [sp, #80]	; 0x50
 8012646:	4618      	mov	r0, r3
 8012648:	f7ed fde2 	bl	8000210 <strlen>
 801264c:	9012      	str	r0, [sp, #72]	; 0x48
 801264e:	4650      	mov	r0, sl
 8012650:	f002 fb94 	bl	8014d7c <_localeconv_r>
 8012654:	6883      	ldr	r3, [r0, #8]
 8012656:	930a      	str	r3, [sp, #40]	; 0x28
 8012658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801265a:	212b      	movs	r1, #43	; 0x2b
 801265c:	b12b      	cbz	r3, 801266a <_vfprintf_r+0x26a>
 801265e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012660:	b11b      	cbz	r3, 801266a <_vfprintf_r+0x26a>
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	b10b      	cbz	r3, 801266a <_vfprintf_r+0x26a>
 8012666:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801266a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801266c:	e775      	b.n	801255a <_vfprintf_r+0x15a>
 801266e:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1f9      	bne.n	801266a <_vfprintf_r+0x26a>
 8012676:	2320      	movs	r3, #32
 8012678:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801267c:	e7f5      	b.n	801266a <_vfprintf_r+0x26a>
 801267e:	f04b 0b01 	orr.w	fp, fp, #1
 8012682:	e7f2      	b.n	801266a <_vfprintf_r+0x26a>
 8012684:	f856 3b04 	ldr.w	r3, [r6], #4
 8012688:	9310      	str	r3, [sp, #64]	; 0x40
 801268a:	2b00      	cmp	r3, #0
 801268c:	daed      	bge.n	801266a <_vfprintf_r+0x26a>
 801268e:	425b      	negs	r3, r3
 8012690:	9310      	str	r3, [sp, #64]	; 0x40
 8012692:	f04b 0b04 	orr.w	fp, fp, #4
 8012696:	e7e8      	b.n	801266a <_vfprintf_r+0x26a>
 8012698:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801269c:	e7e5      	b.n	801266a <_vfprintf_r+0x26a>
 801269e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126a4:	9206      	str	r2, [sp, #24]
 80126a6:	2a2a      	cmp	r2, #42	; 0x2a
 80126a8:	d112      	bne.n	80126d0 <_vfprintf_r+0x2d0>
 80126aa:	f856 0b04 	ldr.w	r0, [r6], #4
 80126ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80126b0:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 80126b4:	9204      	str	r2, [sp, #16]
 80126b6:	e7d8      	b.n	801266a <_vfprintf_r+0x26a>
 80126b8:	9804      	ldr	r0, [sp, #16]
 80126ba:	fb07 2200 	mla	r2, r7, r0, r2
 80126be:	9204      	str	r2, [sp, #16]
 80126c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126c4:	9206      	str	r2, [sp, #24]
 80126c6:	9a06      	ldr	r2, [sp, #24]
 80126c8:	3a30      	subs	r2, #48	; 0x30
 80126ca:	2a09      	cmp	r2, #9
 80126cc:	d9f4      	bls.n	80126b8 <_vfprintf_r+0x2b8>
 80126ce:	e748      	b.n	8012562 <_vfprintf_r+0x162>
 80126d0:	2200      	movs	r2, #0
 80126d2:	9204      	str	r2, [sp, #16]
 80126d4:	e7f7      	b.n	80126c6 <_vfprintf_r+0x2c6>
 80126d6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80126da:	e7c6      	b.n	801266a <_vfprintf_r+0x26a>
 80126dc:	2200      	movs	r2, #0
 80126de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126e0:	9210      	str	r2, [sp, #64]	; 0x40
 80126e2:	9a06      	ldr	r2, [sp, #24]
 80126e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80126e6:	3a30      	subs	r2, #48	; 0x30
 80126e8:	fb07 2200 	mla	r2, r7, r0, r2
 80126ec:	9210      	str	r2, [sp, #64]	; 0x40
 80126ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126f2:	9206      	str	r2, [sp, #24]
 80126f4:	3a30      	subs	r2, #48	; 0x30
 80126f6:	2a09      	cmp	r2, #9
 80126f8:	d9f3      	bls.n	80126e2 <_vfprintf_r+0x2e2>
 80126fa:	e732      	b.n	8012562 <_vfprintf_r+0x162>
 80126fc:	f04b 0b08 	orr.w	fp, fp, #8
 8012700:	e7b3      	b.n	801266a <_vfprintf_r+0x26a>
 8012702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	2b68      	cmp	r3, #104	; 0x68
 8012708:	bf01      	itttt	eq
 801270a:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801270c:	3301      	addeq	r3, #1
 801270e:	930b      	streq	r3, [sp, #44]	; 0x2c
 8012710:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8012714:	bf18      	it	ne
 8012716:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801271a:	e7a6      	b.n	801266a <_vfprintf_r+0x26a>
 801271c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	2b6c      	cmp	r3, #108	; 0x6c
 8012722:	d105      	bne.n	8012730 <_vfprintf_r+0x330>
 8012724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012726:	3301      	adds	r3, #1
 8012728:	930b      	str	r3, [sp, #44]	; 0x2c
 801272a:	f04b 0b20 	orr.w	fp, fp, #32
 801272e:	e79c      	b.n	801266a <_vfprintf_r+0x26a>
 8012730:	f04b 0b10 	orr.w	fp, fp, #16
 8012734:	e799      	b.n	801266a <_vfprintf_r+0x26a>
 8012736:	bf00      	nop
	...
 8012740:	4632      	mov	r2, r6
 8012742:	2000      	movs	r0, #0
 8012744:	f852 3b04 	ldr.w	r3, [r2], #4
 8012748:	9207      	str	r2, [sp, #28]
 801274a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801274e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8012752:	2301      	movs	r3, #1
 8012754:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8012758:	9003      	str	r0, [sp, #12]
 801275a:	9304      	str	r3, [sp, #16]
 801275c:	4606      	mov	r6, r0
 801275e:	4605      	mov	r5, r0
 8012760:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 8012764:	e1c6      	b.n	8012af4 <_vfprintf_r+0x6f4>
 8012766:	f04b 0b10 	orr.w	fp, fp, #16
 801276a:	f01b 0f20 	tst.w	fp, #32
 801276e:	d012      	beq.n	8012796 <_vfprintf_r+0x396>
 8012770:	3607      	adds	r6, #7
 8012772:	f026 0307 	bic.w	r3, r6, #7
 8012776:	461a      	mov	r2, r3
 8012778:	685d      	ldr	r5, [r3, #4]
 801277a:	f852 6b08 	ldr.w	r6, [r2], #8
 801277e:	9207      	str	r2, [sp, #28]
 8012780:	2d00      	cmp	r5, #0
 8012782:	da06      	bge.n	8012792 <_vfprintf_r+0x392>
 8012784:	4276      	negs	r6, r6
 8012786:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801278a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801278e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8012792:	2301      	movs	r3, #1
 8012794:	e3a0      	b.n	8012ed8 <_vfprintf_r+0xad8>
 8012796:	4633      	mov	r3, r6
 8012798:	f01b 0f10 	tst.w	fp, #16
 801279c:	f853 5b04 	ldr.w	r5, [r3], #4
 80127a0:	9307      	str	r3, [sp, #28]
 80127a2:	d002      	beq.n	80127aa <_vfprintf_r+0x3aa>
 80127a4:	462e      	mov	r6, r5
 80127a6:	17ed      	asrs	r5, r5, #31
 80127a8:	e7ea      	b.n	8012780 <_vfprintf_r+0x380>
 80127aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80127ae:	d003      	beq.n	80127b8 <_vfprintf_r+0x3b8>
 80127b0:	b22e      	sxth	r6, r5
 80127b2:	f345 35c0 	sbfx	r5, r5, #15, #1
 80127b6:	e7e3      	b.n	8012780 <_vfprintf_r+0x380>
 80127b8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80127bc:	d0f2      	beq.n	80127a4 <_vfprintf_r+0x3a4>
 80127be:	b26e      	sxtb	r6, r5
 80127c0:	f345 15c0 	sbfx	r5, r5, #7, #1
 80127c4:	e7dc      	b.n	8012780 <_vfprintf_r+0x380>
 80127c6:	3607      	adds	r6, #7
 80127c8:	f026 0307 	bic.w	r3, r6, #7
 80127cc:	ecb3 7b02 	vldmia	r3!, {d7}
 80127d0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80127d4:	9307      	str	r3, [sp, #28]
 80127d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127d8:	ee09 3a10 	vmov	s18, r3
 80127dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127e2:	ee09 3a90 	vmov	s19, r3
 80127e6:	f04f 32ff 	mov.w	r2, #4294967295
 80127ea:	4b3f      	ldr	r3, [pc, #252]	; (80128e8 <_vfprintf_r+0x4e8>)
 80127ec:	ec51 0b19 	vmov	r0, r1, d9
 80127f0:	f7ee f9c6 	bl	8000b80 <__aeabi_dcmpun>
 80127f4:	bb10      	cbnz	r0, 801283c <_vfprintf_r+0x43c>
 80127f6:	4b3c      	ldr	r3, [pc, #240]	; (80128e8 <_vfprintf_r+0x4e8>)
 80127f8:	ec51 0b19 	vmov	r0, r1, d9
 80127fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012800:	f7ee f9a0 	bl	8000b44 <__aeabi_dcmple>
 8012804:	b9d0      	cbnz	r0, 801283c <_vfprintf_r+0x43c>
 8012806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801280a:	2200      	movs	r2, #0
 801280c:	2300      	movs	r3, #0
 801280e:	f7ee f98f 	bl	8000b30 <__aeabi_dcmplt>
 8012812:	b110      	cbz	r0, 801281a <_vfprintf_r+0x41a>
 8012814:	232d      	movs	r3, #45	; 0x2d
 8012816:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801281a:	4a34      	ldr	r2, [pc, #208]	; (80128ec <_vfprintf_r+0x4ec>)
 801281c:	4834      	ldr	r0, [pc, #208]	; (80128f0 <_vfprintf_r+0x4f0>)
 801281e:	9b06      	ldr	r3, [sp, #24]
 8012820:	2100      	movs	r1, #0
 8012822:	2b47      	cmp	r3, #71	; 0x47
 8012824:	bfd4      	ite	le
 8012826:	4690      	movle	r8, r2
 8012828:	4680      	movgt	r8, r0
 801282a:	2303      	movs	r3, #3
 801282c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8012830:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8012834:	2600      	movs	r6, #0
 8012836:	4633      	mov	r3, r6
 8012838:	f001 b812 	b.w	8013860 <_vfprintf_r+0x1460>
 801283c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012840:	4610      	mov	r0, r2
 8012842:	4619      	mov	r1, r3
 8012844:	f7ee f99c 	bl	8000b80 <__aeabi_dcmpun>
 8012848:	b140      	cbz	r0, 801285c <_vfprintf_r+0x45c>
 801284a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801284c:	4a29      	ldr	r2, [pc, #164]	; (80128f4 <_vfprintf_r+0x4f4>)
 801284e:	482a      	ldr	r0, [pc, #168]	; (80128f8 <_vfprintf_r+0x4f8>)
 8012850:	2b00      	cmp	r3, #0
 8012852:	bfbc      	itt	lt
 8012854:	232d      	movlt	r3, #45	; 0x2d
 8012856:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801285a:	e7e0      	b.n	801281e <_vfprintf_r+0x41e>
 801285c:	9b06      	ldr	r3, [sp, #24]
 801285e:	f023 0320 	bic.w	r3, r3, #32
 8012862:	2b41      	cmp	r3, #65	; 0x41
 8012864:	9308      	str	r3, [sp, #32]
 8012866:	d12e      	bne.n	80128c6 <_vfprintf_r+0x4c6>
 8012868:	2330      	movs	r3, #48	; 0x30
 801286a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801286e:	9b06      	ldr	r3, [sp, #24]
 8012870:	2b61      	cmp	r3, #97	; 0x61
 8012872:	bf0c      	ite	eq
 8012874:	2378      	moveq	r3, #120	; 0x78
 8012876:	2358      	movne	r3, #88	; 0x58
 8012878:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801287c:	9b04      	ldr	r3, [sp, #16]
 801287e:	2b63      	cmp	r3, #99	; 0x63
 8012880:	f04b 0b02 	orr.w	fp, fp, #2
 8012884:	dd3a      	ble.n	80128fc <_vfprintf_r+0x4fc>
 8012886:	1c59      	adds	r1, r3, #1
 8012888:	4650      	mov	r0, sl
 801288a:	f002 fafd 	bl	8014e88 <_malloc_r>
 801288e:	4680      	mov	r8, r0
 8012890:	2800      	cmp	r0, #0
 8012892:	f040 8207 	bne.w	8012ca4 <_vfprintf_r+0x8a4>
 8012896:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801289a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801289e:	f8a9 300c 	strh.w	r3, [r9, #12]
 80128a2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80128a6:	07d9      	lsls	r1, r3, #31
 80128a8:	d407      	bmi.n	80128ba <_vfprintf_r+0x4ba>
 80128aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80128ae:	059a      	lsls	r2, r3, #22
 80128b0:	d403      	bmi.n	80128ba <_vfprintf_r+0x4ba>
 80128b2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80128b6:	f002 fa6a 	bl	8014d8e <__retarget_lock_release_recursive>
 80128ba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80128be:	065b      	lsls	r3, r3, #25
 80128c0:	f57f ade6 	bpl.w	8012490 <_vfprintf_r+0x90>
 80128c4:	e5e1      	b.n	801248a <_vfprintf_r+0x8a>
 80128c6:	9b04      	ldr	r3, [sp, #16]
 80128c8:	3301      	adds	r3, #1
 80128ca:	f000 81ed 	beq.w	8012ca8 <_vfprintf_r+0x8a8>
 80128ce:	9b08      	ldr	r3, [sp, #32]
 80128d0:	2b47      	cmp	r3, #71	; 0x47
 80128d2:	f040 81ec 	bne.w	8012cae <_vfprintf_r+0x8ae>
 80128d6:	9b04      	ldr	r3, [sp, #16]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f040 81e8 	bne.w	8012cae <_vfprintf_r+0x8ae>
 80128de:	9303      	str	r3, [sp, #12]
 80128e0:	2301      	movs	r3, #1
 80128e2:	9304      	str	r3, [sp, #16]
 80128e4:	e00d      	b.n	8012902 <_vfprintf_r+0x502>
 80128e6:	bf00      	nop
 80128e8:	7fefffff 	.word	0x7fefffff
 80128ec:	0801b324 	.word	0x0801b324
 80128f0:	0801b328 	.word	0x0801b328
 80128f4:	0801b32c 	.word	0x0801b32c
 80128f8:	0801b330 	.word	0x0801b330
 80128fc:	9003      	str	r0, [sp, #12]
 80128fe:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 8012902:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8012906:	9311      	str	r3, [sp, #68]	; 0x44
 8012908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801290a:	2b00      	cmp	r3, #0
 801290c:	f280 81d1 	bge.w	8012cb2 <_vfprintf_r+0x8b2>
 8012910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012912:	ee08 3a10 	vmov	s16, r3
 8012916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012918:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801291c:	ee08 3a90 	vmov	s17, r3
 8012920:	232d      	movs	r3, #45	; 0x2d
 8012922:	9318      	str	r3, [sp, #96]	; 0x60
 8012924:	9b08      	ldr	r3, [sp, #32]
 8012926:	2b41      	cmp	r3, #65	; 0x41
 8012928:	f040 81e1 	bne.w	8012cee <_vfprintf_r+0x8ee>
 801292c:	eeb0 0a48 	vmov.f32	s0, s16
 8012930:	eef0 0a68 	vmov.f32	s1, s17
 8012934:	a81c      	add	r0, sp, #112	; 0x70
 8012936:	f003 f825 	bl	8015984 <frexp>
 801293a:	2200      	movs	r2, #0
 801293c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012940:	ec51 0b10 	vmov	r0, r1, d0
 8012944:	f7ed fe82 	bl	800064c <__aeabi_dmul>
 8012948:	2200      	movs	r2, #0
 801294a:	2300      	movs	r3, #0
 801294c:	4606      	mov	r6, r0
 801294e:	460f      	mov	r7, r1
 8012950:	f7ee f8e4 	bl	8000b1c <__aeabi_dcmpeq>
 8012954:	b108      	cbz	r0, 801295a <_vfprintf_r+0x55a>
 8012956:	2301      	movs	r3, #1
 8012958:	931c      	str	r3, [sp, #112]	; 0x70
 801295a:	4ba7      	ldr	r3, [pc, #668]	; (8012bf8 <_vfprintf_r+0x7f8>)
 801295c:	4aa7      	ldr	r2, [pc, #668]	; (8012bfc <_vfprintf_r+0x7fc>)
 801295e:	9906      	ldr	r1, [sp, #24]
 8012960:	2961      	cmp	r1, #97	; 0x61
 8012962:	bf18      	it	ne
 8012964:	461a      	movne	r2, r3
 8012966:	9b04      	ldr	r3, [sp, #16]
 8012968:	9217      	str	r2, [sp, #92]	; 0x5c
 801296a:	3b01      	subs	r3, #1
 801296c:	9305      	str	r3, [sp, #20]
 801296e:	4645      	mov	r5, r8
 8012970:	4ba3      	ldr	r3, [pc, #652]	; (8012c00 <_vfprintf_r+0x800>)
 8012972:	2200      	movs	r2, #0
 8012974:	4630      	mov	r0, r6
 8012976:	4639      	mov	r1, r7
 8012978:	f7ed fe68 	bl	800064c <__aeabi_dmul>
 801297c:	460f      	mov	r7, r1
 801297e:	4606      	mov	r6, r0
 8012980:	f7ee f914 	bl	8000bac <__aeabi_d2iz>
 8012984:	9019      	str	r0, [sp, #100]	; 0x64
 8012986:	f7ed fdf7 	bl	8000578 <__aeabi_i2d>
 801298a:	4602      	mov	r2, r0
 801298c:	460b      	mov	r3, r1
 801298e:	4630      	mov	r0, r6
 8012990:	4639      	mov	r1, r7
 8012992:	f7ed fca3 	bl	80002dc <__aeabi_dsub>
 8012996:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801299a:	5c9b      	ldrb	r3, [r3, r2]
 801299c:	f805 3b01 	strb.w	r3, [r5], #1
 80129a0:	9b05      	ldr	r3, [sp, #20]
 80129a2:	9309      	str	r3, [sp, #36]	; 0x24
 80129a4:	1c5a      	adds	r2, r3, #1
 80129a6:	4606      	mov	r6, r0
 80129a8:	460f      	mov	r7, r1
 80129aa:	d007      	beq.n	80129bc <_vfprintf_r+0x5bc>
 80129ac:	3b01      	subs	r3, #1
 80129ae:	9305      	str	r3, [sp, #20]
 80129b0:	2200      	movs	r2, #0
 80129b2:	2300      	movs	r3, #0
 80129b4:	f7ee f8b2 	bl	8000b1c <__aeabi_dcmpeq>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d0d9      	beq.n	8012970 <_vfprintf_r+0x570>
 80129bc:	4b91      	ldr	r3, [pc, #580]	; (8012c04 <_vfprintf_r+0x804>)
 80129be:	2200      	movs	r2, #0
 80129c0:	4630      	mov	r0, r6
 80129c2:	4639      	mov	r1, r7
 80129c4:	f7ee f8d2 	bl	8000b6c <__aeabi_dcmpgt>
 80129c8:	b960      	cbnz	r0, 80129e4 <_vfprintf_r+0x5e4>
 80129ca:	4b8e      	ldr	r3, [pc, #568]	; (8012c04 <_vfprintf_r+0x804>)
 80129cc:	2200      	movs	r2, #0
 80129ce:	4630      	mov	r0, r6
 80129d0:	4639      	mov	r1, r7
 80129d2:	f7ee f8a3 	bl	8000b1c <__aeabi_dcmpeq>
 80129d6:	2800      	cmp	r0, #0
 80129d8:	f000 8184 	beq.w	8012ce4 <_vfprintf_r+0x8e4>
 80129dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129de:	07da      	lsls	r2, r3, #31
 80129e0:	f140 8180 	bpl.w	8012ce4 <_vfprintf_r+0x8e4>
 80129e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80129e6:	9520      	str	r5, [sp, #128]	; 0x80
 80129e8:	7bd9      	ldrb	r1, [r3, #15]
 80129ea:	2030      	movs	r0, #48	; 0x30
 80129ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80129ee:	1e53      	subs	r3, r2, #1
 80129f0:	9320      	str	r3, [sp, #128]	; 0x80
 80129f2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80129f6:	428b      	cmp	r3, r1
 80129f8:	f000 8163 	beq.w	8012cc2 <_vfprintf_r+0x8c2>
 80129fc:	2b39      	cmp	r3, #57	; 0x39
 80129fe:	bf0b      	itete	eq
 8012a00:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8012a02:	3301      	addne	r3, #1
 8012a04:	7a9b      	ldrbeq	r3, [r3, #10]
 8012a06:	b2db      	uxtbne	r3, r3
 8012a08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012a0c:	eba5 0308 	sub.w	r3, r5, r8
 8012a10:	9305      	str	r3, [sp, #20]
 8012a12:	9b08      	ldr	r3, [sp, #32]
 8012a14:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8012a16:	2b47      	cmp	r3, #71	; 0x47
 8012a18:	f040 81b1 	bne.w	8012d7e <_vfprintf_r+0x97e>
 8012a1c:	1ceb      	adds	r3, r5, #3
 8012a1e:	db03      	blt.n	8012a28 <_vfprintf_r+0x628>
 8012a20:	9b04      	ldr	r3, [sp, #16]
 8012a22:	42ab      	cmp	r3, r5
 8012a24:	f280 81d6 	bge.w	8012dd4 <_vfprintf_r+0x9d4>
 8012a28:	9b06      	ldr	r3, [sp, #24]
 8012a2a:	3b02      	subs	r3, #2
 8012a2c:	9306      	str	r3, [sp, #24]
 8012a2e:	9906      	ldr	r1, [sp, #24]
 8012a30:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8012a34:	f021 0120 	bic.w	r1, r1, #32
 8012a38:	2941      	cmp	r1, #65	; 0x41
 8012a3a:	bf08      	it	eq
 8012a3c:	320f      	addeq	r2, #15
 8012a3e:	f105 33ff 	add.w	r3, r5, #4294967295
 8012a42:	bf06      	itte	eq
 8012a44:	b2d2      	uxtbeq	r2, r2
 8012a46:	2101      	moveq	r1, #1
 8012a48:	2100      	movne	r1, #0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	931c      	str	r3, [sp, #112]	; 0x70
 8012a4e:	bfb8      	it	lt
 8012a50:	f1c5 0301 	rsblt	r3, r5, #1
 8012a54:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8012a58:	bfb4      	ite	lt
 8012a5a:	222d      	movlt	r2, #45	; 0x2d
 8012a5c:	222b      	movge	r2, #43	; 0x2b
 8012a5e:	2b09      	cmp	r3, #9
 8012a60:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8012a64:	f340 81a4 	ble.w	8012db0 <_vfprintf_r+0x9b0>
 8012a68:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8012a6c:	260a      	movs	r6, #10
 8012a6e:	4611      	mov	r1, r2
 8012a70:	fb93 f5f6 	sdiv	r5, r3, r6
 8012a74:	fb06 3015 	mls	r0, r6, r5, r3
 8012a78:	3030      	adds	r0, #48	; 0x30
 8012a7a:	f801 0c01 	strb.w	r0, [r1, #-1]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	2863      	cmp	r0, #99	; 0x63
 8012a82:	f102 32ff 	add.w	r2, r2, #4294967295
 8012a86:	462b      	mov	r3, r5
 8012a88:	dcf1      	bgt.n	8012a6e <_vfprintf_r+0x66e>
 8012a8a:	3330      	adds	r3, #48	; 0x30
 8012a8c:	1e88      	subs	r0, r1, #2
 8012a8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012a92:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8012a96:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	42ab      	cmp	r3, r5
 8012a9e:	f0c0 8182 	bcc.w	8012da6 <_vfprintf_r+0x9a6>
 8012aa2:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8012aa6:	1a52      	subs	r2, r2, r1
 8012aa8:	42a8      	cmp	r0, r5
 8012aaa:	bf88      	it	hi
 8012aac:	2200      	movhi	r2, #0
 8012aae:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8012ab2:	441a      	add	r2, r3
 8012ab4:	ab1e      	add	r3, sp, #120	; 0x78
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	9a05      	ldr	r2, [sp, #20]
 8012aba:	9315      	str	r3, [sp, #84]	; 0x54
 8012abc:	2a01      	cmp	r2, #1
 8012abe:	4413      	add	r3, r2
 8012ac0:	9304      	str	r3, [sp, #16]
 8012ac2:	dc02      	bgt.n	8012aca <_vfprintf_r+0x6ca>
 8012ac4:	f01b 0f01 	tst.w	fp, #1
 8012ac8:	d003      	beq.n	8012ad2 <_vfprintf_r+0x6d2>
 8012aca:	9b04      	ldr	r3, [sp, #16]
 8012acc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ace:	4413      	add	r3, r2
 8012ad0:	9304      	str	r3, [sp, #16]
 8012ad2:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8012ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ada:	9311      	str	r3, [sp, #68]	; 0x44
 8012adc:	2300      	movs	r3, #0
 8012ade:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8012ae2:	461d      	mov	r5, r3
 8012ae4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012ae6:	b113      	cbz	r3, 8012aee <_vfprintf_r+0x6ee>
 8012ae8:	232d      	movs	r3, #45	; 0x2d
 8012aea:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8012aee:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8012af2:	2600      	movs	r6, #0
 8012af4:	9b04      	ldr	r3, [sp, #16]
 8012af6:	42b3      	cmp	r3, r6
 8012af8:	bfb8      	it	lt
 8012afa:	4633      	movlt	r3, r6
 8012afc:	9311      	str	r3, [sp, #68]	; 0x44
 8012afe:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8012b02:	b113      	cbz	r3, 8012b0a <_vfprintf_r+0x70a>
 8012b04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b06:	3301      	adds	r3, #1
 8012b08:	9311      	str	r3, [sp, #68]	; 0x44
 8012b0a:	f01b 0302 	ands.w	r3, fp, #2
 8012b0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012b10:	bf1e      	ittt	ne
 8012b12:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8012b14:	3302      	addne	r3, #2
 8012b16:	9311      	strne	r3, [sp, #68]	; 0x44
 8012b18:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8012b1c:	9318      	str	r3, [sp, #96]	; 0x60
 8012b1e:	d11f      	bne.n	8012b60 <_vfprintf_r+0x760>
 8012b20:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8012b24:	1a9f      	subs	r7, r3, r2
 8012b26:	2f00      	cmp	r7, #0
 8012b28:	dd1a      	ble.n	8012b60 <_vfprintf_r+0x760>
 8012b2a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8012b2e:	4836      	ldr	r0, [pc, #216]	; (8012c08 <_vfprintf_r+0x808>)
 8012b30:	6020      	str	r0, [r4, #0]
 8012b32:	2f10      	cmp	r7, #16
 8012b34:	f103 0301 	add.w	r3, r3, #1
 8012b38:	f104 0108 	add.w	r1, r4, #8
 8012b3c:	f300 82ee 	bgt.w	801311c <_vfprintf_r+0xd1c>
 8012b40:	443a      	add	r2, r7
 8012b42:	2b07      	cmp	r3, #7
 8012b44:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8012b48:	6067      	str	r7, [r4, #4]
 8012b4a:	f340 82fa 	ble.w	8013142 <_vfprintf_r+0xd42>
 8012b4e:	aa22      	add	r2, sp, #136	; 0x88
 8012b50:	4649      	mov	r1, r9
 8012b52:	4650      	mov	r0, sl
 8012b54:	f004 f925 	bl	8016da2 <__sprint_r>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	f040 8625 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8012b5e:	ac25      	add	r4, sp, #148	; 0x94
 8012b60:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8012b64:	b173      	cbz	r3, 8012b84 <_vfprintf_r+0x784>
 8012b66:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8012b6a:	6023      	str	r3, [r4, #0]
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	6063      	str	r3, [r4, #4]
 8012b70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012b72:	3301      	adds	r3, #1
 8012b74:	9324      	str	r3, [sp, #144]	; 0x90
 8012b76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b78:	3301      	adds	r3, #1
 8012b7a:	2b07      	cmp	r3, #7
 8012b7c:	9323      	str	r3, [sp, #140]	; 0x8c
 8012b7e:	f300 82e2 	bgt.w	8013146 <_vfprintf_r+0xd46>
 8012b82:	3408      	adds	r4, #8
 8012b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b86:	b16b      	cbz	r3, 8012ba4 <_vfprintf_r+0x7a4>
 8012b88:	ab1b      	add	r3, sp, #108	; 0x6c
 8012b8a:	6023      	str	r3, [r4, #0]
 8012b8c:	2302      	movs	r3, #2
 8012b8e:	6063      	str	r3, [r4, #4]
 8012b90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012b92:	3302      	adds	r3, #2
 8012b94:	9324      	str	r3, [sp, #144]	; 0x90
 8012b96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b98:	3301      	adds	r3, #1
 8012b9a:	2b07      	cmp	r3, #7
 8012b9c:	9323      	str	r3, [sp, #140]	; 0x8c
 8012b9e:	f300 82dc 	bgt.w	801315a <_vfprintf_r+0xd5a>
 8012ba2:	3408      	adds	r4, #8
 8012ba4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012ba6:	2b80      	cmp	r3, #128	; 0x80
 8012ba8:	d11f      	bne.n	8012bea <_vfprintf_r+0x7ea>
 8012baa:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8012bae:	1a9f      	subs	r7, r3, r2
 8012bb0:	2f00      	cmp	r7, #0
 8012bb2:	dd1a      	ble.n	8012bea <_vfprintf_r+0x7ea>
 8012bb4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8012bb8:	4814      	ldr	r0, [pc, #80]	; (8012c0c <_vfprintf_r+0x80c>)
 8012bba:	6020      	str	r0, [r4, #0]
 8012bbc:	2f10      	cmp	r7, #16
 8012bbe:	f103 0301 	add.w	r3, r3, #1
 8012bc2:	f104 0108 	add.w	r1, r4, #8
 8012bc6:	f300 82d2 	bgt.w	801316e <_vfprintf_r+0xd6e>
 8012bca:	6067      	str	r7, [r4, #4]
 8012bcc:	2b07      	cmp	r3, #7
 8012bce:	4417      	add	r7, r2
 8012bd0:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8012bd4:	f340 82de 	ble.w	8013194 <_vfprintf_r+0xd94>
 8012bd8:	aa22      	add	r2, sp, #136	; 0x88
 8012bda:	4649      	mov	r1, r9
 8012bdc:	4650      	mov	r0, sl
 8012bde:	f004 f8e0 	bl	8016da2 <__sprint_r>
 8012be2:	2800      	cmp	r0, #0
 8012be4:	f040 85e0 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8012be8:	ac25      	add	r4, sp, #148	; 0x94
 8012bea:	9b04      	ldr	r3, [sp, #16]
 8012bec:	1af6      	subs	r6, r6, r3
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	dd28      	ble.n	8012c44 <_vfprintf_r+0x844>
 8012bf2:	4f06      	ldr	r7, [pc, #24]	; (8012c0c <_vfprintf_r+0x80c>)
 8012bf4:	e00c      	b.n	8012c10 <_vfprintf_r+0x810>
 8012bf6:	bf00      	nop
 8012bf8:	0801b345 	.word	0x0801b345
 8012bfc:	0801b334 	.word	0x0801b334
 8012c00:	40300000 	.word	0x40300000
 8012c04:	3fe00000 	.word	0x3fe00000
 8012c08:	0801b3b4 	.word	0x0801b3b4
 8012c0c:	0801b3c4 	.word	0x0801b3c4
 8012c10:	6027      	str	r7, [r4, #0]
 8012c12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8012c16:	2e10      	cmp	r6, #16
 8012c18:	f103 0301 	add.w	r3, r3, #1
 8012c1c:	f104 0108 	add.w	r1, r4, #8
 8012c20:	f300 82ba 	bgt.w	8013198 <_vfprintf_r+0xd98>
 8012c24:	6066      	str	r6, [r4, #4]
 8012c26:	2b07      	cmp	r3, #7
 8012c28:	4416      	add	r6, r2
 8012c2a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8012c2e:	f340 82c6 	ble.w	80131be <_vfprintf_r+0xdbe>
 8012c32:	aa22      	add	r2, sp, #136	; 0x88
 8012c34:	4649      	mov	r1, r9
 8012c36:	4650      	mov	r0, sl
 8012c38:	f004 f8b3 	bl	8016da2 <__sprint_r>
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	f040 85b3 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8012c42:	ac25      	add	r4, sp, #148	; 0x94
 8012c44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012c48:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012c4a:	f040 82bf 	bne.w	80131cc <_vfprintf_r+0xdcc>
 8012c4e:	9b04      	ldr	r3, [sp, #16]
 8012c50:	f8c4 8000 	str.w	r8, [r4]
 8012c54:	441e      	add	r6, r3
 8012c56:	6063      	str	r3, [r4, #4]
 8012c58:	9624      	str	r6, [sp, #144]	; 0x90
 8012c5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	2b07      	cmp	r3, #7
 8012c60:	9323      	str	r3, [sp, #140]	; 0x8c
 8012c62:	f300 82f8 	bgt.w	8013256 <_vfprintf_r+0xe56>
 8012c66:	3408      	adds	r4, #8
 8012c68:	f01b 0f04 	tst.w	fp, #4
 8012c6c:	f040 857e 	bne.w	801376c <_vfprintf_r+0x136c>
 8012c70:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8012c74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c76:	428a      	cmp	r2, r1
 8012c78:	bfac      	ite	ge
 8012c7a:	189b      	addge	r3, r3, r2
 8012c7c:	185b      	addlt	r3, r3, r1
 8012c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012c82:	b13b      	cbz	r3, 8012c94 <_vfprintf_r+0x894>
 8012c84:	aa22      	add	r2, sp, #136	; 0x88
 8012c86:	4649      	mov	r1, r9
 8012c88:	4650      	mov	r0, sl
 8012c8a:	f004 f88a 	bl	8016da2 <__sprint_r>
 8012c8e:	2800      	cmp	r0, #0
 8012c90:	f040 858a 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8012c94:	2300      	movs	r3, #0
 8012c96:	9323      	str	r3, [sp, #140]	; 0x8c
 8012c98:	9b03      	ldr	r3, [sp, #12]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	f040 85a0 	bne.w	80137e0 <_vfprintf_r+0x13e0>
 8012ca0:	ac25      	add	r4, sp, #148	; 0x94
 8012ca2:	e0ec      	b.n	8012e7e <_vfprintf_r+0xa7e>
 8012ca4:	9003      	str	r0, [sp, #12]
 8012ca6:	e62c      	b.n	8012902 <_vfprintf_r+0x502>
 8012ca8:	9003      	str	r0, [sp, #12]
 8012caa:	2306      	movs	r3, #6
 8012cac:	e619      	b.n	80128e2 <_vfprintf_r+0x4e2>
 8012cae:	9003      	str	r0, [sp, #12]
 8012cb0:	e627      	b.n	8012902 <_vfprintf_r+0x502>
 8012cb2:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	eeb0 8a47 	vmov.f32	s16, s14
 8012cbc:	eef0 8a67 	vmov.f32	s17, s15
 8012cc0:	e62f      	b.n	8012922 <_vfprintf_r+0x522>
 8012cc2:	f802 0c01 	strb.w	r0, [r2, #-1]
 8012cc6:	e691      	b.n	80129ec <_vfprintf_r+0x5ec>
 8012cc8:	f803 0b01 	strb.w	r0, [r3], #1
 8012ccc:	1aca      	subs	r2, r1, r3
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	dafa      	bge.n	8012cc8 <_vfprintf_r+0x8c8>
 8012cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cd6:	3201      	adds	r2, #1
 8012cd8:	f103 0301 	add.w	r3, r3, #1
 8012cdc:	bfb8      	it	lt
 8012cde:	2300      	movlt	r3, #0
 8012ce0:	441d      	add	r5, r3
 8012ce2:	e693      	b.n	8012a0c <_vfprintf_r+0x60c>
 8012ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ce6:	462b      	mov	r3, r5
 8012ce8:	18a9      	adds	r1, r5, r2
 8012cea:	2030      	movs	r0, #48	; 0x30
 8012cec:	e7ee      	b.n	8012ccc <_vfprintf_r+0x8cc>
 8012cee:	9b08      	ldr	r3, [sp, #32]
 8012cf0:	2b46      	cmp	r3, #70	; 0x46
 8012cf2:	d005      	beq.n	8012d00 <_vfprintf_r+0x900>
 8012cf4:	2b45      	cmp	r3, #69	; 0x45
 8012cf6:	d11b      	bne.n	8012d30 <_vfprintf_r+0x930>
 8012cf8:	9b04      	ldr	r3, [sp, #16]
 8012cfa:	1c5d      	adds	r5, r3, #1
 8012cfc:	2102      	movs	r1, #2
 8012cfe:	e001      	b.n	8012d04 <_vfprintf_r+0x904>
 8012d00:	9d04      	ldr	r5, [sp, #16]
 8012d02:	2103      	movs	r1, #3
 8012d04:	ab20      	add	r3, sp, #128	; 0x80
 8012d06:	9301      	str	r3, [sp, #4]
 8012d08:	ab1d      	add	r3, sp, #116	; 0x74
 8012d0a:	9300      	str	r3, [sp, #0]
 8012d0c:	462a      	mov	r2, r5
 8012d0e:	ab1c      	add	r3, sp, #112	; 0x70
 8012d10:	4650      	mov	r0, sl
 8012d12:	eeb0 0a48 	vmov.f32	s0, s16
 8012d16:	eef0 0a68 	vmov.f32	s1, s17
 8012d1a:	f000 fef5 	bl	8013b08 <_dtoa_r>
 8012d1e:	9b08      	ldr	r3, [sp, #32]
 8012d20:	2b47      	cmp	r3, #71	; 0x47
 8012d22:	4680      	mov	r8, r0
 8012d24:	d106      	bne.n	8012d34 <_vfprintf_r+0x934>
 8012d26:	f01b 0f01 	tst.w	fp, #1
 8012d2a:	d103      	bne.n	8012d34 <_vfprintf_r+0x934>
 8012d2c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012d2e:	e66d      	b.n	8012a0c <_vfprintf_r+0x60c>
 8012d30:	9d04      	ldr	r5, [sp, #16]
 8012d32:	e7e3      	b.n	8012cfc <_vfprintf_r+0x8fc>
 8012d34:	9b08      	ldr	r3, [sp, #32]
 8012d36:	2b46      	cmp	r3, #70	; 0x46
 8012d38:	eb08 0605 	add.w	r6, r8, r5
 8012d3c:	d10f      	bne.n	8012d5e <_vfprintf_r+0x95e>
 8012d3e:	f898 3000 	ldrb.w	r3, [r8]
 8012d42:	2b30      	cmp	r3, #48	; 0x30
 8012d44:	d109      	bne.n	8012d5a <_vfprintf_r+0x95a>
 8012d46:	ec51 0b18 	vmov	r0, r1, d8
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	f7ed fee5 	bl	8000b1c <__aeabi_dcmpeq>
 8012d52:	b910      	cbnz	r0, 8012d5a <_vfprintf_r+0x95a>
 8012d54:	f1c5 0501 	rsb	r5, r5, #1
 8012d58:	951c      	str	r5, [sp, #112]	; 0x70
 8012d5a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012d5c:	441e      	add	r6, r3
 8012d5e:	ec51 0b18 	vmov	r0, r1, d8
 8012d62:	2200      	movs	r2, #0
 8012d64:	2300      	movs	r3, #0
 8012d66:	f7ed fed9 	bl	8000b1c <__aeabi_dcmpeq>
 8012d6a:	b100      	cbz	r0, 8012d6e <_vfprintf_r+0x96e>
 8012d6c:	9620      	str	r6, [sp, #128]	; 0x80
 8012d6e:	2230      	movs	r2, #48	; 0x30
 8012d70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012d72:	429e      	cmp	r6, r3
 8012d74:	d9da      	bls.n	8012d2c <_vfprintf_r+0x92c>
 8012d76:	1c59      	adds	r1, r3, #1
 8012d78:	9120      	str	r1, [sp, #128]	; 0x80
 8012d7a:	701a      	strb	r2, [r3, #0]
 8012d7c:	e7f8      	b.n	8012d70 <_vfprintf_r+0x970>
 8012d7e:	9b08      	ldr	r3, [sp, #32]
 8012d80:	2b46      	cmp	r3, #70	; 0x46
 8012d82:	f47f ae54 	bne.w	8012a2e <_vfprintf_r+0x62e>
 8012d86:	9a04      	ldr	r2, [sp, #16]
 8012d88:	f00b 0301 	and.w	r3, fp, #1
 8012d8c:	2d00      	cmp	r5, #0
 8012d8e:	ea43 0302 	orr.w	r3, r3, r2
 8012d92:	dd1a      	ble.n	8012dca <_vfprintf_r+0x9ca>
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d034      	beq.n	8012e02 <_vfprintf_r+0xa02>
 8012d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d9a:	18eb      	adds	r3, r5, r3
 8012d9c:	441a      	add	r2, r3
 8012d9e:	9204      	str	r2, [sp, #16]
 8012da0:	2366      	movs	r3, #102	; 0x66
 8012da2:	9306      	str	r3, [sp, #24]
 8012da4:	e033      	b.n	8012e0e <_vfprintf_r+0xa0e>
 8012da6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012daa:	f802 6b01 	strb.w	r6, [r2], #1
 8012dae:	e675      	b.n	8012a9c <_vfprintf_r+0x69c>
 8012db0:	b941      	cbnz	r1, 8012dc4 <_vfprintf_r+0x9c4>
 8012db2:	2230      	movs	r2, #48	; 0x30
 8012db4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8012db8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8012dbc:	3330      	adds	r3, #48	; 0x30
 8012dbe:	f802 3b01 	strb.w	r3, [r2], #1
 8012dc2:	e677      	b.n	8012ab4 <_vfprintf_r+0x6b4>
 8012dc4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8012dc8:	e7f8      	b.n	8012dbc <_vfprintf_r+0x9bc>
 8012dca:	b1e3      	cbz	r3, 8012e06 <_vfprintf_r+0xa06>
 8012dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dce:	9a04      	ldr	r2, [sp, #16]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	e7e3      	b.n	8012d9c <_vfprintf_r+0x99c>
 8012dd4:	9b05      	ldr	r3, [sp, #20]
 8012dd6:	42ab      	cmp	r3, r5
 8012dd8:	dc07      	bgt.n	8012dea <_vfprintf_r+0x9ea>
 8012dda:	f01b 0f01 	tst.w	fp, #1
 8012dde:	d02d      	beq.n	8012e3c <_vfprintf_r+0xa3c>
 8012de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012de2:	18eb      	adds	r3, r5, r3
 8012de4:	9304      	str	r3, [sp, #16]
 8012de6:	2367      	movs	r3, #103	; 0x67
 8012de8:	e7db      	b.n	8012da2 <_vfprintf_r+0x9a2>
 8012dea:	9b05      	ldr	r3, [sp, #20]
 8012dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012dee:	2d00      	cmp	r5, #0
 8012df0:	4413      	add	r3, r2
 8012df2:	9304      	str	r3, [sp, #16]
 8012df4:	dcf7      	bgt.n	8012de6 <_vfprintf_r+0x9e6>
 8012df6:	9a04      	ldr	r2, [sp, #16]
 8012df8:	f1c5 0301 	rsb	r3, r5, #1
 8012dfc:	441a      	add	r2, r3
 8012dfe:	9204      	str	r2, [sp, #16]
 8012e00:	e7f1      	b.n	8012de6 <_vfprintf_r+0x9e6>
 8012e02:	9504      	str	r5, [sp, #16]
 8012e04:	e7cc      	b.n	8012da0 <_vfprintf_r+0x9a0>
 8012e06:	2366      	movs	r3, #102	; 0x66
 8012e08:	9306      	str	r3, [sp, #24]
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	9304      	str	r3, [sp, #16]
 8012e0e:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8012e12:	9309      	str	r3, [sp, #36]	; 0x24
 8012e14:	d025      	beq.n	8012e62 <_vfprintf_r+0xa62>
 8012e16:	2300      	movs	r3, #0
 8012e18:	2d00      	cmp	r5, #0
 8012e1a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8012e1e:	f77f ae61 	ble.w	8012ae4 <_vfprintf_r+0x6e4>
 8012e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	2bff      	cmp	r3, #255	; 0xff
 8012e28:	d10a      	bne.n	8012e40 <_vfprintf_r+0xa40>
 8012e2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012e2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e30:	4413      	add	r3, r2
 8012e32:	9a04      	ldr	r2, [sp, #16]
 8012e34:	fb01 2303 	mla	r3, r1, r3, r2
 8012e38:	9304      	str	r3, [sp, #16]
 8012e3a:	e653      	b.n	8012ae4 <_vfprintf_r+0x6e4>
 8012e3c:	9504      	str	r5, [sp, #16]
 8012e3e:	e7d2      	b.n	8012de6 <_vfprintf_r+0x9e6>
 8012e40:	42ab      	cmp	r3, r5
 8012e42:	daf2      	bge.n	8012e2a <_vfprintf_r+0xa2a>
 8012e44:	1aed      	subs	r5, r5, r3
 8012e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e48:	785b      	ldrb	r3, [r3, #1]
 8012e4a:	b133      	cbz	r3, 8012e5a <_vfprintf_r+0xa5a>
 8012e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e4e:	3301      	adds	r3, #1
 8012e50:	9309      	str	r3, [sp, #36]	; 0x24
 8012e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e54:	3301      	adds	r3, #1
 8012e56:	930a      	str	r3, [sp, #40]	; 0x28
 8012e58:	e7e3      	b.n	8012e22 <_vfprintf_r+0xa22>
 8012e5a:	9b08      	ldr	r3, [sp, #32]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	9308      	str	r3, [sp, #32]
 8012e60:	e7df      	b.n	8012e22 <_vfprintf_r+0xa22>
 8012e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e64:	9308      	str	r3, [sp, #32]
 8012e66:	e63d      	b.n	8012ae4 <_vfprintf_r+0x6e4>
 8012e68:	1d33      	adds	r3, r6, #4
 8012e6a:	f01b 0f20 	tst.w	fp, #32
 8012e6e:	9307      	str	r3, [sp, #28]
 8012e70:	d00a      	beq.n	8012e88 <_vfprintf_r+0xa88>
 8012e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012e74:	6833      	ldr	r3, [r6, #0]
 8012e76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012e78:	17d2      	asrs	r2, r2, #31
 8012e7a:	e9c3 1200 	strd	r1, r2, [r3]
 8012e7e:	9e07      	ldr	r6, [sp, #28]
 8012e80:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012e84:	f7ff bb42 	b.w	801250c <_vfprintf_r+0x10c>
 8012e88:	f01b 0f10 	tst.w	fp, #16
 8012e8c:	d003      	beq.n	8012e96 <_vfprintf_r+0xa96>
 8012e8e:	6833      	ldr	r3, [r6, #0]
 8012e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012e92:	601a      	str	r2, [r3, #0]
 8012e94:	e7f3      	b.n	8012e7e <_vfprintf_r+0xa7e>
 8012e96:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8012e9a:	d003      	beq.n	8012ea4 <_vfprintf_r+0xaa4>
 8012e9c:	6833      	ldr	r3, [r6, #0]
 8012e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ea0:	801a      	strh	r2, [r3, #0]
 8012ea2:	e7ec      	b.n	8012e7e <_vfprintf_r+0xa7e>
 8012ea4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8012ea8:	d0f1      	beq.n	8012e8e <_vfprintf_r+0xa8e>
 8012eaa:	6833      	ldr	r3, [r6, #0]
 8012eac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012eae:	701a      	strb	r2, [r3, #0]
 8012eb0:	e7e5      	b.n	8012e7e <_vfprintf_r+0xa7e>
 8012eb2:	f04b 0b10 	orr.w	fp, fp, #16
 8012eb6:	f01b 0320 	ands.w	r3, fp, #32
 8012eba:	d01f      	beq.n	8012efc <_vfprintf_r+0xafc>
 8012ebc:	3607      	adds	r6, #7
 8012ebe:	f026 0307 	bic.w	r3, r6, #7
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	685d      	ldr	r5, [r3, #4]
 8012ec6:	f852 6b08 	ldr.w	r6, [r2], #8
 8012eca:	9207      	str	r2, [sp, #28]
 8012ecc:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8012ed8:	9a04      	ldr	r2, [sp, #16]
 8012eda:	3201      	adds	r2, #1
 8012edc:	f000 8495 	beq.w	801380a <_vfprintf_r+0x140a>
 8012ee0:	ea56 0205 	orrs.w	r2, r6, r5
 8012ee4:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8012ee8:	f040 8494 	bne.w	8013814 <_vfprintf_r+0x1414>
 8012eec:	9a04      	ldr	r2, [sp, #16]
 8012eee:	2a00      	cmp	r2, #0
 8012ef0:	f000 80fa 	beq.w	80130e8 <_vfprintf_r+0xce8>
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	f040 8490 	bne.w	801381a <_vfprintf_r+0x141a>
 8012efa:	e09f      	b.n	801303c <_vfprintf_r+0xc3c>
 8012efc:	4632      	mov	r2, r6
 8012efe:	f01b 0510 	ands.w	r5, fp, #16
 8012f02:	f852 6b04 	ldr.w	r6, [r2], #4
 8012f06:	9207      	str	r2, [sp, #28]
 8012f08:	d001      	beq.n	8012f0e <_vfprintf_r+0xb0e>
 8012f0a:	461d      	mov	r5, r3
 8012f0c:	e7de      	b.n	8012ecc <_vfprintf_r+0xacc>
 8012f0e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8012f12:	d001      	beq.n	8012f18 <_vfprintf_r+0xb18>
 8012f14:	b2b6      	uxth	r6, r6
 8012f16:	e7d9      	b.n	8012ecc <_vfprintf_r+0xacc>
 8012f18:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8012f1c:	d0d6      	beq.n	8012ecc <_vfprintf_r+0xacc>
 8012f1e:	b2f6      	uxtb	r6, r6
 8012f20:	e7f3      	b.n	8012f0a <_vfprintf_r+0xb0a>
 8012f22:	4633      	mov	r3, r6
 8012f24:	2278      	movs	r2, #120	; 0x78
 8012f26:	f853 6b04 	ldr.w	r6, [r3], #4
 8012f2a:	9307      	str	r3, [sp, #28]
 8012f2c:	2330      	movs	r3, #48	; 0x30
 8012f2e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8012f32:	4ba4      	ldr	r3, [pc, #656]	; (80131c4 <_vfprintf_r+0xdc4>)
 8012f34:	9316      	str	r3, [sp, #88]	; 0x58
 8012f36:	2500      	movs	r5, #0
 8012f38:	f04b 0b02 	orr.w	fp, fp, #2
 8012f3c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8012f40:	2302      	movs	r3, #2
 8012f42:	9206      	str	r2, [sp, #24]
 8012f44:	e7c5      	b.n	8012ed2 <_vfprintf_r+0xad2>
 8012f46:	4633      	mov	r3, r6
 8012f48:	2500      	movs	r5, #0
 8012f4a:	f853 8b04 	ldr.w	r8, [r3], #4
 8012f4e:	9307      	str	r3, [sp, #28]
 8012f50:	9b04      	ldr	r3, [sp, #16]
 8012f52:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8012f56:	1c5e      	adds	r6, r3, #1
 8012f58:	d010      	beq.n	8012f7c <_vfprintf_r+0xb7c>
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	4640      	mov	r0, r8
 8012f60:	f7ed f95e 	bl	8000220 <memchr>
 8012f64:	9003      	str	r0, [sp, #12]
 8012f66:	2800      	cmp	r0, #0
 8012f68:	f000 80d5 	beq.w	8013116 <_vfprintf_r+0xd16>
 8012f6c:	eba0 0308 	sub.w	r3, r0, r8
 8012f70:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8012f74:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8012f78:	462e      	mov	r6, r5
 8012f7a:	e5bb      	b.n	8012af4 <_vfprintf_r+0x6f4>
 8012f7c:	4640      	mov	r0, r8
 8012f7e:	f7ed f947 	bl	8000210 <strlen>
 8012f82:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8012f86:	e455      	b.n	8012834 <_vfprintf_r+0x434>
 8012f88:	f04b 0b10 	orr.w	fp, fp, #16
 8012f8c:	f01b 0320 	ands.w	r3, fp, #32
 8012f90:	d009      	beq.n	8012fa6 <_vfprintf_r+0xba6>
 8012f92:	3607      	adds	r6, #7
 8012f94:	f026 0307 	bic.w	r3, r6, #7
 8012f98:	461a      	mov	r2, r3
 8012f9a:	685d      	ldr	r5, [r3, #4]
 8012f9c:	f852 6b08 	ldr.w	r6, [r2], #8
 8012fa0:	9207      	str	r2, [sp, #28]
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	e795      	b.n	8012ed2 <_vfprintf_r+0xad2>
 8012fa6:	4632      	mov	r2, r6
 8012fa8:	f01b 0510 	ands.w	r5, fp, #16
 8012fac:	f852 6b04 	ldr.w	r6, [r2], #4
 8012fb0:	9207      	str	r2, [sp, #28]
 8012fb2:	d001      	beq.n	8012fb8 <_vfprintf_r+0xbb8>
 8012fb4:	461d      	mov	r5, r3
 8012fb6:	e7f4      	b.n	8012fa2 <_vfprintf_r+0xba2>
 8012fb8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8012fbc:	d001      	beq.n	8012fc2 <_vfprintf_r+0xbc2>
 8012fbe:	b2b6      	uxth	r6, r6
 8012fc0:	e7ef      	b.n	8012fa2 <_vfprintf_r+0xba2>
 8012fc2:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8012fc6:	d0ec      	beq.n	8012fa2 <_vfprintf_r+0xba2>
 8012fc8:	b2f6      	uxtb	r6, r6
 8012fca:	e7f3      	b.n	8012fb4 <_vfprintf_r+0xbb4>
 8012fcc:	4b7e      	ldr	r3, [pc, #504]	; (80131c8 <_vfprintf_r+0xdc8>)
 8012fce:	9316      	str	r3, [sp, #88]	; 0x58
 8012fd0:	f01b 0320 	ands.w	r3, fp, #32
 8012fd4:	d01b      	beq.n	801300e <_vfprintf_r+0xc0e>
 8012fd6:	3607      	adds	r6, #7
 8012fd8:	f026 0307 	bic.w	r3, r6, #7
 8012fdc:	461a      	mov	r2, r3
 8012fde:	685d      	ldr	r5, [r3, #4]
 8012fe0:	f852 6b08 	ldr.w	r6, [r2], #8
 8012fe4:	9207      	str	r2, [sp, #28]
 8012fe6:	f01b 0f01 	tst.w	fp, #1
 8012fea:	d00a      	beq.n	8013002 <_vfprintf_r+0xc02>
 8012fec:	ea56 0305 	orrs.w	r3, r6, r5
 8012ff0:	d007      	beq.n	8013002 <_vfprintf_r+0xc02>
 8012ff2:	2330      	movs	r3, #48	; 0x30
 8012ff4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8012ff8:	9b06      	ldr	r3, [sp, #24]
 8012ffa:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8012ffe:	f04b 0b02 	orr.w	fp, fp, #2
 8013002:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8013006:	2302      	movs	r3, #2
 8013008:	e763      	b.n	8012ed2 <_vfprintf_r+0xad2>
 801300a:	4b6e      	ldr	r3, [pc, #440]	; (80131c4 <_vfprintf_r+0xdc4>)
 801300c:	e7df      	b.n	8012fce <_vfprintf_r+0xbce>
 801300e:	4632      	mov	r2, r6
 8013010:	f01b 0510 	ands.w	r5, fp, #16
 8013014:	f852 6b04 	ldr.w	r6, [r2], #4
 8013018:	9207      	str	r2, [sp, #28]
 801301a:	d001      	beq.n	8013020 <_vfprintf_r+0xc20>
 801301c:	461d      	mov	r5, r3
 801301e:	e7e2      	b.n	8012fe6 <_vfprintf_r+0xbe6>
 8013020:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8013024:	d001      	beq.n	801302a <_vfprintf_r+0xc2a>
 8013026:	b2b6      	uxth	r6, r6
 8013028:	e7dd      	b.n	8012fe6 <_vfprintf_r+0xbe6>
 801302a:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801302e:	d0da      	beq.n	8012fe6 <_vfprintf_r+0xbe6>
 8013030:	b2f6      	uxtb	r6, r6
 8013032:	e7f3      	b.n	801301c <_vfprintf_r+0xc1c>
 8013034:	2e0a      	cmp	r6, #10
 8013036:	f175 0300 	sbcs.w	r3, r5, #0
 801303a:	d206      	bcs.n	801304a <_vfprintf_r+0xc4a>
 801303c:	3630      	adds	r6, #48	; 0x30
 801303e:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8013042:	f20d 1837 	addw	r8, sp, #311	; 0x137
 8013046:	f000 bc03 	b.w	8013850 <_vfprintf_r+0x1450>
 801304a:	2300      	movs	r3, #0
 801304c:	9305      	str	r3, [sp, #20]
 801304e:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8013052:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8013056:	9303      	str	r3, [sp, #12]
 8013058:	220a      	movs	r2, #10
 801305a:	2300      	movs	r3, #0
 801305c:	4630      	mov	r0, r6
 801305e:	4629      	mov	r1, r5
 8013060:	f7ed fe1c 	bl	8000c9c <__aeabi_uldivmod>
 8013064:	9b05      	ldr	r3, [sp, #20]
 8013066:	3301      	adds	r3, #1
 8013068:	9305      	str	r3, [sp, #20]
 801306a:	9b03      	ldr	r3, [sp, #12]
 801306c:	3230      	adds	r2, #48	; 0x30
 801306e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8013072:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8013076:	b1d3      	cbz	r3, 80130ae <_vfprintf_r+0xcae>
 8013078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801307a:	9a05      	ldr	r2, [sp, #20]
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	429a      	cmp	r2, r3
 8013080:	d115      	bne.n	80130ae <_vfprintf_r+0xcae>
 8013082:	2aff      	cmp	r2, #255	; 0xff
 8013084:	d013      	beq.n	80130ae <_vfprintf_r+0xcae>
 8013086:	2e0a      	cmp	r6, #10
 8013088:	f175 0300 	sbcs.w	r3, r5, #0
 801308c:	d30f      	bcc.n	80130ae <_vfprintf_r+0xcae>
 801308e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013090:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013092:	eba8 0803 	sub.w	r8, r8, r3
 8013096:	461a      	mov	r2, r3
 8013098:	4640      	mov	r0, r8
 801309a:	f002 fd34 	bl	8015b06 <strncpy>
 801309e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130a0:	785b      	ldrb	r3, [r3, #1]
 80130a2:	b11b      	cbz	r3, 80130ac <_vfprintf_r+0xcac>
 80130a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130a6:	3301      	adds	r3, #1
 80130a8:	930a      	str	r3, [sp, #40]	; 0x28
 80130aa:	2300      	movs	r3, #0
 80130ac:	9305      	str	r3, [sp, #20]
 80130ae:	2300      	movs	r3, #0
 80130b0:	220a      	movs	r2, #10
 80130b2:	4630      	mov	r0, r6
 80130b4:	4629      	mov	r1, r5
 80130b6:	f7ed fdf1 	bl	8000c9c <__aeabi_uldivmod>
 80130ba:	2e0a      	cmp	r6, #10
 80130bc:	f175 0300 	sbcs.w	r3, r5, #0
 80130c0:	f0c0 83c6 	bcc.w	8013850 <_vfprintf_r+0x1450>
 80130c4:	4606      	mov	r6, r0
 80130c6:	460d      	mov	r5, r1
 80130c8:	46c3      	mov	fp, r8
 80130ca:	e7c5      	b.n	8013058 <_vfprintf_r+0xc58>
 80130cc:	f006 030f 	and.w	r3, r6, #15
 80130d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80130d2:	0936      	lsrs	r6, r6, #4
 80130d4:	5cd3      	ldrb	r3, [r2, r3]
 80130d6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80130da:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80130de:	092d      	lsrs	r5, r5, #4
 80130e0:	ea56 0305 	orrs.w	r3, r6, r5
 80130e4:	d1f2      	bne.n	80130cc <_vfprintf_r+0xccc>
 80130e6:	e3b3      	b.n	8013850 <_vfprintf_r+0x1450>
 80130e8:	b933      	cbnz	r3, 80130f8 <_vfprintf_r+0xcf8>
 80130ea:	f01b 0f01 	tst.w	fp, #1
 80130ee:	d003      	beq.n	80130f8 <_vfprintf_r+0xcf8>
 80130f0:	2330      	movs	r3, #48	; 0x30
 80130f2:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80130f6:	e7a4      	b.n	8013042 <_vfprintf_r+0xc42>
 80130f8:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 80130fc:	e3a8      	b.n	8013850 <_vfprintf_r+0x1450>
 80130fe:	9b06      	ldr	r3, [sp, #24]
 8013100:	2b00      	cmp	r3, #0
 8013102:	f000 8373 	beq.w	80137ec <_vfprintf_r+0x13ec>
 8013106:	2000      	movs	r0, #0
 8013108:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801310c:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8013110:	9607      	str	r6, [sp, #28]
 8013112:	f7ff bb1e 	b.w	8012752 <_vfprintf_r+0x352>
 8013116:	9e03      	ldr	r6, [sp, #12]
 8013118:	f7ff bb8d 	b.w	8012836 <_vfprintf_r+0x436>
 801311c:	2010      	movs	r0, #16
 801311e:	4402      	add	r2, r0
 8013120:	2b07      	cmp	r3, #7
 8013122:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8013126:	6060      	str	r0, [r4, #4]
 8013128:	dd08      	ble.n	801313c <_vfprintf_r+0xd3c>
 801312a:	aa22      	add	r2, sp, #136	; 0x88
 801312c:	4649      	mov	r1, r9
 801312e:	4650      	mov	r0, sl
 8013130:	f003 fe37 	bl	8016da2 <__sprint_r>
 8013134:	2800      	cmp	r0, #0
 8013136:	f040 8337 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801313a:	a925      	add	r1, sp, #148	; 0x94
 801313c:	3f10      	subs	r7, #16
 801313e:	460c      	mov	r4, r1
 8013140:	e4f3      	b.n	8012b2a <_vfprintf_r+0x72a>
 8013142:	460c      	mov	r4, r1
 8013144:	e50c      	b.n	8012b60 <_vfprintf_r+0x760>
 8013146:	aa22      	add	r2, sp, #136	; 0x88
 8013148:	4649      	mov	r1, r9
 801314a:	4650      	mov	r0, sl
 801314c:	f003 fe29 	bl	8016da2 <__sprint_r>
 8013150:	2800      	cmp	r0, #0
 8013152:	f040 8329 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8013156:	ac25      	add	r4, sp, #148	; 0x94
 8013158:	e514      	b.n	8012b84 <_vfprintf_r+0x784>
 801315a:	aa22      	add	r2, sp, #136	; 0x88
 801315c:	4649      	mov	r1, r9
 801315e:	4650      	mov	r0, sl
 8013160:	f003 fe1f 	bl	8016da2 <__sprint_r>
 8013164:	2800      	cmp	r0, #0
 8013166:	f040 831f 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801316a:	ac25      	add	r4, sp, #148	; 0x94
 801316c:	e51a      	b.n	8012ba4 <_vfprintf_r+0x7a4>
 801316e:	2010      	movs	r0, #16
 8013170:	4402      	add	r2, r0
 8013172:	2b07      	cmp	r3, #7
 8013174:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8013178:	6060      	str	r0, [r4, #4]
 801317a:	dd08      	ble.n	801318e <_vfprintf_r+0xd8e>
 801317c:	aa22      	add	r2, sp, #136	; 0x88
 801317e:	4649      	mov	r1, r9
 8013180:	4650      	mov	r0, sl
 8013182:	f003 fe0e 	bl	8016da2 <__sprint_r>
 8013186:	2800      	cmp	r0, #0
 8013188:	f040 830e 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801318c:	a925      	add	r1, sp, #148	; 0x94
 801318e:	3f10      	subs	r7, #16
 8013190:	460c      	mov	r4, r1
 8013192:	e50f      	b.n	8012bb4 <_vfprintf_r+0x7b4>
 8013194:	460c      	mov	r4, r1
 8013196:	e528      	b.n	8012bea <_vfprintf_r+0x7ea>
 8013198:	2010      	movs	r0, #16
 801319a:	4402      	add	r2, r0
 801319c:	2b07      	cmp	r3, #7
 801319e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80131a2:	6060      	str	r0, [r4, #4]
 80131a4:	dd08      	ble.n	80131b8 <_vfprintf_r+0xdb8>
 80131a6:	aa22      	add	r2, sp, #136	; 0x88
 80131a8:	4649      	mov	r1, r9
 80131aa:	4650      	mov	r0, sl
 80131ac:	f003 fdf9 	bl	8016da2 <__sprint_r>
 80131b0:	2800      	cmp	r0, #0
 80131b2:	f040 82f9 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80131b6:	a925      	add	r1, sp, #148	; 0x94
 80131b8:	3e10      	subs	r6, #16
 80131ba:	460c      	mov	r4, r1
 80131bc:	e528      	b.n	8012c10 <_vfprintf_r+0x810>
 80131be:	460c      	mov	r4, r1
 80131c0:	e540      	b.n	8012c44 <_vfprintf_r+0x844>
 80131c2:	bf00      	nop
 80131c4:	0801b334 	.word	0x0801b334
 80131c8:	0801b345 	.word	0x0801b345
 80131cc:	9b06      	ldr	r3, [sp, #24]
 80131ce:	2b65      	cmp	r3, #101	; 0x65
 80131d0:	f340 8232 	ble.w	8013638 <_vfprintf_r+0x1238>
 80131d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80131d8:	2200      	movs	r2, #0
 80131da:	2300      	movs	r3, #0
 80131dc:	f7ed fc9e 	bl	8000b1c <__aeabi_dcmpeq>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d068      	beq.n	80132b6 <_vfprintf_r+0xeb6>
 80131e4:	4b6d      	ldr	r3, [pc, #436]	; (801339c <_vfprintf_r+0xf9c>)
 80131e6:	6023      	str	r3, [r4, #0]
 80131e8:	2301      	movs	r3, #1
 80131ea:	441e      	add	r6, r3
 80131ec:	6063      	str	r3, [r4, #4]
 80131ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80131f0:	9624      	str	r6, [sp, #144]	; 0x90
 80131f2:	3301      	adds	r3, #1
 80131f4:	2b07      	cmp	r3, #7
 80131f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80131f8:	dc37      	bgt.n	801326a <_vfprintf_r+0xe6a>
 80131fa:	3408      	adds	r4, #8
 80131fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80131fe:	9a05      	ldr	r2, [sp, #20]
 8013200:	4293      	cmp	r3, r2
 8013202:	db03      	blt.n	801320c <_vfprintf_r+0xe0c>
 8013204:	f01b 0f01 	tst.w	fp, #1
 8013208:	f43f ad2e 	beq.w	8012c68 <_vfprintf_r+0x868>
 801320c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801320e:	6023      	str	r3, [r4, #0]
 8013210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013214:	6063      	str	r3, [r4, #4]
 8013216:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013218:	4413      	add	r3, r2
 801321a:	9324      	str	r3, [sp, #144]	; 0x90
 801321c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801321e:	3301      	adds	r3, #1
 8013220:	2b07      	cmp	r3, #7
 8013222:	9323      	str	r3, [sp, #140]	; 0x8c
 8013224:	dc2b      	bgt.n	801327e <_vfprintf_r+0xe7e>
 8013226:	3408      	adds	r4, #8
 8013228:	9b05      	ldr	r3, [sp, #20]
 801322a:	1e5d      	subs	r5, r3, #1
 801322c:	2d00      	cmp	r5, #0
 801322e:	f77f ad1b 	ble.w	8012c68 <_vfprintf_r+0x868>
 8013232:	4e5b      	ldr	r6, [pc, #364]	; (80133a0 <_vfprintf_r+0xfa0>)
 8013234:	2710      	movs	r7, #16
 8013236:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801323a:	2d10      	cmp	r5, #16
 801323c:	f103 0301 	add.w	r3, r3, #1
 8013240:	f104 0108 	add.w	r1, r4, #8
 8013244:	6026      	str	r6, [r4, #0]
 8013246:	dc24      	bgt.n	8013292 <_vfprintf_r+0xe92>
 8013248:	442a      	add	r2, r5
 801324a:	6065      	str	r5, [r4, #4]
 801324c:	9224      	str	r2, [sp, #144]	; 0x90
 801324e:	2b07      	cmp	r3, #7
 8013250:	9323      	str	r3, [sp, #140]	; 0x8c
 8013252:	f340 8288 	ble.w	8013766 <_vfprintf_r+0x1366>
 8013256:	aa22      	add	r2, sp, #136	; 0x88
 8013258:	4649      	mov	r1, r9
 801325a:	4650      	mov	r0, sl
 801325c:	f003 fda1 	bl	8016da2 <__sprint_r>
 8013260:	2800      	cmp	r0, #0
 8013262:	f040 82a1 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8013266:	ac25      	add	r4, sp, #148	; 0x94
 8013268:	e4fe      	b.n	8012c68 <_vfprintf_r+0x868>
 801326a:	aa22      	add	r2, sp, #136	; 0x88
 801326c:	4649      	mov	r1, r9
 801326e:	4650      	mov	r0, sl
 8013270:	f003 fd97 	bl	8016da2 <__sprint_r>
 8013274:	2800      	cmp	r0, #0
 8013276:	f040 8297 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801327a:	ac25      	add	r4, sp, #148	; 0x94
 801327c:	e7be      	b.n	80131fc <_vfprintf_r+0xdfc>
 801327e:	aa22      	add	r2, sp, #136	; 0x88
 8013280:	4649      	mov	r1, r9
 8013282:	4650      	mov	r0, sl
 8013284:	f003 fd8d 	bl	8016da2 <__sprint_r>
 8013288:	2800      	cmp	r0, #0
 801328a:	f040 828d 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801328e:	ac25      	add	r4, sp, #148	; 0x94
 8013290:	e7ca      	b.n	8013228 <_vfprintf_r+0xe28>
 8013292:	3210      	adds	r2, #16
 8013294:	2b07      	cmp	r3, #7
 8013296:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801329a:	6067      	str	r7, [r4, #4]
 801329c:	dd08      	ble.n	80132b0 <_vfprintf_r+0xeb0>
 801329e:	aa22      	add	r2, sp, #136	; 0x88
 80132a0:	4649      	mov	r1, r9
 80132a2:	4650      	mov	r0, sl
 80132a4:	f003 fd7d 	bl	8016da2 <__sprint_r>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	f040 827d 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80132ae:	a925      	add	r1, sp, #148	; 0x94
 80132b0:	3d10      	subs	r5, #16
 80132b2:	460c      	mov	r4, r1
 80132b4:	e7bf      	b.n	8013236 <_vfprintf_r+0xe36>
 80132b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	dc73      	bgt.n	80133a4 <_vfprintf_r+0xfa4>
 80132bc:	4b37      	ldr	r3, [pc, #220]	; (801339c <_vfprintf_r+0xf9c>)
 80132be:	6023      	str	r3, [r4, #0]
 80132c0:	2301      	movs	r3, #1
 80132c2:	441e      	add	r6, r3
 80132c4:	6063      	str	r3, [r4, #4]
 80132c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80132c8:	9624      	str	r6, [sp, #144]	; 0x90
 80132ca:	3301      	adds	r3, #1
 80132cc:	2b07      	cmp	r3, #7
 80132ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80132d0:	dc3d      	bgt.n	801334e <_vfprintf_r+0xf4e>
 80132d2:	3408      	adds	r4, #8
 80132d4:	9905      	ldr	r1, [sp, #20]
 80132d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80132d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80132da:	430a      	orrs	r2, r1
 80132dc:	f00b 0101 	and.w	r1, fp, #1
 80132e0:	430a      	orrs	r2, r1
 80132e2:	f43f acc1 	beq.w	8012c68 <_vfprintf_r+0x868>
 80132e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80132e8:	6022      	str	r2, [r4, #0]
 80132ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80132ec:	6062      	str	r2, [r4, #4]
 80132ee:	4413      	add	r3, r2
 80132f0:	9324      	str	r3, [sp, #144]	; 0x90
 80132f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80132f4:	3301      	adds	r3, #1
 80132f6:	2b07      	cmp	r3, #7
 80132f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80132fa:	dc32      	bgt.n	8013362 <_vfprintf_r+0xf62>
 80132fc:	3408      	adds	r4, #8
 80132fe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8013300:	2d00      	cmp	r5, #0
 8013302:	da1b      	bge.n	801333c <_vfprintf_r+0xf3c>
 8013304:	4e26      	ldr	r6, [pc, #152]	; (80133a0 <_vfprintf_r+0xfa0>)
 8013306:	426d      	negs	r5, r5
 8013308:	4623      	mov	r3, r4
 801330a:	2710      	movs	r7, #16
 801330c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8013310:	2d10      	cmp	r5, #16
 8013312:	f102 0201 	add.w	r2, r2, #1
 8013316:	f104 0408 	add.w	r4, r4, #8
 801331a:	601e      	str	r6, [r3, #0]
 801331c:	dc2b      	bgt.n	8013376 <_vfprintf_r+0xf76>
 801331e:	605d      	str	r5, [r3, #4]
 8013320:	2a07      	cmp	r2, #7
 8013322:	440d      	add	r5, r1
 8013324:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8013328:	dd08      	ble.n	801333c <_vfprintf_r+0xf3c>
 801332a:	aa22      	add	r2, sp, #136	; 0x88
 801332c:	4649      	mov	r1, r9
 801332e:	4650      	mov	r0, sl
 8013330:	f003 fd37 	bl	8016da2 <__sprint_r>
 8013334:	2800      	cmp	r0, #0
 8013336:	f040 8237 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801333a:	ac25      	add	r4, sp, #148	; 0x94
 801333c:	9b05      	ldr	r3, [sp, #20]
 801333e:	9a05      	ldr	r2, [sp, #20]
 8013340:	6063      	str	r3, [r4, #4]
 8013342:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013344:	f8c4 8000 	str.w	r8, [r4]
 8013348:	4413      	add	r3, r2
 801334a:	9324      	str	r3, [sp, #144]	; 0x90
 801334c:	e485      	b.n	8012c5a <_vfprintf_r+0x85a>
 801334e:	aa22      	add	r2, sp, #136	; 0x88
 8013350:	4649      	mov	r1, r9
 8013352:	4650      	mov	r0, sl
 8013354:	f003 fd25 	bl	8016da2 <__sprint_r>
 8013358:	2800      	cmp	r0, #0
 801335a:	f040 8225 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801335e:	ac25      	add	r4, sp, #148	; 0x94
 8013360:	e7b8      	b.n	80132d4 <_vfprintf_r+0xed4>
 8013362:	aa22      	add	r2, sp, #136	; 0x88
 8013364:	4649      	mov	r1, r9
 8013366:	4650      	mov	r0, sl
 8013368:	f003 fd1b 	bl	8016da2 <__sprint_r>
 801336c:	2800      	cmp	r0, #0
 801336e:	f040 821b 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8013372:	ac25      	add	r4, sp, #148	; 0x94
 8013374:	e7c3      	b.n	80132fe <_vfprintf_r+0xefe>
 8013376:	3110      	adds	r1, #16
 8013378:	2a07      	cmp	r2, #7
 801337a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801337e:	605f      	str	r7, [r3, #4]
 8013380:	dd08      	ble.n	8013394 <_vfprintf_r+0xf94>
 8013382:	aa22      	add	r2, sp, #136	; 0x88
 8013384:	4649      	mov	r1, r9
 8013386:	4650      	mov	r0, sl
 8013388:	f003 fd0b 	bl	8016da2 <__sprint_r>
 801338c:	2800      	cmp	r0, #0
 801338e:	f040 820b 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8013392:	ac25      	add	r4, sp, #148	; 0x94
 8013394:	3d10      	subs	r5, #16
 8013396:	4623      	mov	r3, r4
 8013398:	e7b8      	b.n	801330c <_vfprintf_r+0xf0c>
 801339a:	bf00      	nop
 801339c:	0801b356 	.word	0x0801b356
 80133a0:	0801b3c4 	.word	0x0801b3c4
 80133a4:	9f05      	ldr	r7, [sp, #20]
 80133a6:	42af      	cmp	r7, r5
 80133a8:	bfa8      	it	ge
 80133aa:	462f      	movge	r7, r5
 80133ac:	2f00      	cmp	r7, #0
 80133ae:	dd09      	ble.n	80133c4 <_vfprintf_r+0xfc4>
 80133b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80133b2:	3301      	adds	r3, #1
 80133b4:	443e      	add	r6, r7
 80133b6:	2b07      	cmp	r3, #7
 80133b8:	e9c4 8700 	strd	r8, r7, [r4]
 80133bc:	9624      	str	r6, [sp, #144]	; 0x90
 80133be:	9323      	str	r3, [sp, #140]	; 0x8c
 80133c0:	dc75      	bgt.n	80134ae <_vfprintf_r+0x10ae>
 80133c2:	3408      	adds	r4, #8
 80133c4:	2f00      	cmp	r7, #0
 80133c6:	bfac      	ite	ge
 80133c8:	1bee      	subge	r6, r5, r7
 80133ca:	462e      	movlt	r6, r5
 80133cc:	2e00      	cmp	r6, #0
 80133ce:	dd18      	ble.n	8013402 <_vfprintf_r+0x1002>
 80133d0:	4f98      	ldr	r7, [pc, #608]	; (8013634 <_vfprintf_r+0x1234>)
 80133d2:	6027      	str	r7, [r4, #0]
 80133d4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80133d8:	2e10      	cmp	r6, #16
 80133da:	f103 0301 	add.w	r3, r3, #1
 80133de:	f104 0108 	add.w	r1, r4, #8
 80133e2:	dc6e      	bgt.n	80134c2 <_vfprintf_r+0x10c2>
 80133e4:	6066      	str	r6, [r4, #4]
 80133e6:	2b07      	cmp	r3, #7
 80133e8:	4416      	add	r6, r2
 80133ea:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80133ee:	dd7b      	ble.n	80134e8 <_vfprintf_r+0x10e8>
 80133f0:	aa22      	add	r2, sp, #136	; 0x88
 80133f2:	4649      	mov	r1, r9
 80133f4:	4650      	mov	r0, sl
 80133f6:	f003 fcd4 	bl	8016da2 <__sprint_r>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	f040 81d4 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8013400:	ac25      	add	r4, sp, #148	; 0x94
 8013402:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8013406:	4445      	add	r5, r8
 8013408:	d00a      	beq.n	8013420 <_vfprintf_r+0x1020>
 801340a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801340c:	2b00      	cmp	r3, #0
 801340e:	d16d      	bne.n	80134ec <_vfprintf_r+0x10ec>
 8013410:	9b08      	ldr	r3, [sp, #32]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d16d      	bne.n	80134f2 <_vfprintf_r+0x10f2>
 8013416:	9b05      	ldr	r3, [sp, #20]
 8013418:	4443      	add	r3, r8
 801341a:	429d      	cmp	r5, r3
 801341c:	bf28      	it	cs
 801341e:	461d      	movcs	r5, r3
 8013420:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013422:	9a05      	ldr	r2, [sp, #20]
 8013424:	4293      	cmp	r3, r2
 8013426:	db02      	blt.n	801342e <_vfprintf_r+0x102e>
 8013428:	f01b 0f01 	tst.w	fp, #1
 801342c:	d00e      	beq.n	801344c <_vfprintf_r+0x104c>
 801342e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013430:	6023      	str	r3, [r4, #0]
 8013432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013436:	6063      	str	r3, [r4, #4]
 8013438:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801343a:	4413      	add	r3, r2
 801343c:	9324      	str	r3, [sp, #144]	; 0x90
 801343e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013440:	3301      	adds	r3, #1
 8013442:	2b07      	cmp	r3, #7
 8013444:	9323      	str	r3, [sp, #140]	; 0x8c
 8013446:	f300 80cf 	bgt.w	80135e8 <_vfprintf_r+0x11e8>
 801344a:	3408      	adds	r4, #8
 801344c:	9b05      	ldr	r3, [sp, #20]
 801344e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8013450:	eb08 0203 	add.w	r2, r8, r3
 8013454:	1b9e      	subs	r6, r3, r6
 8013456:	1b52      	subs	r2, r2, r5
 8013458:	4296      	cmp	r6, r2
 801345a:	bfa8      	it	ge
 801345c:	4616      	movge	r6, r2
 801345e:	2e00      	cmp	r6, #0
 8013460:	dd0b      	ble.n	801347a <_vfprintf_r+0x107a>
 8013462:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013464:	4433      	add	r3, r6
 8013466:	9324      	str	r3, [sp, #144]	; 0x90
 8013468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801346a:	3301      	adds	r3, #1
 801346c:	2b07      	cmp	r3, #7
 801346e:	e9c4 5600 	strd	r5, r6, [r4]
 8013472:	9323      	str	r3, [sp, #140]	; 0x8c
 8013474:	f300 80c2 	bgt.w	80135fc <_vfprintf_r+0x11fc>
 8013478:	3408      	adds	r4, #8
 801347a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801347c:	9b05      	ldr	r3, [sp, #20]
 801347e:	2e00      	cmp	r6, #0
 8013480:	eba3 0505 	sub.w	r5, r3, r5
 8013484:	bfa8      	it	ge
 8013486:	1bad      	subge	r5, r5, r6
 8013488:	2d00      	cmp	r5, #0
 801348a:	f77f abed 	ble.w	8012c68 <_vfprintf_r+0x868>
 801348e:	4e69      	ldr	r6, [pc, #420]	; (8013634 <_vfprintf_r+0x1234>)
 8013490:	2710      	movs	r7, #16
 8013492:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8013496:	2d10      	cmp	r5, #16
 8013498:	f103 0301 	add.w	r3, r3, #1
 801349c:	f104 0108 	add.w	r1, r4, #8
 80134a0:	6026      	str	r6, [r4, #0]
 80134a2:	f300 80b5 	bgt.w	8013610 <_vfprintf_r+0x1210>
 80134a6:	6065      	str	r5, [r4, #4]
 80134a8:	4415      	add	r5, r2
 80134aa:	9524      	str	r5, [sp, #144]	; 0x90
 80134ac:	e6cf      	b.n	801324e <_vfprintf_r+0xe4e>
 80134ae:	aa22      	add	r2, sp, #136	; 0x88
 80134b0:	4649      	mov	r1, r9
 80134b2:	4650      	mov	r0, sl
 80134b4:	f003 fc75 	bl	8016da2 <__sprint_r>
 80134b8:	2800      	cmp	r0, #0
 80134ba:	f040 8175 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80134be:	ac25      	add	r4, sp, #148	; 0x94
 80134c0:	e780      	b.n	80133c4 <_vfprintf_r+0xfc4>
 80134c2:	2010      	movs	r0, #16
 80134c4:	4402      	add	r2, r0
 80134c6:	2b07      	cmp	r3, #7
 80134c8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80134cc:	6060      	str	r0, [r4, #4]
 80134ce:	dd08      	ble.n	80134e2 <_vfprintf_r+0x10e2>
 80134d0:	aa22      	add	r2, sp, #136	; 0x88
 80134d2:	4649      	mov	r1, r9
 80134d4:	4650      	mov	r0, sl
 80134d6:	f003 fc64 	bl	8016da2 <__sprint_r>
 80134da:	2800      	cmp	r0, #0
 80134dc:	f040 8164 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80134e0:	a925      	add	r1, sp, #148	; 0x94
 80134e2:	3e10      	subs	r6, #16
 80134e4:	460c      	mov	r4, r1
 80134e6:	e774      	b.n	80133d2 <_vfprintf_r+0xfd2>
 80134e8:	460c      	mov	r4, r1
 80134ea:	e78a      	b.n	8013402 <_vfprintf_r+0x1002>
 80134ec:	9b08      	ldr	r3, [sp, #32]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d04a      	beq.n	8013588 <_vfprintf_r+0x1188>
 80134f2:	9b08      	ldr	r3, [sp, #32]
 80134f4:	3b01      	subs	r3, #1
 80134f6:	9308      	str	r3, [sp, #32]
 80134f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134fa:	6023      	str	r3, [r4, #0]
 80134fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80134fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013500:	6063      	str	r3, [r4, #4]
 8013502:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013504:	4413      	add	r3, r2
 8013506:	9324      	str	r3, [sp, #144]	; 0x90
 8013508:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801350a:	3301      	adds	r3, #1
 801350c:	2b07      	cmp	r3, #7
 801350e:	9323      	str	r3, [sp, #140]	; 0x8c
 8013510:	dc41      	bgt.n	8013596 <_vfprintf_r+0x1196>
 8013512:	3408      	adds	r4, #8
 8013514:	9b05      	ldr	r3, [sp, #20]
 8013516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013518:	eb08 0703 	add.w	r7, r8, r3
 801351c:	1b7b      	subs	r3, r7, r5
 801351e:	7817      	ldrb	r7, [r2, #0]
 8013520:	429f      	cmp	r7, r3
 8013522:	bfa8      	it	ge
 8013524:	461f      	movge	r7, r3
 8013526:	2f00      	cmp	r7, #0
 8013528:	dd0a      	ble.n	8013540 <_vfprintf_r+0x1140>
 801352a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801352c:	443b      	add	r3, r7
 801352e:	9324      	str	r3, [sp, #144]	; 0x90
 8013530:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013532:	3301      	adds	r3, #1
 8013534:	2b07      	cmp	r3, #7
 8013536:	e9c4 5700 	strd	r5, r7, [r4]
 801353a:	9323      	str	r3, [sp, #140]	; 0x8c
 801353c:	dc35      	bgt.n	80135aa <_vfprintf_r+0x11aa>
 801353e:	3408      	adds	r4, #8
 8013540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013542:	781e      	ldrb	r6, [r3, #0]
 8013544:	2f00      	cmp	r7, #0
 8013546:	bfa8      	it	ge
 8013548:	1bf6      	subge	r6, r6, r7
 801354a:	2e00      	cmp	r6, #0
 801354c:	dd18      	ble.n	8013580 <_vfprintf_r+0x1180>
 801354e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8013552:	4838      	ldr	r0, [pc, #224]	; (8013634 <_vfprintf_r+0x1234>)
 8013554:	6020      	str	r0, [r4, #0]
 8013556:	2e10      	cmp	r6, #16
 8013558:	f103 0301 	add.w	r3, r3, #1
 801355c:	f104 0108 	add.w	r1, r4, #8
 8013560:	dc2d      	bgt.n	80135be <_vfprintf_r+0x11be>
 8013562:	6066      	str	r6, [r4, #4]
 8013564:	2b07      	cmp	r3, #7
 8013566:	4416      	add	r6, r2
 8013568:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801356c:	dd3a      	ble.n	80135e4 <_vfprintf_r+0x11e4>
 801356e:	aa22      	add	r2, sp, #136	; 0x88
 8013570:	4649      	mov	r1, r9
 8013572:	4650      	mov	r0, sl
 8013574:	f003 fc15 	bl	8016da2 <__sprint_r>
 8013578:	2800      	cmp	r0, #0
 801357a:	f040 8115 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801357e:	ac25      	add	r4, sp, #148	; 0x94
 8013580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	441d      	add	r5, r3
 8013586:	e740      	b.n	801340a <_vfprintf_r+0x100a>
 8013588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801358a:	3b01      	subs	r3, #1
 801358c:	930a      	str	r3, [sp, #40]	; 0x28
 801358e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013590:	3b01      	subs	r3, #1
 8013592:	9309      	str	r3, [sp, #36]	; 0x24
 8013594:	e7b0      	b.n	80134f8 <_vfprintf_r+0x10f8>
 8013596:	aa22      	add	r2, sp, #136	; 0x88
 8013598:	4649      	mov	r1, r9
 801359a:	4650      	mov	r0, sl
 801359c:	f003 fc01 	bl	8016da2 <__sprint_r>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	f040 8101 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80135a6:	ac25      	add	r4, sp, #148	; 0x94
 80135a8:	e7b4      	b.n	8013514 <_vfprintf_r+0x1114>
 80135aa:	aa22      	add	r2, sp, #136	; 0x88
 80135ac:	4649      	mov	r1, r9
 80135ae:	4650      	mov	r0, sl
 80135b0:	f003 fbf7 	bl	8016da2 <__sprint_r>
 80135b4:	2800      	cmp	r0, #0
 80135b6:	f040 80f7 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80135ba:	ac25      	add	r4, sp, #148	; 0x94
 80135bc:	e7c0      	b.n	8013540 <_vfprintf_r+0x1140>
 80135be:	2010      	movs	r0, #16
 80135c0:	4402      	add	r2, r0
 80135c2:	2b07      	cmp	r3, #7
 80135c4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80135c8:	6060      	str	r0, [r4, #4]
 80135ca:	dd08      	ble.n	80135de <_vfprintf_r+0x11de>
 80135cc:	aa22      	add	r2, sp, #136	; 0x88
 80135ce:	4649      	mov	r1, r9
 80135d0:	4650      	mov	r0, sl
 80135d2:	f003 fbe6 	bl	8016da2 <__sprint_r>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	f040 80e6 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80135dc:	a925      	add	r1, sp, #148	; 0x94
 80135de:	3e10      	subs	r6, #16
 80135e0:	460c      	mov	r4, r1
 80135e2:	e7b4      	b.n	801354e <_vfprintf_r+0x114e>
 80135e4:	460c      	mov	r4, r1
 80135e6:	e7cb      	b.n	8013580 <_vfprintf_r+0x1180>
 80135e8:	aa22      	add	r2, sp, #136	; 0x88
 80135ea:	4649      	mov	r1, r9
 80135ec:	4650      	mov	r0, sl
 80135ee:	f003 fbd8 	bl	8016da2 <__sprint_r>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	f040 80d8 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 80135f8:	ac25      	add	r4, sp, #148	; 0x94
 80135fa:	e727      	b.n	801344c <_vfprintf_r+0x104c>
 80135fc:	aa22      	add	r2, sp, #136	; 0x88
 80135fe:	4649      	mov	r1, r9
 8013600:	4650      	mov	r0, sl
 8013602:	f003 fbce 	bl	8016da2 <__sprint_r>
 8013606:	2800      	cmp	r0, #0
 8013608:	f040 80ce 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801360c:	ac25      	add	r4, sp, #148	; 0x94
 801360e:	e734      	b.n	801347a <_vfprintf_r+0x107a>
 8013610:	3210      	adds	r2, #16
 8013612:	2b07      	cmp	r3, #7
 8013614:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8013618:	6067      	str	r7, [r4, #4]
 801361a:	dd08      	ble.n	801362e <_vfprintf_r+0x122e>
 801361c:	aa22      	add	r2, sp, #136	; 0x88
 801361e:	4649      	mov	r1, r9
 8013620:	4650      	mov	r0, sl
 8013622:	f003 fbbe 	bl	8016da2 <__sprint_r>
 8013626:	2800      	cmp	r0, #0
 8013628:	f040 80be 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 801362c:	a925      	add	r1, sp, #148	; 0x94
 801362e:	3d10      	subs	r5, #16
 8013630:	460c      	mov	r4, r1
 8013632:	e72e      	b.n	8013492 <_vfprintf_r+0x1092>
 8013634:	0801b3c4 	.word	0x0801b3c4
 8013638:	9a05      	ldr	r2, [sp, #20]
 801363a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801363c:	2a01      	cmp	r2, #1
 801363e:	f106 0601 	add.w	r6, r6, #1
 8013642:	f103 0301 	add.w	r3, r3, #1
 8013646:	f104 0508 	add.w	r5, r4, #8
 801364a:	dc02      	bgt.n	8013652 <_vfprintf_r+0x1252>
 801364c:	f01b 0f01 	tst.w	fp, #1
 8013650:	d07e      	beq.n	8013750 <_vfprintf_r+0x1350>
 8013652:	2201      	movs	r2, #1
 8013654:	2b07      	cmp	r3, #7
 8013656:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801365a:	f8c4 8000 	str.w	r8, [r4]
 801365e:	6062      	str	r2, [r4, #4]
 8013660:	dd08      	ble.n	8013674 <_vfprintf_r+0x1274>
 8013662:	aa22      	add	r2, sp, #136	; 0x88
 8013664:	4649      	mov	r1, r9
 8013666:	4650      	mov	r0, sl
 8013668:	f003 fb9b 	bl	8016da2 <__sprint_r>
 801366c:	2800      	cmp	r0, #0
 801366e:	f040 809b 	bne.w	80137a8 <_vfprintf_r+0x13a8>
 8013672:	ad25      	add	r5, sp, #148	; 0x94
 8013674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013676:	602b      	str	r3, [r5, #0]
 8013678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801367a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801367c:	606b      	str	r3, [r5, #4]
 801367e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013680:	4413      	add	r3, r2
 8013682:	9324      	str	r3, [sp, #144]	; 0x90
 8013684:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013686:	3301      	adds	r3, #1
 8013688:	2b07      	cmp	r3, #7
 801368a:	9323      	str	r3, [sp, #140]	; 0x8c
 801368c:	dc32      	bgt.n	80136f4 <_vfprintf_r+0x12f4>
 801368e:	3508      	adds	r5, #8
 8013690:	9b05      	ldr	r3, [sp, #20]
 8013692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013696:	1e5c      	subs	r4, r3, #1
 8013698:	2200      	movs	r2, #0
 801369a:	2300      	movs	r3, #0
 801369c:	f7ed fa3e 	bl	8000b1c <__aeabi_dcmpeq>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d130      	bne.n	8013706 <_vfprintf_r+0x1306>
 80136a4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80136a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80136a8:	9a05      	ldr	r2, [sp, #20]
 80136aa:	3101      	adds	r1, #1
 80136ac:	3b01      	subs	r3, #1
 80136ae:	f108 0001 	add.w	r0, r8, #1
 80136b2:	4413      	add	r3, r2
 80136b4:	2907      	cmp	r1, #7
 80136b6:	e9c5 0400 	strd	r0, r4, [r5]
 80136ba:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 80136be:	dd50      	ble.n	8013762 <_vfprintf_r+0x1362>
 80136c0:	aa22      	add	r2, sp, #136	; 0x88
 80136c2:	4649      	mov	r1, r9
 80136c4:	4650      	mov	r0, sl
 80136c6:	f003 fb6c 	bl	8016da2 <__sprint_r>
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d16c      	bne.n	80137a8 <_vfprintf_r+0x13a8>
 80136ce:	ad25      	add	r5, sp, #148	; 0x94
 80136d0:	ab1e      	add	r3, sp, #120	; 0x78
 80136d2:	602b      	str	r3, [r5, #0]
 80136d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80136d8:	606b      	str	r3, [r5, #4]
 80136da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80136dc:	4413      	add	r3, r2
 80136de:	9324      	str	r3, [sp, #144]	; 0x90
 80136e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80136e2:	3301      	adds	r3, #1
 80136e4:	2b07      	cmp	r3, #7
 80136e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80136e8:	f73f adb5 	bgt.w	8013256 <_vfprintf_r+0xe56>
 80136ec:	f105 0408 	add.w	r4, r5, #8
 80136f0:	f7ff baba 	b.w	8012c68 <_vfprintf_r+0x868>
 80136f4:	aa22      	add	r2, sp, #136	; 0x88
 80136f6:	4649      	mov	r1, r9
 80136f8:	4650      	mov	r0, sl
 80136fa:	f003 fb52 	bl	8016da2 <__sprint_r>
 80136fe:	2800      	cmp	r0, #0
 8013700:	d152      	bne.n	80137a8 <_vfprintf_r+0x13a8>
 8013702:	ad25      	add	r5, sp, #148	; 0x94
 8013704:	e7c4      	b.n	8013690 <_vfprintf_r+0x1290>
 8013706:	2c00      	cmp	r4, #0
 8013708:	dde2      	ble.n	80136d0 <_vfprintf_r+0x12d0>
 801370a:	4e58      	ldr	r6, [pc, #352]	; (801386c <_vfprintf_r+0x146c>)
 801370c:	2710      	movs	r7, #16
 801370e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8013712:	2c10      	cmp	r4, #16
 8013714:	f103 0301 	add.w	r3, r3, #1
 8013718:	f105 0108 	add.w	r1, r5, #8
 801371c:	602e      	str	r6, [r5, #0]
 801371e:	dc07      	bgt.n	8013730 <_vfprintf_r+0x1330>
 8013720:	606c      	str	r4, [r5, #4]
 8013722:	2b07      	cmp	r3, #7
 8013724:	4414      	add	r4, r2
 8013726:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801372a:	dcc9      	bgt.n	80136c0 <_vfprintf_r+0x12c0>
 801372c:	460d      	mov	r5, r1
 801372e:	e7cf      	b.n	80136d0 <_vfprintf_r+0x12d0>
 8013730:	3210      	adds	r2, #16
 8013732:	2b07      	cmp	r3, #7
 8013734:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8013738:	606f      	str	r7, [r5, #4]
 801373a:	dd06      	ble.n	801374a <_vfprintf_r+0x134a>
 801373c:	aa22      	add	r2, sp, #136	; 0x88
 801373e:	4649      	mov	r1, r9
 8013740:	4650      	mov	r0, sl
 8013742:	f003 fb2e 	bl	8016da2 <__sprint_r>
 8013746:	bb78      	cbnz	r0, 80137a8 <_vfprintf_r+0x13a8>
 8013748:	a925      	add	r1, sp, #148	; 0x94
 801374a:	3c10      	subs	r4, #16
 801374c:	460d      	mov	r5, r1
 801374e:	e7de      	b.n	801370e <_vfprintf_r+0x130e>
 8013750:	2201      	movs	r2, #1
 8013752:	2b07      	cmp	r3, #7
 8013754:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8013758:	f8c4 8000 	str.w	r8, [r4]
 801375c:	6062      	str	r2, [r4, #4]
 801375e:	ddb7      	ble.n	80136d0 <_vfprintf_r+0x12d0>
 8013760:	e7ae      	b.n	80136c0 <_vfprintf_r+0x12c0>
 8013762:	3508      	adds	r5, #8
 8013764:	e7b4      	b.n	80136d0 <_vfprintf_r+0x12d0>
 8013766:	460c      	mov	r4, r1
 8013768:	f7ff ba7e 	b.w	8012c68 <_vfprintf_r+0x868>
 801376c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8013770:	1a9d      	subs	r5, r3, r2
 8013772:	2d00      	cmp	r5, #0
 8013774:	f77f aa7c 	ble.w	8012c70 <_vfprintf_r+0x870>
 8013778:	4e3d      	ldr	r6, [pc, #244]	; (8013870 <_vfprintf_r+0x1470>)
 801377a:	2710      	movs	r7, #16
 801377c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8013780:	2d10      	cmp	r5, #16
 8013782:	f103 0301 	add.w	r3, r3, #1
 8013786:	6026      	str	r6, [r4, #0]
 8013788:	dc18      	bgt.n	80137bc <_vfprintf_r+0x13bc>
 801378a:	6065      	str	r5, [r4, #4]
 801378c:	2b07      	cmp	r3, #7
 801378e:	4415      	add	r5, r2
 8013790:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8013794:	f77f aa6c 	ble.w	8012c70 <_vfprintf_r+0x870>
 8013798:	aa22      	add	r2, sp, #136	; 0x88
 801379a:	4649      	mov	r1, r9
 801379c:	4650      	mov	r0, sl
 801379e:	f003 fb00 	bl	8016da2 <__sprint_r>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	f43f aa64 	beq.w	8012c70 <_vfprintf_r+0x870>
 80137a8:	9b03      	ldr	r3, [sp, #12]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	f43f a879 	beq.w	80128a2 <_vfprintf_r+0x4a2>
 80137b0:	4619      	mov	r1, r3
 80137b2:	4650      	mov	r0, sl
 80137b4:	f001 f90e 	bl	80149d4 <_free_r>
 80137b8:	f7ff b873 	b.w	80128a2 <_vfprintf_r+0x4a2>
 80137bc:	3210      	adds	r2, #16
 80137be:	2b07      	cmp	r3, #7
 80137c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80137c4:	6067      	str	r7, [r4, #4]
 80137c6:	dc02      	bgt.n	80137ce <_vfprintf_r+0x13ce>
 80137c8:	3408      	adds	r4, #8
 80137ca:	3d10      	subs	r5, #16
 80137cc:	e7d6      	b.n	801377c <_vfprintf_r+0x137c>
 80137ce:	aa22      	add	r2, sp, #136	; 0x88
 80137d0:	4649      	mov	r1, r9
 80137d2:	4650      	mov	r0, sl
 80137d4:	f003 fae5 	bl	8016da2 <__sprint_r>
 80137d8:	2800      	cmp	r0, #0
 80137da:	d1e5      	bne.n	80137a8 <_vfprintf_r+0x13a8>
 80137dc:	ac25      	add	r4, sp, #148	; 0x94
 80137de:	e7f4      	b.n	80137ca <_vfprintf_r+0x13ca>
 80137e0:	9903      	ldr	r1, [sp, #12]
 80137e2:	4650      	mov	r0, sl
 80137e4:	f001 f8f6 	bl	80149d4 <_free_r>
 80137e8:	f7ff ba5a 	b.w	8012ca0 <_vfprintf_r+0x8a0>
 80137ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80137ee:	b91b      	cbnz	r3, 80137f8 <_vfprintf_r+0x13f8>
 80137f0:	2300      	movs	r3, #0
 80137f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80137f4:	f7ff b855 	b.w	80128a2 <_vfprintf_r+0x4a2>
 80137f8:	aa22      	add	r2, sp, #136	; 0x88
 80137fa:	4649      	mov	r1, r9
 80137fc:	4650      	mov	r0, sl
 80137fe:	f003 fad0 	bl	8016da2 <__sprint_r>
 8013802:	2800      	cmp	r0, #0
 8013804:	d0f4      	beq.n	80137f0 <_vfprintf_r+0x13f0>
 8013806:	f7ff b84c 	b.w	80128a2 <_vfprintf_r+0x4a2>
 801380a:	ea56 0205 	orrs.w	r2, r6, r5
 801380e:	465f      	mov	r7, fp
 8013810:	f43f ab70 	beq.w	8012ef4 <_vfprintf_r+0xaf4>
 8013814:	2b01      	cmp	r3, #1
 8013816:	f43f ac0d 	beq.w	8013034 <_vfprintf_r+0xc34>
 801381a:	2b02      	cmp	r3, #2
 801381c:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 8013820:	f43f ac54 	beq.w	80130cc <_vfprintf_r+0xccc>
 8013824:	f006 0307 	and.w	r3, r6, #7
 8013828:	08f6      	lsrs	r6, r6, #3
 801382a:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 801382e:	08ed      	lsrs	r5, r5, #3
 8013830:	3330      	adds	r3, #48	; 0x30
 8013832:	ea56 0105 	orrs.w	r1, r6, r5
 8013836:	4642      	mov	r2, r8
 8013838:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801383c:	d1f2      	bne.n	8013824 <_vfprintf_r+0x1424>
 801383e:	07f8      	lsls	r0, r7, #31
 8013840:	d506      	bpl.n	8013850 <_vfprintf_r+0x1450>
 8013842:	2b30      	cmp	r3, #48	; 0x30
 8013844:	d004      	beq.n	8013850 <_vfprintf_r+0x1450>
 8013846:	2330      	movs	r3, #48	; 0x30
 8013848:	f808 3c01 	strb.w	r3, [r8, #-1]
 801384c:	f1a2 0802 	sub.w	r8, r2, #2
 8013850:	ab4e      	add	r3, sp, #312	; 0x138
 8013852:	eba3 0308 	sub.w	r3, r3, r8
 8013856:	9e04      	ldr	r6, [sp, #16]
 8013858:	9304      	str	r3, [sp, #16]
 801385a:	2300      	movs	r3, #0
 801385c:	46bb      	mov	fp, r7
 801385e:	9303      	str	r3, [sp, #12]
 8013860:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013864:	461d      	mov	r5, r3
 8013866:	f7ff b945 	b.w	8012af4 <_vfprintf_r+0x6f4>
 801386a:	bf00      	nop
 801386c:	0801b3c4 	.word	0x0801b3c4
 8013870:	0801b3b4 	.word	0x0801b3b4

08013874 <__sbprintf>:
 8013874:	b570      	push	{r4, r5, r6, lr}
 8013876:	460c      	mov	r4, r1
 8013878:	8989      	ldrh	r1, [r1, #12]
 801387a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801387e:	f021 0102 	bic.w	r1, r1, #2
 8013882:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013886:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8013888:	911b      	str	r1, [sp, #108]	; 0x6c
 801388a:	89e1      	ldrh	r1, [r4, #14]
 801388c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013890:	69e1      	ldr	r1, [r4, #28]
 8013892:	9109      	str	r1, [sp, #36]	; 0x24
 8013894:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013896:	910b      	str	r1, [sp, #44]	; 0x2c
 8013898:	a91c      	add	r1, sp, #112	; 0x70
 801389a:	9102      	str	r1, [sp, #8]
 801389c:	9106      	str	r1, [sp, #24]
 801389e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80138a2:	4606      	mov	r6, r0
 80138a4:	9104      	str	r1, [sp, #16]
 80138a6:	9107      	str	r1, [sp, #28]
 80138a8:	a818      	add	r0, sp, #96	; 0x60
 80138aa:	2100      	movs	r1, #0
 80138ac:	e9cd 3200 	strd	r3, r2, [sp]
 80138b0:	9108      	str	r1, [sp, #32]
 80138b2:	f001 fa67 	bl	8014d84 <__retarget_lock_init_recursive>
 80138b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80138ba:	a902      	add	r1, sp, #8
 80138bc:	4630      	mov	r0, r6
 80138be:	f7fe fd9f 	bl	8012400 <_vfprintf_r>
 80138c2:	1e05      	subs	r5, r0, #0
 80138c4:	db07      	blt.n	80138d6 <__sbprintf+0x62>
 80138c6:	a902      	add	r1, sp, #8
 80138c8:	4630      	mov	r0, r6
 80138ca:	f000 ff87 	bl	80147dc <_fflush_r>
 80138ce:	2800      	cmp	r0, #0
 80138d0:	bf18      	it	ne
 80138d2:	f04f 35ff 	movne.w	r5, #4294967295
 80138d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80138da:	9818      	ldr	r0, [sp, #96]	; 0x60
 80138dc:	065b      	lsls	r3, r3, #25
 80138de:	bf42      	ittt	mi
 80138e0:	89a3      	ldrhmi	r3, [r4, #12]
 80138e2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80138e6:	81a3      	strhmi	r3, [r4, #12]
 80138e8:	f001 fa4d 	bl	8014d86 <__retarget_lock_close_recursive>
 80138ec:	4628      	mov	r0, r5
 80138ee:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80138f2:	bd70      	pop	{r4, r5, r6, pc}

080138f4 <__swsetup_r>:
 80138f4:	b538      	push	{r3, r4, r5, lr}
 80138f6:	4b2a      	ldr	r3, [pc, #168]	; (80139a0 <__swsetup_r+0xac>)
 80138f8:	4605      	mov	r5, r0
 80138fa:	6818      	ldr	r0, [r3, #0]
 80138fc:	460c      	mov	r4, r1
 80138fe:	b118      	cbz	r0, 8013908 <__swsetup_r+0x14>
 8013900:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013902:	b90b      	cbnz	r3, 8013908 <__swsetup_r+0x14>
 8013904:	f000 ffd6 	bl	80148b4 <__sinit>
 8013908:	89a3      	ldrh	r3, [r4, #12]
 801390a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801390e:	0718      	lsls	r0, r3, #28
 8013910:	d422      	bmi.n	8013958 <__swsetup_r+0x64>
 8013912:	06d9      	lsls	r1, r3, #27
 8013914:	d407      	bmi.n	8013926 <__swsetup_r+0x32>
 8013916:	2309      	movs	r3, #9
 8013918:	602b      	str	r3, [r5, #0]
 801391a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801391e:	81a3      	strh	r3, [r4, #12]
 8013920:	f04f 30ff 	mov.w	r0, #4294967295
 8013924:	e034      	b.n	8013990 <__swsetup_r+0x9c>
 8013926:	0758      	lsls	r0, r3, #29
 8013928:	d512      	bpl.n	8013950 <__swsetup_r+0x5c>
 801392a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801392c:	b141      	cbz	r1, 8013940 <__swsetup_r+0x4c>
 801392e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8013932:	4299      	cmp	r1, r3
 8013934:	d002      	beq.n	801393c <__swsetup_r+0x48>
 8013936:	4628      	mov	r0, r5
 8013938:	f001 f84c 	bl	80149d4 <_free_r>
 801393c:	2300      	movs	r3, #0
 801393e:	6323      	str	r3, [r4, #48]	; 0x30
 8013940:	89a3      	ldrh	r3, [r4, #12]
 8013942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013946:	81a3      	strh	r3, [r4, #12]
 8013948:	2300      	movs	r3, #0
 801394a:	6063      	str	r3, [r4, #4]
 801394c:	6923      	ldr	r3, [r4, #16]
 801394e:	6023      	str	r3, [r4, #0]
 8013950:	89a3      	ldrh	r3, [r4, #12]
 8013952:	f043 0308 	orr.w	r3, r3, #8
 8013956:	81a3      	strh	r3, [r4, #12]
 8013958:	6923      	ldr	r3, [r4, #16]
 801395a:	b94b      	cbnz	r3, 8013970 <__swsetup_r+0x7c>
 801395c:	89a3      	ldrh	r3, [r4, #12]
 801395e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013966:	d003      	beq.n	8013970 <__swsetup_r+0x7c>
 8013968:	4621      	mov	r1, r4
 801396a:	4628      	mov	r0, r5
 801396c:	f001 fa3c 	bl	8014de8 <__smakebuf_r>
 8013970:	89a0      	ldrh	r0, [r4, #12]
 8013972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013976:	f010 0301 	ands.w	r3, r0, #1
 801397a:	d00a      	beq.n	8013992 <__swsetup_r+0x9e>
 801397c:	2300      	movs	r3, #0
 801397e:	60a3      	str	r3, [r4, #8]
 8013980:	6963      	ldr	r3, [r4, #20]
 8013982:	425b      	negs	r3, r3
 8013984:	61a3      	str	r3, [r4, #24]
 8013986:	6923      	ldr	r3, [r4, #16]
 8013988:	b943      	cbnz	r3, 801399c <__swsetup_r+0xa8>
 801398a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801398e:	d1c4      	bne.n	801391a <__swsetup_r+0x26>
 8013990:	bd38      	pop	{r3, r4, r5, pc}
 8013992:	0781      	lsls	r1, r0, #30
 8013994:	bf58      	it	pl
 8013996:	6963      	ldrpl	r3, [r4, #20]
 8013998:	60a3      	str	r3, [r4, #8]
 801399a:	e7f4      	b.n	8013986 <__swsetup_r+0x92>
 801399c:	2000      	movs	r0, #0
 801399e:	e7f7      	b.n	8013990 <__swsetup_r+0x9c>
 80139a0:	2000001c 	.word	0x2000001c

080139a4 <register_fini>:
 80139a4:	4b02      	ldr	r3, [pc, #8]	; (80139b0 <register_fini+0xc>)
 80139a6:	b113      	cbz	r3, 80139ae <register_fini+0xa>
 80139a8:	4802      	ldr	r0, [pc, #8]	; (80139b4 <register_fini+0x10>)
 80139aa:	f000 b805 	b.w	80139b8 <atexit>
 80139ae:	4770      	bx	lr
 80139b0:	00000000 	.word	0x00000000
 80139b4:	08014905 	.word	0x08014905

080139b8 <atexit>:
 80139b8:	2300      	movs	r3, #0
 80139ba:	4601      	mov	r1, r0
 80139bc:	461a      	mov	r2, r3
 80139be:	4618      	mov	r0, r3
 80139c0:	f003 bf0a 	b.w	80177d8 <__register_exitproc>

080139c4 <div>:
 80139c4:	2900      	cmp	r1, #0
 80139c6:	b510      	push	{r4, lr}
 80139c8:	fb91 f4f2 	sdiv	r4, r1, r2
 80139cc:	fb02 1314 	mls	r3, r2, r4, r1
 80139d0:	db06      	blt.n	80139e0 <div+0x1c>
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	da01      	bge.n	80139da <div+0x16>
 80139d6:	3401      	adds	r4, #1
 80139d8:	1a9b      	subs	r3, r3, r2
 80139da:	e9c0 4300 	strd	r4, r3, [r0]
 80139de:	bd10      	pop	{r4, pc}
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	bfc4      	itt	gt
 80139e4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80139e8:	189b      	addgt	r3, r3, r2
 80139ea:	e7f6      	b.n	80139da <div+0x16>

080139ec <quorem>:
 80139ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139f0:	6903      	ldr	r3, [r0, #16]
 80139f2:	690c      	ldr	r4, [r1, #16]
 80139f4:	42a3      	cmp	r3, r4
 80139f6:	4607      	mov	r7, r0
 80139f8:	f2c0 8081 	blt.w	8013afe <quorem+0x112>
 80139fc:	3c01      	subs	r4, #1
 80139fe:	f101 0814 	add.w	r8, r1, #20
 8013a02:	f100 0514 	add.w	r5, r0, #20
 8013a06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a0a:	9301      	str	r3, [sp, #4]
 8013a0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a14:	3301      	adds	r3, #1
 8013a16:	429a      	cmp	r2, r3
 8013a18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013a1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a20:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a24:	d331      	bcc.n	8013a8a <quorem+0x9e>
 8013a26:	f04f 0e00 	mov.w	lr, #0
 8013a2a:	4640      	mov	r0, r8
 8013a2c:	46ac      	mov	ip, r5
 8013a2e:	46f2      	mov	sl, lr
 8013a30:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a34:	b293      	uxth	r3, r2
 8013a36:	fb06 e303 	mla	r3, r6, r3, lr
 8013a3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013a3e:	b29b      	uxth	r3, r3
 8013a40:	ebaa 0303 	sub.w	r3, sl, r3
 8013a44:	f8dc a000 	ldr.w	sl, [ip]
 8013a48:	0c12      	lsrs	r2, r2, #16
 8013a4a:	fa13 f38a 	uxtah	r3, r3, sl
 8013a4e:	fb06 e202 	mla	r2, r6, r2, lr
 8013a52:	9300      	str	r3, [sp, #0]
 8013a54:	9b00      	ldr	r3, [sp, #0]
 8013a56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013a5a:	b292      	uxth	r2, r2
 8013a5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a64:	f8bd 3000 	ldrh.w	r3, [sp]
 8013a68:	4581      	cmp	r9, r0
 8013a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a6e:	f84c 3b04 	str.w	r3, [ip], #4
 8013a72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013a76:	d2db      	bcs.n	8013a30 <quorem+0x44>
 8013a78:	f855 300b 	ldr.w	r3, [r5, fp]
 8013a7c:	b92b      	cbnz	r3, 8013a8a <quorem+0x9e>
 8013a7e:	9b01      	ldr	r3, [sp, #4]
 8013a80:	3b04      	subs	r3, #4
 8013a82:	429d      	cmp	r5, r3
 8013a84:	461a      	mov	r2, r3
 8013a86:	d32e      	bcc.n	8013ae6 <quorem+0xfa>
 8013a88:	613c      	str	r4, [r7, #16]
 8013a8a:	4638      	mov	r0, r7
 8013a8c:	f001 fe78 	bl	8015780 <__mcmp>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	db24      	blt.n	8013ade <quorem+0xf2>
 8013a94:	3601      	adds	r6, #1
 8013a96:	4628      	mov	r0, r5
 8013a98:	f04f 0c00 	mov.w	ip, #0
 8013a9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013aa0:	f8d0 e000 	ldr.w	lr, [r0]
 8013aa4:	b293      	uxth	r3, r2
 8013aa6:	ebac 0303 	sub.w	r3, ip, r3
 8013aaa:	0c12      	lsrs	r2, r2, #16
 8013aac:	fa13 f38e 	uxtah	r3, r3, lr
 8013ab0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013ab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013abe:	45c1      	cmp	r9, r8
 8013ac0:	f840 3b04 	str.w	r3, [r0], #4
 8013ac4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013ac8:	d2e8      	bcs.n	8013a9c <quorem+0xb0>
 8013aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013ad2:	b922      	cbnz	r2, 8013ade <quorem+0xf2>
 8013ad4:	3b04      	subs	r3, #4
 8013ad6:	429d      	cmp	r5, r3
 8013ad8:	461a      	mov	r2, r3
 8013ada:	d30a      	bcc.n	8013af2 <quorem+0x106>
 8013adc:	613c      	str	r4, [r7, #16]
 8013ade:	4630      	mov	r0, r6
 8013ae0:	b003      	add	sp, #12
 8013ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae6:	6812      	ldr	r2, [r2, #0]
 8013ae8:	3b04      	subs	r3, #4
 8013aea:	2a00      	cmp	r2, #0
 8013aec:	d1cc      	bne.n	8013a88 <quorem+0x9c>
 8013aee:	3c01      	subs	r4, #1
 8013af0:	e7c7      	b.n	8013a82 <quorem+0x96>
 8013af2:	6812      	ldr	r2, [r2, #0]
 8013af4:	3b04      	subs	r3, #4
 8013af6:	2a00      	cmp	r2, #0
 8013af8:	d1f0      	bne.n	8013adc <quorem+0xf0>
 8013afa:	3c01      	subs	r4, #1
 8013afc:	e7eb      	b.n	8013ad6 <quorem+0xea>
 8013afe:	2000      	movs	r0, #0
 8013b00:	e7ee      	b.n	8013ae0 <quorem+0xf4>
 8013b02:	0000      	movs	r0, r0
 8013b04:	0000      	movs	r0, r0
	...

08013b08 <_dtoa_r>:
 8013b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b0c:	ed2d 8b04 	vpush	{d8-d9}
 8013b10:	b093      	sub	sp, #76	; 0x4c
 8013b12:	ec57 6b10 	vmov	r6, r7, d0
 8013b16:	9106      	str	r1, [sp, #24]
 8013b18:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013b1a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8013b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8013b1e:	ee10 aa10 	vmov	sl, s0
 8013b22:	4604      	mov	r4, r0
 8013b24:	930c      	str	r3, [sp, #48]	; 0x30
 8013b26:	46bb      	mov	fp, r7
 8013b28:	b141      	cbz	r1, 8013b3c <_dtoa_r+0x34>
 8013b2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b2c:	604a      	str	r2, [r1, #4]
 8013b2e:	2301      	movs	r3, #1
 8013b30:	4093      	lsls	r3, r2
 8013b32:	608b      	str	r3, [r1, #8]
 8013b34:	f001 fc15 	bl	8015362 <_Bfree>
 8013b38:	2300      	movs	r3, #0
 8013b3a:	6423      	str	r3, [r4, #64]	; 0x40
 8013b3c:	1e3b      	subs	r3, r7, #0
 8013b3e:	bfaa      	itet	ge
 8013b40:	2300      	movge	r3, #0
 8013b42:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013b46:	602b      	strge	r3, [r5, #0]
 8013b48:	4ba3      	ldr	r3, [pc, #652]	; (8013dd8 <_dtoa_r+0x2d0>)
 8013b4a:	bfbc      	itt	lt
 8013b4c:	2201      	movlt	r2, #1
 8013b4e:	602a      	strlt	r2, [r5, #0]
 8013b50:	ea33 030b 	bics.w	r3, r3, fp
 8013b54:	d11b      	bne.n	8013b8e <_dtoa_r+0x86>
 8013b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b58:	f242 730f 	movw	r3, #9999	; 0x270f
 8013b5c:	6013      	str	r3, [r2, #0]
 8013b5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b62:	4333      	orrs	r3, r6
 8013b64:	f000 8590 	beq.w	8014688 <_dtoa_r+0xb80>
 8013b68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b6a:	b90b      	cbnz	r3, 8013b70 <_dtoa_r+0x68>
 8013b6c:	4b9b      	ldr	r3, [pc, #620]	; (8013ddc <_dtoa_r+0x2d4>)
 8013b6e:	e022      	b.n	8013bb6 <_dtoa_r+0xae>
 8013b70:	4b9a      	ldr	r3, [pc, #616]	; (8013ddc <_dtoa_r+0x2d4>)
 8013b72:	9301      	str	r3, [sp, #4]
 8013b74:	3303      	adds	r3, #3
 8013b76:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013b78:	6013      	str	r3, [r2, #0]
 8013b7a:	9801      	ldr	r0, [sp, #4]
 8013b7c:	b013      	add	sp, #76	; 0x4c
 8013b7e:	ecbd 8b04 	vpop	{d8-d9}
 8013b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b86:	4b96      	ldr	r3, [pc, #600]	; (8013de0 <_dtoa_r+0x2d8>)
 8013b88:	9301      	str	r3, [sp, #4]
 8013b8a:	3308      	adds	r3, #8
 8013b8c:	e7f3      	b.n	8013b76 <_dtoa_r+0x6e>
 8013b8e:	2200      	movs	r2, #0
 8013b90:	2300      	movs	r3, #0
 8013b92:	4650      	mov	r0, sl
 8013b94:	4659      	mov	r1, fp
 8013b96:	f7ec ffc1 	bl	8000b1c <__aeabi_dcmpeq>
 8013b9a:	ec4b ab19 	vmov	d9, sl, fp
 8013b9e:	4680      	mov	r8, r0
 8013ba0:	b158      	cbz	r0, 8013bba <_dtoa_r+0xb2>
 8013ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	6013      	str	r3, [r2, #0]
 8013ba8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f000 8569 	beq.w	8014682 <_dtoa_r+0xb7a>
 8013bb0:	488c      	ldr	r0, [pc, #560]	; (8013de4 <_dtoa_r+0x2dc>)
 8013bb2:	6018      	str	r0, [r3, #0]
 8013bb4:	1e43      	subs	r3, r0, #1
 8013bb6:	9301      	str	r3, [sp, #4]
 8013bb8:	e7df      	b.n	8013b7a <_dtoa_r+0x72>
 8013bba:	ec4b ab10 	vmov	d0, sl, fp
 8013bbe:	aa10      	add	r2, sp, #64	; 0x40
 8013bc0:	a911      	add	r1, sp, #68	; 0x44
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	f001 fe82 	bl	80158cc <__d2b>
 8013bc8:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8013bcc:	ee08 0a10 	vmov	s16, r0
 8013bd0:	2d00      	cmp	r5, #0
 8013bd2:	f000 8082 	beq.w	8013cda <_dtoa_r+0x1d2>
 8013bd6:	ee19 3a90 	vmov	r3, s19
 8013bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013bde:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013be2:	4656      	mov	r6, sl
 8013be4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013be8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013bec:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013bf0:	4b7d      	ldr	r3, [pc, #500]	; (8013de8 <_dtoa_r+0x2e0>)
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	4639      	mov	r1, r7
 8013bf8:	f7ec fb70 	bl	80002dc <__aeabi_dsub>
 8013bfc:	a370      	add	r3, pc, #448	; (adr r3, 8013dc0 <_dtoa_r+0x2b8>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	f7ec fd23 	bl	800064c <__aeabi_dmul>
 8013c06:	a370      	add	r3, pc, #448	; (adr r3, 8013dc8 <_dtoa_r+0x2c0>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	f7ec fb68 	bl	80002e0 <__adddf3>
 8013c10:	4606      	mov	r6, r0
 8013c12:	4628      	mov	r0, r5
 8013c14:	460f      	mov	r7, r1
 8013c16:	f7ec fcaf 	bl	8000578 <__aeabi_i2d>
 8013c1a:	a36d      	add	r3, pc, #436	; (adr r3, 8013dd0 <_dtoa_r+0x2c8>)
 8013c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c20:	f7ec fd14 	bl	800064c <__aeabi_dmul>
 8013c24:	4602      	mov	r2, r0
 8013c26:	460b      	mov	r3, r1
 8013c28:	4630      	mov	r0, r6
 8013c2a:	4639      	mov	r1, r7
 8013c2c:	f7ec fb58 	bl	80002e0 <__adddf3>
 8013c30:	4606      	mov	r6, r0
 8013c32:	460f      	mov	r7, r1
 8013c34:	f7ec ffba 	bl	8000bac <__aeabi_d2iz>
 8013c38:	2200      	movs	r2, #0
 8013c3a:	9000      	str	r0, [sp, #0]
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	4630      	mov	r0, r6
 8013c40:	4639      	mov	r1, r7
 8013c42:	f7ec ff75 	bl	8000b30 <__aeabi_dcmplt>
 8013c46:	b150      	cbz	r0, 8013c5e <_dtoa_r+0x156>
 8013c48:	9800      	ldr	r0, [sp, #0]
 8013c4a:	f7ec fc95 	bl	8000578 <__aeabi_i2d>
 8013c4e:	4632      	mov	r2, r6
 8013c50:	463b      	mov	r3, r7
 8013c52:	f7ec ff63 	bl	8000b1c <__aeabi_dcmpeq>
 8013c56:	b910      	cbnz	r0, 8013c5e <_dtoa_r+0x156>
 8013c58:	9b00      	ldr	r3, [sp, #0]
 8013c5a:	3b01      	subs	r3, #1
 8013c5c:	9300      	str	r3, [sp, #0]
 8013c5e:	9b00      	ldr	r3, [sp, #0]
 8013c60:	2b16      	cmp	r3, #22
 8013c62:	d858      	bhi.n	8013d16 <_dtoa_r+0x20e>
 8013c64:	9a00      	ldr	r2, [sp, #0]
 8013c66:	4b61      	ldr	r3, [pc, #388]	; (8013dec <_dtoa_r+0x2e4>)
 8013c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c70:	ec51 0b19 	vmov	r0, r1, d9
 8013c74:	f7ec ff5c 	bl	8000b30 <__aeabi_dcmplt>
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d04e      	beq.n	8013d1a <_dtoa_r+0x212>
 8013c7c:	9b00      	ldr	r3, [sp, #0]
 8013c7e:	3b01      	subs	r3, #1
 8013c80:	9300      	str	r3, [sp, #0]
 8013c82:	2300      	movs	r3, #0
 8013c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c88:	1b5d      	subs	r5, r3, r5
 8013c8a:	1e6b      	subs	r3, r5, #1
 8013c8c:	9305      	str	r3, [sp, #20]
 8013c8e:	bf45      	ittet	mi
 8013c90:	f1c5 0301 	rsbmi	r3, r5, #1
 8013c94:	9304      	strmi	r3, [sp, #16]
 8013c96:	2300      	movpl	r3, #0
 8013c98:	2300      	movmi	r3, #0
 8013c9a:	bf4c      	ite	mi
 8013c9c:	9305      	strmi	r3, [sp, #20]
 8013c9e:	9304      	strpl	r3, [sp, #16]
 8013ca0:	9b00      	ldr	r3, [sp, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	db3b      	blt.n	8013d1e <_dtoa_r+0x216>
 8013ca6:	9b05      	ldr	r3, [sp, #20]
 8013ca8:	9a00      	ldr	r2, [sp, #0]
 8013caa:	920a      	str	r2, [sp, #40]	; 0x28
 8013cac:	4413      	add	r3, r2
 8013cae:	9305      	str	r3, [sp, #20]
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	9307      	str	r3, [sp, #28]
 8013cb4:	9b06      	ldr	r3, [sp, #24]
 8013cb6:	2b09      	cmp	r3, #9
 8013cb8:	d869      	bhi.n	8013d8e <_dtoa_r+0x286>
 8013cba:	2b05      	cmp	r3, #5
 8013cbc:	bfc4      	itt	gt
 8013cbe:	3b04      	subgt	r3, #4
 8013cc0:	9306      	strgt	r3, [sp, #24]
 8013cc2:	9b06      	ldr	r3, [sp, #24]
 8013cc4:	f1a3 0302 	sub.w	r3, r3, #2
 8013cc8:	bfcc      	ite	gt
 8013cca:	2500      	movgt	r5, #0
 8013ccc:	2501      	movle	r5, #1
 8013cce:	2b03      	cmp	r3, #3
 8013cd0:	d868      	bhi.n	8013da4 <_dtoa_r+0x29c>
 8013cd2:	e8df f003 	tbb	[pc, r3]
 8013cd6:	3a2d      	.short	0x3a2d
 8013cd8:	5a38      	.short	0x5a38
 8013cda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013cde:	441d      	add	r5, r3
 8013ce0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013ce4:	2b20      	cmp	r3, #32
 8013ce6:	bfc1      	itttt	gt
 8013ce8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013cec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013cf0:	fa0b f303 	lslgt.w	r3, fp, r3
 8013cf4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013cf8:	bfda      	itte	le
 8013cfa:	f1c3 0320 	rsble	r3, r3, #32
 8013cfe:	fa06 f003 	lslle.w	r0, r6, r3
 8013d02:	4318      	orrgt	r0, r3
 8013d04:	f7ec fc28 	bl	8000558 <__aeabi_ui2d>
 8013d08:	2301      	movs	r3, #1
 8013d0a:	4606      	mov	r6, r0
 8013d0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013d10:	3d01      	subs	r5, #1
 8013d12:	930e      	str	r3, [sp, #56]	; 0x38
 8013d14:	e76c      	b.n	8013bf0 <_dtoa_r+0xe8>
 8013d16:	2301      	movs	r3, #1
 8013d18:	e7b4      	b.n	8013c84 <_dtoa_r+0x17c>
 8013d1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d1c:	e7b3      	b.n	8013c86 <_dtoa_r+0x17e>
 8013d1e:	9b04      	ldr	r3, [sp, #16]
 8013d20:	9a00      	ldr	r2, [sp, #0]
 8013d22:	1a9b      	subs	r3, r3, r2
 8013d24:	9304      	str	r3, [sp, #16]
 8013d26:	4253      	negs	r3, r2
 8013d28:	9307      	str	r3, [sp, #28]
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8013d2e:	e7c1      	b.n	8013cb4 <_dtoa_r+0x1ac>
 8013d30:	2300      	movs	r3, #0
 8013d32:	9308      	str	r3, [sp, #32]
 8013d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	dc37      	bgt.n	8013daa <_dtoa_r+0x2a2>
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013d40:	461a      	mov	r2, r3
 8013d42:	9209      	str	r2, [sp, #36]	; 0x24
 8013d44:	e00c      	b.n	8013d60 <_dtoa_r+0x258>
 8013d46:	2301      	movs	r3, #1
 8013d48:	e7f3      	b.n	8013d32 <_dtoa_r+0x22a>
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d4e:	9308      	str	r3, [sp, #32]
 8013d50:	9b00      	ldr	r3, [sp, #0]
 8013d52:	4413      	add	r3, r2
 8013d54:	9302      	str	r3, [sp, #8]
 8013d56:	3301      	adds	r3, #1
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	9303      	str	r3, [sp, #12]
 8013d5c:	bfb8      	it	lt
 8013d5e:	2301      	movlt	r3, #1
 8013d60:	2200      	movs	r2, #0
 8013d62:	6462      	str	r2, [r4, #68]	; 0x44
 8013d64:	2204      	movs	r2, #4
 8013d66:	f102 0014 	add.w	r0, r2, #20
 8013d6a:	4298      	cmp	r0, r3
 8013d6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013d6e:	d920      	bls.n	8013db2 <_dtoa_r+0x2aa>
 8013d70:	4620      	mov	r0, r4
 8013d72:	f001 fad1 	bl	8015318 <_Balloc>
 8013d76:	9001      	str	r0, [sp, #4]
 8013d78:	2800      	cmp	r0, #0
 8013d7a:	d13d      	bne.n	8013df8 <_dtoa_r+0x2f0>
 8013d7c:	4b1c      	ldr	r3, [pc, #112]	; (8013df0 <_dtoa_r+0x2e8>)
 8013d7e:	4602      	mov	r2, r0
 8013d80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013d84:	481b      	ldr	r0, [pc, #108]	; (8013df4 <_dtoa_r+0x2ec>)
 8013d86:	f003 fd69 	bl	801785c <__assert_func>
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	e7de      	b.n	8013d4c <_dtoa_r+0x244>
 8013d8e:	2501      	movs	r5, #1
 8013d90:	2300      	movs	r3, #0
 8013d92:	9306      	str	r3, [sp, #24]
 8013d94:	9508      	str	r5, [sp, #32]
 8013d96:	f04f 33ff 	mov.w	r3, #4294967295
 8013d9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	2312      	movs	r3, #18
 8013da2:	e7ce      	b.n	8013d42 <_dtoa_r+0x23a>
 8013da4:	2301      	movs	r3, #1
 8013da6:	9308      	str	r3, [sp, #32]
 8013da8:	e7f5      	b.n	8013d96 <_dtoa_r+0x28e>
 8013daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013db0:	e7d6      	b.n	8013d60 <_dtoa_r+0x258>
 8013db2:	3101      	adds	r1, #1
 8013db4:	6461      	str	r1, [r4, #68]	; 0x44
 8013db6:	0052      	lsls	r2, r2, #1
 8013db8:	e7d5      	b.n	8013d66 <_dtoa_r+0x25e>
 8013dba:	bf00      	nop
 8013dbc:	f3af 8000 	nop.w
 8013dc0:	636f4361 	.word	0x636f4361
 8013dc4:	3fd287a7 	.word	0x3fd287a7
 8013dc8:	8b60c8b3 	.word	0x8b60c8b3
 8013dcc:	3fc68a28 	.word	0x3fc68a28
 8013dd0:	509f79fb 	.word	0x509f79fb
 8013dd4:	3fd34413 	.word	0x3fd34413
 8013dd8:	7ff00000 	.word	0x7ff00000
 8013ddc:	0801b3d4 	.word	0x0801b3d4
 8013de0:	0801b3d8 	.word	0x0801b3d8
 8013de4:	0801b357 	.word	0x0801b357
 8013de8:	3ff80000 	.word	0x3ff80000
 8013dec:	0801b4d8 	.word	0x0801b4d8
 8013df0:	0801b3e1 	.word	0x0801b3e1
 8013df4:	0801b3f2 	.word	0x0801b3f2
 8013df8:	9b01      	ldr	r3, [sp, #4]
 8013dfa:	6423      	str	r3, [r4, #64]	; 0x40
 8013dfc:	9b03      	ldr	r3, [sp, #12]
 8013dfe:	2b0e      	cmp	r3, #14
 8013e00:	f200 809d 	bhi.w	8013f3e <_dtoa_r+0x436>
 8013e04:	2d00      	cmp	r5, #0
 8013e06:	f000 809a 	beq.w	8013f3e <_dtoa_r+0x436>
 8013e0a:	9b00      	ldr	r3, [sp, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	dd32      	ble.n	8013e76 <_dtoa_r+0x36e>
 8013e10:	4ab7      	ldr	r2, [pc, #732]	; (80140f0 <_dtoa_r+0x5e8>)
 8013e12:	f003 030f 	and.w	r3, r3, #15
 8013e16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e1e:	9b00      	ldr	r3, [sp, #0]
 8013e20:	05d8      	lsls	r0, r3, #23
 8013e22:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013e26:	d516      	bpl.n	8013e56 <_dtoa_r+0x34e>
 8013e28:	4bb2      	ldr	r3, [pc, #712]	; (80140f4 <_dtoa_r+0x5ec>)
 8013e2a:	ec51 0b19 	vmov	r0, r1, d9
 8013e2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013e32:	f7ec fd35 	bl	80008a0 <__aeabi_ddiv>
 8013e36:	f007 070f 	and.w	r7, r7, #15
 8013e3a:	4682      	mov	sl, r0
 8013e3c:	468b      	mov	fp, r1
 8013e3e:	2503      	movs	r5, #3
 8013e40:	4eac      	ldr	r6, [pc, #688]	; (80140f4 <_dtoa_r+0x5ec>)
 8013e42:	b957      	cbnz	r7, 8013e5a <_dtoa_r+0x352>
 8013e44:	4642      	mov	r2, r8
 8013e46:	464b      	mov	r3, r9
 8013e48:	4650      	mov	r0, sl
 8013e4a:	4659      	mov	r1, fp
 8013e4c:	f7ec fd28 	bl	80008a0 <__aeabi_ddiv>
 8013e50:	4682      	mov	sl, r0
 8013e52:	468b      	mov	fp, r1
 8013e54:	e028      	b.n	8013ea8 <_dtoa_r+0x3a0>
 8013e56:	2502      	movs	r5, #2
 8013e58:	e7f2      	b.n	8013e40 <_dtoa_r+0x338>
 8013e5a:	07f9      	lsls	r1, r7, #31
 8013e5c:	d508      	bpl.n	8013e70 <_dtoa_r+0x368>
 8013e5e:	4640      	mov	r0, r8
 8013e60:	4649      	mov	r1, r9
 8013e62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013e66:	f7ec fbf1 	bl	800064c <__aeabi_dmul>
 8013e6a:	3501      	adds	r5, #1
 8013e6c:	4680      	mov	r8, r0
 8013e6e:	4689      	mov	r9, r1
 8013e70:	107f      	asrs	r7, r7, #1
 8013e72:	3608      	adds	r6, #8
 8013e74:	e7e5      	b.n	8013e42 <_dtoa_r+0x33a>
 8013e76:	f000 809b 	beq.w	8013fb0 <_dtoa_r+0x4a8>
 8013e7a:	9b00      	ldr	r3, [sp, #0]
 8013e7c:	4f9d      	ldr	r7, [pc, #628]	; (80140f4 <_dtoa_r+0x5ec>)
 8013e7e:	425e      	negs	r6, r3
 8013e80:	4b9b      	ldr	r3, [pc, #620]	; (80140f0 <_dtoa_r+0x5e8>)
 8013e82:	f006 020f 	and.w	r2, r6, #15
 8013e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8e:	ec51 0b19 	vmov	r0, r1, d9
 8013e92:	f7ec fbdb 	bl	800064c <__aeabi_dmul>
 8013e96:	1136      	asrs	r6, r6, #4
 8013e98:	4682      	mov	sl, r0
 8013e9a:	468b      	mov	fp, r1
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	2502      	movs	r5, #2
 8013ea0:	2e00      	cmp	r6, #0
 8013ea2:	d17a      	bne.n	8013f9a <_dtoa_r+0x492>
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d1d3      	bne.n	8013e50 <_dtoa_r+0x348>
 8013ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f000 8082 	beq.w	8013fb4 <_dtoa_r+0x4ac>
 8013eb0:	4b91      	ldr	r3, [pc, #580]	; (80140f8 <_dtoa_r+0x5f0>)
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	4650      	mov	r0, sl
 8013eb6:	4659      	mov	r1, fp
 8013eb8:	f7ec fe3a 	bl	8000b30 <__aeabi_dcmplt>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d079      	beq.n	8013fb4 <_dtoa_r+0x4ac>
 8013ec0:	9b03      	ldr	r3, [sp, #12]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d076      	beq.n	8013fb4 <_dtoa_r+0x4ac>
 8013ec6:	9b02      	ldr	r3, [sp, #8]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	dd36      	ble.n	8013f3a <_dtoa_r+0x432>
 8013ecc:	9b00      	ldr	r3, [sp, #0]
 8013ece:	4650      	mov	r0, sl
 8013ed0:	4659      	mov	r1, fp
 8013ed2:	1e5f      	subs	r7, r3, #1
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	4b89      	ldr	r3, [pc, #548]	; (80140fc <_dtoa_r+0x5f4>)
 8013ed8:	f7ec fbb8 	bl	800064c <__aeabi_dmul>
 8013edc:	9e02      	ldr	r6, [sp, #8]
 8013ede:	4682      	mov	sl, r0
 8013ee0:	468b      	mov	fp, r1
 8013ee2:	3501      	adds	r5, #1
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	f7ec fb47 	bl	8000578 <__aeabi_i2d>
 8013eea:	4652      	mov	r2, sl
 8013eec:	465b      	mov	r3, fp
 8013eee:	f7ec fbad 	bl	800064c <__aeabi_dmul>
 8013ef2:	4b83      	ldr	r3, [pc, #524]	; (8014100 <_dtoa_r+0x5f8>)
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	f7ec f9f3 	bl	80002e0 <__adddf3>
 8013efa:	46d0      	mov	r8, sl
 8013efc:	46d9      	mov	r9, fp
 8013efe:	4682      	mov	sl, r0
 8013f00:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013f04:	2e00      	cmp	r6, #0
 8013f06:	d158      	bne.n	8013fba <_dtoa_r+0x4b2>
 8013f08:	4b7e      	ldr	r3, [pc, #504]	; (8014104 <_dtoa_r+0x5fc>)
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	4640      	mov	r0, r8
 8013f0e:	4649      	mov	r1, r9
 8013f10:	f7ec f9e4 	bl	80002dc <__aeabi_dsub>
 8013f14:	4652      	mov	r2, sl
 8013f16:	465b      	mov	r3, fp
 8013f18:	4680      	mov	r8, r0
 8013f1a:	4689      	mov	r9, r1
 8013f1c:	f7ec fe26 	bl	8000b6c <__aeabi_dcmpgt>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	f040 8296 	bne.w	8014452 <_dtoa_r+0x94a>
 8013f26:	4652      	mov	r2, sl
 8013f28:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013f2c:	4640      	mov	r0, r8
 8013f2e:	4649      	mov	r1, r9
 8013f30:	f7ec fdfe 	bl	8000b30 <__aeabi_dcmplt>
 8013f34:	2800      	cmp	r0, #0
 8013f36:	f040 828a 	bne.w	801444e <_dtoa_r+0x946>
 8013f3a:	ec5b ab19 	vmov	sl, fp, d9
 8013f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f2c0 8149 	blt.w	80141d8 <_dtoa_r+0x6d0>
 8013f46:	9a00      	ldr	r2, [sp, #0]
 8013f48:	2a0e      	cmp	r2, #14
 8013f4a:	f300 8145 	bgt.w	80141d8 <_dtoa_r+0x6d0>
 8013f4e:	4b68      	ldr	r3, [pc, #416]	; (80140f0 <_dtoa_r+0x5e8>)
 8013f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	f280 80d6 	bge.w	801410c <_dtoa_r+0x604>
 8013f60:	9b03      	ldr	r3, [sp, #12]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f300 80d2 	bgt.w	801410c <_dtoa_r+0x604>
 8013f68:	f040 8270 	bne.w	801444c <_dtoa_r+0x944>
 8013f6c:	4b65      	ldr	r3, [pc, #404]	; (8014104 <_dtoa_r+0x5fc>)
 8013f6e:	2200      	movs	r2, #0
 8013f70:	4640      	mov	r0, r8
 8013f72:	4649      	mov	r1, r9
 8013f74:	f7ec fb6a 	bl	800064c <__aeabi_dmul>
 8013f78:	4652      	mov	r2, sl
 8013f7a:	465b      	mov	r3, fp
 8013f7c:	f7ec fdec 	bl	8000b58 <__aeabi_dcmpge>
 8013f80:	9e03      	ldr	r6, [sp, #12]
 8013f82:	4637      	mov	r7, r6
 8013f84:	2800      	cmp	r0, #0
 8013f86:	f040 8246 	bne.w	8014416 <_dtoa_r+0x90e>
 8013f8a:	9d01      	ldr	r5, [sp, #4]
 8013f8c:	2331      	movs	r3, #49	; 0x31
 8013f8e:	f805 3b01 	strb.w	r3, [r5], #1
 8013f92:	9b00      	ldr	r3, [sp, #0]
 8013f94:	3301      	adds	r3, #1
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	e241      	b.n	801441e <_dtoa_r+0x916>
 8013f9a:	07f2      	lsls	r2, r6, #31
 8013f9c:	d505      	bpl.n	8013faa <_dtoa_r+0x4a2>
 8013f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013fa2:	f7ec fb53 	bl	800064c <__aeabi_dmul>
 8013fa6:	3501      	adds	r5, #1
 8013fa8:	2301      	movs	r3, #1
 8013faa:	1076      	asrs	r6, r6, #1
 8013fac:	3708      	adds	r7, #8
 8013fae:	e777      	b.n	8013ea0 <_dtoa_r+0x398>
 8013fb0:	2502      	movs	r5, #2
 8013fb2:	e779      	b.n	8013ea8 <_dtoa_r+0x3a0>
 8013fb4:	9f00      	ldr	r7, [sp, #0]
 8013fb6:	9e03      	ldr	r6, [sp, #12]
 8013fb8:	e794      	b.n	8013ee4 <_dtoa_r+0x3dc>
 8013fba:	9901      	ldr	r1, [sp, #4]
 8013fbc:	4b4c      	ldr	r3, [pc, #304]	; (80140f0 <_dtoa_r+0x5e8>)
 8013fbe:	4431      	add	r1, r6
 8013fc0:	910d      	str	r1, [sp, #52]	; 0x34
 8013fc2:	9908      	ldr	r1, [sp, #32]
 8013fc4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013fcc:	2900      	cmp	r1, #0
 8013fce:	d043      	beq.n	8014058 <_dtoa_r+0x550>
 8013fd0:	494d      	ldr	r1, [pc, #308]	; (8014108 <_dtoa_r+0x600>)
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	f7ec fc64 	bl	80008a0 <__aeabi_ddiv>
 8013fd8:	4652      	mov	r2, sl
 8013fda:	465b      	mov	r3, fp
 8013fdc:	f7ec f97e 	bl	80002dc <__aeabi_dsub>
 8013fe0:	9d01      	ldr	r5, [sp, #4]
 8013fe2:	4682      	mov	sl, r0
 8013fe4:	468b      	mov	fp, r1
 8013fe6:	4649      	mov	r1, r9
 8013fe8:	4640      	mov	r0, r8
 8013fea:	f7ec fddf 	bl	8000bac <__aeabi_d2iz>
 8013fee:	4606      	mov	r6, r0
 8013ff0:	f7ec fac2 	bl	8000578 <__aeabi_i2d>
 8013ff4:	4602      	mov	r2, r0
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	4640      	mov	r0, r8
 8013ffa:	4649      	mov	r1, r9
 8013ffc:	f7ec f96e 	bl	80002dc <__aeabi_dsub>
 8014000:	3630      	adds	r6, #48	; 0x30
 8014002:	f805 6b01 	strb.w	r6, [r5], #1
 8014006:	4652      	mov	r2, sl
 8014008:	465b      	mov	r3, fp
 801400a:	4680      	mov	r8, r0
 801400c:	4689      	mov	r9, r1
 801400e:	f7ec fd8f 	bl	8000b30 <__aeabi_dcmplt>
 8014012:	2800      	cmp	r0, #0
 8014014:	d163      	bne.n	80140de <_dtoa_r+0x5d6>
 8014016:	4642      	mov	r2, r8
 8014018:	464b      	mov	r3, r9
 801401a:	4937      	ldr	r1, [pc, #220]	; (80140f8 <_dtoa_r+0x5f0>)
 801401c:	2000      	movs	r0, #0
 801401e:	f7ec f95d 	bl	80002dc <__aeabi_dsub>
 8014022:	4652      	mov	r2, sl
 8014024:	465b      	mov	r3, fp
 8014026:	f7ec fd83 	bl	8000b30 <__aeabi_dcmplt>
 801402a:	2800      	cmp	r0, #0
 801402c:	f040 80b6 	bne.w	801419c <_dtoa_r+0x694>
 8014030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014032:	429d      	cmp	r5, r3
 8014034:	d081      	beq.n	8013f3a <_dtoa_r+0x432>
 8014036:	4b31      	ldr	r3, [pc, #196]	; (80140fc <_dtoa_r+0x5f4>)
 8014038:	2200      	movs	r2, #0
 801403a:	4650      	mov	r0, sl
 801403c:	4659      	mov	r1, fp
 801403e:	f7ec fb05 	bl	800064c <__aeabi_dmul>
 8014042:	4b2e      	ldr	r3, [pc, #184]	; (80140fc <_dtoa_r+0x5f4>)
 8014044:	4682      	mov	sl, r0
 8014046:	468b      	mov	fp, r1
 8014048:	4640      	mov	r0, r8
 801404a:	4649      	mov	r1, r9
 801404c:	2200      	movs	r2, #0
 801404e:	f7ec fafd 	bl	800064c <__aeabi_dmul>
 8014052:	4680      	mov	r8, r0
 8014054:	4689      	mov	r9, r1
 8014056:	e7c6      	b.n	8013fe6 <_dtoa_r+0x4de>
 8014058:	4650      	mov	r0, sl
 801405a:	4659      	mov	r1, fp
 801405c:	f7ec faf6 	bl	800064c <__aeabi_dmul>
 8014060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014062:	9d01      	ldr	r5, [sp, #4]
 8014064:	930f      	str	r3, [sp, #60]	; 0x3c
 8014066:	4682      	mov	sl, r0
 8014068:	468b      	mov	fp, r1
 801406a:	4649      	mov	r1, r9
 801406c:	4640      	mov	r0, r8
 801406e:	f7ec fd9d 	bl	8000bac <__aeabi_d2iz>
 8014072:	4606      	mov	r6, r0
 8014074:	f7ec fa80 	bl	8000578 <__aeabi_i2d>
 8014078:	3630      	adds	r6, #48	; 0x30
 801407a:	4602      	mov	r2, r0
 801407c:	460b      	mov	r3, r1
 801407e:	4640      	mov	r0, r8
 8014080:	4649      	mov	r1, r9
 8014082:	f7ec f92b 	bl	80002dc <__aeabi_dsub>
 8014086:	f805 6b01 	strb.w	r6, [r5], #1
 801408a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801408c:	429d      	cmp	r5, r3
 801408e:	4680      	mov	r8, r0
 8014090:	4689      	mov	r9, r1
 8014092:	f04f 0200 	mov.w	r2, #0
 8014096:	d124      	bne.n	80140e2 <_dtoa_r+0x5da>
 8014098:	4b1b      	ldr	r3, [pc, #108]	; (8014108 <_dtoa_r+0x600>)
 801409a:	4650      	mov	r0, sl
 801409c:	4659      	mov	r1, fp
 801409e:	f7ec f91f 	bl	80002e0 <__adddf3>
 80140a2:	4602      	mov	r2, r0
 80140a4:	460b      	mov	r3, r1
 80140a6:	4640      	mov	r0, r8
 80140a8:	4649      	mov	r1, r9
 80140aa:	f7ec fd5f 	bl	8000b6c <__aeabi_dcmpgt>
 80140ae:	2800      	cmp	r0, #0
 80140b0:	d174      	bne.n	801419c <_dtoa_r+0x694>
 80140b2:	4652      	mov	r2, sl
 80140b4:	465b      	mov	r3, fp
 80140b6:	4914      	ldr	r1, [pc, #80]	; (8014108 <_dtoa_r+0x600>)
 80140b8:	2000      	movs	r0, #0
 80140ba:	f7ec f90f 	bl	80002dc <__aeabi_dsub>
 80140be:	4602      	mov	r2, r0
 80140c0:	460b      	mov	r3, r1
 80140c2:	4640      	mov	r0, r8
 80140c4:	4649      	mov	r1, r9
 80140c6:	f7ec fd33 	bl	8000b30 <__aeabi_dcmplt>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	f43f af35 	beq.w	8013f3a <_dtoa_r+0x432>
 80140d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80140d2:	1e6b      	subs	r3, r5, #1
 80140d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80140d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80140da:	2b30      	cmp	r3, #48	; 0x30
 80140dc:	d0f8      	beq.n	80140d0 <_dtoa_r+0x5c8>
 80140de:	9700      	str	r7, [sp, #0]
 80140e0:	e04a      	b.n	8014178 <_dtoa_r+0x670>
 80140e2:	4b06      	ldr	r3, [pc, #24]	; (80140fc <_dtoa_r+0x5f4>)
 80140e4:	f7ec fab2 	bl	800064c <__aeabi_dmul>
 80140e8:	4680      	mov	r8, r0
 80140ea:	4689      	mov	r9, r1
 80140ec:	e7bd      	b.n	801406a <_dtoa_r+0x562>
 80140ee:	bf00      	nop
 80140f0:	0801b4d8 	.word	0x0801b4d8
 80140f4:	0801b4b0 	.word	0x0801b4b0
 80140f8:	3ff00000 	.word	0x3ff00000
 80140fc:	40240000 	.word	0x40240000
 8014100:	401c0000 	.word	0x401c0000
 8014104:	40140000 	.word	0x40140000
 8014108:	3fe00000 	.word	0x3fe00000
 801410c:	9d01      	ldr	r5, [sp, #4]
 801410e:	4656      	mov	r6, sl
 8014110:	465f      	mov	r7, fp
 8014112:	4642      	mov	r2, r8
 8014114:	464b      	mov	r3, r9
 8014116:	4630      	mov	r0, r6
 8014118:	4639      	mov	r1, r7
 801411a:	f7ec fbc1 	bl	80008a0 <__aeabi_ddiv>
 801411e:	f7ec fd45 	bl	8000bac <__aeabi_d2iz>
 8014122:	4682      	mov	sl, r0
 8014124:	f7ec fa28 	bl	8000578 <__aeabi_i2d>
 8014128:	4642      	mov	r2, r8
 801412a:	464b      	mov	r3, r9
 801412c:	f7ec fa8e 	bl	800064c <__aeabi_dmul>
 8014130:	4602      	mov	r2, r0
 8014132:	460b      	mov	r3, r1
 8014134:	4630      	mov	r0, r6
 8014136:	4639      	mov	r1, r7
 8014138:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801413c:	f7ec f8ce 	bl	80002dc <__aeabi_dsub>
 8014140:	f805 6b01 	strb.w	r6, [r5], #1
 8014144:	9e01      	ldr	r6, [sp, #4]
 8014146:	9f03      	ldr	r7, [sp, #12]
 8014148:	1bae      	subs	r6, r5, r6
 801414a:	42b7      	cmp	r7, r6
 801414c:	4602      	mov	r2, r0
 801414e:	460b      	mov	r3, r1
 8014150:	d135      	bne.n	80141be <_dtoa_r+0x6b6>
 8014152:	f7ec f8c5 	bl	80002e0 <__adddf3>
 8014156:	4642      	mov	r2, r8
 8014158:	464b      	mov	r3, r9
 801415a:	4606      	mov	r6, r0
 801415c:	460f      	mov	r7, r1
 801415e:	f7ec fd05 	bl	8000b6c <__aeabi_dcmpgt>
 8014162:	b9d0      	cbnz	r0, 801419a <_dtoa_r+0x692>
 8014164:	4642      	mov	r2, r8
 8014166:	464b      	mov	r3, r9
 8014168:	4630      	mov	r0, r6
 801416a:	4639      	mov	r1, r7
 801416c:	f7ec fcd6 	bl	8000b1c <__aeabi_dcmpeq>
 8014170:	b110      	cbz	r0, 8014178 <_dtoa_r+0x670>
 8014172:	f01a 0f01 	tst.w	sl, #1
 8014176:	d110      	bne.n	801419a <_dtoa_r+0x692>
 8014178:	4620      	mov	r0, r4
 801417a:	ee18 1a10 	vmov	r1, s16
 801417e:	f001 f8f0 	bl	8015362 <_Bfree>
 8014182:	2300      	movs	r3, #0
 8014184:	9800      	ldr	r0, [sp, #0]
 8014186:	702b      	strb	r3, [r5, #0]
 8014188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801418a:	3001      	adds	r0, #1
 801418c:	6018      	str	r0, [r3, #0]
 801418e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014190:	2b00      	cmp	r3, #0
 8014192:	f43f acf2 	beq.w	8013b7a <_dtoa_r+0x72>
 8014196:	601d      	str	r5, [r3, #0]
 8014198:	e4ef      	b.n	8013b7a <_dtoa_r+0x72>
 801419a:	9f00      	ldr	r7, [sp, #0]
 801419c:	462b      	mov	r3, r5
 801419e:	461d      	mov	r5, r3
 80141a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80141a4:	2a39      	cmp	r2, #57	; 0x39
 80141a6:	d106      	bne.n	80141b6 <_dtoa_r+0x6ae>
 80141a8:	9a01      	ldr	r2, [sp, #4]
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d1f7      	bne.n	801419e <_dtoa_r+0x696>
 80141ae:	9901      	ldr	r1, [sp, #4]
 80141b0:	2230      	movs	r2, #48	; 0x30
 80141b2:	3701      	adds	r7, #1
 80141b4:	700a      	strb	r2, [r1, #0]
 80141b6:	781a      	ldrb	r2, [r3, #0]
 80141b8:	3201      	adds	r2, #1
 80141ba:	701a      	strb	r2, [r3, #0]
 80141bc:	e78f      	b.n	80140de <_dtoa_r+0x5d6>
 80141be:	4ba6      	ldr	r3, [pc, #664]	; (8014458 <_dtoa_r+0x950>)
 80141c0:	2200      	movs	r2, #0
 80141c2:	f7ec fa43 	bl	800064c <__aeabi_dmul>
 80141c6:	2200      	movs	r2, #0
 80141c8:	2300      	movs	r3, #0
 80141ca:	4606      	mov	r6, r0
 80141cc:	460f      	mov	r7, r1
 80141ce:	f7ec fca5 	bl	8000b1c <__aeabi_dcmpeq>
 80141d2:	2800      	cmp	r0, #0
 80141d4:	d09d      	beq.n	8014112 <_dtoa_r+0x60a>
 80141d6:	e7cf      	b.n	8014178 <_dtoa_r+0x670>
 80141d8:	9a08      	ldr	r2, [sp, #32]
 80141da:	2a00      	cmp	r2, #0
 80141dc:	f000 80d7 	beq.w	801438e <_dtoa_r+0x886>
 80141e0:	9a06      	ldr	r2, [sp, #24]
 80141e2:	2a01      	cmp	r2, #1
 80141e4:	f300 80ba 	bgt.w	801435c <_dtoa_r+0x854>
 80141e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141ea:	2a00      	cmp	r2, #0
 80141ec:	f000 80b2 	beq.w	8014354 <_dtoa_r+0x84c>
 80141f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80141f4:	9e07      	ldr	r6, [sp, #28]
 80141f6:	9d04      	ldr	r5, [sp, #16]
 80141f8:	9a04      	ldr	r2, [sp, #16]
 80141fa:	441a      	add	r2, r3
 80141fc:	9204      	str	r2, [sp, #16]
 80141fe:	9a05      	ldr	r2, [sp, #20]
 8014200:	2101      	movs	r1, #1
 8014202:	441a      	add	r2, r3
 8014204:	4620      	mov	r0, r4
 8014206:	9205      	str	r2, [sp, #20]
 8014208:	f001 f94a 	bl	80154a0 <__i2b>
 801420c:	4607      	mov	r7, r0
 801420e:	2d00      	cmp	r5, #0
 8014210:	dd0c      	ble.n	801422c <_dtoa_r+0x724>
 8014212:	9b05      	ldr	r3, [sp, #20]
 8014214:	2b00      	cmp	r3, #0
 8014216:	dd09      	ble.n	801422c <_dtoa_r+0x724>
 8014218:	42ab      	cmp	r3, r5
 801421a:	9a04      	ldr	r2, [sp, #16]
 801421c:	bfa8      	it	ge
 801421e:	462b      	movge	r3, r5
 8014220:	1ad2      	subs	r2, r2, r3
 8014222:	9204      	str	r2, [sp, #16]
 8014224:	9a05      	ldr	r2, [sp, #20]
 8014226:	1aed      	subs	r5, r5, r3
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	9305      	str	r3, [sp, #20]
 801422c:	9b07      	ldr	r3, [sp, #28]
 801422e:	b31b      	cbz	r3, 8014278 <_dtoa_r+0x770>
 8014230:	9b08      	ldr	r3, [sp, #32]
 8014232:	2b00      	cmp	r3, #0
 8014234:	f000 80af 	beq.w	8014396 <_dtoa_r+0x88e>
 8014238:	2e00      	cmp	r6, #0
 801423a:	dd13      	ble.n	8014264 <_dtoa_r+0x75c>
 801423c:	4639      	mov	r1, r7
 801423e:	4632      	mov	r2, r6
 8014240:	4620      	mov	r0, r4
 8014242:	f001 f9ed 	bl	8015620 <__pow5mult>
 8014246:	ee18 2a10 	vmov	r2, s16
 801424a:	4601      	mov	r1, r0
 801424c:	4607      	mov	r7, r0
 801424e:	4620      	mov	r0, r4
 8014250:	f001 f93c 	bl	80154cc <__multiply>
 8014254:	ee18 1a10 	vmov	r1, s16
 8014258:	4680      	mov	r8, r0
 801425a:	4620      	mov	r0, r4
 801425c:	f001 f881 	bl	8015362 <_Bfree>
 8014260:	ee08 8a10 	vmov	s16, r8
 8014264:	9b07      	ldr	r3, [sp, #28]
 8014266:	1b9a      	subs	r2, r3, r6
 8014268:	d006      	beq.n	8014278 <_dtoa_r+0x770>
 801426a:	ee18 1a10 	vmov	r1, s16
 801426e:	4620      	mov	r0, r4
 8014270:	f001 f9d6 	bl	8015620 <__pow5mult>
 8014274:	ee08 0a10 	vmov	s16, r0
 8014278:	2101      	movs	r1, #1
 801427a:	4620      	mov	r0, r4
 801427c:	f001 f910 	bl	80154a0 <__i2b>
 8014280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014282:	2b00      	cmp	r3, #0
 8014284:	4606      	mov	r6, r0
 8014286:	f340 8088 	ble.w	801439a <_dtoa_r+0x892>
 801428a:	461a      	mov	r2, r3
 801428c:	4601      	mov	r1, r0
 801428e:	4620      	mov	r0, r4
 8014290:	f001 f9c6 	bl	8015620 <__pow5mult>
 8014294:	9b06      	ldr	r3, [sp, #24]
 8014296:	2b01      	cmp	r3, #1
 8014298:	4606      	mov	r6, r0
 801429a:	f340 8081 	ble.w	80143a0 <_dtoa_r+0x898>
 801429e:	f04f 0800 	mov.w	r8, #0
 80142a2:	6933      	ldr	r3, [r6, #16]
 80142a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80142a8:	6918      	ldr	r0, [r3, #16]
 80142aa:	f001 f8a9 	bl	8015400 <__hi0bits>
 80142ae:	f1c0 0020 	rsb	r0, r0, #32
 80142b2:	9b05      	ldr	r3, [sp, #20]
 80142b4:	4418      	add	r0, r3
 80142b6:	f010 001f 	ands.w	r0, r0, #31
 80142ba:	f000 8092 	beq.w	80143e2 <_dtoa_r+0x8da>
 80142be:	f1c0 0320 	rsb	r3, r0, #32
 80142c2:	2b04      	cmp	r3, #4
 80142c4:	f340 808a 	ble.w	80143dc <_dtoa_r+0x8d4>
 80142c8:	f1c0 001c 	rsb	r0, r0, #28
 80142cc:	9b04      	ldr	r3, [sp, #16]
 80142ce:	4403      	add	r3, r0
 80142d0:	9304      	str	r3, [sp, #16]
 80142d2:	9b05      	ldr	r3, [sp, #20]
 80142d4:	4403      	add	r3, r0
 80142d6:	4405      	add	r5, r0
 80142d8:	9305      	str	r3, [sp, #20]
 80142da:	9b04      	ldr	r3, [sp, #16]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	dd07      	ble.n	80142f0 <_dtoa_r+0x7e8>
 80142e0:	ee18 1a10 	vmov	r1, s16
 80142e4:	461a      	mov	r2, r3
 80142e6:	4620      	mov	r0, r4
 80142e8:	f001 f9da 	bl	80156a0 <__lshift>
 80142ec:	ee08 0a10 	vmov	s16, r0
 80142f0:	9b05      	ldr	r3, [sp, #20]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	dd05      	ble.n	8014302 <_dtoa_r+0x7fa>
 80142f6:	4631      	mov	r1, r6
 80142f8:	461a      	mov	r2, r3
 80142fa:	4620      	mov	r0, r4
 80142fc:	f001 f9d0 	bl	80156a0 <__lshift>
 8014300:	4606      	mov	r6, r0
 8014302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014304:	2b00      	cmp	r3, #0
 8014306:	d06e      	beq.n	80143e6 <_dtoa_r+0x8de>
 8014308:	ee18 0a10 	vmov	r0, s16
 801430c:	4631      	mov	r1, r6
 801430e:	f001 fa37 	bl	8015780 <__mcmp>
 8014312:	2800      	cmp	r0, #0
 8014314:	da67      	bge.n	80143e6 <_dtoa_r+0x8de>
 8014316:	9b00      	ldr	r3, [sp, #0]
 8014318:	3b01      	subs	r3, #1
 801431a:	ee18 1a10 	vmov	r1, s16
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	220a      	movs	r2, #10
 8014322:	2300      	movs	r3, #0
 8014324:	4620      	mov	r0, r4
 8014326:	f001 f825 	bl	8015374 <__multadd>
 801432a:	9b08      	ldr	r3, [sp, #32]
 801432c:	ee08 0a10 	vmov	s16, r0
 8014330:	2b00      	cmp	r3, #0
 8014332:	f000 81b0 	beq.w	8014696 <_dtoa_r+0xb8e>
 8014336:	2300      	movs	r3, #0
 8014338:	4639      	mov	r1, r7
 801433a:	220a      	movs	r2, #10
 801433c:	4620      	mov	r0, r4
 801433e:	f001 f819 	bl	8015374 <__multadd>
 8014342:	9b02      	ldr	r3, [sp, #8]
 8014344:	2b00      	cmp	r3, #0
 8014346:	4607      	mov	r7, r0
 8014348:	f300 808e 	bgt.w	8014468 <_dtoa_r+0x960>
 801434c:	9b06      	ldr	r3, [sp, #24]
 801434e:	2b02      	cmp	r3, #2
 8014350:	dc51      	bgt.n	80143f6 <_dtoa_r+0x8ee>
 8014352:	e089      	b.n	8014468 <_dtoa_r+0x960>
 8014354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801435a:	e74b      	b.n	80141f4 <_dtoa_r+0x6ec>
 801435c:	9b03      	ldr	r3, [sp, #12]
 801435e:	1e5e      	subs	r6, r3, #1
 8014360:	9b07      	ldr	r3, [sp, #28]
 8014362:	42b3      	cmp	r3, r6
 8014364:	bfbf      	itttt	lt
 8014366:	9b07      	ldrlt	r3, [sp, #28]
 8014368:	9607      	strlt	r6, [sp, #28]
 801436a:	1af2      	sublt	r2, r6, r3
 801436c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801436e:	bfb6      	itet	lt
 8014370:	189b      	addlt	r3, r3, r2
 8014372:	1b9e      	subge	r6, r3, r6
 8014374:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014376:	9b03      	ldr	r3, [sp, #12]
 8014378:	bfb8      	it	lt
 801437a:	2600      	movlt	r6, #0
 801437c:	2b00      	cmp	r3, #0
 801437e:	bfb7      	itett	lt
 8014380:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014384:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014388:	1a9d      	sublt	r5, r3, r2
 801438a:	2300      	movlt	r3, #0
 801438c:	e734      	b.n	80141f8 <_dtoa_r+0x6f0>
 801438e:	9e07      	ldr	r6, [sp, #28]
 8014390:	9d04      	ldr	r5, [sp, #16]
 8014392:	9f08      	ldr	r7, [sp, #32]
 8014394:	e73b      	b.n	801420e <_dtoa_r+0x706>
 8014396:	9a07      	ldr	r2, [sp, #28]
 8014398:	e767      	b.n	801426a <_dtoa_r+0x762>
 801439a:	9b06      	ldr	r3, [sp, #24]
 801439c:	2b01      	cmp	r3, #1
 801439e:	dc18      	bgt.n	80143d2 <_dtoa_r+0x8ca>
 80143a0:	f1ba 0f00 	cmp.w	sl, #0
 80143a4:	d115      	bne.n	80143d2 <_dtoa_r+0x8ca>
 80143a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143aa:	b993      	cbnz	r3, 80143d2 <_dtoa_r+0x8ca>
 80143ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80143b0:	0d1b      	lsrs	r3, r3, #20
 80143b2:	051b      	lsls	r3, r3, #20
 80143b4:	b183      	cbz	r3, 80143d8 <_dtoa_r+0x8d0>
 80143b6:	9b04      	ldr	r3, [sp, #16]
 80143b8:	3301      	adds	r3, #1
 80143ba:	9304      	str	r3, [sp, #16]
 80143bc:	9b05      	ldr	r3, [sp, #20]
 80143be:	3301      	adds	r3, #1
 80143c0:	9305      	str	r3, [sp, #20]
 80143c2:	f04f 0801 	mov.w	r8, #1
 80143c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	f47f af6a 	bne.w	80142a2 <_dtoa_r+0x79a>
 80143ce:	2001      	movs	r0, #1
 80143d0:	e76f      	b.n	80142b2 <_dtoa_r+0x7aa>
 80143d2:	f04f 0800 	mov.w	r8, #0
 80143d6:	e7f6      	b.n	80143c6 <_dtoa_r+0x8be>
 80143d8:	4698      	mov	r8, r3
 80143da:	e7f4      	b.n	80143c6 <_dtoa_r+0x8be>
 80143dc:	f43f af7d 	beq.w	80142da <_dtoa_r+0x7d2>
 80143e0:	4618      	mov	r0, r3
 80143e2:	301c      	adds	r0, #28
 80143e4:	e772      	b.n	80142cc <_dtoa_r+0x7c4>
 80143e6:	9b03      	ldr	r3, [sp, #12]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	dc37      	bgt.n	801445c <_dtoa_r+0x954>
 80143ec:	9b06      	ldr	r3, [sp, #24]
 80143ee:	2b02      	cmp	r3, #2
 80143f0:	dd34      	ble.n	801445c <_dtoa_r+0x954>
 80143f2:	9b03      	ldr	r3, [sp, #12]
 80143f4:	9302      	str	r3, [sp, #8]
 80143f6:	9b02      	ldr	r3, [sp, #8]
 80143f8:	b96b      	cbnz	r3, 8014416 <_dtoa_r+0x90e>
 80143fa:	4631      	mov	r1, r6
 80143fc:	2205      	movs	r2, #5
 80143fe:	4620      	mov	r0, r4
 8014400:	f000 ffb8 	bl	8015374 <__multadd>
 8014404:	4601      	mov	r1, r0
 8014406:	4606      	mov	r6, r0
 8014408:	ee18 0a10 	vmov	r0, s16
 801440c:	f001 f9b8 	bl	8015780 <__mcmp>
 8014410:	2800      	cmp	r0, #0
 8014412:	f73f adba 	bgt.w	8013f8a <_dtoa_r+0x482>
 8014416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014418:	9d01      	ldr	r5, [sp, #4]
 801441a:	43db      	mvns	r3, r3
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	f04f 0800 	mov.w	r8, #0
 8014422:	4631      	mov	r1, r6
 8014424:	4620      	mov	r0, r4
 8014426:	f000 ff9c 	bl	8015362 <_Bfree>
 801442a:	2f00      	cmp	r7, #0
 801442c:	f43f aea4 	beq.w	8014178 <_dtoa_r+0x670>
 8014430:	f1b8 0f00 	cmp.w	r8, #0
 8014434:	d005      	beq.n	8014442 <_dtoa_r+0x93a>
 8014436:	45b8      	cmp	r8, r7
 8014438:	d003      	beq.n	8014442 <_dtoa_r+0x93a>
 801443a:	4641      	mov	r1, r8
 801443c:	4620      	mov	r0, r4
 801443e:	f000 ff90 	bl	8015362 <_Bfree>
 8014442:	4639      	mov	r1, r7
 8014444:	4620      	mov	r0, r4
 8014446:	f000 ff8c 	bl	8015362 <_Bfree>
 801444a:	e695      	b.n	8014178 <_dtoa_r+0x670>
 801444c:	2600      	movs	r6, #0
 801444e:	4637      	mov	r7, r6
 8014450:	e7e1      	b.n	8014416 <_dtoa_r+0x90e>
 8014452:	9700      	str	r7, [sp, #0]
 8014454:	4637      	mov	r7, r6
 8014456:	e598      	b.n	8013f8a <_dtoa_r+0x482>
 8014458:	40240000 	.word	0x40240000
 801445c:	9b08      	ldr	r3, [sp, #32]
 801445e:	2b00      	cmp	r3, #0
 8014460:	f000 80c9 	beq.w	80145f6 <_dtoa_r+0xaee>
 8014464:	9b03      	ldr	r3, [sp, #12]
 8014466:	9302      	str	r3, [sp, #8]
 8014468:	2d00      	cmp	r5, #0
 801446a:	dd05      	ble.n	8014478 <_dtoa_r+0x970>
 801446c:	4639      	mov	r1, r7
 801446e:	462a      	mov	r2, r5
 8014470:	4620      	mov	r0, r4
 8014472:	f001 f915 	bl	80156a0 <__lshift>
 8014476:	4607      	mov	r7, r0
 8014478:	f1b8 0f00 	cmp.w	r8, #0
 801447c:	d05a      	beq.n	8014534 <_dtoa_r+0xa2c>
 801447e:	6879      	ldr	r1, [r7, #4]
 8014480:	4620      	mov	r0, r4
 8014482:	f000 ff49 	bl	8015318 <_Balloc>
 8014486:	4605      	mov	r5, r0
 8014488:	b920      	cbnz	r0, 8014494 <_dtoa_r+0x98c>
 801448a:	4b87      	ldr	r3, [pc, #540]	; (80146a8 <_dtoa_r+0xba0>)
 801448c:	4602      	mov	r2, r0
 801448e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014492:	e477      	b.n	8013d84 <_dtoa_r+0x27c>
 8014494:	693a      	ldr	r2, [r7, #16]
 8014496:	3202      	adds	r2, #2
 8014498:	0092      	lsls	r2, r2, #2
 801449a:	f107 010c 	add.w	r1, r7, #12
 801449e:	300c      	adds	r0, #12
 80144a0:	f7fc f804 	bl	80104ac <memcpy>
 80144a4:	2201      	movs	r2, #1
 80144a6:	4629      	mov	r1, r5
 80144a8:	4620      	mov	r0, r4
 80144aa:	f001 f8f9 	bl	80156a0 <__lshift>
 80144ae:	9b01      	ldr	r3, [sp, #4]
 80144b0:	f103 0901 	add.w	r9, r3, #1
 80144b4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80144b8:	4413      	add	r3, r2
 80144ba:	9305      	str	r3, [sp, #20]
 80144bc:	f00a 0301 	and.w	r3, sl, #1
 80144c0:	46b8      	mov	r8, r7
 80144c2:	9304      	str	r3, [sp, #16]
 80144c4:	4607      	mov	r7, r0
 80144c6:	4631      	mov	r1, r6
 80144c8:	ee18 0a10 	vmov	r0, s16
 80144cc:	f7ff fa8e 	bl	80139ec <quorem>
 80144d0:	4641      	mov	r1, r8
 80144d2:	9002      	str	r0, [sp, #8]
 80144d4:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80144d8:	ee18 0a10 	vmov	r0, s16
 80144dc:	f001 f950 	bl	8015780 <__mcmp>
 80144e0:	463a      	mov	r2, r7
 80144e2:	9003      	str	r0, [sp, #12]
 80144e4:	4631      	mov	r1, r6
 80144e6:	4620      	mov	r0, r4
 80144e8:	f001 f966 	bl	80157b8 <__mdiff>
 80144ec:	68c2      	ldr	r2, [r0, #12]
 80144ee:	f109 3bff 	add.w	fp, r9, #4294967295
 80144f2:	4605      	mov	r5, r0
 80144f4:	bb02      	cbnz	r2, 8014538 <_dtoa_r+0xa30>
 80144f6:	4601      	mov	r1, r0
 80144f8:	ee18 0a10 	vmov	r0, s16
 80144fc:	f001 f940 	bl	8015780 <__mcmp>
 8014500:	4602      	mov	r2, r0
 8014502:	4629      	mov	r1, r5
 8014504:	4620      	mov	r0, r4
 8014506:	9207      	str	r2, [sp, #28]
 8014508:	f000 ff2b 	bl	8015362 <_Bfree>
 801450c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014510:	ea43 0102 	orr.w	r1, r3, r2
 8014514:	9b04      	ldr	r3, [sp, #16]
 8014516:	430b      	orrs	r3, r1
 8014518:	464d      	mov	r5, r9
 801451a:	d10f      	bne.n	801453c <_dtoa_r+0xa34>
 801451c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014520:	d02a      	beq.n	8014578 <_dtoa_r+0xa70>
 8014522:	9b03      	ldr	r3, [sp, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	dd02      	ble.n	801452e <_dtoa_r+0xa26>
 8014528:	9b02      	ldr	r3, [sp, #8]
 801452a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801452e:	f88b a000 	strb.w	sl, [fp]
 8014532:	e776      	b.n	8014422 <_dtoa_r+0x91a>
 8014534:	4638      	mov	r0, r7
 8014536:	e7ba      	b.n	80144ae <_dtoa_r+0x9a6>
 8014538:	2201      	movs	r2, #1
 801453a:	e7e2      	b.n	8014502 <_dtoa_r+0x9fa>
 801453c:	9b03      	ldr	r3, [sp, #12]
 801453e:	2b00      	cmp	r3, #0
 8014540:	db04      	blt.n	801454c <_dtoa_r+0xa44>
 8014542:	9906      	ldr	r1, [sp, #24]
 8014544:	430b      	orrs	r3, r1
 8014546:	9904      	ldr	r1, [sp, #16]
 8014548:	430b      	orrs	r3, r1
 801454a:	d122      	bne.n	8014592 <_dtoa_r+0xa8a>
 801454c:	2a00      	cmp	r2, #0
 801454e:	ddee      	ble.n	801452e <_dtoa_r+0xa26>
 8014550:	ee18 1a10 	vmov	r1, s16
 8014554:	2201      	movs	r2, #1
 8014556:	4620      	mov	r0, r4
 8014558:	f001 f8a2 	bl	80156a0 <__lshift>
 801455c:	4631      	mov	r1, r6
 801455e:	ee08 0a10 	vmov	s16, r0
 8014562:	f001 f90d 	bl	8015780 <__mcmp>
 8014566:	2800      	cmp	r0, #0
 8014568:	dc03      	bgt.n	8014572 <_dtoa_r+0xa6a>
 801456a:	d1e0      	bne.n	801452e <_dtoa_r+0xa26>
 801456c:	f01a 0f01 	tst.w	sl, #1
 8014570:	d0dd      	beq.n	801452e <_dtoa_r+0xa26>
 8014572:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014576:	d1d7      	bne.n	8014528 <_dtoa_r+0xa20>
 8014578:	2339      	movs	r3, #57	; 0x39
 801457a:	f88b 3000 	strb.w	r3, [fp]
 801457e:	462b      	mov	r3, r5
 8014580:	461d      	mov	r5, r3
 8014582:	3b01      	subs	r3, #1
 8014584:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014588:	2a39      	cmp	r2, #57	; 0x39
 801458a:	d071      	beq.n	8014670 <_dtoa_r+0xb68>
 801458c:	3201      	adds	r2, #1
 801458e:	701a      	strb	r2, [r3, #0]
 8014590:	e747      	b.n	8014422 <_dtoa_r+0x91a>
 8014592:	2a00      	cmp	r2, #0
 8014594:	dd07      	ble.n	80145a6 <_dtoa_r+0xa9e>
 8014596:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801459a:	d0ed      	beq.n	8014578 <_dtoa_r+0xa70>
 801459c:	f10a 0301 	add.w	r3, sl, #1
 80145a0:	f88b 3000 	strb.w	r3, [fp]
 80145a4:	e73d      	b.n	8014422 <_dtoa_r+0x91a>
 80145a6:	9b05      	ldr	r3, [sp, #20]
 80145a8:	f809 ac01 	strb.w	sl, [r9, #-1]
 80145ac:	4599      	cmp	r9, r3
 80145ae:	d047      	beq.n	8014640 <_dtoa_r+0xb38>
 80145b0:	ee18 1a10 	vmov	r1, s16
 80145b4:	2300      	movs	r3, #0
 80145b6:	220a      	movs	r2, #10
 80145b8:	4620      	mov	r0, r4
 80145ba:	f000 fedb 	bl	8015374 <__multadd>
 80145be:	45b8      	cmp	r8, r7
 80145c0:	ee08 0a10 	vmov	s16, r0
 80145c4:	f04f 0300 	mov.w	r3, #0
 80145c8:	f04f 020a 	mov.w	r2, #10
 80145cc:	4641      	mov	r1, r8
 80145ce:	4620      	mov	r0, r4
 80145d0:	d106      	bne.n	80145e0 <_dtoa_r+0xad8>
 80145d2:	f000 fecf 	bl	8015374 <__multadd>
 80145d6:	4680      	mov	r8, r0
 80145d8:	4607      	mov	r7, r0
 80145da:	f109 0901 	add.w	r9, r9, #1
 80145de:	e772      	b.n	80144c6 <_dtoa_r+0x9be>
 80145e0:	f000 fec8 	bl	8015374 <__multadd>
 80145e4:	4639      	mov	r1, r7
 80145e6:	4680      	mov	r8, r0
 80145e8:	2300      	movs	r3, #0
 80145ea:	220a      	movs	r2, #10
 80145ec:	4620      	mov	r0, r4
 80145ee:	f000 fec1 	bl	8015374 <__multadd>
 80145f2:	4607      	mov	r7, r0
 80145f4:	e7f1      	b.n	80145da <_dtoa_r+0xad2>
 80145f6:	9b03      	ldr	r3, [sp, #12]
 80145f8:	9302      	str	r3, [sp, #8]
 80145fa:	9d01      	ldr	r5, [sp, #4]
 80145fc:	ee18 0a10 	vmov	r0, s16
 8014600:	4631      	mov	r1, r6
 8014602:	f7ff f9f3 	bl	80139ec <quorem>
 8014606:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801460a:	9b01      	ldr	r3, [sp, #4]
 801460c:	f805 ab01 	strb.w	sl, [r5], #1
 8014610:	1aea      	subs	r2, r5, r3
 8014612:	9b02      	ldr	r3, [sp, #8]
 8014614:	4293      	cmp	r3, r2
 8014616:	dd09      	ble.n	801462c <_dtoa_r+0xb24>
 8014618:	ee18 1a10 	vmov	r1, s16
 801461c:	2300      	movs	r3, #0
 801461e:	220a      	movs	r2, #10
 8014620:	4620      	mov	r0, r4
 8014622:	f000 fea7 	bl	8015374 <__multadd>
 8014626:	ee08 0a10 	vmov	s16, r0
 801462a:	e7e7      	b.n	80145fc <_dtoa_r+0xaf4>
 801462c:	9b02      	ldr	r3, [sp, #8]
 801462e:	2b00      	cmp	r3, #0
 8014630:	bfc8      	it	gt
 8014632:	461d      	movgt	r5, r3
 8014634:	9b01      	ldr	r3, [sp, #4]
 8014636:	bfd8      	it	le
 8014638:	2501      	movle	r5, #1
 801463a:	441d      	add	r5, r3
 801463c:	f04f 0800 	mov.w	r8, #0
 8014640:	ee18 1a10 	vmov	r1, s16
 8014644:	2201      	movs	r2, #1
 8014646:	4620      	mov	r0, r4
 8014648:	f001 f82a 	bl	80156a0 <__lshift>
 801464c:	4631      	mov	r1, r6
 801464e:	ee08 0a10 	vmov	s16, r0
 8014652:	f001 f895 	bl	8015780 <__mcmp>
 8014656:	2800      	cmp	r0, #0
 8014658:	dc91      	bgt.n	801457e <_dtoa_r+0xa76>
 801465a:	d102      	bne.n	8014662 <_dtoa_r+0xb5a>
 801465c:	f01a 0f01 	tst.w	sl, #1
 8014660:	d18d      	bne.n	801457e <_dtoa_r+0xa76>
 8014662:	462b      	mov	r3, r5
 8014664:	461d      	mov	r5, r3
 8014666:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801466a:	2a30      	cmp	r2, #48	; 0x30
 801466c:	d0fa      	beq.n	8014664 <_dtoa_r+0xb5c>
 801466e:	e6d8      	b.n	8014422 <_dtoa_r+0x91a>
 8014670:	9a01      	ldr	r2, [sp, #4]
 8014672:	429a      	cmp	r2, r3
 8014674:	d184      	bne.n	8014580 <_dtoa_r+0xa78>
 8014676:	9b00      	ldr	r3, [sp, #0]
 8014678:	3301      	adds	r3, #1
 801467a:	9300      	str	r3, [sp, #0]
 801467c:	2331      	movs	r3, #49	; 0x31
 801467e:	7013      	strb	r3, [r2, #0]
 8014680:	e6cf      	b.n	8014422 <_dtoa_r+0x91a>
 8014682:	4b0a      	ldr	r3, [pc, #40]	; (80146ac <_dtoa_r+0xba4>)
 8014684:	f7ff ba97 	b.w	8013bb6 <_dtoa_r+0xae>
 8014688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801468a:	2b00      	cmp	r3, #0
 801468c:	f47f aa7b 	bne.w	8013b86 <_dtoa_r+0x7e>
 8014690:	4b07      	ldr	r3, [pc, #28]	; (80146b0 <_dtoa_r+0xba8>)
 8014692:	f7ff ba90 	b.w	8013bb6 <_dtoa_r+0xae>
 8014696:	9b02      	ldr	r3, [sp, #8]
 8014698:	2b00      	cmp	r3, #0
 801469a:	dcae      	bgt.n	80145fa <_dtoa_r+0xaf2>
 801469c:	9b06      	ldr	r3, [sp, #24]
 801469e:	2b02      	cmp	r3, #2
 80146a0:	f73f aea9 	bgt.w	80143f6 <_dtoa_r+0x8ee>
 80146a4:	e7a9      	b.n	80145fa <_dtoa_r+0xaf2>
 80146a6:	bf00      	nop
 80146a8:	0801b3e1 	.word	0x0801b3e1
 80146ac:	0801b356 	.word	0x0801b356
 80146b0:	0801b3d8 	.word	0x0801b3d8

080146b4 <__errno>:
 80146b4:	4b01      	ldr	r3, [pc, #4]	; (80146bc <__errno+0x8>)
 80146b6:	6818      	ldr	r0, [r3, #0]
 80146b8:	4770      	bx	lr
 80146ba:	bf00      	nop
 80146bc:	2000001c 	.word	0x2000001c

080146c0 <__sflush_r>:
 80146c0:	898b      	ldrh	r3, [r1, #12]
 80146c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80146c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ca:	4605      	mov	r5, r0
 80146cc:	0718      	lsls	r0, r3, #28
 80146ce:	460c      	mov	r4, r1
 80146d0:	d45f      	bmi.n	8014792 <__sflush_r+0xd2>
 80146d2:	684b      	ldr	r3, [r1, #4]
 80146d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80146d8:	2b00      	cmp	r3, #0
 80146da:	818a      	strh	r2, [r1, #12]
 80146dc:	dc05      	bgt.n	80146ea <__sflush_r+0x2a>
 80146de:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	dc02      	bgt.n	80146ea <__sflush_r+0x2a>
 80146e4:	2000      	movs	r0, #0
 80146e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80146ec:	2e00      	cmp	r6, #0
 80146ee:	d0f9      	beq.n	80146e4 <__sflush_r+0x24>
 80146f0:	2300      	movs	r3, #0
 80146f2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80146f6:	682f      	ldr	r7, [r5, #0]
 80146f8:	602b      	str	r3, [r5, #0]
 80146fa:	d036      	beq.n	801476a <__sflush_r+0xaa>
 80146fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80146fe:	89a3      	ldrh	r3, [r4, #12]
 8014700:	075a      	lsls	r2, r3, #29
 8014702:	d505      	bpl.n	8014710 <__sflush_r+0x50>
 8014704:	6863      	ldr	r3, [r4, #4]
 8014706:	1ac0      	subs	r0, r0, r3
 8014708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801470a:	b10b      	cbz	r3, 8014710 <__sflush_r+0x50>
 801470c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801470e:	1ac0      	subs	r0, r0, r3
 8014710:	2300      	movs	r3, #0
 8014712:	4602      	mov	r2, r0
 8014714:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014716:	69e1      	ldr	r1, [r4, #28]
 8014718:	4628      	mov	r0, r5
 801471a:	47b0      	blx	r6
 801471c:	1c43      	adds	r3, r0, #1
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	d106      	bne.n	8014730 <__sflush_r+0x70>
 8014722:	6829      	ldr	r1, [r5, #0]
 8014724:	291d      	cmp	r1, #29
 8014726:	d830      	bhi.n	801478a <__sflush_r+0xca>
 8014728:	4a2b      	ldr	r2, [pc, #172]	; (80147d8 <__sflush_r+0x118>)
 801472a:	40ca      	lsrs	r2, r1
 801472c:	07d6      	lsls	r6, r2, #31
 801472e:	d52c      	bpl.n	801478a <__sflush_r+0xca>
 8014730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014734:	b21b      	sxth	r3, r3
 8014736:	2200      	movs	r2, #0
 8014738:	6062      	str	r2, [r4, #4]
 801473a:	04d9      	lsls	r1, r3, #19
 801473c:	6922      	ldr	r2, [r4, #16]
 801473e:	81a3      	strh	r3, [r4, #12]
 8014740:	6022      	str	r2, [r4, #0]
 8014742:	d504      	bpl.n	801474e <__sflush_r+0x8e>
 8014744:	1c42      	adds	r2, r0, #1
 8014746:	d101      	bne.n	801474c <__sflush_r+0x8c>
 8014748:	682b      	ldr	r3, [r5, #0]
 801474a:	b903      	cbnz	r3, 801474e <__sflush_r+0x8e>
 801474c:	6520      	str	r0, [r4, #80]	; 0x50
 801474e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014750:	602f      	str	r7, [r5, #0]
 8014752:	2900      	cmp	r1, #0
 8014754:	d0c6      	beq.n	80146e4 <__sflush_r+0x24>
 8014756:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801475a:	4299      	cmp	r1, r3
 801475c:	d002      	beq.n	8014764 <__sflush_r+0xa4>
 801475e:	4628      	mov	r0, r5
 8014760:	f000 f938 	bl	80149d4 <_free_r>
 8014764:	2000      	movs	r0, #0
 8014766:	6320      	str	r0, [r4, #48]	; 0x30
 8014768:	e7bd      	b.n	80146e6 <__sflush_r+0x26>
 801476a:	69e1      	ldr	r1, [r4, #28]
 801476c:	2301      	movs	r3, #1
 801476e:	4628      	mov	r0, r5
 8014770:	47b0      	blx	r6
 8014772:	1c41      	adds	r1, r0, #1
 8014774:	d1c3      	bne.n	80146fe <__sflush_r+0x3e>
 8014776:	682b      	ldr	r3, [r5, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d0c0      	beq.n	80146fe <__sflush_r+0x3e>
 801477c:	2b1d      	cmp	r3, #29
 801477e:	d001      	beq.n	8014784 <__sflush_r+0xc4>
 8014780:	2b16      	cmp	r3, #22
 8014782:	d101      	bne.n	8014788 <__sflush_r+0xc8>
 8014784:	602f      	str	r7, [r5, #0]
 8014786:	e7ad      	b.n	80146e4 <__sflush_r+0x24>
 8014788:	89a3      	ldrh	r3, [r4, #12]
 801478a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801478e:	81a3      	strh	r3, [r4, #12]
 8014790:	e7a9      	b.n	80146e6 <__sflush_r+0x26>
 8014792:	690f      	ldr	r7, [r1, #16]
 8014794:	2f00      	cmp	r7, #0
 8014796:	d0a5      	beq.n	80146e4 <__sflush_r+0x24>
 8014798:	079b      	lsls	r3, r3, #30
 801479a:	680e      	ldr	r6, [r1, #0]
 801479c:	bf08      	it	eq
 801479e:	694b      	ldreq	r3, [r1, #20]
 80147a0:	600f      	str	r7, [r1, #0]
 80147a2:	bf18      	it	ne
 80147a4:	2300      	movne	r3, #0
 80147a6:	eba6 0807 	sub.w	r8, r6, r7
 80147aa:	608b      	str	r3, [r1, #8]
 80147ac:	f1b8 0f00 	cmp.w	r8, #0
 80147b0:	dd98      	ble.n	80146e4 <__sflush_r+0x24>
 80147b2:	69e1      	ldr	r1, [r4, #28]
 80147b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80147b6:	4643      	mov	r3, r8
 80147b8:	463a      	mov	r2, r7
 80147ba:	4628      	mov	r0, r5
 80147bc:	47b0      	blx	r6
 80147be:	2800      	cmp	r0, #0
 80147c0:	dc06      	bgt.n	80147d0 <__sflush_r+0x110>
 80147c2:	89a3      	ldrh	r3, [r4, #12]
 80147c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147c8:	81a3      	strh	r3, [r4, #12]
 80147ca:	f04f 30ff 	mov.w	r0, #4294967295
 80147ce:	e78a      	b.n	80146e6 <__sflush_r+0x26>
 80147d0:	4407      	add	r7, r0
 80147d2:	eba8 0800 	sub.w	r8, r8, r0
 80147d6:	e7e9      	b.n	80147ac <__sflush_r+0xec>
 80147d8:	20400001 	.word	0x20400001

080147dc <_fflush_r>:
 80147dc:	b538      	push	{r3, r4, r5, lr}
 80147de:	460c      	mov	r4, r1
 80147e0:	4605      	mov	r5, r0
 80147e2:	b118      	cbz	r0, 80147ec <_fflush_r+0x10>
 80147e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80147e6:	b90b      	cbnz	r3, 80147ec <_fflush_r+0x10>
 80147e8:	f000 f864 	bl	80148b4 <__sinit>
 80147ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147f0:	b1bb      	cbz	r3, 8014822 <_fflush_r+0x46>
 80147f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80147f4:	07d0      	lsls	r0, r2, #31
 80147f6:	d404      	bmi.n	8014802 <_fflush_r+0x26>
 80147f8:	0599      	lsls	r1, r3, #22
 80147fa:	d402      	bmi.n	8014802 <_fflush_r+0x26>
 80147fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147fe:	f000 fac4 	bl	8014d8a <__retarget_lock_acquire_recursive>
 8014802:	4628      	mov	r0, r5
 8014804:	4621      	mov	r1, r4
 8014806:	f7ff ff5b 	bl	80146c0 <__sflush_r>
 801480a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801480c:	07da      	lsls	r2, r3, #31
 801480e:	4605      	mov	r5, r0
 8014810:	d405      	bmi.n	801481e <_fflush_r+0x42>
 8014812:	89a3      	ldrh	r3, [r4, #12]
 8014814:	059b      	lsls	r3, r3, #22
 8014816:	d402      	bmi.n	801481e <_fflush_r+0x42>
 8014818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801481a:	f000 fab8 	bl	8014d8e <__retarget_lock_release_recursive>
 801481e:	4628      	mov	r0, r5
 8014820:	bd38      	pop	{r3, r4, r5, pc}
 8014822:	461d      	mov	r5, r3
 8014824:	e7fb      	b.n	801481e <_fflush_r+0x42>
	...

08014828 <std>:
 8014828:	2300      	movs	r3, #0
 801482a:	b510      	push	{r4, lr}
 801482c:	4604      	mov	r4, r0
 801482e:	e9c0 3300 	strd	r3, r3, [r0]
 8014832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014836:	6083      	str	r3, [r0, #8]
 8014838:	8181      	strh	r1, [r0, #12]
 801483a:	6643      	str	r3, [r0, #100]	; 0x64
 801483c:	81c2      	strh	r2, [r0, #14]
 801483e:	6183      	str	r3, [r0, #24]
 8014840:	4619      	mov	r1, r3
 8014842:	2208      	movs	r2, #8
 8014844:	305c      	adds	r0, #92	; 0x5c
 8014846:	f7fb fe59 	bl	80104fc <memset>
 801484a:	4b07      	ldr	r3, [pc, #28]	; (8014868 <std+0x40>)
 801484c:	6223      	str	r3, [r4, #32]
 801484e:	4b07      	ldr	r3, [pc, #28]	; (801486c <std+0x44>)
 8014850:	6263      	str	r3, [r4, #36]	; 0x24
 8014852:	4b07      	ldr	r3, [pc, #28]	; (8014870 <std+0x48>)
 8014854:	62a3      	str	r3, [r4, #40]	; 0x28
 8014856:	4b07      	ldr	r3, [pc, #28]	; (8014874 <std+0x4c>)
 8014858:	61e4      	str	r4, [r4, #28]
 801485a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801485c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014864:	f000 ba8e 	b.w	8014d84 <__retarget_lock_init_recursive>
 8014868:	08015a6d 	.word	0x08015a6d
 801486c:	08015a93 	.word	0x08015a93
 8014870:	08015acb 	.word	0x08015acb
 8014874:	08015aef 	.word	0x08015aef

08014878 <_cleanup_r>:
 8014878:	4901      	ldr	r1, [pc, #4]	; (8014880 <_cleanup_r+0x8>)
 801487a:	f000 b96b 	b.w	8014b54 <_fwalk_reent>
 801487e:	bf00      	nop
 8014880:	0801793d 	.word	0x0801793d

08014884 <__sfp_lock_acquire>:
 8014884:	4801      	ldr	r0, [pc, #4]	; (801488c <__sfp_lock_acquire+0x8>)
 8014886:	f000 ba80 	b.w	8014d8a <__retarget_lock_acquire_recursive>
 801488a:	bf00      	nop
 801488c:	2000740f 	.word	0x2000740f

08014890 <__sfp_lock_release>:
 8014890:	4801      	ldr	r0, [pc, #4]	; (8014898 <__sfp_lock_release+0x8>)
 8014892:	f000 ba7c 	b.w	8014d8e <__retarget_lock_release_recursive>
 8014896:	bf00      	nop
 8014898:	2000740f 	.word	0x2000740f

0801489c <__sinit_lock_acquire>:
 801489c:	4801      	ldr	r0, [pc, #4]	; (80148a4 <__sinit_lock_acquire+0x8>)
 801489e:	f000 ba74 	b.w	8014d8a <__retarget_lock_acquire_recursive>
 80148a2:	bf00      	nop
 80148a4:	20007410 	.word	0x20007410

080148a8 <__sinit_lock_release>:
 80148a8:	4801      	ldr	r0, [pc, #4]	; (80148b0 <__sinit_lock_release+0x8>)
 80148aa:	f000 ba70 	b.w	8014d8e <__retarget_lock_release_recursive>
 80148ae:	bf00      	nop
 80148b0:	20007410 	.word	0x20007410

080148b4 <__sinit>:
 80148b4:	b510      	push	{r4, lr}
 80148b6:	4604      	mov	r4, r0
 80148b8:	f7ff fff0 	bl	801489c <__sinit_lock_acquire>
 80148bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80148be:	b11a      	cbz	r2, 80148c8 <__sinit+0x14>
 80148c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148c4:	f7ff bff0 	b.w	80148a8 <__sinit_lock_release>
 80148c8:	4b0d      	ldr	r3, [pc, #52]	; (8014900 <__sinit+0x4c>)
 80148ca:	63e3      	str	r3, [r4, #60]	; 0x3c
 80148cc:	2303      	movs	r3, #3
 80148ce:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80148d2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80148d6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80148da:	6860      	ldr	r0, [r4, #4]
 80148dc:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80148e0:	2104      	movs	r1, #4
 80148e2:	f7ff ffa1 	bl	8014828 <std>
 80148e6:	68a0      	ldr	r0, [r4, #8]
 80148e8:	2201      	movs	r2, #1
 80148ea:	2109      	movs	r1, #9
 80148ec:	f7ff ff9c 	bl	8014828 <std>
 80148f0:	68e0      	ldr	r0, [r4, #12]
 80148f2:	2202      	movs	r2, #2
 80148f4:	2112      	movs	r1, #18
 80148f6:	f7ff ff97 	bl	8014828 <std>
 80148fa:	2301      	movs	r3, #1
 80148fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80148fe:	e7df      	b.n	80148c0 <__sinit+0xc>
 8014900:	08014879 	.word	0x08014879

08014904 <__libc_fini_array>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	4d07      	ldr	r5, [pc, #28]	; (8014924 <__libc_fini_array+0x20>)
 8014908:	4c07      	ldr	r4, [pc, #28]	; (8014928 <__libc_fini_array+0x24>)
 801490a:	1b64      	subs	r4, r4, r5
 801490c:	10a4      	asrs	r4, r4, #2
 801490e:	b91c      	cbnz	r4, 8014918 <__libc_fini_array+0x14>
 8014910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014914:	f003 be8e 	b.w	8018634 <_fini>
 8014918:	3c01      	subs	r4, #1
 801491a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801491e:	4798      	blx	r3
 8014920:	e7f5      	b.n	801490e <__libc_fini_array+0xa>
 8014922:	bf00      	nop
 8014924:	0801b644 	.word	0x0801b644
 8014928:	0801b648 	.word	0x0801b648

0801492c <_malloc_trim_r>:
 801492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014930:	4606      	mov	r6, r0
 8014932:	2008      	movs	r0, #8
 8014934:	460c      	mov	r4, r1
 8014936:	f002 f9ed 	bl	8016d14 <sysconf>
 801493a:	4f23      	ldr	r7, [pc, #140]	; (80149c8 <_malloc_trim_r+0x9c>)
 801493c:	4680      	mov	r8, r0
 801493e:	4630      	mov	r0, r6
 8014940:	f000 fcde 	bl	8015300 <__malloc_lock>
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	685d      	ldr	r5, [r3, #4]
 8014948:	f025 0503 	bic.w	r5, r5, #3
 801494c:	1b2c      	subs	r4, r5, r4
 801494e:	3c11      	subs	r4, #17
 8014950:	4444      	add	r4, r8
 8014952:	fbb4 f4f8 	udiv	r4, r4, r8
 8014956:	3c01      	subs	r4, #1
 8014958:	fb08 f404 	mul.w	r4, r8, r4
 801495c:	45a0      	cmp	r8, r4
 801495e:	dd05      	ble.n	801496c <_malloc_trim_r+0x40>
 8014960:	4630      	mov	r0, r6
 8014962:	f000 fcd3 	bl	801530c <__malloc_unlock>
 8014966:	2000      	movs	r0, #0
 8014968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801496c:	2100      	movs	r1, #0
 801496e:	4630      	mov	r0, r6
 8014970:	f001 f840 	bl	80159f4 <_sbrk_r>
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	442b      	add	r3, r5
 8014978:	4298      	cmp	r0, r3
 801497a:	d1f1      	bne.n	8014960 <_malloc_trim_r+0x34>
 801497c:	4261      	negs	r1, r4
 801497e:	4630      	mov	r0, r6
 8014980:	f001 f838 	bl	80159f4 <_sbrk_r>
 8014984:	3001      	adds	r0, #1
 8014986:	d110      	bne.n	80149aa <_malloc_trim_r+0x7e>
 8014988:	2100      	movs	r1, #0
 801498a:	4630      	mov	r0, r6
 801498c:	f001 f832 	bl	80159f4 <_sbrk_r>
 8014990:	68ba      	ldr	r2, [r7, #8]
 8014992:	1a83      	subs	r3, r0, r2
 8014994:	2b0f      	cmp	r3, #15
 8014996:	dde3      	ble.n	8014960 <_malloc_trim_r+0x34>
 8014998:	490c      	ldr	r1, [pc, #48]	; (80149cc <_malloc_trim_r+0xa0>)
 801499a:	6809      	ldr	r1, [r1, #0]
 801499c:	1a40      	subs	r0, r0, r1
 801499e:	490c      	ldr	r1, [pc, #48]	; (80149d0 <_malloc_trim_r+0xa4>)
 80149a0:	f043 0301 	orr.w	r3, r3, #1
 80149a4:	6008      	str	r0, [r1, #0]
 80149a6:	6053      	str	r3, [r2, #4]
 80149a8:	e7da      	b.n	8014960 <_malloc_trim_r+0x34>
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	4a08      	ldr	r2, [pc, #32]	; (80149d0 <_malloc_trim_r+0xa4>)
 80149ae:	1b2d      	subs	r5, r5, r4
 80149b0:	f045 0501 	orr.w	r5, r5, #1
 80149b4:	605d      	str	r5, [r3, #4]
 80149b6:	6813      	ldr	r3, [r2, #0]
 80149b8:	4630      	mov	r0, r6
 80149ba:	1b1b      	subs	r3, r3, r4
 80149bc:	6013      	str	r3, [r2, #0]
 80149be:	f000 fca5 	bl	801530c <__malloc_unlock>
 80149c2:	2001      	movs	r0, #1
 80149c4:	e7d0      	b.n	8014968 <_malloc_trim_r+0x3c>
 80149c6:	bf00      	nop
 80149c8:	200004b0 	.word	0x200004b0
 80149cc:	200008b8 	.word	0x200008b8
 80149d0:	20007414 	.word	0x20007414

080149d4 <_free_r>:
 80149d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d6:	4605      	mov	r5, r0
 80149d8:	460f      	mov	r7, r1
 80149da:	2900      	cmp	r1, #0
 80149dc:	f000 80b1 	beq.w	8014b42 <_free_r+0x16e>
 80149e0:	f000 fc8e 	bl	8015300 <__malloc_lock>
 80149e4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80149e8:	4856      	ldr	r0, [pc, #344]	; (8014b44 <_free_r+0x170>)
 80149ea:	f022 0401 	bic.w	r4, r2, #1
 80149ee:	f1a7 0308 	sub.w	r3, r7, #8
 80149f2:	eb03 0c04 	add.w	ip, r3, r4
 80149f6:	6881      	ldr	r1, [r0, #8]
 80149f8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80149fc:	4561      	cmp	r1, ip
 80149fe:	f026 0603 	bic.w	r6, r6, #3
 8014a02:	f002 0201 	and.w	r2, r2, #1
 8014a06:	d11b      	bne.n	8014a40 <_free_r+0x6c>
 8014a08:	4434      	add	r4, r6
 8014a0a:	b93a      	cbnz	r2, 8014a1c <_free_r+0x48>
 8014a0c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8014a10:	1a9b      	subs	r3, r3, r2
 8014a12:	4414      	add	r4, r2
 8014a14:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8014a18:	60ca      	str	r2, [r1, #12]
 8014a1a:	6091      	str	r1, [r2, #8]
 8014a1c:	f044 0201 	orr.w	r2, r4, #1
 8014a20:	605a      	str	r2, [r3, #4]
 8014a22:	6083      	str	r3, [r0, #8]
 8014a24:	4b48      	ldr	r3, [pc, #288]	; (8014b48 <_free_r+0x174>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	42a3      	cmp	r3, r4
 8014a2a:	d804      	bhi.n	8014a36 <_free_r+0x62>
 8014a2c:	4b47      	ldr	r3, [pc, #284]	; (8014b4c <_free_r+0x178>)
 8014a2e:	4628      	mov	r0, r5
 8014a30:	6819      	ldr	r1, [r3, #0]
 8014a32:	f7ff ff7b 	bl	801492c <_malloc_trim_r>
 8014a36:	4628      	mov	r0, r5
 8014a38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014a3c:	f000 bc66 	b.w	801530c <__malloc_unlock>
 8014a40:	f8cc 6004 	str.w	r6, [ip, #4]
 8014a44:	2a00      	cmp	r2, #0
 8014a46:	d138      	bne.n	8014aba <_free_r+0xe6>
 8014a48:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8014a4c:	1a5b      	subs	r3, r3, r1
 8014a4e:	440c      	add	r4, r1
 8014a50:	6899      	ldr	r1, [r3, #8]
 8014a52:	f100 0708 	add.w	r7, r0, #8
 8014a56:	42b9      	cmp	r1, r7
 8014a58:	d031      	beq.n	8014abe <_free_r+0xea>
 8014a5a:	68df      	ldr	r7, [r3, #12]
 8014a5c:	60cf      	str	r7, [r1, #12]
 8014a5e:	60b9      	str	r1, [r7, #8]
 8014a60:	eb0c 0106 	add.w	r1, ip, r6
 8014a64:	6849      	ldr	r1, [r1, #4]
 8014a66:	07c9      	lsls	r1, r1, #31
 8014a68:	d40b      	bmi.n	8014a82 <_free_r+0xae>
 8014a6a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8014a6e:	4434      	add	r4, r6
 8014a70:	bb3a      	cbnz	r2, 8014ac2 <_free_r+0xee>
 8014a72:	4e37      	ldr	r6, [pc, #220]	; (8014b50 <_free_r+0x17c>)
 8014a74:	42b1      	cmp	r1, r6
 8014a76:	d124      	bne.n	8014ac2 <_free_r+0xee>
 8014a78:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a7c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8014a80:	2201      	movs	r2, #1
 8014a82:	f044 0101 	orr.w	r1, r4, #1
 8014a86:	6059      	str	r1, [r3, #4]
 8014a88:	511c      	str	r4, [r3, r4]
 8014a8a:	2a00      	cmp	r2, #0
 8014a8c:	d1d3      	bne.n	8014a36 <_free_r+0x62>
 8014a8e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8014a92:	d21b      	bcs.n	8014acc <_free_r+0xf8>
 8014a94:	0961      	lsrs	r1, r4, #5
 8014a96:	08e2      	lsrs	r2, r4, #3
 8014a98:	2401      	movs	r4, #1
 8014a9a:	408c      	lsls	r4, r1
 8014a9c:	6841      	ldr	r1, [r0, #4]
 8014a9e:	3201      	adds	r2, #1
 8014aa0:	430c      	orrs	r4, r1
 8014aa2:	6044      	str	r4, [r0, #4]
 8014aa4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8014aa8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8014aac:	3908      	subs	r1, #8
 8014aae:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8014ab2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8014ab6:	60e3      	str	r3, [r4, #12]
 8014ab8:	e7bd      	b.n	8014a36 <_free_r+0x62>
 8014aba:	2200      	movs	r2, #0
 8014abc:	e7d0      	b.n	8014a60 <_free_r+0x8c>
 8014abe:	2201      	movs	r2, #1
 8014ac0:	e7ce      	b.n	8014a60 <_free_r+0x8c>
 8014ac2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8014ac6:	60ce      	str	r6, [r1, #12]
 8014ac8:	60b1      	str	r1, [r6, #8]
 8014aca:	e7da      	b.n	8014a82 <_free_r+0xae>
 8014acc:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8014ad0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8014ad4:	d214      	bcs.n	8014b00 <_free_r+0x12c>
 8014ad6:	09a2      	lsrs	r2, r4, #6
 8014ad8:	3238      	adds	r2, #56	; 0x38
 8014ada:	1c51      	adds	r1, r2, #1
 8014adc:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014ae0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8014ae4:	428e      	cmp	r6, r1
 8014ae6:	d125      	bne.n	8014b34 <_free_r+0x160>
 8014ae8:	2401      	movs	r4, #1
 8014aea:	1092      	asrs	r2, r2, #2
 8014aec:	fa04 f202 	lsl.w	r2, r4, r2
 8014af0:	6844      	ldr	r4, [r0, #4]
 8014af2:	4322      	orrs	r2, r4
 8014af4:	6042      	str	r2, [r0, #4]
 8014af6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8014afa:	60b3      	str	r3, [r6, #8]
 8014afc:	60cb      	str	r3, [r1, #12]
 8014afe:	e79a      	b.n	8014a36 <_free_r+0x62>
 8014b00:	2a14      	cmp	r2, #20
 8014b02:	d801      	bhi.n	8014b08 <_free_r+0x134>
 8014b04:	325b      	adds	r2, #91	; 0x5b
 8014b06:	e7e8      	b.n	8014ada <_free_r+0x106>
 8014b08:	2a54      	cmp	r2, #84	; 0x54
 8014b0a:	d802      	bhi.n	8014b12 <_free_r+0x13e>
 8014b0c:	0b22      	lsrs	r2, r4, #12
 8014b0e:	326e      	adds	r2, #110	; 0x6e
 8014b10:	e7e3      	b.n	8014ada <_free_r+0x106>
 8014b12:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8014b16:	d802      	bhi.n	8014b1e <_free_r+0x14a>
 8014b18:	0be2      	lsrs	r2, r4, #15
 8014b1a:	3277      	adds	r2, #119	; 0x77
 8014b1c:	e7dd      	b.n	8014ada <_free_r+0x106>
 8014b1e:	f240 5154 	movw	r1, #1364	; 0x554
 8014b22:	428a      	cmp	r2, r1
 8014b24:	bf9a      	itte	ls
 8014b26:	0ca2      	lsrls	r2, r4, #18
 8014b28:	327c      	addls	r2, #124	; 0x7c
 8014b2a:	227e      	movhi	r2, #126	; 0x7e
 8014b2c:	e7d5      	b.n	8014ada <_free_r+0x106>
 8014b2e:	6889      	ldr	r1, [r1, #8]
 8014b30:	428e      	cmp	r6, r1
 8014b32:	d004      	beq.n	8014b3e <_free_r+0x16a>
 8014b34:	684a      	ldr	r2, [r1, #4]
 8014b36:	f022 0203 	bic.w	r2, r2, #3
 8014b3a:	42a2      	cmp	r2, r4
 8014b3c:	d8f7      	bhi.n	8014b2e <_free_r+0x15a>
 8014b3e:	68ce      	ldr	r6, [r1, #12]
 8014b40:	e7d9      	b.n	8014af6 <_free_r+0x122>
 8014b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b44:	200004b0 	.word	0x200004b0
 8014b48:	200008bc 	.word	0x200008bc
 8014b4c:	20007444 	.word	0x20007444
 8014b50:	200004b8 	.word	0x200004b8

08014b54 <_fwalk_reent>:
 8014b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b58:	4606      	mov	r6, r0
 8014b5a:	4688      	mov	r8, r1
 8014b5c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8014b60:	2700      	movs	r7, #0
 8014b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b66:	f1b9 0901 	subs.w	r9, r9, #1
 8014b6a:	d505      	bpl.n	8014b78 <_fwalk_reent+0x24>
 8014b6c:	6824      	ldr	r4, [r4, #0]
 8014b6e:	2c00      	cmp	r4, #0
 8014b70:	d1f7      	bne.n	8014b62 <_fwalk_reent+0xe>
 8014b72:	4638      	mov	r0, r7
 8014b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b78:	89ab      	ldrh	r3, [r5, #12]
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d907      	bls.n	8014b8e <_fwalk_reent+0x3a>
 8014b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b82:	3301      	adds	r3, #1
 8014b84:	d003      	beq.n	8014b8e <_fwalk_reent+0x3a>
 8014b86:	4629      	mov	r1, r5
 8014b88:	4630      	mov	r0, r6
 8014b8a:	47c0      	blx	r8
 8014b8c:	4307      	orrs	r7, r0
 8014b8e:	3568      	adds	r5, #104	; 0x68
 8014b90:	e7e9      	b.n	8014b66 <_fwalk_reent+0x12>
	...

08014b94 <_findenv_r>:
 8014b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b98:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014c08 <_findenv_r+0x74>
 8014b9c:	4607      	mov	r7, r0
 8014b9e:	4689      	mov	r9, r1
 8014ba0:	4616      	mov	r6, r2
 8014ba2:	f002 febf 	bl	8017924 <__env_lock>
 8014ba6:	f8da 4000 	ldr.w	r4, [sl]
 8014baa:	b134      	cbz	r4, 8014bba <_findenv_r+0x26>
 8014bac:	464b      	mov	r3, r9
 8014bae:	4698      	mov	r8, r3
 8014bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bb4:	b13a      	cbz	r2, 8014bc6 <_findenv_r+0x32>
 8014bb6:	2a3d      	cmp	r2, #61	; 0x3d
 8014bb8:	d1f9      	bne.n	8014bae <_findenv_r+0x1a>
 8014bba:	4638      	mov	r0, r7
 8014bbc:	f002 feb8 	bl	8017930 <__env_unlock>
 8014bc0:	2000      	movs	r0, #0
 8014bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc6:	eba8 0809 	sub.w	r8, r8, r9
 8014bca:	46a3      	mov	fp, r4
 8014bcc:	f854 0b04 	ldr.w	r0, [r4], #4
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	d0f2      	beq.n	8014bba <_findenv_r+0x26>
 8014bd4:	4642      	mov	r2, r8
 8014bd6:	4649      	mov	r1, r9
 8014bd8:	f7fb ff58 	bl	8010a8c <strncmp>
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d1f4      	bne.n	8014bca <_findenv_r+0x36>
 8014be0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014be4:	eb03 0508 	add.w	r5, r3, r8
 8014be8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014bec:	2b3d      	cmp	r3, #61	; 0x3d
 8014bee:	d1ec      	bne.n	8014bca <_findenv_r+0x36>
 8014bf0:	f8da 3000 	ldr.w	r3, [sl]
 8014bf4:	ebab 0303 	sub.w	r3, fp, r3
 8014bf8:	109b      	asrs	r3, r3, #2
 8014bfa:	4638      	mov	r0, r7
 8014bfc:	6033      	str	r3, [r6, #0]
 8014bfe:	f002 fe97 	bl	8017930 <__env_unlock>
 8014c02:	1c68      	adds	r0, r5, #1
 8014c04:	e7dd      	b.n	8014bc2 <_findenv_r+0x2e>
 8014c06:	bf00      	nop
 8014c08:	20000004 	.word	0x20000004

08014c0c <_getenv_r>:
 8014c0c:	b507      	push	{r0, r1, r2, lr}
 8014c0e:	aa01      	add	r2, sp, #4
 8014c10:	f7ff ffc0 	bl	8014b94 <_findenv_r>
 8014c14:	b003      	add	sp, #12
 8014c16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014c1c <__gettzinfo>:
 8014c1c:	4800      	ldr	r0, [pc, #0]	; (8014c20 <__gettzinfo+0x4>)
 8014c1e:	4770      	bx	lr
 8014c20:	20000458 	.word	0x20000458

08014c24 <gmtime_r>:
 8014c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c28:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014c2c:	460c      	mov	r4, r1
 8014c2e:	4a4f      	ldr	r2, [pc, #316]	; (8014d6c <gmtime_r+0x148>)
 8014c30:	2300      	movs	r3, #0
 8014c32:	4630      	mov	r0, r6
 8014c34:	4639      	mov	r1, r7
 8014c36:	f7eb ffe1 	bl	8000bfc <__aeabi_ldivmod>
 8014c3a:	4639      	mov	r1, r7
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	4a4b      	ldr	r2, [pc, #300]	; (8014d6c <gmtime_r+0x148>)
 8014c40:	4630      	mov	r0, r6
 8014c42:	2300      	movs	r3, #0
 8014c44:	f7eb ffda 	bl	8000bfc <__aeabi_ldivmod>
 8014c48:	2a00      	cmp	r2, #0
 8014c4a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014c4e:	bfb7      	itett	lt
 8014c50:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014c54:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8014c58:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8014c5c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014c60:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8014c64:	fbb2 f1f0 	udiv	r1, r2, r0
 8014c68:	fb00 2211 	mls	r2, r0, r1, r2
 8014c6c:	203c      	movs	r0, #60	; 0x3c
 8014c6e:	60a1      	str	r1, [r4, #8]
 8014c70:	fbb2 f1f0 	udiv	r1, r2, r0
 8014c74:	fb00 2211 	mls	r2, r0, r1, r2
 8014c78:	6061      	str	r1, [r4, #4]
 8014c7a:	6022      	str	r2, [r4, #0]
 8014c7c:	2107      	movs	r1, #7
 8014c7e:	1cda      	adds	r2, r3, #3
 8014c80:	fb92 f1f1 	sdiv	r1, r2, r1
 8014c84:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8014c88:	1a52      	subs	r2, r2, r1
 8014c8a:	bf48      	it	mi
 8014c8c:	3207      	addmi	r2, #7
 8014c8e:	4d38      	ldr	r5, [pc, #224]	; (8014d70 <gmtime_r+0x14c>)
 8014c90:	4838      	ldr	r0, [pc, #224]	; (8014d74 <gmtime_r+0x150>)
 8014c92:	61a2      	str	r2, [r4, #24]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	bfb7      	itett	lt
 8014c98:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8014c9c:	fb93 f5f5 	sdivge	r5, r3, r5
 8014ca0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8014ca4:	fb92 f5f5 	sdivlt	r5, r2, r5
 8014ca8:	fb00 3005 	mla	r0, r0, r5, r3
 8014cac:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014cb0:	fbb0 f2f2 	udiv	r2, r0, r2
 8014cb4:	4402      	add	r2, r0
 8014cb6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8014cba:	fbb0 f1f3 	udiv	r1, r0, r3
 8014cbe:	1a52      	subs	r2, r2, r1
 8014cc0:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014cc4:	492c      	ldr	r1, [pc, #176]	; (8014d78 <gmtime_r+0x154>)
 8014cc6:	fbb0 f1f1 	udiv	r1, r0, r1
 8014cca:	2764      	movs	r7, #100	; 0x64
 8014ccc:	1a52      	subs	r2, r2, r1
 8014cce:	fbb2 f1fc 	udiv	r1, r2, ip
 8014cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014cd6:	fbb1 f6f7 	udiv	r6, r1, r7
 8014cda:	1af3      	subs	r3, r6, r3
 8014cdc:	4403      	add	r3, r0
 8014cde:	fb0c 3311 	mls	r3, ip, r1, r3
 8014ce2:	2299      	movs	r2, #153	; 0x99
 8014ce4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8014ce8:	f10e 0e02 	add.w	lr, lr, #2
 8014cec:	f103 0c01 	add.w	ip, r3, #1
 8014cf0:	fbbe f0f2 	udiv	r0, lr, r2
 8014cf4:	4342      	muls	r2, r0
 8014cf6:	3202      	adds	r2, #2
 8014cf8:	f04f 0805 	mov.w	r8, #5
 8014cfc:	fbb2 f2f8 	udiv	r2, r2, r8
 8014d00:	ebac 0c02 	sub.w	ip, ip, r2
 8014d04:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8014d08:	4596      	cmp	lr, r2
 8014d0a:	bf94      	ite	ls
 8014d0c:	2202      	movls	r2, #2
 8014d0e:	f06f 0209 	mvnhi.w	r2, #9
 8014d12:	4410      	add	r0, r2
 8014d14:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d18:	fb02 1505 	mla	r5, r2, r5, r1
 8014d1c:	2801      	cmp	r0, #1
 8014d1e:	bf98      	it	ls
 8014d20:	3501      	addls	r5, #1
 8014d22:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8014d26:	d30d      	bcc.n	8014d44 <gmtime_r+0x120>
 8014d28:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014d2c:	61e3      	str	r3, [r4, #28]
 8014d2e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8014d32:	2300      	movs	r3, #0
 8014d34:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8014d38:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014d3c:	6223      	str	r3, [r4, #32]
 8014d3e:	4620      	mov	r0, r4
 8014d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d44:	078a      	lsls	r2, r1, #30
 8014d46:	d102      	bne.n	8014d4e <gmtime_r+0x12a>
 8014d48:	fb07 1616 	mls	r6, r7, r6, r1
 8014d4c:	b95e      	cbnz	r6, 8014d66 <gmtime_r+0x142>
 8014d4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d52:	fbb1 f6f2 	udiv	r6, r1, r2
 8014d56:	fb02 1216 	mls	r2, r2, r6, r1
 8014d5a:	fab2 f282 	clz	r2, r2
 8014d5e:	0952      	lsrs	r2, r2, #5
 8014d60:	333b      	adds	r3, #59	; 0x3b
 8014d62:	4413      	add	r3, r2
 8014d64:	e7e2      	b.n	8014d2c <gmtime_r+0x108>
 8014d66:	2201      	movs	r2, #1
 8014d68:	e7fa      	b.n	8014d60 <gmtime_r+0x13c>
 8014d6a:	bf00      	nop
 8014d6c:	00015180 	.word	0x00015180
 8014d70:	00023ab1 	.word	0x00023ab1
 8014d74:	fffdc54f 	.word	0xfffdc54f
 8014d78:	00023ab0 	.word	0x00023ab0

08014d7c <_localeconv_r>:
 8014d7c:	4800      	ldr	r0, [pc, #0]	; (8014d80 <_localeconv_r+0x4>)
 8014d7e:	4770      	bx	lr
 8014d80:	200009b0 	.word	0x200009b0

08014d84 <__retarget_lock_init_recursive>:
 8014d84:	4770      	bx	lr

08014d86 <__retarget_lock_close_recursive>:
 8014d86:	4770      	bx	lr

08014d88 <__retarget_lock_acquire>:
 8014d88:	4770      	bx	lr

08014d8a <__retarget_lock_acquire_recursive>:
 8014d8a:	4770      	bx	lr

08014d8c <__retarget_lock_release>:
 8014d8c:	4770      	bx	lr

08014d8e <__retarget_lock_release_recursive>:
 8014d8e:	4770      	bx	lr

08014d90 <__swhatbuf_r>:
 8014d90:	b570      	push	{r4, r5, r6, lr}
 8014d92:	460e      	mov	r6, r1
 8014d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d98:	2900      	cmp	r1, #0
 8014d9a:	b096      	sub	sp, #88	; 0x58
 8014d9c:	4614      	mov	r4, r2
 8014d9e:	461d      	mov	r5, r3
 8014da0:	da0a      	bge.n	8014db8 <__swhatbuf_r+0x28>
 8014da2:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8014da6:	2300      	movs	r3, #0
 8014da8:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8014dac:	602b      	str	r3, [r5, #0]
 8014dae:	d116      	bne.n	8014dde <__swhatbuf_r+0x4e>
 8014db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014db4:	6023      	str	r3, [r4, #0]
 8014db6:	e015      	b.n	8014de4 <__swhatbuf_r+0x54>
 8014db8:	466a      	mov	r2, sp
 8014dba:	f002 fe95 	bl	8017ae8 <_fstat_r>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	dbef      	blt.n	8014da2 <__swhatbuf_r+0x12>
 8014dc2:	9a01      	ldr	r2, [sp, #4]
 8014dc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014dc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014dcc:	425a      	negs	r2, r3
 8014dce:	415a      	adcs	r2, r3
 8014dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014dd4:	602a      	str	r2, [r5, #0]
 8014dd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014dda:	6023      	str	r3, [r4, #0]
 8014ddc:	e002      	b.n	8014de4 <__swhatbuf_r+0x54>
 8014dde:	2240      	movs	r2, #64	; 0x40
 8014de0:	6022      	str	r2, [r4, #0]
 8014de2:	4618      	mov	r0, r3
 8014de4:	b016      	add	sp, #88	; 0x58
 8014de6:	bd70      	pop	{r4, r5, r6, pc}

08014de8 <__smakebuf_r>:
 8014de8:	898b      	ldrh	r3, [r1, #12]
 8014dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014dec:	079d      	lsls	r5, r3, #30
 8014dee:	4606      	mov	r6, r0
 8014df0:	460c      	mov	r4, r1
 8014df2:	d507      	bpl.n	8014e04 <__smakebuf_r+0x1c>
 8014df4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8014df8:	6023      	str	r3, [r4, #0]
 8014dfa:	6123      	str	r3, [r4, #16]
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	6163      	str	r3, [r4, #20]
 8014e00:	b002      	add	sp, #8
 8014e02:	bd70      	pop	{r4, r5, r6, pc}
 8014e04:	ab01      	add	r3, sp, #4
 8014e06:	466a      	mov	r2, sp
 8014e08:	f7ff ffc2 	bl	8014d90 <__swhatbuf_r>
 8014e0c:	9900      	ldr	r1, [sp, #0]
 8014e0e:	4605      	mov	r5, r0
 8014e10:	4630      	mov	r0, r6
 8014e12:	f000 f839 	bl	8014e88 <_malloc_r>
 8014e16:	b948      	cbnz	r0, 8014e2c <__smakebuf_r+0x44>
 8014e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e1c:	059a      	lsls	r2, r3, #22
 8014e1e:	d4ef      	bmi.n	8014e00 <__smakebuf_r+0x18>
 8014e20:	f023 0303 	bic.w	r3, r3, #3
 8014e24:	f043 0302 	orr.w	r3, r3, #2
 8014e28:	81a3      	strh	r3, [r4, #12]
 8014e2a:	e7e3      	b.n	8014df4 <__smakebuf_r+0xc>
 8014e2c:	4b0d      	ldr	r3, [pc, #52]	; (8014e64 <__smakebuf_r+0x7c>)
 8014e2e:	63f3      	str	r3, [r6, #60]	; 0x3c
 8014e30:	89a3      	ldrh	r3, [r4, #12]
 8014e32:	6020      	str	r0, [r4, #0]
 8014e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e38:	81a3      	strh	r3, [r4, #12]
 8014e3a:	9b00      	ldr	r3, [sp, #0]
 8014e3c:	6163      	str	r3, [r4, #20]
 8014e3e:	9b01      	ldr	r3, [sp, #4]
 8014e40:	6120      	str	r0, [r4, #16]
 8014e42:	b15b      	cbz	r3, 8014e5c <__smakebuf_r+0x74>
 8014e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e48:	4630      	mov	r0, r6
 8014e4a:	f002 ffa9 	bl	8017da0 <_isatty_r>
 8014e4e:	b128      	cbz	r0, 8014e5c <__smakebuf_r+0x74>
 8014e50:	89a3      	ldrh	r3, [r4, #12]
 8014e52:	f023 0303 	bic.w	r3, r3, #3
 8014e56:	f043 0301 	orr.w	r3, r3, #1
 8014e5a:	81a3      	strh	r3, [r4, #12]
 8014e5c:	89a0      	ldrh	r0, [r4, #12]
 8014e5e:	4305      	orrs	r5, r0
 8014e60:	81a5      	strh	r5, [r4, #12]
 8014e62:	e7cd      	b.n	8014e00 <__smakebuf_r+0x18>
 8014e64:	08014879 	.word	0x08014879

08014e68 <malloc>:
 8014e68:	4b02      	ldr	r3, [pc, #8]	; (8014e74 <malloc+0xc>)
 8014e6a:	4601      	mov	r1, r0
 8014e6c:	6818      	ldr	r0, [r3, #0]
 8014e6e:	f000 b80b 	b.w	8014e88 <_malloc_r>
 8014e72:	bf00      	nop
 8014e74:	2000001c 	.word	0x2000001c

08014e78 <free>:
 8014e78:	4b02      	ldr	r3, [pc, #8]	; (8014e84 <free+0xc>)
 8014e7a:	4601      	mov	r1, r0
 8014e7c:	6818      	ldr	r0, [r3, #0]
 8014e7e:	f7ff bda9 	b.w	80149d4 <_free_r>
 8014e82:	bf00      	nop
 8014e84:	2000001c 	.word	0x2000001c

08014e88 <_malloc_r>:
 8014e88:	f101 030b 	add.w	r3, r1, #11
 8014e8c:	2b16      	cmp	r3, #22
 8014e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e92:	4605      	mov	r5, r0
 8014e94:	d906      	bls.n	8014ea4 <_malloc_r+0x1c>
 8014e96:	f033 0707 	bics.w	r7, r3, #7
 8014e9a:	d504      	bpl.n	8014ea6 <_malloc_r+0x1e>
 8014e9c:	230c      	movs	r3, #12
 8014e9e:	602b      	str	r3, [r5, #0]
 8014ea0:	2400      	movs	r4, #0
 8014ea2:	e1a5      	b.n	80151f0 <_malloc_r+0x368>
 8014ea4:	2710      	movs	r7, #16
 8014ea6:	42b9      	cmp	r1, r7
 8014ea8:	d8f8      	bhi.n	8014e9c <_malloc_r+0x14>
 8014eaa:	4628      	mov	r0, r5
 8014eac:	f000 fa28 	bl	8015300 <__malloc_lock>
 8014eb0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8014eb4:	4eb0      	ldr	r6, [pc, #704]	; (8015178 <_malloc_r+0x2f0>)
 8014eb6:	d237      	bcs.n	8014f28 <_malloc_r+0xa0>
 8014eb8:	f107 0208 	add.w	r2, r7, #8
 8014ebc:	4432      	add	r2, r6
 8014ebe:	f1a2 0108 	sub.w	r1, r2, #8
 8014ec2:	6854      	ldr	r4, [r2, #4]
 8014ec4:	428c      	cmp	r4, r1
 8014ec6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8014eca:	d102      	bne.n	8014ed2 <_malloc_r+0x4a>
 8014ecc:	68d4      	ldr	r4, [r2, #12]
 8014ece:	42a2      	cmp	r2, r4
 8014ed0:	d010      	beq.n	8014ef4 <_malloc_r+0x6c>
 8014ed2:	6863      	ldr	r3, [r4, #4]
 8014ed4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8014ed8:	f023 0303 	bic.w	r3, r3, #3
 8014edc:	60ca      	str	r2, [r1, #12]
 8014ede:	4423      	add	r3, r4
 8014ee0:	6091      	str	r1, [r2, #8]
 8014ee2:	685a      	ldr	r2, [r3, #4]
 8014ee4:	f042 0201 	orr.w	r2, r2, #1
 8014ee8:	605a      	str	r2, [r3, #4]
 8014eea:	4628      	mov	r0, r5
 8014eec:	f000 fa0e 	bl	801530c <__malloc_unlock>
 8014ef0:	3408      	adds	r4, #8
 8014ef2:	e17d      	b.n	80151f0 <_malloc_r+0x368>
 8014ef4:	3302      	adds	r3, #2
 8014ef6:	6934      	ldr	r4, [r6, #16]
 8014ef8:	49a0      	ldr	r1, [pc, #640]	; (801517c <_malloc_r+0x2f4>)
 8014efa:	428c      	cmp	r4, r1
 8014efc:	d077      	beq.n	8014fee <_malloc_r+0x166>
 8014efe:	6862      	ldr	r2, [r4, #4]
 8014f00:	f022 0c03 	bic.w	ip, r2, #3
 8014f04:	ebac 0007 	sub.w	r0, ip, r7
 8014f08:	280f      	cmp	r0, #15
 8014f0a:	dd48      	ble.n	8014f9e <_malloc_r+0x116>
 8014f0c:	19e2      	adds	r2, r4, r7
 8014f0e:	f040 0301 	orr.w	r3, r0, #1
 8014f12:	f047 0701 	orr.w	r7, r7, #1
 8014f16:	6067      	str	r7, [r4, #4]
 8014f18:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8014f1c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8014f20:	6053      	str	r3, [r2, #4]
 8014f22:	f844 000c 	str.w	r0, [r4, ip]
 8014f26:	e7e0      	b.n	8014eea <_malloc_r+0x62>
 8014f28:	0a7b      	lsrs	r3, r7, #9
 8014f2a:	d02a      	beq.n	8014f82 <_malloc_r+0xfa>
 8014f2c:	2b04      	cmp	r3, #4
 8014f2e:	d812      	bhi.n	8014f56 <_malloc_r+0xce>
 8014f30:	09bb      	lsrs	r3, r7, #6
 8014f32:	3338      	adds	r3, #56	; 0x38
 8014f34:	1c5a      	adds	r2, r3, #1
 8014f36:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8014f3a:	f1a2 0c08 	sub.w	ip, r2, #8
 8014f3e:	6854      	ldr	r4, [r2, #4]
 8014f40:	4564      	cmp	r4, ip
 8014f42:	d006      	beq.n	8014f52 <_malloc_r+0xca>
 8014f44:	6862      	ldr	r2, [r4, #4]
 8014f46:	f022 0203 	bic.w	r2, r2, #3
 8014f4a:	1bd0      	subs	r0, r2, r7
 8014f4c:	280f      	cmp	r0, #15
 8014f4e:	dd1c      	ble.n	8014f8a <_malloc_r+0x102>
 8014f50:	3b01      	subs	r3, #1
 8014f52:	3301      	adds	r3, #1
 8014f54:	e7cf      	b.n	8014ef6 <_malloc_r+0x6e>
 8014f56:	2b14      	cmp	r3, #20
 8014f58:	d801      	bhi.n	8014f5e <_malloc_r+0xd6>
 8014f5a:	335b      	adds	r3, #91	; 0x5b
 8014f5c:	e7ea      	b.n	8014f34 <_malloc_r+0xac>
 8014f5e:	2b54      	cmp	r3, #84	; 0x54
 8014f60:	d802      	bhi.n	8014f68 <_malloc_r+0xe0>
 8014f62:	0b3b      	lsrs	r3, r7, #12
 8014f64:	336e      	adds	r3, #110	; 0x6e
 8014f66:	e7e5      	b.n	8014f34 <_malloc_r+0xac>
 8014f68:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8014f6c:	d802      	bhi.n	8014f74 <_malloc_r+0xec>
 8014f6e:	0bfb      	lsrs	r3, r7, #15
 8014f70:	3377      	adds	r3, #119	; 0x77
 8014f72:	e7df      	b.n	8014f34 <_malloc_r+0xac>
 8014f74:	f240 5254 	movw	r2, #1364	; 0x554
 8014f78:	4293      	cmp	r3, r2
 8014f7a:	d804      	bhi.n	8014f86 <_malloc_r+0xfe>
 8014f7c:	0cbb      	lsrs	r3, r7, #18
 8014f7e:	337c      	adds	r3, #124	; 0x7c
 8014f80:	e7d8      	b.n	8014f34 <_malloc_r+0xac>
 8014f82:	233f      	movs	r3, #63	; 0x3f
 8014f84:	e7d6      	b.n	8014f34 <_malloc_r+0xac>
 8014f86:	237e      	movs	r3, #126	; 0x7e
 8014f88:	e7d4      	b.n	8014f34 <_malloc_r+0xac>
 8014f8a:	2800      	cmp	r0, #0
 8014f8c:	68e1      	ldr	r1, [r4, #12]
 8014f8e:	db04      	blt.n	8014f9a <_malloc_r+0x112>
 8014f90:	68a3      	ldr	r3, [r4, #8]
 8014f92:	60d9      	str	r1, [r3, #12]
 8014f94:	608b      	str	r3, [r1, #8]
 8014f96:	18a3      	adds	r3, r4, r2
 8014f98:	e7a3      	b.n	8014ee2 <_malloc_r+0x5a>
 8014f9a:	460c      	mov	r4, r1
 8014f9c:	e7d0      	b.n	8014f40 <_malloc_r+0xb8>
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8014fa4:	db07      	blt.n	8014fb6 <_malloc_r+0x12e>
 8014fa6:	44a4      	add	ip, r4
 8014fa8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8014fac:	f043 0301 	orr.w	r3, r3, #1
 8014fb0:	f8cc 3004 	str.w	r3, [ip, #4]
 8014fb4:	e799      	b.n	8014eea <_malloc_r+0x62>
 8014fb6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8014fba:	6870      	ldr	r0, [r6, #4]
 8014fbc:	f080 8096 	bcs.w	80150ec <_malloc_r+0x264>
 8014fc0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8014fc4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8014fc8:	f04f 0c01 	mov.w	ip, #1
 8014fcc:	3201      	adds	r2, #1
 8014fce:	fa0c fc0e 	lsl.w	ip, ip, lr
 8014fd2:	ea4c 0000 	orr.w	r0, ip, r0
 8014fd6:	6070      	str	r0, [r6, #4]
 8014fd8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8014fdc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8014fe0:	3808      	subs	r0, #8
 8014fe2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8014fe6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8014fea:	f8cc 400c 	str.w	r4, [ip, #12]
 8014fee:	2001      	movs	r0, #1
 8014ff0:	109a      	asrs	r2, r3, #2
 8014ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8014ff6:	6870      	ldr	r0, [r6, #4]
 8014ff8:	4290      	cmp	r0, r2
 8014ffa:	d326      	bcc.n	801504a <_malloc_r+0x1c2>
 8014ffc:	4210      	tst	r0, r2
 8014ffe:	d106      	bne.n	801500e <_malloc_r+0x186>
 8015000:	f023 0303 	bic.w	r3, r3, #3
 8015004:	0052      	lsls	r2, r2, #1
 8015006:	4210      	tst	r0, r2
 8015008:	f103 0304 	add.w	r3, r3, #4
 801500c:	d0fa      	beq.n	8015004 <_malloc_r+0x17c>
 801500e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8015012:	46c1      	mov	r9, r8
 8015014:	469e      	mov	lr, r3
 8015016:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801501a:	454c      	cmp	r4, r9
 801501c:	f040 80ba 	bne.w	8015194 <_malloc_r+0x30c>
 8015020:	f10e 0e01 	add.w	lr, lr, #1
 8015024:	f01e 0f03 	tst.w	lr, #3
 8015028:	f109 0908 	add.w	r9, r9, #8
 801502c:	d1f3      	bne.n	8015016 <_malloc_r+0x18e>
 801502e:	0798      	lsls	r0, r3, #30
 8015030:	f040 80e4 	bne.w	80151fc <_malloc_r+0x374>
 8015034:	6873      	ldr	r3, [r6, #4]
 8015036:	ea23 0302 	bic.w	r3, r3, r2
 801503a:	6073      	str	r3, [r6, #4]
 801503c:	6870      	ldr	r0, [r6, #4]
 801503e:	0052      	lsls	r2, r2, #1
 8015040:	4290      	cmp	r0, r2
 8015042:	d302      	bcc.n	801504a <_malloc_r+0x1c2>
 8015044:	2a00      	cmp	r2, #0
 8015046:	f040 80e6 	bne.w	8015216 <_malloc_r+0x38e>
 801504a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801504e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015052:	f023 0903 	bic.w	r9, r3, #3
 8015056:	45b9      	cmp	r9, r7
 8015058:	d304      	bcc.n	8015064 <_malloc_r+0x1dc>
 801505a:	eba9 0207 	sub.w	r2, r9, r7
 801505e:	2a0f      	cmp	r2, #15
 8015060:	f300 8142 	bgt.w	80152e8 <_malloc_r+0x460>
 8015064:	4b46      	ldr	r3, [pc, #280]	; (8015180 <_malloc_r+0x2f8>)
 8015066:	6819      	ldr	r1, [r3, #0]
 8015068:	3110      	adds	r1, #16
 801506a:	4439      	add	r1, r7
 801506c:	2008      	movs	r0, #8
 801506e:	9101      	str	r1, [sp, #4]
 8015070:	f001 fe50 	bl	8016d14 <sysconf>
 8015074:	4a43      	ldr	r2, [pc, #268]	; (8015184 <_malloc_r+0x2fc>)
 8015076:	9901      	ldr	r1, [sp, #4]
 8015078:	6813      	ldr	r3, [r2, #0]
 801507a:	3301      	adds	r3, #1
 801507c:	bf1f      	itttt	ne
 801507e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8015082:	1809      	addne	r1, r1, r0
 8015084:	4243      	negne	r3, r0
 8015086:	4019      	andne	r1, r3
 8015088:	4680      	mov	r8, r0
 801508a:	4628      	mov	r0, r5
 801508c:	9101      	str	r1, [sp, #4]
 801508e:	f000 fcb1 	bl	80159f4 <_sbrk_r>
 8015092:	1c42      	adds	r2, r0, #1
 8015094:	eb0a 0b09 	add.w	fp, sl, r9
 8015098:	4604      	mov	r4, r0
 801509a:	f000 80f8 	beq.w	801528e <_malloc_r+0x406>
 801509e:	4583      	cmp	fp, r0
 80150a0:	9901      	ldr	r1, [sp, #4]
 80150a2:	4a38      	ldr	r2, [pc, #224]	; (8015184 <_malloc_r+0x2fc>)
 80150a4:	d902      	bls.n	80150ac <_malloc_r+0x224>
 80150a6:	45b2      	cmp	sl, r6
 80150a8:	f040 80f1 	bne.w	801528e <_malloc_r+0x406>
 80150ac:	4b36      	ldr	r3, [pc, #216]	; (8015188 <_malloc_r+0x300>)
 80150ae:	6818      	ldr	r0, [r3, #0]
 80150b0:	45a3      	cmp	fp, r4
 80150b2:	eb00 0e01 	add.w	lr, r0, r1
 80150b6:	f8c3 e000 	str.w	lr, [r3]
 80150ba:	f108 3cff 	add.w	ip, r8, #4294967295
 80150be:	f040 80ac 	bne.w	801521a <_malloc_r+0x392>
 80150c2:	ea1b 0f0c 	tst.w	fp, ip
 80150c6:	f040 80a8 	bne.w	801521a <_malloc_r+0x392>
 80150ca:	68b2      	ldr	r2, [r6, #8]
 80150cc:	4449      	add	r1, r9
 80150ce:	f041 0101 	orr.w	r1, r1, #1
 80150d2:	6051      	str	r1, [r2, #4]
 80150d4:	4a2d      	ldr	r2, [pc, #180]	; (801518c <_malloc_r+0x304>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	6811      	ldr	r1, [r2, #0]
 80150da:	428b      	cmp	r3, r1
 80150dc:	bf88      	it	hi
 80150de:	6013      	strhi	r3, [r2, #0]
 80150e0:	4a2b      	ldr	r2, [pc, #172]	; (8015190 <_malloc_r+0x308>)
 80150e2:	6811      	ldr	r1, [r2, #0]
 80150e4:	428b      	cmp	r3, r1
 80150e6:	bf88      	it	hi
 80150e8:	6013      	strhi	r3, [r2, #0]
 80150ea:	e0d0      	b.n	801528e <_malloc_r+0x406>
 80150ec:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80150f0:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80150f4:	d218      	bcs.n	8015128 <_malloc_r+0x2a0>
 80150f6:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80150fa:	3238      	adds	r2, #56	; 0x38
 80150fc:	f102 0e01 	add.w	lr, r2, #1
 8015100:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8015104:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8015108:	45f0      	cmp	r8, lr
 801510a:	d12b      	bne.n	8015164 <_malloc_r+0x2dc>
 801510c:	1092      	asrs	r2, r2, #2
 801510e:	f04f 0c01 	mov.w	ip, #1
 8015112:	fa0c f202 	lsl.w	r2, ip, r2
 8015116:	4310      	orrs	r0, r2
 8015118:	6070      	str	r0, [r6, #4]
 801511a:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801511e:	f8c8 4008 	str.w	r4, [r8, #8]
 8015122:	f8ce 400c 	str.w	r4, [lr, #12]
 8015126:	e762      	b.n	8014fee <_malloc_r+0x166>
 8015128:	2a14      	cmp	r2, #20
 801512a:	d801      	bhi.n	8015130 <_malloc_r+0x2a8>
 801512c:	325b      	adds	r2, #91	; 0x5b
 801512e:	e7e5      	b.n	80150fc <_malloc_r+0x274>
 8015130:	2a54      	cmp	r2, #84	; 0x54
 8015132:	d803      	bhi.n	801513c <_malloc_r+0x2b4>
 8015134:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8015138:	326e      	adds	r2, #110	; 0x6e
 801513a:	e7df      	b.n	80150fc <_malloc_r+0x274>
 801513c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8015140:	d803      	bhi.n	801514a <_malloc_r+0x2c2>
 8015142:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8015146:	3277      	adds	r2, #119	; 0x77
 8015148:	e7d8      	b.n	80150fc <_malloc_r+0x274>
 801514a:	f240 5e54 	movw	lr, #1364	; 0x554
 801514e:	4572      	cmp	r2, lr
 8015150:	bf9a      	itte	ls
 8015152:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8015156:	327c      	addls	r2, #124	; 0x7c
 8015158:	227e      	movhi	r2, #126	; 0x7e
 801515a:	e7cf      	b.n	80150fc <_malloc_r+0x274>
 801515c:	f8de e008 	ldr.w	lr, [lr, #8]
 8015160:	45f0      	cmp	r8, lr
 8015162:	d005      	beq.n	8015170 <_malloc_r+0x2e8>
 8015164:	f8de 2004 	ldr.w	r2, [lr, #4]
 8015168:	f022 0203 	bic.w	r2, r2, #3
 801516c:	4562      	cmp	r2, ip
 801516e:	d8f5      	bhi.n	801515c <_malloc_r+0x2d4>
 8015170:	f8de 800c 	ldr.w	r8, [lr, #12]
 8015174:	e7d1      	b.n	801511a <_malloc_r+0x292>
 8015176:	bf00      	nop
 8015178:	200004b0 	.word	0x200004b0
 801517c:	200004b8 	.word	0x200004b8
 8015180:	20007444 	.word	0x20007444
 8015184:	200008b8 	.word	0x200008b8
 8015188:	20007414 	.word	0x20007414
 801518c:	2000743c 	.word	0x2000743c
 8015190:	20007440 	.word	0x20007440
 8015194:	6860      	ldr	r0, [r4, #4]
 8015196:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801519a:	f020 0003 	bic.w	r0, r0, #3
 801519e:	eba0 0a07 	sub.w	sl, r0, r7
 80151a2:	f1ba 0f0f 	cmp.w	sl, #15
 80151a6:	dd12      	ble.n	80151ce <_malloc_r+0x346>
 80151a8:	68a3      	ldr	r3, [r4, #8]
 80151aa:	19e2      	adds	r2, r4, r7
 80151ac:	f047 0701 	orr.w	r7, r7, #1
 80151b0:	6067      	str	r7, [r4, #4]
 80151b2:	f8c3 c00c 	str.w	ip, [r3, #12]
 80151b6:	f8cc 3008 	str.w	r3, [ip, #8]
 80151ba:	f04a 0301 	orr.w	r3, sl, #1
 80151be:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80151c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80151c6:	6053      	str	r3, [r2, #4]
 80151c8:	f844 a000 	str.w	sl, [r4, r0]
 80151cc:	e68d      	b.n	8014eea <_malloc_r+0x62>
 80151ce:	f1ba 0f00 	cmp.w	sl, #0
 80151d2:	db11      	blt.n	80151f8 <_malloc_r+0x370>
 80151d4:	4420      	add	r0, r4
 80151d6:	6843      	ldr	r3, [r0, #4]
 80151d8:	f043 0301 	orr.w	r3, r3, #1
 80151dc:	6043      	str	r3, [r0, #4]
 80151de:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80151e2:	4628      	mov	r0, r5
 80151e4:	f8c3 c00c 	str.w	ip, [r3, #12]
 80151e8:	f8cc 3008 	str.w	r3, [ip, #8]
 80151ec:	f000 f88e 	bl	801530c <__malloc_unlock>
 80151f0:	4620      	mov	r0, r4
 80151f2:	b003      	add	sp, #12
 80151f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f8:	4664      	mov	r4, ip
 80151fa:	e70e      	b.n	801501a <_malloc_r+0x192>
 80151fc:	f858 0908 	ldr.w	r0, [r8], #-8
 8015200:	4540      	cmp	r0, r8
 8015202:	f103 33ff 	add.w	r3, r3, #4294967295
 8015206:	f43f af12 	beq.w	801502e <_malloc_r+0x1a6>
 801520a:	e717      	b.n	801503c <_malloc_r+0x1b4>
 801520c:	3304      	adds	r3, #4
 801520e:	0052      	lsls	r2, r2, #1
 8015210:	4210      	tst	r0, r2
 8015212:	d0fb      	beq.n	801520c <_malloc_r+0x384>
 8015214:	e6fb      	b.n	801500e <_malloc_r+0x186>
 8015216:	4673      	mov	r3, lr
 8015218:	e7fa      	b.n	8015210 <_malloc_r+0x388>
 801521a:	6810      	ldr	r0, [r2, #0]
 801521c:	3001      	adds	r0, #1
 801521e:	bf1b      	ittet	ne
 8015220:	eba4 0b0b 	subne.w	fp, r4, fp
 8015224:	eb0b 020e 	addne.w	r2, fp, lr
 8015228:	6014      	streq	r4, [r2, #0]
 801522a:	601a      	strne	r2, [r3, #0]
 801522c:	f014 0b07 	ands.w	fp, r4, #7
 8015230:	bf1a      	itte	ne
 8015232:	f1cb 0008 	rsbne	r0, fp, #8
 8015236:	1824      	addne	r4, r4, r0
 8015238:	4658      	moveq	r0, fp
 801523a:	1862      	adds	r2, r4, r1
 801523c:	ea02 010c 	and.w	r1, r2, ip
 8015240:	4480      	add	r8, r0
 8015242:	eba8 0801 	sub.w	r8, r8, r1
 8015246:	ea08 080c 	and.w	r8, r8, ip
 801524a:	4641      	mov	r1, r8
 801524c:	4628      	mov	r0, r5
 801524e:	9201      	str	r2, [sp, #4]
 8015250:	f000 fbd0 	bl	80159f4 <_sbrk_r>
 8015254:	1c43      	adds	r3, r0, #1
 8015256:	9a01      	ldr	r2, [sp, #4]
 8015258:	4b28      	ldr	r3, [pc, #160]	; (80152fc <_malloc_r+0x474>)
 801525a:	d107      	bne.n	801526c <_malloc_r+0x3e4>
 801525c:	f1bb 0f00 	cmp.w	fp, #0
 8015260:	d023      	beq.n	80152aa <_malloc_r+0x422>
 8015262:	f1ab 0008 	sub.w	r0, fp, #8
 8015266:	4410      	add	r0, r2
 8015268:	f04f 0800 	mov.w	r8, #0
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	60b4      	str	r4, [r6, #8]
 8015270:	1b00      	subs	r0, r0, r4
 8015272:	4440      	add	r0, r8
 8015274:	4442      	add	r2, r8
 8015276:	f040 0001 	orr.w	r0, r0, #1
 801527a:	45b2      	cmp	sl, r6
 801527c:	601a      	str	r2, [r3, #0]
 801527e:	6060      	str	r0, [r4, #4]
 8015280:	f43f af28 	beq.w	80150d4 <_malloc_r+0x24c>
 8015284:	f1b9 0f0f 	cmp.w	r9, #15
 8015288:	d812      	bhi.n	80152b0 <_malloc_r+0x428>
 801528a:	2301      	movs	r3, #1
 801528c:	6063      	str	r3, [r4, #4]
 801528e:	68b3      	ldr	r3, [r6, #8]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	f023 0303 	bic.w	r3, r3, #3
 8015296:	42bb      	cmp	r3, r7
 8015298:	eba3 0207 	sub.w	r2, r3, r7
 801529c:	d301      	bcc.n	80152a2 <_malloc_r+0x41a>
 801529e:	2a0f      	cmp	r2, #15
 80152a0:	dc22      	bgt.n	80152e8 <_malloc_r+0x460>
 80152a2:	4628      	mov	r0, r5
 80152a4:	f000 f832 	bl	801530c <__malloc_unlock>
 80152a8:	e5fa      	b.n	8014ea0 <_malloc_r+0x18>
 80152aa:	4610      	mov	r0, r2
 80152ac:	46d8      	mov	r8, fp
 80152ae:	e7dd      	b.n	801526c <_malloc_r+0x3e4>
 80152b0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80152b4:	f1a9 090c 	sub.w	r9, r9, #12
 80152b8:	f029 0907 	bic.w	r9, r9, #7
 80152bc:	f002 0201 	and.w	r2, r2, #1
 80152c0:	ea42 0209 	orr.w	r2, r2, r9
 80152c4:	f8ca 2004 	str.w	r2, [sl, #4]
 80152c8:	2105      	movs	r1, #5
 80152ca:	eb0a 0209 	add.w	r2, sl, r9
 80152ce:	f1b9 0f0f 	cmp.w	r9, #15
 80152d2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80152d6:	f67f aefd 	bls.w	80150d4 <_malloc_r+0x24c>
 80152da:	f10a 0108 	add.w	r1, sl, #8
 80152de:	4628      	mov	r0, r5
 80152e0:	f7ff fb78 	bl	80149d4 <_free_r>
 80152e4:	4b05      	ldr	r3, [pc, #20]	; (80152fc <_malloc_r+0x474>)
 80152e6:	e6f5      	b.n	80150d4 <_malloc_r+0x24c>
 80152e8:	68b4      	ldr	r4, [r6, #8]
 80152ea:	f047 0301 	orr.w	r3, r7, #1
 80152ee:	4427      	add	r7, r4
 80152f0:	f042 0201 	orr.w	r2, r2, #1
 80152f4:	6063      	str	r3, [r4, #4]
 80152f6:	60b7      	str	r7, [r6, #8]
 80152f8:	607a      	str	r2, [r7, #4]
 80152fa:	e5f6      	b.n	8014eea <_malloc_r+0x62>
 80152fc:	20007414 	.word	0x20007414

08015300 <__malloc_lock>:
 8015300:	4801      	ldr	r0, [pc, #4]	; (8015308 <__malloc_lock+0x8>)
 8015302:	f7ff bd42 	b.w	8014d8a <__retarget_lock_acquire_recursive>
 8015306:	bf00      	nop
 8015308:	2000740e 	.word	0x2000740e

0801530c <__malloc_unlock>:
 801530c:	4801      	ldr	r0, [pc, #4]	; (8015314 <__malloc_unlock+0x8>)
 801530e:	f7ff bd3e 	b.w	8014d8e <__retarget_lock_release_recursive>
 8015312:	bf00      	nop
 8015314:	2000740e 	.word	0x2000740e

08015318 <_Balloc>:
 8015318:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801531a:	b570      	push	{r4, r5, r6, lr}
 801531c:	4605      	mov	r5, r0
 801531e:	460c      	mov	r4, r1
 8015320:	b17b      	cbz	r3, 8015342 <_Balloc+0x2a>
 8015322:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015324:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015328:	b9a0      	cbnz	r0, 8015354 <_Balloc+0x3c>
 801532a:	2101      	movs	r1, #1
 801532c:	fa01 f604 	lsl.w	r6, r1, r4
 8015330:	1d72      	adds	r2, r6, #5
 8015332:	0092      	lsls	r2, r2, #2
 8015334:	4628      	mov	r0, r5
 8015336:	f002 faaf 	bl	8017898 <_calloc_r>
 801533a:	b148      	cbz	r0, 8015350 <_Balloc+0x38>
 801533c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8015340:	e00b      	b.n	801535a <_Balloc+0x42>
 8015342:	2221      	movs	r2, #33	; 0x21
 8015344:	2104      	movs	r1, #4
 8015346:	f002 faa7 	bl	8017898 <_calloc_r>
 801534a:	64e8      	str	r0, [r5, #76]	; 0x4c
 801534c:	2800      	cmp	r0, #0
 801534e:	d1e8      	bne.n	8015322 <_Balloc+0xa>
 8015350:	2000      	movs	r0, #0
 8015352:	bd70      	pop	{r4, r5, r6, pc}
 8015354:	6802      	ldr	r2, [r0, #0]
 8015356:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801535a:	2300      	movs	r3, #0
 801535c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015360:	e7f7      	b.n	8015352 <_Balloc+0x3a>

08015362 <_Bfree>:
 8015362:	b131      	cbz	r1, 8015372 <_Bfree+0x10>
 8015364:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015366:	684a      	ldr	r2, [r1, #4]
 8015368:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801536c:	6008      	str	r0, [r1, #0]
 801536e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015372:	4770      	bx	lr

08015374 <__multadd>:
 8015374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015378:	690d      	ldr	r5, [r1, #16]
 801537a:	4607      	mov	r7, r0
 801537c:	460c      	mov	r4, r1
 801537e:	461e      	mov	r6, r3
 8015380:	f101 0c14 	add.w	ip, r1, #20
 8015384:	2000      	movs	r0, #0
 8015386:	f8dc 3000 	ldr.w	r3, [ip]
 801538a:	b299      	uxth	r1, r3
 801538c:	fb02 6101 	mla	r1, r2, r1, r6
 8015390:	0c1e      	lsrs	r6, r3, #16
 8015392:	0c0b      	lsrs	r3, r1, #16
 8015394:	fb02 3306 	mla	r3, r2, r6, r3
 8015398:	b289      	uxth	r1, r1
 801539a:	3001      	adds	r0, #1
 801539c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80153a0:	4285      	cmp	r5, r0
 80153a2:	f84c 1b04 	str.w	r1, [ip], #4
 80153a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80153aa:	dcec      	bgt.n	8015386 <__multadd+0x12>
 80153ac:	b30e      	cbz	r6, 80153f2 <__multadd+0x7e>
 80153ae:	68a3      	ldr	r3, [r4, #8]
 80153b0:	42ab      	cmp	r3, r5
 80153b2:	dc19      	bgt.n	80153e8 <__multadd+0x74>
 80153b4:	6861      	ldr	r1, [r4, #4]
 80153b6:	4638      	mov	r0, r7
 80153b8:	3101      	adds	r1, #1
 80153ba:	f7ff ffad 	bl	8015318 <_Balloc>
 80153be:	4680      	mov	r8, r0
 80153c0:	b928      	cbnz	r0, 80153ce <__multadd+0x5a>
 80153c2:	4602      	mov	r2, r0
 80153c4:	4b0c      	ldr	r3, [pc, #48]	; (80153f8 <__multadd+0x84>)
 80153c6:	480d      	ldr	r0, [pc, #52]	; (80153fc <__multadd+0x88>)
 80153c8:	21b5      	movs	r1, #181	; 0xb5
 80153ca:	f002 fa47 	bl	801785c <__assert_func>
 80153ce:	6922      	ldr	r2, [r4, #16]
 80153d0:	3202      	adds	r2, #2
 80153d2:	f104 010c 	add.w	r1, r4, #12
 80153d6:	0092      	lsls	r2, r2, #2
 80153d8:	300c      	adds	r0, #12
 80153da:	f7fb f867 	bl	80104ac <memcpy>
 80153de:	4621      	mov	r1, r4
 80153e0:	4638      	mov	r0, r7
 80153e2:	f7ff ffbe 	bl	8015362 <_Bfree>
 80153e6:	4644      	mov	r4, r8
 80153e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80153ec:	3501      	adds	r5, #1
 80153ee:	615e      	str	r6, [r3, #20]
 80153f0:	6125      	str	r5, [r4, #16]
 80153f2:	4620      	mov	r0, r4
 80153f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153f8:	0801b3e1 	.word	0x0801b3e1
 80153fc:	0801b44d 	.word	0x0801b44d

08015400 <__hi0bits>:
 8015400:	0c03      	lsrs	r3, r0, #16
 8015402:	041b      	lsls	r3, r3, #16
 8015404:	b9d3      	cbnz	r3, 801543c <__hi0bits+0x3c>
 8015406:	0400      	lsls	r0, r0, #16
 8015408:	2310      	movs	r3, #16
 801540a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801540e:	bf04      	itt	eq
 8015410:	0200      	lsleq	r0, r0, #8
 8015412:	3308      	addeq	r3, #8
 8015414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015418:	bf04      	itt	eq
 801541a:	0100      	lsleq	r0, r0, #4
 801541c:	3304      	addeq	r3, #4
 801541e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015422:	bf04      	itt	eq
 8015424:	0080      	lsleq	r0, r0, #2
 8015426:	3302      	addeq	r3, #2
 8015428:	2800      	cmp	r0, #0
 801542a:	db05      	blt.n	8015438 <__hi0bits+0x38>
 801542c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015430:	f103 0301 	add.w	r3, r3, #1
 8015434:	bf08      	it	eq
 8015436:	2320      	moveq	r3, #32
 8015438:	4618      	mov	r0, r3
 801543a:	4770      	bx	lr
 801543c:	2300      	movs	r3, #0
 801543e:	e7e4      	b.n	801540a <__hi0bits+0xa>

08015440 <__lo0bits>:
 8015440:	6803      	ldr	r3, [r0, #0]
 8015442:	f013 0207 	ands.w	r2, r3, #7
 8015446:	4601      	mov	r1, r0
 8015448:	d00b      	beq.n	8015462 <__lo0bits+0x22>
 801544a:	07da      	lsls	r2, r3, #31
 801544c:	d423      	bmi.n	8015496 <__lo0bits+0x56>
 801544e:	0798      	lsls	r0, r3, #30
 8015450:	bf49      	itett	mi
 8015452:	085b      	lsrmi	r3, r3, #1
 8015454:	089b      	lsrpl	r3, r3, #2
 8015456:	2001      	movmi	r0, #1
 8015458:	600b      	strmi	r3, [r1, #0]
 801545a:	bf5c      	itt	pl
 801545c:	600b      	strpl	r3, [r1, #0]
 801545e:	2002      	movpl	r0, #2
 8015460:	4770      	bx	lr
 8015462:	b298      	uxth	r0, r3
 8015464:	b9a8      	cbnz	r0, 8015492 <__lo0bits+0x52>
 8015466:	0c1b      	lsrs	r3, r3, #16
 8015468:	2010      	movs	r0, #16
 801546a:	b2da      	uxtb	r2, r3
 801546c:	b90a      	cbnz	r2, 8015472 <__lo0bits+0x32>
 801546e:	3008      	adds	r0, #8
 8015470:	0a1b      	lsrs	r3, r3, #8
 8015472:	071a      	lsls	r2, r3, #28
 8015474:	bf04      	itt	eq
 8015476:	091b      	lsreq	r3, r3, #4
 8015478:	3004      	addeq	r0, #4
 801547a:	079a      	lsls	r2, r3, #30
 801547c:	bf04      	itt	eq
 801547e:	089b      	lsreq	r3, r3, #2
 8015480:	3002      	addeq	r0, #2
 8015482:	07da      	lsls	r2, r3, #31
 8015484:	d403      	bmi.n	801548e <__lo0bits+0x4e>
 8015486:	085b      	lsrs	r3, r3, #1
 8015488:	f100 0001 	add.w	r0, r0, #1
 801548c:	d005      	beq.n	801549a <__lo0bits+0x5a>
 801548e:	600b      	str	r3, [r1, #0]
 8015490:	4770      	bx	lr
 8015492:	4610      	mov	r0, r2
 8015494:	e7e9      	b.n	801546a <__lo0bits+0x2a>
 8015496:	2000      	movs	r0, #0
 8015498:	4770      	bx	lr
 801549a:	2020      	movs	r0, #32
 801549c:	4770      	bx	lr
	...

080154a0 <__i2b>:
 80154a0:	b510      	push	{r4, lr}
 80154a2:	460c      	mov	r4, r1
 80154a4:	2101      	movs	r1, #1
 80154a6:	f7ff ff37 	bl	8015318 <_Balloc>
 80154aa:	4602      	mov	r2, r0
 80154ac:	b928      	cbnz	r0, 80154ba <__i2b+0x1a>
 80154ae:	4b05      	ldr	r3, [pc, #20]	; (80154c4 <__i2b+0x24>)
 80154b0:	4805      	ldr	r0, [pc, #20]	; (80154c8 <__i2b+0x28>)
 80154b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80154b6:	f002 f9d1 	bl	801785c <__assert_func>
 80154ba:	2301      	movs	r3, #1
 80154bc:	6144      	str	r4, [r0, #20]
 80154be:	6103      	str	r3, [r0, #16]
 80154c0:	bd10      	pop	{r4, pc}
 80154c2:	bf00      	nop
 80154c4:	0801b3e1 	.word	0x0801b3e1
 80154c8:	0801b44d 	.word	0x0801b44d

080154cc <__multiply>:
 80154cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d0:	4691      	mov	r9, r2
 80154d2:	690a      	ldr	r2, [r1, #16]
 80154d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80154d8:	429a      	cmp	r2, r3
 80154da:	bfb8      	it	lt
 80154dc:	460b      	movlt	r3, r1
 80154de:	460c      	mov	r4, r1
 80154e0:	bfbc      	itt	lt
 80154e2:	464c      	movlt	r4, r9
 80154e4:	4699      	movlt	r9, r3
 80154e6:	6927      	ldr	r7, [r4, #16]
 80154e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80154ec:	68a3      	ldr	r3, [r4, #8]
 80154ee:	6861      	ldr	r1, [r4, #4]
 80154f0:	eb07 060a 	add.w	r6, r7, sl
 80154f4:	42b3      	cmp	r3, r6
 80154f6:	b085      	sub	sp, #20
 80154f8:	bfb8      	it	lt
 80154fa:	3101      	addlt	r1, #1
 80154fc:	f7ff ff0c 	bl	8015318 <_Balloc>
 8015500:	b930      	cbnz	r0, 8015510 <__multiply+0x44>
 8015502:	4602      	mov	r2, r0
 8015504:	4b44      	ldr	r3, [pc, #272]	; (8015618 <__multiply+0x14c>)
 8015506:	4845      	ldr	r0, [pc, #276]	; (801561c <__multiply+0x150>)
 8015508:	f240 115d 	movw	r1, #349	; 0x15d
 801550c:	f002 f9a6 	bl	801785c <__assert_func>
 8015510:	f100 0514 	add.w	r5, r0, #20
 8015514:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015518:	462b      	mov	r3, r5
 801551a:	2200      	movs	r2, #0
 801551c:	4543      	cmp	r3, r8
 801551e:	d321      	bcc.n	8015564 <__multiply+0x98>
 8015520:	f104 0314 	add.w	r3, r4, #20
 8015524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015528:	f109 0314 	add.w	r3, r9, #20
 801552c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015530:	9202      	str	r2, [sp, #8]
 8015532:	1b3a      	subs	r2, r7, r4
 8015534:	3a15      	subs	r2, #21
 8015536:	f022 0203 	bic.w	r2, r2, #3
 801553a:	3204      	adds	r2, #4
 801553c:	f104 0115 	add.w	r1, r4, #21
 8015540:	428f      	cmp	r7, r1
 8015542:	bf38      	it	cc
 8015544:	2204      	movcc	r2, #4
 8015546:	9201      	str	r2, [sp, #4]
 8015548:	9a02      	ldr	r2, [sp, #8]
 801554a:	9303      	str	r3, [sp, #12]
 801554c:	429a      	cmp	r2, r3
 801554e:	d80c      	bhi.n	801556a <__multiply+0x9e>
 8015550:	2e00      	cmp	r6, #0
 8015552:	dd03      	ble.n	801555c <__multiply+0x90>
 8015554:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015558:	2b00      	cmp	r3, #0
 801555a:	d05a      	beq.n	8015612 <__multiply+0x146>
 801555c:	6106      	str	r6, [r0, #16]
 801555e:	b005      	add	sp, #20
 8015560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015564:	f843 2b04 	str.w	r2, [r3], #4
 8015568:	e7d8      	b.n	801551c <__multiply+0x50>
 801556a:	f8b3 a000 	ldrh.w	sl, [r3]
 801556e:	f1ba 0f00 	cmp.w	sl, #0
 8015572:	d024      	beq.n	80155be <__multiply+0xf2>
 8015574:	f104 0e14 	add.w	lr, r4, #20
 8015578:	46a9      	mov	r9, r5
 801557a:	f04f 0c00 	mov.w	ip, #0
 801557e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015582:	f8d9 1000 	ldr.w	r1, [r9]
 8015586:	fa1f fb82 	uxth.w	fp, r2
 801558a:	b289      	uxth	r1, r1
 801558c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015590:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015594:	f8d9 2000 	ldr.w	r2, [r9]
 8015598:	4461      	add	r1, ip
 801559a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801559e:	fb0a c20b 	mla	r2, sl, fp, ip
 80155a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80155a6:	b289      	uxth	r1, r1
 80155a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80155ac:	4577      	cmp	r7, lr
 80155ae:	f849 1b04 	str.w	r1, [r9], #4
 80155b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80155b6:	d8e2      	bhi.n	801557e <__multiply+0xb2>
 80155b8:	9a01      	ldr	r2, [sp, #4]
 80155ba:	f845 c002 	str.w	ip, [r5, r2]
 80155be:	9a03      	ldr	r2, [sp, #12]
 80155c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80155c4:	3304      	adds	r3, #4
 80155c6:	f1b9 0f00 	cmp.w	r9, #0
 80155ca:	d020      	beq.n	801560e <__multiply+0x142>
 80155cc:	6829      	ldr	r1, [r5, #0]
 80155ce:	f104 0c14 	add.w	ip, r4, #20
 80155d2:	46ae      	mov	lr, r5
 80155d4:	f04f 0a00 	mov.w	sl, #0
 80155d8:	f8bc b000 	ldrh.w	fp, [ip]
 80155dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80155e0:	fb09 220b 	mla	r2, r9, fp, r2
 80155e4:	4492      	add	sl, r2
 80155e6:	b289      	uxth	r1, r1
 80155e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80155ec:	f84e 1b04 	str.w	r1, [lr], #4
 80155f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80155f4:	f8be 1000 	ldrh.w	r1, [lr]
 80155f8:	0c12      	lsrs	r2, r2, #16
 80155fa:	fb09 1102 	mla	r1, r9, r2, r1
 80155fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015602:	4567      	cmp	r7, ip
 8015604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015608:	d8e6      	bhi.n	80155d8 <__multiply+0x10c>
 801560a:	9a01      	ldr	r2, [sp, #4]
 801560c:	50a9      	str	r1, [r5, r2]
 801560e:	3504      	adds	r5, #4
 8015610:	e79a      	b.n	8015548 <__multiply+0x7c>
 8015612:	3e01      	subs	r6, #1
 8015614:	e79c      	b.n	8015550 <__multiply+0x84>
 8015616:	bf00      	nop
 8015618:	0801b3e1 	.word	0x0801b3e1
 801561c:	0801b44d 	.word	0x0801b44d

08015620 <__pow5mult>:
 8015620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015624:	4615      	mov	r5, r2
 8015626:	f012 0203 	ands.w	r2, r2, #3
 801562a:	4606      	mov	r6, r0
 801562c:	460f      	mov	r7, r1
 801562e:	d007      	beq.n	8015640 <__pow5mult+0x20>
 8015630:	4c1a      	ldr	r4, [pc, #104]	; (801569c <__pow5mult+0x7c>)
 8015632:	3a01      	subs	r2, #1
 8015634:	2300      	movs	r3, #0
 8015636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801563a:	f7ff fe9b 	bl	8015374 <__multadd>
 801563e:	4607      	mov	r7, r0
 8015640:	10ad      	asrs	r5, r5, #2
 8015642:	d027      	beq.n	8015694 <__pow5mult+0x74>
 8015644:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8015646:	b944      	cbnz	r4, 801565a <__pow5mult+0x3a>
 8015648:	f240 2171 	movw	r1, #625	; 0x271
 801564c:	4630      	mov	r0, r6
 801564e:	f7ff ff27 	bl	80154a0 <__i2b>
 8015652:	2300      	movs	r3, #0
 8015654:	64b0      	str	r0, [r6, #72]	; 0x48
 8015656:	4604      	mov	r4, r0
 8015658:	6003      	str	r3, [r0, #0]
 801565a:	f04f 0900 	mov.w	r9, #0
 801565e:	07eb      	lsls	r3, r5, #31
 8015660:	d50a      	bpl.n	8015678 <__pow5mult+0x58>
 8015662:	4639      	mov	r1, r7
 8015664:	4622      	mov	r2, r4
 8015666:	4630      	mov	r0, r6
 8015668:	f7ff ff30 	bl	80154cc <__multiply>
 801566c:	4639      	mov	r1, r7
 801566e:	4680      	mov	r8, r0
 8015670:	4630      	mov	r0, r6
 8015672:	f7ff fe76 	bl	8015362 <_Bfree>
 8015676:	4647      	mov	r7, r8
 8015678:	106d      	asrs	r5, r5, #1
 801567a:	d00b      	beq.n	8015694 <__pow5mult+0x74>
 801567c:	6820      	ldr	r0, [r4, #0]
 801567e:	b938      	cbnz	r0, 8015690 <__pow5mult+0x70>
 8015680:	4622      	mov	r2, r4
 8015682:	4621      	mov	r1, r4
 8015684:	4630      	mov	r0, r6
 8015686:	f7ff ff21 	bl	80154cc <__multiply>
 801568a:	6020      	str	r0, [r4, #0]
 801568c:	f8c0 9000 	str.w	r9, [r0]
 8015690:	4604      	mov	r4, r0
 8015692:	e7e4      	b.n	801565e <__pow5mult+0x3e>
 8015694:	4638      	mov	r0, r7
 8015696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801569a:	bf00      	nop
 801569c:	0801b5a0 	.word	0x0801b5a0

080156a0 <__lshift>:
 80156a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156a4:	460c      	mov	r4, r1
 80156a6:	6849      	ldr	r1, [r1, #4]
 80156a8:	6923      	ldr	r3, [r4, #16]
 80156aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80156ae:	68a3      	ldr	r3, [r4, #8]
 80156b0:	4607      	mov	r7, r0
 80156b2:	4691      	mov	r9, r2
 80156b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80156b8:	f108 0601 	add.w	r6, r8, #1
 80156bc:	42b3      	cmp	r3, r6
 80156be:	db0b      	blt.n	80156d8 <__lshift+0x38>
 80156c0:	4638      	mov	r0, r7
 80156c2:	f7ff fe29 	bl	8015318 <_Balloc>
 80156c6:	4605      	mov	r5, r0
 80156c8:	b948      	cbnz	r0, 80156de <__lshift+0x3e>
 80156ca:	4602      	mov	r2, r0
 80156cc:	4b2a      	ldr	r3, [pc, #168]	; (8015778 <__lshift+0xd8>)
 80156ce:	482b      	ldr	r0, [pc, #172]	; (801577c <__lshift+0xdc>)
 80156d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80156d4:	f002 f8c2 	bl	801785c <__assert_func>
 80156d8:	3101      	adds	r1, #1
 80156da:	005b      	lsls	r3, r3, #1
 80156dc:	e7ee      	b.n	80156bc <__lshift+0x1c>
 80156de:	2300      	movs	r3, #0
 80156e0:	f100 0114 	add.w	r1, r0, #20
 80156e4:	f100 0210 	add.w	r2, r0, #16
 80156e8:	4618      	mov	r0, r3
 80156ea:	4553      	cmp	r3, sl
 80156ec:	db37      	blt.n	801575e <__lshift+0xbe>
 80156ee:	6920      	ldr	r0, [r4, #16]
 80156f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80156f4:	f104 0314 	add.w	r3, r4, #20
 80156f8:	f019 091f 	ands.w	r9, r9, #31
 80156fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015700:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015704:	d02f      	beq.n	8015766 <__lshift+0xc6>
 8015706:	f1c9 0e20 	rsb	lr, r9, #32
 801570a:	468a      	mov	sl, r1
 801570c:	f04f 0c00 	mov.w	ip, #0
 8015710:	681a      	ldr	r2, [r3, #0]
 8015712:	fa02 f209 	lsl.w	r2, r2, r9
 8015716:	ea42 020c 	orr.w	r2, r2, ip
 801571a:	f84a 2b04 	str.w	r2, [sl], #4
 801571e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015722:	4298      	cmp	r0, r3
 8015724:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015728:	d8f2      	bhi.n	8015710 <__lshift+0x70>
 801572a:	1b03      	subs	r3, r0, r4
 801572c:	3b15      	subs	r3, #21
 801572e:	f023 0303 	bic.w	r3, r3, #3
 8015732:	3304      	adds	r3, #4
 8015734:	f104 0215 	add.w	r2, r4, #21
 8015738:	4290      	cmp	r0, r2
 801573a:	bf38      	it	cc
 801573c:	2304      	movcc	r3, #4
 801573e:	f841 c003 	str.w	ip, [r1, r3]
 8015742:	f1bc 0f00 	cmp.w	ip, #0
 8015746:	d001      	beq.n	801574c <__lshift+0xac>
 8015748:	f108 0602 	add.w	r6, r8, #2
 801574c:	3e01      	subs	r6, #1
 801574e:	4638      	mov	r0, r7
 8015750:	612e      	str	r6, [r5, #16]
 8015752:	4621      	mov	r1, r4
 8015754:	f7ff fe05 	bl	8015362 <_Bfree>
 8015758:	4628      	mov	r0, r5
 801575a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801575e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015762:	3301      	adds	r3, #1
 8015764:	e7c1      	b.n	80156ea <__lshift+0x4a>
 8015766:	3904      	subs	r1, #4
 8015768:	f853 2b04 	ldr.w	r2, [r3], #4
 801576c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015770:	4298      	cmp	r0, r3
 8015772:	d8f9      	bhi.n	8015768 <__lshift+0xc8>
 8015774:	e7ea      	b.n	801574c <__lshift+0xac>
 8015776:	bf00      	nop
 8015778:	0801b3e1 	.word	0x0801b3e1
 801577c:	0801b44d 	.word	0x0801b44d

08015780 <__mcmp>:
 8015780:	b530      	push	{r4, r5, lr}
 8015782:	6902      	ldr	r2, [r0, #16]
 8015784:	690c      	ldr	r4, [r1, #16]
 8015786:	1b12      	subs	r2, r2, r4
 8015788:	d10e      	bne.n	80157a8 <__mcmp+0x28>
 801578a:	f100 0314 	add.w	r3, r0, #20
 801578e:	3114      	adds	r1, #20
 8015790:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015794:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015798:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801579c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80157a0:	42a5      	cmp	r5, r4
 80157a2:	d003      	beq.n	80157ac <__mcmp+0x2c>
 80157a4:	d305      	bcc.n	80157b2 <__mcmp+0x32>
 80157a6:	2201      	movs	r2, #1
 80157a8:	4610      	mov	r0, r2
 80157aa:	bd30      	pop	{r4, r5, pc}
 80157ac:	4283      	cmp	r3, r0
 80157ae:	d3f3      	bcc.n	8015798 <__mcmp+0x18>
 80157b0:	e7fa      	b.n	80157a8 <__mcmp+0x28>
 80157b2:	f04f 32ff 	mov.w	r2, #4294967295
 80157b6:	e7f7      	b.n	80157a8 <__mcmp+0x28>

080157b8 <__mdiff>:
 80157b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157bc:	460c      	mov	r4, r1
 80157be:	4606      	mov	r6, r0
 80157c0:	4611      	mov	r1, r2
 80157c2:	4620      	mov	r0, r4
 80157c4:	4690      	mov	r8, r2
 80157c6:	f7ff ffdb 	bl	8015780 <__mcmp>
 80157ca:	1e05      	subs	r5, r0, #0
 80157cc:	d110      	bne.n	80157f0 <__mdiff+0x38>
 80157ce:	4629      	mov	r1, r5
 80157d0:	4630      	mov	r0, r6
 80157d2:	f7ff fda1 	bl	8015318 <_Balloc>
 80157d6:	b930      	cbnz	r0, 80157e6 <__mdiff+0x2e>
 80157d8:	4b3a      	ldr	r3, [pc, #232]	; (80158c4 <__mdiff+0x10c>)
 80157da:	4602      	mov	r2, r0
 80157dc:	f240 2132 	movw	r1, #562	; 0x232
 80157e0:	4839      	ldr	r0, [pc, #228]	; (80158c8 <__mdiff+0x110>)
 80157e2:	f002 f83b 	bl	801785c <__assert_func>
 80157e6:	2301      	movs	r3, #1
 80157e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80157ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157f0:	bfa4      	itt	ge
 80157f2:	4643      	movge	r3, r8
 80157f4:	46a0      	movge	r8, r4
 80157f6:	4630      	mov	r0, r6
 80157f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80157fc:	bfa6      	itte	ge
 80157fe:	461c      	movge	r4, r3
 8015800:	2500      	movge	r5, #0
 8015802:	2501      	movlt	r5, #1
 8015804:	f7ff fd88 	bl	8015318 <_Balloc>
 8015808:	b920      	cbnz	r0, 8015814 <__mdiff+0x5c>
 801580a:	4b2e      	ldr	r3, [pc, #184]	; (80158c4 <__mdiff+0x10c>)
 801580c:	4602      	mov	r2, r0
 801580e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015812:	e7e5      	b.n	80157e0 <__mdiff+0x28>
 8015814:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015818:	6926      	ldr	r6, [r4, #16]
 801581a:	60c5      	str	r5, [r0, #12]
 801581c:	f104 0914 	add.w	r9, r4, #20
 8015820:	f108 0514 	add.w	r5, r8, #20
 8015824:	f100 0e14 	add.w	lr, r0, #20
 8015828:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801582c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015830:	f108 0210 	add.w	r2, r8, #16
 8015834:	46f2      	mov	sl, lr
 8015836:	2100      	movs	r1, #0
 8015838:	f859 3b04 	ldr.w	r3, [r9], #4
 801583c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015840:	fa1f f883 	uxth.w	r8, r3
 8015844:	fa11 f18b 	uxtah	r1, r1, fp
 8015848:	0c1b      	lsrs	r3, r3, #16
 801584a:	eba1 0808 	sub.w	r8, r1, r8
 801584e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015852:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015856:	fa1f f888 	uxth.w	r8, r8
 801585a:	1419      	asrs	r1, r3, #16
 801585c:	454e      	cmp	r6, r9
 801585e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015862:	f84a 3b04 	str.w	r3, [sl], #4
 8015866:	d8e7      	bhi.n	8015838 <__mdiff+0x80>
 8015868:	1b33      	subs	r3, r6, r4
 801586a:	3b15      	subs	r3, #21
 801586c:	f023 0303 	bic.w	r3, r3, #3
 8015870:	3304      	adds	r3, #4
 8015872:	3415      	adds	r4, #21
 8015874:	42a6      	cmp	r6, r4
 8015876:	bf38      	it	cc
 8015878:	2304      	movcc	r3, #4
 801587a:	441d      	add	r5, r3
 801587c:	4473      	add	r3, lr
 801587e:	469e      	mov	lr, r3
 8015880:	462e      	mov	r6, r5
 8015882:	4566      	cmp	r6, ip
 8015884:	d30e      	bcc.n	80158a4 <__mdiff+0xec>
 8015886:	f10c 0203 	add.w	r2, ip, #3
 801588a:	1b52      	subs	r2, r2, r5
 801588c:	f022 0203 	bic.w	r2, r2, #3
 8015890:	3d03      	subs	r5, #3
 8015892:	45ac      	cmp	ip, r5
 8015894:	bf38      	it	cc
 8015896:	2200      	movcc	r2, #0
 8015898:	441a      	add	r2, r3
 801589a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801589e:	b17b      	cbz	r3, 80158c0 <__mdiff+0x108>
 80158a0:	6107      	str	r7, [r0, #16]
 80158a2:	e7a3      	b.n	80157ec <__mdiff+0x34>
 80158a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80158a8:	fa11 f288 	uxtah	r2, r1, r8
 80158ac:	1414      	asrs	r4, r2, #16
 80158ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80158b2:	b292      	uxth	r2, r2
 80158b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80158b8:	f84e 2b04 	str.w	r2, [lr], #4
 80158bc:	1421      	asrs	r1, r4, #16
 80158be:	e7e0      	b.n	8015882 <__mdiff+0xca>
 80158c0:	3f01      	subs	r7, #1
 80158c2:	e7ea      	b.n	801589a <__mdiff+0xe2>
 80158c4:	0801b3e1 	.word	0x0801b3e1
 80158c8:	0801b44d 	.word	0x0801b44d

080158cc <__d2b>:
 80158cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158d0:	4689      	mov	r9, r1
 80158d2:	2101      	movs	r1, #1
 80158d4:	ec57 6b10 	vmov	r6, r7, d0
 80158d8:	4690      	mov	r8, r2
 80158da:	f7ff fd1d 	bl	8015318 <_Balloc>
 80158de:	4604      	mov	r4, r0
 80158e0:	b930      	cbnz	r0, 80158f0 <__d2b+0x24>
 80158e2:	4602      	mov	r2, r0
 80158e4:	4b25      	ldr	r3, [pc, #148]	; (801597c <__d2b+0xb0>)
 80158e6:	4826      	ldr	r0, [pc, #152]	; (8015980 <__d2b+0xb4>)
 80158e8:	f240 310a 	movw	r1, #778	; 0x30a
 80158ec:	f001 ffb6 	bl	801785c <__assert_func>
 80158f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80158f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80158f8:	bb35      	cbnz	r5, 8015948 <__d2b+0x7c>
 80158fa:	2e00      	cmp	r6, #0
 80158fc:	9301      	str	r3, [sp, #4]
 80158fe:	d028      	beq.n	8015952 <__d2b+0x86>
 8015900:	4668      	mov	r0, sp
 8015902:	9600      	str	r6, [sp, #0]
 8015904:	f7ff fd9c 	bl	8015440 <__lo0bits>
 8015908:	9900      	ldr	r1, [sp, #0]
 801590a:	b300      	cbz	r0, 801594e <__d2b+0x82>
 801590c:	9a01      	ldr	r2, [sp, #4]
 801590e:	f1c0 0320 	rsb	r3, r0, #32
 8015912:	fa02 f303 	lsl.w	r3, r2, r3
 8015916:	430b      	orrs	r3, r1
 8015918:	40c2      	lsrs	r2, r0
 801591a:	6163      	str	r3, [r4, #20]
 801591c:	9201      	str	r2, [sp, #4]
 801591e:	9b01      	ldr	r3, [sp, #4]
 8015920:	61a3      	str	r3, [r4, #24]
 8015922:	2b00      	cmp	r3, #0
 8015924:	bf14      	ite	ne
 8015926:	2202      	movne	r2, #2
 8015928:	2201      	moveq	r2, #1
 801592a:	6122      	str	r2, [r4, #16]
 801592c:	b1d5      	cbz	r5, 8015964 <__d2b+0x98>
 801592e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015932:	4405      	add	r5, r0
 8015934:	f8c9 5000 	str.w	r5, [r9]
 8015938:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801593c:	f8c8 0000 	str.w	r0, [r8]
 8015940:	4620      	mov	r0, r4
 8015942:	b003      	add	sp, #12
 8015944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801594c:	e7d5      	b.n	80158fa <__d2b+0x2e>
 801594e:	6161      	str	r1, [r4, #20]
 8015950:	e7e5      	b.n	801591e <__d2b+0x52>
 8015952:	a801      	add	r0, sp, #4
 8015954:	f7ff fd74 	bl	8015440 <__lo0bits>
 8015958:	9b01      	ldr	r3, [sp, #4]
 801595a:	6163      	str	r3, [r4, #20]
 801595c:	2201      	movs	r2, #1
 801595e:	6122      	str	r2, [r4, #16]
 8015960:	3020      	adds	r0, #32
 8015962:	e7e3      	b.n	801592c <__d2b+0x60>
 8015964:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015968:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801596c:	f8c9 0000 	str.w	r0, [r9]
 8015970:	6918      	ldr	r0, [r3, #16]
 8015972:	f7ff fd45 	bl	8015400 <__hi0bits>
 8015976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801597a:	e7df      	b.n	801593c <__d2b+0x70>
 801597c:	0801b3e1 	.word	0x0801b3e1
 8015980:	0801b44d 	.word	0x0801b44d

08015984 <frexp>:
 8015984:	b570      	push	{r4, r5, r6, lr}
 8015986:	2100      	movs	r1, #0
 8015988:	ec55 4b10 	vmov	r4, r5, d0
 801598c:	6001      	str	r1, [r0, #0]
 801598e:	4916      	ldr	r1, [pc, #88]	; (80159e8 <frexp+0x64>)
 8015990:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8015994:	428a      	cmp	r2, r1
 8015996:	4606      	mov	r6, r0
 8015998:	462b      	mov	r3, r5
 801599a:	dc22      	bgt.n	80159e2 <frexp+0x5e>
 801599c:	ee10 1a10 	vmov	r1, s0
 80159a0:	4311      	orrs	r1, r2
 80159a2:	d01e      	beq.n	80159e2 <frexp+0x5e>
 80159a4:	4911      	ldr	r1, [pc, #68]	; (80159ec <frexp+0x68>)
 80159a6:	4029      	ands	r1, r5
 80159a8:	b969      	cbnz	r1, 80159c6 <frexp+0x42>
 80159aa:	4b11      	ldr	r3, [pc, #68]	; (80159f0 <frexp+0x6c>)
 80159ac:	2200      	movs	r2, #0
 80159ae:	ee10 0a10 	vmov	r0, s0
 80159b2:	4629      	mov	r1, r5
 80159b4:	f7ea fe4a 	bl	800064c <__aeabi_dmul>
 80159b8:	460b      	mov	r3, r1
 80159ba:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80159be:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80159c2:	4604      	mov	r4, r0
 80159c4:	6031      	str	r1, [r6, #0]
 80159c6:	6831      	ldr	r1, [r6, #0]
 80159c8:	1512      	asrs	r2, r2, #20
 80159ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80159ce:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80159d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80159d6:	440a      	add	r2, r1
 80159d8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80159dc:	6032      	str	r2, [r6, #0]
 80159de:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80159e2:	ec45 4b10 	vmov	d0, r4, r5
 80159e6:	bd70      	pop	{r4, r5, r6, pc}
 80159e8:	7fefffff 	.word	0x7fefffff
 80159ec:	7ff00000 	.word	0x7ff00000
 80159f0:	43500000 	.word	0x43500000

080159f4 <_sbrk_r>:
 80159f4:	b538      	push	{r3, r4, r5, lr}
 80159f6:	4d06      	ldr	r5, [pc, #24]	; (8015a10 <_sbrk_r+0x1c>)
 80159f8:	2300      	movs	r3, #0
 80159fa:	4604      	mov	r4, r0
 80159fc:	4608      	mov	r0, r1
 80159fe:	602b      	str	r3, [r5, #0]
 8015a00:	f7ec f854 	bl	8001aac <_sbrk>
 8015a04:	1c43      	adds	r3, r0, #1
 8015a06:	d102      	bne.n	8015a0e <_sbrk_r+0x1a>
 8015a08:	682b      	ldr	r3, [r5, #0]
 8015a0a:	b103      	cbz	r3, 8015a0e <_sbrk_r+0x1a>
 8015a0c:	6023      	str	r3, [r4, #0]
 8015a0e:	bd38      	pop	{r3, r4, r5, pc}
 8015a10:	200073e4 	.word	0x200073e4

08015a14 <siscanf>:
 8015a14:	b40e      	push	{r1, r2, r3}
 8015a16:	b510      	push	{r4, lr}
 8015a18:	b09f      	sub	sp, #124	; 0x7c
 8015a1a:	ac21      	add	r4, sp, #132	; 0x84
 8015a1c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015a20:	f854 2b04 	ldr.w	r2, [r4], #4
 8015a24:	9201      	str	r2, [sp, #4]
 8015a26:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015a2a:	9004      	str	r0, [sp, #16]
 8015a2c:	9008      	str	r0, [sp, #32]
 8015a2e:	f7ea fbef 	bl	8000210 <strlen>
 8015a32:	4b0c      	ldr	r3, [pc, #48]	; (8015a64 <siscanf+0x50>)
 8015a34:	9005      	str	r0, [sp, #20]
 8015a36:	9009      	str	r0, [sp, #36]	; 0x24
 8015a38:	930c      	str	r3, [sp, #48]	; 0x30
 8015a3a:	480b      	ldr	r0, [pc, #44]	; (8015a68 <siscanf+0x54>)
 8015a3c:	9a01      	ldr	r2, [sp, #4]
 8015a3e:	6800      	ldr	r0, [r0, #0]
 8015a40:	9403      	str	r4, [sp, #12]
 8015a42:	2300      	movs	r3, #0
 8015a44:	9310      	str	r3, [sp, #64]	; 0x40
 8015a46:	9315      	str	r3, [sp, #84]	; 0x54
 8015a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015a50:	a904      	add	r1, sp, #16
 8015a52:	4623      	mov	r3, r4
 8015a54:	f000 f9f6 	bl	8015e44 <__ssvfiscanf_r>
 8015a58:	b01f      	add	sp, #124	; 0x7c
 8015a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a5e:	b003      	add	sp, #12
 8015a60:	4770      	bx	lr
 8015a62:	bf00      	nop
 8015a64:	08015a8f 	.word	0x08015a8f
 8015a68:	2000001c 	.word	0x2000001c

08015a6c <__sread>:
 8015a6c:	b510      	push	{r4, lr}
 8015a6e:	460c      	mov	r4, r1
 8015a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a74:	f002 f9f6 	bl	8017e64 <_read_r>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	bfab      	itete	ge
 8015a7c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8015a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8015a80:	181b      	addge	r3, r3, r0
 8015a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a86:	bfac      	ite	ge
 8015a88:	6523      	strge	r3, [r4, #80]	; 0x50
 8015a8a:	81a3      	strhlt	r3, [r4, #12]
 8015a8c:	bd10      	pop	{r4, pc}

08015a8e <__seofread>:
 8015a8e:	2000      	movs	r0, #0
 8015a90:	4770      	bx	lr

08015a92 <__swrite>:
 8015a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a96:	461f      	mov	r7, r3
 8015a98:	898b      	ldrh	r3, [r1, #12]
 8015a9a:	05db      	lsls	r3, r3, #23
 8015a9c:	4605      	mov	r5, r0
 8015a9e:	460c      	mov	r4, r1
 8015aa0:	4616      	mov	r6, r2
 8015aa2:	d505      	bpl.n	8015ab0 <__swrite+0x1e>
 8015aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aa8:	2302      	movs	r3, #2
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f002 f99c 	bl	8017de8 <_lseek_r>
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015aba:	81a3      	strh	r3, [r4, #12]
 8015abc:	4632      	mov	r2, r6
 8015abe:	463b      	mov	r3, r7
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac6:	f001 be75 	b.w	80177b4 <_write_r>

08015aca <__sseek>:
 8015aca:	b510      	push	{r4, lr}
 8015acc:	460c      	mov	r4, r1
 8015ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ad2:	f002 f989 	bl	8017de8 <_lseek_r>
 8015ad6:	1c43      	adds	r3, r0, #1
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	bf15      	itete	ne
 8015adc:	6520      	strne	r0, [r4, #80]	; 0x50
 8015ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015ae6:	81a3      	strheq	r3, [r4, #12]
 8015ae8:	bf18      	it	ne
 8015aea:	81a3      	strhne	r3, [r4, #12]
 8015aec:	bd10      	pop	{r4, pc}

08015aee <__sclose>:
 8015aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015af2:	f001 bf07 	b.w	8017904 <_close_r>

08015af6 <strcpy>:
 8015af6:	4603      	mov	r3, r0
 8015af8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015afc:	f803 2b01 	strb.w	r2, [r3], #1
 8015b00:	2a00      	cmp	r2, #0
 8015b02:	d1f9      	bne.n	8015af8 <strcpy+0x2>
 8015b04:	4770      	bx	lr

08015b06 <strncpy>:
 8015b06:	b510      	push	{r4, lr}
 8015b08:	3901      	subs	r1, #1
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	b132      	cbz	r2, 8015b1c <strncpy+0x16>
 8015b0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015b12:	f803 4b01 	strb.w	r4, [r3], #1
 8015b16:	3a01      	subs	r2, #1
 8015b18:	2c00      	cmp	r4, #0
 8015b1a:	d1f7      	bne.n	8015b0c <strncpy+0x6>
 8015b1c:	441a      	add	r2, r3
 8015b1e:	2100      	movs	r1, #0
 8015b20:	4293      	cmp	r3, r2
 8015b22:	d100      	bne.n	8015b26 <strncpy+0x20>
 8015b24:	bd10      	pop	{r4, pc}
 8015b26:	f803 1b01 	strb.w	r1, [r3], #1
 8015b2a:	e7f9      	b.n	8015b20 <strncpy+0x1a>

08015b2c <_strtoul_l.constprop.0>:
 8015b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b30:	4f36      	ldr	r7, [pc, #216]	; (8015c0c <_strtoul_l.constprop.0+0xe0>)
 8015b32:	4686      	mov	lr, r0
 8015b34:	460d      	mov	r5, r1
 8015b36:	4628      	mov	r0, r5
 8015b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b3c:	5de6      	ldrb	r6, [r4, r7]
 8015b3e:	f016 0608 	ands.w	r6, r6, #8
 8015b42:	d1f8      	bne.n	8015b36 <_strtoul_l.constprop.0+0xa>
 8015b44:	2c2d      	cmp	r4, #45	; 0x2d
 8015b46:	d12f      	bne.n	8015ba8 <_strtoul_l.constprop.0+0x7c>
 8015b48:	782c      	ldrb	r4, [r5, #0]
 8015b4a:	2601      	movs	r6, #1
 8015b4c:	1c85      	adds	r5, r0, #2
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d057      	beq.n	8015c02 <_strtoul_l.constprop.0+0xd6>
 8015b52:	2b10      	cmp	r3, #16
 8015b54:	d109      	bne.n	8015b6a <_strtoul_l.constprop.0+0x3e>
 8015b56:	2c30      	cmp	r4, #48	; 0x30
 8015b58:	d107      	bne.n	8015b6a <_strtoul_l.constprop.0+0x3e>
 8015b5a:	7828      	ldrb	r0, [r5, #0]
 8015b5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015b60:	2858      	cmp	r0, #88	; 0x58
 8015b62:	d149      	bne.n	8015bf8 <_strtoul_l.constprop.0+0xcc>
 8015b64:	786c      	ldrb	r4, [r5, #1]
 8015b66:	2310      	movs	r3, #16
 8015b68:	3502      	adds	r5, #2
 8015b6a:	f04f 38ff 	mov.w	r8, #4294967295
 8015b6e:	2700      	movs	r7, #0
 8015b70:	fbb8 f8f3 	udiv	r8, r8, r3
 8015b74:	fb03 f908 	mul.w	r9, r3, r8
 8015b78:	ea6f 0909 	mvn.w	r9, r9
 8015b7c:	4638      	mov	r0, r7
 8015b7e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015b82:	f1bc 0f09 	cmp.w	ip, #9
 8015b86:	d814      	bhi.n	8015bb2 <_strtoul_l.constprop.0+0x86>
 8015b88:	4664      	mov	r4, ip
 8015b8a:	42a3      	cmp	r3, r4
 8015b8c:	dd22      	ble.n	8015bd4 <_strtoul_l.constprop.0+0xa8>
 8015b8e:	2f00      	cmp	r7, #0
 8015b90:	db1d      	blt.n	8015bce <_strtoul_l.constprop.0+0xa2>
 8015b92:	4580      	cmp	r8, r0
 8015b94:	d31b      	bcc.n	8015bce <_strtoul_l.constprop.0+0xa2>
 8015b96:	d101      	bne.n	8015b9c <_strtoul_l.constprop.0+0x70>
 8015b98:	45a1      	cmp	r9, r4
 8015b9a:	db18      	blt.n	8015bce <_strtoul_l.constprop.0+0xa2>
 8015b9c:	fb00 4003 	mla	r0, r0, r3, r4
 8015ba0:	2701      	movs	r7, #1
 8015ba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015ba6:	e7ea      	b.n	8015b7e <_strtoul_l.constprop.0+0x52>
 8015ba8:	2c2b      	cmp	r4, #43	; 0x2b
 8015baa:	bf04      	itt	eq
 8015bac:	782c      	ldrbeq	r4, [r5, #0]
 8015bae:	1c85      	addeq	r5, r0, #2
 8015bb0:	e7cd      	b.n	8015b4e <_strtoul_l.constprop.0+0x22>
 8015bb2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015bb6:	f1bc 0f19 	cmp.w	ip, #25
 8015bba:	d801      	bhi.n	8015bc0 <_strtoul_l.constprop.0+0x94>
 8015bbc:	3c37      	subs	r4, #55	; 0x37
 8015bbe:	e7e4      	b.n	8015b8a <_strtoul_l.constprop.0+0x5e>
 8015bc0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015bc4:	f1bc 0f19 	cmp.w	ip, #25
 8015bc8:	d804      	bhi.n	8015bd4 <_strtoul_l.constprop.0+0xa8>
 8015bca:	3c57      	subs	r4, #87	; 0x57
 8015bcc:	e7dd      	b.n	8015b8a <_strtoul_l.constprop.0+0x5e>
 8015bce:	f04f 37ff 	mov.w	r7, #4294967295
 8015bd2:	e7e6      	b.n	8015ba2 <_strtoul_l.constprop.0+0x76>
 8015bd4:	2f00      	cmp	r7, #0
 8015bd6:	da07      	bge.n	8015be8 <_strtoul_l.constprop.0+0xbc>
 8015bd8:	2322      	movs	r3, #34	; 0x22
 8015bda:	f8ce 3000 	str.w	r3, [lr]
 8015bde:	f04f 30ff 	mov.w	r0, #4294967295
 8015be2:	b932      	cbnz	r2, 8015bf2 <_strtoul_l.constprop.0+0xc6>
 8015be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015be8:	b106      	cbz	r6, 8015bec <_strtoul_l.constprop.0+0xc0>
 8015bea:	4240      	negs	r0, r0
 8015bec:	2a00      	cmp	r2, #0
 8015bee:	d0f9      	beq.n	8015be4 <_strtoul_l.constprop.0+0xb8>
 8015bf0:	b107      	cbz	r7, 8015bf4 <_strtoul_l.constprop.0+0xc8>
 8015bf2:	1e69      	subs	r1, r5, #1
 8015bf4:	6011      	str	r1, [r2, #0]
 8015bf6:	e7f5      	b.n	8015be4 <_strtoul_l.constprop.0+0xb8>
 8015bf8:	2430      	movs	r4, #48	; 0x30
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d1b5      	bne.n	8015b6a <_strtoul_l.constprop.0+0x3e>
 8015bfe:	2308      	movs	r3, #8
 8015c00:	e7b3      	b.n	8015b6a <_strtoul_l.constprop.0+0x3e>
 8015c02:	2c30      	cmp	r4, #48	; 0x30
 8015c04:	d0a9      	beq.n	8015b5a <_strtoul_l.constprop.0+0x2e>
 8015c06:	230a      	movs	r3, #10
 8015c08:	e7af      	b.n	8015b6a <_strtoul_l.constprop.0+0x3e>
 8015c0a:	bf00      	nop
 8015c0c:	0801b15f 	.word	0x0801b15f

08015c10 <_strtoul_r>:
 8015c10:	f7ff bf8c 	b.w	8015b2c <_strtoul_l.constprop.0>

08015c14 <strtoul>:
 8015c14:	4613      	mov	r3, r2
 8015c16:	460a      	mov	r2, r1
 8015c18:	4601      	mov	r1, r0
 8015c1a:	4802      	ldr	r0, [pc, #8]	; (8015c24 <strtoul+0x10>)
 8015c1c:	6800      	ldr	r0, [r0, #0]
 8015c1e:	f7ff bf85 	b.w	8015b2c <_strtoul_l.constprop.0>
 8015c22:	bf00      	nop
 8015c24:	2000001c 	.word	0x2000001c

08015c28 <__ssprint_r>:
 8015c28:	6893      	ldr	r3, [r2, #8]
 8015c2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2e:	4680      	mov	r8, r0
 8015c30:	460c      	mov	r4, r1
 8015c32:	4617      	mov	r7, r2
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d061      	beq.n	8015cfc <__ssprint_r+0xd4>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	f8d2 a000 	ldr.w	sl, [r2]
 8015c3e:	9301      	str	r3, [sp, #4]
 8015c40:	469b      	mov	fp, r3
 8015c42:	f1bb 0f00 	cmp.w	fp, #0
 8015c46:	d02b      	beq.n	8015ca0 <__ssprint_r+0x78>
 8015c48:	68a6      	ldr	r6, [r4, #8]
 8015c4a:	455e      	cmp	r6, fp
 8015c4c:	d844      	bhi.n	8015cd8 <__ssprint_r+0xb0>
 8015c4e:	89a2      	ldrh	r2, [r4, #12]
 8015c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015c54:	d03e      	beq.n	8015cd4 <__ssprint_r+0xac>
 8015c56:	6820      	ldr	r0, [r4, #0]
 8015c58:	6921      	ldr	r1, [r4, #16]
 8015c5a:	6965      	ldr	r5, [r4, #20]
 8015c5c:	eba0 0901 	sub.w	r9, r0, r1
 8015c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015c68:	f109 0001 	add.w	r0, r9, #1
 8015c6c:	106d      	asrs	r5, r5, #1
 8015c6e:	4458      	add	r0, fp
 8015c70:	4285      	cmp	r5, r0
 8015c72:	bf38      	it	cc
 8015c74:	4605      	movcc	r5, r0
 8015c76:	0553      	lsls	r3, r2, #21
 8015c78:	d545      	bpl.n	8015d06 <__ssprint_r+0xde>
 8015c7a:	4629      	mov	r1, r5
 8015c7c:	4640      	mov	r0, r8
 8015c7e:	f7ff f903 	bl	8014e88 <_malloc_r>
 8015c82:	4606      	mov	r6, r0
 8015c84:	b9a0      	cbnz	r0, 8015cb0 <__ssprint_r+0x88>
 8015c86:	230c      	movs	r3, #12
 8015c88:	f8c8 3000 	str.w	r3, [r8]
 8015c8c:	89a3      	ldrh	r3, [r4, #12]
 8015c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c92:	81a3      	strh	r3, [r4, #12]
 8015c94:	2300      	movs	r3, #0
 8015c96:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8015c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c9e:	e02f      	b.n	8015d00 <__ssprint_r+0xd8>
 8015ca0:	f8da 3000 	ldr.w	r3, [sl]
 8015ca4:	f8da b004 	ldr.w	fp, [sl, #4]
 8015ca8:	9301      	str	r3, [sp, #4]
 8015caa:	f10a 0a08 	add.w	sl, sl, #8
 8015cae:	e7c8      	b.n	8015c42 <__ssprint_r+0x1a>
 8015cb0:	464a      	mov	r2, r9
 8015cb2:	6921      	ldr	r1, [r4, #16]
 8015cb4:	f7fa fbfa 	bl	80104ac <memcpy>
 8015cb8:	89a2      	ldrh	r2, [r4, #12]
 8015cba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8015cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015cc2:	81a2      	strh	r2, [r4, #12]
 8015cc4:	6126      	str	r6, [r4, #16]
 8015cc6:	6165      	str	r5, [r4, #20]
 8015cc8:	444e      	add	r6, r9
 8015cca:	eba5 0509 	sub.w	r5, r5, r9
 8015cce:	6026      	str	r6, [r4, #0]
 8015cd0:	60a5      	str	r5, [r4, #8]
 8015cd2:	465e      	mov	r6, fp
 8015cd4:	455e      	cmp	r6, fp
 8015cd6:	d900      	bls.n	8015cda <__ssprint_r+0xb2>
 8015cd8:	465e      	mov	r6, fp
 8015cda:	4632      	mov	r2, r6
 8015cdc:	9901      	ldr	r1, [sp, #4]
 8015cde:	6820      	ldr	r0, [r4, #0]
 8015ce0:	f7fa fbf2 	bl	80104c8 <memmove>
 8015ce4:	68a2      	ldr	r2, [r4, #8]
 8015ce6:	1b92      	subs	r2, r2, r6
 8015ce8:	60a2      	str	r2, [r4, #8]
 8015cea:	6822      	ldr	r2, [r4, #0]
 8015cec:	4432      	add	r2, r6
 8015cee:	6022      	str	r2, [r4, #0]
 8015cf0:	68ba      	ldr	r2, [r7, #8]
 8015cf2:	eba2 030b 	sub.w	r3, r2, fp
 8015cf6:	60bb      	str	r3, [r7, #8]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d1d1      	bne.n	8015ca0 <__ssprint_r+0x78>
 8015cfc:	2000      	movs	r0, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	b003      	add	sp, #12
 8015d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d06:	462a      	mov	r2, r5
 8015d08:	4640      	mov	r0, r8
 8015d0a:	f002 f8c5 	bl	8017e98 <_realloc_r>
 8015d0e:	4606      	mov	r6, r0
 8015d10:	2800      	cmp	r0, #0
 8015d12:	d1d7      	bne.n	8015cc4 <__ssprint_r+0x9c>
 8015d14:	6921      	ldr	r1, [r4, #16]
 8015d16:	4640      	mov	r0, r8
 8015d18:	f7fe fe5c 	bl	80149d4 <_free_r>
 8015d1c:	e7b3      	b.n	8015c86 <__ssprint_r+0x5e>

08015d1e <_sungetc_r>:
 8015d1e:	b538      	push	{r3, r4, r5, lr}
 8015d20:	1c4b      	adds	r3, r1, #1
 8015d22:	4614      	mov	r4, r2
 8015d24:	d103      	bne.n	8015d2e <_sungetc_r+0x10>
 8015d26:	f04f 35ff 	mov.w	r5, #4294967295
 8015d2a:	4628      	mov	r0, r5
 8015d2c:	bd38      	pop	{r3, r4, r5, pc}
 8015d2e:	8993      	ldrh	r3, [r2, #12]
 8015d30:	f023 0320 	bic.w	r3, r3, #32
 8015d34:	8193      	strh	r3, [r2, #12]
 8015d36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015d38:	6852      	ldr	r2, [r2, #4]
 8015d3a:	b2cd      	uxtb	r5, r1
 8015d3c:	b18b      	cbz	r3, 8015d62 <_sungetc_r+0x44>
 8015d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d40:	4293      	cmp	r3, r2
 8015d42:	dd08      	ble.n	8015d56 <_sungetc_r+0x38>
 8015d44:	6823      	ldr	r3, [r4, #0]
 8015d46:	1e5a      	subs	r2, r3, #1
 8015d48:	6022      	str	r2, [r4, #0]
 8015d4a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015d4e:	6863      	ldr	r3, [r4, #4]
 8015d50:	3301      	adds	r3, #1
 8015d52:	6063      	str	r3, [r4, #4]
 8015d54:	e7e9      	b.n	8015d2a <_sungetc_r+0xc>
 8015d56:	4621      	mov	r1, r4
 8015d58:	f000 ffe9 	bl	8016d2e <__submore>
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	d0f1      	beq.n	8015d44 <_sungetc_r+0x26>
 8015d60:	e7e1      	b.n	8015d26 <_sungetc_r+0x8>
 8015d62:	6921      	ldr	r1, [r4, #16]
 8015d64:	6823      	ldr	r3, [r4, #0]
 8015d66:	b151      	cbz	r1, 8015d7e <_sungetc_r+0x60>
 8015d68:	4299      	cmp	r1, r3
 8015d6a:	d208      	bcs.n	8015d7e <_sungetc_r+0x60>
 8015d6c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015d70:	42a9      	cmp	r1, r5
 8015d72:	d104      	bne.n	8015d7e <_sungetc_r+0x60>
 8015d74:	3b01      	subs	r3, #1
 8015d76:	3201      	adds	r2, #1
 8015d78:	6023      	str	r3, [r4, #0]
 8015d7a:	6062      	str	r2, [r4, #4]
 8015d7c:	e7d5      	b.n	8015d2a <_sungetc_r+0xc>
 8015d7e:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8015d82:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8015d86:	6323      	str	r3, [r4, #48]	; 0x30
 8015d88:	2303      	movs	r3, #3
 8015d8a:	6363      	str	r3, [r4, #52]	; 0x34
 8015d8c:	4623      	mov	r3, r4
 8015d8e:	f803 5f42 	strb.w	r5, [r3, #66]!
 8015d92:	6023      	str	r3, [r4, #0]
 8015d94:	2301      	movs	r3, #1
 8015d96:	e7dc      	b.n	8015d52 <_sungetc_r+0x34>

08015d98 <__ssrefill_r>:
 8015d98:	b510      	push	{r4, lr}
 8015d9a:	460c      	mov	r4, r1
 8015d9c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8015d9e:	b169      	cbz	r1, 8015dbc <__ssrefill_r+0x24>
 8015da0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8015da4:	4299      	cmp	r1, r3
 8015da6:	d001      	beq.n	8015dac <__ssrefill_r+0x14>
 8015da8:	f7fe fe14 	bl	80149d4 <_free_r>
 8015dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015dae:	6063      	str	r3, [r4, #4]
 8015db0:	2000      	movs	r0, #0
 8015db2:	6320      	str	r0, [r4, #48]	; 0x30
 8015db4:	b113      	cbz	r3, 8015dbc <__ssrefill_r+0x24>
 8015db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015db8:	6023      	str	r3, [r4, #0]
 8015dba:	bd10      	pop	{r4, pc}
 8015dbc:	6923      	ldr	r3, [r4, #16]
 8015dbe:	6023      	str	r3, [r4, #0]
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	6063      	str	r3, [r4, #4]
 8015dc4:	89a3      	ldrh	r3, [r4, #12]
 8015dc6:	f043 0320 	orr.w	r3, r3, #32
 8015dca:	81a3      	strh	r3, [r4, #12]
 8015dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015dd0:	e7f3      	b.n	8015dba <__ssrefill_r+0x22>

08015dd2 <_sfread_r>:
 8015dd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd6:	461f      	mov	r7, r3
 8015dd8:	4613      	mov	r3, r2
 8015dda:	437b      	muls	r3, r7
 8015ddc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015dde:	4682      	mov	sl, r0
 8015de0:	4688      	mov	r8, r1
 8015de2:	4691      	mov	r9, r2
 8015de4:	d027      	beq.n	8015e36 <_sfread_r+0x64>
 8015de6:	461e      	mov	r6, r3
 8015de8:	e9d4 1500 	ldrd	r1, r5, [r4]
 8015dec:	42b5      	cmp	r5, r6
 8015dee:	d30b      	bcc.n	8015e08 <_sfread_r+0x36>
 8015df0:	4632      	mov	r2, r6
 8015df2:	4640      	mov	r0, r8
 8015df4:	f7fa fb5a 	bl	80104ac <memcpy>
 8015df8:	6862      	ldr	r2, [r4, #4]
 8015dfa:	6821      	ldr	r1, [r4, #0]
 8015dfc:	1b92      	subs	r2, r2, r6
 8015dfe:	4431      	add	r1, r6
 8015e00:	6062      	str	r2, [r4, #4]
 8015e02:	6021      	str	r1, [r4, #0]
 8015e04:	463b      	mov	r3, r7
 8015e06:	e016      	b.n	8015e36 <_sfread_r+0x64>
 8015e08:	462a      	mov	r2, r5
 8015e0a:	4640      	mov	r0, r8
 8015e0c:	9301      	str	r3, [sp, #4]
 8015e0e:	f7fa fb4d 	bl	80104ac <memcpy>
 8015e12:	6822      	ldr	r2, [r4, #0]
 8015e14:	2300      	movs	r3, #0
 8015e16:	442a      	add	r2, r5
 8015e18:	6063      	str	r3, [r4, #4]
 8015e1a:	6022      	str	r2, [r4, #0]
 8015e1c:	4621      	mov	r1, r4
 8015e1e:	4650      	mov	r0, sl
 8015e20:	f7ff ffba 	bl	8015d98 <__ssrefill_r>
 8015e24:	44a8      	add	r8, r5
 8015e26:	9b01      	ldr	r3, [sp, #4]
 8015e28:	eba6 0b05 	sub.w	fp, r6, r5
 8015e2c:	b138      	cbz	r0, 8015e3e <_sfread_r+0x6c>
 8015e2e:	18e9      	adds	r1, r5, r3
 8015e30:	1b89      	subs	r1, r1, r6
 8015e32:	fbb1 f3f9 	udiv	r3, r1, r9
 8015e36:	4618      	mov	r0, r3
 8015e38:	b003      	add	sp, #12
 8015e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e3e:	465e      	mov	r6, fp
 8015e40:	e7d2      	b.n	8015de8 <_sfread_r+0x16>
	...

08015e44 <__ssvfiscanf_r>:
 8015e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e48:	ed2d 8b02 	vpush	{d8}
 8015e4c:	b0df      	sub	sp, #380	; 0x17c
 8015e4e:	461e      	mov	r6, r3
 8015e50:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8015e54:	af02      	add	r7, sp, #8
 8015e56:	049d      	lsls	r5, r3, #18
 8015e58:	ee08 0a10 	vmov	s16, r0
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	613a      	str	r2, [r7, #16]
 8015e60:	d406      	bmi.n	8015e70 <__ssvfiscanf_r+0x2c>
 8015e62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015e66:	818b      	strh	r3, [r1, #12]
 8015e68:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8015e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015e6e:	664b      	str	r3, [r1, #100]	; 0x64
 8015e70:	2300      	movs	r3, #0
 8015e72:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8015e76:	617b      	str	r3, [r7, #20]
 8015e78:	469b      	mov	fp, r3
 8015e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8015e7e:	693a      	ldr	r2, [r7, #16]
 8015e80:	f812 3b01 	ldrb.w	r3, [r2], #1
 8015e84:	613a      	str	r2, [r7, #16]
 8015e86:	637b      	str	r3, [r7, #52]	; 0x34
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d032      	beq.n	8015ef2 <__ssvfiscanf_r+0xae>
 8015e8c:	4a7e      	ldr	r2, [pc, #504]	; (8016088 <__ssvfiscanf_r+0x244>)
 8015e8e:	f813 9002 	ldrb.w	r9, [r3, r2]
 8015e92:	f019 0908 	ands.w	r9, r9, #8
 8015e96:	d019      	beq.n	8015ecc <__ssvfiscanf_r+0x88>
 8015e98:	6863      	ldr	r3, [r4, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	dd0e      	ble.n	8015ebc <__ssvfiscanf_r+0x78>
 8015e9e:	6823      	ldr	r3, [r4, #0]
 8015ea0:	4979      	ldr	r1, [pc, #484]	; (8016088 <__ssvfiscanf_r+0x244>)
 8015ea2:	781a      	ldrb	r2, [r3, #0]
 8015ea4:	5c8a      	ldrb	r2, [r1, r2]
 8015ea6:	0710      	lsls	r0, r2, #28
 8015ea8:	d5e9      	bpl.n	8015e7e <__ssvfiscanf_r+0x3a>
 8015eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015eac:	3201      	adds	r2, #1
 8015eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015eb0:	6862      	ldr	r2, [r4, #4]
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	3a01      	subs	r2, #1
 8015eb6:	6062      	str	r2, [r4, #4]
 8015eb8:	6023      	str	r3, [r4, #0]
 8015eba:	e7ed      	b.n	8015e98 <__ssvfiscanf_r+0x54>
 8015ebc:	ee18 0a10 	vmov	r0, s16
 8015ec0:	4621      	mov	r1, r4
 8015ec2:	f7ff ff69 	bl	8015d98 <__ssrefill_r>
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	d0e9      	beq.n	8015e9e <__ssvfiscanf_r+0x5a>
 8015eca:	e7d8      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 8015ecc:	2b25      	cmp	r3, #37	; 0x25
 8015ece:	d161      	bne.n	8015f94 <__ssvfiscanf_r+0x150>
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 8015ed6:	220a      	movs	r2, #10
 8015ed8:	6939      	ldr	r1, [r7, #16]
 8015eda:	781d      	ldrb	r5, [r3, #0]
 8015edc:	3101      	adds	r1, #1
 8015ede:	2d7a      	cmp	r5, #122	; 0x7a
 8015ee0:	6139      	str	r1, [r7, #16]
 8015ee2:	d806      	bhi.n	8015ef2 <__ssvfiscanf_r+0xae>
 8015ee4:	2d42      	cmp	r5, #66	; 0x42
 8015ee6:	d809      	bhi.n	8015efc <__ssvfiscanf_r+0xb8>
 8015ee8:	2d2a      	cmp	r5, #42	; 0x2a
 8015eea:	d07a      	beq.n	8015fe2 <__ssvfiscanf_r+0x19e>
 8015eec:	d844      	bhi.n	8015f78 <__ssvfiscanf_r+0x134>
 8015eee:	2d25      	cmp	r5, #37	; 0x25
 8015ef0:	d050      	beq.n	8015f94 <__ssvfiscanf_r+0x150>
 8015ef2:	f1bb 0f00 	cmp.w	fp, #0
 8015ef6:	f000 8120 	beq.w	801613a <__ssvfiscanf_r+0x2f6>
 8015efa:	e119      	b.n	8016130 <__ssvfiscanf_r+0x2ec>
 8015efc:	3d43      	subs	r5, #67	; 0x43
 8015efe:	2d37      	cmp	r5, #55	; 0x37
 8015f00:	f200 8104 	bhi.w	801610c <__ssvfiscanf_r+0x2c8>
 8015f04:	e8df f015 	tbh	[pc, r5, lsl #1]
 8015f08:	00aa012b 	.word	0x00aa012b
 8015f0c:	01020102 	.word	0x01020102
 8015f10:	01020102 	.word	0x01020102
 8015f14:	01020102 	.word	0x01020102
 8015f18:	00930102 	.word	0x00930102
 8015f1c:	01020102 	.word	0x01020102
 8015f20:	010200ae 	.word	0x010200ae
 8015f24:	01020102 	.word	0x01020102
 8015f28:	010200c6 	.word	0x010200c6
 8015f2c:	01020102 	.word	0x01020102
 8015f30:	00ba0102 	.word	0x00ba0102
 8015f34:	01020102 	.word	0x01020102
 8015f38:	01020121 	.word	0x01020121
 8015f3c:	01020102 	.word	0x01020102
 8015f40:	01020102 	.word	0x01020102
 8015f44:	01020102 	.word	0x01020102
 8015f48:	00ac012d 	.word	0x00ac012d
 8015f4c:	01020102 	.word	0x01020102
 8015f50:	00850102 	.word	0x00850102
 8015f54:	00930155 	.word	0x00930155
 8015f58:	00760102 	.word	0x00760102
 8015f5c:	0134009b 	.word	0x0134009b
 8015f60:	013100b0 	.word	0x013100b0
 8015f64:	01020102 	.word	0x01020102
 8015f68:	009700c8 	.word	0x009700c8
 8015f6c:	010200b6 	.word	0x010200b6
 8015f70:	00ba0102 	.word	0x00ba0102
 8015f74:	00970102 	.word	0x00970102
 8015f78:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8015f7c:	2b09      	cmp	r3, #9
 8015f7e:	d8b8      	bhi.n	8015ef2 <__ssvfiscanf_r+0xae>
 8015f80:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8015f84:	d1b5      	bne.n	8015ef2 <__ssvfiscanf_r+0xae>
 8015f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f88:	fb02 5503 	mla	r5, r2, r3, r5
 8015f8c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8015f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8015f92:	e02d      	b.n	8015ff0 <__ssvfiscanf_r+0x1ac>
 8015f94:	6863      	ldr	r3, [r4, #4]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	dd0f      	ble.n	8015fba <__ssvfiscanf_r+0x176>
 8015f9a:	6823      	ldr	r3, [r4, #0]
 8015f9c:	693a      	ldr	r2, [r7, #16]
 8015f9e:	7819      	ldrb	r1, [r3, #0]
 8015fa0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8015fa4:	4291      	cmp	r1, r2
 8015fa6:	d1a4      	bne.n	8015ef2 <__ssvfiscanf_r+0xae>
 8015fa8:	6862      	ldr	r2, [r4, #4]
 8015faa:	3301      	adds	r3, #1
 8015fac:	6023      	str	r3, [r4, #0]
 8015fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb0:	3a01      	subs	r2, #1
 8015fb2:	6062      	str	r2, [r4, #4]
 8015fb4:	3301      	adds	r3, #1
 8015fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015fb8:	e761      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 8015fba:	ee18 0a10 	vmov	r0, s16
 8015fbe:	4621      	mov	r1, r4
 8015fc0:	f7ff feea 	bl	8015d98 <__ssrefill_r>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d0e8      	beq.n	8015f9a <__ssvfiscanf_r+0x156>
 8015fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fca:	b113      	cbz	r3, 8015fd2 <__ssvfiscanf_r+0x18e>
 8015fcc:	89a3      	ldrh	r3, [r4, #12]
 8015fce:	065b      	lsls	r3, r3, #25
 8015fd0:	d58f      	bpl.n	8015ef2 <__ssvfiscanf_r+0xae>
 8015fd2:	f1bb 0f00 	cmp.w	fp, #0
 8015fd6:	f040 809f 	bne.w	8016118 <__ssvfiscanf_r+0x2d4>
 8015fda:	f04f 33ff 	mov.w	r3, #4294967295
 8015fde:	627b      	str	r3, [r7, #36]	; 0x24
 8015fe0:	e0ab      	b.n	801613a <__ssvfiscanf_r+0x2f6>
 8015fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe4:	ea53 0309 	orrs.w	r3, r3, r9
 8015fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8015fea:	d182      	bne.n	8015ef2 <__ssvfiscanf_r+0xae>
 8015fec:	f04f 0910 	mov.w	r9, #16
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	e771      	b.n	8015ed8 <__ssvfiscanf_r+0x94>
 8015ff4:	f019 0f0f 	tst.w	r9, #15
 8015ff8:	f47f af7b 	bne.w	8015ef2 <__ssvfiscanf_r+0xae>
 8015ffc:	7859      	ldrb	r1, [r3, #1]
 8015ffe:	296c      	cmp	r1, #108	; 0x6c
 8016000:	d104      	bne.n	801600c <__ssvfiscanf_r+0x1c8>
 8016002:	3302      	adds	r3, #2
 8016004:	613b      	str	r3, [r7, #16]
 8016006:	f049 0902 	orr.w	r9, r9, #2
 801600a:	e7f1      	b.n	8015ff0 <__ssvfiscanf_r+0x1ac>
 801600c:	f049 0901 	orr.w	r9, r9, #1
 8016010:	e7ee      	b.n	8015ff0 <__ssvfiscanf_r+0x1ac>
 8016012:	f019 0f0f 	tst.w	r9, #15
 8016016:	f47f af6c 	bne.w	8015ef2 <__ssvfiscanf_r+0xae>
 801601a:	7859      	ldrb	r1, [r3, #1]
 801601c:	2968      	cmp	r1, #104	; 0x68
 801601e:	bf03      	ittte	eq
 8016020:	3302      	addeq	r3, #2
 8016022:	613b      	streq	r3, [r7, #16]
 8016024:	f049 0908 	orreq.w	r9, r9, #8
 8016028:	f049 0904 	orrne.w	r9, r9, #4
 801602c:	e7e0      	b.n	8015ff0 <__ssvfiscanf_r+0x1ac>
 801602e:	f019 0f0f 	tst.w	r9, #15
 8016032:	d0e8      	beq.n	8016006 <__ssvfiscanf_r+0x1c2>
 8016034:	e75d      	b.n	8015ef2 <__ssvfiscanf_r+0xae>
 8016036:	f019 0f0f 	tst.w	r9, #15
 801603a:	d0d9      	beq.n	8015ff0 <__ssvfiscanf_r+0x1ac>
 801603c:	e759      	b.n	8015ef2 <__ssvfiscanf_r+0xae>
 801603e:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8016042:	f47f af56 	bne.w	8015ef2 <__ssvfiscanf_r+0xae>
 8016046:	f1bb 0f00 	cmp.w	fp, #0
 801604a:	d104      	bne.n	8016056 <__ssvfiscanf_r+0x212>
 801604c:	b082      	sub	sp, #8
 801604e:	f10d 0b08 	add.w	fp, sp, #8
 8016052:	e9cb 3300 	strd	r3, r3, [fp]
 8016056:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 801605a:	e7c9      	b.n	8015ff0 <__ssvfiscanf_r+0x1ac>
 801605c:	f049 0901 	orr.w	r9, r9, #1
 8016060:	4b0a      	ldr	r3, [pc, #40]	; (801608c <__ssvfiscanf_r+0x248>)
 8016062:	e008      	b.n	8016076 <__ssvfiscanf_r+0x232>
 8016064:	f049 0901 	orr.w	r9, r9, #1
 8016068:	4b09      	ldr	r3, [pc, #36]	; (8016090 <__ssvfiscanf_r+0x24c>)
 801606a:	617b      	str	r3, [r7, #20]
 801606c:	2308      	movs	r3, #8
 801606e:	61fb      	str	r3, [r7, #28]
 8016070:	2503      	movs	r5, #3
 8016072:	e012      	b.n	801609a <__ssvfiscanf_r+0x256>
 8016074:	4b06      	ldr	r3, [pc, #24]	; (8016090 <__ssvfiscanf_r+0x24c>)
 8016076:	617b      	str	r3, [r7, #20]
 8016078:	230a      	movs	r3, #10
 801607a:	e7f8      	b.n	801606e <__ssvfiscanf_r+0x22a>
 801607c:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8016080:	4b03      	ldr	r3, [pc, #12]	; (8016090 <__ssvfiscanf_r+0x24c>)
 8016082:	617b      	str	r3, [r7, #20]
 8016084:	2310      	movs	r3, #16
 8016086:	e7f2      	b.n	801606e <__ssvfiscanf_r+0x22a>
 8016088:	0801b15f 	.word	0x0801b15f
 801608c:	08010bb9 	.word	0x08010bb9
 8016090:	08015c11 	.word	0x08015c11
 8016094:	f049 0901 	orr.w	r9, r9, #1
 8016098:	2502      	movs	r5, #2
 801609a:	6863      	ldr	r3, [r4, #4]
 801609c:	2b00      	cmp	r3, #0
 801609e:	f340 808c 	ble.w	80161ba <__ssvfiscanf_r+0x376>
 80160a2:	f019 0f40 	tst.w	r9, #64	; 0x40
 80160a6:	d106      	bne.n	80160b6 <__ssvfiscanf_r+0x272>
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	49ab      	ldr	r1, [pc, #684]	; (8016358 <__ssvfiscanf_r+0x514>)
 80160ac:	781a      	ldrb	r2, [r3, #0]
 80160ae:	5c52      	ldrb	r2, [r2, r1]
 80160b0:	0711      	lsls	r1, r2, #28
 80160b2:	f100 808b 	bmi.w	80161cc <__ssvfiscanf_r+0x388>
 80160b6:	2d02      	cmp	r5, #2
 80160b8:	f000 8396 	beq.w	80167e8 <__ssvfiscanf_r+0x9a4>
 80160bc:	2d03      	cmp	r5, #3
 80160be:	f000 853b 	beq.w	8016b38 <__ssvfiscanf_r+0xcf4>
 80160c2:	f009 0310 	and.w	r3, r9, #16
 80160c6:	2d01      	cmp	r5, #1
 80160c8:	61bb      	str	r3, [r7, #24]
 80160ca:	f009 0301 	and.w	r3, r9, #1
 80160ce:	f000 81cc 	beq.w	801646a <__ssvfiscanf_r+0x626>
 80160d2:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80160d4:	2d01      	cmp	r5, #1
 80160d6:	bf38      	it	cc
 80160d8:	2501      	movcc	r5, #1
 80160da:	2b00      	cmp	r3, #0
 80160dc:	f000 814e 	beq.w	801637c <__ssvfiscanf_r+0x538>
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	f040 810c 	bne.w	8016300 <__ssvfiscanf_r+0x4bc>
 80160e8:	4633      	mov	r3, r6
 80160ea:	f019 0f80 	tst.w	r9, #128	; 0x80
 80160ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80160f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80160f4:	f000 810b 	beq.w	801630e <__ssvfiscanf_r+0x4ca>
 80160f8:	b146      	cbz	r6, 801610c <__ssvfiscanf_r+0x2c8>
 80160fa:	2080      	movs	r0, #128	; 0x80
 80160fc:	f7fe feb4 	bl	8014e68 <malloc>
 8016100:	4680      	mov	r8, r0
 8016102:	2800      	cmp	r0, #0
 8016104:	d176      	bne.n	80161f4 <__ssvfiscanf_r+0x3b0>
 8016106:	f04f 33ff 	mov.w	r3, #4294967295
 801610a:	627b      	str	r3, [r7, #36]	; 0x24
 801610c:	f1bb 0f00 	cmp.w	fp, #0
 8016110:	d013      	beq.n	801613a <__ssvfiscanf_r+0x2f6>
 8016112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016114:	3301      	adds	r3, #1
 8016116:	d10b      	bne.n	8016130 <__ssvfiscanf_r+0x2ec>
 8016118:	2400      	movs	r4, #0
 801611a:	4626      	mov	r6, r4
 801611c:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016120:	f8db 5000 	ldr.w	r5, [fp]
 8016124:	42a3      	cmp	r3, r4
 8016126:	f300 85e5 	bgt.w	8016cf4 <__ssvfiscanf_r+0xeb0>
 801612a:	f04f 33ff 	mov.w	r3, #4294967295
 801612e:	627b      	str	r3, [r7, #36]	; 0x24
 8016130:	f8db 0000 	ldr.w	r0, [fp]
 8016134:	b108      	cbz	r0, 801613a <__ssvfiscanf_r+0x2f6>
 8016136:	f7fe fe9f 	bl	8014e78 <free>
 801613a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801613c:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8016140:	46bd      	mov	sp, r7
 8016142:	ecbd 8b02 	vpop	{d8}
 8016146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801614a:	6939      	ldr	r1, [r7, #16]
 801614c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8016150:	f002 f846 	bl	80181e0 <__sccl>
 8016154:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8016158:	6138      	str	r0, [r7, #16]
 801615a:	2501      	movs	r5, #1
 801615c:	e79d      	b.n	801609a <__ssvfiscanf_r+0x256>
 801615e:	f049 0901 	orr.w	r9, r9, #1
 8016162:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8016166:	2500      	movs	r5, #0
 8016168:	e797      	b.n	801609a <__ssvfiscanf_r+0x256>
 801616a:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 801616e:	e787      	b.n	8016080 <__ssvfiscanf_r+0x23c>
 8016170:	f019 0f10 	tst.w	r9, #16
 8016174:	f47f ae83 	bne.w	8015e7e <__ssvfiscanf_r+0x3a>
 8016178:	f019 0f08 	tst.w	r9, #8
 801617c:	f856 3b04 	ldr.w	r3, [r6], #4
 8016180:	d002      	beq.n	8016188 <__ssvfiscanf_r+0x344>
 8016182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016184:	701a      	strb	r2, [r3, #0]
 8016186:	e67a      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 8016188:	f019 0f04 	tst.w	r9, #4
 801618c:	d002      	beq.n	8016194 <__ssvfiscanf_r+0x350>
 801618e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016190:	801a      	strh	r2, [r3, #0]
 8016192:	e674      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 8016194:	f019 0f01 	tst.w	r9, #1
 8016198:	d002      	beq.n	80161a0 <__ssvfiscanf_r+0x35c>
 801619a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801619c:	601a      	str	r2, [r3, #0]
 801619e:	e66e      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 80161a0:	f019 0f02 	tst.w	r9, #2
 80161a4:	d0f9      	beq.n	801619a <__ssvfiscanf_r+0x356>
 80161a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161aa:	17d2      	asrs	r2, r2, #31
 80161ac:	e9c3 1200 	strd	r1, r2, [r3]
 80161b0:	e665      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 80161b2:	4b6a      	ldr	r3, [pc, #424]	; (801635c <__ssvfiscanf_r+0x518>)
 80161b4:	617b      	str	r3, [r7, #20]
 80161b6:	2300      	movs	r3, #0
 80161b8:	e759      	b.n	801606e <__ssvfiscanf_r+0x22a>
 80161ba:	ee18 0a10 	vmov	r0, s16
 80161be:	4621      	mov	r1, r4
 80161c0:	f7ff fdea 	bl	8015d98 <__ssrefill_r>
 80161c4:	2800      	cmp	r0, #0
 80161c6:	f43f af6c 	beq.w	80160a2 <__ssvfiscanf_r+0x25e>
 80161ca:	e6fd      	b.n	8015fc8 <__ssvfiscanf_r+0x184>
 80161cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161ce:	3201      	adds	r2, #1
 80161d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80161d2:	6862      	ldr	r2, [r4, #4]
 80161d4:	3a01      	subs	r2, #1
 80161d6:	2a00      	cmp	r2, #0
 80161d8:	6062      	str	r2, [r4, #4]
 80161da:	dd02      	ble.n	80161e2 <__ssvfiscanf_r+0x39e>
 80161dc:	3301      	adds	r3, #1
 80161de:	6023      	str	r3, [r4, #0]
 80161e0:	e762      	b.n	80160a8 <__ssvfiscanf_r+0x264>
 80161e2:	ee18 0a10 	vmov	r0, s16
 80161e6:	4621      	mov	r1, r4
 80161e8:	f7ff fdd6 	bl	8015d98 <__ssrefill_r>
 80161ec:	2800      	cmp	r0, #0
 80161ee:	f43f af5b 	beq.w	80160a8 <__ssvfiscanf_r+0x264>
 80161f2:	e6e9      	b.n	8015fc8 <__ssvfiscanf_r+0x184>
 80161f4:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80161f8:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80161fc:	6030      	str	r0, [r6, #0]
 80161fe:	4599      	cmp	r9, r3
 8016200:	d314      	bcc.n	801622c <__ssvfiscanf_r+0x3e8>
 8016202:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8016206:	4293      	cmp	r3, r2
 8016208:	f63f af7d 	bhi.w	8016106 <__ssvfiscanf_r+0x2c2>
 801620c:	3308      	adds	r3, #8
 801620e:	fa1f fa83 	uxth.w	sl, r3
 8016212:	f8db 0000 	ldr.w	r0, [fp]
 8016216:	ea4f 018a 	mov.w	r1, sl, lsl #2
 801621a:	f001 fe35 	bl	8017e88 <realloc>
 801621e:	2800      	cmp	r0, #0
 8016220:	f43f af71 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 8016224:	f8cb 0000 	str.w	r0, [fp]
 8016228:	f8ab a004 	strh.w	sl, [fp, #4]
 801622c:	f8db 3000 	ldr.w	r3, [fp]
 8016230:	f109 0201 	add.w	r2, r9, #1
 8016234:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8016238:	46b2      	mov	sl, r6
 801623a:	f8ab 2006 	strh.w	r2, [fp, #6]
 801623e:	4646      	mov	r6, r8
 8016240:	f04f 0920 	mov.w	r9, #32
 8016244:	2200      	movs	r2, #0
 8016246:	60fa      	str	r2, [r7, #12]
 8016248:	f001 fdc8 	bl	8017ddc <__locale_mb_cur_max>
 801624c:	68fa      	ldr	r2, [r7, #12]
 801624e:	4290      	cmp	r0, r2
 8016250:	f43f aeba 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 8016254:	6821      	ldr	r1, [r4, #0]
 8016256:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 801625a:	f811 0b01 	ldrb.w	r0, [r1], #1
 801625e:	f80c 0002 	strb.w	r0, [ip, r2]
 8016262:	1c53      	adds	r3, r2, #1
 8016264:	6862      	ldr	r2, [r4, #4]
 8016266:	3a01      	subs	r2, #1
 8016268:	e9c4 1200 	strd	r1, r2, [r4]
 801626c:	6a3a      	ldr	r2, [r7, #32]
 801626e:	2a03      	cmp	r2, #3
 8016270:	d102      	bne.n	8016278 <__ssvfiscanf_r+0x434>
 8016272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016274:	2a04      	cmp	r2, #4
 8016276:	d007      	beq.n	8016288 <__ssvfiscanf_r+0x444>
 8016278:	2208      	movs	r2, #8
 801627a:	2100      	movs	r1, #0
 801627c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8016280:	623b      	str	r3, [r7, #32]
 8016282:	f7fa f93b 	bl	80104fc <memset>
 8016286:	6a3b      	ldr	r3, [r7, #32]
 8016288:	60fb      	str	r3, [r7, #12]
 801628a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801628e:	9200      	str	r2, [sp, #0]
 8016290:	ee18 0a10 	vmov	r0, s16
 8016294:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016298:	4631      	mov	r1, r6
 801629a:	f001 fdb7 	bl	8017e0c <_mbrtowc_r>
 801629e:	1c42      	adds	r2, r0, #1
 80162a0:	6238      	str	r0, [r7, #32]
 80162a2:	f43f ae91 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	2800      	cmp	r0, #0
 80162aa:	d135      	bne.n	8016318 <__ssvfiscanf_r+0x4d4>
 80162ac:	69ba      	ldr	r2, [r7, #24]
 80162ae:	b902      	cbnz	r2, 80162b2 <__ssvfiscanf_r+0x46e>
 80162b0:	6032      	str	r2, [r6, #0]
 80162b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162b4:	441a      	add	r2, r3
 80162b6:	6a3b      	ldr	r3, [r7, #32]
 80162b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80162ba:	2b03      	cmp	r3, #3
 80162bc:	d102      	bne.n	80162c4 <__ssvfiscanf_r+0x480>
 80162be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162c0:	2b04      	cmp	r3, #4
 80162c2:	d000      	beq.n	80162c6 <__ssvfiscanf_r+0x482>
 80162c4:	3d01      	subs	r5, #1
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	b9c3      	cbnz	r3, 80162fc <__ssvfiscanf_r+0x4b8>
 80162ca:	f1ba 0f00 	cmp.w	sl, #0
 80162ce:	d014      	beq.n	80162fa <__ssvfiscanf_r+0x4b6>
 80162d0:	eba6 0308 	sub.w	r3, r6, r8
 80162d4:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80162d8:	d80f      	bhi.n	80162fa <__ssvfiscanf_r+0x4b6>
 80162da:	4640      	mov	r0, r8
 80162dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80162e0:	60fb      	str	r3, [r7, #12]
 80162e2:	f001 fdd1 	bl	8017e88 <realloc>
 80162e6:	4680      	mov	r8, r0
 80162e8:	2800      	cmp	r0, #0
 80162ea:	f43f af0c 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	f8ca 0000 	str.w	r0, [sl]
 80162f4:	18c6      	adds	r6, r0, r3
 80162f6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80162fa:	3604      	adds	r6, #4
 80162fc:	2200      	movs	r2, #0
 80162fe:	e00f      	b.n	8016320 <__ssvfiscanf_r+0x4dc>
 8016300:	f04f 0900 	mov.w	r9, #0
 8016304:	62be      	str	r6, [r7, #40]	; 0x28
 8016306:	46c8      	mov	r8, r9
 8016308:	46ca      	mov	sl, r9
 801630a:	464e      	mov	r6, r9
 801630c:	e79a      	b.n	8016244 <__ssvfiscanf_r+0x400>
 801630e:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8016312:	46c8      	mov	r8, r9
 8016314:	46ca      	mov	sl, r9
 8016316:	e795      	b.n	8016244 <__ssvfiscanf_r+0x400>
 8016318:	6a3a      	ldr	r2, [r7, #32]
 801631a:	3202      	adds	r2, #2
 801631c:	d1c9      	bne.n	80162b2 <__ssvfiscanf_r+0x46e>
 801631e:	461a      	mov	r2, r3
 8016320:	6863      	ldr	r3, [r4, #4]
 8016322:	2b00      	cmp	r3, #0
 8016324:	dc14      	bgt.n	8016350 <__ssvfiscanf_r+0x50c>
 8016326:	ee18 0a10 	vmov	r0, s16
 801632a:	4621      	mov	r1, r4
 801632c:	60fa      	str	r2, [r7, #12]
 801632e:	f7ff fd33 	bl	8015d98 <__ssrefill_r>
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	b160      	cbz	r0, 8016350 <__ssvfiscanf_r+0x50c>
 8016336:	2a00      	cmp	r2, #0
 8016338:	f47f ae46 	bne.w	8015fc8 <__ssvfiscanf_r+0x184>
 801633c:	f1ba 0f00 	cmp.w	sl, #0
 8016340:	d10e      	bne.n	8016360 <__ssvfiscanf_r+0x51c>
 8016342:	69bb      	ldr	r3, [r7, #24]
 8016344:	b913      	cbnz	r3, 801634c <__ssvfiscanf_r+0x508>
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	3301      	adds	r3, #1
 801634a:	627b      	str	r3, [r7, #36]	; 0x24
 801634c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 801634e:	e596      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 8016350:	2d00      	cmp	r5, #0
 8016352:	f47f af78 	bne.w	8016246 <__ssvfiscanf_r+0x402>
 8016356:	e7f1      	b.n	801633c <__ssvfiscanf_r+0x4f8>
 8016358:	0801b15f 	.word	0x0801b15f
 801635c:	08010bb9 	.word	0x08010bb9
 8016360:	eba6 0108 	sub.w	r1, r6, r8
 8016364:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8016368:	d9eb      	bls.n	8016342 <__ssvfiscanf_r+0x4fe>
 801636a:	f8da 0000 	ldr.w	r0, [sl]
 801636e:	f001 fd8b 	bl	8017e88 <realloc>
 8016372:	2800      	cmp	r0, #0
 8016374:	d0e5      	beq.n	8016342 <__ssvfiscanf_r+0x4fe>
 8016376:	f8ca 0000 	str.w	r0, [sl]
 801637a:	e7e2      	b.n	8016342 <__ssvfiscanf_r+0x4fe>
 801637c:	69ba      	ldr	r2, [r7, #24]
 801637e:	b1e2      	cbz	r2, 80163ba <__ssvfiscanf_r+0x576>
 8016380:	4698      	mov	r8, r3
 8016382:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016386:	429d      	cmp	r5, r3
 8016388:	dd11      	ble.n	80163ae <__ssvfiscanf_r+0x56a>
 801638a:	4498      	add	r8, r3
 801638c:	1aed      	subs	r5, r5, r3
 801638e:	4413      	add	r3, r2
 8016390:	ee18 0a10 	vmov	r0, s16
 8016394:	6023      	str	r3, [r4, #0]
 8016396:	4621      	mov	r1, r4
 8016398:	f7ff fcfe 	bl	8015d98 <__ssrefill_r>
 801639c:	2800      	cmp	r0, #0
 801639e:	d0f0      	beq.n	8016382 <__ssvfiscanf_r+0x53e>
 80163a0:	f1b8 0f00 	cmp.w	r8, #0
 80163a4:	f43f ae10 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 80163a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163aa:	4443      	add	r3, r8
 80163ac:	e603      	b.n	8015fb6 <__ssvfiscanf_r+0x172>
 80163ae:	1b5b      	subs	r3, r3, r5
 80163b0:	442a      	add	r2, r5
 80163b2:	44a8      	add	r8, r5
 80163b4:	6063      	str	r3, [r4, #4]
 80163b6:	6022      	str	r2, [r4, #0]
 80163b8:	e7f6      	b.n	80163a8 <__ssvfiscanf_r+0x564>
 80163ba:	46b0      	mov	r8, r6
 80163bc:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 80163c0:	f858 6b04 	ldr.w	r6, [r8], #4
 80163c4:	d030      	beq.n	8016428 <__ssvfiscanf_r+0x5e4>
 80163c6:	2e00      	cmp	r6, #0
 80163c8:	f43f ad93 	beq.w	8015ef2 <__ssvfiscanf_r+0xae>
 80163cc:	4628      	mov	r0, r5
 80163ce:	f7fe fd4b 	bl	8014e68 <malloc>
 80163d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80163d4:	2800      	cmp	r0, #0
 80163d6:	f43f adfc 	beq.w	8015fd2 <__ssvfiscanf_r+0x18e>
 80163da:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80163de:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 80163e2:	6030      	str	r0, [r6, #0]
 80163e4:	45ca      	cmp	sl, r9
 80163e6:	d315      	bcc.n	8016414 <__ssvfiscanf_r+0x5d0>
 80163e8:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80163ec:	4599      	cmp	r9, r3
 80163ee:	f63f ae93 	bhi.w	8016118 <__ssvfiscanf_r+0x2d4>
 80163f2:	f109 0908 	add.w	r9, r9, #8
 80163f6:	fa1f f989 	uxth.w	r9, r9
 80163fa:	f8db 0000 	ldr.w	r0, [fp]
 80163fe:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8016402:	f001 fd41 	bl	8017e88 <realloc>
 8016406:	2800      	cmp	r0, #0
 8016408:	f43f ae86 	beq.w	8016118 <__ssvfiscanf_r+0x2d4>
 801640c:	f8cb 0000 	str.w	r0, [fp]
 8016410:	f8ab 9004 	strh.w	r9, [fp, #4]
 8016414:	f8db 3000 	ldr.w	r3, [fp]
 8016418:	f10a 0201 	add.w	r2, sl, #1
 801641c:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8016420:	46b1      	mov	r9, r6
 8016422:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8016424:	f8ab 2006 	strh.w	r2, [fp, #6]
 8016428:	4631      	mov	r1, r6
 801642a:	ee18 0a10 	vmov	r0, s16
 801642e:	9400      	str	r4, [sp, #0]
 8016430:	462b      	mov	r3, r5
 8016432:	2201      	movs	r2, #1
 8016434:	f7ff fccd 	bl	8015dd2 <_sfread_r>
 8016438:	4606      	mov	r6, r0
 801643a:	2800      	cmp	r0, #0
 801643c:	f43f adc4 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 8016440:	f1b9 0f00 	cmp.w	r9, #0
 8016444:	d009      	beq.n	801645a <__ssvfiscanf_r+0x616>
 8016446:	4285      	cmp	r5, r0
 8016448:	d907      	bls.n	801645a <__ssvfiscanf_r+0x616>
 801644a:	4601      	mov	r1, r0
 801644c:	f8d9 0000 	ldr.w	r0, [r9]
 8016450:	f001 fd1a 	bl	8017e88 <realloc>
 8016454:	b108      	cbz	r0, 801645a <__ssvfiscanf_r+0x616>
 8016456:	f8c9 0000 	str.w	r0, [r9]
 801645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801645c:	4433      	add	r3, r6
 801645e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016462:	3301      	adds	r3, #1
 8016464:	627b      	str	r3, [r7, #36]	; 0x24
 8016466:	4646      	mov	r6, r8
 8016468:	e509      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 801646a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801646c:	2a00      	cmp	r2, #0
 801646e:	bf08      	it	eq
 8016470:	f04f 32ff 	moveq.w	r2, #4294967295
 8016474:	461d      	mov	r5, r3
 8016476:	62ba      	str	r2, [r7, #40]	; 0x28
 8016478:	69bb      	ldr	r3, [r7, #24]
 801647a:	2d00      	cmp	r5, #0
 801647c:	f000 8107 	beq.w	801668e <__ssvfiscanf_r+0x84a>
 8016480:	2b00      	cmp	r3, #0
 8016482:	f040 80a7 	bne.w	80165d4 <__ssvfiscanf_r+0x790>
 8016486:	4633      	mov	r3, r6
 8016488:	f019 0f80 	tst.w	r9, #128	; 0x80
 801648c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016490:	607b      	str	r3, [r7, #4]
 8016492:	f000 80a8 	beq.w	80165e6 <__ssvfiscanf_r+0x7a2>
 8016496:	2d00      	cmp	r5, #0
 8016498:	f43f ae38 	beq.w	801610c <__ssvfiscanf_r+0x2c8>
 801649c:	2080      	movs	r0, #128	; 0x80
 801649e:	f7fe fce3 	bl	8014e68 <malloc>
 80164a2:	4680      	mov	r8, r0
 80164a4:	2800      	cmp	r0, #0
 80164a6:	f43f ae2e 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 80164aa:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 80164ae:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80164b2:	6028      	str	r0, [r5, #0]
 80164b4:	429e      	cmp	r6, r3
 80164b6:	d314      	bcc.n	80164e2 <__ssvfiscanf_r+0x69e>
 80164b8:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 80164bc:	4293      	cmp	r3, r2
 80164be:	f63f ae22 	bhi.w	8016106 <__ssvfiscanf_r+0x2c2>
 80164c2:	3308      	adds	r3, #8
 80164c4:	fa1f f983 	uxth.w	r9, r3
 80164c8:	f8db 0000 	ldr.w	r0, [fp]
 80164cc:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80164d0:	f001 fcda 	bl	8017e88 <realloc>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	f43f ae16 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 80164da:	f8cb 0000 	str.w	r0, [fp]
 80164de:	f8ab 9004 	strh.w	r9, [fp, #4]
 80164e2:	f8db 3000 	ldr.w	r3, [fp]
 80164e6:	60fd      	str	r5, [r7, #12]
 80164e8:	1c72      	adds	r2, r6, #1
 80164ea:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 80164ee:	f8ab 2006 	strh.w	r2, [fp, #6]
 80164f2:	4645      	mov	r5, r8
 80164f4:	f04f 0920 	mov.w	r9, #32
 80164f8:	2600      	movs	r6, #0
 80164fa:	f001 fc6f 	bl	8017ddc <__locale_mb_cur_max>
 80164fe:	42b0      	cmp	r0, r6
 8016500:	f43f ad62 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 8016504:	1c73      	adds	r3, r6, #1
 8016506:	60bb      	str	r3, [r7, #8]
 8016508:	6823      	ldr	r3, [r4, #0]
 801650a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801650e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016512:	558a      	strb	r2, [r1, r6]
 8016514:	6862      	ldr	r2, [r4, #4]
 8016516:	3a01      	subs	r2, #1
 8016518:	e9c4 3200 	strd	r3, r2, [r4]
 801651c:	6a3b      	ldr	r3, [r7, #32]
 801651e:	2b03      	cmp	r3, #3
 8016520:	d102      	bne.n	8016528 <__ssvfiscanf_r+0x6e4>
 8016522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016524:	2b04      	cmp	r3, #4
 8016526:	d005      	beq.n	8016534 <__ssvfiscanf_r+0x6f0>
 8016528:	2208      	movs	r2, #8
 801652a:	2100      	movs	r1, #0
 801652c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016530:	f7f9 ffe4 	bl	80104fc <memset>
 8016534:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016538:	9300      	str	r3, [sp, #0]
 801653a:	ee18 0a10 	vmov	r0, s16
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016544:	4629      	mov	r1, r5
 8016546:	f001 fc61 	bl	8017e0c <_mbrtowc_r>
 801654a:	4603      	mov	r3, r0
 801654c:	6238      	str	r0, [r7, #32]
 801654e:	1c58      	adds	r0, r3, #1
 8016550:	f43f ad3a 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 8016554:	2b00      	cmp	r3, #0
 8016556:	d14c      	bne.n	80165f2 <__ssvfiscanf_r+0x7ae>
 8016558:	602b      	str	r3, [r5, #0]
 801655a:	682e      	ldr	r6, [r5, #0]
 801655c:	1c71      	adds	r1, r6, #1
 801655e:	d059      	beq.n	8016614 <__ssvfiscanf_r+0x7d0>
 8016560:	2208      	movs	r2, #8
 8016562:	2100      	movs	r1, #0
 8016564:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8016568:	f7f9 ffc8 	bl	80104fc <memset>
 801656c:	4b9d      	ldr	r3, [pc, #628]	; (80167e4 <__ssvfiscanf_r+0x9a0>)
 801656e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016572:	603b      	str	r3, [r7, #0]
 8016574:	4632      	mov	r2, r6
 8016576:	ee18 0a10 	vmov	r0, s16
 801657a:	683e      	ldr	r6, [r7, #0]
 801657c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016580:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016584:	47b0      	blx	r6
 8016586:	2801      	cmp	r0, #1
 8016588:	d146      	bne.n	8016618 <__ssvfiscanf_r+0x7d4>
 801658a:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 801658e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016592:	f813 300a 	ldrb.w	r3, [r3, sl]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d14b      	bne.n	8016632 <__ssvfiscanf_r+0x7ee>
 801659a:	f107 0648 	add.w	r6, r7, #72	; 0x48
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d13c      	bne.n	801661e <__ssvfiscanf_r+0x7da>
 80165a4:	69bb      	ldr	r3, [r7, #24]
 80165a6:	b99b      	cbnz	r3, 80165d0 <__ssvfiscanf_r+0x78c>
 80165a8:	602b      	str	r3, [r5, #0]
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	b16b      	cbz	r3, 80165ca <__ssvfiscanf_r+0x786>
 80165ae:	eba5 0108 	sub.w	r1, r5, r8
 80165b2:	108b      	asrs	r3, r1, #2
 80165b4:	3301      	adds	r3, #1
 80165b6:	4599      	cmp	r9, r3
 80165b8:	d907      	bls.n	80165ca <__ssvfiscanf_r+0x786>
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	3104      	adds	r1, #4
 80165be:	6818      	ldr	r0, [r3, #0]
 80165c0:	f001 fc62 	bl	8017e88 <realloc>
 80165c4:	b108      	cbz	r0, 80165ca <__ssvfiscanf_r+0x786>
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	6018      	str	r0, [r3, #0]
 80165ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165cc:	3301      	adds	r3, #1
 80165ce:	627b      	str	r3, [r7, #36]	; 0x24
 80165d0:	687e      	ldr	r6, [r7, #4]
 80165d2:	e454      	b.n	8015e7e <__ssvfiscanf_r+0x3a>
 80165d4:	f04f 0900 	mov.w	r9, #0
 80165d8:	607e      	str	r6, [r7, #4]
 80165da:	46c8      	mov	r8, r9
 80165dc:	f8c7 900c 	str.w	r9, [r7, #12]
 80165e0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80165e4:	e788      	b.n	80164f8 <__ssvfiscanf_r+0x6b4>
 80165e6:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80165ea:	f8c7 900c 	str.w	r9, [r7, #12]
 80165ee:	46c8      	mov	r8, r9
 80165f0:	e782      	b.n	80164f8 <__ssvfiscanf_r+0x6b4>
 80165f2:	6a3b      	ldr	r3, [r7, #32]
 80165f4:	3302      	adds	r3, #2
 80165f6:	d1b0      	bne.n	801655a <__ssvfiscanf_r+0x716>
 80165f8:	68be      	ldr	r6, [r7, #8]
 80165fa:	6863      	ldr	r3, [r4, #4]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	dc41      	bgt.n	8016684 <__ssvfiscanf_r+0x840>
 8016600:	ee18 0a10 	vmov	r0, s16
 8016604:	4621      	mov	r1, r4
 8016606:	f7ff fbc7 	bl	8015d98 <__ssrefill_r>
 801660a:	2800      	cmp	r0, #0
 801660c:	d03a      	beq.n	8016684 <__ssvfiscanf_r+0x840>
 801660e:	2e00      	cmp	r6, #0
 8016610:	d0c8      	beq.n	80165a4 <__ssvfiscanf_r+0x760>
 8016612:	e4d9      	b.n	8015fc8 <__ssvfiscanf_r+0x184>
 8016614:	46b2      	mov	sl, r6
 8016616:	e7ba      	b.n	801658e <__ssvfiscanf_r+0x74a>
 8016618:	f04f 0a00 	mov.w	sl, #0
 801661c:	e7b7      	b.n	801658e <__ssvfiscanf_r+0x74a>
 801661e:	68bb      	ldr	r3, [r7, #8]
 8016620:	3b01      	subs	r3, #1
 8016622:	ee18 0a10 	vmov	r0, s16
 8016626:	5cf1      	ldrb	r1, [r6, r3]
 8016628:	60bb      	str	r3, [r7, #8]
 801662a:	4622      	mov	r2, r4
 801662c:	f7ff fb77 	bl	8015d1e <_sungetc_r>
 8016630:	e7b5      	b.n	801659e <__ssvfiscanf_r+0x75a>
 8016632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016634:	68ba      	ldr	r2, [r7, #8]
 8016636:	4413      	add	r3, r2
 8016638:	62fb      	str	r3, [r7, #44]	; 0x2c
 801663a:	6a3b      	ldr	r3, [r7, #32]
 801663c:	2b03      	cmp	r3, #3
 801663e:	d102      	bne.n	8016646 <__ssvfiscanf_r+0x802>
 8016640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016642:	2b04      	cmp	r3, #4
 8016644:	d002      	beq.n	801664c <__ssvfiscanf_r+0x808>
 8016646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016648:	3b01      	subs	r3, #1
 801664a:	62bb      	str	r3, [r7, #40]	; 0x28
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	b9bb      	cbnz	r3, 8016680 <__ssvfiscanf_r+0x83c>
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	3504      	adds	r5, #4
 8016654:	b1a3      	cbz	r3, 8016680 <__ssvfiscanf_r+0x83c>
 8016656:	eba5 0608 	sub.w	r6, r5, r8
 801665a:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 801665e:	d80d      	bhi.n	801667c <__ssvfiscanf_r+0x838>
 8016660:	4640      	mov	r0, r8
 8016662:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016666:	f001 fc0f 	bl	8017e88 <realloc>
 801666a:	4680      	mov	r8, r0
 801666c:	2800      	cmp	r0, #0
 801666e:	f43f ad4a 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	1985      	adds	r5, r0, r6
 8016676:	6018      	str	r0, [r3, #0]
 8016678:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801667c:	69be      	ldr	r6, [r7, #24]
 801667e:	e7bc      	b.n	80165fa <__ssvfiscanf_r+0x7b6>
 8016680:	2600      	movs	r6, #0
 8016682:	e7ba      	b.n	80165fa <__ssvfiscanf_r+0x7b6>
 8016684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016686:	2b00      	cmp	r3, #0
 8016688:	f47f af37 	bne.w	80164fa <__ssvfiscanf_r+0x6b6>
 801668c:	e78a      	b.n	80165a4 <__ssvfiscanf_r+0x760>
 801668e:	b1eb      	cbz	r3, 80166cc <__ssvfiscanf_r+0x888>
 8016690:	f107 0870 	add.w	r8, r7, #112	; 0x70
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	781a      	ldrb	r2, [r3, #0]
 8016698:	f818 2002 	ldrb.w	r2, [r8, r2]
 801669c:	b90a      	cbnz	r2, 80166a2 <__ssvfiscanf_r+0x85e>
 801669e:	b995      	cbnz	r5, 80166c6 <__ssvfiscanf_r+0x882>
 80166a0:	e427      	b.n	8015ef2 <__ssvfiscanf_r+0xae>
 80166a2:	3301      	adds	r3, #1
 80166a4:	6862      	ldr	r2, [r4, #4]
 80166a6:	6023      	str	r3, [r4, #0]
 80166a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166aa:	3501      	adds	r5, #1
 80166ac:	3a01      	subs	r2, #1
 80166ae:	42ab      	cmp	r3, r5
 80166b0:	6062      	str	r2, [r4, #4]
 80166b2:	d008      	beq.n	80166c6 <__ssvfiscanf_r+0x882>
 80166b4:	2a00      	cmp	r2, #0
 80166b6:	dced      	bgt.n	8016694 <__ssvfiscanf_r+0x850>
 80166b8:	ee18 0a10 	vmov	r0, s16
 80166bc:	4621      	mov	r1, r4
 80166be:	f7ff fb6b 	bl	8015d98 <__ssrefill_r>
 80166c2:	2800      	cmp	r0, #0
 80166c4:	d0e6      	beq.n	8016694 <__ssvfiscanf_r+0x850>
 80166c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c8:	442b      	add	r3, r5
 80166ca:	e474      	b.n	8015fb6 <__ssvfiscanf_r+0x172>
 80166cc:	4633      	mov	r3, r6
 80166ce:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 80166d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80166d6:	61bb      	str	r3, [r7, #24]
 80166d8:	f000 8082 	beq.w	80167e0 <__ssvfiscanf_r+0x99c>
 80166dc:	2e00      	cmp	r6, #0
 80166de:	f43f ac08 	beq.w	8015ef2 <__ssvfiscanf_r+0xae>
 80166e2:	2020      	movs	r0, #32
 80166e4:	f7fe fbc0 	bl	8014e68 <malloc>
 80166e8:	4680      	mov	r8, r0
 80166ea:	2800      	cmp	r0, #0
 80166ec:	f43f ac71 	beq.w	8015fd2 <__ssvfiscanf_r+0x18e>
 80166f0:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80166f4:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 80166f8:	6030      	str	r0, [r6, #0]
 80166fa:	45a9      	cmp	r9, r5
 80166fc:	d312      	bcc.n	8016724 <__ssvfiscanf_r+0x8e0>
 80166fe:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8016702:	429d      	cmp	r5, r3
 8016704:	f63f ad08 	bhi.w	8016118 <__ssvfiscanf_r+0x2d4>
 8016708:	3508      	adds	r5, #8
 801670a:	b2ad      	uxth	r5, r5
 801670c:	f8db 0000 	ldr.w	r0, [fp]
 8016710:	00a9      	lsls	r1, r5, #2
 8016712:	f001 fbb9 	bl	8017e88 <realloc>
 8016716:	2800      	cmp	r0, #0
 8016718:	f43f acfe 	beq.w	8016118 <__ssvfiscanf_r+0x2d4>
 801671c:	f8cb 0000 	str.w	r0, [fp]
 8016720:	f8ab 5004 	strh.w	r5, [fp, #4]
 8016724:	f8db 3000 	ldr.w	r3, [fp]
 8016728:	f109 0201 	add.w	r2, r9, #1
 801672c:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8016730:	46b2      	mov	sl, r6
 8016732:	f8ab 2006 	strh.w	r2, [fp, #6]
 8016736:	4646      	mov	r6, r8
 8016738:	2520      	movs	r5, #32
 801673a:	46b0      	mov	r8, r6
 801673c:	f107 0970 	add.w	r9, r7, #112	; 0x70
 8016740:	6823      	ldr	r3, [r4, #0]
 8016742:	781a      	ldrb	r2, [r3, #0]
 8016744:	f819 2002 	ldrb.w	r2, [r9, r2]
 8016748:	b36a      	cbz	r2, 80167a6 <__ssvfiscanf_r+0x962>
 801674a:	6862      	ldr	r2, [r4, #4]
 801674c:	3a01      	subs	r2, #1
 801674e:	6062      	str	r2, [r4, #4]
 8016750:	1c5a      	adds	r2, r3, #1
 8016752:	6022      	str	r2, [r4, #0]
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	f806 3b01 	strb.w	r3, [r6], #1
 801675a:	f1ba 0f00 	cmp.w	sl, #0
 801675e:	d011      	beq.n	8016784 <__ssvfiscanf_r+0x940>
 8016760:	eba6 0308 	sub.w	r3, r6, r8
 8016764:	42ab      	cmp	r3, r5
 8016766:	d30d      	bcc.n	8016784 <__ssvfiscanf_r+0x940>
 8016768:	006d      	lsls	r5, r5, #1
 801676a:	4640      	mov	r0, r8
 801676c:	4629      	mov	r1, r5
 801676e:	60fb      	str	r3, [r7, #12]
 8016770:	f001 fb8a 	bl	8017e88 <realloc>
 8016774:	4680      	mov	r8, r0
 8016776:	2800      	cmp	r0, #0
 8016778:	f43f ac2b 	beq.w	8015fd2 <__ssvfiscanf_r+0x18e>
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f8ca 0000 	str.w	r0, [sl]
 8016782:	18c6      	adds	r6, r0, r3
 8016784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016786:	3b01      	subs	r3, #1
 8016788:	62bb      	str	r3, [r7, #40]	; 0x28
 801678a:	d00c      	beq.n	80167a6 <__ssvfiscanf_r+0x962>
 801678c:	6863      	ldr	r3, [r4, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	dcd6      	bgt.n	8016740 <__ssvfiscanf_r+0x8fc>
 8016792:	ee18 0a10 	vmov	r0, s16
 8016796:	4621      	mov	r1, r4
 8016798:	f7ff fafe 	bl	8015d98 <__ssrefill_r>
 801679c:	2800      	cmp	r0, #0
 801679e:	d0cf      	beq.n	8016740 <__ssvfiscanf_r+0x8fc>
 80167a0:	4546      	cmp	r6, r8
 80167a2:	f43f ac11 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 80167a6:	ebb6 0808 	subs.w	r8, r6, r8
 80167aa:	f43f aba2 	beq.w	8015ef2 <__ssvfiscanf_r+0xae>
 80167ae:	2300      	movs	r3, #0
 80167b0:	7033      	strb	r3, [r6, #0]
 80167b2:	f1ba 0f00 	cmp.w	sl, #0
 80167b6:	d00a      	beq.n	80167ce <__ssvfiscanf_r+0x98a>
 80167b8:	f108 0101 	add.w	r1, r8, #1
 80167bc:	428d      	cmp	r5, r1
 80167be:	d906      	bls.n	80167ce <__ssvfiscanf_r+0x98a>
 80167c0:	f8da 0000 	ldr.w	r0, [sl]
 80167c4:	f001 fb60 	bl	8017e88 <realloc>
 80167c8:	b108      	cbz	r0, 80167ce <__ssvfiscanf_r+0x98a>
 80167ca:	f8ca 0000 	str.w	r0, [sl]
 80167ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d0:	3301      	adds	r3, #1
 80167d2:	627b      	str	r3, [r7, #36]	; 0x24
 80167d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d6:	4443      	add	r3, r8
 80167d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167da:	69be      	ldr	r6, [r7, #24]
 80167dc:	f7ff bb4f 	b.w	8015e7e <__ssvfiscanf_r+0x3a>
 80167e0:	46aa      	mov	sl, r5
 80167e2:	e7aa      	b.n	801673a <__ssvfiscanf_r+0x8f6>
 80167e4:	200008c0 	.word	0x200008c0
 80167e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	bf08      	it	eq
 80167ee:	f04f 33ff 	moveq.w	r3, #4294967295
 80167f2:	f019 0501 	ands.w	r5, r9, #1
 80167f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80167f8:	f009 0810 	and.w	r8, r9, #16
 80167fc:	f000 80f6 	beq.w	80169ec <__ssvfiscanf_r+0xba8>
 8016800:	f1b8 0f00 	cmp.w	r8, #0
 8016804:	f040 809b 	bne.w	801693e <__ssvfiscanf_r+0xafa>
 8016808:	4633      	mov	r3, r6
 801680a:	f019 0f80 	tst.w	r9, #128	; 0x80
 801680e:	f853 5b04 	ldr.w	r5, [r3], #4
 8016812:	61bb      	str	r3, [r7, #24]
 8016814:	f000 809b 	beq.w	801694e <__ssvfiscanf_r+0xb0a>
 8016818:	2d00      	cmp	r5, #0
 801681a:	f43f ac77 	beq.w	801610c <__ssvfiscanf_r+0x2c8>
 801681e:	2080      	movs	r0, #128	; 0x80
 8016820:	f7fe fb22 	bl	8014e68 <malloc>
 8016824:	4606      	mov	r6, r0
 8016826:	2800      	cmp	r0, #0
 8016828:	f43f ac6d 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 801682c:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8016830:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8016834:	6028      	str	r0, [r5, #0]
 8016836:	4599      	cmp	r9, r3
 8016838:	d314      	bcc.n	8016864 <__ssvfiscanf_r+0xa20>
 801683a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 801683e:	4293      	cmp	r3, r2
 8016840:	f63f ac61 	bhi.w	8016106 <__ssvfiscanf_r+0x2c2>
 8016844:	3308      	adds	r3, #8
 8016846:	fa1f fa83 	uxth.w	sl, r3
 801684a:	f8db 0000 	ldr.w	r0, [fp]
 801684e:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8016852:	f001 fb19 	bl	8017e88 <realloc>
 8016856:	2800      	cmp	r0, #0
 8016858:	f43f ac55 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 801685c:	f8cb 0000 	str.w	r0, [fp]
 8016860:	f8ab a004 	strh.w	sl, [fp, #4]
 8016864:	f8db 3000 	ldr.w	r3, [fp]
 8016868:	f109 0201 	add.w	r2, r9, #1
 801686c:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8016870:	46aa      	mov	sl, r5
 8016872:	f8ab 2006 	strh.w	r2, [fp, #6]
 8016876:	4635      	mov	r5, r6
 8016878:	f04f 0920 	mov.w	r9, #32
 801687c:	2200      	movs	r2, #0
 801687e:	6823      	ldr	r3, [r4, #0]
 8016880:	49ac      	ldr	r1, [pc, #688]	; (8016b34 <__ssvfiscanf_r+0xcf0>)
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	5c5b      	ldrb	r3, [r3, r1]
 8016886:	0718      	lsls	r0, r3, #28
 8016888:	d43f      	bmi.n	801690a <__ssvfiscanf_r+0xac6>
 801688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801688c:	2b00      	cmp	r3, #0
 801688e:	d03c      	beq.n	801690a <__ssvfiscanf_r+0xac6>
 8016890:	60fa      	str	r2, [r7, #12]
 8016892:	f001 faa3 	bl	8017ddc <__locale_mb_cur_max>
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	4290      	cmp	r0, r2
 801689a:	f43f ab95 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 801689e:	6821      	ldr	r1, [r4, #0]
 80168a0:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80168a4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80168a8:	f80c 0002 	strb.w	r0, [ip, r2]
 80168ac:	1c53      	adds	r3, r2, #1
 80168ae:	6862      	ldr	r2, [r4, #4]
 80168b0:	3a01      	subs	r2, #1
 80168b2:	e9c4 1200 	strd	r1, r2, [r4]
 80168b6:	6a3a      	ldr	r2, [r7, #32]
 80168b8:	2a03      	cmp	r2, #3
 80168ba:	d102      	bne.n	80168c2 <__ssvfiscanf_r+0xa7e>
 80168bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80168be:	2a04      	cmp	r2, #4
 80168c0:	d007      	beq.n	80168d2 <__ssvfiscanf_r+0xa8e>
 80168c2:	2208      	movs	r2, #8
 80168c4:	2100      	movs	r1, #0
 80168c6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80168ca:	623b      	str	r3, [r7, #32]
 80168cc:	f7f9 fe16 	bl	80104fc <memset>
 80168d0:	6a3b      	ldr	r3, [r7, #32]
 80168d2:	60fb      	str	r3, [r7, #12]
 80168d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80168d8:	9200      	str	r2, [sp, #0]
 80168da:	ee18 0a10 	vmov	r0, s16
 80168de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80168e2:	4629      	mov	r1, r5
 80168e4:	f001 fa92 	bl	8017e0c <_mbrtowc_r>
 80168e8:	1c42      	adds	r2, r0, #1
 80168ea:	6238      	str	r0, [r7, #32]
 80168ec:	f43f ab6c 	beq.w	8015fc8 <__ssvfiscanf_r+0x184>
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	bb80      	cbnz	r0, 8016956 <__ssvfiscanf_r+0xb12>
 80168f4:	6028      	str	r0, [r5, #0]
 80168f6:	6828      	ldr	r0, [r5, #0]
 80168f8:	60fb      	str	r3, [r7, #12]
 80168fa:	f001 fa61 	bl	8017dc0 <iswspace>
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	4602      	mov	r2, r0
 8016902:	2800      	cmp	r0, #0
 8016904:	d047      	beq.n	8016996 <__ssvfiscanf_r+0xb52>
 8016906:	2b00      	cmp	r3, #0
 8016908:	d139      	bne.n	801697e <__ssvfiscanf_r+0xb3a>
 801690a:	f1b8 0f00 	cmp.w	r8, #0
 801690e:	f47f af64 	bne.w	80167da <__ssvfiscanf_r+0x996>
 8016912:	f8c5 8000 	str.w	r8, [r5]
 8016916:	f1ba 0f00 	cmp.w	sl, #0
 801691a:	d00c      	beq.n	8016936 <__ssvfiscanf_r+0xaf2>
 801691c:	1ba9      	subs	r1, r5, r6
 801691e:	108b      	asrs	r3, r1, #2
 8016920:	3301      	adds	r3, #1
 8016922:	4599      	cmp	r9, r3
 8016924:	d907      	bls.n	8016936 <__ssvfiscanf_r+0xaf2>
 8016926:	f8da 0000 	ldr.w	r0, [sl]
 801692a:	3104      	adds	r1, #4
 801692c:	f001 faac 	bl	8017e88 <realloc>
 8016930:	b108      	cbz	r0, 8016936 <__ssvfiscanf_r+0xaf2>
 8016932:	f8ca 0000 	str.w	r0, [sl]
 8016936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016938:	3301      	adds	r3, #1
 801693a:	627b      	str	r3, [r7, #36]	; 0x24
 801693c:	e74d      	b.n	80167da <__ssvfiscanf_r+0x996>
 801693e:	f04f 0900 	mov.w	r9, #0
 8016942:	61be      	str	r6, [r7, #24]
 8016944:	46ca      	mov	sl, r9
 8016946:	464e      	mov	r6, r9
 8016948:	f107 0534 	add.w	r5, r7, #52	; 0x34
 801694c:	e796      	b.n	801687c <__ssvfiscanf_r+0xa38>
 801694e:	46c1      	mov	r9, r8
 8016950:	4646      	mov	r6, r8
 8016952:	46c2      	mov	sl, r8
 8016954:	e792      	b.n	801687c <__ssvfiscanf_r+0xa38>
 8016956:	6a3a      	ldr	r2, [r7, #32]
 8016958:	3202      	adds	r2, #2
 801695a:	d1cc      	bne.n	80168f6 <__ssvfiscanf_r+0xab2>
 801695c:	461a      	mov	r2, r3
 801695e:	6863      	ldr	r3, [r4, #4]
 8016960:	2b00      	cmp	r3, #0
 8016962:	dc8c      	bgt.n	801687e <__ssvfiscanf_r+0xa3a>
 8016964:	ee18 0a10 	vmov	r0, s16
 8016968:	4621      	mov	r1, r4
 801696a:	60fa      	str	r2, [r7, #12]
 801696c:	f7ff fa14 	bl	8015d98 <__ssrefill_r>
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	2800      	cmp	r0, #0
 8016974:	d083      	beq.n	801687e <__ssvfiscanf_r+0xa3a>
 8016976:	2a00      	cmp	r2, #0
 8016978:	f47f ab26 	bne.w	8015fc8 <__ssvfiscanf_r+0x184>
 801697c:	e7c5      	b.n	801690a <__ssvfiscanf_r+0xac6>
 801697e:	3b01      	subs	r3, #1
 8016980:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016984:	ee18 0a10 	vmov	r0, s16
 8016988:	5cc9      	ldrb	r1, [r1, r3]
 801698a:	62bb      	str	r3, [r7, #40]	; 0x28
 801698c:	4622      	mov	r2, r4
 801698e:	f7ff f9c6 	bl	8015d1e <_sungetc_r>
 8016992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016994:	e7b7      	b.n	8016906 <__ssvfiscanf_r+0xac2>
 8016996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016998:	4419      	add	r1, r3
 801699a:	6a3b      	ldr	r3, [r7, #32]
 801699c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801699e:	2b03      	cmp	r3, #3
 80169a0:	d102      	bne.n	80169a8 <__ssvfiscanf_r+0xb64>
 80169a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169a4:	2b04      	cmp	r3, #4
 80169a6:	d002      	beq.n	80169ae <__ssvfiscanf_r+0xb6a>
 80169a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169aa:	3b01      	subs	r3, #1
 80169ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80169ae:	f1b8 0f00 	cmp.w	r8, #0
 80169b2:	d1d4      	bne.n	801695e <__ssvfiscanf_r+0xb1a>
 80169b4:	3504      	adds	r5, #4
 80169b6:	f1ba 0f00 	cmp.w	sl, #0
 80169ba:	d015      	beq.n	80169e8 <__ssvfiscanf_r+0xba4>
 80169bc:	1bab      	subs	r3, r5, r6
 80169be:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80169c2:	d80f      	bhi.n	80169e4 <__ssvfiscanf_r+0xba0>
 80169c4:	4630      	mov	r0, r6
 80169c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80169ca:	60fb      	str	r3, [r7, #12]
 80169cc:	f001 fa5c 	bl	8017e88 <realloc>
 80169d0:	4606      	mov	r6, r0
 80169d2:	2800      	cmp	r0, #0
 80169d4:	f43f ab97 	beq.w	8016106 <__ssvfiscanf_r+0x2c2>
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	f8ca 0000 	str.w	r0, [sl]
 80169de:	18c5      	adds	r5, r0, r3
 80169e0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80169e4:	4642      	mov	r2, r8
 80169e6:	e7ba      	b.n	801695e <__ssvfiscanf_r+0xb1a>
 80169e8:	4652      	mov	r2, sl
 80169ea:	e7b8      	b.n	801695e <__ssvfiscanf_r+0xb1a>
 80169ec:	f1b8 0f00 	cmp.w	r8, #0
 80169f0:	d01a      	beq.n	8016a28 <__ssvfiscanf_r+0xbe4>
 80169f2:	6823      	ldr	r3, [r4, #0]
 80169f4:	494f      	ldr	r1, [pc, #316]	; (8016b34 <__ssvfiscanf_r+0xcf0>)
 80169f6:	781a      	ldrb	r2, [r3, #0]
 80169f8:	5c52      	ldrb	r2, [r2, r1]
 80169fa:	0711      	lsls	r1, r2, #28
 80169fc:	f53f ae63 	bmi.w	80166c6 <__ssvfiscanf_r+0x882>
 8016a00:	3301      	adds	r3, #1
 8016a02:	6862      	ldr	r2, [r4, #4]
 8016a04:	6023      	str	r3, [r4, #0]
 8016a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a08:	3501      	adds	r5, #1
 8016a0a:	3a01      	subs	r2, #1
 8016a0c:	429d      	cmp	r5, r3
 8016a0e:	6062      	str	r2, [r4, #4]
 8016a10:	f43f ae59 	beq.w	80166c6 <__ssvfiscanf_r+0x882>
 8016a14:	2a00      	cmp	r2, #0
 8016a16:	dcec      	bgt.n	80169f2 <__ssvfiscanf_r+0xbae>
 8016a18:	ee18 0a10 	vmov	r0, s16
 8016a1c:	4621      	mov	r1, r4
 8016a1e:	f7ff f9bb 	bl	8015d98 <__ssrefill_r>
 8016a22:	2800      	cmp	r0, #0
 8016a24:	d0e5      	beq.n	80169f2 <__ssvfiscanf_r+0xbae>
 8016a26:	e64e      	b.n	80166c6 <__ssvfiscanf_r+0x882>
 8016a28:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8016a2c:	f856 5b04 	ldr.w	r5, [r6], #4
 8016a30:	d07d      	beq.n	8016b2e <__ssvfiscanf_r+0xcea>
 8016a32:	2d00      	cmp	r5, #0
 8016a34:	f43f aa5d 	beq.w	8015ef2 <__ssvfiscanf_r+0xae>
 8016a38:	2020      	movs	r0, #32
 8016a3a:	f7fe fa15 	bl	8014e68 <malloc>
 8016a3e:	4681      	mov	r9, r0
 8016a40:	2800      	cmp	r0, #0
 8016a42:	f43f aac6 	beq.w	8015fd2 <__ssvfiscanf_r+0x18e>
 8016a46:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8016a4a:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8016a4e:	6028      	str	r0, [r5, #0]
 8016a50:	45c2      	cmp	sl, r8
 8016a52:	d315      	bcc.n	8016a80 <__ssvfiscanf_r+0xc3c>
 8016a54:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8016a58:	4598      	cmp	r8, r3
 8016a5a:	f63f ab5d 	bhi.w	8016118 <__ssvfiscanf_r+0x2d4>
 8016a5e:	f108 0808 	add.w	r8, r8, #8
 8016a62:	fa1f f888 	uxth.w	r8, r8
 8016a66:	f8db 0000 	ldr.w	r0, [fp]
 8016a6a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8016a6e:	f001 fa0b 	bl	8017e88 <realloc>
 8016a72:	2800      	cmp	r0, #0
 8016a74:	f43f ab50 	beq.w	8016118 <__ssvfiscanf_r+0x2d4>
 8016a78:	f8cb 0000 	str.w	r0, [fp]
 8016a7c:	f8ab 8004 	strh.w	r8, [fp, #4]
 8016a80:	f8db 3000 	ldr.w	r3, [fp]
 8016a84:	f10a 0201 	add.w	r2, sl, #1
 8016a88:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8016a8c:	f8ab 2006 	strh.w	r2, [fp, #6]
 8016a90:	46aa      	mov	sl, r5
 8016a92:	464d      	mov	r5, r9
 8016a94:	f04f 0920 	mov.w	r9, #32
 8016a98:	46a8      	mov	r8, r5
 8016a9a:	6823      	ldr	r3, [r4, #0]
 8016a9c:	4925      	ldr	r1, [pc, #148]	; (8016b34 <__ssvfiscanf_r+0xcf0>)
 8016a9e:	781a      	ldrb	r2, [r3, #0]
 8016aa0:	5c52      	ldrb	r2, [r2, r1]
 8016aa2:	0712      	lsls	r2, r2, #28
 8016aa4:	d42b      	bmi.n	8016afe <__ssvfiscanf_r+0xcba>
 8016aa6:	6862      	ldr	r2, [r4, #4]
 8016aa8:	3a01      	subs	r2, #1
 8016aaa:	6062      	str	r2, [r4, #4]
 8016aac:	1c5a      	adds	r2, r3, #1
 8016aae:	6022      	str	r2, [r4, #0]
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	f805 3b01 	strb.w	r3, [r5], #1
 8016ab6:	f1ba 0f00 	cmp.w	sl, #0
 8016aba:	d012      	beq.n	8016ae2 <__ssvfiscanf_r+0xc9e>
 8016abc:	eba5 0308 	sub.w	r3, r5, r8
 8016ac0:	454b      	cmp	r3, r9
 8016ac2:	d30e      	bcc.n	8016ae2 <__ssvfiscanf_r+0xc9e>
 8016ac4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8016ac8:	4640      	mov	r0, r8
 8016aca:	4649      	mov	r1, r9
 8016acc:	61bb      	str	r3, [r7, #24]
 8016ace:	f001 f9db 	bl	8017e88 <realloc>
 8016ad2:	4680      	mov	r8, r0
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	f43f aa7c 	beq.w	8015fd2 <__ssvfiscanf_r+0x18e>
 8016ada:	69bb      	ldr	r3, [r7, #24]
 8016adc:	f8ca 0000 	str.w	r0, [sl]
 8016ae0:	18c5      	adds	r5, r0, r3
 8016ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae4:	3b01      	subs	r3, #1
 8016ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ae8:	d009      	beq.n	8016afe <__ssvfiscanf_r+0xcba>
 8016aea:	6863      	ldr	r3, [r4, #4]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	dcd4      	bgt.n	8016a9a <__ssvfiscanf_r+0xc56>
 8016af0:	ee18 0a10 	vmov	r0, s16
 8016af4:	4621      	mov	r1, r4
 8016af6:	f7ff f94f 	bl	8015d98 <__ssrefill_r>
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d0cd      	beq.n	8016a9a <__ssvfiscanf_r+0xc56>
 8016afe:	2300      	movs	r3, #0
 8016b00:	702b      	strb	r3, [r5, #0]
 8016b02:	eba5 0508 	sub.w	r5, r5, r8
 8016b06:	f1ba 0f00 	cmp.w	sl, #0
 8016b0a:	d009      	beq.n	8016b20 <__ssvfiscanf_r+0xcdc>
 8016b0c:	1c69      	adds	r1, r5, #1
 8016b0e:	4589      	cmp	r9, r1
 8016b10:	d906      	bls.n	8016b20 <__ssvfiscanf_r+0xcdc>
 8016b12:	f8da 0000 	ldr.w	r0, [sl]
 8016b16:	f001 f9b7 	bl	8017e88 <realloc>
 8016b1a:	b108      	cbz	r0, 8016b20 <__ssvfiscanf_r+0xcdc>
 8016b1c:	f8ca 0000 	str.w	r0, [sl]
 8016b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b22:	442b      	add	r3, r5
 8016b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b28:	3301      	adds	r3, #1
 8016b2a:	f7ff b9a7 	b.w	8015e7c <__ssvfiscanf_r+0x38>
 8016b2e:	46ca      	mov	sl, r9
 8016b30:	e7b2      	b.n	8016a98 <__ssvfiscanf_r+0xc54>
 8016b32:	bf00      	nop
 8016b34:	0801b15f 	.word	0x0801b15f
 8016b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b3a:	3b01      	subs	r3, #1
 8016b3c:	2b26      	cmp	r3, #38	; 0x26
 8016b3e:	bf81      	itttt	hi
 8016b40:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 8016b42:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 8016b46:	2327      	movhi	r3, #39	; 0x27
 8016b48:	62bb      	strhi	r3, [r7, #40]	; 0x28
 8016b4a:	bf98      	it	ls
 8016b4c:	2500      	movls	r5, #0
 8016b4e:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 8016b52:	f04f 0a00 	mov.w	sl, #0
 8016b56:	f107 0848 	add.w	r8, r7, #72	; 0x48
 8016b5a:	6822      	ldr	r2, [r4, #0]
 8016b5c:	7813      	ldrb	r3, [r2, #0]
 8016b5e:	2b39      	cmp	r3, #57	; 0x39
 8016b60:	d80f      	bhi.n	8016b82 <__ssvfiscanf_r+0xd3e>
 8016b62:	2b2a      	cmp	r3, #42	; 0x2a
 8016b64:	d91a      	bls.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016b66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016b6a:	290e      	cmp	r1, #14
 8016b6c:	d816      	bhi.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016b6e:	e8df f001 	tbb	[pc, r1]
 8016b72:	1577      	.short	0x1577
 8016b74:	41151577 	.word	0x41151577
 8016b78:	67676767 	.word	0x67676767
 8016b7c:	6f676767 	.word	0x6f676767
 8016b80:	6f          	.byte	0x6f
 8016b81:	00          	.byte	0x00
 8016b82:	2b66      	cmp	r3, #102	; 0x66
 8016b84:	d834      	bhi.n	8016bf0 <__ssvfiscanf_r+0xdac>
 8016b86:	2b60      	cmp	r3, #96	; 0x60
 8016b88:	d803      	bhi.n	8016b92 <__ssvfiscanf_r+0xd4e>
 8016b8a:	2b46      	cmp	r3, #70	; 0x46
 8016b8c:	d804      	bhi.n	8016b98 <__ssvfiscanf_r+0xd54>
 8016b8e:	2b40      	cmp	r3, #64	; 0x40
 8016b90:	d904      	bls.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016b92:	69f9      	ldr	r1, [r7, #28]
 8016b94:	290a      	cmp	r1, #10
 8016b96:	e061      	b.n	8016c5c <__ssvfiscanf_r+0xe18>
 8016b98:	2b58      	cmp	r3, #88	; 0x58
 8016b9a:	d067      	beq.n	8016c6c <__ssvfiscanf_r+0xe28>
 8016b9c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8016ba0:	d012      	beq.n	8016bc8 <__ssvfiscanf_r+0xd84>
 8016ba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016ba6:	4598      	cmp	r8, r3
 8016ba8:	d909      	bls.n	8016bbe <__ssvfiscanf_r+0xd7a>
 8016baa:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8016bae:	ee18 0a10 	vmov	r0, s16
 8016bb2:	4622      	mov	r2, r4
 8016bb4:	f7ff f8b3 	bl	8015d1e <_sungetc_r>
 8016bb8:	f108 35ff 	add.w	r5, r8, #4294967295
 8016bbc:	46a8      	mov	r8, r5
 8016bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016bc2:	4598      	cmp	r8, r3
 8016bc4:	f43f a995 	beq.w	8015ef2 <__ssvfiscanf_r+0xae>
 8016bc8:	f019 0210 	ands.w	r2, r9, #16
 8016bcc:	d16b      	bne.n	8016ca6 <__ssvfiscanf_r+0xe62>
 8016bce:	697d      	ldr	r5, [r7, #20]
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	f888 2000 	strb.w	r2, [r8]
 8016bd6:	ee18 0a10 	vmov	r0, s16
 8016bda:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016bde:	47a8      	blx	r5
 8016be0:	f019 0f20 	tst.w	r9, #32
 8016be4:	f106 0504 	add.w	r5, r6, #4
 8016be8:	d054      	beq.n	8016c94 <__ssvfiscanf_r+0xe50>
 8016bea:	6833      	ldr	r3, [r6, #0]
 8016bec:	6018      	str	r0, [r3, #0]
 8016bee:	e056      	b.n	8016c9e <__ssvfiscanf_r+0xe5a>
 8016bf0:	2b78      	cmp	r3, #120	; 0x78
 8016bf2:	e7d2      	b.n	8016b9a <__ssvfiscanf_r+0xd56>
 8016bf4:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8016bf8:	d00a      	beq.n	8016c10 <__ssvfiscanf_r+0xdcc>
 8016bfa:	69f9      	ldr	r1, [r7, #28]
 8016bfc:	b919      	cbnz	r1, 8016c06 <__ssvfiscanf_r+0xdc2>
 8016bfe:	2108      	movs	r1, #8
 8016c00:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8016c04:	61f9      	str	r1, [r7, #28]
 8016c06:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8016c0a:	d004      	beq.n	8016c16 <__ssvfiscanf_r+0xdd2>
 8016c0c:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 8016c10:	f808 3b01 	strb.w	r3, [r8], #1
 8016c14:	e008      	b.n	8016c28 <__ssvfiscanf_r+0xde4>
 8016c16:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 8016c1a:	b11d      	cbz	r5, 8016c24 <__ssvfiscanf_r+0xde0>
 8016c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1e:	3301      	adds	r3, #1
 8016c20:	3d01      	subs	r5, #1
 8016c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c24:	f10a 0a01 	add.w	sl, sl, #1
 8016c28:	6863      	ldr	r3, [r4, #4]
 8016c2a:	3b01      	subs	r3, #1
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	6063      	str	r3, [r4, #4]
 8016c30:	dd28      	ble.n	8016c84 <__ssvfiscanf_r+0xe40>
 8016c32:	3201      	adds	r2, #1
 8016c34:	6022      	str	r2, [r4, #0]
 8016c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c38:	3b01      	subs	r3, #1
 8016c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c3c:	d18d      	bne.n	8016b5a <__ssvfiscanf_r+0xd16>
 8016c3e:	e7ad      	b.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016c40:	69f8      	ldr	r0, [r7, #28]
 8016c42:	4932      	ldr	r1, [pc, #200]	; (8016d0c <__ssvfiscanf_r+0xec8>)
 8016c44:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8016c48:	61f9      	str	r1, [r7, #28]
 8016c4a:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 8016c4e:	e7df      	b.n	8016c10 <__ssvfiscanf_r+0xdcc>
 8016c50:	69f8      	ldr	r0, [r7, #28]
 8016c52:	492e      	ldr	r1, [pc, #184]	; (8016d0c <__ssvfiscanf_r+0xec8>)
 8016c54:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8016c58:	61f9      	str	r1, [r7, #28]
 8016c5a:	2908      	cmp	r1, #8
 8016c5c:	dcf5      	bgt.n	8016c4a <__ssvfiscanf_r+0xe06>
 8016c5e:	e79d      	b.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016c60:	f019 0f80 	tst.w	r9, #128	; 0x80
 8016c64:	d09a      	beq.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016c66:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 8016c6a:	e7d1      	b.n	8016c10 <__ssvfiscanf_r+0xdcc>
 8016c6c:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 8016c70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016c74:	d192      	bne.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016c76:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 8016c7a:	2110      	movs	r1, #16
 8016c7c:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 8016c80:	61f9      	str	r1, [r7, #28]
 8016c82:	e7c5      	b.n	8016c10 <__ssvfiscanf_r+0xdcc>
 8016c84:	ee18 0a10 	vmov	r0, s16
 8016c88:	4621      	mov	r1, r4
 8016c8a:	f7ff f885 	bl	8015d98 <__ssrefill_r>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d0d1      	beq.n	8016c36 <__ssvfiscanf_r+0xdf2>
 8016c92:	e783      	b.n	8016b9c <__ssvfiscanf_r+0xd58>
 8016c94:	f019 0f08 	tst.w	r9, #8
 8016c98:	d00e      	beq.n	8016cb8 <__ssvfiscanf_r+0xe74>
 8016c9a:	6833      	ldr	r3, [r6, #0]
 8016c9c:	7018      	strb	r0, [r3, #0]
 8016c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca0:	3301      	adds	r3, #1
 8016ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8016ca4:	462e      	mov	r6, r5
 8016ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016caa:	eba8 0803 	sub.w	r8, r8, r3
 8016cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb0:	44c2      	add	sl, r8
 8016cb2:	4453      	add	r3, sl
 8016cb4:	f7ff b97f 	b.w	8015fb6 <__ssvfiscanf_r+0x172>
 8016cb8:	f019 0f04 	tst.w	r9, #4
 8016cbc:	d002      	beq.n	8016cc4 <__ssvfiscanf_r+0xe80>
 8016cbe:	6833      	ldr	r3, [r6, #0]
 8016cc0:	8018      	strh	r0, [r3, #0]
 8016cc2:	e7ec      	b.n	8016c9e <__ssvfiscanf_r+0xe5a>
 8016cc4:	f019 0201 	ands.w	r2, r9, #1
 8016cc8:	d18f      	bne.n	8016bea <__ssvfiscanf_r+0xda6>
 8016cca:	f019 0f02 	tst.w	r9, #2
 8016cce:	d08c      	beq.n	8016bea <__ssvfiscanf_r+0xda6>
 8016cd0:	4b0f      	ldr	r3, [pc, #60]	; (8016d10 <__ssvfiscanf_r+0xecc>)
 8016cd2:	6979      	ldr	r1, [r7, #20]
 8016cd4:	4299      	cmp	r1, r3
 8016cd6:	ee18 0a10 	vmov	r0, s16
 8016cda:	69fb      	ldr	r3, [r7, #28]
 8016cdc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016ce0:	d105      	bne.n	8016cee <__ssvfiscanf_r+0xeaa>
 8016ce2:	f001 fbe5 	bl	80184b0 <_strtoull_r>
 8016ce6:	6833      	ldr	r3, [r6, #0]
 8016ce8:	e9c3 0100 	strd	r0, r1, [r3]
 8016cec:	e7d7      	b.n	8016c9e <__ssvfiscanf_r+0xe5a>
 8016cee:	f001 fb45 	bl	801837c <_strtoll_r>
 8016cf2:	e7f8      	b.n	8016ce6 <__ssvfiscanf_r+0xea2>
 8016cf4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8016cf8:	6818      	ldr	r0, [r3, #0]
 8016cfa:	f7fe f8bd 	bl	8014e78 <free>
 8016cfe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8016d02:	3401      	adds	r4, #1
 8016d04:	601e      	str	r6, [r3, #0]
 8016d06:	f7ff ba09 	b.w	801611c <__ssvfiscanf_r+0x2d8>
 8016d0a:	bf00      	nop
 8016d0c:	0801b5ac 	.word	0x0801b5ac
 8016d10:	08015c11 	.word	0x08015c11

08016d14 <sysconf>:
 8016d14:	2808      	cmp	r0, #8
 8016d16:	b508      	push	{r3, lr}
 8016d18:	d006      	beq.n	8016d28 <sysconf+0x14>
 8016d1a:	f7fd fccb 	bl	80146b4 <__errno>
 8016d1e:	2316      	movs	r3, #22
 8016d20:	6003      	str	r3, [r0, #0]
 8016d22:	f04f 30ff 	mov.w	r0, #4294967295
 8016d26:	bd08      	pop	{r3, pc}
 8016d28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016d2c:	e7fb      	b.n	8016d26 <sysconf+0x12>

08016d2e <__submore>:
 8016d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d32:	460c      	mov	r4, r1
 8016d34:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8016d36:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8016d3a:	4299      	cmp	r1, r3
 8016d3c:	d11d      	bne.n	8016d7a <__submore+0x4c>
 8016d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016d42:	f7fe f8a1 	bl	8014e88 <_malloc_r>
 8016d46:	b918      	cbnz	r0, 8016d50 <__submore+0x22>
 8016d48:	f04f 30ff 	mov.w	r0, #4294967295
 8016d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d54:	6363      	str	r3, [r4, #52]	; 0x34
 8016d56:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8016d5a:	6320      	str	r0, [r4, #48]	; 0x30
 8016d5c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016d60:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8016d64:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016d68:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016d6c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016d70:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016d74:	6020      	str	r0, [r4, #0]
 8016d76:	2000      	movs	r0, #0
 8016d78:	e7e8      	b.n	8016d4c <__submore+0x1e>
 8016d7a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8016d7c:	0077      	lsls	r7, r6, #1
 8016d7e:	463a      	mov	r2, r7
 8016d80:	f001 f88a 	bl	8017e98 <_realloc_r>
 8016d84:	4605      	mov	r5, r0
 8016d86:	2800      	cmp	r0, #0
 8016d88:	d0de      	beq.n	8016d48 <__submore+0x1a>
 8016d8a:	eb00 0806 	add.w	r8, r0, r6
 8016d8e:	4601      	mov	r1, r0
 8016d90:	4632      	mov	r2, r6
 8016d92:	4640      	mov	r0, r8
 8016d94:	f7f9 fb8a 	bl	80104ac <memcpy>
 8016d98:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 8016d9c:	f8c4 8000 	str.w	r8, [r4]
 8016da0:	e7e9      	b.n	8016d76 <__submore+0x48>

08016da2 <__sprint_r>:
 8016da2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da6:	6893      	ldr	r3, [r2, #8]
 8016da8:	4680      	mov	r8, r0
 8016daa:	460f      	mov	r7, r1
 8016dac:	4614      	mov	r4, r2
 8016dae:	b91b      	cbnz	r3, 8016db8 <__sprint_r+0x16>
 8016db0:	6053      	str	r3, [r2, #4]
 8016db2:	4618      	mov	r0, r3
 8016db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016db8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8016dba:	049d      	lsls	r5, r3, #18
 8016dbc:	d520      	bpl.n	8016e00 <__sprint_r+0x5e>
 8016dbe:	6815      	ldr	r5, [r2, #0]
 8016dc0:	3508      	adds	r5, #8
 8016dc2:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8016dc6:	f04f 0900 	mov.w	r9, #0
 8016dca:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8016dce:	45ca      	cmp	sl, r9
 8016dd0:	dc0b      	bgt.n	8016dea <__sprint_r+0x48>
 8016dd2:	68a3      	ldr	r3, [r4, #8]
 8016dd4:	f026 0003 	bic.w	r0, r6, #3
 8016dd8:	1a18      	subs	r0, r3, r0
 8016dda:	60a0      	str	r0, [r4, #8]
 8016ddc:	3508      	adds	r5, #8
 8016dde:	2800      	cmp	r0, #0
 8016de0:	d1ef      	bne.n	8016dc2 <__sprint_r+0x20>
 8016de2:	2300      	movs	r3, #0
 8016de4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016de8:	e7e4      	b.n	8016db4 <__sprint_r+0x12>
 8016dea:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8016dee:	463a      	mov	r2, r7
 8016df0:	4640      	mov	r0, r8
 8016df2:	f000 fe4e 	bl	8017a92 <_fputwc_r>
 8016df6:	1c43      	adds	r3, r0, #1
 8016df8:	d0f3      	beq.n	8016de2 <__sprint_r+0x40>
 8016dfa:	f109 0901 	add.w	r9, r9, #1
 8016dfe:	e7e6      	b.n	8016dce <__sprint_r+0x2c>
 8016e00:	f000 fe84 	bl	8017b0c <__sfvwrite_r>
 8016e04:	e7ed      	b.n	8016de2 <__sprint_r+0x40>
	...

08016e08 <_vfiprintf_r>:
 8016e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e0c:	ed2d 8b02 	vpush	{d8}
 8016e10:	b0b9      	sub	sp, #228	; 0xe4
 8016e12:	460f      	mov	r7, r1
 8016e14:	9201      	str	r2, [sp, #4]
 8016e16:	461d      	mov	r5, r3
 8016e18:	461c      	mov	r4, r3
 8016e1a:	4681      	mov	r9, r0
 8016e1c:	b118      	cbz	r0, 8016e26 <_vfiprintf_r+0x1e>
 8016e1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016e20:	b90b      	cbnz	r3, 8016e26 <_vfiprintf_r+0x1e>
 8016e22:	f7fd fd47 	bl	80148b4 <__sinit>
 8016e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e28:	07d8      	lsls	r0, r3, #31
 8016e2a:	d405      	bmi.n	8016e38 <_vfiprintf_r+0x30>
 8016e2c:	89bb      	ldrh	r3, [r7, #12]
 8016e2e:	0599      	lsls	r1, r3, #22
 8016e30:	d402      	bmi.n	8016e38 <_vfiprintf_r+0x30>
 8016e32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8016e34:	f7fd ffa9 	bl	8014d8a <__retarget_lock_acquire_recursive>
 8016e38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016e3c:	049a      	lsls	r2, r3, #18
 8016e3e:	d406      	bmi.n	8016e4e <_vfiprintf_r+0x46>
 8016e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016e44:	81bb      	strh	r3, [r7, #12]
 8016e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8016e4e:	89bb      	ldrh	r3, [r7, #12]
 8016e50:	071e      	lsls	r6, r3, #28
 8016e52:	d501      	bpl.n	8016e58 <_vfiprintf_r+0x50>
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	b9bb      	cbnz	r3, 8016e88 <_vfiprintf_r+0x80>
 8016e58:	4639      	mov	r1, r7
 8016e5a:	4648      	mov	r0, r9
 8016e5c:	f7fc fd4a 	bl	80138f4 <__swsetup_r>
 8016e60:	b190      	cbz	r0, 8016e88 <_vfiprintf_r+0x80>
 8016e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e64:	07d8      	lsls	r0, r3, #31
 8016e66:	d508      	bpl.n	8016e7a <_vfiprintf_r+0x72>
 8016e68:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6c:	9302      	str	r3, [sp, #8]
 8016e6e:	9802      	ldr	r0, [sp, #8]
 8016e70:	b039      	add	sp, #228	; 0xe4
 8016e72:	ecbd 8b02 	vpop	{d8}
 8016e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e7a:	89bb      	ldrh	r3, [r7, #12]
 8016e7c:	0599      	lsls	r1, r3, #22
 8016e7e:	d4f3      	bmi.n	8016e68 <_vfiprintf_r+0x60>
 8016e80:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8016e82:	f7fd ff84 	bl	8014d8e <__retarget_lock_release_recursive>
 8016e86:	e7ef      	b.n	8016e68 <_vfiprintf_r+0x60>
 8016e88:	89bb      	ldrh	r3, [r7, #12]
 8016e8a:	f003 021a 	and.w	r2, r3, #26
 8016e8e:	2a0a      	cmp	r2, #10
 8016e90:	d116      	bne.n	8016ec0 <_vfiprintf_r+0xb8>
 8016e92:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8016e96:	2a00      	cmp	r2, #0
 8016e98:	db12      	blt.n	8016ec0 <_vfiprintf_r+0xb8>
 8016e9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016e9c:	07d2      	lsls	r2, r2, #31
 8016e9e:	d404      	bmi.n	8016eaa <_vfiprintf_r+0xa2>
 8016ea0:	059e      	lsls	r6, r3, #22
 8016ea2:	d402      	bmi.n	8016eaa <_vfiprintf_r+0xa2>
 8016ea4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8016ea6:	f7fd ff72 	bl	8014d8e <__retarget_lock_release_recursive>
 8016eaa:	9a01      	ldr	r2, [sp, #4]
 8016eac:	462b      	mov	r3, r5
 8016eae:	4639      	mov	r1, r7
 8016eb0:	4648      	mov	r0, r9
 8016eb2:	b039      	add	sp, #228	; 0xe4
 8016eb4:	ecbd 8b02 	vpop	{d8}
 8016eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ebc:	f000 bc3a 	b.w	8017734 <__sbprintf>
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8016ec6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016eca:	ae0f      	add	r6, sp, #60	; 0x3c
 8016ecc:	ee08 3a10 	vmov	s16, r3
 8016ed0:	960c      	str	r6, [sp, #48]	; 0x30
 8016ed2:	9307      	str	r3, [sp, #28]
 8016ed4:	9302      	str	r3, [sp, #8]
 8016ed6:	9b01      	ldr	r3, [sp, #4]
 8016ed8:	461d      	mov	r5, r3
 8016eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ede:	b10a      	cbz	r2, 8016ee4 <_vfiprintf_r+0xdc>
 8016ee0:	2a25      	cmp	r2, #37	; 0x25
 8016ee2:	d1f9      	bne.n	8016ed8 <_vfiprintf_r+0xd0>
 8016ee4:	9b01      	ldr	r3, [sp, #4]
 8016ee6:	ebb5 0803 	subs.w	r8, r5, r3
 8016eea:	d00d      	beq.n	8016f08 <_vfiprintf_r+0x100>
 8016eec:	e9c6 3800 	strd	r3, r8, [r6]
 8016ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ef2:	4443      	add	r3, r8
 8016ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8016ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ef8:	3301      	adds	r3, #1
 8016efa:	2b07      	cmp	r3, #7
 8016efc:	930d      	str	r3, [sp, #52]	; 0x34
 8016efe:	dc75      	bgt.n	8016fec <_vfiprintf_r+0x1e4>
 8016f00:	3608      	adds	r6, #8
 8016f02:	9b02      	ldr	r3, [sp, #8]
 8016f04:	4443      	add	r3, r8
 8016f06:	9302      	str	r3, [sp, #8]
 8016f08:	782b      	ldrb	r3, [r5, #0]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	f000 83d6 	beq.w	80176bc <_vfiprintf_r+0x8b4>
 8016f10:	2300      	movs	r3, #0
 8016f12:	f04f 31ff 	mov.w	r1, #4294967295
 8016f16:	1c6a      	adds	r2, r5, #1
 8016f18:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8016f1c:	9100      	str	r1, [sp, #0]
 8016f1e:	9303      	str	r3, [sp, #12]
 8016f20:	469a      	mov	sl, r3
 8016f22:	f812 3b01 	ldrb.w	r3, [r2], #1
 8016f26:	9201      	str	r2, [sp, #4]
 8016f28:	f1a3 0220 	sub.w	r2, r3, #32
 8016f2c:	2a5a      	cmp	r2, #90	; 0x5a
 8016f2e:	f200 831f 	bhi.w	8017570 <_vfiprintf_r+0x768>
 8016f32:	e8df f012 	tbh	[pc, r2, lsl #1]
 8016f36:	009b      	.short	0x009b
 8016f38:	031d031d 	.word	0x031d031d
 8016f3c:	031d00a3 	.word	0x031d00a3
 8016f40:	031d031d 	.word	0x031d031d
 8016f44:	031d0082 	.word	0x031d0082
 8016f48:	00a6031d 	.word	0x00a6031d
 8016f4c:	031d00b0 	.word	0x031d00b0
 8016f50:	00b200ad 	.word	0x00b200ad
 8016f54:	00cd031d 	.word	0x00cd031d
 8016f58:	00d000d0 	.word	0x00d000d0
 8016f5c:	00d000d0 	.word	0x00d000d0
 8016f60:	00d000d0 	.word	0x00d000d0
 8016f64:	00d000d0 	.word	0x00d000d0
 8016f68:	031d00d0 	.word	0x031d00d0
 8016f6c:	031d031d 	.word	0x031d031d
 8016f70:	031d031d 	.word	0x031d031d
 8016f74:	031d031d 	.word	0x031d031d
 8016f78:	031d031d 	.word	0x031d031d
 8016f7c:	010800fa 	.word	0x010800fa
 8016f80:	031d031d 	.word	0x031d031d
 8016f84:	031d031d 	.word	0x031d031d
 8016f88:	031d031d 	.word	0x031d031d
 8016f8c:	031d031d 	.word	0x031d031d
 8016f90:	031d031d 	.word	0x031d031d
 8016f94:	031d0158 	.word	0x031d0158
 8016f98:	031d031d 	.word	0x031d031d
 8016f9c:	031d01a1 	.word	0x031d01a1
 8016fa0:	031d027e 	.word	0x031d027e
 8016fa4:	029e031d 	.word	0x029e031d
 8016fa8:	031d031d 	.word	0x031d031d
 8016fac:	031d031d 	.word	0x031d031d
 8016fb0:	031d031d 	.word	0x031d031d
 8016fb4:	031d031d 	.word	0x031d031d
 8016fb8:	031d031d 	.word	0x031d031d
 8016fbc:	010a00fa 	.word	0x010a00fa
 8016fc0:	031d031d 	.word	0x031d031d
 8016fc4:	00e0031d 	.word	0x00e0031d
 8016fc8:	00f4010a 	.word	0x00f4010a
 8016fcc:	00ed031d 	.word	0x00ed031d
 8016fd0:	0136031d 	.word	0x0136031d
 8016fd4:	018f015a 	.word	0x018f015a
 8016fd8:	031d00f4 	.word	0x031d00f4
 8016fdc:	009901a1 	.word	0x009901a1
 8016fe0:	031d0280 	.word	0x031d0280
 8016fe4:	0065031d 	.word	0x0065031d
 8016fe8:	0099031d 	.word	0x0099031d
 8016fec:	aa0c      	add	r2, sp, #48	; 0x30
 8016fee:	4639      	mov	r1, r7
 8016ff0:	4648      	mov	r0, r9
 8016ff2:	f7ff fed6 	bl	8016da2 <__sprint_r>
 8016ff6:	2800      	cmp	r0, #0
 8016ff8:	f040 833f 	bne.w	801767a <_vfiprintf_r+0x872>
 8016ffc:	ae0f      	add	r6, sp, #60	; 0x3c
 8016ffe:	e780      	b.n	8016f02 <_vfiprintf_r+0xfa>
 8017000:	4a9c      	ldr	r2, [pc, #624]	; (8017274 <_vfiprintf_r+0x46c>)
 8017002:	9205      	str	r2, [sp, #20]
 8017004:	f01a 0220 	ands.w	r2, sl, #32
 8017008:	f000 8235 	beq.w	8017476 <_vfiprintf_r+0x66e>
 801700c:	3407      	adds	r4, #7
 801700e:	f024 0207 	bic.w	r2, r4, #7
 8017012:	4693      	mov	fp, r2
 8017014:	6855      	ldr	r5, [r2, #4]
 8017016:	f85b 4b08 	ldr.w	r4, [fp], #8
 801701a:	f01a 0f01 	tst.w	sl, #1
 801701e:	d009      	beq.n	8017034 <_vfiprintf_r+0x22c>
 8017020:	ea54 0205 	orrs.w	r2, r4, r5
 8017024:	bf1f      	itttt	ne
 8017026:	2230      	movne	r2, #48	; 0x30
 8017028:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 801702c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8017030:	f04a 0a02 	orrne.w	sl, sl, #2
 8017034:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017038:	e11a      	b.n	8017270 <_vfiprintf_r+0x468>
 801703a:	4648      	mov	r0, r9
 801703c:	f7fd fe9e 	bl	8014d7c <_localeconv_r>
 8017040:	6843      	ldr	r3, [r0, #4]
 8017042:	4618      	mov	r0, r3
 8017044:	ee08 3a10 	vmov	s16, r3
 8017048:	f7e9 f8e2 	bl	8000210 <strlen>
 801704c:	9007      	str	r0, [sp, #28]
 801704e:	4648      	mov	r0, r9
 8017050:	f7fd fe94 	bl	8014d7c <_localeconv_r>
 8017054:	6883      	ldr	r3, [r0, #8]
 8017056:	9306      	str	r3, [sp, #24]
 8017058:	9b07      	ldr	r3, [sp, #28]
 801705a:	b12b      	cbz	r3, 8017068 <_vfiprintf_r+0x260>
 801705c:	9b06      	ldr	r3, [sp, #24]
 801705e:	b11b      	cbz	r3, 8017068 <_vfiprintf_r+0x260>
 8017060:	781b      	ldrb	r3, [r3, #0]
 8017062:	b10b      	cbz	r3, 8017068 <_vfiprintf_r+0x260>
 8017064:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8017068:	9a01      	ldr	r2, [sp, #4]
 801706a:	e75a      	b.n	8016f22 <_vfiprintf_r+0x11a>
 801706c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017070:	2b00      	cmp	r3, #0
 8017072:	d1f9      	bne.n	8017068 <_vfiprintf_r+0x260>
 8017074:	2320      	movs	r3, #32
 8017076:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801707a:	e7f5      	b.n	8017068 <_vfiprintf_r+0x260>
 801707c:	f04a 0a01 	orr.w	sl, sl, #1
 8017080:	e7f2      	b.n	8017068 <_vfiprintf_r+0x260>
 8017082:	f854 3b04 	ldr.w	r3, [r4], #4
 8017086:	9303      	str	r3, [sp, #12]
 8017088:	2b00      	cmp	r3, #0
 801708a:	daed      	bge.n	8017068 <_vfiprintf_r+0x260>
 801708c:	425b      	negs	r3, r3
 801708e:	9303      	str	r3, [sp, #12]
 8017090:	f04a 0a04 	orr.w	sl, sl, #4
 8017094:	e7e8      	b.n	8017068 <_vfiprintf_r+0x260>
 8017096:	232b      	movs	r3, #43	; 0x2b
 8017098:	e7ed      	b.n	8017076 <_vfiprintf_r+0x26e>
 801709a:	9a01      	ldr	r2, [sp, #4]
 801709c:	f812 3b01 	ldrb.w	r3, [r2], #1
 80170a0:	2b2a      	cmp	r3, #42	; 0x2a
 80170a2:	d112      	bne.n	80170ca <_vfiprintf_r+0x2c2>
 80170a4:	f854 0b04 	ldr.w	r0, [r4], #4
 80170a8:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80170ac:	e9cd 3200 	strd	r3, r2, [sp]
 80170b0:	e7da      	b.n	8017068 <_vfiprintf_r+0x260>
 80170b2:	9b00      	ldr	r3, [sp, #0]
 80170b4:	200a      	movs	r0, #10
 80170b6:	fb00 1303 	mla	r3, r0, r3, r1
 80170ba:	9300      	str	r3, [sp, #0]
 80170bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80170c0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80170c4:	2909      	cmp	r1, #9
 80170c6:	d9f4      	bls.n	80170b2 <_vfiprintf_r+0x2aa>
 80170c8:	e72d      	b.n	8016f26 <_vfiprintf_r+0x11e>
 80170ca:	2100      	movs	r1, #0
 80170cc:	9100      	str	r1, [sp, #0]
 80170ce:	e7f7      	b.n	80170c0 <_vfiprintf_r+0x2b8>
 80170d0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80170d4:	e7c8      	b.n	8017068 <_vfiprintf_r+0x260>
 80170d6:	2100      	movs	r1, #0
 80170d8:	9a01      	ldr	r2, [sp, #4]
 80170da:	9103      	str	r1, [sp, #12]
 80170dc:	9903      	ldr	r1, [sp, #12]
 80170de:	3b30      	subs	r3, #48	; 0x30
 80170e0:	200a      	movs	r0, #10
 80170e2:	fb00 3301 	mla	r3, r0, r1, r3
 80170e6:	9303      	str	r3, [sp, #12]
 80170e8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80170ec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80170f0:	2909      	cmp	r1, #9
 80170f2:	d9f3      	bls.n	80170dc <_vfiprintf_r+0x2d4>
 80170f4:	e717      	b.n	8016f26 <_vfiprintf_r+0x11e>
 80170f6:	9b01      	ldr	r3, [sp, #4]
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	2b68      	cmp	r3, #104	; 0x68
 80170fc:	bf01      	itttt	eq
 80170fe:	9b01      	ldreq	r3, [sp, #4]
 8017100:	3301      	addeq	r3, #1
 8017102:	9301      	streq	r3, [sp, #4]
 8017104:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8017108:	bf18      	it	ne
 801710a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801710e:	e7ab      	b.n	8017068 <_vfiprintf_r+0x260>
 8017110:	9b01      	ldr	r3, [sp, #4]
 8017112:	781b      	ldrb	r3, [r3, #0]
 8017114:	2b6c      	cmp	r3, #108	; 0x6c
 8017116:	d105      	bne.n	8017124 <_vfiprintf_r+0x31c>
 8017118:	9b01      	ldr	r3, [sp, #4]
 801711a:	3301      	adds	r3, #1
 801711c:	9301      	str	r3, [sp, #4]
 801711e:	f04a 0a20 	orr.w	sl, sl, #32
 8017122:	e7a1      	b.n	8017068 <_vfiprintf_r+0x260>
 8017124:	f04a 0a10 	orr.w	sl, sl, #16
 8017128:	e79e      	b.n	8017068 <_vfiprintf_r+0x260>
 801712a:	46a3      	mov	fp, r4
 801712c:	2100      	movs	r1, #0
 801712e:	f85b 3b04 	ldr.w	r3, [fp], #4
 8017132:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8017136:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801713a:	2301      	movs	r3, #1
 801713c:	9300      	str	r3, [sp, #0]
 801713e:	460d      	mov	r5, r1
 8017140:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8017144:	e0ad      	b.n	80172a2 <_vfiprintf_r+0x49a>
 8017146:	f04a 0a10 	orr.w	sl, sl, #16
 801714a:	f01a 0f20 	tst.w	sl, #32
 801714e:	d011      	beq.n	8017174 <_vfiprintf_r+0x36c>
 8017150:	3407      	adds	r4, #7
 8017152:	f024 0307 	bic.w	r3, r4, #7
 8017156:	469b      	mov	fp, r3
 8017158:	685d      	ldr	r5, [r3, #4]
 801715a:	f85b 4b08 	ldr.w	r4, [fp], #8
 801715e:	2d00      	cmp	r5, #0
 8017160:	da06      	bge.n	8017170 <_vfiprintf_r+0x368>
 8017162:	4264      	negs	r4, r4
 8017164:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8017168:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801716c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017170:	2301      	movs	r3, #1
 8017172:	e04a      	b.n	801720a <_vfiprintf_r+0x402>
 8017174:	46a3      	mov	fp, r4
 8017176:	f01a 0f10 	tst.w	sl, #16
 801717a:	f85b 5b04 	ldr.w	r5, [fp], #4
 801717e:	d002      	beq.n	8017186 <_vfiprintf_r+0x37e>
 8017180:	462c      	mov	r4, r5
 8017182:	17ed      	asrs	r5, r5, #31
 8017184:	e7eb      	b.n	801715e <_vfiprintf_r+0x356>
 8017186:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801718a:	d003      	beq.n	8017194 <_vfiprintf_r+0x38c>
 801718c:	b22c      	sxth	r4, r5
 801718e:	f345 35c0 	sbfx	r5, r5, #15, #1
 8017192:	e7e4      	b.n	801715e <_vfiprintf_r+0x356>
 8017194:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017198:	d0f2      	beq.n	8017180 <_vfiprintf_r+0x378>
 801719a:	b26c      	sxtb	r4, r5
 801719c:	f345 15c0 	sbfx	r5, r5, #7, #1
 80171a0:	e7dd      	b.n	801715e <_vfiprintf_r+0x356>
 80171a2:	f01a 0f20 	tst.w	sl, #32
 80171a6:	f104 0b04 	add.w	fp, r4, #4
 80171aa:	d007      	beq.n	80171bc <_vfiprintf_r+0x3b4>
 80171ac:	9a02      	ldr	r2, [sp, #8]
 80171ae:	6823      	ldr	r3, [r4, #0]
 80171b0:	9902      	ldr	r1, [sp, #8]
 80171b2:	17d2      	asrs	r2, r2, #31
 80171b4:	e9c3 1200 	strd	r1, r2, [r3]
 80171b8:	465c      	mov	r4, fp
 80171ba:	e68c      	b.n	8016ed6 <_vfiprintf_r+0xce>
 80171bc:	f01a 0f10 	tst.w	sl, #16
 80171c0:	d003      	beq.n	80171ca <_vfiprintf_r+0x3c2>
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	9a02      	ldr	r2, [sp, #8]
 80171c6:	601a      	str	r2, [r3, #0]
 80171c8:	e7f6      	b.n	80171b8 <_vfiprintf_r+0x3b0>
 80171ca:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80171ce:	d003      	beq.n	80171d8 <_vfiprintf_r+0x3d0>
 80171d0:	6823      	ldr	r3, [r4, #0]
 80171d2:	9a02      	ldr	r2, [sp, #8]
 80171d4:	801a      	strh	r2, [r3, #0]
 80171d6:	e7ef      	b.n	80171b8 <_vfiprintf_r+0x3b0>
 80171d8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80171dc:	d0f1      	beq.n	80171c2 <_vfiprintf_r+0x3ba>
 80171de:	6823      	ldr	r3, [r4, #0]
 80171e0:	9a02      	ldr	r2, [sp, #8]
 80171e2:	701a      	strb	r2, [r3, #0]
 80171e4:	e7e8      	b.n	80171b8 <_vfiprintf_r+0x3b0>
 80171e6:	f04a 0a10 	orr.w	sl, sl, #16
 80171ea:	f01a 0320 	ands.w	r3, sl, #32
 80171ee:	d01f      	beq.n	8017230 <_vfiprintf_r+0x428>
 80171f0:	3407      	adds	r4, #7
 80171f2:	f024 0307 	bic.w	r3, r4, #7
 80171f6:	469b      	mov	fp, r3
 80171f8:	685d      	ldr	r5, [r3, #4]
 80171fa:	f85b 4b08 	ldr.w	r4, [fp], #8
 80171fe:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017202:	2300      	movs	r3, #0
 8017204:	2200      	movs	r2, #0
 8017206:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 801720a:	9a00      	ldr	r2, [sp, #0]
 801720c:	3201      	adds	r2, #1
 801720e:	f000 8262 	beq.w	80176d6 <_vfiprintf_r+0x8ce>
 8017212:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8017216:	9204      	str	r2, [sp, #16]
 8017218:	ea54 0205 	orrs.w	r2, r4, r5
 801721c:	f040 8261 	bne.w	80176e2 <_vfiprintf_r+0x8da>
 8017220:	9a00      	ldr	r2, [sp, #0]
 8017222:	2a00      	cmp	r2, #0
 8017224:	f000 8199 	beq.w	801755a <_vfiprintf_r+0x752>
 8017228:	2b01      	cmp	r3, #1
 801722a:	f040 825d 	bne.w	80176e8 <_vfiprintf_r+0x8e0>
 801722e:	e139      	b.n	80174a4 <_vfiprintf_r+0x69c>
 8017230:	46a3      	mov	fp, r4
 8017232:	f01a 0510 	ands.w	r5, sl, #16
 8017236:	f85b 4b04 	ldr.w	r4, [fp], #4
 801723a:	d001      	beq.n	8017240 <_vfiprintf_r+0x438>
 801723c:	461d      	mov	r5, r3
 801723e:	e7de      	b.n	80171fe <_vfiprintf_r+0x3f6>
 8017240:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8017244:	d001      	beq.n	801724a <_vfiprintf_r+0x442>
 8017246:	b2a4      	uxth	r4, r4
 8017248:	e7d9      	b.n	80171fe <_vfiprintf_r+0x3f6>
 801724a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801724e:	d0d6      	beq.n	80171fe <_vfiprintf_r+0x3f6>
 8017250:	b2e4      	uxtb	r4, r4
 8017252:	e7f3      	b.n	801723c <_vfiprintf_r+0x434>
 8017254:	2330      	movs	r3, #48	; 0x30
 8017256:	46a3      	mov	fp, r4
 8017258:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801725c:	2378      	movs	r3, #120	; 0x78
 801725e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8017262:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017266:	4b03      	ldr	r3, [pc, #12]	; (8017274 <_vfiprintf_r+0x46c>)
 8017268:	9305      	str	r3, [sp, #20]
 801726a:	2500      	movs	r5, #0
 801726c:	f04a 0a02 	orr.w	sl, sl, #2
 8017270:	2302      	movs	r3, #2
 8017272:	e7c7      	b.n	8017204 <_vfiprintf_r+0x3fc>
 8017274:	0801b334 	.word	0x0801b334
 8017278:	9b00      	ldr	r3, [sp, #0]
 801727a:	46a3      	mov	fp, r4
 801727c:	2500      	movs	r5, #0
 801727e:	1c5c      	adds	r4, r3, #1
 8017280:	f85b 8b04 	ldr.w	r8, [fp], #4
 8017284:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017288:	f000 80ce 	beq.w	8017428 <_vfiprintf_r+0x620>
 801728c:	461a      	mov	r2, r3
 801728e:	4629      	mov	r1, r5
 8017290:	4640      	mov	r0, r8
 8017292:	f7e8 ffc5 	bl	8000220 <memchr>
 8017296:	2800      	cmp	r0, #0
 8017298:	f000 8174 	beq.w	8017584 <_vfiprintf_r+0x77c>
 801729c:	eba0 0308 	sub.w	r3, r0, r8
 80172a0:	9300      	str	r3, [sp, #0]
 80172a2:	9b00      	ldr	r3, [sp, #0]
 80172a4:	42ab      	cmp	r3, r5
 80172a6:	bfb8      	it	lt
 80172a8:	462b      	movlt	r3, r5
 80172aa:	9304      	str	r3, [sp, #16]
 80172ac:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80172b0:	b113      	cbz	r3, 80172b8 <_vfiprintf_r+0x4b0>
 80172b2:	9b04      	ldr	r3, [sp, #16]
 80172b4:	3301      	adds	r3, #1
 80172b6:	9304      	str	r3, [sp, #16]
 80172b8:	f01a 0302 	ands.w	r3, sl, #2
 80172bc:	9308      	str	r3, [sp, #32]
 80172be:	bf1e      	ittt	ne
 80172c0:	9b04      	ldrne	r3, [sp, #16]
 80172c2:	3302      	addne	r3, #2
 80172c4:	9304      	strne	r3, [sp, #16]
 80172c6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80172ca:	9309      	str	r3, [sp, #36]	; 0x24
 80172cc:	d11f      	bne.n	801730e <_vfiprintf_r+0x506>
 80172ce:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80172d2:	1a9c      	subs	r4, r3, r2
 80172d4:	2c00      	cmp	r4, #0
 80172d6:	dd1a      	ble.n	801730e <_vfiprintf_r+0x506>
 80172d8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80172dc:	48aa      	ldr	r0, [pc, #680]	; (8017588 <_vfiprintf_r+0x780>)
 80172de:	6030      	str	r0, [r6, #0]
 80172e0:	2c10      	cmp	r4, #16
 80172e2:	f103 0301 	add.w	r3, r3, #1
 80172e6:	f106 0108 	add.w	r1, r6, #8
 80172ea:	f300 8153 	bgt.w	8017594 <_vfiprintf_r+0x78c>
 80172ee:	6074      	str	r4, [r6, #4]
 80172f0:	2b07      	cmp	r3, #7
 80172f2:	4414      	add	r4, r2
 80172f4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80172f8:	f340 815e 	ble.w	80175b8 <_vfiprintf_r+0x7b0>
 80172fc:	aa0c      	add	r2, sp, #48	; 0x30
 80172fe:	4639      	mov	r1, r7
 8017300:	4648      	mov	r0, r9
 8017302:	f7ff fd4e 	bl	8016da2 <__sprint_r>
 8017306:	2800      	cmp	r0, #0
 8017308:	f040 81b7 	bne.w	801767a <_vfiprintf_r+0x872>
 801730c:	ae0f      	add	r6, sp, #60	; 0x3c
 801730e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017312:	b173      	cbz	r3, 8017332 <_vfiprintf_r+0x52a>
 8017314:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8017318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801731a:	6032      	str	r2, [r6, #0]
 801731c:	2201      	movs	r2, #1
 801731e:	6072      	str	r2, [r6, #4]
 8017320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017322:	3301      	adds	r3, #1
 8017324:	3201      	adds	r2, #1
 8017326:	2b07      	cmp	r3, #7
 8017328:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801732c:	f300 8146 	bgt.w	80175bc <_vfiprintf_r+0x7b4>
 8017330:	3608      	adds	r6, #8
 8017332:	9b08      	ldr	r3, [sp, #32]
 8017334:	b16b      	cbz	r3, 8017352 <_vfiprintf_r+0x54a>
 8017336:	aa0b      	add	r2, sp, #44	; 0x2c
 8017338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801733a:	6032      	str	r2, [r6, #0]
 801733c:	2202      	movs	r2, #2
 801733e:	6072      	str	r2, [r6, #4]
 8017340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017342:	3301      	adds	r3, #1
 8017344:	3202      	adds	r2, #2
 8017346:	2b07      	cmp	r3, #7
 8017348:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801734c:	f300 813f 	bgt.w	80175ce <_vfiprintf_r+0x7c6>
 8017350:	3608      	adds	r6, #8
 8017352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017354:	2b80      	cmp	r3, #128	; 0x80
 8017356:	d11f      	bne.n	8017398 <_vfiprintf_r+0x590>
 8017358:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801735c:	1a9c      	subs	r4, r3, r2
 801735e:	2c00      	cmp	r4, #0
 8017360:	dd1a      	ble.n	8017398 <_vfiprintf_r+0x590>
 8017362:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017366:	4889      	ldr	r0, [pc, #548]	; (801758c <_vfiprintf_r+0x784>)
 8017368:	6030      	str	r0, [r6, #0]
 801736a:	2c10      	cmp	r4, #16
 801736c:	f103 0301 	add.w	r3, r3, #1
 8017370:	f106 0108 	add.w	r1, r6, #8
 8017374:	f300 8134 	bgt.w	80175e0 <_vfiprintf_r+0x7d8>
 8017378:	6074      	str	r4, [r6, #4]
 801737a:	2b07      	cmp	r3, #7
 801737c:	4414      	add	r4, r2
 801737e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017382:	f340 813f 	ble.w	8017604 <_vfiprintf_r+0x7fc>
 8017386:	aa0c      	add	r2, sp, #48	; 0x30
 8017388:	4639      	mov	r1, r7
 801738a:	4648      	mov	r0, r9
 801738c:	f7ff fd09 	bl	8016da2 <__sprint_r>
 8017390:	2800      	cmp	r0, #0
 8017392:	f040 8172 	bne.w	801767a <_vfiprintf_r+0x872>
 8017396:	ae0f      	add	r6, sp, #60	; 0x3c
 8017398:	9b00      	ldr	r3, [sp, #0]
 801739a:	1aec      	subs	r4, r5, r3
 801739c:	2c00      	cmp	r4, #0
 801739e:	dd1a      	ble.n	80173d6 <_vfiprintf_r+0x5ce>
 80173a0:	4d7a      	ldr	r5, [pc, #488]	; (801758c <_vfiprintf_r+0x784>)
 80173a2:	6035      	str	r5, [r6, #0]
 80173a4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80173a8:	2c10      	cmp	r4, #16
 80173aa:	f103 0301 	add.w	r3, r3, #1
 80173ae:	f106 0208 	add.w	r2, r6, #8
 80173b2:	f300 8129 	bgt.w	8017608 <_vfiprintf_r+0x800>
 80173b6:	6074      	str	r4, [r6, #4]
 80173b8:	2b07      	cmp	r3, #7
 80173ba:	440c      	add	r4, r1
 80173bc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80173c0:	f340 8133 	ble.w	801762a <_vfiprintf_r+0x822>
 80173c4:	aa0c      	add	r2, sp, #48	; 0x30
 80173c6:	4639      	mov	r1, r7
 80173c8:	4648      	mov	r0, r9
 80173ca:	f7ff fcea 	bl	8016da2 <__sprint_r>
 80173ce:	2800      	cmp	r0, #0
 80173d0:	f040 8153 	bne.w	801767a <_vfiprintf_r+0x872>
 80173d4:	ae0f      	add	r6, sp, #60	; 0x3c
 80173d6:	9b00      	ldr	r3, [sp, #0]
 80173d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80173da:	6073      	str	r3, [r6, #4]
 80173dc:	4418      	add	r0, r3
 80173de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173e0:	f8c6 8000 	str.w	r8, [r6]
 80173e4:	3301      	adds	r3, #1
 80173e6:	2b07      	cmp	r3, #7
 80173e8:	900e      	str	r0, [sp, #56]	; 0x38
 80173ea:	930d      	str	r3, [sp, #52]	; 0x34
 80173ec:	f300 811f 	bgt.w	801762e <_vfiprintf_r+0x826>
 80173f0:	f106 0308 	add.w	r3, r6, #8
 80173f4:	f01a 0f04 	tst.w	sl, #4
 80173f8:	f040 8121 	bne.w	801763e <_vfiprintf_r+0x836>
 80173fc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8017400:	9904      	ldr	r1, [sp, #16]
 8017402:	428a      	cmp	r2, r1
 8017404:	bfac      	ite	ge
 8017406:	189b      	addge	r3, r3, r2
 8017408:	185b      	addlt	r3, r3, r1
 801740a:	9302      	str	r3, [sp, #8]
 801740c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801740e:	b13b      	cbz	r3, 8017420 <_vfiprintf_r+0x618>
 8017410:	aa0c      	add	r2, sp, #48	; 0x30
 8017412:	4639      	mov	r1, r7
 8017414:	4648      	mov	r0, r9
 8017416:	f7ff fcc4 	bl	8016da2 <__sprint_r>
 801741a:	2800      	cmp	r0, #0
 801741c:	f040 812d 	bne.w	801767a <_vfiprintf_r+0x872>
 8017420:	2300      	movs	r3, #0
 8017422:	930d      	str	r3, [sp, #52]	; 0x34
 8017424:	ae0f      	add	r6, sp, #60	; 0x3c
 8017426:	e6c7      	b.n	80171b8 <_vfiprintf_r+0x3b0>
 8017428:	4640      	mov	r0, r8
 801742a:	f7e8 fef1 	bl	8000210 <strlen>
 801742e:	9000      	str	r0, [sp, #0]
 8017430:	e737      	b.n	80172a2 <_vfiprintf_r+0x49a>
 8017432:	f04a 0a10 	orr.w	sl, sl, #16
 8017436:	f01a 0320 	ands.w	r3, sl, #32
 801743a:	d008      	beq.n	801744e <_vfiprintf_r+0x646>
 801743c:	3407      	adds	r4, #7
 801743e:	f024 0307 	bic.w	r3, r4, #7
 8017442:	469b      	mov	fp, r3
 8017444:	685d      	ldr	r5, [r3, #4]
 8017446:	f85b 4b08 	ldr.w	r4, [fp], #8
 801744a:	2301      	movs	r3, #1
 801744c:	e6da      	b.n	8017204 <_vfiprintf_r+0x3fc>
 801744e:	46a3      	mov	fp, r4
 8017450:	f01a 0510 	ands.w	r5, sl, #16
 8017454:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017458:	d001      	beq.n	801745e <_vfiprintf_r+0x656>
 801745a:	461d      	mov	r5, r3
 801745c:	e7f5      	b.n	801744a <_vfiprintf_r+0x642>
 801745e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8017462:	d001      	beq.n	8017468 <_vfiprintf_r+0x660>
 8017464:	b2a4      	uxth	r4, r4
 8017466:	e7f0      	b.n	801744a <_vfiprintf_r+0x642>
 8017468:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801746c:	d0ed      	beq.n	801744a <_vfiprintf_r+0x642>
 801746e:	b2e4      	uxtb	r4, r4
 8017470:	e7f3      	b.n	801745a <_vfiprintf_r+0x652>
 8017472:	4a47      	ldr	r2, [pc, #284]	; (8017590 <_vfiprintf_r+0x788>)
 8017474:	e5c5      	b.n	8017002 <_vfiprintf_r+0x1fa>
 8017476:	46a3      	mov	fp, r4
 8017478:	f01a 0510 	ands.w	r5, sl, #16
 801747c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017480:	d001      	beq.n	8017486 <_vfiprintf_r+0x67e>
 8017482:	4615      	mov	r5, r2
 8017484:	e5c9      	b.n	801701a <_vfiprintf_r+0x212>
 8017486:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 801748a:	d001      	beq.n	8017490 <_vfiprintf_r+0x688>
 801748c:	b2a4      	uxth	r4, r4
 801748e:	e5c4      	b.n	801701a <_vfiprintf_r+0x212>
 8017490:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8017494:	f43f adc1 	beq.w	801701a <_vfiprintf_r+0x212>
 8017498:	b2e4      	uxtb	r4, r4
 801749a:	e7f2      	b.n	8017482 <_vfiprintf_r+0x67a>
 801749c:	2c0a      	cmp	r4, #10
 801749e:	f175 0300 	sbcs.w	r3, r5, #0
 80174a2:	d205      	bcs.n	80174b0 <_vfiprintf_r+0x6a8>
 80174a4:	3430      	adds	r4, #48	; 0x30
 80174a6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80174aa:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80174ae:	e137      	b.n	8017720 <_vfiprintf_r+0x918>
 80174b0:	ab38      	add	r3, sp, #224	; 0xe0
 80174b2:	9308      	str	r3, [sp, #32]
 80174b4:	9b04      	ldr	r3, [sp, #16]
 80174b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80174ba:	f04f 0a00 	mov.w	sl, #0
 80174be:	9309      	str	r3, [sp, #36]	; 0x24
 80174c0:	9b08      	ldr	r3, [sp, #32]
 80174c2:	220a      	movs	r2, #10
 80174c4:	f103 38ff 	add.w	r8, r3, #4294967295
 80174c8:	4620      	mov	r0, r4
 80174ca:	2300      	movs	r3, #0
 80174cc:	4629      	mov	r1, r5
 80174ce:	f7e9 fbe5 	bl	8000c9c <__aeabi_uldivmod>
 80174d2:	9b08      	ldr	r3, [sp, #32]
 80174d4:	3230      	adds	r2, #48	; 0x30
 80174d6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80174da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174dc:	f10a 0a01 	add.w	sl, sl, #1
 80174e0:	b1db      	cbz	r3, 801751a <_vfiprintf_r+0x712>
 80174e2:	9b06      	ldr	r3, [sp, #24]
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	4553      	cmp	r3, sl
 80174e8:	d117      	bne.n	801751a <_vfiprintf_r+0x712>
 80174ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80174ee:	d014      	beq.n	801751a <_vfiprintf_r+0x712>
 80174f0:	2c0a      	cmp	r4, #10
 80174f2:	f175 0300 	sbcs.w	r3, r5, #0
 80174f6:	d310      	bcc.n	801751a <_vfiprintf_r+0x712>
 80174f8:	9b07      	ldr	r3, [sp, #28]
 80174fa:	eba8 0803 	sub.w	r8, r8, r3
 80174fe:	461a      	mov	r2, r3
 8017500:	ee18 1a10 	vmov	r1, s16
 8017504:	4640      	mov	r0, r8
 8017506:	f7fe fafe 	bl	8015b06 <strncpy>
 801750a:	9b06      	ldr	r3, [sp, #24]
 801750c:	785b      	ldrb	r3, [r3, #1]
 801750e:	b1a3      	cbz	r3, 801753a <_vfiprintf_r+0x732>
 8017510:	9b06      	ldr	r3, [sp, #24]
 8017512:	3301      	adds	r3, #1
 8017514:	9306      	str	r3, [sp, #24]
 8017516:	f04f 0a00 	mov.w	sl, #0
 801751a:	2300      	movs	r3, #0
 801751c:	220a      	movs	r2, #10
 801751e:	4620      	mov	r0, r4
 8017520:	4629      	mov	r1, r5
 8017522:	f7e9 fbbb 	bl	8000c9c <__aeabi_uldivmod>
 8017526:	2c0a      	cmp	r4, #10
 8017528:	f175 0300 	sbcs.w	r3, r5, #0
 801752c:	f0c0 80f8 	bcc.w	8017720 <_vfiprintf_r+0x918>
 8017530:	4604      	mov	r4, r0
 8017532:	460d      	mov	r5, r1
 8017534:	f8cd 8020 	str.w	r8, [sp, #32]
 8017538:	e7c2      	b.n	80174c0 <_vfiprintf_r+0x6b8>
 801753a:	469a      	mov	sl, r3
 801753c:	e7ed      	b.n	801751a <_vfiprintf_r+0x712>
 801753e:	f004 030f 	and.w	r3, r4, #15
 8017542:	9a05      	ldr	r2, [sp, #20]
 8017544:	0924      	lsrs	r4, r4, #4
 8017546:	5cd3      	ldrb	r3, [r2, r3]
 8017548:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801754c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8017550:	092d      	lsrs	r5, r5, #4
 8017552:	ea54 0305 	orrs.w	r3, r4, r5
 8017556:	d1f2      	bne.n	801753e <_vfiprintf_r+0x736>
 8017558:	e0e2      	b.n	8017720 <_vfiprintf_r+0x918>
 801755a:	b933      	cbnz	r3, 801756a <_vfiprintf_r+0x762>
 801755c:	f01a 0f01 	tst.w	sl, #1
 8017560:	d003      	beq.n	801756a <_vfiprintf_r+0x762>
 8017562:	2330      	movs	r3, #48	; 0x30
 8017564:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8017568:	e79f      	b.n	80174aa <_vfiprintf_r+0x6a2>
 801756a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801756e:	e0d7      	b.n	8017720 <_vfiprintf_r+0x918>
 8017570:	2b00      	cmp	r3, #0
 8017572:	f000 80a3 	beq.w	80176bc <_vfiprintf_r+0x8b4>
 8017576:	2100      	movs	r1, #0
 8017578:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801757c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017580:	46a3      	mov	fp, r4
 8017582:	e5da      	b.n	801713a <_vfiprintf_r+0x332>
 8017584:	4605      	mov	r5, r0
 8017586:	e68c      	b.n	80172a2 <_vfiprintf_r+0x49a>
 8017588:	0801b5ce 	.word	0x0801b5ce
 801758c:	0801b5de 	.word	0x0801b5de
 8017590:	0801b345 	.word	0x0801b345
 8017594:	2010      	movs	r0, #16
 8017596:	4402      	add	r2, r0
 8017598:	2b07      	cmp	r3, #7
 801759a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801759e:	6070      	str	r0, [r6, #4]
 80175a0:	dd07      	ble.n	80175b2 <_vfiprintf_r+0x7aa>
 80175a2:	aa0c      	add	r2, sp, #48	; 0x30
 80175a4:	4639      	mov	r1, r7
 80175a6:	4648      	mov	r0, r9
 80175a8:	f7ff fbfb 	bl	8016da2 <__sprint_r>
 80175ac:	2800      	cmp	r0, #0
 80175ae:	d164      	bne.n	801767a <_vfiprintf_r+0x872>
 80175b0:	a90f      	add	r1, sp, #60	; 0x3c
 80175b2:	3c10      	subs	r4, #16
 80175b4:	460e      	mov	r6, r1
 80175b6:	e68f      	b.n	80172d8 <_vfiprintf_r+0x4d0>
 80175b8:	460e      	mov	r6, r1
 80175ba:	e6a8      	b.n	801730e <_vfiprintf_r+0x506>
 80175bc:	aa0c      	add	r2, sp, #48	; 0x30
 80175be:	4639      	mov	r1, r7
 80175c0:	4648      	mov	r0, r9
 80175c2:	f7ff fbee 	bl	8016da2 <__sprint_r>
 80175c6:	2800      	cmp	r0, #0
 80175c8:	d157      	bne.n	801767a <_vfiprintf_r+0x872>
 80175ca:	ae0f      	add	r6, sp, #60	; 0x3c
 80175cc:	e6b1      	b.n	8017332 <_vfiprintf_r+0x52a>
 80175ce:	aa0c      	add	r2, sp, #48	; 0x30
 80175d0:	4639      	mov	r1, r7
 80175d2:	4648      	mov	r0, r9
 80175d4:	f7ff fbe5 	bl	8016da2 <__sprint_r>
 80175d8:	2800      	cmp	r0, #0
 80175da:	d14e      	bne.n	801767a <_vfiprintf_r+0x872>
 80175dc:	ae0f      	add	r6, sp, #60	; 0x3c
 80175de:	e6b8      	b.n	8017352 <_vfiprintf_r+0x54a>
 80175e0:	2010      	movs	r0, #16
 80175e2:	4402      	add	r2, r0
 80175e4:	2b07      	cmp	r3, #7
 80175e6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80175ea:	6070      	str	r0, [r6, #4]
 80175ec:	dd07      	ble.n	80175fe <_vfiprintf_r+0x7f6>
 80175ee:	aa0c      	add	r2, sp, #48	; 0x30
 80175f0:	4639      	mov	r1, r7
 80175f2:	4648      	mov	r0, r9
 80175f4:	f7ff fbd5 	bl	8016da2 <__sprint_r>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d13e      	bne.n	801767a <_vfiprintf_r+0x872>
 80175fc:	a90f      	add	r1, sp, #60	; 0x3c
 80175fe:	3c10      	subs	r4, #16
 8017600:	460e      	mov	r6, r1
 8017602:	e6ae      	b.n	8017362 <_vfiprintf_r+0x55a>
 8017604:	460e      	mov	r6, r1
 8017606:	e6c7      	b.n	8017398 <_vfiprintf_r+0x590>
 8017608:	2010      	movs	r0, #16
 801760a:	4401      	add	r1, r0
 801760c:	2b07      	cmp	r3, #7
 801760e:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8017612:	6070      	str	r0, [r6, #4]
 8017614:	dd06      	ble.n	8017624 <_vfiprintf_r+0x81c>
 8017616:	aa0c      	add	r2, sp, #48	; 0x30
 8017618:	4639      	mov	r1, r7
 801761a:	4648      	mov	r0, r9
 801761c:	f7ff fbc1 	bl	8016da2 <__sprint_r>
 8017620:	bb58      	cbnz	r0, 801767a <_vfiprintf_r+0x872>
 8017622:	aa0f      	add	r2, sp, #60	; 0x3c
 8017624:	3c10      	subs	r4, #16
 8017626:	4616      	mov	r6, r2
 8017628:	e6bb      	b.n	80173a2 <_vfiprintf_r+0x59a>
 801762a:	4616      	mov	r6, r2
 801762c:	e6d3      	b.n	80173d6 <_vfiprintf_r+0x5ce>
 801762e:	aa0c      	add	r2, sp, #48	; 0x30
 8017630:	4639      	mov	r1, r7
 8017632:	4648      	mov	r0, r9
 8017634:	f7ff fbb5 	bl	8016da2 <__sprint_r>
 8017638:	b9f8      	cbnz	r0, 801767a <_vfiprintf_r+0x872>
 801763a:	ab0f      	add	r3, sp, #60	; 0x3c
 801763c:	e6da      	b.n	80173f4 <_vfiprintf_r+0x5ec>
 801763e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8017642:	1a54      	subs	r4, r2, r1
 8017644:	2c00      	cmp	r4, #0
 8017646:	f77f aed9 	ble.w	80173fc <_vfiprintf_r+0x5f4>
 801764a:	4d39      	ldr	r5, [pc, #228]	; (8017730 <_vfiprintf_r+0x928>)
 801764c:	2610      	movs	r6, #16
 801764e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017652:	2c10      	cmp	r4, #16
 8017654:	f102 0201 	add.w	r2, r2, #1
 8017658:	601d      	str	r5, [r3, #0]
 801765a:	dc1d      	bgt.n	8017698 <_vfiprintf_r+0x890>
 801765c:	605c      	str	r4, [r3, #4]
 801765e:	2a07      	cmp	r2, #7
 8017660:	440c      	add	r4, r1
 8017662:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8017666:	f77f aec9 	ble.w	80173fc <_vfiprintf_r+0x5f4>
 801766a:	aa0c      	add	r2, sp, #48	; 0x30
 801766c:	4639      	mov	r1, r7
 801766e:	4648      	mov	r0, r9
 8017670:	f7ff fb97 	bl	8016da2 <__sprint_r>
 8017674:	2800      	cmp	r0, #0
 8017676:	f43f aec1 	beq.w	80173fc <_vfiprintf_r+0x5f4>
 801767a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801767c:	07d9      	lsls	r1, r3, #31
 801767e:	d405      	bmi.n	801768c <_vfiprintf_r+0x884>
 8017680:	89bb      	ldrh	r3, [r7, #12]
 8017682:	059a      	lsls	r2, r3, #22
 8017684:	d402      	bmi.n	801768c <_vfiprintf_r+0x884>
 8017686:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017688:	f7fd fb81 	bl	8014d8e <__retarget_lock_release_recursive>
 801768c:	89bb      	ldrh	r3, [r7, #12]
 801768e:	065b      	lsls	r3, r3, #25
 8017690:	f57f abed 	bpl.w	8016e6e <_vfiprintf_r+0x66>
 8017694:	f7ff bbe8 	b.w	8016e68 <_vfiprintf_r+0x60>
 8017698:	3110      	adds	r1, #16
 801769a:	2a07      	cmp	r2, #7
 801769c:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80176a0:	605e      	str	r6, [r3, #4]
 80176a2:	dc02      	bgt.n	80176aa <_vfiprintf_r+0x8a2>
 80176a4:	3308      	adds	r3, #8
 80176a6:	3c10      	subs	r4, #16
 80176a8:	e7d1      	b.n	801764e <_vfiprintf_r+0x846>
 80176aa:	aa0c      	add	r2, sp, #48	; 0x30
 80176ac:	4639      	mov	r1, r7
 80176ae:	4648      	mov	r0, r9
 80176b0:	f7ff fb77 	bl	8016da2 <__sprint_r>
 80176b4:	2800      	cmp	r0, #0
 80176b6:	d1e0      	bne.n	801767a <_vfiprintf_r+0x872>
 80176b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80176ba:	e7f4      	b.n	80176a6 <_vfiprintf_r+0x89e>
 80176bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176be:	b913      	cbnz	r3, 80176c6 <_vfiprintf_r+0x8be>
 80176c0:	2300      	movs	r3, #0
 80176c2:	930d      	str	r3, [sp, #52]	; 0x34
 80176c4:	e7d9      	b.n	801767a <_vfiprintf_r+0x872>
 80176c6:	aa0c      	add	r2, sp, #48	; 0x30
 80176c8:	4639      	mov	r1, r7
 80176ca:	4648      	mov	r0, r9
 80176cc:	f7ff fb69 	bl	8016da2 <__sprint_r>
 80176d0:	2800      	cmp	r0, #0
 80176d2:	d0f5      	beq.n	80176c0 <_vfiprintf_r+0x8b8>
 80176d4:	e7d1      	b.n	801767a <_vfiprintf_r+0x872>
 80176d6:	ea54 0205 	orrs.w	r2, r4, r5
 80176da:	f8cd a010 	str.w	sl, [sp, #16]
 80176de:	f43f ada3 	beq.w	8017228 <_vfiprintf_r+0x420>
 80176e2:	2b01      	cmp	r3, #1
 80176e4:	f43f aeda 	beq.w	801749c <_vfiprintf_r+0x694>
 80176e8:	2b02      	cmp	r3, #2
 80176ea:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80176ee:	f43f af26 	beq.w	801753e <_vfiprintf_r+0x736>
 80176f2:	f004 0307 	and.w	r3, r4, #7
 80176f6:	08e4      	lsrs	r4, r4, #3
 80176f8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80176fc:	08ed      	lsrs	r5, r5, #3
 80176fe:	3330      	adds	r3, #48	; 0x30
 8017700:	ea54 0105 	orrs.w	r1, r4, r5
 8017704:	4642      	mov	r2, r8
 8017706:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801770a:	d1f2      	bne.n	80176f2 <_vfiprintf_r+0x8ea>
 801770c:	9904      	ldr	r1, [sp, #16]
 801770e:	07c8      	lsls	r0, r1, #31
 8017710:	d506      	bpl.n	8017720 <_vfiprintf_r+0x918>
 8017712:	2b30      	cmp	r3, #48	; 0x30
 8017714:	d004      	beq.n	8017720 <_vfiprintf_r+0x918>
 8017716:	2330      	movs	r3, #48	; 0x30
 8017718:	f808 3c01 	strb.w	r3, [r8, #-1]
 801771c:	f1a2 0802 	sub.w	r8, r2, #2
 8017720:	ab38      	add	r3, sp, #224	; 0xe0
 8017722:	eba3 0308 	sub.w	r3, r3, r8
 8017726:	9d00      	ldr	r5, [sp, #0]
 8017728:	f8dd a010 	ldr.w	sl, [sp, #16]
 801772c:	9300      	str	r3, [sp, #0]
 801772e:	e5b8      	b.n	80172a2 <_vfiprintf_r+0x49a>
 8017730:	0801b5ce 	.word	0x0801b5ce

08017734 <__sbprintf>:
 8017734:	b570      	push	{r4, r5, r6, lr}
 8017736:	460c      	mov	r4, r1
 8017738:	8989      	ldrh	r1, [r1, #12]
 801773a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801773e:	f021 0102 	bic.w	r1, r1, #2
 8017742:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017746:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8017748:	911b      	str	r1, [sp, #108]	; 0x6c
 801774a:	89e1      	ldrh	r1, [r4, #14]
 801774c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017750:	69e1      	ldr	r1, [r4, #28]
 8017752:	9109      	str	r1, [sp, #36]	; 0x24
 8017754:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017756:	910b      	str	r1, [sp, #44]	; 0x2c
 8017758:	a91c      	add	r1, sp, #112	; 0x70
 801775a:	9102      	str	r1, [sp, #8]
 801775c:	9106      	str	r1, [sp, #24]
 801775e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017762:	4606      	mov	r6, r0
 8017764:	9104      	str	r1, [sp, #16]
 8017766:	9107      	str	r1, [sp, #28]
 8017768:	a818      	add	r0, sp, #96	; 0x60
 801776a:	2100      	movs	r1, #0
 801776c:	e9cd 3200 	strd	r3, r2, [sp]
 8017770:	9108      	str	r1, [sp, #32]
 8017772:	f7fd fb07 	bl	8014d84 <__retarget_lock_init_recursive>
 8017776:	e9dd 3200 	ldrd	r3, r2, [sp]
 801777a:	a902      	add	r1, sp, #8
 801777c:	4630      	mov	r0, r6
 801777e:	f7ff fb43 	bl	8016e08 <_vfiprintf_r>
 8017782:	1e05      	subs	r5, r0, #0
 8017784:	db07      	blt.n	8017796 <__sbprintf+0x62>
 8017786:	a902      	add	r1, sp, #8
 8017788:	4630      	mov	r0, r6
 801778a:	f7fd f827 	bl	80147dc <_fflush_r>
 801778e:	2800      	cmp	r0, #0
 8017790:	bf18      	it	ne
 8017792:	f04f 35ff 	movne.w	r5, #4294967295
 8017796:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801779a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801779c:	065b      	lsls	r3, r3, #25
 801779e:	bf42      	ittt	mi
 80177a0:	89a3      	ldrhmi	r3, [r4, #12]
 80177a2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80177a6:	81a3      	strhmi	r3, [r4, #12]
 80177a8:	f7fd faed 	bl	8014d86 <__retarget_lock_close_recursive>
 80177ac:	4628      	mov	r0, r5
 80177ae:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80177b2:	bd70      	pop	{r4, r5, r6, pc}

080177b4 <_write_r>:
 80177b4:	b538      	push	{r3, r4, r5, lr}
 80177b6:	4d07      	ldr	r5, [pc, #28]	; (80177d4 <_write_r+0x20>)
 80177b8:	4604      	mov	r4, r0
 80177ba:	4608      	mov	r0, r1
 80177bc:	4611      	mov	r1, r2
 80177be:	2200      	movs	r2, #0
 80177c0:	602a      	str	r2, [r5, #0]
 80177c2:	461a      	mov	r2, r3
 80177c4:	f7ea f921 	bl	8001a0a <_write>
 80177c8:	1c43      	adds	r3, r0, #1
 80177ca:	d102      	bne.n	80177d2 <_write_r+0x1e>
 80177cc:	682b      	ldr	r3, [r5, #0]
 80177ce:	b103      	cbz	r3, 80177d2 <_write_r+0x1e>
 80177d0:	6023      	str	r3, [r4, #0]
 80177d2:	bd38      	pop	{r3, r4, r5, pc}
 80177d4:	200073e4 	.word	0x200073e4

080177d8 <__register_exitproc>:
 80177d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177dc:	f8df a078 	ldr.w	sl, [pc, #120]	; 8017858 <__register_exitproc+0x80>
 80177e0:	4606      	mov	r6, r0
 80177e2:	f8da 0000 	ldr.w	r0, [sl]
 80177e6:	4698      	mov	r8, r3
 80177e8:	460f      	mov	r7, r1
 80177ea:	4691      	mov	r9, r2
 80177ec:	f7fd facd 	bl	8014d8a <__retarget_lock_acquire_recursive>
 80177f0:	4b18      	ldr	r3, [pc, #96]	; (8017854 <__register_exitproc+0x7c>)
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80177f8:	b91c      	cbnz	r4, 8017802 <__register_exitproc+0x2a>
 80177fa:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80177fe:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8017802:	6865      	ldr	r5, [r4, #4]
 8017804:	f8da 0000 	ldr.w	r0, [sl]
 8017808:	2d1f      	cmp	r5, #31
 801780a:	dd05      	ble.n	8017818 <__register_exitproc+0x40>
 801780c:	f7fd fabf 	bl	8014d8e <__retarget_lock_release_recursive>
 8017810:	f04f 30ff 	mov.w	r0, #4294967295
 8017814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017818:	b19e      	cbz	r6, 8017842 <__register_exitproc+0x6a>
 801781a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801781e:	2201      	movs	r2, #1
 8017820:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8017824:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8017828:	40aa      	lsls	r2, r5
 801782a:	4313      	orrs	r3, r2
 801782c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8017830:	2e02      	cmp	r6, #2
 8017832:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8017836:	bf02      	ittt	eq
 8017838:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801783c:	4313      	orreq	r3, r2
 801783e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8017842:	1c6b      	adds	r3, r5, #1
 8017844:	3502      	adds	r5, #2
 8017846:	6063      	str	r3, [r4, #4]
 8017848:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801784c:	f7fd fa9f 	bl	8014d8e <__retarget_lock_release_recursive>
 8017850:	2000      	movs	r0, #0
 8017852:	e7df      	b.n	8017814 <__register_exitproc+0x3c>
 8017854:	0801b260 	.word	0x0801b260
 8017858:	20000450 	.word	0x20000450

0801785c <__assert_func>:
 801785c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801785e:	4614      	mov	r4, r2
 8017860:	461a      	mov	r2, r3
 8017862:	4b09      	ldr	r3, [pc, #36]	; (8017888 <__assert_func+0x2c>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	4605      	mov	r5, r0
 8017868:	68d8      	ldr	r0, [r3, #12]
 801786a:	b14c      	cbz	r4, 8017880 <__assert_func+0x24>
 801786c:	4b07      	ldr	r3, [pc, #28]	; (801788c <__assert_func+0x30>)
 801786e:	9100      	str	r1, [sp, #0]
 8017870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017874:	4906      	ldr	r1, [pc, #24]	; (8017890 <__assert_func+0x34>)
 8017876:	462b      	mov	r3, r5
 8017878:	f000 f8b8 	bl	80179ec <fiprintf>
 801787c:	f000 fe87 	bl	801858e <abort>
 8017880:	4b04      	ldr	r3, [pc, #16]	; (8017894 <__assert_func+0x38>)
 8017882:	461c      	mov	r4, r3
 8017884:	e7f3      	b.n	801786e <__assert_func+0x12>
 8017886:	bf00      	nop
 8017888:	2000001c 	.word	0x2000001c
 801788c:	0801b5ee 	.word	0x0801b5ee
 8017890:	0801b5fb 	.word	0x0801b5fb
 8017894:	0801b629 	.word	0x0801b629

08017898 <_calloc_r>:
 8017898:	b538      	push	{r3, r4, r5, lr}
 801789a:	fba1 1502 	umull	r1, r5, r1, r2
 801789e:	b92d      	cbnz	r5, 80178ac <_calloc_r+0x14>
 80178a0:	f7fd faf2 	bl	8014e88 <_malloc_r>
 80178a4:	4604      	mov	r4, r0
 80178a6:	b938      	cbnz	r0, 80178b8 <_calloc_r+0x20>
 80178a8:	4620      	mov	r0, r4
 80178aa:	bd38      	pop	{r3, r4, r5, pc}
 80178ac:	f7fc ff02 	bl	80146b4 <__errno>
 80178b0:	230c      	movs	r3, #12
 80178b2:	6003      	str	r3, [r0, #0]
 80178b4:	2400      	movs	r4, #0
 80178b6:	e7f7      	b.n	80178a8 <_calloc_r+0x10>
 80178b8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80178bc:	f022 0203 	bic.w	r2, r2, #3
 80178c0:	3a04      	subs	r2, #4
 80178c2:	2a24      	cmp	r2, #36	; 0x24
 80178c4:	d819      	bhi.n	80178fa <_calloc_r+0x62>
 80178c6:	2a13      	cmp	r2, #19
 80178c8:	d915      	bls.n	80178f6 <_calloc_r+0x5e>
 80178ca:	2a1b      	cmp	r2, #27
 80178cc:	e9c0 5500 	strd	r5, r5, [r0]
 80178d0:	d806      	bhi.n	80178e0 <_calloc_r+0x48>
 80178d2:	f100 0308 	add.w	r3, r0, #8
 80178d6:	2200      	movs	r2, #0
 80178d8:	e9c3 2200 	strd	r2, r2, [r3]
 80178dc:	609a      	str	r2, [r3, #8]
 80178de:	e7e3      	b.n	80178a8 <_calloc_r+0x10>
 80178e0:	2a24      	cmp	r2, #36	; 0x24
 80178e2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80178e6:	bf11      	iteee	ne
 80178e8:	f100 0310 	addne.w	r3, r0, #16
 80178ec:	6105      	streq	r5, [r0, #16]
 80178ee:	f100 0318 	addeq.w	r3, r0, #24
 80178f2:	6145      	streq	r5, [r0, #20]
 80178f4:	e7ef      	b.n	80178d6 <_calloc_r+0x3e>
 80178f6:	4603      	mov	r3, r0
 80178f8:	e7ed      	b.n	80178d6 <_calloc_r+0x3e>
 80178fa:	4629      	mov	r1, r5
 80178fc:	f7f8 fdfe 	bl	80104fc <memset>
 8017900:	e7d2      	b.n	80178a8 <_calloc_r+0x10>
	...

08017904 <_close_r>:
 8017904:	b538      	push	{r3, r4, r5, lr}
 8017906:	4d06      	ldr	r5, [pc, #24]	; (8017920 <_close_r+0x1c>)
 8017908:	2300      	movs	r3, #0
 801790a:	4604      	mov	r4, r0
 801790c:	4608      	mov	r0, r1
 801790e:	602b      	str	r3, [r5, #0]
 8017910:	f7ea f897 	bl	8001a42 <_close>
 8017914:	1c43      	adds	r3, r0, #1
 8017916:	d102      	bne.n	801791e <_close_r+0x1a>
 8017918:	682b      	ldr	r3, [r5, #0]
 801791a:	b103      	cbz	r3, 801791e <_close_r+0x1a>
 801791c:	6023      	str	r3, [r4, #0]
 801791e:	bd38      	pop	{r3, r4, r5, pc}
 8017920:	200073e4 	.word	0x200073e4

08017924 <__env_lock>:
 8017924:	4801      	ldr	r0, [pc, #4]	; (801792c <__env_lock+0x8>)
 8017926:	f7fd ba30 	b.w	8014d8a <__retarget_lock_acquire_recursive>
 801792a:	bf00      	nop
 801792c:	2000740d 	.word	0x2000740d

08017930 <__env_unlock>:
 8017930:	4801      	ldr	r0, [pc, #4]	; (8017938 <__env_unlock+0x8>)
 8017932:	f7fd ba2c 	b.w	8014d8e <__retarget_lock_release_recursive>
 8017936:	bf00      	nop
 8017938:	2000740d 	.word	0x2000740d

0801793c <_fclose_r>:
 801793c:	b570      	push	{r4, r5, r6, lr}
 801793e:	4606      	mov	r6, r0
 8017940:	460c      	mov	r4, r1
 8017942:	b911      	cbnz	r1, 801794a <_fclose_r+0xe>
 8017944:	2500      	movs	r5, #0
 8017946:	4628      	mov	r0, r5
 8017948:	bd70      	pop	{r4, r5, r6, pc}
 801794a:	b118      	cbz	r0, 8017954 <_fclose_r+0x18>
 801794c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801794e:	b90b      	cbnz	r3, 8017954 <_fclose_r+0x18>
 8017950:	f7fc ffb0 	bl	80148b4 <__sinit>
 8017954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017956:	07d8      	lsls	r0, r3, #31
 8017958:	d405      	bmi.n	8017966 <_fclose_r+0x2a>
 801795a:	89a3      	ldrh	r3, [r4, #12]
 801795c:	0599      	lsls	r1, r3, #22
 801795e:	d402      	bmi.n	8017966 <_fclose_r+0x2a>
 8017960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017962:	f7fd fa12 	bl	8014d8a <__retarget_lock_acquire_recursive>
 8017966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801796a:	b93b      	cbnz	r3, 801797c <_fclose_r+0x40>
 801796c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801796e:	f015 0501 	ands.w	r5, r5, #1
 8017972:	d1e7      	bne.n	8017944 <_fclose_r+0x8>
 8017974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017976:	f7fd fa0a 	bl	8014d8e <__retarget_lock_release_recursive>
 801797a:	e7e4      	b.n	8017946 <_fclose_r+0xa>
 801797c:	4621      	mov	r1, r4
 801797e:	4630      	mov	r0, r6
 8017980:	f7fc fe9e 	bl	80146c0 <__sflush_r>
 8017984:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017986:	4605      	mov	r5, r0
 8017988:	b133      	cbz	r3, 8017998 <_fclose_r+0x5c>
 801798a:	69e1      	ldr	r1, [r4, #28]
 801798c:	4630      	mov	r0, r6
 801798e:	4798      	blx	r3
 8017990:	2800      	cmp	r0, #0
 8017992:	bfb8      	it	lt
 8017994:	f04f 35ff 	movlt.w	r5, #4294967295
 8017998:	89a3      	ldrh	r3, [r4, #12]
 801799a:	061a      	lsls	r2, r3, #24
 801799c:	d503      	bpl.n	80179a6 <_fclose_r+0x6a>
 801799e:	6921      	ldr	r1, [r4, #16]
 80179a0:	4630      	mov	r0, r6
 80179a2:	f7fd f817 	bl	80149d4 <_free_r>
 80179a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80179a8:	b141      	cbz	r1, 80179bc <_fclose_r+0x80>
 80179aa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80179ae:	4299      	cmp	r1, r3
 80179b0:	d002      	beq.n	80179b8 <_fclose_r+0x7c>
 80179b2:	4630      	mov	r0, r6
 80179b4:	f7fd f80e 	bl	80149d4 <_free_r>
 80179b8:	2300      	movs	r3, #0
 80179ba:	6323      	str	r3, [r4, #48]	; 0x30
 80179bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80179be:	b121      	cbz	r1, 80179ca <_fclose_r+0x8e>
 80179c0:	4630      	mov	r0, r6
 80179c2:	f7fd f807 	bl	80149d4 <_free_r>
 80179c6:	2300      	movs	r3, #0
 80179c8:	6463      	str	r3, [r4, #68]	; 0x44
 80179ca:	f7fc ff5b 	bl	8014884 <__sfp_lock_acquire>
 80179ce:	2300      	movs	r3, #0
 80179d0:	81a3      	strh	r3, [r4, #12]
 80179d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80179d4:	07db      	lsls	r3, r3, #31
 80179d6:	d402      	bmi.n	80179de <_fclose_r+0xa2>
 80179d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179da:	f7fd f9d8 	bl	8014d8e <__retarget_lock_release_recursive>
 80179de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179e0:	f7fd f9d1 	bl	8014d86 <__retarget_lock_close_recursive>
 80179e4:	f7fc ff54 	bl	8014890 <__sfp_lock_release>
 80179e8:	e7ad      	b.n	8017946 <_fclose_r+0xa>
	...

080179ec <fiprintf>:
 80179ec:	b40e      	push	{r1, r2, r3}
 80179ee:	b503      	push	{r0, r1, lr}
 80179f0:	4601      	mov	r1, r0
 80179f2:	ab03      	add	r3, sp, #12
 80179f4:	4805      	ldr	r0, [pc, #20]	; (8017a0c <fiprintf+0x20>)
 80179f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80179fa:	6800      	ldr	r0, [r0, #0]
 80179fc:	9301      	str	r3, [sp, #4]
 80179fe:	f7ff fa03 	bl	8016e08 <_vfiprintf_r>
 8017a02:	b002      	add	sp, #8
 8017a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a08:	b003      	add	sp, #12
 8017a0a:	4770      	bx	lr
 8017a0c:	2000001c 	.word	0x2000001c

08017a10 <__fputwc>:
 8017a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a14:	4680      	mov	r8, r0
 8017a16:	460e      	mov	r6, r1
 8017a18:	4615      	mov	r5, r2
 8017a1a:	f000 f9df 	bl	8017ddc <__locale_mb_cur_max>
 8017a1e:	2801      	cmp	r0, #1
 8017a20:	d11c      	bne.n	8017a5c <__fputwc+0x4c>
 8017a22:	1e73      	subs	r3, r6, #1
 8017a24:	2bfe      	cmp	r3, #254	; 0xfe
 8017a26:	d819      	bhi.n	8017a5c <__fputwc+0x4c>
 8017a28:	f88d 6004 	strb.w	r6, [sp, #4]
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	2700      	movs	r7, #0
 8017a30:	f10d 0904 	add.w	r9, sp, #4
 8017a34:	42a7      	cmp	r7, r4
 8017a36:	d020      	beq.n	8017a7a <__fputwc+0x6a>
 8017a38:	68ab      	ldr	r3, [r5, #8]
 8017a3a:	f817 1009 	ldrb.w	r1, [r7, r9]
 8017a3e:	3b01      	subs	r3, #1
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	60ab      	str	r3, [r5, #8]
 8017a44:	da04      	bge.n	8017a50 <__fputwc+0x40>
 8017a46:	69aa      	ldr	r2, [r5, #24]
 8017a48:	4293      	cmp	r3, r2
 8017a4a:	db1a      	blt.n	8017a82 <__fputwc+0x72>
 8017a4c:	290a      	cmp	r1, #10
 8017a4e:	d018      	beq.n	8017a82 <__fputwc+0x72>
 8017a50:	682b      	ldr	r3, [r5, #0]
 8017a52:	1c5a      	adds	r2, r3, #1
 8017a54:	602a      	str	r2, [r5, #0]
 8017a56:	7019      	strb	r1, [r3, #0]
 8017a58:	3701      	adds	r7, #1
 8017a5a:	e7eb      	b.n	8017a34 <__fputwc+0x24>
 8017a5c:	a901      	add	r1, sp, #4
 8017a5e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8017a62:	4632      	mov	r2, r6
 8017a64:	4640      	mov	r0, r8
 8017a66:	f000 fd6f 	bl	8018548 <_wcrtomb_r>
 8017a6a:	1c41      	adds	r1, r0, #1
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	d1de      	bne.n	8017a2e <__fputwc+0x1e>
 8017a70:	89ab      	ldrh	r3, [r5, #12]
 8017a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a76:	81ab      	strh	r3, [r5, #12]
 8017a78:	4606      	mov	r6, r0
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	b003      	add	sp, #12
 8017a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a82:	462a      	mov	r2, r5
 8017a84:	4640      	mov	r0, r8
 8017a86:	f000 fd15 	bl	80184b4 <__swbuf_r>
 8017a8a:	1c42      	adds	r2, r0, #1
 8017a8c:	d1e4      	bne.n	8017a58 <__fputwc+0x48>
 8017a8e:	4606      	mov	r6, r0
 8017a90:	e7f3      	b.n	8017a7a <__fputwc+0x6a>

08017a92 <_fputwc_r>:
 8017a92:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8017a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a96:	4614      	mov	r4, r2
 8017a98:	07da      	lsls	r2, r3, #31
 8017a9a:	4605      	mov	r5, r0
 8017a9c:	d407      	bmi.n	8017aae <_fputwc_r+0x1c>
 8017a9e:	89a3      	ldrh	r3, [r4, #12]
 8017aa0:	059b      	lsls	r3, r3, #22
 8017aa2:	d404      	bmi.n	8017aae <_fputwc_r+0x1c>
 8017aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017aa6:	9101      	str	r1, [sp, #4]
 8017aa8:	f7fd f96f 	bl	8014d8a <__retarget_lock_acquire_recursive>
 8017aac:	9901      	ldr	r1, [sp, #4]
 8017aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ab2:	0498      	lsls	r0, r3, #18
 8017ab4:	d406      	bmi.n	8017ac4 <_fputwc_r+0x32>
 8017ab6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017aba:	81a3      	strh	r3, [r4, #12]
 8017abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017ac2:	6663      	str	r3, [r4, #100]	; 0x64
 8017ac4:	4622      	mov	r2, r4
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	f7ff ffa2 	bl	8017a10 <__fputwc>
 8017acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ace:	07da      	lsls	r2, r3, #31
 8017ad0:	4605      	mov	r5, r0
 8017ad2:	d405      	bmi.n	8017ae0 <_fputwc_r+0x4e>
 8017ad4:	89a3      	ldrh	r3, [r4, #12]
 8017ad6:	059b      	lsls	r3, r3, #22
 8017ad8:	d402      	bmi.n	8017ae0 <_fputwc_r+0x4e>
 8017ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017adc:	f7fd f957 	bl	8014d8e <__retarget_lock_release_recursive>
 8017ae0:	4628      	mov	r0, r5
 8017ae2:	b003      	add	sp, #12
 8017ae4:	bd30      	pop	{r4, r5, pc}
	...

08017ae8 <_fstat_r>:
 8017ae8:	b538      	push	{r3, r4, r5, lr}
 8017aea:	4d07      	ldr	r5, [pc, #28]	; (8017b08 <_fstat_r+0x20>)
 8017aec:	2300      	movs	r3, #0
 8017aee:	4604      	mov	r4, r0
 8017af0:	4608      	mov	r0, r1
 8017af2:	4611      	mov	r1, r2
 8017af4:	602b      	str	r3, [r5, #0]
 8017af6:	f7e9 ffb0 	bl	8001a5a <_fstat>
 8017afa:	1c43      	adds	r3, r0, #1
 8017afc:	d102      	bne.n	8017b04 <_fstat_r+0x1c>
 8017afe:	682b      	ldr	r3, [r5, #0]
 8017b00:	b103      	cbz	r3, 8017b04 <_fstat_r+0x1c>
 8017b02:	6023      	str	r3, [r4, #0]
 8017b04:	bd38      	pop	{r3, r4, r5, pc}
 8017b06:	bf00      	nop
 8017b08:	200073e4 	.word	0x200073e4

08017b0c <__sfvwrite_r>:
 8017b0c:	6893      	ldr	r3, [r2, #8]
 8017b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b12:	4606      	mov	r6, r0
 8017b14:	460c      	mov	r4, r1
 8017b16:	4690      	mov	r8, r2
 8017b18:	b91b      	cbnz	r3, 8017b22 <__sfvwrite_r+0x16>
 8017b1a:	2000      	movs	r0, #0
 8017b1c:	b003      	add	sp, #12
 8017b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b22:	898b      	ldrh	r3, [r1, #12]
 8017b24:	0718      	lsls	r0, r3, #28
 8017b26:	d550      	bpl.n	8017bca <__sfvwrite_r+0xbe>
 8017b28:	690b      	ldr	r3, [r1, #16]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d04d      	beq.n	8017bca <__sfvwrite_r+0xbe>
 8017b2e:	89a3      	ldrh	r3, [r4, #12]
 8017b30:	f8d8 7000 	ldr.w	r7, [r8]
 8017b34:	f013 0902 	ands.w	r9, r3, #2
 8017b38:	d16c      	bne.n	8017c14 <__sfvwrite_r+0x108>
 8017b3a:	f013 0301 	ands.w	r3, r3, #1
 8017b3e:	f000 809c 	beq.w	8017c7a <__sfvwrite_r+0x16e>
 8017b42:	4648      	mov	r0, r9
 8017b44:	46ca      	mov	sl, r9
 8017b46:	46cb      	mov	fp, r9
 8017b48:	f1bb 0f00 	cmp.w	fp, #0
 8017b4c:	f000 8103 	beq.w	8017d56 <__sfvwrite_r+0x24a>
 8017b50:	b950      	cbnz	r0, 8017b68 <__sfvwrite_r+0x5c>
 8017b52:	465a      	mov	r2, fp
 8017b54:	210a      	movs	r1, #10
 8017b56:	4650      	mov	r0, sl
 8017b58:	f7e8 fb62 	bl	8000220 <memchr>
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	f000 80ff 	beq.w	8017d60 <__sfvwrite_r+0x254>
 8017b62:	3001      	adds	r0, #1
 8017b64:	eba0 090a 	sub.w	r9, r0, sl
 8017b68:	6820      	ldr	r0, [r4, #0]
 8017b6a:	6921      	ldr	r1, [r4, #16]
 8017b6c:	6963      	ldr	r3, [r4, #20]
 8017b6e:	45d9      	cmp	r9, fp
 8017b70:	464a      	mov	r2, r9
 8017b72:	bf28      	it	cs
 8017b74:	465a      	movcs	r2, fp
 8017b76:	4288      	cmp	r0, r1
 8017b78:	f240 80f5 	bls.w	8017d66 <__sfvwrite_r+0x25a>
 8017b7c:	68a5      	ldr	r5, [r4, #8]
 8017b7e:	441d      	add	r5, r3
 8017b80:	42aa      	cmp	r2, r5
 8017b82:	f340 80f0 	ble.w	8017d66 <__sfvwrite_r+0x25a>
 8017b86:	4651      	mov	r1, sl
 8017b88:	462a      	mov	r2, r5
 8017b8a:	f7f8 fc9d 	bl	80104c8 <memmove>
 8017b8e:	6823      	ldr	r3, [r4, #0]
 8017b90:	442b      	add	r3, r5
 8017b92:	6023      	str	r3, [r4, #0]
 8017b94:	4621      	mov	r1, r4
 8017b96:	4630      	mov	r0, r6
 8017b98:	f7fc fe20 	bl	80147dc <_fflush_r>
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	d167      	bne.n	8017c70 <__sfvwrite_r+0x164>
 8017ba0:	ebb9 0905 	subs.w	r9, r9, r5
 8017ba4:	f040 80f7 	bne.w	8017d96 <__sfvwrite_r+0x28a>
 8017ba8:	4621      	mov	r1, r4
 8017baa:	4630      	mov	r0, r6
 8017bac:	f7fc fe16 	bl	80147dc <_fflush_r>
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d15d      	bne.n	8017c70 <__sfvwrite_r+0x164>
 8017bb4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8017bb8:	44aa      	add	sl, r5
 8017bba:	ebab 0b05 	sub.w	fp, fp, r5
 8017bbe:	1b55      	subs	r5, r2, r5
 8017bc0:	f8c8 5008 	str.w	r5, [r8, #8]
 8017bc4:	2d00      	cmp	r5, #0
 8017bc6:	d1bf      	bne.n	8017b48 <__sfvwrite_r+0x3c>
 8017bc8:	e7a7      	b.n	8017b1a <__sfvwrite_r+0xe>
 8017bca:	4621      	mov	r1, r4
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f7fb fe91 	bl	80138f4 <__swsetup_r>
 8017bd2:	2800      	cmp	r0, #0
 8017bd4:	d0ab      	beq.n	8017b2e <__sfvwrite_r+0x22>
 8017bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8017bda:	e79f      	b.n	8017b1c <__sfvwrite_r+0x10>
 8017bdc:	e9d7 b900 	ldrd	fp, r9, [r7]
 8017be0:	3708      	adds	r7, #8
 8017be2:	f1b9 0f00 	cmp.w	r9, #0
 8017be6:	d0f9      	beq.n	8017bdc <__sfvwrite_r+0xd0>
 8017be8:	45d1      	cmp	r9, sl
 8017bea:	464b      	mov	r3, r9
 8017bec:	69e1      	ldr	r1, [r4, #28]
 8017bee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017bf0:	bf28      	it	cs
 8017bf2:	4653      	movcs	r3, sl
 8017bf4:	465a      	mov	r2, fp
 8017bf6:	4630      	mov	r0, r6
 8017bf8:	47a8      	blx	r5
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	dd38      	ble.n	8017c70 <__sfvwrite_r+0x164>
 8017bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c02:	4483      	add	fp, r0
 8017c04:	eba9 0900 	sub.w	r9, r9, r0
 8017c08:	1a18      	subs	r0, r3, r0
 8017c0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d1e7      	bne.n	8017be2 <__sfvwrite_r+0xd6>
 8017c12:	e782      	b.n	8017b1a <__sfvwrite_r+0xe>
 8017c14:	f04f 0b00 	mov.w	fp, #0
 8017c18:	f8df a180 	ldr.w	sl, [pc, #384]	; 8017d9c <__sfvwrite_r+0x290>
 8017c1c:	46d9      	mov	r9, fp
 8017c1e:	e7e0      	b.n	8017be2 <__sfvwrite_r+0xd6>
 8017c20:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8017c24:	3708      	adds	r7, #8
 8017c26:	f1ba 0f00 	cmp.w	sl, #0
 8017c2a:	d0f9      	beq.n	8017c20 <__sfvwrite_r+0x114>
 8017c2c:	89a3      	ldrh	r3, [r4, #12]
 8017c2e:	6820      	ldr	r0, [r4, #0]
 8017c30:	68a2      	ldr	r2, [r4, #8]
 8017c32:	0599      	lsls	r1, r3, #22
 8017c34:	d563      	bpl.n	8017cfe <__sfvwrite_r+0x1f2>
 8017c36:	4552      	cmp	r2, sl
 8017c38:	d836      	bhi.n	8017ca8 <__sfvwrite_r+0x19c>
 8017c3a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8017c3e:	d033      	beq.n	8017ca8 <__sfvwrite_r+0x19c>
 8017c40:	6921      	ldr	r1, [r4, #16]
 8017c42:	6965      	ldr	r5, [r4, #20]
 8017c44:	eba0 0b01 	sub.w	fp, r0, r1
 8017c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017c50:	f10b 0201 	add.w	r2, fp, #1
 8017c54:	106d      	asrs	r5, r5, #1
 8017c56:	4452      	add	r2, sl
 8017c58:	4295      	cmp	r5, r2
 8017c5a:	bf38      	it	cc
 8017c5c:	4615      	movcc	r5, r2
 8017c5e:	055b      	lsls	r3, r3, #21
 8017c60:	d53d      	bpl.n	8017cde <__sfvwrite_r+0x1d2>
 8017c62:	4629      	mov	r1, r5
 8017c64:	4630      	mov	r0, r6
 8017c66:	f7fd f90f 	bl	8014e88 <_malloc_r>
 8017c6a:	b948      	cbnz	r0, 8017c80 <__sfvwrite_r+0x174>
 8017c6c:	230c      	movs	r3, #12
 8017c6e:	6033      	str	r3, [r6, #0]
 8017c70:	89a3      	ldrh	r3, [r4, #12]
 8017c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c76:	81a3      	strh	r3, [r4, #12]
 8017c78:	e7ad      	b.n	8017bd6 <__sfvwrite_r+0xca>
 8017c7a:	4699      	mov	r9, r3
 8017c7c:	469a      	mov	sl, r3
 8017c7e:	e7d2      	b.n	8017c26 <__sfvwrite_r+0x11a>
 8017c80:	465a      	mov	r2, fp
 8017c82:	6921      	ldr	r1, [r4, #16]
 8017c84:	9001      	str	r0, [sp, #4]
 8017c86:	f7f8 fc11 	bl	80104ac <memcpy>
 8017c8a:	89a2      	ldrh	r2, [r4, #12]
 8017c8c:	9b01      	ldr	r3, [sp, #4]
 8017c8e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8017c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017c96:	81a2      	strh	r2, [r4, #12]
 8017c98:	6123      	str	r3, [r4, #16]
 8017c9a:	6165      	str	r5, [r4, #20]
 8017c9c:	445b      	add	r3, fp
 8017c9e:	eba5 050b 	sub.w	r5, r5, fp
 8017ca2:	6023      	str	r3, [r4, #0]
 8017ca4:	4652      	mov	r2, sl
 8017ca6:	60a5      	str	r5, [r4, #8]
 8017ca8:	4552      	cmp	r2, sl
 8017caa:	bf28      	it	cs
 8017cac:	4652      	movcs	r2, sl
 8017cae:	6820      	ldr	r0, [r4, #0]
 8017cb0:	9201      	str	r2, [sp, #4]
 8017cb2:	4649      	mov	r1, r9
 8017cb4:	f7f8 fc08 	bl	80104c8 <memmove>
 8017cb8:	68a3      	ldr	r3, [r4, #8]
 8017cba:	9a01      	ldr	r2, [sp, #4]
 8017cbc:	1a9b      	subs	r3, r3, r2
 8017cbe:	60a3      	str	r3, [r4, #8]
 8017cc0:	6823      	ldr	r3, [r4, #0]
 8017cc2:	441a      	add	r2, r3
 8017cc4:	4655      	mov	r5, sl
 8017cc6:	6022      	str	r2, [r4, #0]
 8017cc8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017ccc:	44a9      	add	r9, r5
 8017cce:	ebaa 0a05 	sub.w	sl, sl, r5
 8017cd2:	1b45      	subs	r5, r0, r5
 8017cd4:	f8c8 5008 	str.w	r5, [r8, #8]
 8017cd8:	2d00      	cmp	r5, #0
 8017cda:	d1a4      	bne.n	8017c26 <__sfvwrite_r+0x11a>
 8017cdc:	e71d      	b.n	8017b1a <__sfvwrite_r+0xe>
 8017cde:	462a      	mov	r2, r5
 8017ce0:	4630      	mov	r0, r6
 8017ce2:	f000 f8d9 	bl	8017e98 <_realloc_r>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	2800      	cmp	r0, #0
 8017cea:	d1d5      	bne.n	8017c98 <__sfvwrite_r+0x18c>
 8017cec:	6921      	ldr	r1, [r4, #16]
 8017cee:	4630      	mov	r0, r6
 8017cf0:	f7fc fe70 	bl	80149d4 <_free_r>
 8017cf4:	89a3      	ldrh	r3, [r4, #12]
 8017cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017cfa:	81a3      	strh	r3, [r4, #12]
 8017cfc:	e7b6      	b.n	8017c6c <__sfvwrite_r+0x160>
 8017cfe:	6923      	ldr	r3, [r4, #16]
 8017d00:	4283      	cmp	r3, r0
 8017d02:	d302      	bcc.n	8017d0a <__sfvwrite_r+0x1fe>
 8017d04:	6961      	ldr	r1, [r4, #20]
 8017d06:	4551      	cmp	r1, sl
 8017d08:	d915      	bls.n	8017d36 <__sfvwrite_r+0x22a>
 8017d0a:	4552      	cmp	r2, sl
 8017d0c:	bf28      	it	cs
 8017d0e:	4652      	movcs	r2, sl
 8017d10:	4649      	mov	r1, r9
 8017d12:	4615      	mov	r5, r2
 8017d14:	f7f8 fbd8 	bl	80104c8 <memmove>
 8017d18:	68a3      	ldr	r3, [r4, #8]
 8017d1a:	6822      	ldr	r2, [r4, #0]
 8017d1c:	1b5b      	subs	r3, r3, r5
 8017d1e:	442a      	add	r2, r5
 8017d20:	60a3      	str	r3, [r4, #8]
 8017d22:	6022      	str	r2, [r4, #0]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d1cf      	bne.n	8017cc8 <__sfvwrite_r+0x1bc>
 8017d28:	4621      	mov	r1, r4
 8017d2a:	4630      	mov	r0, r6
 8017d2c:	f7fc fd56 	bl	80147dc <_fflush_r>
 8017d30:	2800      	cmp	r0, #0
 8017d32:	d0c9      	beq.n	8017cc8 <__sfvwrite_r+0x1bc>
 8017d34:	e79c      	b.n	8017c70 <__sfvwrite_r+0x164>
 8017d36:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017d3a:	459a      	cmp	sl, r3
 8017d3c:	bf38      	it	cc
 8017d3e:	4653      	movcc	r3, sl
 8017d40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017d42:	fb93 f3f1 	sdiv	r3, r3, r1
 8017d46:	464a      	mov	r2, r9
 8017d48:	434b      	muls	r3, r1
 8017d4a:	4630      	mov	r0, r6
 8017d4c:	69e1      	ldr	r1, [r4, #28]
 8017d4e:	47a8      	blx	r5
 8017d50:	1e05      	subs	r5, r0, #0
 8017d52:	dcb9      	bgt.n	8017cc8 <__sfvwrite_r+0x1bc>
 8017d54:	e78c      	b.n	8017c70 <__sfvwrite_r+0x164>
 8017d56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8017d5a:	2000      	movs	r0, #0
 8017d5c:	3708      	adds	r7, #8
 8017d5e:	e6f3      	b.n	8017b48 <__sfvwrite_r+0x3c>
 8017d60:	f10b 0901 	add.w	r9, fp, #1
 8017d64:	e700      	b.n	8017b68 <__sfvwrite_r+0x5c>
 8017d66:	4293      	cmp	r3, r2
 8017d68:	dc08      	bgt.n	8017d7c <__sfvwrite_r+0x270>
 8017d6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017d6c:	69e1      	ldr	r1, [r4, #28]
 8017d6e:	4652      	mov	r2, sl
 8017d70:	4630      	mov	r0, r6
 8017d72:	47a8      	blx	r5
 8017d74:	1e05      	subs	r5, r0, #0
 8017d76:	f73f af13 	bgt.w	8017ba0 <__sfvwrite_r+0x94>
 8017d7a:	e779      	b.n	8017c70 <__sfvwrite_r+0x164>
 8017d7c:	4651      	mov	r1, sl
 8017d7e:	9201      	str	r2, [sp, #4]
 8017d80:	f7f8 fba2 	bl	80104c8 <memmove>
 8017d84:	9a01      	ldr	r2, [sp, #4]
 8017d86:	68a3      	ldr	r3, [r4, #8]
 8017d88:	1a9b      	subs	r3, r3, r2
 8017d8a:	60a3      	str	r3, [r4, #8]
 8017d8c:	6823      	ldr	r3, [r4, #0]
 8017d8e:	4413      	add	r3, r2
 8017d90:	6023      	str	r3, [r4, #0]
 8017d92:	4615      	mov	r5, r2
 8017d94:	e704      	b.n	8017ba0 <__sfvwrite_r+0x94>
 8017d96:	2001      	movs	r0, #1
 8017d98:	e70c      	b.n	8017bb4 <__sfvwrite_r+0xa8>
 8017d9a:	bf00      	nop
 8017d9c:	7ffffc00 	.word	0x7ffffc00

08017da0 <_isatty_r>:
 8017da0:	b538      	push	{r3, r4, r5, lr}
 8017da2:	4d06      	ldr	r5, [pc, #24]	; (8017dbc <_isatty_r+0x1c>)
 8017da4:	2300      	movs	r3, #0
 8017da6:	4604      	mov	r4, r0
 8017da8:	4608      	mov	r0, r1
 8017daa:	602b      	str	r3, [r5, #0]
 8017dac:	f7e9 fe65 	bl	8001a7a <_isatty>
 8017db0:	1c43      	adds	r3, r0, #1
 8017db2:	d102      	bne.n	8017dba <_isatty_r+0x1a>
 8017db4:	682b      	ldr	r3, [r5, #0]
 8017db6:	b103      	cbz	r3, 8017dba <_isatty_r+0x1a>
 8017db8:	6023      	str	r3, [r4, #0]
 8017dba:	bd38      	pop	{r3, r4, r5, pc}
 8017dbc:	200073e4 	.word	0x200073e4

08017dc0 <iswspace>:
 8017dc0:	2100      	movs	r1, #0
 8017dc2:	f000 b801 	b.w	8017dc8 <iswspace_l>
	...

08017dc8 <iswspace_l>:
 8017dc8:	28ff      	cmp	r0, #255	; 0xff
 8017dca:	bf9d      	ittte	ls
 8017dcc:	4b02      	ldrls	r3, [pc, #8]	; (8017dd8 <iswspace_l+0x10>)
 8017dce:	5cc0      	ldrbls	r0, [r0, r3]
 8017dd0:	f000 0008 	andls.w	r0, r0, #8
 8017dd4:	2000      	movhi	r0, #0
 8017dd6:	4770      	bx	lr
 8017dd8:	0801b15f 	.word	0x0801b15f

08017ddc <__locale_mb_cur_max>:
 8017ddc:	4b01      	ldr	r3, [pc, #4]	; (8017de4 <__locale_mb_cur_max+0x8>)
 8017dde:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8017de2:	4770      	bx	lr
 8017de4:	200008c0 	.word	0x200008c0

08017de8 <_lseek_r>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4d07      	ldr	r5, [pc, #28]	; (8017e08 <_lseek_r+0x20>)
 8017dec:	4604      	mov	r4, r0
 8017dee:	4608      	mov	r0, r1
 8017df0:	4611      	mov	r1, r2
 8017df2:	2200      	movs	r2, #0
 8017df4:	602a      	str	r2, [r5, #0]
 8017df6:	461a      	mov	r2, r3
 8017df8:	f7e9 fe4a 	bl	8001a90 <_lseek>
 8017dfc:	1c43      	adds	r3, r0, #1
 8017dfe:	d102      	bne.n	8017e06 <_lseek_r+0x1e>
 8017e00:	682b      	ldr	r3, [r5, #0]
 8017e02:	b103      	cbz	r3, 8017e06 <_lseek_r+0x1e>
 8017e04:	6023      	str	r3, [r4, #0]
 8017e06:	bd38      	pop	{r3, r4, r5, pc}
 8017e08:	200073e4 	.word	0x200073e4

08017e0c <_mbrtowc_r>:
 8017e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e0e:	4c0a      	ldr	r4, [pc, #40]	; (8017e38 <_mbrtowc_r+0x2c>)
 8017e10:	9e08      	ldr	r6, [sp, #32]
 8017e12:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8017e16:	9600      	str	r6, [sp, #0]
 8017e18:	4605      	mov	r5, r0
 8017e1a:	4614      	mov	r4, r2
 8017e1c:	b912      	cbnz	r2, 8017e24 <_mbrtowc_r+0x18>
 8017e1e:	4a07      	ldr	r2, [pc, #28]	; (8017e3c <_mbrtowc_r+0x30>)
 8017e20:	2301      	movs	r3, #1
 8017e22:	4621      	mov	r1, r4
 8017e24:	47b8      	blx	r7
 8017e26:	1c43      	adds	r3, r0, #1
 8017e28:	bf01      	itttt	eq
 8017e2a:	2300      	moveq	r3, #0
 8017e2c:	6033      	streq	r3, [r6, #0]
 8017e2e:	238a      	moveq	r3, #138	; 0x8a
 8017e30:	602b      	streq	r3, [r5, #0]
 8017e32:	b003      	add	sp, #12
 8017e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e36:	bf00      	nop
 8017e38:	200008c0 	.word	0x200008c0
 8017e3c:	0801b629 	.word	0x0801b629

08017e40 <__ascii_mbtowc>:
 8017e40:	b082      	sub	sp, #8
 8017e42:	b901      	cbnz	r1, 8017e46 <__ascii_mbtowc+0x6>
 8017e44:	a901      	add	r1, sp, #4
 8017e46:	b142      	cbz	r2, 8017e5a <__ascii_mbtowc+0x1a>
 8017e48:	b14b      	cbz	r3, 8017e5e <__ascii_mbtowc+0x1e>
 8017e4a:	7813      	ldrb	r3, [r2, #0]
 8017e4c:	600b      	str	r3, [r1, #0]
 8017e4e:	7812      	ldrb	r2, [r2, #0]
 8017e50:	1e10      	subs	r0, r2, #0
 8017e52:	bf18      	it	ne
 8017e54:	2001      	movne	r0, #1
 8017e56:	b002      	add	sp, #8
 8017e58:	4770      	bx	lr
 8017e5a:	4610      	mov	r0, r2
 8017e5c:	e7fb      	b.n	8017e56 <__ascii_mbtowc+0x16>
 8017e5e:	f06f 0001 	mvn.w	r0, #1
 8017e62:	e7f8      	b.n	8017e56 <__ascii_mbtowc+0x16>

08017e64 <_read_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4d07      	ldr	r5, [pc, #28]	; (8017e84 <_read_r+0x20>)
 8017e68:	4604      	mov	r4, r0
 8017e6a:	4608      	mov	r0, r1
 8017e6c:	4611      	mov	r1, r2
 8017e6e:	2200      	movs	r2, #0
 8017e70:	602a      	str	r2, [r5, #0]
 8017e72:	461a      	mov	r2, r3
 8017e74:	f7e9 fdac 	bl	80019d0 <_read>
 8017e78:	1c43      	adds	r3, r0, #1
 8017e7a:	d102      	bne.n	8017e82 <_read_r+0x1e>
 8017e7c:	682b      	ldr	r3, [r5, #0]
 8017e7e:	b103      	cbz	r3, 8017e82 <_read_r+0x1e>
 8017e80:	6023      	str	r3, [r4, #0]
 8017e82:	bd38      	pop	{r3, r4, r5, pc}
 8017e84:	200073e4 	.word	0x200073e4

08017e88 <realloc>:
 8017e88:	4b02      	ldr	r3, [pc, #8]	; (8017e94 <realloc+0xc>)
 8017e8a:	460a      	mov	r2, r1
 8017e8c:	4601      	mov	r1, r0
 8017e8e:	6818      	ldr	r0, [r3, #0]
 8017e90:	f000 b802 	b.w	8017e98 <_realloc_r>
 8017e94:	2000001c 	.word	0x2000001c

08017e98 <_realloc_r>:
 8017e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e9c:	4681      	mov	r9, r0
 8017e9e:	460c      	mov	r4, r1
 8017ea0:	b929      	cbnz	r1, 8017eae <_realloc_r+0x16>
 8017ea2:	4611      	mov	r1, r2
 8017ea4:	b003      	add	sp, #12
 8017ea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eaa:	f7fc bfed 	b.w	8014e88 <_malloc_r>
 8017eae:	9201      	str	r2, [sp, #4]
 8017eb0:	f7fd fa26 	bl	8015300 <__malloc_lock>
 8017eb4:	9a01      	ldr	r2, [sp, #4]
 8017eb6:	f102 080b 	add.w	r8, r2, #11
 8017eba:	f1b8 0f16 	cmp.w	r8, #22
 8017ebe:	d90b      	bls.n	8017ed8 <_realloc_r+0x40>
 8017ec0:	f038 0807 	bics.w	r8, r8, #7
 8017ec4:	d50a      	bpl.n	8017edc <_realloc_r+0x44>
 8017ec6:	230c      	movs	r3, #12
 8017ec8:	f8c9 3000 	str.w	r3, [r9]
 8017ecc:	f04f 0b00 	mov.w	fp, #0
 8017ed0:	4658      	mov	r0, fp
 8017ed2:	b003      	add	sp, #12
 8017ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ed8:	f04f 0810 	mov.w	r8, #16
 8017edc:	4590      	cmp	r8, r2
 8017ede:	d3f2      	bcc.n	8017ec6 <_realloc_r+0x2e>
 8017ee0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8017ee4:	f025 0603 	bic.w	r6, r5, #3
 8017ee8:	45b0      	cmp	r8, r6
 8017eea:	f1a4 0a08 	sub.w	sl, r4, #8
 8017eee:	f340 816e 	ble.w	80181ce <_realloc_r+0x336>
 8017ef2:	499b      	ldr	r1, [pc, #620]	; (8018160 <_realloc_r+0x2c8>)
 8017ef4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8017ef8:	eb0a 0306 	add.w	r3, sl, r6
 8017efc:	459c      	cmp	ip, r3
 8017efe:	6859      	ldr	r1, [r3, #4]
 8017f00:	d005      	beq.n	8017f0e <_realloc_r+0x76>
 8017f02:	f021 0001 	bic.w	r0, r1, #1
 8017f06:	4418      	add	r0, r3
 8017f08:	6840      	ldr	r0, [r0, #4]
 8017f0a:	07c7      	lsls	r7, r0, #31
 8017f0c:	d427      	bmi.n	8017f5e <_realloc_r+0xc6>
 8017f0e:	f021 0103 	bic.w	r1, r1, #3
 8017f12:	459c      	cmp	ip, r3
 8017f14:	eb06 0701 	add.w	r7, r6, r1
 8017f18:	d119      	bne.n	8017f4e <_realloc_r+0xb6>
 8017f1a:	f108 0010 	add.w	r0, r8, #16
 8017f1e:	42b8      	cmp	r0, r7
 8017f20:	dc1f      	bgt.n	8017f62 <_realloc_r+0xca>
 8017f22:	eb0a 0308 	add.w	r3, sl, r8
 8017f26:	4a8e      	ldr	r2, [pc, #568]	; (8018160 <_realloc_r+0x2c8>)
 8017f28:	eba7 0708 	sub.w	r7, r7, r8
 8017f2c:	f047 0701 	orr.w	r7, r7, #1
 8017f30:	6093      	str	r3, [r2, #8]
 8017f32:	605f      	str	r7, [r3, #4]
 8017f34:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017f38:	f003 0301 	and.w	r3, r3, #1
 8017f3c:	ea43 0308 	orr.w	r3, r3, r8
 8017f40:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f44:	4648      	mov	r0, r9
 8017f46:	f7fd f9e1 	bl	801530c <__malloc_unlock>
 8017f4a:	46a3      	mov	fp, r4
 8017f4c:	e7c0      	b.n	8017ed0 <_realloc_r+0x38>
 8017f4e:	45b8      	cmp	r8, r7
 8017f50:	dc07      	bgt.n	8017f62 <_realloc_r+0xca>
 8017f52:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017f56:	60da      	str	r2, [r3, #12]
 8017f58:	6093      	str	r3, [r2, #8]
 8017f5a:	4655      	mov	r5, sl
 8017f5c:	e07f      	b.n	801805e <_realloc_r+0x1c6>
 8017f5e:	2100      	movs	r1, #0
 8017f60:	460b      	mov	r3, r1
 8017f62:	07e8      	lsls	r0, r5, #31
 8017f64:	f100 80e5 	bmi.w	8018132 <_realloc_r+0x29a>
 8017f68:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8017f6c:	ebaa 0505 	sub.w	r5, sl, r5
 8017f70:	6868      	ldr	r0, [r5, #4]
 8017f72:	f020 0003 	bic.w	r0, r0, #3
 8017f76:	eb00 0b06 	add.w	fp, r0, r6
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	f000 80a5 	beq.w	80180ca <_realloc_r+0x232>
 8017f80:	459c      	cmp	ip, r3
 8017f82:	eb01 070b 	add.w	r7, r1, fp
 8017f86:	d14a      	bne.n	801801e <_realloc_r+0x186>
 8017f88:	f108 0310 	add.w	r3, r8, #16
 8017f8c:	42bb      	cmp	r3, r7
 8017f8e:	f300 809c 	bgt.w	80180ca <_realloc_r+0x232>
 8017f92:	46ab      	mov	fp, r5
 8017f94:	68eb      	ldr	r3, [r5, #12]
 8017f96:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8017f9a:	60d3      	str	r3, [r2, #12]
 8017f9c:	609a      	str	r2, [r3, #8]
 8017f9e:	1f32      	subs	r2, r6, #4
 8017fa0:	2a24      	cmp	r2, #36	; 0x24
 8017fa2:	d837      	bhi.n	8018014 <_realloc_r+0x17c>
 8017fa4:	2a13      	cmp	r2, #19
 8017fa6:	d933      	bls.n	8018010 <_realloc_r+0x178>
 8017fa8:	6823      	ldr	r3, [r4, #0]
 8017faa:	60ab      	str	r3, [r5, #8]
 8017fac:	6863      	ldr	r3, [r4, #4]
 8017fae:	60eb      	str	r3, [r5, #12]
 8017fb0:	2a1b      	cmp	r2, #27
 8017fb2:	d81b      	bhi.n	8017fec <_realloc_r+0x154>
 8017fb4:	3408      	adds	r4, #8
 8017fb6:	f105 0310 	add.w	r3, r5, #16
 8017fba:	6822      	ldr	r2, [r4, #0]
 8017fbc:	601a      	str	r2, [r3, #0]
 8017fbe:	6862      	ldr	r2, [r4, #4]
 8017fc0:	605a      	str	r2, [r3, #4]
 8017fc2:	68a2      	ldr	r2, [r4, #8]
 8017fc4:	609a      	str	r2, [r3, #8]
 8017fc6:	eb05 0308 	add.w	r3, r5, r8
 8017fca:	4a65      	ldr	r2, [pc, #404]	; (8018160 <_realloc_r+0x2c8>)
 8017fcc:	eba7 0708 	sub.w	r7, r7, r8
 8017fd0:	f047 0701 	orr.w	r7, r7, #1
 8017fd4:	6093      	str	r3, [r2, #8]
 8017fd6:	605f      	str	r7, [r3, #4]
 8017fd8:	686b      	ldr	r3, [r5, #4]
 8017fda:	f003 0301 	and.w	r3, r3, #1
 8017fde:	ea43 0308 	orr.w	r3, r3, r8
 8017fe2:	606b      	str	r3, [r5, #4]
 8017fe4:	4648      	mov	r0, r9
 8017fe6:	f7fd f991 	bl	801530c <__malloc_unlock>
 8017fea:	e771      	b.n	8017ed0 <_realloc_r+0x38>
 8017fec:	68a3      	ldr	r3, [r4, #8]
 8017fee:	612b      	str	r3, [r5, #16]
 8017ff0:	68e3      	ldr	r3, [r4, #12]
 8017ff2:	616b      	str	r3, [r5, #20]
 8017ff4:	2a24      	cmp	r2, #36	; 0x24
 8017ff6:	bf01      	itttt	eq
 8017ff8:	6923      	ldreq	r3, [r4, #16]
 8017ffa:	61ab      	streq	r3, [r5, #24]
 8017ffc:	6962      	ldreq	r2, [r4, #20]
 8017ffe:	61ea      	streq	r2, [r5, #28]
 8018000:	bf19      	ittee	ne
 8018002:	3410      	addne	r4, #16
 8018004:	f105 0318 	addne.w	r3, r5, #24
 8018008:	f105 0320 	addeq.w	r3, r5, #32
 801800c:	3418      	addeq	r4, #24
 801800e:	e7d4      	b.n	8017fba <_realloc_r+0x122>
 8018010:	465b      	mov	r3, fp
 8018012:	e7d2      	b.n	8017fba <_realloc_r+0x122>
 8018014:	4621      	mov	r1, r4
 8018016:	4658      	mov	r0, fp
 8018018:	f7f8 fa56 	bl	80104c8 <memmove>
 801801c:	e7d3      	b.n	8017fc6 <_realloc_r+0x12e>
 801801e:	45b8      	cmp	r8, r7
 8018020:	dc53      	bgt.n	80180ca <_realloc_r+0x232>
 8018022:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8018026:	4628      	mov	r0, r5
 8018028:	60da      	str	r2, [r3, #12]
 801802a:	6093      	str	r3, [r2, #8]
 801802c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8018030:	68eb      	ldr	r3, [r5, #12]
 8018032:	60d3      	str	r3, [r2, #12]
 8018034:	609a      	str	r2, [r3, #8]
 8018036:	1f32      	subs	r2, r6, #4
 8018038:	2a24      	cmp	r2, #36	; 0x24
 801803a:	d842      	bhi.n	80180c2 <_realloc_r+0x22a>
 801803c:	2a13      	cmp	r2, #19
 801803e:	d908      	bls.n	8018052 <_realloc_r+0x1ba>
 8018040:	6823      	ldr	r3, [r4, #0]
 8018042:	60ab      	str	r3, [r5, #8]
 8018044:	6863      	ldr	r3, [r4, #4]
 8018046:	60eb      	str	r3, [r5, #12]
 8018048:	2a1b      	cmp	r2, #27
 801804a:	d828      	bhi.n	801809e <_realloc_r+0x206>
 801804c:	3408      	adds	r4, #8
 801804e:	f105 0010 	add.w	r0, r5, #16
 8018052:	6823      	ldr	r3, [r4, #0]
 8018054:	6003      	str	r3, [r0, #0]
 8018056:	6863      	ldr	r3, [r4, #4]
 8018058:	6043      	str	r3, [r0, #4]
 801805a:	68a3      	ldr	r3, [r4, #8]
 801805c:	6083      	str	r3, [r0, #8]
 801805e:	686b      	ldr	r3, [r5, #4]
 8018060:	eba7 0008 	sub.w	r0, r7, r8
 8018064:	280f      	cmp	r0, #15
 8018066:	f003 0301 	and.w	r3, r3, #1
 801806a:	eb05 0207 	add.w	r2, r5, r7
 801806e:	f240 80b0 	bls.w	80181d2 <_realloc_r+0x33a>
 8018072:	eb05 0108 	add.w	r1, r5, r8
 8018076:	ea48 0303 	orr.w	r3, r8, r3
 801807a:	f040 0001 	orr.w	r0, r0, #1
 801807e:	606b      	str	r3, [r5, #4]
 8018080:	6048      	str	r0, [r1, #4]
 8018082:	6853      	ldr	r3, [r2, #4]
 8018084:	f043 0301 	orr.w	r3, r3, #1
 8018088:	6053      	str	r3, [r2, #4]
 801808a:	3108      	adds	r1, #8
 801808c:	4648      	mov	r0, r9
 801808e:	f7fc fca1 	bl	80149d4 <_free_r>
 8018092:	4648      	mov	r0, r9
 8018094:	f7fd f93a 	bl	801530c <__malloc_unlock>
 8018098:	f105 0b08 	add.w	fp, r5, #8
 801809c:	e718      	b.n	8017ed0 <_realloc_r+0x38>
 801809e:	68a3      	ldr	r3, [r4, #8]
 80180a0:	612b      	str	r3, [r5, #16]
 80180a2:	68e3      	ldr	r3, [r4, #12]
 80180a4:	616b      	str	r3, [r5, #20]
 80180a6:	2a24      	cmp	r2, #36	; 0x24
 80180a8:	bf01      	itttt	eq
 80180aa:	6923      	ldreq	r3, [r4, #16]
 80180ac:	61ab      	streq	r3, [r5, #24]
 80180ae:	6963      	ldreq	r3, [r4, #20]
 80180b0:	61eb      	streq	r3, [r5, #28]
 80180b2:	bf19      	ittee	ne
 80180b4:	3410      	addne	r4, #16
 80180b6:	f105 0018 	addne.w	r0, r5, #24
 80180ba:	f105 0020 	addeq.w	r0, r5, #32
 80180be:	3418      	addeq	r4, #24
 80180c0:	e7c7      	b.n	8018052 <_realloc_r+0x1ba>
 80180c2:	4621      	mov	r1, r4
 80180c4:	f7f8 fa00 	bl	80104c8 <memmove>
 80180c8:	e7c9      	b.n	801805e <_realloc_r+0x1c6>
 80180ca:	45d8      	cmp	r8, fp
 80180cc:	dc31      	bgt.n	8018132 <_realloc_r+0x29a>
 80180ce:	4628      	mov	r0, r5
 80180d0:	68eb      	ldr	r3, [r5, #12]
 80180d2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80180d6:	60d3      	str	r3, [r2, #12]
 80180d8:	609a      	str	r2, [r3, #8]
 80180da:	1f32      	subs	r2, r6, #4
 80180dc:	2a24      	cmp	r2, #36	; 0x24
 80180de:	d824      	bhi.n	801812a <_realloc_r+0x292>
 80180e0:	2a13      	cmp	r2, #19
 80180e2:	d908      	bls.n	80180f6 <_realloc_r+0x25e>
 80180e4:	6823      	ldr	r3, [r4, #0]
 80180e6:	60ab      	str	r3, [r5, #8]
 80180e8:	6863      	ldr	r3, [r4, #4]
 80180ea:	60eb      	str	r3, [r5, #12]
 80180ec:	2a1b      	cmp	r2, #27
 80180ee:	d80a      	bhi.n	8018106 <_realloc_r+0x26e>
 80180f0:	3408      	adds	r4, #8
 80180f2:	f105 0010 	add.w	r0, r5, #16
 80180f6:	6823      	ldr	r3, [r4, #0]
 80180f8:	6003      	str	r3, [r0, #0]
 80180fa:	6863      	ldr	r3, [r4, #4]
 80180fc:	6043      	str	r3, [r0, #4]
 80180fe:	68a3      	ldr	r3, [r4, #8]
 8018100:	6083      	str	r3, [r0, #8]
 8018102:	465f      	mov	r7, fp
 8018104:	e7ab      	b.n	801805e <_realloc_r+0x1c6>
 8018106:	68a3      	ldr	r3, [r4, #8]
 8018108:	612b      	str	r3, [r5, #16]
 801810a:	68e3      	ldr	r3, [r4, #12]
 801810c:	616b      	str	r3, [r5, #20]
 801810e:	2a24      	cmp	r2, #36	; 0x24
 8018110:	bf01      	itttt	eq
 8018112:	6923      	ldreq	r3, [r4, #16]
 8018114:	61ab      	streq	r3, [r5, #24]
 8018116:	6963      	ldreq	r3, [r4, #20]
 8018118:	61eb      	streq	r3, [r5, #28]
 801811a:	bf19      	ittee	ne
 801811c:	3410      	addne	r4, #16
 801811e:	f105 0018 	addne.w	r0, r5, #24
 8018122:	f105 0020 	addeq.w	r0, r5, #32
 8018126:	3418      	addeq	r4, #24
 8018128:	e7e5      	b.n	80180f6 <_realloc_r+0x25e>
 801812a:	4621      	mov	r1, r4
 801812c:	f7f8 f9cc 	bl	80104c8 <memmove>
 8018130:	e7e7      	b.n	8018102 <_realloc_r+0x26a>
 8018132:	4611      	mov	r1, r2
 8018134:	4648      	mov	r0, r9
 8018136:	f7fc fea7 	bl	8014e88 <_malloc_r>
 801813a:	4683      	mov	fp, r0
 801813c:	2800      	cmp	r0, #0
 801813e:	f43f af51 	beq.w	8017fe4 <_realloc_r+0x14c>
 8018142:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018146:	f023 0301 	bic.w	r3, r3, #1
 801814a:	4453      	add	r3, sl
 801814c:	f1a0 0208 	sub.w	r2, r0, #8
 8018150:	4293      	cmp	r3, r2
 8018152:	d107      	bne.n	8018164 <_realloc_r+0x2cc>
 8018154:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8018158:	f027 0703 	bic.w	r7, r7, #3
 801815c:	4437      	add	r7, r6
 801815e:	e6fc      	b.n	8017f5a <_realloc_r+0xc2>
 8018160:	200004b0 	.word	0x200004b0
 8018164:	1f32      	subs	r2, r6, #4
 8018166:	2a24      	cmp	r2, #36	; 0x24
 8018168:	d82d      	bhi.n	80181c6 <_realloc_r+0x32e>
 801816a:	2a13      	cmp	r2, #19
 801816c:	d928      	bls.n	80181c0 <_realloc_r+0x328>
 801816e:	6823      	ldr	r3, [r4, #0]
 8018170:	6003      	str	r3, [r0, #0]
 8018172:	6863      	ldr	r3, [r4, #4]
 8018174:	6043      	str	r3, [r0, #4]
 8018176:	2a1b      	cmp	r2, #27
 8018178:	d80e      	bhi.n	8018198 <_realloc_r+0x300>
 801817a:	f104 0208 	add.w	r2, r4, #8
 801817e:	f100 0308 	add.w	r3, r0, #8
 8018182:	6811      	ldr	r1, [r2, #0]
 8018184:	6019      	str	r1, [r3, #0]
 8018186:	6851      	ldr	r1, [r2, #4]
 8018188:	6059      	str	r1, [r3, #4]
 801818a:	6892      	ldr	r2, [r2, #8]
 801818c:	609a      	str	r2, [r3, #8]
 801818e:	4621      	mov	r1, r4
 8018190:	4648      	mov	r0, r9
 8018192:	f7fc fc1f 	bl	80149d4 <_free_r>
 8018196:	e725      	b.n	8017fe4 <_realloc_r+0x14c>
 8018198:	68a3      	ldr	r3, [r4, #8]
 801819a:	6083      	str	r3, [r0, #8]
 801819c:	68e3      	ldr	r3, [r4, #12]
 801819e:	60c3      	str	r3, [r0, #12]
 80181a0:	2a24      	cmp	r2, #36	; 0x24
 80181a2:	bf01      	itttt	eq
 80181a4:	6923      	ldreq	r3, [r4, #16]
 80181a6:	6103      	streq	r3, [r0, #16]
 80181a8:	6961      	ldreq	r1, [r4, #20]
 80181aa:	6141      	streq	r1, [r0, #20]
 80181ac:	bf19      	ittee	ne
 80181ae:	f104 0210 	addne.w	r2, r4, #16
 80181b2:	f100 0310 	addne.w	r3, r0, #16
 80181b6:	f104 0218 	addeq.w	r2, r4, #24
 80181ba:	f100 0318 	addeq.w	r3, r0, #24
 80181be:	e7e0      	b.n	8018182 <_realloc_r+0x2ea>
 80181c0:	4603      	mov	r3, r0
 80181c2:	4622      	mov	r2, r4
 80181c4:	e7dd      	b.n	8018182 <_realloc_r+0x2ea>
 80181c6:	4621      	mov	r1, r4
 80181c8:	f7f8 f97e 	bl	80104c8 <memmove>
 80181cc:	e7df      	b.n	801818e <_realloc_r+0x2f6>
 80181ce:	4637      	mov	r7, r6
 80181d0:	e6c3      	b.n	8017f5a <_realloc_r+0xc2>
 80181d2:	431f      	orrs	r7, r3
 80181d4:	606f      	str	r7, [r5, #4]
 80181d6:	6853      	ldr	r3, [r2, #4]
 80181d8:	f043 0301 	orr.w	r3, r3, #1
 80181dc:	6053      	str	r3, [r2, #4]
 80181de:	e758      	b.n	8018092 <_realloc_r+0x1fa>

080181e0 <__sccl>:
 80181e0:	b570      	push	{r4, r5, r6, lr}
 80181e2:	780b      	ldrb	r3, [r1, #0]
 80181e4:	4604      	mov	r4, r0
 80181e6:	2b5e      	cmp	r3, #94	; 0x5e
 80181e8:	bf0b      	itete	eq
 80181ea:	784b      	ldrbeq	r3, [r1, #1]
 80181ec:	1c48      	addne	r0, r1, #1
 80181ee:	1c88      	addeq	r0, r1, #2
 80181f0:	2200      	movne	r2, #0
 80181f2:	bf08      	it	eq
 80181f4:	2201      	moveq	r2, #1
 80181f6:	1e61      	subs	r1, r4, #1
 80181f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80181fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8018200:	42a9      	cmp	r1, r5
 8018202:	d1fb      	bne.n	80181fc <__sccl+0x1c>
 8018204:	b90b      	cbnz	r3, 801820a <__sccl+0x2a>
 8018206:	3801      	subs	r0, #1
 8018208:	bd70      	pop	{r4, r5, r6, pc}
 801820a:	f082 0201 	eor.w	r2, r2, #1
 801820e:	54e2      	strb	r2, [r4, r3]
 8018210:	4605      	mov	r5, r0
 8018212:	4628      	mov	r0, r5
 8018214:	f810 1b01 	ldrb.w	r1, [r0], #1
 8018218:	292d      	cmp	r1, #45	; 0x2d
 801821a:	d006      	beq.n	801822a <__sccl+0x4a>
 801821c:	295d      	cmp	r1, #93	; 0x5d
 801821e:	d0f3      	beq.n	8018208 <__sccl+0x28>
 8018220:	b909      	cbnz	r1, 8018226 <__sccl+0x46>
 8018222:	4628      	mov	r0, r5
 8018224:	e7f0      	b.n	8018208 <__sccl+0x28>
 8018226:	460b      	mov	r3, r1
 8018228:	e7f1      	b.n	801820e <__sccl+0x2e>
 801822a:	786e      	ldrb	r6, [r5, #1]
 801822c:	2e5d      	cmp	r6, #93	; 0x5d
 801822e:	d0fa      	beq.n	8018226 <__sccl+0x46>
 8018230:	42b3      	cmp	r3, r6
 8018232:	dcf8      	bgt.n	8018226 <__sccl+0x46>
 8018234:	3502      	adds	r5, #2
 8018236:	4619      	mov	r1, r3
 8018238:	3101      	adds	r1, #1
 801823a:	428e      	cmp	r6, r1
 801823c:	5462      	strb	r2, [r4, r1]
 801823e:	dcfb      	bgt.n	8018238 <__sccl+0x58>
 8018240:	1af1      	subs	r1, r6, r3
 8018242:	3901      	subs	r1, #1
 8018244:	1c58      	adds	r0, r3, #1
 8018246:	42b3      	cmp	r3, r6
 8018248:	bfa8      	it	ge
 801824a:	2100      	movge	r1, #0
 801824c:	1843      	adds	r3, r0, r1
 801824e:	e7e0      	b.n	8018212 <__sccl+0x32>

08018250 <_strtoll_l.constprop.0>:
 8018250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018254:	b085      	sub	sp, #20
 8018256:	4688      	mov	r8, r1
 8018258:	9201      	str	r2, [sp, #4]
 801825a:	4a47      	ldr	r2, [pc, #284]	; (8018378 <_strtoll_l.constprop.0+0x128>)
 801825c:	9003      	str	r0, [sp, #12]
 801825e:	461e      	mov	r6, r3
 8018260:	460d      	mov	r5, r1
 8018262:	462b      	mov	r3, r5
 8018264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018268:	5ca7      	ldrb	r7, [r4, r2]
 801826a:	f017 0708 	ands.w	r7, r7, #8
 801826e:	d1f8      	bne.n	8018262 <_strtoll_l.constprop.0+0x12>
 8018270:	2c2d      	cmp	r4, #45	; 0x2d
 8018272:	d147      	bne.n	8018304 <_strtoll_l.constprop.0+0xb4>
 8018274:	782c      	ldrb	r4, [r5, #0]
 8018276:	2701      	movs	r7, #1
 8018278:	1c9d      	adds	r5, r3, #2
 801827a:	2e00      	cmp	r6, #0
 801827c:	d077      	beq.n	801836e <_strtoll_l.constprop.0+0x11e>
 801827e:	2e10      	cmp	r6, #16
 8018280:	d109      	bne.n	8018296 <_strtoll_l.constprop.0+0x46>
 8018282:	2c30      	cmp	r4, #48	; 0x30
 8018284:	d107      	bne.n	8018296 <_strtoll_l.constprop.0+0x46>
 8018286:	782b      	ldrb	r3, [r5, #0]
 8018288:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801828c:	2b58      	cmp	r3, #88	; 0x58
 801828e:	d169      	bne.n	8018364 <_strtoll_l.constprop.0+0x114>
 8018290:	786c      	ldrb	r4, [r5, #1]
 8018292:	2610      	movs	r6, #16
 8018294:	3502      	adds	r5, #2
 8018296:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 801829a:	f107 3bff 	add.w	fp, r7, #4294967295
 801829e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80182a2:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80182a6:	4632      	mov	r2, r6
 80182a8:	464b      	mov	r3, r9
 80182aa:	4658      	mov	r0, fp
 80182ac:	4651      	mov	r1, sl
 80182ae:	f7e8 fcf5 	bl	8000c9c <__aeabi_uldivmod>
 80182b2:	2300      	movs	r3, #0
 80182b4:	9202      	str	r2, [sp, #8]
 80182b6:	468c      	mov	ip, r1
 80182b8:	4602      	mov	r2, r0
 80182ba:	4619      	mov	r1, r3
 80182bc:	4618      	mov	r0, r3
 80182be:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80182c2:	f1be 0f09 	cmp.w	lr, #9
 80182c6:	d822      	bhi.n	801830e <_strtoll_l.constprop.0+0xbe>
 80182c8:	4674      	mov	r4, lr
 80182ca:	42a6      	cmp	r6, r4
 80182cc:	dd30      	ble.n	8018330 <_strtoll_l.constprop.0+0xe0>
 80182ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182d2:	d014      	beq.n	80182fe <_strtoll_l.constprop.0+0xae>
 80182d4:	4282      	cmp	r2, r0
 80182d6:	eb7c 0301 	sbcs.w	r3, ip, r1
 80182da:	d326      	bcc.n	801832a <_strtoll_l.constprop.0+0xda>
 80182dc:	458c      	cmp	ip, r1
 80182de:	bf08      	it	eq
 80182e0:	4282      	cmpeq	r2, r0
 80182e2:	d102      	bne.n	80182ea <_strtoll_l.constprop.0+0x9a>
 80182e4:	9b02      	ldr	r3, [sp, #8]
 80182e6:	42a3      	cmp	r3, r4
 80182e8:	db1f      	blt.n	801832a <_strtoll_l.constprop.0+0xda>
 80182ea:	4371      	muls	r1, r6
 80182ec:	fb00 1109 	mla	r1, r0, r9, r1
 80182f0:	fba6 0300 	umull	r0, r3, r6, r0
 80182f4:	4419      	add	r1, r3
 80182f6:	1820      	adds	r0, r4, r0
 80182f8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80182fc:	2301      	movs	r3, #1
 80182fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018302:	e7dc      	b.n	80182be <_strtoll_l.constprop.0+0x6e>
 8018304:	2c2b      	cmp	r4, #43	; 0x2b
 8018306:	bf04      	itt	eq
 8018308:	782c      	ldrbeq	r4, [r5, #0]
 801830a:	1c9d      	addeq	r5, r3, #2
 801830c:	e7b5      	b.n	801827a <_strtoll_l.constprop.0+0x2a>
 801830e:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8018312:	f1be 0f19 	cmp.w	lr, #25
 8018316:	d801      	bhi.n	801831c <_strtoll_l.constprop.0+0xcc>
 8018318:	3c37      	subs	r4, #55	; 0x37
 801831a:	e7d6      	b.n	80182ca <_strtoll_l.constprop.0+0x7a>
 801831c:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8018320:	f1be 0f19 	cmp.w	lr, #25
 8018324:	d804      	bhi.n	8018330 <_strtoll_l.constprop.0+0xe0>
 8018326:	3c57      	subs	r4, #87	; 0x57
 8018328:	e7cf      	b.n	80182ca <_strtoll_l.constprop.0+0x7a>
 801832a:	f04f 33ff 	mov.w	r3, #4294967295
 801832e:	e7e6      	b.n	80182fe <_strtoll_l.constprop.0+0xae>
 8018330:	1c5a      	adds	r2, r3, #1
 8018332:	d109      	bne.n	8018348 <_strtoll_l.constprop.0+0xf8>
 8018334:	9a03      	ldr	r2, [sp, #12]
 8018336:	2322      	movs	r3, #34	; 0x22
 8018338:	6013      	str	r3, [r2, #0]
 801833a:	9b01      	ldr	r3, [sp, #4]
 801833c:	4658      	mov	r0, fp
 801833e:	4651      	mov	r1, sl
 8018340:	b953      	cbnz	r3, 8018358 <_strtoll_l.constprop.0+0x108>
 8018342:	b005      	add	sp, #20
 8018344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018348:	b117      	cbz	r7, 8018350 <_strtoll_l.constprop.0+0x100>
 801834a:	4240      	negs	r0, r0
 801834c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018350:	9a01      	ldr	r2, [sp, #4]
 8018352:	2a00      	cmp	r2, #0
 8018354:	d0f5      	beq.n	8018342 <_strtoll_l.constprop.0+0xf2>
 8018356:	b10b      	cbz	r3, 801835c <_strtoll_l.constprop.0+0x10c>
 8018358:	f105 38ff 	add.w	r8, r5, #4294967295
 801835c:	9b01      	ldr	r3, [sp, #4]
 801835e:	f8c3 8000 	str.w	r8, [r3]
 8018362:	e7ee      	b.n	8018342 <_strtoll_l.constprop.0+0xf2>
 8018364:	2430      	movs	r4, #48	; 0x30
 8018366:	2e00      	cmp	r6, #0
 8018368:	d195      	bne.n	8018296 <_strtoll_l.constprop.0+0x46>
 801836a:	2608      	movs	r6, #8
 801836c:	e793      	b.n	8018296 <_strtoll_l.constprop.0+0x46>
 801836e:	2c30      	cmp	r4, #48	; 0x30
 8018370:	d089      	beq.n	8018286 <_strtoll_l.constprop.0+0x36>
 8018372:	260a      	movs	r6, #10
 8018374:	e78f      	b.n	8018296 <_strtoll_l.constprop.0+0x46>
 8018376:	bf00      	nop
 8018378:	0801b15f 	.word	0x0801b15f

0801837c <_strtoll_r>:
 801837c:	f7ff bf68 	b.w	8018250 <_strtoll_l.constprop.0>

08018380 <_strtoull_l.constprop.0>:
 8018380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018384:	4692      	mov	sl, r2
 8018386:	4a49      	ldr	r2, [pc, #292]	; (80184ac <_strtoull_l.constprop.0+0x12c>)
 8018388:	9001      	str	r0, [sp, #4]
 801838a:	4689      	mov	r9, r1
 801838c:	461d      	mov	r5, r3
 801838e:	460e      	mov	r6, r1
 8018390:	4633      	mov	r3, r6
 8018392:	f816 4b01 	ldrb.w	r4, [r6], #1
 8018396:	5ca7      	ldrb	r7, [r4, r2]
 8018398:	f017 0708 	ands.w	r7, r7, #8
 801839c:	d1f8      	bne.n	8018390 <_strtoull_l.constprop.0+0x10>
 801839e:	2c2d      	cmp	r4, #45	; 0x2d
 80183a0:	d14a      	bne.n	8018438 <_strtoull_l.constprop.0+0xb8>
 80183a2:	7834      	ldrb	r4, [r6, #0]
 80183a4:	2701      	movs	r7, #1
 80183a6:	1c9e      	adds	r6, r3, #2
 80183a8:	2d00      	cmp	r5, #0
 80183aa:	d07b      	beq.n	80184a4 <_strtoull_l.constprop.0+0x124>
 80183ac:	2d10      	cmp	r5, #16
 80183ae:	d109      	bne.n	80183c4 <_strtoull_l.constprop.0+0x44>
 80183b0:	2c30      	cmp	r4, #48	; 0x30
 80183b2:	d107      	bne.n	80183c4 <_strtoull_l.constprop.0+0x44>
 80183b4:	7833      	ldrb	r3, [r6, #0]
 80183b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80183ba:	2b58      	cmp	r3, #88	; 0x58
 80183bc:	d16d      	bne.n	801849a <_strtoull_l.constprop.0+0x11a>
 80183be:	7874      	ldrb	r4, [r6, #1]
 80183c0:	2510      	movs	r5, #16
 80183c2:	3602      	adds	r6, #2
 80183c4:	ea4f 7be5 	mov.w	fp, r5, asr #31
 80183c8:	462a      	mov	r2, r5
 80183ca:	465b      	mov	r3, fp
 80183cc:	f04f 30ff 	mov.w	r0, #4294967295
 80183d0:	f04f 31ff 	mov.w	r1, #4294967295
 80183d4:	f7e8 fc62 	bl	8000c9c <__aeabi_uldivmod>
 80183d8:	462a      	mov	r2, r5
 80183da:	9000      	str	r0, [sp, #0]
 80183dc:	4688      	mov	r8, r1
 80183de:	465b      	mov	r3, fp
 80183e0:	f04f 30ff 	mov.w	r0, #4294967295
 80183e4:	f04f 31ff 	mov.w	r1, #4294967295
 80183e8:	f7e8 fc58 	bl	8000c9c <__aeabi_uldivmod>
 80183ec:	2300      	movs	r3, #0
 80183ee:	4618      	mov	r0, r3
 80183f0:	4619      	mov	r1, r3
 80183f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80183f6:	f1bc 0f09 	cmp.w	ip, #9
 80183fa:	d822      	bhi.n	8018442 <_strtoull_l.constprop.0+0xc2>
 80183fc:	4664      	mov	r4, ip
 80183fe:	42a5      	cmp	r5, r4
 8018400:	dd30      	ble.n	8018464 <_strtoull_l.constprop.0+0xe4>
 8018402:	2b00      	cmp	r3, #0
 8018404:	db2b      	blt.n	801845e <_strtoull_l.constprop.0+0xde>
 8018406:	9b00      	ldr	r3, [sp, #0]
 8018408:	4283      	cmp	r3, r0
 801840a:	eb78 0301 	sbcs.w	r3, r8, r1
 801840e:	d326      	bcc.n	801845e <_strtoull_l.constprop.0+0xde>
 8018410:	9b00      	ldr	r3, [sp, #0]
 8018412:	4588      	cmp	r8, r1
 8018414:	bf08      	it	eq
 8018416:	4283      	cmpeq	r3, r0
 8018418:	d101      	bne.n	801841e <_strtoull_l.constprop.0+0x9e>
 801841a:	42a2      	cmp	r2, r4
 801841c:	db1f      	blt.n	801845e <_strtoull_l.constprop.0+0xde>
 801841e:	4369      	muls	r1, r5
 8018420:	fb00 110b 	mla	r1, r0, fp, r1
 8018424:	fba5 0300 	umull	r0, r3, r5, r0
 8018428:	4419      	add	r1, r3
 801842a:	1820      	adds	r0, r4, r0
 801842c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8018430:	2301      	movs	r3, #1
 8018432:	f816 4b01 	ldrb.w	r4, [r6], #1
 8018436:	e7dc      	b.n	80183f2 <_strtoull_l.constprop.0+0x72>
 8018438:	2c2b      	cmp	r4, #43	; 0x2b
 801843a:	bf04      	itt	eq
 801843c:	7834      	ldrbeq	r4, [r6, #0]
 801843e:	1c9e      	addeq	r6, r3, #2
 8018440:	e7b2      	b.n	80183a8 <_strtoull_l.constprop.0+0x28>
 8018442:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018446:	f1bc 0f19 	cmp.w	ip, #25
 801844a:	d801      	bhi.n	8018450 <_strtoull_l.constprop.0+0xd0>
 801844c:	3c37      	subs	r4, #55	; 0x37
 801844e:	e7d6      	b.n	80183fe <_strtoull_l.constprop.0+0x7e>
 8018450:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018454:	f1bc 0f19 	cmp.w	ip, #25
 8018458:	d804      	bhi.n	8018464 <_strtoull_l.constprop.0+0xe4>
 801845a:	3c57      	subs	r4, #87	; 0x57
 801845c:	e7cf      	b.n	80183fe <_strtoull_l.constprop.0+0x7e>
 801845e:	f04f 33ff 	mov.w	r3, #4294967295
 8018462:	e7e6      	b.n	8018432 <_strtoull_l.constprop.0+0xb2>
 8018464:	2b00      	cmp	r3, #0
 8018466:	da0b      	bge.n	8018480 <_strtoull_l.constprop.0+0x100>
 8018468:	9a01      	ldr	r2, [sp, #4]
 801846a:	2322      	movs	r3, #34	; 0x22
 801846c:	f04f 30ff 	mov.w	r0, #4294967295
 8018470:	6013      	str	r3, [r2, #0]
 8018472:	4601      	mov	r1, r0
 8018474:	f1ba 0f00 	cmp.w	sl, #0
 8018478:	d10a      	bne.n	8018490 <_strtoull_l.constprop.0+0x110>
 801847a:	b003      	add	sp, #12
 801847c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018480:	b117      	cbz	r7, 8018488 <_strtoull_l.constprop.0+0x108>
 8018482:	4240      	negs	r0, r0
 8018484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018488:	f1ba 0f00 	cmp.w	sl, #0
 801848c:	d0f5      	beq.n	801847a <_strtoull_l.constprop.0+0xfa>
 801848e:	b10b      	cbz	r3, 8018494 <_strtoull_l.constprop.0+0x114>
 8018490:	f106 39ff 	add.w	r9, r6, #4294967295
 8018494:	f8ca 9000 	str.w	r9, [sl]
 8018498:	e7ef      	b.n	801847a <_strtoull_l.constprop.0+0xfa>
 801849a:	2430      	movs	r4, #48	; 0x30
 801849c:	2d00      	cmp	r5, #0
 801849e:	d191      	bne.n	80183c4 <_strtoull_l.constprop.0+0x44>
 80184a0:	2508      	movs	r5, #8
 80184a2:	e78f      	b.n	80183c4 <_strtoull_l.constprop.0+0x44>
 80184a4:	2c30      	cmp	r4, #48	; 0x30
 80184a6:	d085      	beq.n	80183b4 <_strtoull_l.constprop.0+0x34>
 80184a8:	250a      	movs	r5, #10
 80184aa:	e78b      	b.n	80183c4 <_strtoull_l.constprop.0+0x44>
 80184ac:	0801b15f 	.word	0x0801b15f

080184b0 <_strtoull_r>:
 80184b0:	f7ff bf66 	b.w	8018380 <_strtoull_l.constprop.0>

080184b4 <__swbuf_r>:
 80184b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184b6:	460e      	mov	r6, r1
 80184b8:	4614      	mov	r4, r2
 80184ba:	4605      	mov	r5, r0
 80184bc:	b118      	cbz	r0, 80184c6 <__swbuf_r+0x12>
 80184be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80184c0:	b90b      	cbnz	r3, 80184c6 <__swbuf_r+0x12>
 80184c2:	f7fc f9f7 	bl	80148b4 <__sinit>
 80184c6:	69a3      	ldr	r3, [r4, #24]
 80184c8:	60a3      	str	r3, [r4, #8]
 80184ca:	89a3      	ldrh	r3, [r4, #12]
 80184cc:	0719      	lsls	r1, r3, #28
 80184ce:	d529      	bpl.n	8018524 <__swbuf_r+0x70>
 80184d0:	6923      	ldr	r3, [r4, #16]
 80184d2:	b33b      	cbz	r3, 8018524 <__swbuf_r+0x70>
 80184d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184d8:	b2f6      	uxtb	r6, r6
 80184da:	049a      	lsls	r2, r3, #18
 80184dc:	4637      	mov	r7, r6
 80184de:	d52a      	bpl.n	8018536 <__swbuf_r+0x82>
 80184e0:	6823      	ldr	r3, [r4, #0]
 80184e2:	6920      	ldr	r0, [r4, #16]
 80184e4:	1a18      	subs	r0, r3, r0
 80184e6:	6963      	ldr	r3, [r4, #20]
 80184e8:	4283      	cmp	r3, r0
 80184ea:	dc04      	bgt.n	80184f6 <__swbuf_r+0x42>
 80184ec:	4621      	mov	r1, r4
 80184ee:	4628      	mov	r0, r5
 80184f0:	f7fc f974 	bl	80147dc <_fflush_r>
 80184f4:	b9e0      	cbnz	r0, 8018530 <__swbuf_r+0x7c>
 80184f6:	68a3      	ldr	r3, [r4, #8]
 80184f8:	3b01      	subs	r3, #1
 80184fa:	60a3      	str	r3, [r4, #8]
 80184fc:	6823      	ldr	r3, [r4, #0]
 80184fe:	1c5a      	adds	r2, r3, #1
 8018500:	6022      	str	r2, [r4, #0]
 8018502:	701e      	strb	r6, [r3, #0]
 8018504:	6962      	ldr	r2, [r4, #20]
 8018506:	1c43      	adds	r3, r0, #1
 8018508:	429a      	cmp	r2, r3
 801850a:	d004      	beq.n	8018516 <__swbuf_r+0x62>
 801850c:	89a3      	ldrh	r3, [r4, #12]
 801850e:	07db      	lsls	r3, r3, #31
 8018510:	d506      	bpl.n	8018520 <__swbuf_r+0x6c>
 8018512:	2e0a      	cmp	r6, #10
 8018514:	d104      	bne.n	8018520 <__swbuf_r+0x6c>
 8018516:	4621      	mov	r1, r4
 8018518:	4628      	mov	r0, r5
 801851a:	f7fc f95f 	bl	80147dc <_fflush_r>
 801851e:	b938      	cbnz	r0, 8018530 <__swbuf_r+0x7c>
 8018520:	4638      	mov	r0, r7
 8018522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018524:	4621      	mov	r1, r4
 8018526:	4628      	mov	r0, r5
 8018528:	f7fb f9e4 	bl	80138f4 <__swsetup_r>
 801852c:	2800      	cmp	r0, #0
 801852e:	d0d1      	beq.n	80184d4 <__swbuf_r+0x20>
 8018530:	f04f 37ff 	mov.w	r7, #4294967295
 8018534:	e7f4      	b.n	8018520 <__swbuf_r+0x6c>
 8018536:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801853a:	81a3      	strh	r3, [r4, #12]
 801853c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801853e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018542:	6663      	str	r3, [r4, #100]	; 0x64
 8018544:	e7cc      	b.n	80184e0 <__swbuf_r+0x2c>
	...

08018548 <_wcrtomb_r>:
 8018548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801854a:	4c09      	ldr	r4, [pc, #36]	; (8018570 <_wcrtomb_r+0x28>)
 801854c:	b085      	sub	sp, #20
 801854e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8018552:	4605      	mov	r5, r0
 8018554:	461e      	mov	r6, r3
 8018556:	b909      	cbnz	r1, 801855c <_wcrtomb_r+0x14>
 8018558:	460a      	mov	r2, r1
 801855a:	a901      	add	r1, sp, #4
 801855c:	47b8      	blx	r7
 801855e:	1c43      	adds	r3, r0, #1
 8018560:	bf01      	itttt	eq
 8018562:	2300      	moveq	r3, #0
 8018564:	6033      	streq	r3, [r6, #0]
 8018566:	238a      	moveq	r3, #138	; 0x8a
 8018568:	602b      	streq	r3, [r5, #0]
 801856a:	b005      	add	sp, #20
 801856c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801856e:	bf00      	nop
 8018570:	200008c0 	.word	0x200008c0

08018574 <__ascii_wctomb>:
 8018574:	b149      	cbz	r1, 801858a <__ascii_wctomb+0x16>
 8018576:	2aff      	cmp	r2, #255	; 0xff
 8018578:	bf85      	ittet	hi
 801857a:	238a      	movhi	r3, #138	; 0x8a
 801857c:	6003      	strhi	r3, [r0, #0]
 801857e:	700a      	strbls	r2, [r1, #0]
 8018580:	f04f 30ff 	movhi.w	r0, #4294967295
 8018584:	bf98      	it	ls
 8018586:	2001      	movls	r0, #1
 8018588:	4770      	bx	lr
 801858a:	4608      	mov	r0, r1
 801858c:	4770      	bx	lr

0801858e <abort>:
 801858e:	b508      	push	{r3, lr}
 8018590:	2006      	movs	r0, #6
 8018592:	f000 f82d 	bl	80185f0 <raise>
 8018596:	2001      	movs	r0, #1
 8018598:	f7e9 fa10 	bl	80019bc <_exit>

0801859c <_raise_r>:
 801859c:	291f      	cmp	r1, #31
 801859e:	b538      	push	{r3, r4, r5, lr}
 80185a0:	4604      	mov	r4, r0
 80185a2:	460d      	mov	r5, r1
 80185a4:	d904      	bls.n	80185b0 <_raise_r+0x14>
 80185a6:	2316      	movs	r3, #22
 80185a8:	6003      	str	r3, [r0, #0]
 80185aa:	f04f 30ff 	mov.w	r0, #4294967295
 80185ae:	bd38      	pop	{r3, r4, r5, pc}
 80185b0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80185b4:	b112      	cbz	r2, 80185bc <_raise_r+0x20>
 80185b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80185ba:	b94b      	cbnz	r3, 80185d0 <_raise_r+0x34>
 80185bc:	4620      	mov	r0, r4
 80185be:	f000 f831 	bl	8018624 <_getpid_r>
 80185c2:	462a      	mov	r2, r5
 80185c4:	4601      	mov	r1, r0
 80185c6:	4620      	mov	r0, r4
 80185c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185cc:	f000 b818 	b.w	8018600 <_kill_r>
 80185d0:	2b01      	cmp	r3, #1
 80185d2:	d00a      	beq.n	80185ea <_raise_r+0x4e>
 80185d4:	1c59      	adds	r1, r3, #1
 80185d6:	d103      	bne.n	80185e0 <_raise_r+0x44>
 80185d8:	2316      	movs	r3, #22
 80185da:	6003      	str	r3, [r0, #0]
 80185dc:	2001      	movs	r0, #1
 80185de:	e7e6      	b.n	80185ae <_raise_r+0x12>
 80185e0:	2400      	movs	r4, #0
 80185e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80185e6:	4628      	mov	r0, r5
 80185e8:	4798      	blx	r3
 80185ea:	2000      	movs	r0, #0
 80185ec:	e7df      	b.n	80185ae <_raise_r+0x12>
	...

080185f0 <raise>:
 80185f0:	4b02      	ldr	r3, [pc, #8]	; (80185fc <raise+0xc>)
 80185f2:	4601      	mov	r1, r0
 80185f4:	6818      	ldr	r0, [r3, #0]
 80185f6:	f7ff bfd1 	b.w	801859c <_raise_r>
 80185fa:	bf00      	nop
 80185fc:	2000001c 	.word	0x2000001c

08018600 <_kill_r>:
 8018600:	b538      	push	{r3, r4, r5, lr}
 8018602:	4d07      	ldr	r5, [pc, #28]	; (8018620 <_kill_r+0x20>)
 8018604:	2300      	movs	r3, #0
 8018606:	4604      	mov	r4, r0
 8018608:	4608      	mov	r0, r1
 801860a:	4611      	mov	r1, r2
 801860c:	602b      	str	r3, [r5, #0]
 801860e:	f7e9 f9c3 	bl	8001998 <_kill>
 8018612:	1c43      	adds	r3, r0, #1
 8018614:	d102      	bne.n	801861c <_kill_r+0x1c>
 8018616:	682b      	ldr	r3, [r5, #0]
 8018618:	b103      	cbz	r3, 801861c <_kill_r+0x1c>
 801861a:	6023      	str	r3, [r4, #0]
 801861c:	bd38      	pop	{r3, r4, r5, pc}
 801861e:	bf00      	nop
 8018620:	200073e4 	.word	0x200073e4

08018624 <_getpid_r>:
 8018624:	f7e9 b9b0 	b.w	8001988 <_getpid>

08018628 <_init>:
 8018628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801862a:	bf00      	nop
 801862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801862e:	bc08      	pop	{r3}
 8018630:	469e      	mov	lr, r3
 8018632:	4770      	bx	lr

08018634 <_fini>:
 8018634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018636:	bf00      	nop
 8018638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801863a:	bc08      	pop	{r3}
 801863c:	469e      	mov	lr, r3
 801863e:	4770      	bx	lr
