
PwmExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004278  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004458  08004458  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004460  08004460  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000000c  08004474  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08004474  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013609  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245e  00000000  00000000  00033645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00035aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00036b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e04  00000000  00000000  00037a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132da  00000000  00000000  0005d884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee3a7  00000000  00000000  00070b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ef05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b4  00000000  00000000  0015ef58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004428 	.word	0x08004428

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004428 	.word	0x08004428

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fbff 	bl	8000d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f814 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f97a 	bl	8000810 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051c:	f000 f91a 	bl	8000754 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000520:	f000 f948 	bl	80007b4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000524:	f000 f87a 	bl	800061c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x30>)
 800052c:	f002 f9d8 	bl	80028e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	4802      	ldr	r0, [pc, #8]	; (800053c <main+0x30>)
 8000534:	f002 f9d4 	bl	80028e0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x2c>
 800053a:	bf00      	nop
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 ff62 	bl	8004418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f001 f84a 	bl	80015fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <SystemClock_Config+0xd4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a29      	ldr	r2, [pc, #164]	; (8000614 <SystemClock_Config+0xd4>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <SystemClock_Config+0xd4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <SystemClock_Config+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a24      	ldr	r2, [pc, #144]	; (8000618 <SystemClock_Config+0xd8>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005b0:	23d8      	movs	r3, #216	; 0xd8
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005b8:	2309      	movs	r3, #9
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f87b 	bl	80016bc <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005cc:	f000 f9ce 	bl	800096c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d0:	f001 f824 	bl	800161c <HAL_PWREx_EnableOverDrive>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005da:	f000 f9c7 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2107      	movs	r1, #7
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fb01 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000608:	f000 f9b0 	bl	800096c <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000622:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	222c      	movs	r2, #44	; 0x2c
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fee5 	bl	8004418 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800064e:	4b3f      	ldr	r3, [pc, #252]	; (800074c <MX_TIM1_Init+0x130>)
 8000650:	4a3f      	ldr	r2, [pc, #252]	; (8000750 <MX_TIM1_Init+0x134>)
 8000652:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <MX_TIM1_Init+0x130>)
 8000656:	2201      	movs	r2, #1
 8000658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b3c      	ldr	r3, [pc, #240]	; (800074c <MX_TIM1_Init+0x130>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 538;
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <MX_TIM1_Init+0x130>)
 8000662:	f240 221a 	movw	r2, #538	; 0x21a
 8000666:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b38      	ldr	r3, [pc, #224]	; (800074c <MX_TIM1_Init+0x130>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <MX_TIM1_Init+0x130>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b35      	ldr	r3, [pc, #212]	; (800074c <MX_TIM1_Init+0x130>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067a:	4834      	ldr	r0, [pc, #208]	; (800074c <MX_TIM1_Init+0x130>)
 800067c:	f002 f8d8 	bl	8002830 <HAL_TIM_PWM_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f971 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000696:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800069a:	4619      	mov	r1, r3
 800069c:	482b      	ldr	r0, [pc, #172]	; (800074c <MX_TIM1_Init+0x130>)
 800069e:	f002 fe51 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006a8:	f000 f960 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 269;
 80006b0:	f240 130d 	movw	r3, #269	; 0x10d
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b6:	2300      	movs	r3, #0
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	481e      	ldr	r0, [pc, #120]	; (800074c <MX_TIM1_Init+0x130>)
 80006d4:	f002 f9fe 	bl	8002ad4 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80006de:	f000 f945 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e6:	2204      	movs	r2, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4818      	ldr	r0, [pc, #96]	; (800074c <MX_TIM1_Init+0x130>)
 80006ec:	f002 f9f2 	bl	8002ad4 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80006f6:	f000 f939 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800071c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <MX_TIM1_Init+0x130>)
 8000730:	f002 fe96 	bl	8003460 <HAL_TIMEx_ConfigBreakDeadTime>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800073a:	f000 f917 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <MX_TIM1_Init+0x130>)
 8000740:	f000 f95e 	bl	8000a00 <HAL_TIM_MspPostInit>

}
 8000744:	bf00      	nop
 8000746:	3758      	adds	r7, #88	; 0x58
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028
 8000750:	40010000 	.word	0x40010000

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART3_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000798:	f002 fee0 	bl	800355c <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f8e3 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000074 	.word	0x20000074
 80007b0:	40004800 	.word	0x40004800

080007b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2206      	movs	r2, #6
 80007c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2201      	movs	r2, #1
 80007dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	f000 fdb7 	bl	800136a <HAL_PCD_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f8b3 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000f8 	.word	0x200000f8

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b4d      	ldr	r3, [pc, #308]	; (800095c <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a4c      	ldr	r2, [pc, #304]	; (800095c <MX_GPIO_Init+0x14c>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b4a      	ldr	r3, [pc, #296]	; (800095c <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b47      	ldr	r3, [pc, #284]	; (800095c <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a46      	ldr	r2, [pc, #280]	; (800095c <MX_GPIO_Init+0x14c>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a40      	ldr	r2, [pc, #256]	; (800095c <MX_GPIO_Init+0x14c>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b3e      	ldr	r3, [pc, #248]	; (800095c <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086e:	4b3b      	ldr	r3, [pc, #236]	; (800095c <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a3a      	ldr	r2, [pc, #232]	; (800095c <MX_GPIO_Init+0x14c>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b38      	ldr	r3, [pc, #224]	; (800095c <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b35      	ldr	r3, [pc, #212]	; (800095c <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a34      	ldr	r2, [pc, #208]	; (800095c <MX_GPIO_Init+0x14c>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b32      	ldr	r3, [pc, #200]	; (800095c <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2e      	ldr	r2, [pc, #184]	; (800095c <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b29      	ldr	r3, [pc, #164]	; (800095c <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a28      	ldr	r2, [pc, #160]	; (800095c <MX_GPIO_Init+0x14c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d4:	4822      	ldr	r0, [pc, #136]	; (8000960 <MX_GPIO_Init+0x150>)
 80008d6:	f000 fd2f 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4821      	ldr	r0, [pc, #132]	; (8000964 <MX_GPIO_Init+0x154>)
 80008e0:	f000 fd2a 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481b      	ldr	r0, [pc, #108]	; (8000968 <MX_GPIO_Init+0x158>)
 80008fc:	f000 fb70 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000900:	f244 0381 	movw	r3, #16513	; 0x4081
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_GPIO_Init+0x150>)
 800091a:	f000 fb61 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <MX_GPIO_Init+0x154>)
 8000936:	f000 fb53 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_GPIO_Init+0x154>)
 800094e:	f000 fb47 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	; 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40021800 	.word	0x40021800
 8000968:	40020800 	.word	0x40020800

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x44>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_TIM_PWM_MspInit+0x38>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10b      	bne.n	80009ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_TIM_PWM_MspInit+0x3c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_TIM_PWM_MspInit+0x3c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_TIM_PWM_MspInit+0x3c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40010000 	.word	0x40010000
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <HAL_TIM_MspPostInit+0x88>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12d      	bne.n	8000a7e <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_TIM_MspPostInit+0x8c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_TIM_MspPostInit+0x8c>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_TIM_MspPostInit+0x8c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a44:	2302      	movs	r3, #2
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4619      	mov	r1, r3
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <HAL_TIM_MspPostInit+0x90>)
 8000a58:	f000 fac2 	bl	8000fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_TIM_MspPostInit+0x90>)
 8000a7a:	f000 fab1 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0aa      	sub	sp, #168	; 0xa8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2284      	movs	r2, #132	; 0x84
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fcaf 	bl	8004418 <memset>
  if(huart->Instance==USART3)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d13c      	bne.n	8000b3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fabc 	bl	8002050 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ade:	f7ff ff45 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b3a:	f000 fa51 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	37a8      	adds	r7, #168	; 0xa8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ac      	sub	sp, #176	; 0xb0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	2284      	movs	r2, #132	; 0x84
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fc4f 	bl	8004418 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b82:	d159      	bne.n	8000c38 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fa5b 	bl	8002050 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ba0:	f7ff fee4 	bl	800096c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bbc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000be0:	4619      	mov	r1, r3
 8000be2:	4818      	ldr	r0, [pc, #96]	; (8000c44 <HAL_PCD_MspInit+0xf0>)
 8000be4:	f000 f9fc 	bl	8000fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c00:	4619      	mov	r1, r3
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <HAL_PCD_MspInit+0xf0>)
 8000c04:	f000 f9ec 	bl	8000fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c12:	6353      	str	r3, [r2, #52]	; 0x34
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	37b0      	adds	r7, #176	; 0xb0
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f87a 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f003 fb6f 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc0b 	bl	800050c <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d04:	08004468 	.word	0x08004468
  ldr r2, =_sbss
 8000d08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d0c:	20000500 	.word	0x20000500

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>

08000d12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f92e 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f805 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff fe29 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f93b 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f911 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200004fc 	.word	0x200004fc

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200004fc 	.word	0x200004fc

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffde 	bl	8000db4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <__NVIC_SetPriorityGrouping+0x40>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x40>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00
 8000e58:	05fa0000 	.word	0x05fa0000

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff47 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff5c 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffb0 	bl	8000f34 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e175      	b.n	80012ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8164 	bne.w	80012e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x56>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80be 	beq.w	80012e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_GPIO_Init+0x324>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a65      	ldr	r2, [pc, #404]	; (8001304 <HAL_GPIO_Init+0x324>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_GPIO_Init+0x324>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001182:	4a61      	ldr	r2, [pc, #388]	; (8001308 <HAL_GPIO_Init+0x328>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a58      	ldr	r2, [pc, #352]	; (800130c <HAL_GPIO_Init+0x32c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d037      	beq.n	800121e <HAL_GPIO_Init+0x23e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x330>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d031      	beq.n	800121a <HAL_GPIO_Init+0x23a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_GPIO_Init+0x334>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d02b      	beq.n	8001216 <HAL_GPIO_Init+0x236>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a55      	ldr	r2, [pc, #340]	; (8001318 <HAL_GPIO_Init+0x338>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d025      	beq.n	8001212 <HAL_GPIO_Init+0x232>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a54      	ldr	r2, [pc, #336]	; (800131c <HAL_GPIO_Init+0x33c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01f      	beq.n	800120e <HAL_GPIO_Init+0x22e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a53      	ldr	r2, [pc, #332]	; (8001320 <HAL_GPIO_Init+0x340>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d019      	beq.n	800120a <HAL_GPIO_Init+0x22a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_GPIO_Init+0x344>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a51      	ldr	r2, [pc, #324]	; (8001328 <HAL_GPIO_Init+0x348>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a50      	ldr	r2, [pc, #320]	; (800132c <HAL_GPIO_Init+0x34c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x350>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x21a>
 80011f6:	2309      	movs	r3, #9
 80011f8:	e012      	b.n	8001220 <HAL_GPIO_Init+0x240>
 80011fa:	230a      	movs	r3, #10
 80011fc:	e010      	b.n	8001220 <HAL_GPIO_Init+0x240>
 80011fe:	2308      	movs	r3, #8
 8001200:	e00e      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001202:	2307      	movs	r3, #7
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001206:	2306      	movs	r3, #6
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x328>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a34      	ldr	r2, [pc, #208]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_GPIO_Init+0x354>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <HAL_GPIO_Init+0x354>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae86 	bls.w	8001000 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40022000 	.word	0x40022000
 8001330:	40022400 	.word	0x40022400
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800136a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136c:	b08f      	sub	sp, #60	; 0x3c
 800136e:	af0a      	add	r7, sp, #40	; 0x28
 8001370:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e116      	b.n	80015aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fbdc 	bl	8000b54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fd72 	bl	8003ea4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	687e      	ldr	r6, [r7, #4]
 80013c8:	466d      	mov	r5, sp
 80013ca:	f106 0410 	add.w	r4, r6, #16
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013da:	e885 0003 	stmia.w	r5, {r0, r1}
 80013de:	1d33      	adds	r3, r6, #4
 80013e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f002 fd06 	bl	8003df4 <USB_CoreInit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2202      	movs	r2, #2
 80013f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0d7      	b.n	80015aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fd60 	bl	8003ec6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e04a      	b.n	80014a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	333d      	adds	r3, #61	; 0x3d
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	333c      	adds	r3, #60	; 0x3c
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	b298      	uxth	r0, r3
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	3342      	adds	r3, #66	; 0x42
 8001448:	4602      	mov	r2, r0
 800144a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	333f      	adds	r3, #63	; 0x3f
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3344      	adds	r3, #68	; 0x44
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3348      	adds	r3, #72	; 0x48
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3350      	adds	r3, #80	; 0x50
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	3301      	adds	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3af      	bcc.n	800140c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e044      	b.n	800153c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3b5      	bcc.n	80014b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	687e      	ldr	r6, [r7, #4]
 800154e:	466d      	mov	r5, sp
 8001550:	f106 0410 	add.w	r4, r6, #16
 8001554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001560:	e885 0003 	stmia.w	r5, {r0, r1}
 8001564:	1d33      	adds	r3, r6, #4
 8001566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f002 fcf9 	bl	8003f60 <USB_DevInit>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e014      	b.n	80015aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f80b 	bl	80015b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 feb3 	bl	800430e <USB_DevDisconnect>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080015b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	10000003 	.word	0x10000003

080015fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40007000 	.word	0x40007000

0800161c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800164a:	f7ff fbb3 	bl	8000db4 <HAL_GetTick>
 800164e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001650:	e009      	b.n	8001666 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001652:	f7ff fbaf 	bl	8000db4 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001660:	d901      	bls.n	8001666 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e022      	b.n	80016ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001672:	d1ee      	bne.n	8001652 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800167a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff fb98 	bl	8000db4 <HAL_GetTick>
 8001684:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001686:	e009      	b.n	800169c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001688:	f7ff fb94 	bl	8000db4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001696:	d901      	bls.n	800169c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e007      	b.n	80016ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016a8:	d1ee      	bne.n	8001688 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e291      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8087 	beq.w	80017ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e0:	4b96      	ldr	r3, [pc, #600]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d00c      	beq.n	8001706 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ec:	4b93      	ldr	r3, [pc, #588]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d112      	bne.n	800171e <HAL_RCC_OscConfig+0x62>
 80016f8:	4b90      	ldr	r3, [pc, #576]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001704:	d10b      	bne.n	800171e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	4b8d      	ldr	r3, [pc, #564]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06c      	beq.n	80017ec <HAL_RCC_OscConfig+0x130>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d168      	bne.n	80017ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e26b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x7a>
 8001728:	4b84      	ldr	r3, [pc, #528]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a83      	ldr	r2, [pc, #524]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e02e      	b.n	8001794 <HAL_RCC_OscConfig+0xd8>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x9c>
 800173e:	4b7f      	ldr	r3, [pc, #508]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a7e      	ldr	r2, [pc, #504]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b7c      	ldr	r3, [pc, #496]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7b      	ldr	r2, [pc, #492]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0xd8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0xc0>
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a75      	ldr	r2, [pc, #468]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b73      	ldr	r3, [pc, #460]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a72      	ldr	r2, [pc, #456]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xd8>
 800177c:	4b6f      	ldr	r3, [pc, #444]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b6c      	ldr	r3, [pc, #432]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6b      	ldr	r2, [pc, #428]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fb0a 	bl	8000db4 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb06 	bl	8000db4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e21f      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe8>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff faf6 	bl	8000db4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff faf2 	bl	8000db4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e20b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x110>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d069      	beq.n	80018ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fa:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001806:	4b4d      	ldr	r3, [pc, #308]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b08      	cmp	r3, #8
 8001810:	d11c      	bne.n	800184c <HAL_RCC_OscConfig+0x190>
 8001812:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d116      	bne.n	800184c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x17a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e1df      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	493d      	ldr	r1, [pc, #244]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	e040      	b.n	80018ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d023      	beq.n	800189c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a38      	ldr	r2, [pc, #224]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff faa8 	bl	8000db4 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff faa4 	bl	8000db4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e1bd      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4929      	ldr	r1, [pc, #164]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
 800189a:	e018      	b.n	80018ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa84 	bl	8000db4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fa80 	bl	8000db4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e199      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d038      	beq.n	800194c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d019      	beq.n	8001916 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80018e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <HAL_RCC_OscConfig+0x280>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fa61 	bl	8000db4 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff fa5d 	bl	8000db4 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e176      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800190a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x23a>
 8001914:	e01a      	b.n	800194c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_OscConfig+0x280>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_RCC_OscConfig+0x280>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff fa47 	bl	8000db4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fa43 	bl	8000db4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d903      	bls.n	8001940 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e15c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
 800193c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	4b91      	ldr	r3, [pc, #580]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ee      	bne.n	800192a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a4 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195a:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10d      	bne.n	8001982 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b85      	ldr	r3, [pc, #532]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001982:	4b82      	ldr	r3, [pc, #520]	; (8001b8c <HAL_RCC_OscConfig+0x4d0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d118      	bne.n	80019c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800198e:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <HAL_RCC_OscConfig+0x4d0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7e      	ldr	r2, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x4d0>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199a:	f7ff fa0b 	bl	8000db4 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a2:	f7ff fa07 	bl	8000db4 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e120      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b4:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x4d0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x31a>
 80019c8:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a6e      	ldr	r2, [pc, #440]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	e02d      	b.n	8001a32 <HAL_RCC_OscConfig+0x376>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x33c>
 80019de:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	4a66      	ldr	r2, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	6713      	str	r3, [r2, #112]	; 0x70
 80019f6:	e01c      	b.n	8001a32 <HAL_RCC_OscConfig+0x376>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d10c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x35e>
 8001a00:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a60      	ldr	r2, [pc, #384]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a5d      	ldr	r2, [pc, #372]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
 8001a18:	e00b      	b.n	8001a32 <HAL_RCC_OscConfig+0x376>
 8001a1a:	4b5b      	ldr	r3, [pc, #364]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a5a      	ldr	r2, [pc, #360]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d015      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f9bb 	bl	8000db4 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff f9b7 	bl	8000db4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0ce      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ee      	beq.n	8001a42 <HAL_RCC_OscConfig+0x386>
 8001a64:	e014      	b.n	8001a90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff f9a5 	bl	8000db4 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f9a1 	bl	8000db4 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ee      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d105      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80a4 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d06b      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d149      	bne.n	8001b54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a30      	ldr	r2, [pc, #192]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f972 	bl	8000db4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f96e 	bl	8000db4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e087      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	019b      	lsls	r3, r3, #6
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	4313      	orrs	r3, r2
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f942 	bl	8000db4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff f93e 	bl	8000db4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e057      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x478>
 8001b52:	e04f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f928 	bl	8000db4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f924 	bl	8000db4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e03d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4ac>
 8001b86:	e035      	b.n	8001bf4 <HAL_RCC_OscConfig+0x538>
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x544>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d028      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d121      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d11a      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d111      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0d0      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 020f 	bic.w	r2, r3, #15
 8001c32:	4965      	ldr	r1, [pc, #404]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b8      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c64:	4b59      	ldr	r3, [pc, #356]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	494d      	ldr	r1, [pc, #308]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d040      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d115      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e07f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e073      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06b      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4936      	ldr	r1, [pc, #216]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf8:	f7ff f85c 	bl	8000db4 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff f858 	bl	8000db4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e053      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d210      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 020f 	bic.w	r2, r3, #15
 8001d3e:	4922      	ldr	r1, [pc, #136]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e032      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4916      	ldr	r1, [pc, #88]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	490e      	ldr	r1, [pc, #56]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d96:	f000 f821 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	490a      	ldr	r1, [pc, #40]	; (8001dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001da8:	5ccb      	ldrb	r3, [r1, r3]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1d4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe ffb8 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08004440 	.word	0x08004440
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de0:	b094      	sub	sp, #80	; 0x50
 8001de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dec:	2300      	movs	r3, #0
 8001dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d00d      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x40>
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	f200 80e1 	bhi.w	8001fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0e:	e0db      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e14:	e0db      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e16:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1a:	e0d8      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e24:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e32:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	2200      	movs	r2, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e4e:	4622      	mov	r2, r4
 8001e50:	462b      	mov	r3, r5
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	0159      	lsls	r1, r3, #5
 8001e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e60:	0150      	lsls	r0, r2, #5
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4621      	mov	r1, r4
 8001e68:	1a51      	subs	r1, r2, r1
 8001e6a:	6139      	str	r1, [r7, #16]
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e80:	4659      	mov	r1, fp
 8001e82:	018b      	lsls	r3, r1, #6
 8001e84:	4651      	mov	r1, sl
 8001e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	018a      	lsls	r2, r1, #6
 8001e8e:	4651      	mov	r1, sl
 8001e90:	ebb2 0801 	subs.w	r8, r2, r1
 8001e94:	4659      	mov	r1, fp
 8001e96:	eb63 0901 	sbc.w	r9, r3, r1
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eae:	4690      	mov	r8, r2
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	eb18 0303 	adds.w	r3, r8, r3
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	462b      	mov	r3, r5
 8001ebc:	eb49 0303 	adc.w	r3, r9, r3
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	024b      	lsls	r3, r1, #9
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ed8:	4621      	mov	r1, r4
 8001eda:	024a      	lsls	r2, r1, #9
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001eec:	f7fe f98c 	bl	8000208 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef8:	e058      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	2200      	movs	r2, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	4611      	mov	r1, r2
 8001f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f14:	4642      	mov	r2, r8
 8001f16:	464b      	mov	r3, r9
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	0159      	lsls	r1, r3, #5
 8001f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f26:	0150      	lsls	r0, r2, #5
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f32:	4649      	mov	r1, r9
 8001f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f50:	eb63 050b 	sbc.w	r5, r3, fp
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	00eb      	lsls	r3, r5, #3
 8001f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f62:	00e2      	lsls	r2, r4, #3
 8001f64:	4614      	mov	r4, r2
 8001f66:	461d      	mov	r5, r3
 8001f68:	4643      	mov	r3, r8
 8001f6a:	18e3      	adds	r3, r4, r3
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	464b      	mov	r3, r9
 8001f70:	eb45 0303 	adc.w	r3, r5, r3
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f82:	4629      	mov	r1, r5
 8001f84:	028b      	lsls	r3, r1, #10
 8001f86:	4621      	mov	r1, r4
 8001f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	028a      	lsls	r2, r1, #10
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f96:	2200      	movs	r2, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	61fa      	str	r2, [r7, #28]
 8001f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa0:	f7fe f932 	bl	8000208 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3750      	adds	r7, #80	; 0x50
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0a9b      	lsrs	r3, r3, #10
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4903      	ldr	r1, [pc, #12]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	08004450 	.word	0x08004450

08002028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800202c:	f7ff ffdc 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0b5b      	lsrs	r3, r3, #13
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	; (800204c <HAL_RCC_GetPCLK2Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	08004450 	.word	0x08004450

08002050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d012      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002078:	4b69      	ldr	r3, [pc, #420]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a68      	ldr	r2, [pc, #416]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002082:	6093      	str	r3, [r2, #8]
 8002084:	4b66      	ldr	r3, [pc, #408]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	4964      	ldr	r1, [pc, #400]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d017      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020aa:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	4959      	ldr	r1, [pc, #356]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020c8:	d101      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d017      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020e6:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	494a      	ldr	r1, [pc, #296]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002104:	d101      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 808b 	beq.w	800224a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a39      	ldr	r2, [pc, #228]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
 8002140:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a34      	ldr	r2, [pc, #208]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002158:	f7fe fe2c 	bl	8000db4 <HAL_GetTick>
 800215c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe fe28 	bl	8000db4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e357      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002172:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d035      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d02e      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d114      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fdf0 	bl	8000db4 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fdec 	bl	8000db4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e319      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ee      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002206:	d111      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002216:	400b      	ands	r3, r1
 8002218:	4901      	ldr	r1, [pc, #4]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
 800221e:	e00b      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000
 8002228:	0ffffcff 	.word	0x0ffffcff
 800222c:	4baa      	ldr	r3, [pc, #680]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4aa9      	ldr	r2, [pc, #676]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002232:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002236:	6093      	str	r3, [r2, #8]
 8002238:	4ba7      	ldr	r3, [pc, #668]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002244:	49a4      	ldr	r1, [pc, #656]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002246:	4313      	orrs	r3, r2
 8002248:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002256:	4ba0      	ldr	r3, [pc, #640]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800225c:	4a9e      	ldr	r2, [pc, #632]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002262:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002266:	4b9c      	ldr	r3, [pc, #624]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002268:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	4999      	ldr	r1, [pc, #612]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002284:	4b94      	ldr	r3, [pc, #592]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002292:	4991      	ldr	r1, [pc, #580]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a6:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b4:	4988      	ldr	r1, [pc, #544]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c8:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d6:	4980      	ldr	r1, [pc, #512]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4977      	ldr	r1, [pc, #476]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800230c:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	496f      	ldr	r1, [pc, #444]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	f023 020c 	bic.w	r2, r3, #12
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	4966      	ldr	r1, [pc, #408]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002350:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	495e      	ldr	r1, [pc, #376]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002372:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002380:	4955      	ldr	r1, [pc, #340]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	494d      	ldr	r1, [pc, #308]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023b6:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	4944      	ldr	r1, [pc, #272]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023d8:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	493c      	ldr	r1, [pc, #240]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002408:	4933      	ldr	r1, [pc, #204]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800242a:	492b      	ldr	r1, [pc, #172]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d011      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244c:	4922      	ldr	r1, [pc, #136]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800245c:	d101      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	4912      	ldr	r1, [pc, #72]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00b      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b0:	4909      	ldr	r1, [pc, #36]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d006      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80d9 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024cc:	4b02      	ldr	r3, [pc, #8]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a01      	ldr	r2, [pc, #4]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024d6:	e001      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024de:	f7fe fc69 	bl	8000db4 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024e6:	f7fe fc65 	bl	8000db4 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e194      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024f8:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d021      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11d      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002526:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252c:	0e1b      	lsrs	r3, r3, #24
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	019a      	lsls	r2, r3, #6
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	071b      	lsls	r3, r3, #28
 800254c:	4957      	ldr	r1, [pc, #348]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002572:	2b00      	cmp	r3, #0
 8002574:	d02e      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257e:	d129      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002594:	0f1b      	lsrs	r3, r3, #28
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	019a      	lsls	r2, r3, #6
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	071b      	lsls	r3, r3, #28
 80025b4:	493d      	ldr	r1, [pc, #244]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025bc:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c2:	f023 021f 	bic.w	r2, r3, #31
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	3b01      	subs	r3, #1
 80025cc:	4937      	ldr	r1, [pc, #220]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01d      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025e0:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e6:	0e1b      	lsrs	r3, r3, #24
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f4:	0f1b      	lsrs	r3, r3, #28
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	019a      	lsls	r2, r3, #6
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	431a      	orrs	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	071b      	lsls	r3, r3, #28
 8002614:	4925      	ldr	r1, [pc, #148]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d011      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	019a      	lsls	r2, r3, #6
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	071b      	lsls	r3, r3, #28
 8002644:	4919      	ldr	r1, [pc, #100]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002658:	f7fe fbac 	bl	8000db4 <HAL_GetTick>
 800265c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002660:	f7fe fba8 	bl	8000db4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0d7      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b01      	cmp	r3, #1
 8002682:	f040 80cd 	bne.w	8002820 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002692:	f7fe fb8f 	bl	8000db4 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800269a:	f7fe fb8b 	bl	8000db4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d903      	bls.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0ba      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026b0:	4b5e      	ldr	r3, [pc, #376]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d0ed      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02e      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d12a      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026e6:	4b51      	ldr	r3, [pc, #324]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026f4:	4b4d      	ldr	r3, [pc, #308]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	0f1b      	lsrs	r3, r3, #28
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	019a      	lsls	r2, r3, #6
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	4944      	ldr	r1, [pc, #272]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002728:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	493d      	ldr	r1, [pc, #244]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d022      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800274c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002750:	d11d      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	0e1b      	lsrs	r3, r3, #24
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	0f1b      	lsrs	r3, r3, #28
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	019a      	lsls	r2, r3, #6
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	431a      	orrs	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	071b      	lsls	r3, r3, #28
 8002786:	4929      	ldr	r1, [pc, #164]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d028      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	019a      	lsls	r2, r3, #6
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	431a      	orrs	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	071b      	lsls	r3, r3, #28
 80027ce:	4917      	ldr	r1, [pc, #92]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	4911      	ldr	r1, [pc, #68]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fadc 	bl	8000db4 <HAL_GetTick>
 80027fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002800:	f7fe fad8 	bl	8000db4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e007      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800281a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800281e:	d1ef      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e049      	b.n	80028d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe f8b2 	bl	80009c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fa44 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_TIM_PWM_Start+0x24>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e03c      	b.n	800297e <HAL_TIM_PWM_Start+0x9e>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d109      	bne.n	800291e <HAL_TIM_PWM_Start+0x3e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e02f      	b.n	800297e <HAL_TIM_PWM_Start+0x9e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d109      	bne.n	8002938 <HAL_TIM_PWM_Start+0x58>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e022      	b.n	800297e <HAL_TIM_PWM_Start+0x9e>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d109      	bne.n	8002952 <HAL_TIM_PWM_Start+0x72>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e015      	b.n	800297e <HAL_TIM_PWM_Start+0x9e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b10      	cmp	r3, #16
 8002956:	d109      	bne.n	800296c <HAL_TIM_PWM_Start+0x8c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e008      	b.n	800297e <HAL_TIM_PWM_Start+0x9e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e092      	b.n	8002aac <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0xb6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	e023      	b.n	80029de <HAL_TIM_PWM_Start+0xfe>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0xc6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a4:	e01b      	b.n	80029de <HAL_TIM_PWM_Start+0xfe>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start+0xd6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b4:	e013      	b.n	80029de <HAL_TIM_PWM_Start+0xfe>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_PWM_Start+0xe6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c4:	e00b      	b.n	80029de <HAL_TIM_PWM_Start+0xfe>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_PWM_Start+0xf6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d4:	e003      	b.n	80029de <HAL_TIM_PWM_Start+0xfe>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2201      	movs	r2, #1
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fc86 	bl	80032f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <HAL_TIM_PWM_Start+0x1d4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_TIM_PWM_Start+0x120>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2f      	ldr	r2, [pc, #188]	; (8002ab8 <HAL_TIM_PWM_Start+0x1d8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x124>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_TIM_PWM_Start+0x126>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <HAL_TIM_PWM_Start+0x1d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x18a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d01d      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x18a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a22      	ldr	r2, [pc, #136]	; (8002abc <HAL_TIM_PWM_Start+0x1dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x18a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <HAL_TIM_PWM_Start+0x1e0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x18a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_TIM_PWM_Start+0x1e4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x18a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <HAL_TIM_PWM_Start+0x1d8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x18a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_TIM_PWM_Start+0x1e8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x18a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_TIM_PWM_Start+0x1ec>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d115      	bne.n	8002a96 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_TIM_PWM_Start+0x1f0>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d015      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x1c8>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d011      	beq.n	8002aa8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	e008      	b.n	8002aa8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e000      	b.n	8002aaa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40010400 	.word	0x40010400
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40001800 	.word	0x40001800
 8002ad0:	00010007 	.word	0x00010007

08002ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0ff      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b14      	cmp	r3, #20
 8002afe:	f200 80f0 	bhi.w	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b5d 	.word	0x08002b5d
 8002b0c:	08002ce3 	.word	0x08002ce3
 8002b10:	08002ce3 	.word	0x08002ce3
 8002b14:	08002ce3 	.word	0x08002ce3
 8002b18:	08002b9d 	.word	0x08002b9d
 8002b1c:	08002ce3 	.word	0x08002ce3
 8002b20:	08002ce3 	.word	0x08002ce3
 8002b24:	08002ce3 	.word	0x08002ce3
 8002b28:	08002bdf 	.word	0x08002bdf
 8002b2c:	08002ce3 	.word	0x08002ce3
 8002b30:	08002ce3 	.word	0x08002ce3
 8002b34:	08002ce3 	.word	0x08002ce3
 8002b38:	08002c1f 	.word	0x08002c1f
 8002b3c:	08002ce3 	.word	0x08002ce3
 8002b40:	08002ce3 	.word	0x08002ce3
 8002b44:	08002ce3 	.word	0x08002ce3
 8002b48:	08002c61 	.word	0x08002c61
 8002b4c:	08002ce3 	.word	0x08002ce3
 8002b50:	08002ce3 	.word	0x08002ce3
 8002b54:	08002ce3 	.word	0x08002ce3
 8002b58:	08002ca1 	.word	0x08002ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f96a 	bl	8002e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0208 	orr.w	r2, r2, #8
 8002b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0204 	bic.w	r2, r2, #4
 8002b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6999      	ldr	r1, [r3, #24]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	619a      	str	r2, [r3, #24]
      break;
 8002b9a:	e0a5      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f9bc 	bl	8002f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6999      	ldr	r1, [r3, #24]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	021a      	lsls	r2, r3, #8
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	619a      	str	r2, [r3, #24]
      break;
 8002bdc:	e084      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fa13 	bl	8003010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0208 	orr.w	r2, r2, #8
 8002bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0204 	bic.w	r2, r2, #4
 8002c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69d9      	ldr	r1, [r3, #28]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	61da      	str	r2, [r3, #28]
      break;
 8002c1c:	e064      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fa69 	bl	80030fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69d9      	ldr	r1, [r3, #28]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	021a      	lsls	r2, r3, #8
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	61da      	str	r2, [r3, #28]
      break;
 8002c5e:	e043      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 faa0 	bl	80031ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0208 	orr.w	r2, r2, #8
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c9e:	e023      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fad2 	bl	8003250 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	021a      	lsls	r2, r3, #8
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop

08002cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d00f      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3d      	ldr	r2, [pc, #244]	; (8002e14 <TIM_Base_SetConfig+0x118>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3c      	ldr	r2, [pc, #240]	; (8002e18 <TIM_Base_SetConfig+0x11c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <TIM_Base_SetConfig+0x120>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d027      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <TIM_Base_SetConfig+0x118>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d023      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2b      	ldr	r2, [pc, #172]	; (8002e18 <TIM_Base_SetConfig+0x11c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <TIM_Base_SetConfig+0x120>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d017      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <TIM_Base_SetConfig+0x128>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <TIM_Base_SetConfig+0x12c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00f      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <TIM_Base_SetConfig+0x130>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00b      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <TIM_Base_SetConfig+0x134>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <TIM_Base_SetConfig+0x138>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <TIM_Base_SetConfig+0x13c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <TIM_Base_SetConfig+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_Base_SetConfig+0xf8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <TIM_Base_SetConfig+0x124>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d103      	bne.n	8002dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	615a      	str	r2, [r3, #20]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	40001800 	.word	0x40001800
 8002e34:	40001c00 	.word	0x40001c00
 8002e38:	40002000 	.word	0x40002000

08002e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <TIM_OC1_SetConfig+0xd8>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <TIM_OC1_SetConfig+0xdc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC1_SetConfig+0x64>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <TIM_OC1_SetConfig+0xe0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0308 	bic.w	r3, r3, #8
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <TIM_OC1_SetConfig+0xdc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_OC1_SetConfig+0x8e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <TIM_OC1_SetConfig+0xe0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d111      	bne.n	8002eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	621a      	str	r2, [r3, #32]
}
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	fffeff8f 	.word	0xfffeff8f
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40010400 	.word	0x40010400

08002f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0210 	bic.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <TIM_OC2_SetConfig+0xe4>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0320 	bic.w	r3, r3, #32
 8002f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <TIM_OC2_SetConfig+0xe8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_OC2_SetConfig+0x68>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a22      	ldr	r2, [pc, #136]	; (800300c <TIM_OC2_SetConfig+0xec>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d10d      	bne.n	8002fa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <TIM_OC2_SetConfig+0xe8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <TIM_OC2_SetConfig+0x94>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <TIM_OC2_SetConfig+0xec>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d113      	bne.n	8002fdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	feff8fff 	.word	0xfeff8fff
 8003008:	40010000 	.word	0x40010000
 800300c:	40010400 	.word	0x40010400

08003010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <TIM_OC3_SetConfig+0xe0>)
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a22      	ldr	r2, [pc, #136]	; (80030f4 <TIM_OC3_SetConfig+0xe4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d003      	beq.n	8003076 <TIM_OC3_SetConfig+0x66>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <TIM_OC3_SetConfig+0xe8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10d      	bne.n	8003092 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800307c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <TIM_OC3_SetConfig+0xe4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_OC3_SetConfig+0x92>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <TIM_OC3_SetConfig+0xe8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d113      	bne.n	80030ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	621a      	str	r2, [r3, #32]
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	fffeff8f 	.word	0xfffeff8f
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40010400 	.word	0x40010400

080030fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <TIM_OC4_SetConfig+0xa4>)
 8003128:	4013      	ands	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	031b      	lsls	r3, r3, #12
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <TIM_OC4_SetConfig+0xa8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_OC4_SetConfig+0x68>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <TIM_OC4_SetConfig+0xac>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d109      	bne.n	8003178 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800316a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	feff8fff 	.word	0xfeff8fff
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40010400 	.word	0x40010400

080031ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <TIM_OC5_SetConfig+0x98>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <TIM_OC5_SetConfig+0x9c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_OC5_SetConfig+0x5e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a11      	ldr	r2, [pc, #68]	; (800324c <TIM_OC5_SetConfig+0xa0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d109      	bne.n	800321e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	fffeff8f 	.word	0xfffeff8f
 8003248:	40010000 	.word	0x40010000
 800324c:	40010400 	.word	0x40010400

08003250 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <TIM_OC6_SetConfig+0x9c>)
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	051b      	lsls	r3, r3, #20
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <TIM_OC6_SetConfig+0xa0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_OC6_SetConfig+0x60>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <TIM_OC6_SetConfig+0xa4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d109      	bne.n	80032c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	029b      	lsls	r3, r3, #10
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	feff8fff 	.word	0xfeff8fff
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40010400 	.word	0x40010400

080032f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2201      	movs	r2, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003358:	2302      	movs	r3, #2
 800335a:	e06d      	b.n	8003438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a30      	ldr	r2, [pc, #192]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d108      	bne.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003396:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a20      	ldr	r2, [pc, #128]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d022      	beq.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d01d      	beq.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d018      	beq.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10c      	bne.n	8003426 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	4313      	orrs	r3, r2
 800341c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40010000 	.word	0x40010000
 8003448:	40010400 	.word	0x40010400
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40014000 	.word	0x40014000
 800345c:	40001800 	.word	0x40001800

08003460 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003478:	2302      	movs	r3, #2
 800347a:	e065      	b.n	8003548 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d115      	bne.n	8003536 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	051b      	lsls	r3, r3, #20
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40010000 	.word	0x40010000
 8003558:	40010400 	.word	0x40010400

0800355c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e040      	b.n	80035f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fa88 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f82c 	bl	80035f8 <UART_SetConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e022      	b.n	80035f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa84 	bl	8003ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fb0b 	bl	8003c04 <UART_CheckIdleState>
 80035ee:	4603      	mov	r3, r0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4ba6      	ldr	r3, [pc, #664]	; (80038bc <UART_SetConfig+0x2c4>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	6979      	ldr	r1, [r7, #20]
 800362c:	430b      	orrs	r3, r1
 800362e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a94      	ldr	r2, [pc, #592]	; (80038c0 <UART_SetConfig+0x2c8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d120      	bne.n	80036b6 <UART_SetConfig+0xbe>
 8003674:	4b93      	ldr	r3, [pc, #588]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b03      	cmp	r3, #3
 8003680:	d816      	bhi.n	80036b0 <UART_SetConfig+0xb8>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0x90>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	08003699 	.word	0x08003699
 800368c:	080036a5 	.word	0x080036a5
 8003690:	0800369f 	.word	0x0800369f
 8003694:	080036ab 	.word	0x080036ab
 8003698:	2301      	movs	r3, #1
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e150      	b.n	8003940 <UART_SetConfig+0x348>
 800369e:	2302      	movs	r3, #2
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e14d      	b.n	8003940 <UART_SetConfig+0x348>
 80036a4:	2304      	movs	r3, #4
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e14a      	b.n	8003940 <UART_SetConfig+0x348>
 80036aa:	2308      	movs	r3, #8
 80036ac:	77fb      	strb	r3, [r7, #31]
 80036ae:	e147      	b.n	8003940 <UART_SetConfig+0x348>
 80036b0:	2310      	movs	r3, #16
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e144      	b.n	8003940 <UART_SetConfig+0x348>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a83      	ldr	r2, [pc, #524]	; (80038c8 <UART_SetConfig+0x2d0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d132      	bne.n	8003726 <UART_SetConfig+0x12e>
 80036c0:	4b80      	ldr	r3, [pc, #512]	; (80038c4 <UART_SetConfig+0x2cc>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d828      	bhi.n	8003720 <UART_SetConfig+0x128>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0xdc>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003721 	.word	0x08003721
 80036dc:	08003721 	.word	0x08003721
 80036e0:	08003721 	.word	0x08003721
 80036e4:	08003715 	.word	0x08003715
 80036e8:	08003721 	.word	0x08003721
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003721 	.word	0x08003721
 80036f4:	0800370f 	.word	0x0800370f
 80036f8:	08003721 	.word	0x08003721
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003721 	.word	0x08003721
 8003704:	0800371b 	.word	0x0800371b
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e118      	b.n	8003940 <UART_SetConfig+0x348>
 800370e:	2302      	movs	r3, #2
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e115      	b.n	8003940 <UART_SetConfig+0x348>
 8003714:	2304      	movs	r3, #4
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e112      	b.n	8003940 <UART_SetConfig+0x348>
 800371a:	2308      	movs	r3, #8
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e10f      	b.n	8003940 <UART_SetConfig+0x348>
 8003720:	2310      	movs	r3, #16
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e10c      	b.n	8003940 <UART_SetConfig+0x348>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a68      	ldr	r2, [pc, #416]	; (80038cc <UART_SetConfig+0x2d4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d120      	bne.n	8003772 <UART_SetConfig+0x17a>
 8003730:	4b64      	ldr	r3, [pc, #400]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800373a:	2b30      	cmp	r3, #48	; 0x30
 800373c:	d013      	beq.n	8003766 <UART_SetConfig+0x16e>
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d814      	bhi.n	800376c <UART_SetConfig+0x174>
 8003742:	2b20      	cmp	r3, #32
 8003744:	d009      	beq.n	800375a <UART_SetConfig+0x162>
 8003746:	2b20      	cmp	r3, #32
 8003748:	d810      	bhi.n	800376c <UART_SetConfig+0x174>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <UART_SetConfig+0x15c>
 800374e:	2b10      	cmp	r3, #16
 8003750:	d006      	beq.n	8003760 <UART_SetConfig+0x168>
 8003752:	e00b      	b.n	800376c <UART_SetConfig+0x174>
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e0f2      	b.n	8003940 <UART_SetConfig+0x348>
 800375a:	2302      	movs	r3, #2
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e0ef      	b.n	8003940 <UART_SetConfig+0x348>
 8003760:	2304      	movs	r3, #4
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e0ec      	b.n	8003940 <UART_SetConfig+0x348>
 8003766:	2308      	movs	r3, #8
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e0e9      	b.n	8003940 <UART_SetConfig+0x348>
 800376c:	2310      	movs	r3, #16
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e0e6      	b.n	8003940 <UART_SetConfig+0x348>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <UART_SetConfig+0x2d8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d120      	bne.n	80037be <UART_SetConfig+0x1c6>
 800377c:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <UART_SetConfig+0x2cc>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003786:	2bc0      	cmp	r3, #192	; 0xc0
 8003788:	d013      	beq.n	80037b2 <UART_SetConfig+0x1ba>
 800378a:	2bc0      	cmp	r3, #192	; 0xc0
 800378c:	d814      	bhi.n	80037b8 <UART_SetConfig+0x1c0>
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d009      	beq.n	80037a6 <UART_SetConfig+0x1ae>
 8003792:	2b80      	cmp	r3, #128	; 0x80
 8003794:	d810      	bhi.n	80037b8 <UART_SetConfig+0x1c0>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <UART_SetConfig+0x1a8>
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d006      	beq.n	80037ac <UART_SetConfig+0x1b4>
 800379e:	e00b      	b.n	80037b8 <UART_SetConfig+0x1c0>
 80037a0:	2300      	movs	r3, #0
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e0cc      	b.n	8003940 <UART_SetConfig+0x348>
 80037a6:	2302      	movs	r3, #2
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e0c9      	b.n	8003940 <UART_SetConfig+0x348>
 80037ac:	2304      	movs	r3, #4
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e0c6      	b.n	8003940 <UART_SetConfig+0x348>
 80037b2:	2308      	movs	r3, #8
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e0c3      	b.n	8003940 <UART_SetConfig+0x348>
 80037b8:	2310      	movs	r3, #16
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e0c0      	b.n	8003940 <UART_SetConfig+0x348>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a44      	ldr	r2, [pc, #272]	; (80038d4 <UART_SetConfig+0x2dc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d125      	bne.n	8003814 <UART_SetConfig+0x21c>
 80037c8:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <UART_SetConfig+0x2cc>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d6:	d017      	beq.n	8003808 <UART_SetConfig+0x210>
 80037d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037dc:	d817      	bhi.n	800380e <UART_SetConfig+0x216>
 80037de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e2:	d00b      	beq.n	80037fc <UART_SetConfig+0x204>
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d811      	bhi.n	800380e <UART_SetConfig+0x216>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <UART_SetConfig+0x1fe>
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d006      	beq.n	8003802 <UART_SetConfig+0x20a>
 80037f4:	e00b      	b.n	800380e <UART_SetConfig+0x216>
 80037f6:	2300      	movs	r3, #0
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e0a1      	b.n	8003940 <UART_SetConfig+0x348>
 80037fc:	2302      	movs	r3, #2
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e09e      	b.n	8003940 <UART_SetConfig+0x348>
 8003802:	2304      	movs	r3, #4
 8003804:	77fb      	strb	r3, [r7, #31]
 8003806:	e09b      	b.n	8003940 <UART_SetConfig+0x348>
 8003808:	2308      	movs	r3, #8
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e098      	b.n	8003940 <UART_SetConfig+0x348>
 800380e:	2310      	movs	r3, #16
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e095      	b.n	8003940 <UART_SetConfig+0x348>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <UART_SetConfig+0x2e0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d125      	bne.n	800386a <UART_SetConfig+0x272>
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800382c:	d017      	beq.n	800385e <UART_SetConfig+0x266>
 800382e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003832:	d817      	bhi.n	8003864 <UART_SetConfig+0x26c>
 8003834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003838:	d00b      	beq.n	8003852 <UART_SetConfig+0x25a>
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383e:	d811      	bhi.n	8003864 <UART_SetConfig+0x26c>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <UART_SetConfig+0x254>
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d006      	beq.n	8003858 <UART_SetConfig+0x260>
 800384a:	e00b      	b.n	8003864 <UART_SetConfig+0x26c>
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e076      	b.n	8003940 <UART_SetConfig+0x348>
 8003852:	2302      	movs	r3, #2
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e073      	b.n	8003940 <UART_SetConfig+0x348>
 8003858:	2304      	movs	r3, #4
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e070      	b.n	8003940 <UART_SetConfig+0x348>
 800385e:	2308      	movs	r3, #8
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e06d      	b.n	8003940 <UART_SetConfig+0x348>
 8003864:	2310      	movs	r3, #16
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e06a      	b.n	8003940 <UART_SetConfig+0x348>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <UART_SetConfig+0x2e4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d138      	bne.n	80038e6 <UART_SetConfig+0x2ee>
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <UART_SetConfig+0x2cc>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800387e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003882:	d017      	beq.n	80038b4 <UART_SetConfig+0x2bc>
 8003884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003888:	d82a      	bhi.n	80038e0 <UART_SetConfig+0x2e8>
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388e:	d00b      	beq.n	80038a8 <UART_SetConfig+0x2b0>
 8003890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003894:	d824      	bhi.n	80038e0 <UART_SetConfig+0x2e8>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <UART_SetConfig+0x2aa>
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	d006      	beq.n	80038ae <UART_SetConfig+0x2b6>
 80038a0:	e01e      	b.n	80038e0 <UART_SetConfig+0x2e8>
 80038a2:	2300      	movs	r3, #0
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e04b      	b.n	8003940 <UART_SetConfig+0x348>
 80038a8:	2302      	movs	r3, #2
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e048      	b.n	8003940 <UART_SetConfig+0x348>
 80038ae:	2304      	movs	r3, #4
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e045      	b.n	8003940 <UART_SetConfig+0x348>
 80038b4:	2308      	movs	r3, #8
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e042      	b.n	8003940 <UART_SetConfig+0x348>
 80038ba:	bf00      	nop
 80038bc:	efff69f3 	.word	0xefff69f3
 80038c0:	40011000 	.word	0x40011000
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40004400 	.word	0x40004400
 80038cc:	40004800 	.word	0x40004800
 80038d0:	40004c00 	.word	0x40004c00
 80038d4:	40005000 	.word	0x40005000
 80038d8:	40011400 	.word	0x40011400
 80038dc:	40007800 	.word	0x40007800
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e02c      	b.n	8003940 <UART_SetConfig+0x348>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a72      	ldr	r2, [pc, #456]	; (8003ab4 <UART_SetConfig+0x4bc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d125      	bne.n	800393c <UART_SetConfig+0x344>
 80038f0:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <UART_SetConfig+0x4c0>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038fe:	d017      	beq.n	8003930 <UART_SetConfig+0x338>
 8003900:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003904:	d817      	bhi.n	8003936 <UART_SetConfig+0x33e>
 8003906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390a:	d00b      	beq.n	8003924 <UART_SetConfig+0x32c>
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	d811      	bhi.n	8003936 <UART_SetConfig+0x33e>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <UART_SetConfig+0x326>
 8003916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391a:	d006      	beq.n	800392a <UART_SetConfig+0x332>
 800391c:	e00b      	b.n	8003936 <UART_SetConfig+0x33e>
 800391e:	2300      	movs	r3, #0
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e00d      	b.n	8003940 <UART_SetConfig+0x348>
 8003924:	2302      	movs	r3, #2
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e00a      	b.n	8003940 <UART_SetConfig+0x348>
 800392a:	2304      	movs	r3, #4
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e007      	b.n	8003940 <UART_SetConfig+0x348>
 8003930:	2308      	movs	r3, #8
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e004      	b.n	8003940 <UART_SetConfig+0x348>
 8003936:	2310      	movs	r3, #16
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e001      	b.n	8003940 <UART_SetConfig+0x348>
 800393c:	2310      	movs	r3, #16
 800393e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003948:	d15b      	bne.n	8003a02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800394a:	7ffb      	ldrb	r3, [r7, #31]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d828      	bhi.n	80039a2 <UART_SetConfig+0x3aa>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <UART_SetConfig+0x360>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	080039a3 	.word	0x080039a3
 8003968:	08003993 	.word	0x08003993
 800396c:	080039a3 	.word	0x080039a3
 8003970:	080039a3 	.word	0x080039a3
 8003974:	080039a3 	.word	0x080039a3
 8003978:	0800399b 	.word	0x0800399b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800397c:	f7fe fb40 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8003980:	61b8      	str	r0, [r7, #24]
        break;
 8003982:	e013      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7fe fb50 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 8003988:	61b8      	str	r0, [r7, #24]
        break;
 800398a:	e00f      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800398c:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <UART_SetConfig+0x4c4>)
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e00c      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003992:	f7fe fa23 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8003996:	61b8      	str	r0, [r7, #24]
        break;
 8003998:	e008      	b.n	80039ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399e:	61bb      	str	r3, [r7, #24]
        break;
 80039a0:	e004      	b.n	80039ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	77bb      	strb	r3, [r7, #30]
        break;
 80039aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d074      	beq.n	8003a9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	005a      	lsls	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d916      	bls.n	80039fc <UART_SetConfig+0x404>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d212      	bcs.n	80039fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f023 030f 	bic.w	r3, r3, #15
 80039de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	89fa      	ldrh	r2, [r7, #14]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e04f      	b.n	8003a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77bb      	strb	r3, [r7, #30]
 8003a00:	e04c      	b.n	8003a9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d828      	bhi.n	8003a5a <UART_SetConfig+0x462>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x418>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a5b 	.word	0x08003a5b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a5b 	.word	0x08003a5b
 8003a28:	08003a5b 	.word	0x08003a5b
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a53 	.word	0x08003a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7fe fae4 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8003a38:	61b8      	str	r0, [r7, #24]
        break;
 8003a3a:	e013      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7fe faf4 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 8003a40:	61b8      	str	r0, [r7, #24]
        break;
 8003a42:	e00f      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <UART_SetConfig+0x4c4>)
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e00c      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	f7fe f9c7 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8003a4e:	61b8      	str	r0, [r7, #24]
        break;
 8003a50:	e008      	b.n	8003a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a56:	61bb      	str	r3, [r7, #24]
        break;
 8003a58:	e004      	b.n	8003a64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	77bb      	strb	r3, [r7, #30]
        break;
 8003a62:	bf00      	nop
    }

    if (pclk != 0U)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	085a      	lsrs	r2, r3, #1
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d909      	bls.n	8003a98 <UART_SetConfig+0x4a0>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d205      	bcs.n	8003a98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e001      	b.n	8003a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40007c00 	.word	0x40007c00
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	00f42400 	.word	0x00f42400

08003ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d10a      	bne.n	8003bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c14:	f7fd f8ce 	bl	8000db4 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d10e      	bne.n	8003c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f817 	bl	8003c6a <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e00d      	b.n	8003c62 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b09c      	sub	sp, #112	; 0x70
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4613      	mov	r3, r2
 8003c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	e0a5      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	f000 80a1 	beq.w	8003dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fd f895 	bl	8000db4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d13e      	bne.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e6      	bne.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e5      	bne.n	8003cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e067      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d04f      	beq.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d36:	d147      	bne.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
 8003d62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	613b      	str	r3, [r7, #16]
   return(result);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d94:	623a      	str	r2, [r7, #32]
 8003d96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	69f9      	ldr	r1, [r7, #28]
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e010      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	f43f af4a 	beq.w	8003c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3770      	adds	r7, #112	; 0x70
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df4:	b084      	sub	sp, #16
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	f107 001c 	add.w	r0, r7, #28
 8003e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d120      	bne.n	8003e4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <USB_CoreInit+0xac>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa92 	bl	800436c <USB_CoreReset>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	e010      	b.n	8003e70 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa86 	bl	800436c <USB_CoreReset>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10b      	bne.n	8003e8e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f043 0206 	orr.w	r2, r3, #6
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e9a:	b004      	add	sp, #16
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	ffbdffbf 	.word	0xffbdffbf

08003ea4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 0201 	bic.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d115      	bne.n	8003f14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	f7fc ff69 	bl	8000dcc <HAL_Delay>
      ms++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fa25 	bl	8004350 <USB_GetMode>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d01e      	beq.n	8003f4a <USB_SetCurrentMode+0x84>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b31      	cmp	r3, #49	; 0x31
 8003f10:	d9f0      	bls.n	8003ef4 <USB_SetCurrentMode+0x2e>
 8003f12:	e01a      	b.n	8003f4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f26:	2001      	movs	r0, #1
 8003f28:	f7fc ff50 	bl	8000dcc <HAL_Delay>
      ms++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa0c 	bl	8004350 <USB_GetMode>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <USB_SetCurrentMode+0x84>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b31      	cmp	r3, #49	; 0x31
 8003f42:	d9f0      	bls.n	8003f26 <USB_SetCurrentMode+0x60>
 8003f44:	e001      	b.n	8003f4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e005      	b.n	8003f56 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b32      	cmp	r3, #50	; 0x32
 8003f4e:	d101      	bne.n	8003f54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f60:	b084      	sub	sp, #16
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	e009      	b.n	8003f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3340      	adds	r3, #64	; 0x40
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3301      	adds	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b0e      	cmp	r3, #14
 8003f98:	d9f2      	bls.n	8003f80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11c      	bne.n	8003fda <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fae:	f043 0302 	orr.w	r3, r3, #2
 8003fb2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e005      	b.n	8003fe6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	461a      	mov	r2, r3
 8004002:	680b      	ldr	r3, [r1, #0]
 8004004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10c      	bne.n	8004026 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004012:	2100      	movs	r1, #0
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f961 	bl	80042dc <USB_SetDevSpeed>
 800401a:	e008      	b.n	800402e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800401c:	2101      	movs	r1, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f95c 	bl	80042dc <USB_SetDevSpeed>
 8004024:	e003      	b.n	800402e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004026:	2103      	movs	r1, #3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f957 	bl	80042dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800402e:	2110      	movs	r1, #16
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8f3 	bl	800421c <USB_FlushTxFifo>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f91d 	bl	8004280 <USB_FlushRxFifo>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	461a      	mov	r2, r3
 8004058:	2300      	movs	r3, #0
 800405a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	461a      	mov	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	461a      	mov	r2, r3
 8004070:	2300      	movs	r3, #0
 8004072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e043      	b.n	8004102 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800408c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004090:	d118      	bne.n	80040c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e013      	b.n	80040d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e008      	b.n	80040d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	461a      	mov	r2, r3
 80040f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3301      	adds	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d3b7      	bcc.n	800407a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e043      	b.n	8004198 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004126:	d118      	bne.n	800415a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e013      	b.n	800416c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e008      	b.n	800416c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3b7      	bcc.n	8004110 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f043 0210 	orr.w	r2, r3, #16
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <USB_DevInit+0x2b4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <USB_DevInit+0x2b8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004210:	b004      	add	sp, #16
 8004212:	4770      	bx	lr
 8004214:	803c3800 	.word	0x803c3800
 8004218:	40000004 	.word	0x40000004

0800421c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	4a12      	ldr	r2, [pc, #72]	; (800427c <USB_FlushTxFifo+0x60>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e01a      	b.n	8004270 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	daf3      	bge.n	800422a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <USB_FlushTxFifo+0x60>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e006      	b.n	8004270 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b20      	cmp	r3, #32
 800426c:	d0f1      	beq.n	8004252 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	00030d40 	.word	0x00030d40

08004280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3301      	adds	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <USB_FlushRxFifo+0x58>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e017      	b.n	80042cc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	daf3      	bge.n	800428c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2210      	movs	r2, #16
 80042ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3301      	adds	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <USB_FlushRxFifo+0x58>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e006      	b.n	80042cc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d0f1      	beq.n	80042ae <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	00030d40 	.word	0x00030d40

080042dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042fc:	4313      	orrs	r3, r2
 80042fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004328:	f023 0303 	bic.w	r3, r3, #3
 800432c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0301 	and.w	r3, r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <USB_CoreReset+0x60>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e01a      	b.n	80043be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	daf3      	bge.n	8004378 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <USB_CoreReset+0x60>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e006      	b.n	80043be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d0f1      	beq.n	80043a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	00030d40 	.word	0x00030d40

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4d0d      	ldr	r5, [pc, #52]	; (8004408 <__libc_init_array+0x38>)
 80043d4:	4c0d      	ldr	r4, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	2600      	movs	r6, #0
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	4d0b      	ldr	r5, [pc, #44]	; (8004410 <__libc_init_array+0x40>)
 80043e2:	4c0c      	ldr	r4, [pc, #48]	; (8004414 <__libc_init_array+0x44>)
 80043e4:	f000 f820 	bl	8004428 <_init>
 80043e8:	1b64      	subs	r4, r4, r5
 80043ea:	10a4      	asrs	r4, r4, #2
 80043ec:	2600      	movs	r6, #0
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	08004460 	.word	0x08004460
 800440c:	08004460 	.word	0x08004460
 8004410:	08004460 	.word	0x08004460
 8004414:	08004464 	.word	0x08004464

08004418 <memset>:
 8004418:	4402      	add	r2, r0
 800441a:	4603      	mov	r3, r0
 800441c:	4293      	cmp	r3, r2
 800441e:	d100      	bne.n	8004422 <memset+0xa>
 8004420:	4770      	bx	lr
 8004422:	f803 1b01 	strb.w	r1, [r3], #1
 8004426:	e7f9      	b.n	800441c <memset+0x4>

08004428 <_init>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	bf00      	nop
 800442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442e:	bc08      	pop	{r3}
 8004430:	469e      	mov	lr, r3
 8004432:	4770      	bx	lr

08004434 <_fini>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr
