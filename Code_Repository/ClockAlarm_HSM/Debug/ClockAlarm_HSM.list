
ClockAlarm_HSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007304  08007304  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800730c  0800730c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08007384  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08007384  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014462  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ce  00000000  00000000  00034502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00036dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00037d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002878d  00000000  00000000  00038be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e3d  00000000  00000000  00061375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fda2c  00000000  00000000  000741b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab4  00000000  00000000  00171c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007184 	.word	0x08007184

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007184 	.word	0x08007184

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Clock_Alarm_get_curr_time>:
/*.$define${HSMs::Clock_Alarm} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${HSMs::Clock_Alarm} ....................................................*/
uint32_t Clock_Alarm_curr_time;
Clock_Alarm Clock_Alarm_obj;
/*.${HSMs::Clock_Alarm::get_curr_time} .....................................*/
static uint32_t Clock_Alarm_get_curr_time(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim6);
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <Clock_Alarm_get_curr_time+0x24>)
 80005cc:	f004 fa78 	bl	8004ac0 <HAL_TIM_Base_Stop_IT>
    uint32_t temp;
    temp = Clock_Alarm_curr_time;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <Clock_Alarm_get_curr_time+0x28>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	607b      	str	r3, [r7, #4]
    HAL_TIM_Base_Start_IT(&htim6);
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <Clock_Alarm_get_curr_time+0x24>)
 80005d8:	f004 f9fa 	bl	80049d0 <HAL_TIM_Base_Start_IT>
    return temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000c4 	.word	0x200000c4
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <Clock_Alarm_update_curr_time>:

/*.${HSMs::Clock_Alarm::update_curr_time} ..................................*/
static void Clock_Alarm_update_curr_time(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
    if(++Clock_Alarm_curr_time == MAX_TIME){
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <Clock_Alarm_update_curr_time+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <Clock_Alarm_update_curr_time+0x28>)
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <Clock_Alarm_update_curr_time+0x28>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <Clock_Alarm_update_curr_time+0x2c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d102      	bne.n	800060e <Clock_Alarm_update_curr_time+0x1e>
        Clock_Alarm_curr_time = 0;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <Clock_Alarm_update_curr_time+0x28>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
    }
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	2000008c 	.word	0x2000008c
 800061c:	000d2f00 	.word	0x000d2f00

08000620 <Clock_Alarm_set_curr_time>:

/*.${HSMs::Clock_Alarm::set_curr_time} .....................................*/
static void Clock_Alarm_set_curr_time(uint32_t new_curr_time) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Stop_IT(&htim6);
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <Clock_Alarm_set_curr_time+0x24>)
 800062a:	f004 fa49 	bl	8004ac0 <HAL_TIM_Base_Stop_IT>
    Clock_Alarm_curr_time = new_curr_time;
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <Clock_Alarm_set_curr_time+0x28>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <Clock_Alarm_set_curr_time+0x24>)
 8000636:	f004 f9cb 	bl	80049d0 <HAL_TIM_Base_Start_IT>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000c4 	.word	0x200000c4
 8000648:	2000008c 	.word	0x2000008c

0800064c <Clock_Alarm_display_curr_time>:

/*.${HSMs::Clock_Alarm::display_curr_time} .................................*/
static void Clock_Alarm_display_curr_time(Clock_Alarm * const me, uint8_t row, uint8_t column) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b090      	sub	sp, #64	; 0x40
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
 8000658:	4613      	mov	r3, r2
 800065a:	70bb      	strb	r3, [r7, #2]
    char time_as_string[30];
    uint32_t time_;
    char dumbuf[10];

    uint32_t time24h = Clock_Alarm_get_curr_time(); //convert to number of seconds
 800065c:	f7ff ffb2 	bl	80005c4 <Clock_Alarm_get_curr_time>
 8000660:	63f8      	str	r0, [r7, #60]	; 0x3c
    uint8_t ss = time24h % 10U;       //extract sub-second to append later
 8000662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <Clock_Alarm_display_curr_time+0x104>)
 8000666:	fba3 2301 	umull	r2, r3, r3, r1
 800066a:	08da      	lsrs	r2, r3, #3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	1aca      	subs	r2, r1, r3
 8000676:	4613      	mov	r3, r2
 8000678:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    time24h /= 10;
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	4a34      	ldr	r2, [pc, #208]	; (8000750 <Clock_Alarm_display_curr_time+0x104>)
 8000680:	fba2 2303 	umull	r2, r3, r2, r3
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
    time_ = (me->time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7d5b      	ldrb	r3, [r3, #21]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d004      	beq.n	800069a <Clock_Alarm_display_curr_time+0x4e>
 8000690:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000692:	f001 fd19 	bl	80020c8 <convert_24hformat_to_12h>
 8000696:	4603      	mov	r3, r0
 8000698:	e000      	b.n	800069c <Clock_Alarm_display_curr_time+0x50>
 800069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
    memset(time_as_string,0x00,sizeof(time_as_string));
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	221e      	movs	r2, #30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 faa6 	bl	8005bf8 <memset>
    strcat(time_as_string,integertime_to_string(time_)); //hh:mm:ss
 80006ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006ae:	f001 fd91 	bl	80021d4 <integertime_to_string>
 80006b2:	4602      	mov	r2, r0
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fc18 	bl	8005ef0 <strcat>
    strcat(time_as_string,".");
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fda3 	bl	8000210 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4413      	add	r3, r2
 80006d4:	491f      	ldr	r1, [pc, #124]	; (8000754 <Clock_Alarm_display_curr_time+0x108>)
 80006d6:	461a      	mov	r2, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	8013      	strh	r3, [r2, #0]
    sprintf(dumbuf,"%d",ss);
 80006de:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	491c      	ldr	r1, [pc, #112]	; (8000758 <Clock_Alarm_display_curr_time+0x10c>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 fbe1 	bl	8005eb0 <siprintf>
    strcat(time_as_string,dumbuf);
 80006ee:	f107 0208 	add.w	r2, r7, #8
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fbf9 	bl	8005ef0 <strcat>

    /*if mode is 12H , concatenate  am/pm information */
    if(me->time_mode == MODE_12H){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7d5b      	ldrb	r3, [r3, #21]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d118      	bne.n	8000738 <Clock_Alarm_display_curr_time+0xec>
        strcat(time_as_string," ");
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd80 	bl	8000210 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4413      	add	r3, r2
 800071a:	4910      	ldr	r1, [pc, #64]	; (800075c <Clock_Alarm_display_curr_time+0x110>)
 800071c:	461a      	mov	r2, r3
 800071e:	460b      	mov	r3, r1
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	8013      	strh	r3, [r2, #0]
        strcat(time_as_string,get_am_or_pm(time24h));
 8000724:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000726:	f001 fcf9 	bl	800211c <get_am_or_pm>
 800072a:	4602      	mov	r2, r0
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fbdc 	bl	8005ef0 <strcat>
    }

    display_write(time_as_string,row,column);
 8000738:	78ba      	ldrb	r2, [r7, #2]
 800073a:	78f9      	ldrb	r1, [r7, #3]
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fd27 	bl	8002194 <display_write>
}
 8000746:	bf00      	nop
 8000748:	3740      	adds	r7, #64	; 0x40
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	cccccccd 	.word	0xcccccccd
 8000754:	0800719c 	.word	0x0800719c
 8000758:	080071a0 	.word	0x080071a0
 800075c:	080071a4 	.word	0x080071a4

08000760 <Clock_Alarm_display_clock_setting_time>:

/*.${HSMs::Clock_Alarm::display_clock_setting_time} ........................*/
static void Clock_Alarm_display_clock_setting_time(Clock_Alarm * const me, uint8_t row, uint8_t column) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
 800076c:	4613      	mov	r3, r2
 800076e:	70bb      	strb	r3, [r7, #2]
    char time_as_string[30];
    static char ampm[2];


    memset(ampm,0x00,sizeof(ampm));
 8000770:	2202      	movs	r2, #2
 8000772:	2100      	movs	r1, #0
 8000774:	4825      	ldr	r0, [pc, #148]	; (800080c <Clock_Alarm_display_clock_setting_time+0xac>)
 8000776:	f005 fa3f 	bl	8005bf8 <memset>
    memset(time_as_string,0x00,sizeof(time_as_string));
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	221e      	movs	r2, #30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fa38 	bl	8005bf8 <memset>
    strcat(time_as_string,integertime_to_string(me->temp_time)); //hh:mm:ss
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fd21 	bl	80021d4 <integertime_to_string>
 8000792:	4602      	mov	r2, r0
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fba8 	bl	8005ef0 <strcat>



    /*concatenate  am/pm information */
    if(me->temp_format != FORMAT_24H){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7d9b      	ldrb	r3, [r3, #22]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d025      	beq.n	80007f4 <Clock_Alarm_display_clock_setting_time+0x94>
        strcat(time_as_string," ");
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd2f 	bl	8000210 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4413      	add	r3, r2
 80007bc:	4914      	ldr	r1, [pc, #80]	; (8000810 <Clock_Alarm_display_clock_setting_time+0xb0>)
 80007be:	461a      	mov	r2, r3
 80007c0:	460b      	mov	r3, r1
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	8013      	strh	r3, [r2, #0]

        if(me->temp_format == FORMAT_AM){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7d9b      	ldrb	r3, [r3, #22]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d106      	bne.n	80007dc <Clock_Alarm_display_clock_setting_time+0x7c>
            ampm[0] = 'A';
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <Clock_Alarm_display_clock_setting_time+0xac>)
 80007d0:	2241      	movs	r2, #65	; 0x41
 80007d2:	701a      	strb	r2, [r3, #0]
            ampm[1] = 'M';
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <Clock_Alarm_display_clock_setting_time+0xac>)
 80007d6:	224d      	movs	r2, #77	; 0x4d
 80007d8:	705a      	strb	r2, [r3, #1]
 80007da:	e005      	b.n	80007e8 <Clock_Alarm_display_clock_setting_time+0x88>
        }
        else{
            ampm[0] = 'P';
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <Clock_Alarm_display_clock_setting_time+0xac>)
 80007de:	2250      	movs	r2, #80	; 0x50
 80007e0:	701a      	strb	r2, [r3, #0]
            ampm[1] = 'M';
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <Clock_Alarm_display_clock_setting_time+0xac>)
 80007e4:	224d      	movs	r2, #77	; 0x4d
 80007e6:	705a      	strb	r2, [r3, #1]
        }

        strcat(time_as_string,ampm);
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <Clock_Alarm_display_clock_setting_time+0xac>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fb7e 	bl	8005ef0 <strcat>
    }


    display_write(time_as_string,row,column);
 80007f4:	78ba      	ldrb	r2, [r7, #2]
 80007f6:	78f9      	ldrb	r1, [r7, #3]
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fcc9 	bl	8002194 <display_write>
}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000b0 	.word	0x200000b0
 8000810:	080071a4 	.word	0x080071a4

08000814 <Clock_Alarm_initial>:

/*.${HSMs::Clock_Alarm::SM} ................................................*/
static QState Clock_Alarm_initial(Clock_Alarm * const me, void const * const par) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
    /*.${HSMs::Clock_Alarm::SM::initial} */
    Clock_Alarm_set_curr_time(INITIAL_CURR_TIME);
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <Clock_Alarm_initial+0x3c>)
 8000820:	f7ff fefe 	bl	8000620 <Clock_Alarm_set_curr_time>
    me->alarm_time = INITIAL_ALARM_TIME;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f44f 42e1 	mov.w	r2, #28800	; 0x7080
 800082a:	611a      	str	r2, [r3, #16]
    me->time_mode = MODE_12H;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	755a      	strb	r2, [r3, #21]
    me->alarm_status = ALARM_OFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	751a      	strb	r2, [r3, #20]
    /* state history attributes */
    me->hist_Clock = Q_STATE_CAST(&Clock_Alarm_Ticking);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <Clock_Alarm_initial+0x40>)
 800083c:	61da      	str	r2, [r3, #28]
    return Q_TRAN(&Clock_Alarm_Ticking);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <Clock_Alarm_initial+0x40>)
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	2308      	movs	r3, #8
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	00059614 	.word	0x00059614
 8000854:	080008d1 	.word	0x080008d1

08000858 <Clock_Alarm_Clock>:
/*.${HSMs::Clock_Alarm::SM::Clock} .........................................*/
static QState Clock_Alarm_Clock(Clock_Alarm * const me, QEvt const * const e) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d002      	beq.n	8000870 <Clock_Alarm_Clock+0x18>
 800086a:	2b07      	cmp	r3, #7
 800086c:	d007      	beq.n	800087e <Clock_Alarm_Clock+0x26>
 800086e:	e01e      	b.n	80008ae <Clock_Alarm_Clock+0x56>
        /*.${HSMs::Clock_Alarm::SM::Clock} */
        case Q_EXIT_SIG: {
            /* save deep history */
            me->hist_Clock = QHsm_state(me);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	61da      	str	r2, [r3, #28]
            status_ = Q_HANDLED();
 8000878:	2303      	movs	r3, #3
 800087a:	60fb      	str	r3, [r7, #12]
            break;
 800087c:	e01d      	b.n	80008ba <Clock_Alarm_Clock+0x62>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::ALARM} */
        case ALARM_SIG: {
            /*.${HSMs::Clock_Alarm::SM::Clock::ALARM::[(me->alarm_status==ALARM_ON&&Cl~} */
            if ((me->alarm_status == ALARM_ON && Clock_Alarm_get_curr_time()/10 == me->alarm_time)) {
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	7d1b      	ldrb	r3, [r3, #20]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d110      	bne.n	80008a8 <Clock_Alarm_Clock+0x50>
 8000886:	f7ff fe9d 	bl	80005c4 <Clock_Alarm_get_curr_time>
 800088a:	4603      	mov	r3, r0
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <Clock_Alarm_Clock+0x6c>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	08da      	lsrs	r2, r3, #3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d105      	bne.n	80008a8 <Clock_Alarm_Clock+0x50>
                status_ = Q_TRAN(&Clock_Alarm_Alarm_Notify);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <Clock_Alarm_Clock+0x70>)
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	2308      	movs	r3, #8
 80008a4:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 80008a6:	e008      	b.n	80008ba <Clock_Alarm_Clock+0x62>
                status_ = Q_UNHANDLED();
 80008a8:	2302      	movs	r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
            break;
 80008ac:	e005      	b.n	80008ba <Clock_Alarm_Clock+0x62>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <Clock_Alarm_Clock+0x74>)
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
            break;
 80008b8:	bf00      	nop
        }
    }
    return status_;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	cccccccd 	.word	0xcccccccd
 80008c8:	08001ead 	.word	0x08001ead
 80008cc:	080028d9 	.word	0x080028d9

080008d0 <Clock_Alarm_Ticking>:
/*.${HSMs::Clock_Alarm::SM::Clock::Ticking} ................................*/
static QState Clock_Alarm_Ticking(Clock_Alarm * const me, QEvt const * const e) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	2b07      	cmp	r3, #7
 80008e2:	d85e      	bhi.n	80009a2 <Clock_Alarm_Ticking+0xd2>
 80008e4:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <Clock_Alarm_Ticking+0x1c>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	0800090d 	.word	0x0800090d
 80008f0:	080009a3 	.word	0x080009a3
 80008f4:	080009a3 	.word	0x080009a3
 80008f8:	0800091d 	.word	0x0800091d
 80008fc:	08000987 	.word	0x08000987
 8000900:	080009a3 	.word	0x080009a3
 8000904:	080009a3 	.word	0x080009a3
 8000908:	08000993 	.word	0x08000993
        /*.${HSMs::Clock_Alarm::SM::Clock::Ticking} */
        case Q_ENTRY_SIG: {
            Clock_Alarm_display_curr_time(me,TICKING_CURR_TIME_ROW,TICKING_CURR_TIME_COL);
 800090c:	2203      	movs	r2, #3
 800090e:	2100      	movs	r1, #0
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff fe9b 	bl	800064c <Clock_Alarm_display_curr_time>
            status_ = Q_HANDLED();
 8000916:	2303      	movs	r3, #3
 8000918:	60fb      	str	r3, [r7, #12]
            break;
 800091a:	e048      	b.n	80009ae <Clock_Alarm_Ticking+0xde>
        /*.${HSMs::Clock_Alarm::SM::Clock::Ticking::SET} */
        case SET_SIG: {

            char *ampm;

            me->temp_time = Clock_Alarm_get_curr_time()/10;
 800091c:	f7ff fe52 	bl	80005c4 <Clock_Alarm_get_curr_time>
 8000920:	4603      	mov	r3, r0
 8000922:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <Clock_Alarm_Ticking+0xe8>)
 8000924:	fba2 2303 	umull	r2, r3, r2, r3
 8000928:	08da      	lsrs	r2, r3, #3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60da      	str	r2, [r3, #12]
            if(me->time_mode == MODE_12H){
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7d5b      	ldrb	r3, [r3, #21]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d11e      	bne.n	8000974 <Clock_Alarm_Ticking+0xa4>

                ampm = get_am_or_pm(me->temp_time);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fbee 	bl	800211c <get_am_or_pm>
 8000940:	60b8      	str	r0, [r7, #8]

                if(*(ampm+0) == 'A' && *(ampm+1) == 'M'){
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b41      	cmp	r3, #65	; 0x41
 8000948:	d108      	bne.n	800095c <Clock_Alarm_Ticking+0x8c>
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3301      	adds	r3, #1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b4d      	cmp	r3, #77	; 0x4d
 8000952:	d103      	bne.n	800095c <Clock_Alarm_Ticking+0x8c>
                    me->temp_format = FORMAT_AM;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	759a      	strb	r2, [r3, #22]
 800095a:	e002      	b.n	8000962 <Clock_Alarm_Ticking+0x92>
                }
                else{
                    me->temp_format = FORMAT_PM;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2202      	movs	r2, #2
 8000960:	759a      	strb	r2, [r3, #22]
                }
                me->temp_time = convert_24hformat_to_12h(me->temp_time);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fbae 	bl	80020c8 <convert_24hformat_to_12h>
 800096c:	4602      	mov	r2, r0
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	e002      	b.n	800097a <Clock_Alarm_Ticking+0xaa>
            }
            else
                me->temp_format = FORMAT_24H;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	759a      	strb	r2, [r3, #22]
            status_ = Q_TRAN(&Clock_Alarm_Clock_Setting);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <Clock_Alarm_Ticking+0xec>)
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	2308      	movs	r3, #8
 8000982:	60fb      	str	r3, [r7, #12]
            break;
 8000984:	e013      	b.n	80009ae <Clock_Alarm_Ticking+0xde>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Ticking::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Alarm_Setting);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <Clock_Alarm_Ticking+0xf0>)
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	2308      	movs	r3, #8
 800098e:	60fb      	str	r3, [r7, #12]
            break;
 8000990:	e00d      	b.n	80009ae <Clock_Alarm_Ticking+0xde>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Ticking::TICK} */
        case TICK_SIG: {
            Clock_Alarm_display_curr_time(me,TICKING_CURR_TIME_ROW,TICKING_CURR_TIME_COL);
 8000992:	2203      	movs	r2, #3
 8000994:	2100      	movs	r1, #0
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fe58 	bl	800064c <Clock_Alarm_display_curr_time>
            status_ = Q_HANDLED();
 800099c:	2303      	movs	r3, #3
 800099e:	60fb      	str	r3, [r7, #12]
            break;
 80009a0:	e005      	b.n	80009ae <Clock_Alarm_Ticking+0xde>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <Clock_Alarm_Ticking+0xf4>)
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
            break;
 80009ac:	bf00      	nop
        }
    }
    return status_;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	cccccccd 	.word	0xcccccccd
 80009bc:	08000a19 	.word	0x08000a19
 80009c0:	080013a1 	.word	0x080013a1
 80009c4:	08000859 	.word	0x08000859

080009c8 <Clock_Alarm_Settings>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings} ...............................*/
static QState Clock_Alarm_Settings(Clock_Alarm * const me, QEvt const * const e) {
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	d007      	beq.n	80009ea <Clock_Alarm_Settings+0x22>
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d10b      	bne.n	80009f6 <Clock_Alarm_Settings+0x2e>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::ABRT} */
        case ABRT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Ticking);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <Clock_Alarm_Settings+0x48>)
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	2308      	movs	r3, #8
 80009e6:	60fb      	str	r3, [r7, #12]
            break;
 80009e8:	e00b      	b.n	8000a02 <Clock_Alarm_Settings+0x3a>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Ticking);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <Clock_Alarm_Settings+0x48>)
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	2308      	movs	r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
            break;
 80009f4:	e005      	b.n	8000a02 <Clock_Alarm_Settings+0x3a>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <Clock_Alarm_Settings+0x4c>)
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
            break;
 8000a00:	bf00      	nop
        }
    }
    return status_;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	080008d1 	.word	0x080008d1
 8000a14:	08000859 	.word	0x08000859

08000a18 <Clock_Alarm_Clock_Setting>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting} ................*/
static QState Clock_Alarm_Clock_Setting(Clock_Alarm * const me, QEvt const * const e) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	d014      	beq.n	8000a54 <Clock_Alarm_Clock_Setting+0x3c>
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	dc39      	bgt.n	8000aa2 <Clock_Alarm_Clock_Setting+0x8a>
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d002      	beq.n	8000a38 <Clock_Alarm_Clock_Setting+0x20>
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d008      	beq.n	8000a48 <Clock_Alarm_Clock_Setting+0x30>
 8000a36:	e034      	b.n	8000aa2 <Clock_Alarm_Clock_Setting+0x8a>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting} */
        case Q_ENTRY_SIG: {
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8000a38:	2203      	movs	r2, #3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fe8f 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            status_ = Q_HANDLED();
 8000a42:	2303      	movs	r3, #3
 8000a44:	60fb      	str	r3, [r7, #12]
            break;
 8000a46:	e032      	b.n	8000aae <Clock_Alarm_Clock_Setting+0x96>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_hour_d1);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <Clock_Alarm_Clock_Setting+0xa0>)
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	2308      	movs	r3, #8
 8000a50:	60fb      	str	r3, [r7, #12]
            break;
 8000a52:	e02c      	b.n	8000aae <Clock_Alarm_Clock_Setting+0x96>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::OK} */
        case OK_SIG: {
            if(me->temp_format != FORMAT_24H){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7d9b      	ldrb	r3, [r3, #22]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00e      	beq.n	8000a7a <Clock_Alarm_Clock_Setting+0x62>
                me->temp_time = convert_12hformat_to_24h( me->temp_time,(time_format_t)me->temp_format);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7d9b      	ldrb	r3, [r3, #22]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4610      	mov	r0, r2
 8000a68:	f001 fb00 	bl	800206c <convert_12hformat_to_24h>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60da      	str	r2, [r3, #12]
                me->time_mode = MODE_12H;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2201      	movs	r2, #1
 8000a76:	755a      	strb	r2, [r3, #21]
 8000a78:	e002      	b.n	8000a80 <Clock_Alarm_Clock_Setting+0x68>
            }else{
                me->time_mode = MODE_24H;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	755a      	strb	r2, [r3, #21]
            }

            me->temp_time *= 10UL;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60da      	str	r2, [r3, #12]
            Clock_Alarm_set_curr_time(me->temp_time);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fdc2 	bl	8000620 <Clock_Alarm_set_curr_time>
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::OK::[0]} */
            if (0) {
                status_ = Q_HANDLED();
            }
            else {
                status_ = Q_UNHANDLED();
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
            }
            break;
 8000aa0:	e005      	b.n	8000aae <Clock_Alarm_Clock_Setting+0x96>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Settings);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <Clock_Alarm_Clock_Setting+0xa4>)
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
            break;
 8000aac:	bf00      	nop
        }
    }
    return status_;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08000ac1 	.word	0x08000ac1
 8000abc:	080009c9 	.word	0x080009c9

08000ac0 <Clock_Alarm_cs_hour_d1>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d1} ....*/
static QState Clock_Alarm_cs_hour_d1(Clock_Alarm * const me, QEvt const * const e) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d04e      	beq.n	8000b70 <Clock_Alarm_cs_hour_d1+0xb0>
 8000ad2:	2b05      	cmp	r3, #5
 8000ad4:	dc52      	bgt.n	8000b7c <Clock_Alarm_cs_hour_d1+0xbc>
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d002      	beq.n	8000ae0 <Clock_Alarm_cs_hour_d1+0x20>
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d010      	beq.n	8000b00 <Clock_Alarm_cs_hour_d1+0x40>
 8000ade:	e04d      	b.n	8000b7c <Clock_Alarm_cs_hour_d1+0xbc>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d1} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f001 fb68 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT1(GET_HOUR(me->temp_time));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	4a29      	ldr	r2, [pc, #164]	; (8000b94 <Clock_Alarm_cs_hour_d1+0xd4>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	0bdb      	lsrs	r3, r3, #15
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8000afa:	2303      	movs	r3, #3
 8000afc:	60fb      	str	r3, [r7, #12]
            break;
 8000afe:	e043      	b.n	8000b88 <Clock_Alarm_cs_hour_d1+0xc8>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d1::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7ddb      	ldrb	r3, [r3, #23]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 3;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7dda      	ldrb	r2, [r3, #23]
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <Clock_Alarm_cs_hour_d1+0xd8>)
 8000b12:	fba3 1302 	umull	r1, r3, r3, r2
 8000b16:	0859      	lsrs	r1, r3, #1
 8000b18:	460b      	mov	r3, r1
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	440b      	add	r3, r1
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT1(GET_HOUR(me->temp_time)) * 10UL * 3600UL;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <Clock_Alarm_cs_hour_d1+0xd4>)
 8000b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b30:	0bdb      	lsrs	r3, r3, #15
 8000b32:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	60d3      	str	r3, [r2, #12]
            me->temp_time += (me->temp_digit * 10UL ) * 3600UL;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7ddb      	ldrb	r3, [r3, #23]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8000b4e:	fb01 f303 	mul.w	r3, r1, r3
 8000b52:	441a      	add	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8000b58:	2203      	movs	r2, #3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fdff 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
 8000b62:	2102      	movs	r1, #2
 8000b64:	2000      	movs	r0, #0
 8000b66:	f001 fb27 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	60fb      	str	r3, [r7, #12]
            break;
 8000b6e:	e00b      	b.n	8000b88 <Clock_Alarm_cs_hour_d1+0xc8>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d1::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_hour_d2);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <Clock_Alarm_cs_hour_d1+0xdc>)
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	2308      	movs	r3, #8
 8000b78:	60fb      	str	r3, [r7, #12]
            break;
 8000b7a:	e005      	b.n	8000b88 <Clock_Alarm_cs_hour_d1+0xc8>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <Clock_Alarm_cs_hour_d1+0xe0>)
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
            break;
 8000b86:	bf00      	nop
        }
    }
    return status_;
 8000b88:	68fb      	ldr	r3, [r7, #12]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	e90452d5 	.word	0xe90452d5
 8000b98:	aaaaaaab 	.word	0xaaaaaaab
 8000b9c:	08000ba5 	.word	0x08000ba5
 8000ba0:	08000a19 	.word	0x08000a19

08000ba4 <Clock_Alarm_cs_hour_d2>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d2} ....*/
static QState Clock_Alarm_cs_hour_d2(Clock_Alarm * const me, QEvt const * const e) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	2b05      	cmp	r3, #5
 8000bb4:	d063      	beq.n	8000c7e <Clock_Alarm_cs_hour_d2+0xda>
 8000bb6:	2b05      	cmp	r3, #5
 8000bb8:	dc67      	bgt.n	8000c8a <Clock_Alarm_cs_hour_d2+0xe6>
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d002      	beq.n	8000bc4 <Clock_Alarm_cs_hour_d2+0x20>
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d019      	beq.n	8000bf6 <Clock_Alarm_cs_hour_d2+0x52>
 8000bc2:	e062      	b.n	8000c8a <Clock_Alarm_cs_hour_d2+0xe6>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d2} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f001 faf6 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT2(GET_HOUR(me->temp_time));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <Clock_Alarm_cs_hour_d2+0xfc>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0ad9      	lsrs	r1, r3, #11
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <Clock_Alarm_cs_hour_d2+0x100>)
 8000bda:	fba3 2301 	umull	r2, r3, r3, r1
 8000bde:	08da      	lsrs	r2, r3, #3
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	1aca      	subs	r2, r1, r3
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	60fb      	str	r3, [r7, #12]
            break;
 8000bf4:	e04f      	b.n	8000c96 <Clock_Alarm_cs_hour_d2+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d2::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7ddb      	ldrb	r3, [r3, #23]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 10;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7dda      	ldrb	r2, [r3, #23]
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <Clock_Alarm_cs_hour_d2+0x100>)
 8000c08:	fba3 1302 	umull	r1, r3, r3, r2
 8000c0c:	08d9      	lsrs	r1, r3, #3
 8000c0e:	460b      	mov	r3, r1
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT2(GET_HOUR(me->temp_time)) * 3600UL;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68d8      	ldr	r0, [r3, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <Clock_Alarm_cs_hour_d2+0xfc>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0ad9      	lsrs	r1, r3, #11
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <Clock_Alarm_cs_hour_d2+0x100>)
 8000c30:	fba3 2301 	umull	r2, r3, r3, r1
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1aca      	subs	r2, r1, r3
 8000c40:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	1ac2      	subs	r2, r0, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit) * 3600UL;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7ddb      	ldrb	r3, [r3, #23]
 8000c56:	4619      	mov	r1, r3
 8000c58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000c5c:	fb01 f303 	mul.w	r3, r1, r3
 8000c60:	441a      	add	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8000c66:	2203      	movs	r2, #3
 8000c68:	2100      	movs	r1, #0
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fd78 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
 8000c70:	2103      	movs	r1, #3
 8000c72:	2000      	movs	r0, #0
 8000c74:	f001 faa0 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8000c78:	2303      	movs	r3, #3
 8000c7a:	60fb      	str	r3, [r7, #12]
            break;
 8000c7c:	e00b      	b.n	8000c96 <Clock_Alarm_cs_hour_d2+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_hour_d2::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_min_d1);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <Clock_Alarm_cs_hour_d2+0x104>)
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	2308      	movs	r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
            break;
 8000c88:	e005      	b.n	8000c96 <Clock_Alarm_cs_hour_d2+0xf2>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <Clock_Alarm_cs_hour_d2+0x108>)
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
            break;
 8000c94:	bf00      	nop
        }
    }
    return status_;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	91a2b3c5 	.word	0x91a2b3c5
 8000ca4:	cccccccd 	.word	0xcccccccd
 8000ca8:	08000cb1 	.word	0x08000cb1
 8000cac:	08000a19 	.word	0x08000a19

08000cb0 <Clock_Alarm_cs_min_d1>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d1} .....*/
static QState Clock_Alarm_cs_min_d1(Clock_Alarm * const me, QEvt const * const e) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d06b      	beq.n	8000d9a <Clock_Alarm_cs_min_d1+0xea>
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	dc6f      	bgt.n	8000da6 <Clock_Alarm_cs_min_d1+0xf6>
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d002      	beq.n	8000cd0 <Clock_Alarm_cs_min_d1+0x20>
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d01d      	beq.n	8000d0a <Clock_Alarm_cs_min_d1+0x5a>
 8000cce:	e06a      	b.n	8000da6 <Clock_Alarm_cs_min_d1+0xf6>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d1} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f001 fa70 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT1(GET_MIN(me->temp_time));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <Clock_Alarm_cs_min_d1+0x10c>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0959      	lsrs	r1, r3, #5
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <Clock_Alarm_cs_min_d1+0x10c>)
 8000ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8000cea:	095a      	lsrs	r2, r3, #5
 8000cec:	4613      	mov	r3, r2
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	1aca      	subs	r2, r1, r3
 8000cf6:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <Clock_Alarm_cs_min_d1+0x110>)
 8000cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8000d04:	2303      	movs	r3, #3
 8000d06:	60fb      	str	r3, [r7, #12]
            break;
 8000d08:	e053      	b.n	8000db2 <Clock_Alarm_cs_min_d1+0x102>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d1::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7ddb      	ldrb	r3, [r3, #23]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 6;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7dda      	ldrb	r2, [r3, #23]
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <Clock_Alarm_cs_min_d1+0x114>)
 8000d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d20:	0899      	lsrs	r1, r3, #2
 8000d22:	460b      	mov	r3, r1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	440b      	add	r3, r1
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT1(GET_MIN(me->temp_time)) * 10UL * 60UL;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68d8      	ldr	r0, [r3, #12]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <Clock_Alarm_cs_min_d1+0x10c>)
 8000d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d40:	0959      	lsrs	r1, r3, #5
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <Clock_Alarm_cs_min_d1+0x10c>)
 8000d44:	fba3 2301 	umull	r2, r3, r3, r1
 8000d48:	095a      	lsrs	r2, r3, #5
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	1aca      	subs	r2, r1, r3
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <Clock_Alarm_cs_min_d1+0x110>)
 8000d56:	fba3 2302 	umull	r2, r3, r3, r2
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	1ac2      	subs	r2, r0, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit * 10) * 60UL;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7ddb      	ldrb	r3, [r3, #23]
 8000d72:	4619      	mov	r1, r3
 8000d74:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000d78:	fb01 f303 	mul.w	r3, r1, r3
 8000d7c:	441a      	add	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8000d82:	2203      	movs	r2, #3
 8000d84:	2100      	movs	r1, #0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fcea 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f001 fa12 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8000d94:	2303      	movs	r3, #3
 8000d96:	60fb      	str	r3, [r7, #12]
            break;
 8000d98:	e00b      	b.n	8000db2 <Clock_Alarm_cs_min_d1+0x102>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d1::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_min_d2);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <Clock_Alarm_cs_min_d1+0x118>)
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	2308      	movs	r3, #8
 8000da2:	60fb      	str	r3, [r7, #12]
            break;
 8000da4:	e005      	b.n	8000db2 <Clock_Alarm_cs_min_d1+0x102>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <Clock_Alarm_cs_min_d1+0x11c>)
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
            break;
 8000db0:	bf00      	nop
        }
    }
    return status_;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	88888889 	.word	0x88888889
 8000dc0:	cccccccd 	.word	0xcccccccd
 8000dc4:	aaaaaaab 	.word	0xaaaaaaab
 8000dc8:	08000dd1 	.word	0x08000dd1
 8000dcc:	08000a19 	.word	0x08000a19

08000dd0 <Clock_Alarm_cs_min_d2>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d2} .....*/
static QState Clock_Alarm_cs_min_d2(Clock_Alarm * const me, QEvt const * const e) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d075      	beq.n	8000ece <Clock_Alarm_cs_min_d2+0xfe>
 8000de2:	2b05      	cmp	r3, #5
 8000de4:	dc79      	bgt.n	8000eda <Clock_Alarm_cs_min_d2+0x10a>
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d002      	beq.n	8000df0 <Clock_Alarm_cs_min_d2+0x20>
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d022      	beq.n	8000e34 <Clock_Alarm_cs_min_d2+0x64>
 8000dee:	e074      	b.n	8000eda <Clock_Alarm_cs_min_d2+0x10a>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d2} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
 8000df0:	2105      	movs	r1, #5
 8000df2:	2000      	movs	r0, #0
 8000df4:	f001 f9e0 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT2(GET_MIN(me->temp_time));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a3c      	ldr	r2, [pc, #240]	; (8000ef0 <Clock_Alarm_cs_min_d2+0x120>)
 8000dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000e02:	0959      	lsrs	r1, r3, #5
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <Clock_Alarm_cs_min_d2+0x120>)
 8000e06:	fba3 2301 	umull	r2, r3, r3, r1
 8000e0a:	095a      	lsrs	r2, r3, #5
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	1aca      	subs	r2, r1, r3
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <Clock_Alarm_cs_min_d2+0x124>)
 8000e18:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1c:	08d9      	lsrs	r1, r3, #3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1ad1      	subs	r1, r2, r3
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8000e2e:	2303      	movs	r3, #3
 8000e30:	60fb      	str	r3, [r7, #12]
            break;
 8000e32:	e058      	b.n	8000ee6 <Clock_Alarm_cs_min_d2+0x116>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d2::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7ddb      	ldrb	r3, [r3, #23]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 10;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7dda      	ldrb	r2, [r3, #23]
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <Clock_Alarm_cs_min_d2+0x124>)
 8000e46:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4a:	08d9      	lsrs	r1, r3, #3
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT2(GET_MIN(me->temp_time)) * 60UL;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68d8      	ldr	r0, [r3, #12]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <Clock_Alarm_cs_min_d2+0x120>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0959      	lsrs	r1, r3, #5
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <Clock_Alarm_cs_min_d2+0x120>)
 8000e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8000e72:	095a      	lsrs	r2, r3, #5
 8000e74:	4613      	mov	r3, r2
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	1aca      	subs	r2, r1, r3
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <Clock_Alarm_cs_min_d2+0x124>)
 8000e80:	fba3 1302 	umull	r1, r3, r3, r2
 8000e84:	08d9      	lsrs	r1, r3, #3
 8000e86:	460b      	mov	r3, r1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	1ad1      	subs	r1, r2, r3
 8000e90:	460b      	mov	r3, r1
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	1ac2      	subs	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit) * 60UL;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7ddb      	ldrb	r3, [r3, #23]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	1a5b      	subs	r3, r3, r1
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	441a      	add	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fc50 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f001 f978 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8000ec8:	2303      	movs	r3, #3
 8000eca:	60fb      	str	r3, [r7, #12]
            break;
 8000ecc:	e00b      	b.n	8000ee6 <Clock_Alarm_cs_min_d2+0x116>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_min_d2::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_sec_d1);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <Clock_Alarm_cs_min_d2+0x128>)
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	60fb      	str	r3, [r7, #12]
            break;
 8000ed8:	e005      	b.n	8000ee6 <Clock_Alarm_cs_min_d2+0x116>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <Clock_Alarm_cs_min_d2+0x12c>)
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
            break;
 8000ee4:	bf00      	nop
        }
    }
    return status_;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	88888889 	.word	0x88888889
 8000ef4:	cccccccd 	.word	0xcccccccd
 8000ef8:	08000f01 	.word	0x08000f01
 8000efc:	08000a19 	.word	0x08000a19

08000f00 <Clock_Alarm_cs_sec_d1>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d1} .....*/
static QState Clock_Alarm_cs_sec_d1(Clock_Alarm * const me, QEvt const * const e) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d063      	beq.n	8000fda <Clock_Alarm_cs_sec_d1+0xda>
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	dc67      	bgt.n	8000fe6 <Clock_Alarm_cs_sec_d1+0xe6>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d002      	beq.n	8000f20 <Clock_Alarm_cs_sec_d1+0x20>
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d019      	beq.n	8000f52 <Clock_Alarm_cs_sec_d1+0x52>
 8000f1e:	e062      	b.n	8000fe6 <Clock_Alarm_cs_sec_d1+0xe6>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d1} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
 8000f20:	2108      	movs	r1, #8
 8000f22:	2000      	movs	r0, #0
 8000f24:	f001 f948 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT1(GET_SEC(me->temp_time));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68d9      	ldr	r1, [r3, #12]
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <Clock_Alarm_cs_sec_d1+0xfc>)
 8000f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f32:	095a      	lsrs	r2, r3, #5
 8000f34:	4613      	mov	r3, r2
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	1a9b      	subs	r3, r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	1aca      	subs	r2, r1, r3
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <Clock_Alarm_cs_sec_d1+0x100>)
 8000f40:	fba3 2302 	umull	r2, r3, r3, r2
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	60fb      	str	r3, [r7, #12]
            break;
 8000f50:	e04f      	b.n	8000ff2 <Clock_Alarm_cs_sec_d1+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d1::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7ddb      	ldrb	r3, [r3, #23]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 6;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7dda      	ldrb	r2, [r3, #23]
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <Clock_Alarm_cs_sec_d1+0x104>)
 8000f64:	fba3 1302 	umull	r1, r3, r3, r2
 8000f68:	0899      	lsrs	r1, r3, #2
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	440b      	add	r3, r1
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT1(GET_SEC(me->temp_time)) * 10UL;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68d8      	ldr	r0, [r3, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68d9      	ldr	r1, [r3, #12]
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <Clock_Alarm_cs_sec_d1+0xfc>)
 8000f84:	fba3 2301 	umull	r2, r3, r3, r1
 8000f88:	095a      	lsrs	r2, r3, #5
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	1aca      	subs	r2, r1, r3
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <Clock_Alarm_cs_sec_d1+0x100>)
 8000f96:	fba3 2302 	umull	r2, r3, r3, r2
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	1ac2      	subs	r2, r0, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit * 10UL );
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7ddb      	ldrb	r3, [r3, #23]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	441a      	add	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff fbca 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f001 f8f2 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	60fb      	str	r3, [r7, #12]
            break;
 8000fd8:	e00b      	b.n	8000ff2 <Clock_Alarm_cs_sec_d1+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d1::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_sec_d2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <Clock_Alarm_cs_sec_d1+0x108>)
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	60fb      	str	r3, [r7, #12]
            break;
 8000fe4:	e005      	b.n	8000ff2 <Clock_Alarm_cs_sec_d1+0xf2>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <Clock_Alarm_cs_sec_d1+0x10c>)
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
            break;
 8000ff0:	bf00      	nop
        }
    }
    return status_;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	88888889 	.word	0x88888889
 8001000:	cccccccd 	.word	0xcccccccd
 8001004:	aaaaaaab 	.word	0xaaaaaaab
 8001008:	08001011 	.word	0x08001011
 800100c:	08000a19 	.word	0x08000a19

08001010 <Clock_Alarm_cs_sec_d2>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d2} .....*/
static QState Clock_Alarm_cs_sec_d2(Clock_Alarm * const me, QEvt const * const e) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d064      	beq.n	80010ec <Clock_Alarm_cs_sec_d2+0xdc>
 8001022:	2b05      	cmp	r3, #5
 8001024:	dc68      	bgt.n	80010f8 <Clock_Alarm_cs_sec_d2+0xe8>
 8001026:	2b01      	cmp	r3, #1
 8001028:	d002      	beq.n	8001030 <Clock_Alarm_cs_sec_d2+0x20>
 800102a:	2b04      	cmp	r3, #4
 800102c:	d01e      	beq.n	800106c <Clock_Alarm_cs_sec_d2+0x5c>
 800102e:	e063      	b.n	80010f8 <Clock_Alarm_cs_sec_d2+0xe8>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d2} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
 8001030:	2109      	movs	r1, #9
 8001032:	2000      	movs	r0, #0
 8001034:	f001 f8c0 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT2(GET_SEC(me->temp_time));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68d9      	ldr	r1, [r3, #12]
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <Clock_Alarm_cs_sec_d2+0x100>)
 800103e:	fba3 2301 	umull	r2, r3, r3, r1
 8001042:	095a      	lsrs	r2, r3, #5
 8001044:	4613      	mov	r3, r2
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	1aca      	subs	r2, r1, r3
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <Clock_Alarm_cs_sec_d2+0x104>)
 8001050:	fba3 1302 	umull	r1, r3, r3, r2
 8001054:	08d9      	lsrs	r1, r3, #3
 8001056:	460b      	mov	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	1ad1      	subs	r1, r2, r3
 8001060:	b2ca      	uxtb	r2, r1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8001066:	2303      	movs	r3, #3
 8001068:	60fb      	str	r3, [r7, #12]
            break;
 800106a:	e04b      	b.n	8001104 <Clock_Alarm_cs_sec_d2+0xf4>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d2::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7ddb      	ldrb	r3, [r3, #23]
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 10;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7dda      	ldrb	r2, [r3, #23]
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <Clock_Alarm_cs_sec_d2+0x104>)
 800107e:	fba3 1302 	umull	r1, r3, r3, r2
 8001082:	08d9      	lsrs	r1, r3, #3
 8001084:	460b      	mov	r3, r1
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT2(GET_SEC(me->temp_time));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68d8      	ldr	r0, [r3, #12]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68d9      	ldr	r1, [r3, #12]
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <Clock_Alarm_cs_sec_d2+0x100>)
 800109e:	fba3 2301 	umull	r2, r3, r3, r1
 80010a2:	095a      	lsrs	r2, r3, #5
 80010a4:	4613      	mov	r3, r2
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <Clock_Alarm_cs_sec_d2+0x104>)
 80010b0:	fba3 1302 	umull	r1, r3, r3, r2
 80010b4:	08d9      	lsrs	r1, r3, #3
 80010b6:	460b      	mov	r3, r1
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	1ad1      	subs	r1, r2, r3
 80010c0:	1a42      	subs	r2, r0, r1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	7dd2      	ldrb	r2, [r2, #23]
 80010ce:	441a      	add	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 80010d4:	2203      	movs	r2, #3
 80010d6:	2100      	movs	r1, #0
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fb41 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
 80010de:	2109      	movs	r1, #9
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 f869 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 80010e6:	2303      	movs	r3, #3
 80010e8:	60fb      	str	r3, [r7, #12]
            break;
 80010ea:	e00b      	b.n	8001104 <Clock_Alarm_cs_sec_d2+0xf4>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_sec_d2::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_format);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <Clock_Alarm_cs_sec_d2+0x108>)
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	2308      	movs	r3, #8
 80010f4:	60fb      	str	r3, [r7, #12]
            break;
 80010f6:	e005      	b.n	8001104 <Clock_Alarm_cs_sec_d2+0xf4>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <Clock_Alarm_cs_sec_d2+0x10c>)
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
            break;
 8001102:	bf00      	nop
        }
    }
    return status_;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	88888889 	.word	0x88888889
 8001114:	cccccccd 	.word	0xcccccccd
 8001118:	08001121 	.word	0x08001121
 800111c:	08000a19 	.word	0x08000a19

08001120 <Clock_Alarm_cs_format>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_format} .....*/
static QState Clock_Alarm_cs_format(Clock_Alarm * const me, QEvt const * const e) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d060      	beq.n	80011f4 <Clock_Alarm_cs_format+0xd4>
 8001132:	2b05      	cmp	r3, #5
 8001134:	dc72      	bgt.n	800121c <Clock_Alarm_cs_format+0xfc>
 8001136:	2b01      	cmp	r3, #1
 8001138:	d002      	beq.n	8001140 <Clock_Alarm_cs_format+0x20>
 800113a:	2b04      	cmp	r3, #4
 800113c:	d01f      	beq.n	800117e <Clock_Alarm_cs_format+0x5e>
 800113e:	e06d      	b.n	800121c <Clock_Alarm_cs_format+0xfc>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_format} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001140:	2103      	movs	r1, #3
 8001142:	2000      	movs	r0, #0
 8001144:	f001 f838 	bl	80021b8 <display_set_cursor>
            //String msg[3] = {"24H","AM ","PM "};
            char msg[3][3]={"24H","AM ","PM "};
 8001148:	4a3a      	ldr	r2, [pc, #232]	; (8001234 <Clock_Alarm_cs_format+0x114>)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001150:	c303      	stmia	r3!, {r0, r1}
 8001152:	701a      	strb	r2, [r3, #0]
            display_write(msg[me->temp_format],CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7d9b      	ldrb	r3, [r3, #22]
 8001158:	4619      	mov	r1, r3
 800115a:	f107 0210 	add.w	r2, r7, #16
 800115e:	460b      	mov	r3, r1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	440b      	add	r3, r1
 8001164:	4413      	add	r3, r2
 8001166:	2203      	movs	r2, #3
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f812 	bl	8002194 <display_write>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001170:	2103      	movs	r1, #3
 8001172:	2000      	movs	r0, #0
 8001174:	f001 f820 	bl	80021b8 <display_set_cursor>

            status_ = Q_HANDLED();
 8001178:	2303      	movs	r3, #3
 800117a:	61fb      	str	r3, [r7, #28]
            break;
 800117c:	e054      	b.n	8001228 <Clock_Alarm_cs_format+0x108>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_format::SET} */
        case SET_SIG: {
            char msg[4]={0};
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]

            if(me->temp_format == FORMAT_24H){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7d9b      	ldrb	r3, [r3, #22]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <Clock_Alarm_cs_format+0x84>
                me->temp_format = FORMAT_AM;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	759a      	strb	r2, [r3, #22]
                strcpy(msg,"AM");
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4a28      	ldr	r2, [pc, #160]	; (8001238 <Clock_Alarm_cs_format+0x118>)
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	4611      	mov	r1, r2
 800119a:	8019      	strh	r1, [r3, #0]
 800119c:	3302      	adds	r3, #2
 800119e:	0c12      	lsrs	r2, r2, #16
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e019      	b.n	80011d8 <Clock_Alarm_cs_format+0xb8>
            }
            else if(me->temp_format == FORMAT_AM){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7d9b      	ldrb	r3, [r3, #22]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d10c      	bne.n	80011c6 <Clock_Alarm_cs_format+0xa6>
                me->temp_format = FORMAT_PM;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2202      	movs	r2, #2
 80011b0:	759a      	strb	r2, [r3, #22]
                strcpy(msg,"PM");
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4a21      	ldr	r2, [pc, #132]	; (800123c <Clock_Alarm_cs_format+0x11c>)
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	4611      	mov	r1, r2
 80011bc:	8019      	strh	r1, [r3, #0]
 80011be:	3302      	adds	r3, #2
 80011c0:	0c12      	lsrs	r2, r2, #16
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e008      	b.n	80011d8 <Clock_Alarm_cs_format+0xb8>
            }
            else if (me->temp_format == FORMAT_PM){
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7d9b      	ldrb	r3, [r3, #22]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d104      	bne.n	80011d8 <Clock_Alarm_cs_format+0xb8>
                me->temp_format = FORMAT_24H;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	759a      	strb	r2, [r3, #22]
                strcpy(msg,"24H");
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <Clock_Alarm_cs_format+0x120>)
 80011d6:	60fb      	str	r3, [r7, #12]
            }
            display_write(msg,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2203      	movs	r2, #3
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 ffd7 	bl	8002194 <display_write>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 80011e6:	2103      	movs	r1, #3
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 ffe5 	bl	80021b8 <display_set_cursor>

            status_ = Q_HANDLED();
 80011ee:	2303      	movs	r3, #3
 80011f0:	61fb      	str	r3, [r7, #28]
            break;
 80011f2:	e019      	b.n	8001228 <Clock_Alarm_cs_format+0x108>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_format::OK} */
        case OK_SIG: {
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_format::OK::[is_time_set_error(me->temp_time~} */
            if (is_time_set_error(me->temp_time,(time_format_t)me->temp_format)) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7d9b      	ldrb	r3, [r3, #22]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4610      	mov	r0, r2
 8001200:	f001 f82a 	bl	8002258 <is_time_set_error>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <Clock_Alarm_cs_format+0xf6>
                status_ = Q_TRAN(&Clock_Alarm_cs_error);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <Clock_Alarm_cs_format+0x124>)
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	2308      	movs	r3, #8
 8001212:	61fb      	str	r3, [r7, #28]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001214:	e008      	b.n	8001228 <Clock_Alarm_cs_format+0x108>
                status_ = Q_UNHANDLED();
 8001216:	2302      	movs	r3, #2
 8001218:	61fb      	str	r3, [r7, #28]
            break;
 800121a:	e005      	b.n	8001228 <Clock_Alarm_cs_format+0x108>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <Clock_Alarm_cs_format+0x128>)
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
            break;
 8001226:	bf00      	nop
        }
    }
    return status_;
 8001228:	69fb      	ldr	r3, [r7, #28]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	080071b0 	.word	0x080071b0
 8001238:	080071a8 	.word	0x080071a8
 800123c:	080071ac 	.word	0x080071ac
 8001240:	00483432 	.word	0x00483432
 8001244:	0800124d 	.word	0x0800124d
 8001248:	08000a19 	.word	0x08000a19

0800124c <Clock_Alarm_cs_error>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error} ......*/
static QState Clock_Alarm_cs_error(Clock_Alarm * const me, QEvt const * const e) {
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	3b02      	subs	r3, #2
 800125c:	2b03      	cmp	r3, #3
 800125e:	d820      	bhi.n	80012a2 <Clock_Alarm_cs_error+0x56>
 8001260:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <Clock_Alarm_cs_error+0x1c>)
 8001262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001266:	bf00      	nop
 8001268:	08001279 	.word	0x08001279
 800126c:	08001285 	.word	0x08001285
 8001270:	08001291 	.word	0x08001291
 8001274:	0800129d 	.word	0x0800129d
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error} */
        case Q_EXIT_SIG: {
            me->timeout = 0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	761a      	strb	r2, [r3, #24]
            status_ = Q_HANDLED();
 800127e:	2303      	movs	r3, #3
 8001280:	60fb      	str	r3, [r7, #12]
            break;
 8001282:	e014      	b.n	80012ae <Clock_Alarm_cs_error+0x62>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_cs_err_on);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <Clock_Alarm_cs_error+0x70>)
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	2308      	movs	r3, #8
 800128c:	60fb      	str	r3, [r7, #12]
            break;
 800128e:	e00e      	b.n	80012ae <Clock_Alarm_cs_error+0x62>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::SET} */
        case SET_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Clock_Setting);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <Clock_Alarm_cs_error+0x74>)
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	2308      	movs	r3, #8
 8001298:	60fb      	str	r3, [r7, #12]
            break;
 800129a:	e008      	b.n	80012ae <Clock_Alarm_cs_error+0x62>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::OK} */
        case OK_SIG: {
            status_ = Q_HANDLED();
 800129c:	2303      	movs	r3, #3
 800129e:	60fb      	str	r3, [r7, #12]
            break;
 80012a0:	e005      	b.n	80012ae <Clock_Alarm_cs_error+0x62>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock_Setting);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <Clock_Alarm_cs_error+0x74>)
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
            break;
 80012ac:	bf00      	nop
        }
    }
    return status_;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	080012c5 	.word	0x080012c5
 80012c0:	08000a19 	.word	0x08000a19

080012c4 <Clock_Alarm_cs_err_on>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::cs_err_on} */
static QState Clock_Alarm_cs_err_on(Clock_Alarm * const me, QEvt const * const e) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d002      	beq.n	80012dc <Clock_Alarm_cs_err_on+0x18>
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d00a      	beq.n	80012f0 <Clock_Alarm_cs_err_on+0x2c>
 80012da:	e01f      	b.n	800131c <Clock_Alarm_cs_err_on+0x58>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::cs_err_on} */
        case Q_ENTRY_SIG: {
            char *err_msg;
            err_msg = "Error!";
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <Clock_Alarm_cs_err_on+0x70>)
 80012de:	60bb      	str	r3, [r7, #8]
            display_write(err_msg , 1 , 4);
 80012e0:	2204      	movs	r2, #4
 80012e2:	2101      	movs	r1, #1
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	f000 ff55 	bl	8002194 <display_write>
            //display_write("Error!" , 1 , 4);
            status_ = Q_HANDLED();
 80012ea:	2303      	movs	r3, #3
 80012ec:	60fb      	str	r3, [r7, #12]
            break;
 80012ee:	e01b      	b.n	8001328 <Clock_Alarm_cs_err_on+0x64>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::cs_err_on::TICK} */
        case TICK_SIG: {
            ++me->timeout;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e1b      	ldrb	r3, [r3, #24]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	761a      	strb	r2, [r3, #24]
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::cs_err_on::TICK::[me->timeout==10]} */
            if (me->timeout == 10) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e1b      	ldrb	r3, [r3, #24]
 8001300:	2b0a      	cmp	r3, #10
 8001302:	d108      	bne.n	8001316 <Clock_Alarm_cs_err_on+0x52>
                me->timeout = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	761a      	strb	r2, [r3, #24]
                status_ = Q_TRAN(&Clock_Alarm_cs_err_off);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <Clock_Alarm_cs_err_on+0x74>)
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	2308      	movs	r3, #8
 8001312:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001314:	e008      	b.n	8001328 <Clock_Alarm_cs_err_on+0x64>
                status_ = Q_UNHANDLED();
 8001316:	2302      	movs	r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
            break;
 800131a:	e005      	b.n	8001328 <Clock_Alarm_cs_err_on+0x64>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_cs_error);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <Clock_Alarm_cs_err_on+0x78>)
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
            break;
 8001326:	bf00      	nop
        }
    }
    return status_;
 8001328:	68fb      	ldr	r3, [r7, #12]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	080071bc 	.word	0x080071bc
 8001338:	08001341 	.word	0x08001341
 800133c:	0800124d 	.word	0x0800124d

08001340 <Clock_Alarm_cs_err_off>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::cs_err_off} */
static QState Clock_Alarm_cs_err_off(Clock_Alarm * const me, QEvt const * const e) {
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	2b08      	cmp	r3, #8
 8001350:	d115      	bne.n	800137e <Clock_Alarm_cs_err_off+0x3e>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::cs_err_off::TICK} */
        case TICK_SIG: {
            ++me->timeout;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e1b      	ldrb	r3, [r3, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	761a      	strb	r2, [r3, #24]
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting::cs_error::cs_err_off::TICK::[me->timeout==10]} */
            if (me->timeout == 10) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7e1b      	ldrb	r3, [r3, #24]
 8001362:	2b0a      	cmp	r3, #10
 8001364:	d108      	bne.n	8001378 <Clock_Alarm_cs_err_off+0x38>
                me->timeout = 0;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	761a      	strb	r2, [r3, #24]
                status_ = Q_TRAN(&Clock_Alarm_cs_err_on);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <Clock_Alarm_cs_err_off+0x58>)
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	2308      	movs	r3, #8
 8001374:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001376:	e008      	b.n	800138a <Clock_Alarm_cs_err_off+0x4a>
                status_ = Q_UNHANDLED();
 8001378:	2302      	movs	r3, #2
 800137a:	60fb      	str	r3, [r7, #12]
            break;
 800137c:	e005      	b.n	800138a <Clock_Alarm_cs_err_off+0x4a>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_cs_error);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <Clock_Alarm_cs_err_off+0x5c>)
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
            break;
 8001388:	bf00      	nop
        }
    }
    return status_;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	080012c5 	.word	0x080012c5
 800139c:	0800124d 	.word	0x0800124d

080013a0 <Clock_Alarm_Alarm_Setting>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting} ................*/
static QState Clock_Alarm_Alarm_Setting(Clock_Alarm * const me, QEvt const * const e) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	2b07      	cmp	r3, #7
 80013b2:	f200 809c 	bhi.w	80014ee <Clock_Alarm_Alarm_Setting+0x14e>
 80013b6:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <Clock_Alarm_Alarm_Setting+0x1c>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	080013dd 	.word	0x080013dd
 80013c0:	080014ef 	.word	0x080014ef
 80013c4:	080013ed 	.word	0x080013ed
 80013c8:	080014ef 	.word	0x080014ef
 80013cc:	080013f9 	.word	0x080013f9
 80013d0:	080014ef 	.word	0x080014ef
 80013d4:	080014ef 	.word	0x080014ef
 80013d8:	0800142d 	.word	0x0800142d
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting} */
        case Q_ENTRY_SIG: {
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 80013dc:	2203      	movs	r2, #3
 80013de:	2100      	movs	r1, #0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff f9bd 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            status_ = Q_HANDLED();
 80013e6:	2303      	movs	r3, #3
 80013e8:	60fb      	str	r3, [r7, #12]
            break;
 80013ea:	e086      	b.n	80014fa <Clock_Alarm_Alarm_Setting+0x15a>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_hour_d1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a45      	ldr	r2, [pc, #276]	; (8001504 <Clock_Alarm_Alarm_Setting+0x164>)
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	2308      	movs	r3, #8
 80013f4:	60fb      	str	r3, [r7, #12]
            break;
 80013f6:	e080      	b.n	80014fa <Clock_Alarm_Alarm_Setting+0x15a>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::OK} */
        case OK_SIG: {
            me->alarm_status = me->temp_digit;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7dda      	ldrb	r2, [r3, #23]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	751a      	strb	r2, [r3, #20]
            if(me->temp_format != FORMAT_24H){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7d9b      	ldrb	r3, [r3, #22]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00a      	beq.n	800141e <Clock_Alarm_Alarm_Setting+0x7e>
                me->temp_time = convert_12hformat_to_24h( me->temp_time,(time_format_t)me->temp_format);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7d9b      	ldrb	r3, [r3, #22]
 8001410:	4619      	mov	r1, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f000 fe2a 	bl	800206c <convert_12hformat_to_24h>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60da      	str	r2, [r3, #12]
            }
            me->alarm_time = me->temp_time;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	611a      	str	r2, [r3, #16]
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::OK::[0]} */
            if (0) {
                status_ = Q_HANDLED();
            }
            else {
                status_ = Q_UNHANDLED();
 8001426:	2302      	movs	r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
            }
            break;
 800142a:	e066      	b.n	80014fa <Clock_Alarm_Alarm_Setting+0x15a>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::TICK} */
        case TICK_SIG: {
            Clock_Alarm_display_curr_time(me,ALARM_SETTING_CURR_TIME_ROW,ALARM_SETTING_CURR_TIME_COL);
 800142c:	2203      	movs	r2, #3
 800142e:	2100      	movs	r1, #0
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff f90b 	bl	800064c <Clock_Alarm_display_curr_time>
            if( QHsm_state(me) != Q_STATE_CAST(&Clock_Alarm_alarm_onoff))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <Clock_Alarm_Alarm_Setting+0x168>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d004      	beq.n	800144a <Clock_Alarm_Alarm_Setting+0xaa>
                Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001440:	2203      	movs	r2, #3
 8001442:	2100      	movs	r1, #0
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff f98b 	bl	8000760 <Clock_Alarm_display_clock_setting_time>

            if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_as_hour_d1))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <Clock_Alarm_Alarm_Setting+0x164>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d104      	bne.n	800145e <Clock_Alarm_Alarm_Setting+0xbe>
                display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
 8001454:	2102      	movs	r1, #2
 8001456:	2000      	movs	r0, #0
 8001458:	f000 feae 	bl	80021b8 <display_set_cursor>
 800145c:	e044      	b.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
            else if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_as_hour_d2))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <Clock_Alarm_Alarm_Setting+0x16c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d104      	bne.n	8001472 <Clock_Alarm_Alarm_Setting+0xd2>
                display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
 8001468:	2103      	movs	r1, #3
 800146a:	2000      	movs	r0, #0
 800146c:	f000 fea4 	bl	80021b8 <display_set_cursor>
 8001470:	e03a      	b.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
            else if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_as_min_d1))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a26      	ldr	r2, [pc, #152]	; (8001510 <Clock_Alarm_Alarm_Setting+0x170>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d104      	bne.n	8001486 <Clock_Alarm_Alarm_Setting+0xe6>
                display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
 800147c:	2105      	movs	r1, #5
 800147e:	2000      	movs	r0, #0
 8001480:	f000 fe9a 	bl	80021b8 <display_set_cursor>
 8001484:	e030      	b.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
            else if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_as_min_d2))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a22      	ldr	r2, [pc, #136]	; (8001514 <Clock_Alarm_Alarm_Setting+0x174>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d104      	bne.n	800149a <Clock_Alarm_Alarm_Setting+0xfa>
                display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
 8001490:	2105      	movs	r1, #5
 8001492:	2000      	movs	r0, #0
 8001494:	f000 fe90 	bl	80021b8 <display_set_cursor>
 8001498:	e026      	b.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
            else if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_as_sec_d1))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <Clock_Alarm_Alarm_Setting+0x178>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d104      	bne.n	80014ae <Clock_Alarm_Alarm_Setting+0x10e>
                display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
 80014a4:	2108      	movs	r1, #8
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 fe86 	bl	80021b8 <display_set_cursor>
 80014ac:	e01c      	b.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
            else if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_as_sec_d2))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <Clock_Alarm_Alarm_Setting+0x17c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d104      	bne.n	80014c2 <Clock_Alarm_Alarm_Setting+0x122>
                display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
 80014b8:	2109      	movs	r1, #9
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 fe7c 	bl	80021b8 <display_set_cursor>
 80014c0:	e012      	b.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
            else if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_as_format))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a16      	ldr	r2, [pc, #88]	; (8001520 <Clock_Alarm_Alarm_Setting+0x180>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d104      	bne.n	80014d6 <Clock_Alarm_Alarm_Setting+0x136>
                display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);
 80014cc:	210a      	movs	r1, #10
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 fe72 	bl	80021b8 <display_set_cursor>
 80014d4:	e008      	b.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
            else if( QHsm_state(me) == Q_STATE_CAST(&Clock_Alarm_alarm_onoff))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <Clock_Alarm_Alarm_Setting+0x168>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d103      	bne.n	80014e8 <Clock_Alarm_Alarm_Setting+0x148>
                 display_set_cursor(CLOCK_SETTING_TIME_ROW,ALARM_SETTING_STATUS_COL);
 80014e0:	2104      	movs	r1, #4
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fe68 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 80014e8:	2303      	movs	r3, #3
 80014ea:	60fb      	str	r3, [r7, #12]
            break;
 80014ec:	e005      	b.n	80014fa <Clock_Alarm_Alarm_Setting+0x15a>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Settings);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <Clock_Alarm_Alarm_Setting+0x184>)
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
            break;
 80014f8:	bf00      	nop
        }
    }
    return status_;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	08001529 	.word	0x08001529
 8001508:	08001e25 	.word	0x08001e25
 800150c:	0800160d 	.word	0x0800160d
 8001510:	08001719 	.word	0x08001719
 8001514:	08001839 	.word	0x08001839
 8001518:	08001969 	.word	0x08001969
 800151c:	08001a79 	.word	0x08001a79
 8001520:	08001b89 	.word	0x08001b89
 8001524:	080009c9 	.word	0x080009c9

08001528 <Clock_Alarm_as_hour_d1>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d1} ....*/
static QState Clock_Alarm_as_hour_d1(Clock_Alarm * const me, QEvt const * const e) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	2b05      	cmp	r3, #5
 8001538:	d04e      	beq.n	80015d8 <Clock_Alarm_as_hour_d1+0xb0>
 800153a:	2b05      	cmp	r3, #5
 800153c:	dc52      	bgt.n	80015e4 <Clock_Alarm_as_hour_d1+0xbc>
 800153e:	2b01      	cmp	r3, #1
 8001540:	d002      	beq.n	8001548 <Clock_Alarm_as_hour_d1+0x20>
 8001542:	2b04      	cmp	r3, #4
 8001544:	d010      	beq.n	8001568 <Clock_Alarm_as_hour_d1+0x40>
 8001546:	e04d      	b.n	80015e4 <Clock_Alarm_as_hour_d1+0xbc>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d1} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
 8001548:	2102      	movs	r1, #2
 800154a:	2000      	movs	r0, #0
 800154c:	f000 fe34 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT1(GET_HOUR(me->temp_time));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <Clock_Alarm_as_hour_d1+0xd4>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0bdb      	lsrs	r3, r3, #15
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8001562:	2303      	movs	r3, #3
 8001564:	60fb      	str	r3, [r7, #12]
            break;
 8001566:	e043      	b.n	80015f0 <Clock_Alarm_as_hour_d1+0xc8>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d1::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7ddb      	ldrb	r3, [r3, #23]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 3;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7dda      	ldrb	r2, [r3, #23]
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <Clock_Alarm_as_hour_d1+0xd8>)
 800157a:	fba3 1302 	umull	r1, r3, r3, r2
 800157e:	0859      	lsrs	r1, r3, #1
 8001580:	460b      	mov	r3, r1
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	440b      	add	r3, r1
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b2da      	uxtb	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT1(GET_HOUR(me->temp_time)) * 10UL * 3600UL;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <Clock_Alarm_as_hour_d1+0xd4>)
 8001594:	fba3 1302 	umull	r1, r3, r3, r2
 8001598:	0bdb      	lsrs	r3, r3, #15
 800159a:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	60d3      	str	r3, [r2, #12]
            me->temp_time += (me->temp_digit * 10UL ) * 3600UL;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7ddb      	ldrb	r3, [r3, #23]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80015b6:	fb01 f303 	mul.w	r3, r1, r3
 80015ba:	441a      	add	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 80015c0:	2203      	movs	r2, #3
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff f8cb 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
 80015ca:	2102      	movs	r1, #2
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 fdf3 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 80015d2:	2303      	movs	r3, #3
 80015d4:	60fb      	str	r3, [r7, #12]
            break;
 80015d6:	e00b      	b.n	80015f0 <Clock_Alarm_as_hour_d1+0xc8>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d1::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_hour_d2);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <Clock_Alarm_as_hour_d1+0xdc>)
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	2308      	movs	r3, #8
 80015e0:	60fb      	str	r3, [r7, #12]
            break;
 80015e2:	e005      	b.n	80015f0 <Clock_Alarm_as_hour_d1+0xc8>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <Clock_Alarm_as_hour_d1+0xe0>)
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
            break;
 80015ee:	bf00      	nop
        }
    }
    return status_;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e90452d5 	.word	0xe90452d5
 8001600:	aaaaaaab 	.word	0xaaaaaaab
 8001604:	0800160d 	.word	0x0800160d
 8001608:	080013a1 	.word	0x080013a1

0800160c <Clock_Alarm_as_hour_d2>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d2} ....*/
static QState Clock_Alarm_as_hour_d2(Clock_Alarm * const me, QEvt const * const e) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d063      	beq.n	80016e6 <Clock_Alarm_as_hour_d2+0xda>
 800161e:	2b05      	cmp	r3, #5
 8001620:	dc67      	bgt.n	80016f2 <Clock_Alarm_as_hour_d2+0xe6>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d002      	beq.n	800162c <Clock_Alarm_as_hour_d2+0x20>
 8001626:	2b04      	cmp	r3, #4
 8001628:	d019      	beq.n	800165e <Clock_Alarm_as_hour_d2+0x52>
 800162a:	e062      	b.n	80016f2 <Clock_Alarm_as_hour_d2+0xe6>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d2} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
 800162c:	2103      	movs	r1, #3
 800162e:	2000      	movs	r0, #0
 8001630:	f000 fdc2 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT2(GET_HOUR(me->temp_time));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <Clock_Alarm_as_hour_d2+0xfc>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0ad9      	lsrs	r1, r3, #11
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <Clock_Alarm_as_hour_d2+0x100>)
 8001642:	fba3 2301 	umull	r2, r3, r3, r1
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	1aca      	subs	r2, r1, r3
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8001658:	2303      	movs	r3, #3
 800165a:	60fb      	str	r3, [r7, #12]
            break;
 800165c:	e04f      	b.n	80016fe <Clock_Alarm_as_hour_d2+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d2::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7ddb      	ldrb	r3, [r3, #23]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 10;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7dda      	ldrb	r2, [r3, #23]
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <Clock_Alarm_as_hour_d2+0x100>)
 8001670:	fba3 1302 	umull	r1, r3, r3, r2
 8001674:	08d9      	lsrs	r1, r3, #3
 8001676:	460b      	mov	r3, r1
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT2(GET_HOUR(me->temp_time)) * 3600UL;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68d8      	ldr	r0, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <Clock_Alarm_as_hour_d2+0xfc>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0ad9      	lsrs	r1, r3, #11
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <Clock_Alarm_as_hour_d2+0x100>)
 8001698:	fba3 2301 	umull	r2, r3, r3, r1
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	1aca      	subs	r2, r1, r3
 80016a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	1ac2      	subs	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit) * 3600UL;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7ddb      	ldrb	r3, [r3, #23]
 80016be:	4619      	mov	r1, r3
 80016c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	441a      	add	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 80016ce:	2203      	movs	r2, #3
 80016d0:	2100      	movs	r1, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff f844 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
 80016d8:	2103      	movs	r1, #3
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 fd6c 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 80016e0:	2303      	movs	r3, #3
 80016e2:	60fb      	str	r3, [r7, #12]
            break;
 80016e4:	e00b      	b.n	80016fe <Clock_Alarm_as_hour_d2+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_hour_d2::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_min_d1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <Clock_Alarm_as_hour_d2+0x104>)
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	2308      	movs	r3, #8
 80016ee:	60fb      	str	r3, [r7, #12]
            break;
 80016f0:	e005      	b.n	80016fe <Clock_Alarm_as_hour_d2+0xf2>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <Clock_Alarm_as_hour_d2+0x108>)
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
            break;
 80016fc:	bf00      	nop
        }
    }
    return status_;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	91a2b3c5 	.word	0x91a2b3c5
 800170c:	cccccccd 	.word	0xcccccccd
 8001710:	08001719 	.word	0x08001719
 8001714:	080013a1 	.word	0x080013a1

08001718 <Clock_Alarm_as_min_d1>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d1} .....*/
static QState Clock_Alarm_as_min_d1(Clock_Alarm * const me, QEvt const * const e) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b05      	cmp	r3, #5
 8001728:	d06b      	beq.n	8001802 <Clock_Alarm_as_min_d1+0xea>
 800172a:	2b05      	cmp	r3, #5
 800172c:	dc6f      	bgt.n	800180e <Clock_Alarm_as_min_d1+0xf6>
 800172e:	2b01      	cmp	r3, #1
 8001730:	d002      	beq.n	8001738 <Clock_Alarm_as_min_d1+0x20>
 8001732:	2b04      	cmp	r3, #4
 8001734:	d01d      	beq.n	8001772 <Clock_Alarm_as_min_d1+0x5a>
 8001736:	e06a      	b.n	800180e <Clock_Alarm_as_min_d1+0xf6>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d1} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
 8001738:	2105      	movs	r1, #5
 800173a:	2000      	movs	r0, #0
 800173c:	f000 fd3c 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT1(GET_MIN(me->temp_time));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a37      	ldr	r2, [pc, #220]	; (8001824 <Clock_Alarm_as_min_d1+0x10c>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0959      	lsrs	r1, r3, #5
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <Clock_Alarm_as_min_d1+0x10c>)
 800174e:	fba3 2301 	umull	r2, r3, r3, r1
 8001752:	095a      	lsrs	r2, r3, #5
 8001754:	4613      	mov	r3, r2
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	1aca      	subs	r2, r1, r3
 800175e:	4b32      	ldr	r3, [pc, #200]	; (8001828 <Clock_Alarm_as_min_d1+0x110>)
 8001760:	fba3 2302 	umull	r2, r3, r3, r2
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	b2da      	uxtb	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 800176c:	2303      	movs	r3, #3
 800176e:	60fb      	str	r3, [r7, #12]
            break;
 8001770:	e053      	b.n	800181a <Clock_Alarm_as_min_d1+0x102>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d1::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7ddb      	ldrb	r3, [r3, #23]
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 6;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7dda      	ldrb	r2, [r3, #23]
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <Clock_Alarm_as_min_d1+0x114>)
 8001784:	fba3 1302 	umull	r1, r3, r3, r2
 8001788:	0899      	lsrs	r1, r3, #2
 800178a:	460b      	mov	r3, r1
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	440b      	add	r3, r1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT1(GET_MIN(me->temp_time)) * 10UL * 60UL;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68d8      	ldr	r0, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <Clock_Alarm_as_min_d1+0x10c>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	0959      	lsrs	r1, r3, #5
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <Clock_Alarm_as_min_d1+0x10c>)
 80017ac:	fba3 2301 	umull	r2, r3, r3, r1
 80017b0:	095a      	lsrs	r2, r3, #5
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	1aca      	subs	r2, r1, r3
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <Clock_Alarm_as_min_d1+0x110>)
 80017be:	fba3 2302 	umull	r2, r3, r3, r2
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	1ac2      	subs	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit * 10) * 60UL;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7ddb      	ldrb	r3, [r3, #23]
 80017da:	4619      	mov	r1, r3
 80017dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	441a      	add	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 80017ea:	2203      	movs	r2, #3
 80017ec:	2100      	movs	r1, #0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe ffb6 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
 80017f4:	2105      	movs	r1, #5
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 fcde 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 80017fc:	2303      	movs	r3, #3
 80017fe:	60fb      	str	r3, [r7, #12]
            break;
 8001800:	e00b      	b.n	800181a <Clock_Alarm_as_min_d1+0x102>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d1::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_min_d2);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <Clock_Alarm_as_min_d1+0x118>)
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	2308      	movs	r3, #8
 800180a:	60fb      	str	r3, [r7, #12]
            break;
 800180c:	e005      	b.n	800181a <Clock_Alarm_as_min_d1+0x102>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <Clock_Alarm_as_min_d1+0x11c>)
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
            break;
 8001818:	bf00      	nop
        }
    }
    return status_;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	88888889 	.word	0x88888889
 8001828:	cccccccd 	.word	0xcccccccd
 800182c:	aaaaaaab 	.word	0xaaaaaaab
 8001830:	08001839 	.word	0x08001839
 8001834:	080013a1 	.word	0x080013a1

08001838 <Clock_Alarm_as_min_d2>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d2} .....*/
static QState Clock_Alarm_as_min_d2(Clock_Alarm * const me, QEvt const * const e) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d075      	beq.n	8001936 <Clock_Alarm_as_min_d2+0xfe>
 800184a:	2b05      	cmp	r3, #5
 800184c:	dc79      	bgt.n	8001942 <Clock_Alarm_as_min_d2+0x10a>
 800184e:	2b01      	cmp	r3, #1
 8001850:	d002      	beq.n	8001858 <Clock_Alarm_as_min_d2+0x20>
 8001852:	2b04      	cmp	r3, #4
 8001854:	d022      	beq.n	800189c <Clock_Alarm_as_min_d2+0x64>
 8001856:	e074      	b.n	8001942 <Clock_Alarm_as_min_d2+0x10a>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d2} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
 8001858:	2105      	movs	r1, #5
 800185a:	2000      	movs	r0, #0
 800185c:	f000 fcac 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT2(GET_MIN(me->temp_time));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a3c      	ldr	r2, [pc, #240]	; (8001958 <Clock_Alarm_as_min_d2+0x120>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0959      	lsrs	r1, r3, #5
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <Clock_Alarm_as_min_d2+0x120>)
 800186e:	fba3 2301 	umull	r2, r3, r3, r1
 8001872:	095a      	lsrs	r2, r3, #5
 8001874:	4613      	mov	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	1aca      	subs	r2, r1, r3
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <Clock_Alarm_as_min_d2+0x124>)
 8001880:	fba3 1302 	umull	r1, r3, r3, r2
 8001884:	08d9      	lsrs	r1, r3, #3
 8001886:	460b      	mov	r3, r1
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	1ad1      	subs	r1, r2, r3
 8001890:	b2ca      	uxtb	r2, r1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8001896:	2303      	movs	r3, #3
 8001898:	60fb      	str	r3, [r7, #12]
            break;
 800189a:	e058      	b.n	800194e <Clock_Alarm_as_min_d2+0x116>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d2::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7ddb      	ldrb	r3, [r3, #23]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 10;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7dda      	ldrb	r2, [r3, #23]
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <Clock_Alarm_as_min_d2+0x124>)
 80018ae:	fba3 1302 	umull	r1, r3, r3, r2
 80018b2:	08d9      	lsrs	r1, r3, #3
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT2(GET_MIN(me->temp_time)) * 60UL;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68d8      	ldr	r0, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <Clock_Alarm_as_min_d2+0x120>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	0959      	lsrs	r1, r3, #5
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <Clock_Alarm_as_min_d2+0x120>)
 80018d6:	fba3 2301 	umull	r2, r3, r3, r1
 80018da:	095a      	lsrs	r2, r3, #5
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	1aca      	subs	r2, r1, r3
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <Clock_Alarm_as_min_d2+0x124>)
 80018e8:	fba3 1302 	umull	r1, r3, r3, r2
 80018ec:	08d9      	lsrs	r1, r3, #3
 80018ee:	460b      	mov	r3, r1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	1ad1      	subs	r1, r2, r3
 80018f8:	460b      	mov	r3, r1
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a5b      	subs	r3, r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	1ac2      	subs	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit) * 60UL;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7ddb      	ldrb	r3, [r3, #23]
 800190e:	4619      	mov	r1, r3
 8001910:	460b      	mov	r3, r1
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a5b      	subs	r3, r3, r1
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	441a      	add	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 800191e:	2203      	movs	r2, #3
 8001920:	2100      	movs	r1, #0
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe ff1c 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
 8001928:	2105      	movs	r1, #5
 800192a:	2000      	movs	r0, #0
 800192c:	f000 fc44 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8001930:	2303      	movs	r3, #3
 8001932:	60fb      	str	r3, [r7, #12]
            break;
 8001934:	e00b      	b.n	800194e <Clock_Alarm_as_min_d2+0x116>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_min_d2::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_sec_d1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a09      	ldr	r2, [pc, #36]	; (8001960 <Clock_Alarm_as_min_d2+0x128>)
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	2308      	movs	r3, #8
 800193e:	60fb      	str	r3, [r7, #12]
            break;
 8001940:	e005      	b.n	800194e <Clock_Alarm_as_min_d2+0x116>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <Clock_Alarm_as_min_d2+0x12c>)
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
            break;
 800194c:	bf00      	nop
        }
    }
    return status_;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	88888889 	.word	0x88888889
 800195c:	cccccccd 	.word	0xcccccccd
 8001960:	08001969 	.word	0x08001969
 8001964:	080013a1 	.word	0x080013a1

08001968 <Clock_Alarm_as_sec_d1>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d1} .....*/
static QState Clock_Alarm_as_sec_d1(Clock_Alarm * const me, QEvt const * const e) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d063      	beq.n	8001a42 <Clock_Alarm_as_sec_d1+0xda>
 800197a:	2b05      	cmp	r3, #5
 800197c:	dc67      	bgt.n	8001a4e <Clock_Alarm_as_sec_d1+0xe6>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d002      	beq.n	8001988 <Clock_Alarm_as_sec_d1+0x20>
 8001982:	2b04      	cmp	r3, #4
 8001984:	d019      	beq.n	80019ba <Clock_Alarm_as_sec_d1+0x52>
 8001986:	e062      	b.n	8001a4e <Clock_Alarm_as_sec_d1+0xe6>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d1} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
 8001988:	2108      	movs	r1, #8
 800198a:	2000      	movs	r0, #0
 800198c:	f000 fc14 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT1(GET_SEC(me->temp_time));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68d9      	ldr	r1, [r3, #12]
 8001994:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <Clock_Alarm_as_sec_d1+0xfc>)
 8001996:	fba3 2301 	umull	r2, r3, r3, r1
 800199a:	095a      	lsrs	r2, r3, #5
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	1aca      	subs	r2, r1, r3
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <Clock_Alarm_as_sec_d1+0x100>)
 80019a8:	fba3 2302 	umull	r2, r3, r3, r2
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 80019b4:	2303      	movs	r3, #3
 80019b6:	60fb      	str	r3, [r7, #12]
            break;
 80019b8:	e04f      	b.n	8001a5a <Clock_Alarm_as_sec_d1+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d1::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7ddb      	ldrb	r3, [r3, #23]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 6;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7dda      	ldrb	r2, [r3, #23]
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <Clock_Alarm_as_sec_d1+0x104>)
 80019cc:	fba3 1302 	umull	r1, r3, r3, r2
 80019d0:	0899      	lsrs	r1, r3, #2
 80019d2:	460b      	mov	r3, r1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	440b      	add	r3, r1
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT1(GET_SEC(me->temp_time)) * 10UL;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68d8      	ldr	r0, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68d9      	ldr	r1, [r3, #12]
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <Clock_Alarm_as_sec_d1+0xfc>)
 80019ec:	fba3 2301 	umull	r2, r3, r3, r1
 80019f0:	095a      	lsrs	r2, r3, #5
 80019f2:	4613      	mov	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	1aca      	subs	r2, r1, r3
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <Clock_Alarm_as_sec_d1+0x100>)
 80019fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	1ac2      	subs	r2, r0, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit * 10UL );
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7ddb      	ldrb	r3, [r3, #23]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	441a      	add	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fe96 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
 8001a34:	2108      	movs	r1, #8
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 fbbe 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]
            break;
 8001a40:	e00b      	b.n	8001a5a <Clock_Alarm_as_sec_d1+0xf2>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d1::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_sec_d2);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <Clock_Alarm_as_sec_d1+0x108>)
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	2308      	movs	r3, #8
 8001a4a:	60fb      	str	r3, [r7, #12]
            break;
 8001a4c:	e005      	b.n	8001a5a <Clock_Alarm_as_sec_d1+0xf2>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <Clock_Alarm_as_sec_d1+0x10c>)
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
            break;
 8001a58:	bf00      	nop
        }
    }
    return status_;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	88888889 	.word	0x88888889
 8001a68:	cccccccd 	.word	0xcccccccd
 8001a6c:	aaaaaaab 	.word	0xaaaaaaab
 8001a70:	08001a79 	.word	0x08001a79
 8001a74:	080013a1 	.word	0x080013a1

08001a78 <Clock_Alarm_as_sec_d2>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d2} .....*/
static QState Clock_Alarm_as_sec_d2(Clock_Alarm * const me, QEvt const * const e) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d064      	beq.n	8001b54 <Clock_Alarm_as_sec_d2+0xdc>
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	dc68      	bgt.n	8001b60 <Clock_Alarm_as_sec_d2+0xe8>
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d002      	beq.n	8001a98 <Clock_Alarm_as_sec_d2+0x20>
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d01e      	beq.n	8001ad4 <Clock_Alarm_as_sec_d2+0x5c>
 8001a96:	e063      	b.n	8001b60 <Clock_Alarm_as_sec_d2+0xe8>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d2} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
 8001a98:	2109      	movs	r1, #9
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 fb8c 	bl	80021b8 <display_set_cursor>
            me->temp_digit = DIGIT2(GET_SEC(me->temp_time));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68d9      	ldr	r1, [r3, #12]
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <Clock_Alarm_as_sec_d2+0x100>)
 8001aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8001aaa:	095a      	lsrs	r2, r3, #5
 8001aac:	4613      	mov	r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	1aca      	subs	r2, r1, r3
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <Clock_Alarm_as_sec_d2+0x104>)
 8001ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8001abc:	08d9      	lsrs	r1, r3, #3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	1ad1      	subs	r1, r2, r3
 8001ac8:	b2ca      	uxtb	r2, r1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	75da      	strb	r2, [r3, #23]
            status_ = Q_HANDLED();
 8001ace:	2303      	movs	r3, #3
 8001ad0:	60fb      	str	r3, [r7, #12]
            break;
 8001ad2:	e04b      	b.n	8001b6c <Clock_Alarm_as_sec_d2+0xf4>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d2::SET} */
        case SET_SIG: {
            ++me->temp_digit;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7ddb      	ldrb	r3, [r3, #23]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	75da      	strb	r2, [r3, #23]
            me->temp_digit %= 10;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7dda      	ldrb	r2, [r3, #23]
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <Clock_Alarm_as_sec_d2+0x104>)
 8001ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aea:	08d9      	lsrs	r1, r3, #3
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	75da      	strb	r2, [r3, #23]
            me->temp_time -=  DIGIT2(GET_SEC(me->temp_time));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68d8      	ldr	r0, [r3, #12]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68d9      	ldr	r1, [r3, #12]
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <Clock_Alarm_as_sec_d2+0x100>)
 8001b06:	fba3 2301 	umull	r2, r3, r3, r1
 8001b0a:	095a      	lsrs	r2, r3, #5
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	1aca      	subs	r2, r1, r3
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <Clock_Alarm_as_sec_d2+0x104>)
 8001b18:	fba3 1302 	umull	r1, r3, r3, r2
 8001b1c:	08d9      	lsrs	r1, r3, #3
 8001b1e:	460b      	mov	r3, r1
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	1ad1      	subs	r1, r2, r3
 8001b28:	1a42      	subs	r2, r0, r1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
            me->temp_time += (me->temp_digit);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	7dd2      	ldrb	r2, [r2, #23]
 8001b36:	441a      	add	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
            Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	2100      	movs	r1, #0
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7fe fe0d 	bl	8000760 <Clock_Alarm_display_clock_setting_time>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
 8001b46:	2109      	movs	r1, #9
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 fb35 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8001b4e:	2303      	movs	r3, #3
 8001b50:	60fb      	str	r3, [r7, #12]
            break;
 8001b52:	e00b      	b.n	8001b6c <Clock_Alarm_as_sec_d2+0xf4>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_sec_d2::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_format);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <Clock_Alarm_as_sec_d2+0x108>)
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	60fb      	str	r3, [r7, #12]
            break;
 8001b5e:	e005      	b.n	8001b6c <Clock_Alarm_as_sec_d2+0xf4>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <Clock_Alarm_as_sec_d2+0x10c>)
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
            break;
 8001b6a:	bf00      	nop
        }
    }
    return status_;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	88888889 	.word	0x88888889
 8001b7c:	cccccccd 	.word	0xcccccccd
 8001b80:	08001b89 	.word	0x08001b89
 8001b84:	080013a1 	.word	0x080013a1

08001b88 <Clock_Alarm_as_format>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_format} .....*/
static QState Clock_Alarm_as_format(Clock_Alarm * const me, QEvt const * const e) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d060      	beq.n	8001c5c <Clock_Alarm_as_format+0xd4>
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	dc75      	bgt.n	8001c8a <Clock_Alarm_as_format+0x102>
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d002      	beq.n	8001ba8 <Clock_Alarm_as_format+0x20>
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d01f      	beq.n	8001be6 <Clock_Alarm_as_format+0x5e>
 8001ba6:	e070      	b.n	8001c8a <Clock_Alarm_as_format+0x102>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_format} */
        case Q_ENTRY_SIG: {
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001ba8:	2103      	movs	r1, #3
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 fb04 	bl	80021b8 <display_set_cursor>
            //String msg[3] = {"24H","AM ","PM "};
            char msg[3][3]={"24H","AM ","PM "};
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <Clock_Alarm_as_format+0x118>)
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bb8:	c303      	stmia	r3!, {r0, r1}
 8001bba:	701a      	strb	r2, [r3, #0]
            display_write(msg[me->temp_format],CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7d9b      	ldrb	r3, [r3, #22]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f107 0210 	add.w	r2, r7, #16
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	440b      	add	r3, r1
 8001bcc:	4413      	add	r3, r2
 8001bce:	2203      	movs	r2, #3
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fade 	bl	8002194 <display_write>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001bd8:	2103      	movs	r1, #3
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 faec 	bl	80021b8 <display_set_cursor>

            status_ = Q_HANDLED();
 8001be0:	2303      	movs	r3, #3
 8001be2:	61fb      	str	r3, [r7, #28]
            break;
 8001be4:	e057      	b.n	8001c96 <Clock_Alarm_as_format+0x10e>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_format::SET} */
        case SET_SIG: {
            char msg[4]={0};
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]

            if(me->temp_format == FORMAT_24H){
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7d9b      	ldrb	r3, [r3, #22]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <Clock_Alarm_as_format+0x84>
                me->temp_format = FORMAT_AM;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	759a      	strb	r2, [r3, #22]
                strcpy(msg,"AM");
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <Clock_Alarm_as_format+0x11c>)
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	4611      	mov	r1, r2
 8001c02:	8019      	strh	r1, [r3, #0]
 8001c04:	3302      	adds	r3, #2
 8001c06:	0c12      	lsrs	r2, r2, #16
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e019      	b.n	8001c40 <Clock_Alarm_as_format+0xb8>
            }
            else if(me->temp_format == FORMAT_AM){
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7d9b      	ldrb	r3, [r3, #22]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10c      	bne.n	8001c2e <Clock_Alarm_as_format+0xa6>
                me->temp_format = FORMAT_PM;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	759a      	strb	r2, [r3, #22]
                strcpy(msg,"PM");
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <Clock_Alarm_as_format+0x120>)
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	4611      	mov	r1, r2
 8001c24:	8019      	strh	r1, [r3, #0]
 8001c26:	3302      	adds	r3, #2
 8001c28:	0c12      	lsrs	r2, r2, #16
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e008      	b.n	8001c40 <Clock_Alarm_as_format+0xb8>
            }
            else if (me->temp_format == FORMAT_PM){
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7d9b      	ldrb	r3, [r3, #22]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d104      	bne.n	8001c40 <Clock_Alarm_as_format+0xb8>
                me->temp_format = FORMAT_24H;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	759a      	strb	r2, [r3, #22]
                strcpy(msg,"24H");
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <Clock_Alarm_as_format+0x124>)
 8001c3e:	60fb      	str	r3, [r7, #12]
            }
            display_write(msg,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	2203      	movs	r2, #3
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 faa3 	bl	8002194 <display_write>
            display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
 8001c4e:	2103      	movs	r1, #3
 8001c50:	2000      	movs	r0, #0
 8001c52:	f000 fab1 	bl	80021b8 <display_set_cursor>

            status_ = Q_HANDLED();
 8001c56:	2303      	movs	r3, #3
 8001c58:	61fb      	str	r3, [r7, #28]
            break;
 8001c5a:	e01c      	b.n	8001c96 <Clock_Alarm_as_format+0x10e>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_format::OK} */
        case OK_SIG: {
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_format::OK::[is_time_set_error(me->temp_time~} */
            if (is_time_set_error(me->temp_time,(time_format_t)me->temp_format)) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7d9b      	ldrb	r3, [r3, #22]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 faf6 	bl	8002258 <is_time_set_error>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <Clock_Alarm_as_format+0xf6>
                status_ = Q_TRAN(&Clock_Alarm_as_error);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <Clock_Alarm_as_format+0x128>)
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	2308      	movs	r3, #8
 8001c7a:	61fb      	str	r3, [r7, #28]
            }
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_format::OK::[else]} */
            else {
                status_ = Q_TRAN(&Clock_Alarm_alarm_onoff);
            }
            break;
 8001c7c:	e00b      	b.n	8001c96 <Clock_Alarm_as_format+0x10e>
                status_ = Q_TRAN(&Clock_Alarm_alarm_onoff);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <Clock_Alarm_as_format+0x12c>)
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	2308      	movs	r3, #8
 8001c86:	61fb      	str	r3, [r7, #28]
            break;
 8001c88:	e005      	b.n	8001c96 <Clock_Alarm_as_format+0x10e>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <Clock_Alarm_as_format+0x130>)
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
            break;
 8001c94:	bf00      	nop
        }
    }
    return status_;
 8001c96:	69fb      	ldr	r3, [r7, #28]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	080071b0 	.word	0x080071b0
 8001ca4:	080071a8 	.word	0x080071a8
 8001ca8:	080071ac 	.word	0x080071ac
 8001cac:	00483432 	.word	0x00483432
 8001cb0:	08001cbd 	.word	0x08001cbd
 8001cb4:	08001e25 	.word	0x08001e25
 8001cb8:	080013a1 	.word	0x080013a1

08001cbc <Clock_Alarm_as_error>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error} ......*/
static QState Clock_Alarm_as_error(Clock_Alarm * const me, QEvt const * const e) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	3b02      	subs	r3, #2
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	d829      	bhi.n	8001d24 <Clock_Alarm_as_error+0x68>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <Clock_Alarm_as_error+0x1c>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001cf5 	.word	0x08001cf5
 8001cdc:	08001d01 	.word	0x08001d01
 8001ce0:	08001d19 	.word	0x08001d19
 8001ce4:	08001d0d 	.word	0x08001d0d
 8001ce8:	08001d25 	.word	0x08001d25
 8001cec:	08001d25 	.word	0x08001d25
 8001cf0:	08001d13 	.word	0x08001d13
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error} */
        case Q_EXIT_SIG: {
            me->timeout = 0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	761a      	strb	r2, [r3, #24]
            status_ = Q_HANDLED();
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]
            break;
 8001cfe:	e017      	b.n	8001d30 <Clock_Alarm_as_error+0x74>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_as_err_on);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <Clock_Alarm_as_error+0x84>)
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	2308      	movs	r3, #8
 8001d08:	60fb      	str	r3, [r7, #12]
            break;
 8001d0a:	e011      	b.n	8001d30 <Clock_Alarm_as_error+0x74>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::OK} */
        case OK_SIG: {
            status_ = Q_HANDLED();
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	60fb      	str	r3, [r7, #12]
            break;
 8001d10:	e00e      	b.n	8001d30 <Clock_Alarm_as_error+0x74>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::TICK} */
        case TICK_SIG: {
            status_ = Q_HANDLED();
 8001d12:	2303      	movs	r3, #3
 8001d14:	60fb      	str	r3, [r7, #12]
            break;
 8001d16:	e00b      	b.n	8001d30 <Clock_Alarm_as_error+0x74>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::SET} */
        case SET_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Alarm_Setting);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <Clock_Alarm_as_error+0x88>)
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	2308      	movs	r3, #8
 8001d20:	60fb      	str	r3, [r7, #12]
            break;
 8001d22:	e005      	b.n	8001d30 <Clock_Alarm_as_error+0x74>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <Clock_Alarm_as_error+0x88>)
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
            break;
 8001d2e:	bf00      	nop
        }
    }
    return status_;
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	08001d49 	.word	0x08001d49
 8001d44:	080013a1 	.word	0x080013a1

08001d48 <Clock_Alarm_as_err_on>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::as_err_on} */
static QState Clock_Alarm_as_err_on(Clock_Alarm * const me, QEvt const * const e) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d002      	beq.n	8001d60 <Clock_Alarm_as_err_on+0x18>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d00a      	beq.n	8001d74 <Clock_Alarm_as_err_on+0x2c>
 8001d5e:	e01f      	b.n	8001da0 <Clock_Alarm_as_err_on+0x58>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::as_err_on} */
        case Q_ENTRY_SIG: {
            char *err_msg;
            err_msg = "Error!";
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <Clock_Alarm_as_err_on+0x70>)
 8001d62:	60bb      	str	r3, [r7, #8]
            display_write(err_msg , 1 , 4);
 8001d64:	2204      	movs	r2, #4
 8001d66:	2101      	movs	r1, #1
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f000 fa13 	bl	8002194 <display_write>
            //display_write("Error!" , 1 , 4);
            status_ = Q_HANDLED();
 8001d6e:	2303      	movs	r3, #3
 8001d70:	60fb      	str	r3, [r7, #12]
            break;
 8001d72:	e01b      	b.n	8001dac <Clock_Alarm_as_err_on+0x64>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::as_err_on::TICK} */
        case TICK_SIG: {
            ++me->timeout;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e1b      	ldrb	r3, [r3, #24]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	761a      	strb	r2, [r3, #24]
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::as_err_on::TICK::[me->timeout==10]} */
            if (me->timeout == 10) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e1b      	ldrb	r3, [r3, #24]
 8001d84:	2b0a      	cmp	r3, #10
 8001d86:	d108      	bne.n	8001d9a <Clock_Alarm_as_err_on+0x52>
                me->timeout = 0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]
                status_ = Q_TRAN(&Clock_Alarm_as_err_off);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <Clock_Alarm_as_err_on+0x74>)
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	2308      	movs	r3, #8
 8001d96:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001d98:	e008      	b.n	8001dac <Clock_Alarm_as_err_on+0x64>
                status_ = Q_UNHANDLED();
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	60fb      	str	r3, [r7, #12]
            break;
 8001d9e:	e005      	b.n	8001dac <Clock_Alarm_as_err_on+0x64>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_as_error);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <Clock_Alarm_as_err_on+0x78>)
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
            break;
 8001daa:	bf00      	nop
        }
    }
    return status_;
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	080071bc 	.word	0x080071bc
 8001dbc:	08001dc5 	.word	0x08001dc5
 8001dc0:	08001cbd 	.word	0x08001cbd

08001dc4 <Clock_Alarm_as_err_off>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::as_err_off} */
static QState Clock_Alarm_as_err_off(Clock_Alarm * const me, QEvt const * const e) {
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d115      	bne.n	8001e02 <Clock_Alarm_as_err_off+0x3e>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::as_err_off::TICK} */
        case TICK_SIG: {
            ++me->timeout;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7e1b      	ldrb	r3, [r3, #24]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	761a      	strb	r2, [r3, #24]
            /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::as_error::as_err_off::TICK::[me->timeout==10]} */
            if (me->timeout == 10) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7e1b      	ldrb	r3, [r3, #24]
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d108      	bne.n	8001dfc <Clock_Alarm_as_err_off+0x38>
                me->timeout = 0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	761a      	strb	r2, [r3, #24]
                status_ = Q_TRAN(&Clock_Alarm_as_err_on);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <Clock_Alarm_as_err_off+0x58>)
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	2308      	movs	r3, #8
 8001df8:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001dfa:	e008      	b.n	8001e0e <Clock_Alarm_as_err_off+0x4a>
                status_ = Q_UNHANDLED();
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	60fb      	str	r3, [r7, #12]
            break;
 8001e00:	e005      	b.n	8001e0e <Clock_Alarm_as_err_off+0x4a>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_as_error);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <Clock_Alarm_as_err_off+0x5c>)
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
            break;
 8001e0c:	bf00      	nop
        }
    }
    return status_;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	08001d49 	.word	0x08001d49
 8001e20:	08001cbd 	.word	0x08001cbd

08001e24 <Clock_Alarm_alarm_onoff>:
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::alarm_onoff} ...*/
static QState Clock_Alarm_alarm_onoff(Clock_Alarm * const me, QEvt const * const e) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d002      	beq.n	8001e3c <Clock_Alarm_alarm_onoff+0x18>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00f      	beq.n	8001e5a <Clock_Alarm_alarm_onoff+0x36>
 8001e3a:	e026      	b.n	8001e8a <Clock_Alarm_alarm_onoff+0x66>
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::alarm_onoff} */
        case Q_ENTRY_SIG: {
            me->temp_digit = 0U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	75da      	strb	r2, [r3, #23]
            display_write("ALARM_OFF",0,1);
 8001e42:	2201      	movs	r2, #1
 8001e44:	2100      	movs	r1, #0
 8001e46:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <Clock_Alarm_alarm_onoff+0x7c>)
 8001e48:	f000 f9a4 	bl	8002194 <display_write>
            display_set_cursor(0,1);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f000 f9b2 	bl	80021b8 <display_set_cursor>
            status_ = Q_HANDLED();
 8001e54:	2303      	movs	r3, #3
 8001e56:	60fb      	str	r3, [r7, #12]
            break;
 8001e58:	e01d      	b.n	8001e96 <Clock_Alarm_alarm_onoff+0x72>
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting::alarm_onoff::SET} */
        case SET_SIG: {
            if(me->temp_digit){
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7ddb      	ldrb	r3, [r3, #23]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <Clock_Alarm_alarm_onoff+0x50>
                display_write("ALARM_OFF",0,1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	2100      	movs	r1, #0
 8001e66:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <Clock_Alarm_alarm_onoff+0x7c>)
 8001e68:	f000 f994 	bl	8002194 <display_write>
                me->temp_digit = 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	75da      	strb	r2, [r3, #23]
 8001e72:	e007      	b.n	8001e84 <Clock_Alarm_alarm_onoff+0x60>
            }
            else{
                display_write("ALARM_ON",0,1);
 8001e74:	2201      	movs	r2, #1
 8001e76:	2100      	movs	r1, #0
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <Clock_Alarm_alarm_onoff+0x80>)
 8001e7a:	f000 f98b 	bl	8002194 <display_write>
                me->temp_digit = 1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	75da      	strb	r2, [r3, #23]
            }
            status_ = Q_HANDLED();
 8001e84:	2303      	movs	r3, #3
 8001e86:	60fb      	str	r3, [r7, #12]
            break;
 8001e88:	e005      	b.n	8001e96 <Clock_Alarm_alarm_onoff+0x72>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Setting);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <Clock_Alarm_alarm_onoff+0x84>)
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
            break;
 8001e94:	bf00      	nop
        }
    }
    return status_;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	080071c4 	.word	0x080071c4
 8001ea4:	080071d0 	.word	0x080071d0
 8001ea8:	080013a1 	.word	0x080013a1

08001eac <Clock_Alarm_Alarm_Notify>:
/*.${HSMs::Clock_Alarm::SM::Alarm_Notify} ..................................*/
static QState Clock_Alarm_Alarm_Notify(Clock_Alarm * const me, QEvt const * const e) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	2b07      	cmp	r3, #7
 8001ebe:	d841      	bhi.n	8001f44 <Clock_Alarm_Alarm_Notify+0x98>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <Clock_Alarm_Alarm_Notify+0x1c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ee9 	.word	0x08001ee9
 8001ecc:	08001f45 	.word	0x08001f45
 8001ed0:	08001ef5 	.word	0x08001ef5
 8001ed4:	08001f45 	.word	0x08001f45
 8001ed8:	08001f01 	.word	0x08001f01
 8001edc:	08001f45 	.word	0x08001f45
 8001ee0:	08001f45 	.word	0x08001f45
 8001ee4:	08001f0f 	.word	0x08001f0f
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify} */
        case Q_ENTRY_SIG: {
            me->timeout = 0;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	761a      	strb	r2, [r3, #24]
            status_ = Q_HANDLED();
 8001eee:	2303      	movs	r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]
            break;
 8001ef2:	e02d      	b.n	8001f50 <Clock_Alarm_Alarm_Notify+0xa4>
        }
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_alarm_msg_on);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <Clock_Alarm_Alarm_Notify+0xb0>)
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	2308      	movs	r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
            break;
 8001efe:	e027      	b.n	8001f50 <Clock_Alarm_Alarm_Notify+0xa4>
        }
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::OK} */
        case OK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_Clock);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	230b      	movs	r3, #11
 8001f0a:	60fb      	str	r3, [r7, #12]
            break;
 8001f0c:	e020      	b.n	8001f50 <Clock_Alarm_Alarm_Notify+0xa4>
        }
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::TICK} */
        case TICK_SIG: {
            ++me->alarm_timeout;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7e5b      	ldrb	r3, [r3, #25]
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	765a      	strb	r2, [r3, #25]
            Clock_Alarm_display_curr_time(me,ALARM_SETTING_CURR_TIME_ROW,ALARM_SETTING_CURR_TIME_COL);
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fb94 	bl	800064c <Clock_Alarm_display_curr_time>
            /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::TICK::[me->alarm_timeout==200U]} */
            if (me->alarm_timeout == 200U) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7e5b      	ldrb	r3, [r3, #25]
 8001f28:	2bc8      	cmp	r3, #200	; 0xc8
 8001f2a:	d108      	bne.n	8001f3e <Clock_Alarm_Alarm_Notify+0x92>
                me->alarm_timeout = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	765a      	strb	r2, [r3, #25]
                status_ = Q_TRAN(&Clock_Alarm_Ticking);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <Clock_Alarm_Alarm_Notify+0xb4>)
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	2308      	movs	r3, #8
 8001f3a:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001f3c:	e008      	b.n	8001f50 <Clock_Alarm_Alarm_Notify+0xa4>
                status_ = Q_UNHANDLED();
 8001f3e:	2302      	movs	r3, #2
 8001f40:	60fb      	str	r3, [r7, #12]
            break;
 8001f42:	e005      	b.n	8001f50 <Clock_Alarm_Alarm_Notify+0xa4>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <Clock_Alarm_Alarm_Notify+0xb8>)
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
            break;
 8001f4e:	bf00      	nop
        }
    }
    return status_;
 8001f50:	68fb      	ldr	r3, [r7, #12]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	08001f69 	.word	0x08001f69
 8001f60:	080008d1 	.word	0x080008d1
 8001f64:	080028d9 	.word	0x080028d9

08001f68 <Clock_Alarm_alarm_msg_on>:
/*.${HSMs::Clock_Alarm::SM::Alarm_Notify::alarm_msg_on} ....................*/
static QState Clock_Alarm_alarm_msg_on(Clock_Alarm * const me, QEvt const * const e) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d002      	beq.n	8001f80 <Clock_Alarm_alarm_msg_on+0x18>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d008      	beq.n	8001f90 <Clock_Alarm_alarm_msg_on+0x28>
 8001f7e:	e01d      	b.n	8001fbc <Clock_Alarm_alarm_msg_on+0x54>
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::alarm_msg_on} */
        case Q_ENTRY_SIG: {
            display_write("ALARM",0,1);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2100      	movs	r1, #0
 8001f84:	4813      	ldr	r0, [pc, #76]	; (8001fd4 <Clock_Alarm_alarm_msg_on+0x6c>)
 8001f86:	f000 f905 	bl	8002194 <display_write>
            status_ = Q_HANDLED();
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	60fb      	str	r3, [r7, #12]
            break;
 8001f8e:	e01b      	b.n	8001fc8 <Clock_Alarm_alarm_msg_on+0x60>
        }
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::alarm_msg_on::TICK} */
        case TICK_SIG: {
            ++me->timeout;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	761a      	strb	r2, [r3, #24]
            /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::alarm_msg_on::TICK::[me->timeout==10]} */
            if (me->timeout == 10) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	2b0a      	cmp	r3, #10
 8001fa2:	d108      	bne.n	8001fb6 <Clock_Alarm_alarm_msg_on+0x4e>
                me->timeout = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	761a      	strb	r2, [r3, #24]
                status_ = Q_TRAN(&Clock_Alarm_alarm_msg_off);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <Clock_Alarm_alarm_msg_on+0x70>)
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001fb4:	e008      	b.n	8001fc8 <Clock_Alarm_alarm_msg_on+0x60>
                status_ = Q_UNHANDLED();
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	60fb      	str	r3, [r7, #12]
            break;
 8001fba:	e005      	b.n	8001fc8 <Clock_Alarm_alarm_msg_on+0x60>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Notify);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <Clock_Alarm_alarm_msg_on+0x74>)
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
            break;
 8001fc6:	bf00      	nop
        }
    }
    return status_;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	080071dc 	.word	0x080071dc
 8001fd8:	08001fe1 	.word	0x08001fe1
 8001fdc:	08001ead 	.word	0x08001ead

08001fe0 <Clock_Alarm_alarm_msg_off>:
/*.${HSMs::Clock_Alarm::SM::Alarm_Notify::alarm_msg_off} ...................*/
static QState Clock_Alarm_alarm_msg_off(Clock_Alarm * const me, QEvt const * const e) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d115      	bne.n	800201e <Clock_Alarm_alarm_msg_off+0x3e>
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::alarm_msg_off::TICK} */
        case TICK_SIG: {
            ++me->timeout;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7e1b      	ldrb	r3, [r3, #24]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	761a      	strb	r2, [r3, #24]
            /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::alarm_msg_off::TICK::[me->timeout==10]} */
            if (me->timeout == 10) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7e1b      	ldrb	r3, [r3, #24]
 8002002:	2b0a      	cmp	r3, #10
 8002004:	d108      	bne.n	8002018 <Clock_Alarm_alarm_msg_off+0x38>
                me->timeout = 0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	761a      	strb	r2, [r3, #24]
                status_ = Q_TRAN(&Clock_Alarm_alarm_msg_on);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <Clock_Alarm_alarm_msg_off+0x58>)
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	2308      	movs	r3, #8
 8002014:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8002016:	e008      	b.n	800202a <Clock_Alarm_alarm_msg_off+0x4a>
                status_ = Q_UNHANDLED();
 8002018:	2302      	movs	r3, #2
 800201a:	60fb      	str	r3, [r7, #12]
            break;
 800201c:	e005      	b.n	800202a <Clock_Alarm_alarm_msg_off+0x4a>
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Alarm_Notify);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <Clock_Alarm_alarm_msg_off+0x5c>)
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
            break;
 8002028:	bf00      	nop
        }
    }
    return status_;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	08001f69 	.word	0x08001f69
 800203c:	08001ead 	.word	0x08001ead

08002040 <Clock_Alarm_ctor>:
/*.$enddef${HSMs::Clock_Alarm} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${HSMs::Clock_Alarm_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${HSMs::Clock_Alarm_ctor} ...............................................*/
void Clock_Alarm_ctor(void) {
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
    QHsm_ctor(&Clock_Alarm_obj.super,Q_STATE_CAST(&Clock_Alarm_initial));
 8002044:	4902      	ldr	r1, [pc, #8]	; (8002050 <Clock_Alarm_ctor+0x10>)
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <Clock_Alarm_ctor+0x14>)
 8002048:	f000 fbb2 	bl	80027b0 <QHsm_ctor>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	08000815 	.word	0x08000815
 8002054:	20000090 	.word	0x20000090

08002058 <HAL_TIM_PeriodElapsedCallback>:
/*.$enddef${HSMs::Clock_Alarm_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    Clock_Alarm_update_curr_time();
 8002060:	f7fe fac6 	bl	80005f0 <Clock_Alarm_update_curr_time>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <convert_12hformat_to_24h>:
 * Description: Converts given integer time in 12H format to integer time 24H format
 * param1 : Integer time in 12H format
 * param2 : time format of type time_format_t
 * return : Integer time in 24H format
 */
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm){
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
    uint8_t hour;
    uint32_t time24h;
    hour = GET_HOUR(time12h);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <convert_12hformat_to_24h+0x54>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	0adb      	lsrs	r3, r3, #11
 8002082:	72fb      	strb	r3, [r7, #11]
    if(ampm == FORMAT_AM){
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d109      	bne.n	800209e <convert_12hformat_to_24h+0x32>
        time24h = (hour == 12)? (time12h-(12UL * 3600UL)) : time12h;
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d103      	bne.n	8002098 <convert_12hformat_to_24h+0x2c>
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <convert_12hformat_to_24h+0x58>)
 8002094:	4413      	add	r3, r2
 8002096:	e000      	b.n	800209a <convert_12hformat_to_24h+0x2e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e009      	b.n	80020b2 <convert_12hformat_to_24h+0x46>
    }else{
        time24h = (hour == 12)? time12h : (time12h +(12UL * 3600UL));
 800209e:	7afb      	ldrb	r3, [r7, #11]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d004      	beq.n	80020ae <convert_12hformat_to_24h+0x42>
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	f64a 03c0 	movw	r3, #43200	; 0xa8c0
 80020aa:	4413      	add	r3, r2
 80020ac:	e000      	b.n	80020b0 <convert_12hformat_to_24h+0x44>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
    }
    return time24h;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	91a2b3c5 	.word	0x91a2b3c5
 80020c4:	ffff5740 	.word	0xffff5740

080020c8 <convert_24hformat_to_12h>:
/*
 * Description: Converts given integer time in 24H format to integer time 12H format
 * param1 : Integer time in 24H format
 * return : Integer time in 12H format
 */
uint32_t convert_24hformat_to_12h(uint32_t time24h){
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    uint8_t hour;
    uint32_t time12h;
    hour = GET_HOUR(time24h);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <convert_24hformat_to_12h+0x4c>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	0adb      	lsrs	r3, r3, #11
 80020da:	72fb      	strb	r3, [r7, #11]

    if(hour == 0)
 80020dc:	7afb      	ldrb	r3, [r7, #11]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <convert_24hformat_to_12h+0x26>
        time12h = time24h + (12UL * 3600UL);
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	f64a 03c0 	movw	r3, #43200	; 0xa8c0
 80020e8:	4413      	add	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e00b      	b.n	8002106 <convert_24hformat_to_12h+0x3e>
    else{
        if((hour < 12UL) || (hour == 12UL))
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	2b0b      	cmp	r3, #11
 80020f2:	d902      	bls.n	80020fa <convert_24hformat_to_12h+0x32>
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d101      	bne.n	80020fe <convert_24hformat_to_12h+0x36>
            return time24h;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	e004      	b.n	8002108 <convert_24hformat_to_12h+0x40>
        else
            time12h = time24h - (12UL * 3600UL);
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <convert_24hformat_to_12h+0x50>)
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
    }
    return time12h;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	91a2b3c5 	.word	0x91a2b3c5
 8002118:	ffff5740 	.word	0xffff5740

0800211c <get_am_or_pm>:
/*
 * Description : Decodes AM/PM information from given time in 24H format
 * param1: Integer time in 24H format
 * return : A string value("AM" or "PM")
 */
char* get_am_or_pm(uint32_t time24h){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

    static char ampm[2];
    memset(ampm,0x00,sizeof(ampm));
 8002124:	2202      	movs	r2, #2
 8002126:	2100      	movs	r1, #0
 8002128:	4818      	ldr	r0, [pc, #96]	; (800218c <get_am_or_pm+0x70>)
 800212a:	f003 fd65 	bl	8005bf8 <memset>

    uint8_t h = GET_HOUR(time24h);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <get_am_or_pm+0x74>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0adb      	lsrs	r3, r3, #11
 8002138:	73fb      	strb	r3, [r7, #15]
    if(h == 0U){
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d106      	bne.n	800214e <get_am_or_pm+0x32>
        ampm[0] = 'A';
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <get_am_or_pm+0x70>)
 8002142:	2241      	movs	r2, #65	; 0x41
 8002144:	701a      	strb	r2, [r3, #0]
		ampm[1] = 'M';
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <get_am_or_pm+0x70>)
 8002148:	224d      	movs	r2, #77	; 0x4d
 800214a:	705a      	strb	r2, [r3, #1]
 800214c:	e016      	b.n	800217c <get_am_or_pm+0x60>
    }else if( h > 12U){
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d906      	bls.n	8002162 <get_am_or_pm+0x46>
        ampm[0] = 'P';
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <get_am_or_pm+0x70>)
 8002156:	2250      	movs	r2, #80	; 0x50
 8002158:	701a      	strb	r2, [r3, #0]
		ampm[1] = 'M';
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <get_am_or_pm+0x70>)
 800215c:	224d      	movs	r2, #77	; 0x4d
 800215e:	705a      	strb	r2, [r3, #1]
 8002160:	e00c      	b.n	800217c <get_am_or_pm+0x60>
    }else if (h == 12U){
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d106      	bne.n	8002176 <get_am_or_pm+0x5a>
        ampm[0] = 'P';
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <get_am_or_pm+0x70>)
 800216a:	2250      	movs	r2, #80	; 0x50
 800216c:	701a      	strb	r2, [r3, #0]
		ampm[1] = 'M';
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <get_am_or_pm+0x70>)
 8002170:	224d      	movs	r2, #77	; 0x4d
 8002172:	705a      	strb	r2, [r3, #1]
 8002174:	e002      	b.n	800217c <get_am_or_pm+0x60>
	}
    else
        ampm[0] = 'A';
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <get_am_or_pm+0x70>)
 8002178:	2241      	movs	r2, #65	; 0x41
 800217a:	701a      	strb	r2, [r3, #0]
		ampm[1] = 'M';
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <get_am_or_pm+0x70>)
 800217e:	224d      	movs	r2, #77	; 0x4d
 8002180:	705a      	strb	r2, [r3, #1]

	return ampm;
 8002182:	4b02      	ldr	r3, [pc, #8]	; (800218c <get_am_or_pm+0x70>)
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200000b4 	.word	0x200000b4
 8002190:	91a2b3c5 	.word	0x91a2b3c5

08002194 <display_write>:
 * Description: Writes a message to the LCD at given row and column number
 * param1 : Message to write in 'String' format
 * param2 : row number of the LCD
 * param2 : column number of the LCD
 */
void  display_write(char *str_, uint8_t r, uint8_t c){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
 80021a0:	4613      	mov	r3, r2
 80021a2:	70bb      	strb	r3, [r7, #2]
//    lcd_set_cursor(c,r);
//    lcd_print_string(str_);

	printf("%s\r\n",str_);
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <display_write+0x20>)
 80021a8:	f003 fd2e 	bl	8005c08 <iprintf>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	080071e4 	.word	0x080071e4

080021b8 <display_set_cursor>:

void display_set_cursor(uint8_t r, uint8_t c){
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	460a      	mov	r2, r1
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71bb      	strb	r3, [r7, #6]
//     lcd_set_cursor(c,r);
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <integertime_to_string>:
/*
 * Description: converts an 'integer' time to 'String' time
 * param1 : time represented in terms of number of seconds
 * return : time as 'String' value in the format HH:MM:SS
 */
char* integertime_to_string(uint32_t time_){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af02      	add	r7, sp, #8
 80021da:	6078      	str	r0, [r7, #4]
    uint8_t h,m,s;
    static char buf[10]; //00:00:00+null
    memset(buf,0x00,sizeof(buf));
 80021dc:	220a      	movs	r2, #10
 80021de:	2100      	movs	r1, #0
 80021e0:	4819      	ldr	r0, [pc, #100]	; (8002248 <integertime_to_string+0x74>)
 80021e2:	f003 fd09 	bl	8005bf8 <memset>
    h = GET_HOUR(time_); /* Extract how many hours the 'time_' represent */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <integertime_to_string+0x78>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0adb      	lsrs	r3, r3, #11
 80021f0:	73fb      	strb	r3, [r7, #15]
    m = GET_MIN(time_);  /* Extract how many minutes the 'time_' represent */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <integertime_to_string+0x7c>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0959      	lsrs	r1, r3, #5
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <integertime_to_string+0x7c>)
 80021fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002202:	095a      	lsrs	r2, r3, #5
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	1aca      	subs	r2, r1, r3
 800220e:	4613      	mov	r3, r2
 8002210:	73bb      	strb	r3, [r7, #14]
    s = GET_SEC(time_);	 /* Extract how many seconds the 'time_' represent */
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <integertime_to_string+0x7c>)
 8002216:	fba3 2301 	umull	r2, r3, r3, r1
 800221a:	095a      	lsrs	r2, r3, #5
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	1aca      	subs	r2, r1, r3
 8002226:	4613      	mov	r3, r2
 8002228:	737b      	strb	r3, [r7, #13]
    sprintf(buf,"%02d:%02d:%02d",h,m,s);
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	7bb9      	ldrb	r1, [r7, #14]
 800222e:	7b7b      	ldrb	r3, [r7, #13]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	460b      	mov	r3, r1
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <integertime_to_string+0x80>)
 8002236:	4804      	ldr	r0, [pc, #16]	; (8002248 <integertime_to_string+0x74>)
 8002238:	f003 fe3a 	bl	8005eb0 <siprintf>
    return buf;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <integertime_to_string+0x74>)
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200000b8 	.word	0x200000b8
 800224c:	91a2b3c5 	.word	0x91a2b3c5
 8002250:	88888889 	.word	0x88888889
 8002254:	080071ec 	.word	0x080071ec

08002258 <is_time_set_error>:



bool is_time_set_error(uint32_t time_,time_format_t format){
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
    uint8_t h = GET_HOUR(time_);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <is_time_set_error+0x48>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	0adb      	lsrs	r3, r3, #11
 800226e:	73fb      	strb	r3, [r7, #15]
    return ((h > 23) || ((h > 12 || (h == 0))&& format != FORMAT_24H) );
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b17      	cmp	r3, #23
 8002274:	d808      	bhi.n	8002288 <is_time_set_error+0x30>
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b0c      	cmp	r3, #12
 800227a:	d802      	bhi.n	8002282 <is_time_set_error+0x2a>
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <is_time_set_error+0x34>
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <is_time_set_error+0x34>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <is_time_set_error+0x36>
 800228c:	2300      	movs	r3, #0
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	91a2b3c5 	.word	0x91a2b3c5

080022a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022aa:	f000 fed2 	bl	8003052 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ae:	f000 f899 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b2:	f000 f96d 	bl	8002590 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80022b6:	f000 f93b 	bl	8002530 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80022ba:	f000 f901 	bl	80024c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80022be:	4842      	ldr	r0, [pc, #264]	; (80023c8 <main+0x124>)
 80022c0:	f000 fcb2 	bl	8002c28 <RetargetInit>
  Clock_Alarm_ctor();
 80022c4:	f7ff febc 	bl	8002040 <Clock_Alarm_ctor>
  QHSM_INIT(super_ClockAlarm,(void *)0,0);
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <main+0x128>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <main+0x36>
 80022d2:	216c      	movs	r1, #108	; 0x6c
 80022d4:	483e      	ldr	r0, [pc, #248]	; (80023d0 <main+0x12c>)
 80022d6:	f000 fa53 	bl	8002780 <Q_onAssert>
 80022da:	4b3c      	ldr	r3, [pc, #240]	; (80023cc <main+0x128>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3a      	ldr	r2, [pc, #232]	; (80023cc <main+0x128>)
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	4610      	mov	r0, r2
 80022ea:	4798      	blx	r3
  HAL_TIM_Base_Start_IT(&htim6);
 80022ec:	4839      	ldr	r0, [pc, #228]	; (80023d4 <main+0x130>)
 80022ee:	f002 fb6f 	bl	80049d0 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

	  uint8_t b1,b2,btn_pad_value;

	  b1 = HAL_GPIO_ReadPin(BUTON1_GPIO_Port,BUTON1_Pin);
 80022f2:	2120      	movs	r1, #32
 80022f4:	4838      	ldr	r0, [pc, #224]	; (80023d8 <main+0x134>)
 80022f6:	f001 f9c7 	bl	8003688 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
	  b2 = HAL_GPIO_ReadPin(BUTON2_GPIO_Port,BUTON2_Pin);
 80022fe:	2110      	movs	r1, #16
 8002300:	4835      	ldr	r0, [pc, #212]	; (80023d8 <main+0x134>)
 8002302:	f001 f9c1 	bl	8003688 <HAL_GPIO_ReadPin>
 8002306:	4603      	mov	r3, r0
 8002308:	71bb      	strb	r3, [r7, #6]

	  btn_pad_value = (b1 << 1) | b2;
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	b25a      	sxtb	r2, r3
 8002310:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002314:	4313      	orrs	r3, r2
 8002316:	b25b      	sxtb	r3, r3
 8002318:	717b      	strb	r3, [r7, #5]

	  /* Software button debouncing */
	  btn_pad_value = process_button_pad_value(btn_pad_value);
 800231a:	797b      	ldrb	r3, [r7, #5]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f9e5 	bl	80026ec <process_button_pad_value>
 8002322:	4603      	mov	r3, r0
 8002324:	717b      	strb	r3, [r7, #5]


	  if(btn_pad_value){
 8002326:	797b      	ldrb	r3, [r7, #5]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d02a      	beq.n	8002382 <main+0xde>

		  if(btn_pad_value == BTN_PAD_VALUE_SET){
 800232c:	797b      	ldrb	r3, [r7, #5]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d102      	bne.n	8002338 <main+0x94>
			  ee.sig = (QSignal)SET_SIG;
 8002332:	2304      	movs	r3, #4
 8002334:	803b      	strh	r3, [r7, #0]
 8002336:	e00a      	b.n	800234e <main+0xaa>
		  }
		  else if(btn_pad_value == BTN_PAD_VALUE_OK){
 8002338:	797b      	ldrb	r3, [r7, #5]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <main+0xa0>
			  ee.sig = (QSignal)OK_SIG;
 800233e:	2305      	movs	r3, #5
 8002340:	803b      	strh	r3, [r7, #0]
 8002342:	e004      	b.n	800234e <main+0xaa>
		  }
		  else if(btn_pad_value == BTN_PAD_VALUE_ABRT){
 8002344:	797b      	ldrb	r3, [r7, #5]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d101      	bne.n	800234e <main+0xaa>
			  ee.sig = (QSignal)ABRT_SIG;
 800234a:	2306      	movs	r3, #6
 800234c:	803b      	strh	r3, [r7, #0]
		  }


		  //3. send it to event dispatcher
		  QHSM_DISPATCH(super_ClockAlarm, &ee, 0U);
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <main+0x128>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <main+0x128>)
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	4639      	mov	r1, r7
 800235c:	4610      	mov	r0, r2
 800235e:	4798      	blx	r3

	  }

	  while(HAL_GetTick() - tick_time > 50){
 8002360:	e00f      	b.n	8002382 <main+0xde>
		  tick_time = HAL_GetTick();
 8002362:	f000 fec7 	bl	80030f4 <HAL_GetTick>
 8002366:	4603      	mov	r3, r0
 8002368:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <main+0x138>)
 800236a:	6013      	str	r3, [r2, #0]
		  ee.sig = (QSignal)TICK_SIG;
 800236c:	2308      	movs	r3, #8
 800236e:	803b      	strh	r3, [r7, #0]
		  QHSM_DISPATCH(super_ClockAlarm, &ee, 0U);
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <main+0x128>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <main+0x128>)
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	4639      	mov	r1, r7
 800237e:	4610      	mov	r0, r2
 8002380:	4798      	blx	r3
	  while(HAL_GetTick() - tick_time > 50){
 8002382:	f000 feb7 	bl	80030f4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <main+0x138>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b32      	cmp	r3, #50	; 0x32
 8002390:	d8e7      	bhi.n	8002362 <main+0xbe>
	  }

	  while(HAL_GetTick() - alarm_time > 500){
 8002392:	e00f      	b.n	80023b4 <main+0x110>
		  alarm_time = HAL_GetTick();
 8002394:	f000 feae 	bl	80030f4 <HAL_GetTick>
 8002398:	4603      	mov	r3, r0
 800239a:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <main+0x13c>)
 800239c:	6013      	str	r3, [r2, #0]
		  ee.sig = (QSignal)ALARM_SIG;
 800239e:	2307      	movs	r3, #7
 80023a0:	803b      	strh	r3, [r7, #0]
		  QHSM_DISPATCH(super_ClockAlarm, &ee, 0U);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <main+0x128>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <main+0x128>)
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4639      	mov	r1, r7
 80023b0:	4610      	mov	r0, r2
 80023b2:	4798      	blx	r3
	  while(HAL_GetTick() - alarm_time > 500){
 80023b4:	f000 fe9e 	bl	80030f4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <main+0x13c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023c4:	d8e6      	bhi.n	8002394 <main+0xf0>
  {
 80023c6:	e794      	b.n	80022f2 <main+0x4e>
 80023c8:	20000110 	.word	0x20000110
 80023cc:	0800721c 	.word	0x0800721c
 80023d0:	08007220 	.word	0x08007220
 80023d4:	200000c4 	.word	0x200000c4
 80023d8:	40020400 	.word	0x40020400
 80023dc:	20000194 	.word	0x20000194
 80023e0:	20000198 	.word	0x20000198

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b094      	sub	sp, #80	; 0x50
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	f107 0320 	add.w	r3, r7, #32
 80023ee:	2230      	movs	r2, #48	; 0x30
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fc00 	bl	8005bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002408:	f001 f970 	bl	80036ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <SystemClock_Config+0xd4>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <SystemClock_Config+0xd4>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <SystemClock_Config+0xd4>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <SystemClock_Config+0xd8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <SystemClock_Config+0xd8>)
 800242a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <SystemClock_Config+0xd8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800243c:	2301      	movs	r3, #1
 800243e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002440:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002446:	2302      	movs	r3, #2
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800244a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002450:	2304      	movs	r3, #4
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002454:	23d8      	movs	r3, #216	; 0xd8
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002458:	2302      	movs	r3, #2
 800245a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800245c:	2303      	movs	r3, #3
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f9a1 	bl	80037ac <HAL_RCC_OscConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002470:	f000 f998 	bl	80027a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002474:	f001 f94a 	bl	800370c <HAL_PWREx_EnableOverDrive>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800247e:	f000 f991 	bl	80027a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002482:	230f      	movs	r3, #15
 8002484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002486:	2302      	movs	r3, #2
 8002488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800248e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	2107      	movs	r1, #7
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fc27 	bl	8003cf4 <HAL_RCC_ClockConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80024ac:	f000 f97a 	bl	80027a4 <Error_Handler>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3750      	adds	r7, #80	; 0x50
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40007000 	.word	0x40007000

080024c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <MX_TIM6_Init+0x68>)
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <MX_TIM6_Init+0x6c>)
 80024d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (864-1) * 2;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <MX_TIM6_Init+0x68>)
 80024d8:	f240 62be 	movw	r2, #1726	; 0x6be
 80024dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_TIM6_Init+0x68>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6250-1;
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <MX_TIM6_Init+0x68>)
 80024e6:	f641 0269 	movw	r2, #6249	; 0x1869
 80024ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <MX_TIM6_Init+0x68>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <MX_TIM6_Init+0x68>)
 80024f4:	f002 fa14 	bl	8004920 <HAL_TIM_Base_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80024fe:	f000 f951 	bl	80027a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	4619      	mov	r1, r3
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <MX_TIM6_Init+0x68>)
 8002510:	f002 fcec 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800251a:	f000 f943 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200000c4 	.word	0x200000c4
 800252c:	40001000 	.word	0x40001000

08002530 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <MX_USART3_UART_Init+0x58>)
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <MX_USART3_UART_Init+0x5c>)
 8002538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <MX_USART3_UART_Init+0x58>)
 800253c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_USART3_UART_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <MX_USART3_UART_Init+0x58>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_USART3_UART_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <MX_USART3_UART_Init+0x58>)
 8002556:	220c      	movs	r2, #12
 8002558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <MX_USART3_UART_Init+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <MX_USART3_UART_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <MX_USART3_UART_Init+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <MX_USART3_UART_Init+0x58>)
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_USART3_UART_Init+0x58>)
 8002574:	f002 fd66 	bl	8005044 <HAL_UART_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800257e:	f000 f911 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000110 	.word	0x20000110
 800258c:	40004800 	.word	0x40004800

08002590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08c      	sub	sp, #48	; 0x30
 8002594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a4c      	ldr	r2, [pc, #304]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a46      	ldr	r2, [pc, #280]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b44      	ldr	r3, [pc, #272]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a40      	ldr	r2, [pc, #256]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a3a      	ldr	r2, [pc, #232]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <MX_GPIO_Init+0x14c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002606:	4b35      	ldr	r3, [pc, #212]	; (80026dc <MX_GPIO_Init+0x14c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a34      	ldr	r2, [pc, #208]	; (80026dc <MX_GPIO_Init+0x14c>)
 800260c:	f043 0308 	orr.w	r3, r3, #8
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b32      	ldr	r3, [pc, #200]	; (80026dc <MX_GPIO_Init+0x14c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800261e:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <MX_GPIO_Init+0x14c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <MX_GPIO_Init+0x14c>)
 8002624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <MX_GPIO_Init+0x14c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002636:	2200      	movs	r2, #0
 8002638:	f244 0181 	movw	r1, #16513	; 0x4081
 800263c:	4828      	ldr	r0, [pc, #160]	; (80026e0 <MX_GPIO_Init+0x150>)
 800263e:	f001 f83b 	bl	80036b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	2140      	movs	r1, #64	; 0x40
 8002646:	4827      	ldr	r0, [pc, #156]	; (80026e4 <MX_GPIO_Init+0x154>)
 8002648:	f001 f836 	bl	80036b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800264c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002652:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4821      	ldr	r0, [pc, #132]	; (80026e8 <MX_GPIO_Init+0x158>)
 8002664:	f000 fe64 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002668:	f244 0381 	movw	r3, #16513	; 0x4081
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266e:	2301      	movs	r3, #1
 8002670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	4817      	ldr	r0, [pc, #92]	; (80026e0 <MX_GPIO_Init+0x150>)
 8002682:	f000 fe55 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002686:	2340      	movs	r3, #64	; 0x40
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268a:	2301      	movs	r3, #1
 800268c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4811      	ldr	r0, [pc, #68]	; (80026e4 <MX_GPIO_Init+0x154>)
 800269e:	f000 fe47 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	480b      	ldr	r0, [pc, #44]	; (80026e4 <MX_GPIO_Init+0x154>)
 80026b6:	f000 fe3b 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 80026ba:	2330      	movs	r3, #48	; 0x30
 80026bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026c2:	2302      	movs	r3, #2
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4804      	ldr	r0, [pc, #16]	; (80026e0 <MX_GPIO_Init+0x150>)
 80026ce:	f000 fe2f 	bl	8003330 <HAL_GPIO_Init>

}
 80026d2:	bf00      	nop
 80026d4:	3730      	adds	r7, #48	; 0x30
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40020800 	.word	0x40020800

080026ec <process_button_pad_value>:

/* USER CODE BEGIN 4 */


static uint8_t process_button_pad_value(uint8_t btn_pad_value){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]

	static button_state_t btn_sm_state = NOT_PRESSED;
//	static uint32_t curr_time = HAL_GetTick();
	static uint32_t curr_time = 0;

	switch(btn_sm_state){
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <process_button_pad_value+0x8c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d026      	beq.n	800274c <process_button_pad_value+0x60>
 80026fe:	2b02      	cmp	r3, #2
 8002700:	dc35      	bgt.n	800276e <process_button_pad_value+0x82>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <process_button_pad_value+0x20>
 8002706:	2b01      	cmp	r3, #1
 8002708:	d00c      	beq.n	8002724 <process_button_pad_value+0x38>
 800270a:	e030      	b.n	800276e <process_button_pad_value+0x82>

		case NOT_PRESSED:
		  if(btn_pad_value){
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d028      	beq.n	8002764 <process_button_pad_value+0x78>
			  btn_sm_state = BOUNCE;
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <process_button_pad_value+0x8c>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
			  curr_time = HAL_GetTick();
 8002718:	f000 fcec 	bl	80030f4 <HAL_GetTick>
 800271c:	4603      	mov	r3, r0
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <process_button_pad_value+0x90>)
 8002720:	6013      	str	r3, [r2, #0]
		  }
		  break;
 8002722:	e01f      	b.n	8002764 <process_button_pad_value+0x78>

		case BOUNCE:
		  if(HAL_GetTick() - curr_time >= 50){
 8002724:	f000 fce6 	bl	80030f4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <process_button_pad_value+0x90>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b31      	cmp	r3, #49	; 0x31
 8002732:	d919      	bls.n	8002768 <process_button_pad_value+0x7c>
			  //50ms has passed
			  if(btn_pad_value){
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <process_button_pad_value+0x58>
				  btn_sm_state = PRESSED;
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <process_button_pad_value+0x8c>)
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
			  	  return btn_pad_value;
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	e015      	b.n	8002770 <process_button_pad_value+0x84>
			  }
			  else
				  btn_sm_state = NOT_PRESSED;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <process_button_pad_value+0x8c>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800274a:	e00d      	b.n	8002768 <process_button_pad_value+0x7c>

		case PRESSED:
		  if(!btn_pad_value){
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <process_button_pad_value+0x80>
			  btn_sm_state = BOUNCE;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <process_button_pad_value+0x8c>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
			  curr_time = HAL_GetTick();
 8002758:	f000 fccc 	bl	80030f4 <HAL_GetTick>
 800275c:	4603      	mov	r3, r0
 800275e:	4a07      	ldr	r2, [pc, #28]	; (800277c <process_button_pad_value+0x90>)
 8002760:	6013      	str	r3, [r2, #0]
		  }
		  break;
 8002762:	e003      	b.n	800276c <process_button_pad_value+0x80>
		  break;
 8002764:	bf00      	nop
 8002766:	e002      	b.n	800276e <process_button_pad_value+0x82>
		  break;
 8002768:	bf00      	nop
 800276a:	e000      	b.n	800276e <process_button_pad_value+0x82>
		  break;
 800276c:	bf00      	nop

	}

	return 0;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	2000019c 	.word	0x2000019c
 800277c:	200001a0 	.word	0x200001a0

08002780 <Q_onAssert>:


Q_NORETURN Q_onAssert	(	char_t const *const 	module, int_t const 	location){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
	printf("Assertion FAilure!\n");
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <Q_onAssert+0x1c>)
 800278c:	f003 fac2 	bl	8005d14 <puts>
	printf("%s : %d \n",module,location);
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <Q_onAssert+0x20>)
 8002796:	f003 fa37 	bl	8005c08 <iprintf>
	while(1);
 800279a:	e7fe      	b.n	800279a <Q_onAssert+0x1a>
 800279c:	080071fc 	.word	0x080071fc
 80027a0:	08007210 	.word	0x08007210

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ac:	e7fe      	b.n	80027ac <Error_Handler+0x8>
	...

080027b0 <QHsm_ctor>:
* @usage
* The following example illustrates how to invoke QHsm_ctor() in the
* "constructor" of a derived state machine:
* @include qep_qhsm_ctor.c
*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->vptr      = &vtable;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <QHsm_ctor+0x28>)
 80027be:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a06      	ldr	r2, [pc, #24]	; (80027dc <QHsm_ctor+0x2c>)
 80027c4:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	609a      	str	r2, [r3, #8]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	0800724c 	.word	0x0800724c
 80027dc:	080028d9 	.word	0x080028d9

080027e0 <QHsm_init_>:
void QHsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QHsm_init_(QHsm * const me, void const * const e)
#endif
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    /** @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <QHsm_init_+0x28>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <QHsm_init_+0x28>
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <QHsm_init_+0xe4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <QHsm_init_+0x30>
 8002808:	21c8      	movs	r1, #200	; 0xc8
 800280a:	482f      	ldr	r0, [pc, #188]	; (80028c8 <QHsm_init_+0xe8>)
 800280c:	f7ff ffb8 	bl	8002780 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	6278      	str	r0, [r7, #36]	; 0x24

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	2b08      	cmp	r3, #8
 8002820:	d003      	beq.n	800282a <QHsm_init_+0x4a>
 8002822:	21d2      	movs	r1, #210	; 0xd2
 8002824:	4828      	ldr	r0, [pc, #160]	; (80028c8 <QHsm_init_+0xe8>)
 8002826:	f7ff ffab 	bl	8002780 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28

        path[0] = me->temp.fun;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	60fb      	str	r3, [r7, #12]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4924      	ldr	r1, [pc, #144]	; (80028cc <QHsm_init_+0xec>)
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
        while (me->temp.fun != t) {
 800283e:	e016      	b.n	800286e <QHsm_init_+0x8e>
            ++ip;
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	3301      	adds	r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	2b05      	cmp	r3, #5
 800284a:	dd03      	ble.n	8002854 <QHsm_init_+0x74>
 800284c:	21dc      	movs	r1, #220	; 0xdc
 800284e:	481e      	ldr	r0, [pc, #120]	; (80028c8 <QHsm_init_+0xe8>)
 8002850:	f7ff ff96 	bl	8002780 <Q_onAssert>
            path[ip] = me->temp.fun;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	3330      	adds	r3, #48	; 0x30
 800285e:	443b      	add	r3, r7
 8002860:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4918      	ldr	r1, [pc, #96]	; (80028cc <QHsm_init_+0xec>)
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
        while (me->temp.fun != t) {
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002874:	429a      	cmp	r2, r3
 8002876:	d1e3      	bne.n	8002840 <QHsm_init_+0x60>
        }
        me->temp.fun = path[0];
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]

        /* retrace the entry path in reverse (desired) order... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	3330      	adds	r3, #48	; 0x30
 8002884:	443b      	add	r3, r7
 8002886:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800288a:	4911      	ldr	r1, [pc, #68]	; (80028d0 <QHsm_init_+0xf0>)
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
            --ip;
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (ip >= 0);
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	daf0      	bge.n	800287e <QHsm_init_+0x9e>

        t = path[0]; /* current state becomes the new source */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	490c      	ldr	r1, [pc, #48]	; (80028d4 <QHsm_init_+0xf4>)
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
#endif /* Q_SPY */

    } while (r == (QState)Q_RET_TRAN);
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d0bc      	beq.n	800282a <QHsm_init_+0x4a>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b4:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ba:	609a      	str	r2, [r3, #8]
}
 80028bc:	bf00      	nop
 80028be:	3730      	adds	r7, #48	; 0x30
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	080028d9 	.word	0x080028d9
 80028c8:	08007234 	.word	0x08007234
 80028cc:	0800723c 	.word	0x0800723c
 80028d0:	08007240 	.word	0x08007240
 80028d4:	08007248 	.word	0x08007248

080028d8 <QHsm_top>:
*          ignores all events.
*
* @note The parameters to this state handler are not used. They are provided
* for conformance with the state-handler function signature ::QStateHandler.
*/
QState QHsm_top(void const * const me, QEvt const * const e) {
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    (void)me; /* suppress the "unused parameter" compiler warning */
    (void)e;  /* suppress the "unused parameter" compiler warning */
    return (QState)Q_RET_IGNORED; /* the top state ignores all events */
 80028e2:	2304      	movs	r3, #4
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <QHsm_dispatch_>:
void QHsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QHsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    QS_CRIT_STAT_

    /** @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <QHsm_dispatch_+0x20>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290c:	429a      	cmp	r2, r3
 800290e:	d004      	beq.n	800291a <QHsm_dispatch_+0x2a>
 8002910:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002914:	484e      	ldr	r0, [pc, #312]	; (8002a50 <QHsm_dispatch_+0x160>)
 8002916:	f7ff ff33 	bl	8002780 <Q_onAssert>
        QS_FUN_PRE_(t);         /* the current state */
    QS_END_PRE_()

    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	623b      	str	r3, [r7, #32]
        r = (*s)(me, e); /* invoke state handler s */
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
 8002928:	62b8      	str	r0, [r7, #40]	; 0x28

        if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	2b02      	cmp	r3, #2
 800292e:	d104      	bne.n	800293a <QHsm_dispatch_+0x4a>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	4948      	ldr	r1, [pc, #288]	; (8002a54 <QHsm_dispatch_+0x164>)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
 8002938:	62b8      	str	r0, [r7, #40]	; 0x28
        }
    } while (r == (QState)Q_RET_SUPER);
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ec      	beq.n	800291a <QHsm_dispatch_+0x2a>

    /* transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2b07      	cmp	r3, #7
 8002944:	d979      	bls.n	8002a3a <QHsm_dispatch_+0x14a>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        int_fast8_t ip;

        path[0] = me->temp.fun; /* save the target of the transition */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	60bb      	str	r3, [r7, #8]
        path[1] = t;
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	60fb      	str	r3, [r7, #12]
        path[2] = s;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	613b      	str	r3, [r7, #16]

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp.fun) {
 8002954:	e00d      	b.n	8002972 <QHsm_dispatch_+0x82>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	493f      	ldr	r1, [pc, #252]	; (8002a58 <QHsm_dispatch_+0x168>)
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
 800295e:	4603      	mov	r3, r0
 8002960:	2b03      	cmp	r3, #3
 8002962:	d103      	bne.n	800296c <QHsm_dispatch_+0x7c>
                QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	493b      	ldr	r1, [pc, #236]	; (8002a54 <QHsm_dispatch_+0x164>)
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	429a      	cmp	r2, r3
 8002978:	d1ed      	bne.n	8002956 <QHsm_dispatch_+0x66>
        }

#ifdef Q_SPY
        ip = QHsm_tran_(me, path, qs_id);
#else
        ip = QHsm_tran_(me, path);
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f86f 	bl	8002a64 <QHsm_tran_>
 8002986:	6278      	str	r0, [r7, #36]	; 0x24

        }
#endif /* Q_SPY */

        /* retrace the entry path in reverse (desired) order... */
        for (; ip >= 0; --ip) {
 8002988:	e00b      	b.n	80029a2 <QHsm_dispatch_+0xb2>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	3330      	adds	r3, #48	; 0x30
 8002990:	443b      	add	r3, r7
 8002992:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002996:	4931      	ldr	r1, [pc, #196]	; (8002a5c <QHsm_dispatch_+0x16c>)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3b01      	subs	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	daf0      	bge.n	800298a <QHsm_dispatch_+0x9a>
        }

        t = path[0];      /* stick the target into register */
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        me->temp.fun = t; /* update the next state */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b0:	609a      	str	r2, [r3, #8]

        /* drill into the target hierarchy... */
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 80029b2:	e03b      	b.n	8002a2c <QHsm_dispatch_+0x13c>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
            path[0] = me->temp.fun;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60bb      	str	r3, [r7, #8]

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4924      	ldr	r1, [pc, #144]	; (8002a54 <QHsm_dispatch_+0x164>)
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3

            while (me->temp.fun != t) {
 80029c8:	e00f      	b.n	80029ea <QHsm_dispatch_+0xfa>
                ++ip;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	3301      	adds	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
                path[ip] = me->temp.fun;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3330      	adds	r3, #48	; 0x30
 80029da:	443b      	add	r3, r7
 80029dc:	f843 2c28 	str.w	r2, [r3, #-40]
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	491b      	ldr	r1, [pc, #108]	; (8002a54 <QHsm_dispatch_+0x164>)
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
            while (me->temp.fun != t) {
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1ea      	bne.n	80029ca <QHsm_dispatch_+0xda>
            }
            me->temp.fun = path[0];
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	dd04      	ble.n	8002a0a <QHsm_dispatch_+0x11a>
 8002a00:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002a04:	4812      	ldr	r0, [pc, #72]	; (8002a50 <QHsm_dispatch_+0x160>)
 8002a06:	f7ff febb 	bl	8002780 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	3330      	adds	r3, #48	; 0x30
 8002a10:	443b      	add	r3, r7
 8002a12:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002a16:	4911      	ldr	r1, [pc, #68]	; (8002a5c <QHsm_dispatch_+0x16c>)
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
                --ip;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
            } while (ip >= 0);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	daf0      	bge.n	8002a0a <QHsm_dispatch_+0x11a>

            t = path[0]; /* current state becomes the new source */
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	490c      	ldr	r1, [pc, #48]	; (8002a60 <QHsm_dispatch_+0x170>)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d0bc      	beq.n	80029b4 <QHsm_dispatch_+0xc4>
        QS_END_PRE_()

    }
#endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3e:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a44:	609a      	str	r2, [r3, #8]
}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	08007234 	.word	0x08007234
 8002a54:	0800723c 	.word	0x0800723c
 8002a58:	08007244 	.word	0x08007244
 8002a5c:	08007240 	.word	0x08007240
 8002a60:	08007248 	.word	0x08007248

08002a64 <QHsm_tran_>:
                              uint_fast8_t const qs_id)
#else
static int_fast8_t QHsm_tran_(QHsm * const me,
                              QStateHandler path[QHSM_MAX_NEST_DEPTH_])
#endif
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
    int_fast8_t ip = -1; /* transition entry path index */
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	61fb      	str	r3, [r7, #28]
    int_fast8_t iq; /* helper transition entry path index */
    QStateHandler t = path[0];
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
    QStateHandler const s = path[2];
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60fb      	str	r3, [r7, #12]
    QState r;
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d106      	bne.n	8002a96 <QHsm_tran_+0x32>
        QEP_EXIT_(s, qs_id); /* exit the source */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4964      	ldr	r1, [pc, #400]	; (8002c1c <QHsm_tran_+0x1b8>)
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
        ip = 0; /* enter the target */
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e0bc      	b.n	8002c10 <QHsm_tran_+0x1ac>
    }
    else {
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of target */
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4961      	ldr	r1, [pc, #388]	; (8002c20 <QHsm_tran_+0x1bc>)
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3

        t = me->temp.fun;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	617b      	str	r3, [r7, #20]

        /* (b) check source==target->super... */
        if (s == t) {
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d102      	bne.n	8002ab2 <QHsm_tran_+0x4e>
            ip = 0; /* enter the target */
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	e0ae      	b.n	8002c10 <QHsm_tran_+0x1ac>
        }
        else {
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of src */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	495a      	ldr	r1, [pc, #360]	; (8002c20 <QHsm_tran_+0x1bc>)
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <QHsm_tran_+0x6e>
                QEP_EXIT_(s, qs_id); /* exit the source */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4955      	ldr	r1, [pc, #340]	; (8002c1c <QHsm_tran_+0x1b8>)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
                ip = 0; /* enter the target */
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e09e      	b.n	8002c10 <QHsm_tran_+0x1ac>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d104      	bne.n	8002ae8 <QHsm_tran_+0x84>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	494e      	ldr	r1, [pc, #312]	; (8002c1c <QHsm_tran_+0x1b8>)
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
 8002ae6:	e093      	b.n	8002c10 <QHsm_tran_+0x1ac>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = 0; /* indicate that LCA not found */
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
                    ip = 1; /* enter target and its superstate */
 8002aec:	2301      	movs	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
                    path[1] = t;      /* save the superstate of target */
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3304      	adds	r3, #4
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	617b      	str	r3, [r7, #20]

                    /* find target->super->super... */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4946      	ldr	r1, [pc, #280]	; (8002c20 <QHsm_tran_+0x1bc>)
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
 8002b0a:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8002b0c:	e024      	b.n	8002b58 <QHsm_tran_+0xf4>
                        ++ip;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
                        path[ip] = me->temp.fun; /* store the entry path */
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6892      	ldr	r2, [r2, #8]
 8002b20:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d10f      	bne.n	8002b4c <QHsm_tran_+0xe8>
                            iq = 1; /* indicate that LCA found */
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	61bb      	str	r3, [r7, #24]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	dd04      	ble.n	8002b40 <QHsm_tran_+0xdc>
 8002b36:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002b3a:	483a      	ldr	r0, [pc, #232]	; (8002c24 <QHsm_tran_+0x1c0>)
 8002b3c:	f7ff fe20 	bl	8002780 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
                            r = (QState)Q_RET_HANDLED; /* terminate loop */
 8002b46:	2303      	movs	r3, #3
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	e005      	b.n	8002b58 <QHsm_tran_+0xf4>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4933      	ldr	r1, [pc, #204]	; (8002c20 <QHsm_tran_+0x1bc>)
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
 8002b56:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0d7      	beq.n	8002b0e <QHsm_tran_+0xaa>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d155      	bne.n	8002c10 <QHsm_tran_+0x1ac>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	dd04      	ble.n	8002b74 <QHsm_tran_+0x110>
 8002b6a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002b6e:	482d      	ldr	r0, [pc, #180]	; (8002c24 <QHsm_tran_+0x1c0>)
 8002b70:	f7ff fe06 	bl	8002780 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4929      	ldr	r1, [pc, #164]	; (8002c1c <QHsm_tran_+0x1b8>)
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	61bb      	str	r3, [r7, #24]
                        r = (QState)Q_RET_IGNORED; /* LCA NOT found */
 8002b80:	2304      	movs	r3, #4
 8002b82:	613b      	str	r3, [r7, #16]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d108      	bne.n	8002ba6 <QHsm_tran_+0x142>
                                r = (QState)Q_RET_HANDLED; /* LCA found */
 8002b94:	2303      	movs	r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
                                ip = iq - 1; /* do not enter LCA */
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
                                iq = -1; /* cause termintion of the loop */
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e002      	b.n	8002bac <QHsm_tran_+0x148>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	61bb      	str	r3, [r7, #24]
                            }
                        } while (iq >= 0);
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	dae8      	bge.n	8002b84 <QHsm_tran_+0x120>

                        /* LCA not found? */
                        if (r != (QState)Q_RET_HANDLED) {
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d02b      	beq.n	8002c10 <QHsm_tran_+0x1ac>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED; /* keep looping */
 8002bb8:	2304      	movs	r3, #4
 8002bba:	613b      	str	r3, [r7, #16]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4917      	ldr	r1, [pc, #92]	; (8002c1c <QHsm_tran_+0x1b8>)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d103      	bne.n	8002bd2 <QHsm_tran_+0x16e>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4914      	ldr	r1, [pc, #80]	; (8002c20 <QHsm_tran_+0x1bc>)
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	617b      	str	r3, [r7, #20]
                                iq = ip;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	61bb      	str	r3, [r7, #24]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d108      	bne.n	8002bfe <QHsm_tran_+0x19a>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
                                        iq = -1; /* break out of inner loop */
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	61bb      	str	r3, [r7, #24]
                                        /* break out of outer loop */
                                        r = (QState)Q_RET_HANDLED;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e002      	b.n	8002c04 <QHsm_tran_+0x1a0>
                                    }
                                    else {
                                        --iq;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	61bb      	str	r3, [r7, #24]
                                    }
                                } while (iq >= 0);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	dae8      	bge.n	8002bdc <QHsm_tran_+0x178>
                            } while (r != (QState)Q_RET_HANDLED);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d1d5      	bne.n	8002bbc <QHsm_tran_+0x158>
                    }
                }
            }
        }
    }
    return ip;
 8002c10:	69fb      	ldr	r3, [r7, #28]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	08007244 	.word	0x08007244
 8002c20:	0800723c 	.word	0x0800723c
 8002c24:	08007234 	.word	0x08007234

08002c28 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002c30:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <RetargetInit+0x28>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <RetargetInit+0x2c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6898      	ldr	r0, [r3, #8]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2202      	movs	r2, #2
 8002c40:	2100      	movs	r1, #0
 8002c42:	f003 f86f 	bl	8005d24 <setvbuf>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200001a4 	.word	0x200001a4
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <_isatty>:

int _isatty(int fd) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db04      	blt.n	8002c70 <_isatty+0x18>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	dc01      	bgt.n	8002c70 <_isatty+0x18>
    return 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e005      	b.n	8002c7c <_isatty+0x24>

  errno = EBADF;
 8002c70:	f002 ff98 	bl	8005ba4 <__errno>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2209      	movs	r2, #9
 8002c78:	601a      	str	r2, [r3, #0]
  return 0;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_write>:

int _write(int fd, char* ptr, int len) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d002      	beq.n	8002c9c <_write+0x18>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d111      	bne.n	8002cc0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <_write+0x54>)
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	f002 fa19 	bl	80050e0 <HAL_UART_Transmit>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <_write+0x38>
      return len;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	e008      	b.n	8002cce <_write+0x4a>
    else
      return EIO;
 8002cbc:	2305      	movs	r3, #5
 8002cbe:	e006      	b.n	8002cce <_write+0x4a>
  }
  errno = EBADF;
 8002cc0:	f002 ff70 	bl	8005ba4 <__errno>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2209      	movs	r2, #9
 8002cc8:	601a      	str	r2, [r3, #0]
  return -1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200001a4 	.word	0x200001a4

08002cdc <_close>:

int _close(int fd) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db04      	blt.n	8002cf4 <_close+0x18>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	dc01      	bgt.n	8002cf4 <_close+0x18>
    return 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e006      	b.n	8002d02 <_close+0x26>

  errno = EBADF;
 8002cf4:	f002 ff56 	bl	8005ba4 <__errno>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2209      	movs	r2, #9
 8002cfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002d16:	f002 ff45 	bl	8005ba4 <__errno>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2209      	movs	r2, #9
 8002d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_read>:

int _read(int fd, char* ptr, int len) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d110      	bne.n	8002d60 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <_read+0x4c>)
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	2201      	movs	r2, #1
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	f002 fa5c 	bl	8005206 <HAL_UART_Receive>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <_read+0x30>
      return 1;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e008      	b.n	8002d6e <_read+0x42>
    else
      return EIO;
 8002d5c:	2305      	movs	r3, #5
 8002d5e:	e006      	b.n	8002d6e <_read+0x42>
  }
  errno = EBADF;
 8002d60:	f002 ff20 	bl	8005ba4 <__errno>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2209      	movs	r2, #9
 8002d68:	601a      	str	r2, [r3, #0]
  return -1;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200001a4 	.word	0x200001a4

08002d7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db08      	blt.n	8002d9e <_fstat+0x22>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	dc05      	bgt.n	8002d9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d98:	605a      	str	r2, [r3, #4]
    return 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e005      	b.n	8002daa <_fstat+0x2e>
  }

  errno = EBADF;
 8002d9e:	f002 ff01 	bl	8005ba4 <__errno>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2209      	movs	r2, #9
 8002da6:	601a      	str	r2, [r3, #0]
  return 0;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_MspInit+0x44>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <HAL_MspInit+0x44>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_MspInit+0x44>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_MspInit+0x44>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <HAL_MspInit+0x44>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_MspInit+0x44>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_TIM_Base_MspInit+0x44>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d113      	bne.n	8002e36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_TIM_Base_MspInit+0x48>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <HAL_TIM_Base_MspInit+0x48>)
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_TIM_Base_MspInit+0x48>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2036      	movs	r0, #54	; 0x36
 8002e2c:	f000 fa49 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e30:	2036      	movs	r0, #54	; 0x36
 8002e32:	f000 fa62 	bl	80032fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40001000 	.word	0x40001000
 8002e44:	40023800 	.word	0x40023800

08002e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0aa      	sub	sp, #168	; 0xa8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	2284      	movs	r2, #132	; 0x84
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fec5 	bl	8005bf8 <memset>
  if(huart->Instance==USART3)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a22      	ldr	r2, [pc, #136]	; (8002efc <HAL_UART_MspInit+0xb4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d13c      	bne.n	8002ef2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 f95a 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e92:	f7ff fc87 	bl	80027a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_UART_MspInit+0xb8>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_UART_MspInit+0xb8>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_UART_MspInit+0xb8>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_UART_MspInit+0xb8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <HAL_UART_MspInit+0xb8>)
 8002eb4:	f043 0308 	orr.w	r3, r3, #8
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_UART_MspInit+0xb8>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002eea:	4619      	mov	r1, r3
 8002eec:	4805      	ldr	r0, [pc, #20]	; (8002f04 <HAL_UART_MspInit+0xbc>)
 8002eee:	f000 fa1f 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	37a8      	adds	r7, #168	; 0xa8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40004800 	.word	0x40004800
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020c00 	.word	0x40020c00

08002f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f0c:	e7fe      	b.n	8002f0c <NMI_Handler+0x4>

08002f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f12:	e7fe      	b.n	8002f12 <HardFault_Handler+0x4>

08002f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <MemManage_Handler+0x4>

08002f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <BusFault_Handler+0x4>

08002f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <UsageFault_Handler+0x4>

08002f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f54:	f000 f8ba 	bl	80030cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <TIM6_DAC_IRQHandler+0x10>)
 8002f62:	f001 fddc 	bl	8004b1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200000c4 	.word	0x200000c4

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f002 fe00 	bl	8005ba4 <__errno>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <_sbrk+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20050000 	.word	0x20050000
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	200001a8 	.word	0x200001a8
 8002fd8:	200001c0 	.word	0x200001c0

08002fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <SystemInit+0x20>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <SystemInit+0x20>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003004:	480d      	ldr	r0, [pc, #52]	; (800303c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003006:	490e      	ldr	r1, [pc, #56]	; (8003040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003008:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800301c:	4c0b      	ldr	r4, [pc, #44]	; (800304c <LoopFillZerobss+0x26>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800302a:	f7ff ffd7 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800302e:	f002 fdbf 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003032:	f7ff f937 	bl	80022a4 <main>
  bx  lr    
 8003036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003038:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800303c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003040:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003044:	08007314 	.word	0x08007314
  ldr r2, =_sbss
 8003048:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800304c:	200001c0 	.word	0x200001c0

08003050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003050:	e7fe      	b.n	8003050 <ADC_IRQHandler>

08003052 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003056:	2003      	movs	r0, #3
 8003058:	f000 f928 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800305c:	2000      	movs	r0, #0
 800305e:	f000 f805 	bl	800306c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003062:	f7ff fea7 	bl	8002db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_InitTick+0x54>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_InitTick+0x58>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003082:	fbb3 f3f1 	udiv	r3, r3, r1
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f943 	bl	8003316 <HAL_SYSTICK_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e00e      	b.n	80030b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d80a      	bhi.n	80030b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a0:	2200      	movs	r2, #0
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f000 f90b 	bl	80032c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ac:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <HAL_InitTick+0x5c>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000008 	.word	0x20000008
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_IncTick+0x20>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_IncTick+0x24>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <HAL_IncTick+0x24>)
 80030de:	6013      	str	r3, [r2, #0]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000008 	.word	0x20000008
 80030f0:	200001ac 	.word	0x200001ac

080030f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return uwTick;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <HAL_GetTick+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200001ac 	.word	0x200001ac

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <__NVIC_SetPriorityGrouping+0x40>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	4313      	orrs	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x40>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00
 8003150:	05fa0000 	.word	0x05fa0000

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
         );
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f7ff ff8e 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff29 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d4:	f7ff ff3e 	bl	8003154 <__NVIC_GetPriorityGrouping>
 80032d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	f7ff ff8e 	bl	8003200 <NVIC_EncodePriority>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff5d 	bl	80031ac <__NVIC_SetPriority>
}
 80032f2:	bf00      	nop
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff31 	bl	8003170 <__NVIC_EnableIRQ>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ffa2 	bl	8003268 <SysTick_Config>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e175      	b.n	800363c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 8164 	bne.w	8003636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d005      	beq.n	8003386 <HAL_GPIO_Init+0x56>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d130      	bne.n	80033e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0201 	and.w	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d017      	beq.n	8003424 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80be 	beq.w	8003636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_GPIO_Init+0x328>)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_GPIO_Init+0x32c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d037      	beq.n	800356e <HAL_GPIO_Init+0x23e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a57      	ldr	r2, [pc, #348]	; (8003660 <HAL_GPIO_Init+0x330>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d031      	beq.n	800356a <HAL_GPIO_Init+0x23a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_GPIO_Init+0x334>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <HAL_GPIO_Init+0x236>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a55      	ldr	r2, [pc, #340]	; (8003668 <HAL_GPIO_Init+0x338>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <HAL_GPIO_Init+0x232>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_GPIO_Init+0x33c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <HAL_GPIO_Init+0x22e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a53      	ldr	r2, [pc, #332]	; (8003670 <HAL_GPIO_Init+0x340>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x22a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x344>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x226>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a51      	ldr	r2, [pc, #324]	; (8003678 <HAL_GPIO_Init+0x348>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a50      	ldr	r2, [pc, #320]	; (800367c <HAL_GPIO_Init+0x34c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x21a>
 8003546:	2309      	movs	r3, #9
 8003548:	e012      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354a:	230a      	movs	r3, #10
 800354c:	e010      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354e:	2308      	movs	r3, #8
 8003550:	e00e      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003552:	2307      	movs	r3, #7
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003556:	2306      	movs	r3, #6
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003580:	4935      	ldr	r1, [pc, #212]	; (8003658 <HAL_GPIO_Init+0x328>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b2:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_GPIO_Init+0x354>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae86 	bls.w	8003350 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40013800 	.word	0x40013800
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400
 8003664:	40020800 	.word	0x40020800
 8003668:	40020c00 	.word	0x40020c00
 800366c:	40021000 	.word	0x40021000
 8003670:	40021400 	.word	0x40021400
 8003674:	40021800 	.word	0x40021800
 8003678:	40021c00 	.word	0x40021c00
 800367c:	40022000 	.word	0x40022000
 8003680:	40022400 	.word	0x40022400
 8003684:	40013c00 	.word	0x40013c00

08003688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e001      	b.n	80036aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
 80036c4:	4613      	mov	r3, r2
 80036c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c8:	787b      	ldrb	r3, [r7, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036d4:	e003      	b.n	80036de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	041a      	lsls	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	619a      	str	r2, [r3, #24]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000

0800370c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800373a:	f7ff fcdb 	bl	80030f4 <HAL_GetTick>
 800373e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003740:	e009      	b.n	8003756 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003742:	f7ff fcd7 	bl	80030f4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003750:	d901      	bls.n	8003756 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e022      	b.n	800379c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003762:	d1ee      	bne.n	8003742 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800376a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7ff fcc0 	bl	80030f4 <HAL_GetTick>
 8003774:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003776:	e009      	b.n	800378c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003778:	f7ff fcbc 	bl	80030f4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003786:	d901      	bls.n	800378c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e007      	b.n	800379c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003798:	d1ee      	bne.n	8003778 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40007000 	.word	0x40007000

080037ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e291      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 8087 	beq.w	80038de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d0:	4b96      	ldr	r3, [pc, #600]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d00c      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037dc:	4b93      	ldr	r3, [pc, #588]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d112      	bne.n	800380e <HAL_RCC_OscConfig+0x62>
 80037e8:	4b90      	ldr	r3, [pc, #576]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f4:	d10b      	bne.n	800380e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f6:	4b8d      	ldr	r3, [pc, #564]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d06c      	beq.n	80038dc <HAL_RCC_OscConfig+0x130>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d168      	bne.n	80038dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e26b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x7a>
 8003818:	4b84      	ldr	r3, [pc, #528]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a83      	ldr	r2, [pc, #524]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800381e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e02e      	b.n	8003884 <HAL_RCC_OscConfig+0xd8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x9c>
 800382e:	4b7f      	ldr	r3, [pc, #508]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7e      	ldr	r2, [pc, #504]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7b      	ldr	r2, [pc, #492]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e01d      	b.n	8003884 <HAL_RCC_OscConfig+0xd8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0xc0>
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a75      	ldr	r2, [pc, #468]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a72      	ldr	r2, [pc, #456]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0xd8>
 800386c:	4b6f      	ldr	r3, [pc, #444]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6e      	ldr	r2, [pc, #440]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a6b      	ldr	r2, [pc, #428]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800387e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7ff fc32 	bl	80030f4 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7ff fc2e 	bl	80030f4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e21f      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0xe8>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7ff fc1e 	bl	80030f4 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038bc:	f7ff fc1a 	bl	80030f4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e20b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x110>
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d069      	beq.n	80039be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ea:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b4d      	ldr	r3, [pc, #308]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d11c      	bne.n	800393c <HAL_RCC_OscConfig+0x190>
 8003902:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x17a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1df      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	493d      	ldr	r1, [pc, #244]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	e040      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d023      	beq.n	800398c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a38      	ldr	r2, [pc, #224]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7ff fbd0 	bl	80030f4 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003958:	f7ff fbcc 	bl	80030f4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e1bd      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	4b30      	ldr	r3, [pc, #192]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003976:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4929      	ldr	r1, [pc, #164]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
 800398a:	e018      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398c:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7ff fbac 	bl	80030f4 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a0:	f7ff fba8 	bl	80030f4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e199      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d038      	beq.n	8003a3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d019      	beq.n	8003a06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d2:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7ff fb89 	bl	80030f4 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7ff fb85 	bl	80030f4 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e176      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x23a>
 8003a04:	e01a      	b.n	8003a3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7ff fb6f 	bl	80030f4 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1a:	f7ff fb6b 	bl	80030f4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d903      	bls.n	8003a30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e15c      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
 8003a2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	4b91      	ldr	r3, [pc, #580]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ee      	bne.n	8003a1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80a4 	beq.w	8003b92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4a:	4b8b      	ldr	r3, [pc, #556]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	4b88      	ldr	r3, [pc, #544]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a87      	ldr	r2, [pc, #540]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b85      	ldr	r3, [pc, #532]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a72:	4b82      	ldr	r3, [pc, #520]	; (8003c7c <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <HAL_RCC_OscConfig+0x4d0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7e      	ldr	r2, [pc, #504]	; (8003c7c <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8a:	f7ff fb33 	bl	80030f4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7ff fb2f 	bl	80030f4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b64      	cmp	r3, #100	; 0x64
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e120      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa4:	4b75      	ldr	r3, [pc, #468]	; (8003c7c <HAL_RCC_OscConfig+0x4d0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x31a>
 8003ab8:	4b6f      	ldr	r3, [pc, #444]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a6e      	ldr	r2, [pc, #440]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	e02d      	b.n	8003b22 <HAL_RCC_OscConfig+0x376>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x33c>
 8003ace:	4b6a      	ldr	r3, [pc, #424]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4a69      	ldr	r2, [pc, #420]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ada:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a66      	ldr	r2, [pc, #408]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003ae0:	f023 0304 	bic.w	r3, r3, #4
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae6:	e01c      	b.n	8003b22 <HAL_RCC_OscConfig+0x376>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCC_OscConfig+0x35e>
 8003af0:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	f043 0304 	orr.w	r3, r3, #4
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	4b5e      	ldr	r3, [pc, #376]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a5d      	ldr	r2, [pc, #372]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	e00b      	b.n	8003b22 <HAL_RCC_OscConfig+0x376>
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a5a      	ldr	r2, [pc, #360]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
 8003b16:	4b58      	ldr	r3, [pc, #352]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	4a57      	ldr	r2, [pc, #348]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b1c:	f023 0304 	bic.w	r3, r3, #4
 8003b20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d015      	beq.n	8003b56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7ff fae3 	bl	80030f4 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7ff fadf 	bl	80030f4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0ce      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ee      	beq.n	8003b32 <HAL_RCC_OscConfig+0x386>
 8003b54:	e014      	b.n	8003b80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7ff facd 	bl	80030f4 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7ff fac9 	bl	80030f4 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0b8      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ee      	bne.n	8003b5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b86:	4b3c      	ldr	r3, [pc, #240]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a3b      	ldr	r2, [pc, #236]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80a4 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d06b      	beq.n	8003c80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d149      	bne.n	8003c44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb0:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a30      	ldr	r2, [pc, #192]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7ff fa9a 	bl	80030f4 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7ff fa96 	bl	80030f4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e087      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	4313      	orrs	r3, r2
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7ff fa6a 	bl	80030f4 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7ff fa66 	bl	80030f4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e057      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x478>
 8003c42:	e04f      	b.n	8003ce4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7ff fa50 	bl	80030f4 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7ff fa4c 	bl	80030f4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e03d      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4ac>
 8003c76:	e035      	b.n	8003ce4 <HAL_RCC_OscConfig+0x538>
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCC_OscConfig+0x544>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d121      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d11a      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d111      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d107      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0d0      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d910      	bls.n	8003d3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 020f 	bic.w	r2, r3, #15
 8003d22:	4965      	ldr	r1, [pc, #404]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b63      	ldr	r3, [pc, #396]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0b8      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d54:	4b59      	ldr	r3, [pc, #356]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a58      	ldr	r2, [pc, #352]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d6c:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a52      	ldr	r2, [pc, #328]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d78:	4b50      	ldr	r3, [pc, #320]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	494d      	ldr	r1, [pc, #308]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d040      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d115      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e07f      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e073      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e06b      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	4936      	ldr	r1, [pc, #216]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de8:	f7ff f984 	bl	80030f4 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df0:	f7ff f980 	bl	80030f4 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e053      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 020c 	and.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1eb      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d210      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 020f 	bic.w	r2, r3, #15
 8003e2e:	4922      	ldr	r1, [pc, #136]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e032      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4916      	ldr	r1, [pc, #88]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	490e      	ldr	r1, [pc, #56]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e86:	f000 f821 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	490a      	ldr	r1, [pc, #40]	; (8003ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8003e98:	5ccb      	ldrb	r3, [r1, r3]
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f8e0 	bl	800306c <HAL_InitTick>

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023c00 	.word	0x40023c00
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	08007254 	.word	0x08007254
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	20000004 	.word	0x20000004

08003ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed0:	b094      	sub	sp, #80	; 0x50
 8003ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed8:	2300      	movs	r3, #0
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003edc:	2300      	movs	r3, #0
 8003ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee4:	4b79      	ldr	r3, [pc, #484]	; (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d00d      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x40>
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	f200 80e1 	bhi.w	80040b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x34>
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003efe:	e0db      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4b73      	ldr	r3, [pc, #460]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f04:	e0db      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f06:	4b73      	ldr	r3, [pc, #460]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f0a:	e0d8      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0c:	4b6f      	ldr	r3, [pc, #444]	; (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f16:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d063      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	2200      	movs	r2, #0
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
 8003f36:	2300      	movs	r3, #0
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	0159      	lsls	r1, r3, #5
 8003f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f50:	0150      	lsls	r0, r2, #5
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4621      	mov	r1, r4
 8003f58:	1a51      	subs	r1, r2, r1
 8003f5a:	6139      	str	r1, [r7, #16]
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f70:	4659      	mov	r1, fp
 8003f72:	018b      	lsls	r3, r1, #6
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	018a      	lsls	r2, r1, #6
 8003f7e:	4651      	mov	r1, sl
 8003f80:	ebb2 0801 	subs.w	r8, r2, r1
 8003f84:	4659      	mov	r1, fp
 8003f86:	eb63 0901 	sbc.w	r9, r3, r1
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9e:	4690      	mov	r8, r2
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	eb18 0303 	adds.w	r3, r8, r3
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	462b      	mov	r3, r5
 8003fac:	eb49 0303 	adc.w	r3, r9, r3
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	024b      	lsls	r3, r1, #9
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc8:	4621      	mov	r1, r4
 8003fca:	024a      	lsls	r2, r1, #9
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fdc:	f7fc f970 	bl	80002c0 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	e058      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fea:	4b38      	ldr	r3, [pc, #224]	; (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ffa:	623b      	str	r3, [r7, #32]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	f04f 0000 	mov.w	r0, #0
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	0159      	lsls	r1, r3, #5
 8004012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004016:	0150      	lsls	r0, r2, #5
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4641      	mov	r1, r8
 800401e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004022:	4649      	mov	r1, r9
 8004024:	eb63 0b01 	sbc.w	fp, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800403c:	ebb2 040a 	subs.w	r4, r2, sl
 8004040:	eb63 050b 	sbc.w	r5, r3, fp
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	00eb      	lsls	r3, r5, #3
 800404e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004052:	00e2      	lsls	r2, r4, #3
 8004054:	4614      	mov	r4, r2
 8004056:	461d      	mov	r5, r3
 8004058:	4643      	mov	r3, r8
 800405a:	18e3      	adds	r3, r4, r3
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	464b      	mov	r3, r9
 8004060:	eb45 0303 	adc.w	r3, r5, r3
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004072:	4629      	mov	r1, r5
 8004074:	028b      	lsls	r3, r1, #10
 8004076:	4621      	mov	r1, r4
 8004078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800407c:	4621      	mov	r1, r4
 800407e:	028a      	lsls	r2, r1, #10
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004086:	2200      	movs	r2, #0
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	61fa      	str	r2, [r7, #28]
 800408c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004090:	f7fc f916 	bl	80002c0 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80040ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3750      	adds	r7, #80	; 0x50
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	007a1200 	.word	0x007a1200

080040d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCC_GetHCLKFreq+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000000 	.word	0x20000000

080040f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040f4:	f7ff fff0 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4903      	ldr	r1, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	08007264 	.word	0x08007264

08004118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800411c:	f7ff ffdc 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	0b5b      	lsrs	r3, r3, #13
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	4903      	ldr	r1, [pc, #12]	; (800413c <HAL_RCC_GetPCLK2Freq+0x24>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40023800 	.word	0x40023800
 800413c:	08007264 	.word	0x08007264

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004168:	4b69      	ldr	r3, [pc, #420]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	4964      	ldr	r1, [pc, #400]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800419a:	4b5d      	ldr	r3, [pc, #372]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	4959      	ldr	r1, [pc, #356]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b8:	d101      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d017      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041d6:	4b4e      	ldr	r3, [pc, #312]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	494a      	ldr	r1, [pc, #296]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 808b 	beq.w	800433a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	4a39      	ldr	r2, [pc, #228]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422e:	6413      	str	r3, [r2, #64]	; 0x40
 8004230:	4b37      	ldr	r3, [pc, #220]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800423c:	4b35      	ldr	r3, [pc, #212]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a34      	ldr	r2, [pc, #208]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004248:	f7fe ff54 	bl	80030f4 <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fe ff50 	bl	80030f4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e357      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004262:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d035      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	429a      	cmp	r2, r3
 800428a:	d02e      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042b4:	4b16      	ldr	r3, [pc, #88]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d114      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe ff18 	bl	80030f4 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fe ff14 	bl	80030f4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e319      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ee      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f6:	d111      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004306:	400b      	ands	r3, r1
 8004308:	4901      	ldr	r1, [pc, #4]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
 800430e:	e00b      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000
 8004318:	0ffffcff 	.word	0x0ffffcff
 800431c:	4baa      	ldr	r3, [pc, #680]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4aa9      	ldr	r2, [pc, #676]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004326:	6093      	str	r3, [r2, #8]
 8004328:	4ba7      	ldr	r3, [pc, #668]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004334:	49a4      	ldr	r1, [pc, #656]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004336:	4313      	orrs	r3, r2
 8004338:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d010      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004346:	4ba0      	ldr	r3, [pc, #640]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	4a9e      	ldr	r2, [pc, #632]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004356:	4b9c      	ldr	r3, [pc, #624]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004358:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	4999      	ldr	r1, [pc, #612]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004374:	4b94      	ldr	r3, [pc, #592]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004382:	4991      	ldr	r1, [pc, #580]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004396:	4b8c      	ldr	r3, [pc, #560]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a4:	4988      	ldr	r1, [pc, #544]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b8:	4b83      	ldr	r3, [pc, #524]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c6:	4980      	ldr	r1, [pc, #512]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043da:	4b7b      	ldr	r3, [pc, #492]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	4977      	ldr	r1, [pc, #476]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fc:	4b72      	ldr	r3, [pc, #456]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	496f      	ldr	r1, [pc, #444]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800441e:	4b6a      	ldr	r3, [pc, #424]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f023 020c 	bic.w	r2, r3, #12
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442c:	4966      	ldr	r1, [pc, #408]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004440:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	495e      	ldr	r1, [pc, #376]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004462:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004470:	4955      	ldr	r1, [pc, #340]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004484:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	494d      	ldr	r1, [pc, #308]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044a6:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4944      	ldr	r1, [pc, #272]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044c8:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	493c      	ldr	r1, [pc, #240]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	4933      	ldr	r1, [pc, #204]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800450c:	4b2e      	ldr	r3, [pc, #184]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451a:	492b      	ldr	r1, [pc, #172]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800452e:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453c:	4922      	ldr	r1, [pc, #136]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	4912      	ldr	r1, [pc, #72]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a0:	4909      	ldr	r1, [pc, #36]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d006      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80d9 	beq.w	800476e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045bc:	4b02      	ldr	r3, [pc, #8]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a01      	ldr	r2, [pc, #4]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c6:	e001      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80045c8:	40023800 	.word	0x40023800
 80045cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ce:	f7fe fd91 	bl	80030f4 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045d6:	f7fe fd8d 	bl	80030f4 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b64      	cmp	r3, #100	; 0x64
 80045e2:	d901      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e194      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e8:	4b6c      	ldr	r3, [pc, #432]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d021      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11d      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004608:	4b64      	ldr	r3, [pc, #400]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004616:	4b61      	ldr	r3, [pc, #388]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461c:	0e1b      	lsrs	r3, r3, #24
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	019a      	lsls	r2, r3, #6
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	041b      	lsls	r3, r3, #16
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	071b      	lsls	r3, r3, #28
 800463c:	4957      	ldr	r1, [pc, #348]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004662:	2b00      	cmp	r3, #0
 8004664:	d02e      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800466e:	d129      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004670:	4b4a      	ldr	r3, [pc, #296]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004684:	0f1b      	lsrs	r3, r3, #28
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	019a      	lsls	r2, r3, #6
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	071b      	lsls	r3, r3, #28
 80046a4:	493d      	ldr	r1, [pc, #244]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046ac:	4b3b      	ldr	r3, [pc, #236]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b2:	f023 021f 	bic.w	r2, r3, #31
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4937      	ldr	r1, [pc, #220]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01d      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046d0:	4b32      	ldr	r3, [pc, #200]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d6:	0e1b      	lsrs	r3, r3, #24
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046de:	4b2f      	ldr	r3, [pc, #188]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	0f1b      	lsrs	r3, r3, #28
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	019a      	lsls	r2, r3, #6
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	431a      	orrs	r2, r3
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	431a      	orrs	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	071b      	lsls	r3, r3, #28
 8004704:	4925      	ldr	r1, [pc, #148]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d011      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	019a      	lsls	r2, r3, #6
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	071b      	lsls	r3, r3, #28
 8004734:	4919      	ldr	r1, [pc, #100]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004748:	f7fe fcd4 	bl	80030f4 <HAL_GetTick>
 800474c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004750:	f7fe fcd0 	bl	80030f4 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0d7      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004762:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 80cd 	bne.w	8004910 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a08      	ldr	r2, [pc, #32]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004782:	f7fe fcb7 	bl	80030f4 <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800478a:	f7fe fcb3 	bl	80030f4 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	; 0x64
 8004796:	d903      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0ba      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800479c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047a0:	4b5e      	ldr	r3, [pc, #376]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ac:	d0ed      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d12a      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047d6:	4b51      	ldr	r3, [pc, #324]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047e4:	4b4d      	ldr	r3, [pc, #308]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	0f1b      	lsrs	r3, r3, #28
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	071b      	lsls	r3, r3, #28
 800480a:	4944      	ldr	r1, [pc, #272]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004812:	4b42      	ldr	r3, [pc, #264]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004818:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	493d      	ldr	r1, [pc, #244]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d022      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004840:	d11d      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004842:	4b36      	ldr	r3, [pc, #216]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004850:	4b32      	ldr	r3, [pc, #200]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	0f1b      	lsrs	r3, r3, #28
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	019a      	lsls	r2, r3, #6
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	431a      	orrs	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	061b      	lsls	r3, r3, #24
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	071b      	lsls	r3, r3, #28
 8004876:	4929      	ldr	r1, [pc, #164]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d028      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004898:	4b20      	ldr	r3, [pc, #128]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	019a      	lsls	r2, r3, #6
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	071b      	lsls	r3, r3, #28
 80048be:	4917      	ldr	r1, [pc, #92]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	4911      	ldr	r1, [pc, #68]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a0e      	ldr	r2, [pc, #56]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fe fc04 	bl	80030f4 <HAL_GetTick>
 80048ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048f0:	f7fe fc00 	bl	80030f4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e007      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800490a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800490e:	d1ef      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800

08004920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e049      	b.n	80049c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fe fa58 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f000 fa24 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e054      	b.n	8004a92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a12:	d01d      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <HAL_TIM_Base_Start_IT+0xdc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1c      	ldr	r2, [pc, #112]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d115      	bne.n	8004a7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_TIM_Base_Start_IT+0xec>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b06      	cmp	r3, #6
 8004a60:	d015      	beq.n	8004a8e <HAL_TIM_Base_Start_IT+0xbe>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d011      	beq.n	8004a8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7a:	e008      	b.n	8004a8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40010400 	.word	0x40010400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40001800 	.word	0x40001800
 8004abc:	00010007 	.word	0x00010007

08004ac0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6a1a      	ldr	r2, [r3, #32]
 8004ade:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10f      	bne.n	8004b08 <HAL_TIM_Base_Stop_IT+0x48>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	f240 4344 	movw	r3, #1092	; 0x444
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_Base_Stop_IT+0x48>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d122      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d11b      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0202 	mvn.w	r2, #2
 8004b4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f905 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004b66:	e005      	b.n	8004b74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8f7 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f908 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d122      	bne.n	8004bce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d11b      	bne.n	8004bce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0204 	mvn.w	r2, #4
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8db 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004bba:	e005      	b.n	8004bc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f8cd 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8de 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d122      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11b      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0208 	mvn.w	r2, #8
 8004bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8b1 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004c0e:	e005      	b.n	8004c1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8a3 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8b4 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d122      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d11b      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f06f 0210 	mvn.w	r2, #16
 8004c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f887 	bl	8004d70 <HAL_TIM_IC_CaptureCallback>
 8004c62:	e005      	b.n	8004c70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f879 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f88a 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d10e      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0201 	mvn.w	r2, #1
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fd f9db 	bl	8002058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cac:	2b80      	cmp	r3, #128	; 0x80
 8004cae:	d10e      	bne.n	8004cce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f9a7 	bl	800501c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f99a 	bl	8005030 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f838 	bl	8004d98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0220 	mvn.w	r2, #32
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f95a 	bl	8005008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a40      	ldr	r2, [pc, #256]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d027      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2c      	ldr	r2, [pc, #176]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d023      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <TIM_Base_SetConfig+0x134>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <TIM_Base_SetConfig+0x138>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a23      	ldr	r2, [pc, #140]	; (8004ee8 <TIM_Base_SetConfig+0x13c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d103      	bne.n	8004eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	615a      	str	r2, [r3, #20]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800
 8004ee0:	40001800 	.word	0x40001800
 8004ee4:	40001c00 	.word	0x40001c00
 8004ee8:	40002000 	.word	0x40002000

08004eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e06d      	b.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a30      	ldr	r2, [pc, #192]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d108      	bne.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a20      	ldr	r2, [pc, #128]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d01d      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1a      	ldr	r2, [pc, #104]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a15      	ldr	r2, [pc, #84]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10c      	bne.n	8004fce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40010400 	.word	0x40010400
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40014000 	.word	0x40014000
 8005004:	40001800 	.word	0x40001800

08005008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e040      	b.n	80050d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fd feee 	bl	8002e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2224      	movs	r2, #36	; 0x24
 8005070:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f990 	bl	80053a8 <UART_SetConfig>
 8005088:	4603      	mov	r3, r0
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e022      	b.n	80050d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fbe8 	bl	8005870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fc6f 	bl	80059b4 <UART_CheckIdleState>
 80050d6:	4603      	mov	r3, r0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	f040 8081 	bne.w	80051fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_UART_Transmit+0x26>
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e079      	b.n	80051fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_UART_Transmit+0x38>
 8005114:	2302      	movs	r3, #2
 8005116:	e072      	b.n	80051fe <HAL_UART_Transmit+0x11e>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800512e:	f7fd ffe1 	bl	80030f4 <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	88fa      	ldrh	r2, [r7, #6]
 8005140:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514c:	d108      	bne.n	8005160 <HAL_UART_Transmit+0x80>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	e003      	b.n	8005168 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005170:	e02c      	b.n	80051cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2200      	movs	r2, #0
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fc4c 	bl	8005a1a <UART_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e038      	b.n	80051fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	3302      	adds	r3, #2
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	e007      	b.n	80051ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	3301      	adds	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1cc      	bne.n	8005172 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2200      	movs	r2, #0
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fc19 	bl	8005a1a <UART_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e005      	b.n	80051fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b08a      	sub	sp, #40	; 0x28
 800520a:	af02      	add	r7, sp, #8
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521a:	2b20      	cmp	r3, #32
 800521c:	f040 80be 	bne.w	800539c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_UART_Receive+0x26>
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0b6      	b.n	800539e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_UART_Receive+0x38>
 800523a:	2302      	movs	r3, #2
 800523c:	e0af      	b.n	800539e <HAL_UART_Receive+0x198>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2222      	movs	r2, #34	; 0x22
 8005252:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525a:	f7fd ff4b 	bl	80030f4 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d10e      	bne.n	8005298 <HAL_UART_Receive+0x92>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <HAL_UART_Receive+0x88>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800528c:	e02d      	b.n	80052ea <HAL_UART_Receive+0xe4>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	22ff      	movs	r2, #255	; 0xff
 8005292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005296:	e028      	b.n	80052ea <HAL_UART_Receive+0xe4>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10d      	bne.n	80052bc <HAL_UART_Receive+0xb6>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_UART_Receive+0xac>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	22ff      	movs	r2, #255	; 0xff
 80052ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052b0:	e01b      	b.n	80052ea <HAL_UART_Receive+0xe4>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	227f      	movs	r2, #127	; 0x7f
 80052b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ba:	e016      	b.n	80052ea <HAL_UART_Receive+0xe4>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c4:	d10d      	bne.n	80052e2 <HAL_UART_Receive+0xdc>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_UART_Receive+0xd2>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	227f      	movs	r2, #127	; 0x7f
 80052d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d6:	e008      	b.n	80052ea <HAL_UART_Receive+0xe4>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	223f      	movs	r2, #63	; 0x3f
 80052dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052e0:	e003      	b.n	80052ea <HAL_UART_Receive+0xe4>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	d108      	bne.n	800530e <HAL_UART_Receive+0x108>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e003      	b.n	8005316 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800531e:	e032      	b.n	8005386 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2200      	movs	r2, #0
 8005328:	2120      	movs	r1, #32
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fb75 	bl	8005a1a <UART_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e031      	b.n	800539e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10c      	bne.n	800535a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b29a      	uxth	r2, r3
 8005348:	8a7b      	ldrh	r3, [r7, #18]
 800534a:	4013      	ands	r3, r2
 800534c:	b29a      	uxth	r2, r3
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	3302      	adds	r3, #2
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e00c      	b.n	8005374 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2da      	uxtb	r2, r3
 8005362:	8a7b      	ldrh	r3, [r7, #18]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4013      	ands	r3, r2
 8005368:	b2da      	uxtb	r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1c6      	bne.n	8005320 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4ba6      	ldr	r3, [pc, #664]	; (800566c <UART_SetConfig+0x2c4>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	6979      	ldr	r1, [r7, #20]
 80053dc:	430b      	orrs	r3, r1
 80053de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	430a      	orrs	r2, r1
 8005418:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a94      	ldr	r2, [pc, #592]	; (8005670 <UART_SetConfig+0x2c8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d120      	bne.n	8005466 <UART_SetConfig+0xbe>
 8005424:	4b93      	ldr	r3, [pc, #588]	; (8005674 <UART_SetConfig+0x2cc>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b03      	cmp	r3, #3
 8005430:	d816      	bhi.n	8005460 <UART_SetConfig+0xb8>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <UART_SetConfig+0x90>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005449 	.word	0x08005449
 800543c:	08005455 	.word	0x08005455
 8005440:	0800544f 	.word	0x0800544f
 8005444:	0800545b 	.word	0x0800545b
 8005448:	2301      	movs	r3, #1
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e150      	b.n	80056f0 <UART_SetConfig+0x348>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e14d      	b.n	80056f0 <UART_SetConfig+0x348>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e14a      	b.n	80056f0 <UART_SetConfig+0x348>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e147      	b.n	80056f0 <UART_SetConfig+0x348>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e144      	b.n	80056f0 <UART_SetConfig+0x348>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a83      	ldr	r2, [pc, #524]	; (8005678 <UART_SetConfig+0x2d0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d132      	bne.n	80054d6 <UART_SetConfig+0x12e>
 8005470:	4b80      	ldr	r3, [pc, #512]	; (8005674 <UART_SetConfig+0x2cc>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d828      	bhi.n	80054d0 <UART_SetConfig+0x128>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0xdc>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080054d1 	.word	0x080054d1
 800548c:	080054d1 	.word	0x080054d1
 8005490:	080054d1 	.word	0x080054d1
 8005494:	080054c5 	.word	0x080054c5
 8005498:	080054d1 	.word	0x080054d1
 800549c:	080054d1 	.word	0x080054d1
 80054a0:	080054d1 	.word	0x080054d1
 80054a4:	080054bf 	.word	0x080054bf
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d1 	.word	0x080054d1
 80054b4:	080054cb 	.word	0x080054cb
 80054b8:	2300      	movs	r3, #0
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e118      	b.n	80056f0 <UART_SetConfig+0x348>
 80054be:	2302      	movs	r3, #2
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e115      	b.n	80056f0 <UART_SetConfig+0x348>
 80054c4:	2304      	movs	r3, #4
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e112      	b.n	80056f0 <UART_SetConfig+0x348>
 80054ca:	2308      	movs	r3, #8
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e10f      	b.n	80056f0 <UART_SetConfig+0x348>
 80054d0:	2310      	movs	r3, #16
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e10c      	b.n	80056f0 <UART_SetConfig+0x348>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a68      	ldr	r2, [pc, #416]	; (800567c <UART_SetConfig+0x2d4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d120      	bne.n	8005522 <UART_SetConfig+0x17a>
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <UART_SetConfig+0x2cc>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054ea:	2b30      	cmp	r3, #48	; 0x30
 80054ec:	d013      	beq.n	8005516 <UART_SetConfig+0x16e>
 80054ee:	2b30      	cmp	r3, #48	; 0x30
 80054f0:	d814      	bhi.n	800551c <UART_SetConfig+0x174>
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d009      	beq.n	800550a <UART_SetConfig+0x162>
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d810      	bhi.n	800551c <UART_SetConfig+0x174>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <UART_SetConfig+0x15c>
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d006      	beq.n	8005510 <UART_SetConfig+0x168>
 8005502:	e00b      	b.n	800551c <UART_SetConfig+0x174>
 8005504:	2300      	movs	r3, #0
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0f2      	b.n	80056f0 <UART_SetConfig+0x348>
 800550a:	2302      	movs	r3, #2
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e0ef      	b.n	80056f0 <UART_SetConfig+0x348>
 8005510:	2304      	movs	r3, #4
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e0ec      	b.n	80056f0 <UART_SetConfig+0x348>
 8005516:	2308      	movs	r3, #8
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e0e9      	b.n	80056f0 <UART_SetConfig+0x348>
 800551c:	2310      	movs	r3, #16
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e0e6      	b.n	80056f0 <UART_SetConfig+0x348>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a56      	ldr	r2, [pc, #344]	; (8005680 <UART_SetConfig+0x2d8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d120      	bne.n	800556e <UART_SetConfig+0x1c6>
 800552c:	4b51      	ldr	r3, [pc, #324]	; (8005674 <UART_SetConfig+0x2cc>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005536:	2bc0      	cmp	r3, #192	; 0xc0
 8005538:	d013      	beq.n	8005562 <UART_SetConfig+0x1ba>
 800553a:	2bc0      	cmp	r3, #192	; 0xc0
 800553c:	d814      	bhi.n	8005568 <UART_SetConfig+0x1c0>
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d009      	beq.n	8005556 <UART_SetConfig+0x1ae>
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d810      	bhi.n	8005568 <UART_SetConfig+0x1c0>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <UART_SetConfig+0x1a8>
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d006      	beq.n	800555c <UART_SetConfig+0x1b4>
 800554e:	e00b      	b.n	8005568 <UART_SetConfig+0x1c0>
 8005550:	2300      	movs	r3, #0
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e0cc      	b.n	80056f0 <UART_SetConfig+0x348>
 8005556:	2302      	movs	r3, #2
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e0c9      	b.n	80056f0 <UART_SetConfig+0x348>
 800555c:	2304      	movs	r3, #4
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e0c6      	b.n	80056f0 <UART_SetConfig+0x348>
 8005562:	2308      	movs	r3, #8
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e0c3      	b.n	80056f0 <UART_SetConfig+0x348>
 8005568:	2310      	movs	r3, #16
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e0c0      	b.n	80056f0 <UART_SetConfig+0x348>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a44      	ldr	r2, [pc, #272]	; (8005684 <UART_SetConfig+0x2dc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d125      	bne.n	80055c4 <UART_SetConfig+0x21c>
 8005578:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <UART_SetConfig+0x2cc>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005586:	d017      	beq.n	80055b8 <UART_SetConfig+0x210>
 8005588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558c:	d817      	bhi.n	80055be <UART_SetConfig+0x216>
 800558e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005592:	d00b      	beq.n	80055ac <UART_SetConfig+0x204>
 8005594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005598:	d811      	bhi.n	80055be <UART_SetConfig+0x216>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <UART_SetConfig+0x1fe>
 800559e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a2:	d006      	beq.n	80055b2 <UART_SetConfig+0x20a>
 80055a4:	e00b      	b.n	80055be <UART_SetConfig+0x216>
 80055a6:	2300      	movs	r3, #0
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e0a1      	b.n	80056f0 <UART_SetConfig+0x348>
 80055ac:	2302      	movs	r3, #2
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e09e      	b.n	80056f0 <UART_SetConfig+0x348>
 80055b2:	2304      	movs	r3, #4
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e09b      	b.n	80056f0 <UART_SetConfig+0x348>
 80055b8:	2308      	movs	r3, #8
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e098      	b.n	80056f0 <UART_SetConfig+0x348>
 80055be:	2310      	movs	r3, #16
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e095      	b.n	80056f0 <UART_SetConfig+0x348>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <UART_SetConfig+0x2e0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d125      	bne.n	800561a <UART_SetConfig+0x272>
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <UART_SetConfig+0x2cc>)
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055dc:	d017      	beq.n	800560e <UART_SetConfig+0x266>
 80055de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e2:	d817      	bhi.n	8005614 <UART_SetConfig+0x26c>
 80055e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e8:	d00b      	beq.n	8005602 <UART_SetConfig+0x25a>
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ee:	d811      	bhi.n	8005614 <UART_SetConfig+0x26c>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <UART_SetConfig+0x254>
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d006      	beq.n	8005608 <UART_SetConfig+0x260>
 80055fa:	e00b      	b.n	8005614 <UART_SetConfig+0x26c>
 80055fc:	2301      	movs	r3, #1
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e076      	b.n	80056f0 <UART_SetConfig+0x348>
 8005602:	2302      	movs	r3, #2
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e073      	b.n	80056f0 <UART_SetConfig+0x348>
 8005608:	2304      	movs	r3, #4
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e070      	b.n	80056f0 <UART_SetConfig+0x348>
 800560e:	2308      	movs	r3, #8
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e06d      	b.n	80056f0 <UART_SetConfig+0x348>
 8005614:	2310      	movs	r3, #16
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e06a      	b.n	80056f0 <UART_SetConfig+0x348>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1b      	ldr	r2, [pc, #108]	; (800568c <UART_SetConfig+0x2e4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d138      	bne.n	8005696 <UART_SetConfig+0x2ee>
 8005624:	4b13      	ldr	r3, [pc, #76]	; (8005674 <UART_SetConfig+0x2cc>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800562e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005632:	d017      	beq.n	8005664 <UART_SetConfig+0x2bc>
 8005634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005638:	d82a      	bhi.n	8005690 <UART_SetConfig+0x2e8>
 800563a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563e:	d00b      	beq.n	8005658 <UART_SetConfig+0x2b0>
 8005640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005644:	d824      	bhi.n	8005690 <UART_SetConfig+0x2e8>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <UART_SetConfig+0x2aa>
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564e:	d006      	beq.n	800565e <UART_SetConfig+0x2b6>
 8005650:	e01e      	b.n	8005690 <UART_SetConfig+0x2e8>
 8005652:	2300      	movs	r3, #0
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e04b      	b.n	80056f0 <UART_SetConfig+0x348>
 8005658:	2302      	movs	r3, #2
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e048      	b.n	80056f0 <UART_SetConfig+0x348>
 800565e:	2304      	movs	r3, #4
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e045      	b.n	80056f0 <UART_SetConfig+0x348>
 8005664:	2308      	movs	r3, #8
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e042      	b.n	80056f0 <UART_SetConfig+0x348>
 800566a:	bf00      	nop
 800566c:	efff69f3 	.word	0xefff69f3
 8005670:	40011000 	.word	0x40011000
 8005674:	40023800 	.word	0x40023800
 8005678:	40004400 	.word	0x40004400
 800567c:	40004800 	.word	0x40004800
 8005680:	40004c00 	.word	0x40004c00
 8005684:	40005000 	.word	0x40005000
 8005688:	40011400 	.word	0x40011400
 800568c:	40007800 	.word	0x40007800
 8005690:	2310      	movs	r3, #16
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e02c      	b.n	80056f0 <UART_SetConfig+0x348>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a72      	ldr	r2, [pc, #456]	; (8005864 <UART_SetConfig+0x4bc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d125      	bne.n	80056ec <UART_SetConfig+0x344>
 80056a0:	4b71      	ldr	r3, [pc, #452]	; (8005868 <UART_SetConfig+0x4c0>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056ae:	d017      	beq.n	80056e0 <UART_SetConfig+0x338>
 80056b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056b4:	d817      	bhi.n	80056e6 <UART_SetConfig+0x33e>
 80056b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ba:	d00b      	beq.n	80056d4 <UART_SetConfig+0x32c>
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	d811      	bhi.n	80056e6 <UART_SetConfig+0x33e>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <UART_SetConfig+0x326>
 80056c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ca:	d006      	beq.n	80056da <UART_SetConfig+0x332>
 80056cc:	e00b      	b.n	80056e6 <UART_SetConfig+0x33e>
 80056ce:	2300      	movs	r3, #0
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e00d      	b.n	80056f0 <UART_SetConfig+0x348>
 80056d4:	2302      	movs	r3, #2
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e00a      	b.n	80056f0 <UART_SetConfig+0x348>
 80056da:	2304      	movs	r3, #4
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e007      	b.n	80056f0 <UART_SetConfig+0x348>
 80056e0:	2308      	movs	r3, #8
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e004      	b.n	80056f0 <UART_SetConfig+0x348>
 80056e6:	2310      	movs	r3, #16
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e001      	b.n	80056f0 <UART_SetConfig+0x348>
 80056ec:	2310      	movs	r3, #16
 80056ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f8:	d15b      	bne.n	80057b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056fa:	7ffb      	ldrb	r3, [r7, #31]
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d828      	bhi.n	8005752 <UART_SetConfig+0x3aa>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0x360>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	0800572d 	.word	0x0800572d
 800570c:	08005735 	.word	0x08005735
 8005710:	0800573d 	.word	0x0800573d
 8005714:	08005753 	.word	0x08005753
 8005718:	08005743 	.word	0x08005743
 800571c:	08005753 	.word	0x08005753
 8005720:	08005753 	.word	0x08005753
 8005724:	08005753 	.word	0x08005753
 8005728:	0800574b 	.word	0x0800574b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7fe fce0 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8005730:	61b8      	str	r0, [r7, #24]
        break;
 8005732:	e013      	b.n	800575c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005734:	f7fe fcf0 	bl	8004118 <HAL_RCC_GetPCLK2Freq>
 8005738:	61b8      	str	r0, [r7, #24]
        break;
 800573a:	e00f      	b.n	800575c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800573c:	4b4b      	ldr	r3, [pc, #300]	; (800586c <UART_SetConfig+0x4c4>)
 800573e:	61bb      	str	r3, [r7, #24]
        break;
 8005740:	e00c      	b.n	800575c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005742:	f7fe fbc3 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8005746:	61b8      	str	r0, [r7, #24]
        break;
 8005748:	e008      	b.n	800575c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574e:	61bb      	str	r3, [r7, #24]
        break;
 8005750:	e004      	b.n	800575c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	77bb      	strb	r3, [r7, #30]
        break;
 800575a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d074      	beq.n	800584c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	005a      	lsls	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	441a      	add	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b0f      	cmp	r3, #15
 800577c:	d916      	bls.n	80057ac <UART_SetConfig+0x404>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d212      	bcs.n	80057ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f023 030f 	bic.w	r3, r3, #15
 800578e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	b29a      	uxth	r2, r3
 800579c:	89fb      	ldrh	r3, [r7, #14]
 800579e:	4313      	orrs	r3, r2
 80057a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	89fa      	ldrh	r2, [r7, #14]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	e04f      	b.n	800584c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	77bb      	strb	r3, [r7, #30]
 80057b0:	e04c      	b.n	800584c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b2:	7ffb      	ldrb	r3, [r7, #31]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d828      	bhi.n	800580a <UART_SetConfig+0x462>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x418>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	0800580b 	.word	0x0800580b
 80057d0:	080057fb 	.word	0x080057fb
 80057d4:	0800580b 	.word	0x0800580b
 80057d8:	0800580b 	.word	0x0800580b
 80057dc:	0800580b 	.word	0x0800580b
 80057e0:	08005803 	.word	0x08005803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e4:	f7fe fc84 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 80057e8:	61b8      	str	r0, [r7, #24]
        break;
 80057ea:	e013      	b.n	8005814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ec:	f7fe fc94 	bl	8004118 <HAL_RCC_GetPCLK2Freq>
 80057f0:	61b8      	str	r0, [r7, #24]
        break;
 80057f2:	e00f      	b.n	8005814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <UART_SetConfig+0x4c4>)
 80057f6:	61bb      	str	r3, [r7, #24]
        break;
 80057f8:	e00c      	b.n	8005814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fa:	f7fe fb67 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 80057fe:	61b8      	str	r0, [r7, #24]
        break;
 8005800:	e008      	b.n	8005814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	61bb      	str	r3, [r7, #24]
        break;
 8005808:	e004      	b.n	8005814 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	77bb      	strb	r3, [r7, #30]
        break;
 8005812:	bf00      	nop
    }

    if (pclk != 0U)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	085a      	lsrs	r2, r3, #1
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	441a      	add	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b0f      	cmp	r3, #15
 8005832:	d909      	bls.n	8005848 <UART_SetConfig+0x4a0>
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583a:	d205      	bcs.n	8005848 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	e001      	b.n	800584c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005858:	7fbb      	ldrb	r3, [r7, #30]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40007c00 	.word	0x40007c00
 8005868:	40023800 	.word	0x40023800
 800586c:	00f42400 	.word	0x00f42400

08005870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01a      	beq.n	8005986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	d10a      	bne.n	8005986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059c4:	f7fd fb96 	bl	80030f4 <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d10e      	bne.n	80059f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f817 	bl	8005a1a <UART_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e00d      	b.n	8005a12 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b09c      	sub	sp, #112	; 0x70
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	4613      	mov	r3, r2
 8005a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2a:	e0a5      	b.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	f000 80a1 	beq.w	8005b78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fd fb5d 	bl	80030f4 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x32>
 8005a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d13e      	bne.n	8005aca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a60:	667b      	str	r3, [r7, #100]	; 0x64
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e6      	bne.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3308      	adds	r3, #8
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	663b      	str	r3, [r7, #96]	; 0x60
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005aa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e067      	b.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d04f      	beq.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae6:	d147      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
 8005b12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e6      	bne.n	8005af2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	613b      	str	r3, [r7, #16]
   return(result);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3308      	adds	r3, #8
 8005b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b44:	623a      	str	r2, [r7, #32]
 8005b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69f9      	ldr	r1, [r7, #28]
 8005b4a:	6a3a      	ldr	r2, [r7, #32]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e5      	bne.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e010      	b.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4013      	ands	r3, r2
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	f43f af4a 	beq.w	8005a2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3770      	adds	r7, #112	; 0x70
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	; (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4d0d      	ldr	r5, [pc, #52]	; (8005be8 <__libc_init_array+0x38>)
 8005bb4:	4c0d      	ldr	r4, [pc, #52]	; (8005bec <__libc_init_array+0x3c>)
 8005bb6:	1b64      	subs	r4, r4, r5
 8005bb8:	10a4      	asrs	r4, r4, #2
 8005bba:	2600      	movs	r6, #0
 8005bbc:	42a6      	cmp	r6, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	4d0b      	ldr	r5, [pc, #44]	; (8005bf0 <__libc_init_array+0x40>)
 8005bc2:	4c0c      	ldr	r4, [pc, #48]	; (8005bf4 <__libc_init_array+0x44>)
 8005bc4:	f001 fade 	bl	8007184 <_init>
 8005bc8:	1b64      	subs	r4, r4, r5
 8005bca:	10a4      	asrs	r4, r4, #2
 8005bcc:	2600      	movs	r6, #0
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd8:	4798      	blx	r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be2:	4798      	blx	r3
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	0800730c 	.word	0x0800730c
 8005bec:	0800730c 	.word	0x0800730c
 8005bf0:	0800730c 	.word	0x0800730c
 8005bf4:	08007310 	.word	0x08007310

08005bf8 <memset>:
 8005bf8:	4402      	add	r2, r0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d100      	bne.n	8005c02 <memset+0xa>
 8005c00:	4770      	bx	lr
 8005c02:	f803 1b01 	strb.w	r1, [r3], #1
 8005c06:	e7f9      	b.n	8005bfc <memset+0x4>

08005c08 <iprintf>:
 8005c08:	b40f      	push	{r0, r1, r2, r3}
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <iprintf+0x2c>)
 8005c0c:	b513      	push	{r0, r1, r4, lr}
 8005c0e:	681c      	ldr	r4, [r3, #0]
 8005c10:	b124      	cbz	r4, 8005c1c <iprintf+0x14>
 8005c12:	69a3      	ldr	r3, [r4, #24]
 8005c14:	b913      	cbnz	r3, 8005c1c <iprintf+0x14>
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 fb54 	bl	80062c4 <__sinit>
 8005c1c:	ab05      	add	r3, sp, #20
 8005c1e:	9a04      	ldr	r2, [sp, #16]
 8005c20:	68a1      	ldr	r1, [r4, #8]
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fec1 	bl	80069ac <_vfiprintf_r>
 8005c2a:	b002      	add	sp, #8
 8005c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr
 8005c34:	2000000c 	.word	0x2000000c

08005c38 <_puts_r>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	460e      	mov	r6, r1
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	b118      	cbz	r0, 8005c48 <_puts_r+0x10>
 8005c40:	6983      	ldr	r3, [r0, #24]
 8005c42:	b90b      	cbnz	r3, 8005c48 <_puts_r+0x10>
 8005c44:	f000 fb3e 	bl	80062c4 <__sinit>
 8005c48:	69ab      	ldr	r3, [r5, #24]
 8005c4a:	68ac      	ldr	r4, [r5, #8]
 8005c4c:	b913      	cbnz	r3, 8005c54 <_puts_r+0x1c>
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 fb38 	bl	80062c4 <__sinit>
 8005c54:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <_puts_r+0xd0>)
 8005c56:	429c      	cmp	r4, r3
 8005c58:	d120      	bne.n	8005c9c <_puts_r+0x64>
 8005c5a:	686c      	ldr	r4, [r5, #4]
 8005c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c5e:	07db      	lsls	r3, r3, #31
 8005c60:	d405      	bmi.n	8005c6e <_puts_r+0x36>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	0598      	lsls	r0, r3, #22
 8005c66:	d402      	bmi.n	8005c6e <_puts_r+0x36>
 8005c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6a:	f000 fbc9 	bl	8006400 <__retarget_lock_acquire_recursive>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	0719      	lsls	r1, r3, #28
 8005c72:	d51d      	bpl.n	8005cb0 <_puts_r+0x78>
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	b1db      	cbz	r3, 8005cb0 <_puts_r+0x78>
 8005c78:	3e01      	subs	r6, #1
 8005c7a:	68a3      	ldr	r3, [r4, #8]
 8005c7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c80:	3b01      	subs	r3, #1
 8005c82:	60a3      	str	r3, [r4, #8]
 8005c84:	bb39      	cbnz	r1, 8005cd6 <_puts_r+0x9e>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	da38      	bge.n	8005cfc <_puts_r+0xc4>
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	210a      	movs	r1, #10
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f93e 	bl	8005f10 <__swbuf_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d011      	beq.n	8005cbc <_puts_r+0x84>
 8005c98:	250a      	movs	r5, #10
 8005c9a:	e011      	b.n	8005cc0 <_puts_r+0x88>
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <_puts_r+0xd4>)
 8005c9e:	429c      	cmp	r4, r3
 8005ca0:	d101      	bne.n	8005ca6 <_puts_r+0x6e>
 8005ca2:	68ac      	ldr	r4, [r5, #8]
 8005ca4:	e7da      	b.n	8005c5c <_puts_r+0x24>
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <_puts_r+0xd8>)
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	bf08      	it	eq
 8005cac:	68ec      	ldreq	r4, [r5, #12]
 8005cae:	e7d5      	b.n	8005c5c <_puts_r+0x24>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 f97e 	bl	8005fb4 <__swsetup_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d0dd      	beq.n	8005c78 <_puts_r+0x40>
 8005cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8005cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cc2:	07da      	lsls	r2, r3, #31
 8005cc4:	d405      	bmi.n	8005cd2 <_puts_r+0x9a>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	059b      	lsls	r3, r3, #22
 8005cca:	d402      	bmi.n	8005cd2 <_puts_r+0x9a>
 8005ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cce:	f000 fb98 	bl	8006402 <__retarget_lock_release_recursive>
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da04      	bge.n	8005ce4 <_puts_r+0xac>
 8005cda:	69a2      	ldr	r2, [r4, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	dc06      	bgt.n	8005cee <_puts_r+0xb6>
 8005ce0:	290a      	cmp	r1, #10
 8005ce2:	d004      	beq.n	8005cee <_puts_r+0xb6>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	6022      	str	r2, [r4, #0]
 8005cea:	7019      	strb	r1, [r3, #0]
 8005cec:	e7c5      	b.n	8005c7a <_puts_r+0x42>
 8005cee:	4622      	mov	r2, r4
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 f90d 	bl	8005f10 <__swbuf_r>
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d1bf      	bne.n	8005c7a <_puts_r+0x42>
 8005cfa:	e7df      	b.n	8005cbc <_puts_r+0x84>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	250a      	movs	r5, #10
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	6022      	str	r2, [r4, #0]
 8005d04:	701d      	strb	r5, [r3, #0]
 8005d06:	e7db      	b.n	8005cc0 <_puts_r+0x88>
 8005d08:	08007290 	.word	0x08007290
 8005d0c:	080072b0 	.word	0x080072b0
 8005d10:	08007270 	.word	0x08007270

08005d14 <puts>:
 8005d14:	4b02      	ldr	r3, [pc, #8]	; (8005d20 <puts+0xc>)
 8005d16:	4601      	mov	r1, r0
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	f7ff bf8d 	b.w	8005c38 <_puts_r>
 8005d1e:	bf00      	nop
 8005d20:	2000000c 	.word	0x2000000c

08005d24 <setvbuf>:
 8005d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d28:	461d      	mov	r5, r3
 8005d2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ea0 <setvbuf+0x17c>)
 8005d2c:	681f      	ldr	r7, [r3, #0]
 8005d2e:	4604      	mov	r4, r0
 8005d30:	460e      	mov	r6, r1
 8005d32:	4690      	mov	r8, r2
 8005d34:	b127      	cbz	r7, 8005d40 <setvbuf+0x1c>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	b913      	cbnz	r3, 8005d40 <setvbuf+0x1c>
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f000 fac2 	bl	80062c4 <__sinit>
 8005d40:	4b58      	ldr	r3, [pc, #352]	; (8005ea4 <setvbuf+0x180>)
 8005d42:	429c      	cmp	r4, r3
 8005d44:	d167      	bne.n	8005e16 <setvbuf+0xf2>
 8005d46:	687c      	ldr	r4, [r7, #4]
 8005d48:	f1b8 0f02 	cmp.w	r8, #2
 8005d4c:	d006      	beq.n	8005d5c <setvbuf+0x38>
 8005d4e:	f1b8 0f01 	cmp.w	r8, #1
 8005d52:	f200 809f 	bhi.w	8005e94 <setvbuf+0x170>
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	f2c0 809c 	blt.w	8005e94 <setvbuf+0x170>
 8005d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d5e:	07db      	lsls	r3, r3, #31
 8005d60:	d405      	bmi.n	8005d6e <setvbuf+0x4a>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	0598      	lsls	r0, r3, #22
 8005d66:	d402      	bmi.n	8005d6e <setvbuf+0x4a>
 8005d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d6a:	f000 fb49 	bl	8006400 <__retarget_lock_acquire_recursive>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4638      	mov	r0, r7
 8005d72:	f000 fa13 	bl	800619c <_fflush_r>
 8005d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d78:	b141      	cbz	r1, 8005d8c <setvbuf+0x68>
 8005d7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	d002      	beq.n	8005d88 <setvbuf+0x64>
 8005d82:	4638      	mov	r0, r7
 8005d84:	f000 fbac 	bl	80064e0 <_free_r>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61a3      	str	r3, [r4, #24]
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	0619      	lsls	r1, r3, #24
 8005d96:	d503      	bpl.n	8005da0 <setvbuf+0x7c>
 8005d98:	6921      	ldr	r1, [r4, #16]
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	f000 fba0 	bl	80064e0 <_free_r>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	f1b8 0f02 	cmp.w	r8, #2
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	d06c      	beq.n	8005e8c <setvbuf+0x168>
 8005db2:	ab01      	add	r3, sp, #4
 8005db4:	466a      	mov	r2, sp
 8005db6:	4621      	mov	r1, r4
 8005db8:	4638      	mov	r0, r7
 8005dba:	f000 fb23 	bl	8006404 <__swhatbuf_r>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	4318      	orrs	r0, r3
 8005dc2:	81a0      	strh	r0, [r4, #12]
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	d130      	bne.n	8005e2a <setvbuf+0x106>
 8005dc8:	9d00      	ldr	r5, [sp, #0]
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 fb80 	bl	80064d0 <malloc>
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d155      	bne.n	8005e82 <setvbuf+0x15e>
 8005dd6:	f8dd 9000 	ldr.w	r9, [sp]
 8005dda:	45a9      	cmp	r9, r5
 8005ddc:	d14a      	bne.n	8005e74 <setvbuf+0x150>
 8005dde:	f04f 35ff 	mov.w	r5, #4294967295
 8005de2:	2200      	movs	r2, #0
 8005de4:	60a2      	str	r2, [r4, #8]
 8005de6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005dea:	6022      	str	r2, [r4, #0]
 8005dec:	6122      	str	r2, [r4, #16]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df4:	6162      	str	r2, [r4, #20]
 8005df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	07d2      	lsls	r2, r2, #31
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	d405      	bmi.n	8005e0e <setvbuf+0xea>
 8005e02:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005e06:	d102      	bne.n	8005e0e <setvbuf+0xea>
 8005e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0a:	f000 fafa 	bl	8006402 <__retarget_lock_release_recursive>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	b003      	add	sp, #12
 8005e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <setvbuf+0x184>)
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	d101      	bne.n	8005e20 <setvbuf+0xfc>
 8005e1c:	68bc      	ldr	r4, [r7, #8]
 8005e1e:	e793      	b.n	8005d48 <setvbuf+0x24>
 8005e20:	4b22      	ldr	r3, [pc, #136]	; (8005eac <setvbuf+0x188>)
 8005e22:	429c      	cmp	r4, r3
 8005e24:	bf08      	it	eq
 8005e26:	68fc      	ldreq	r4, [r7, #12]
 8005e28:	e78e      	b.n	8005d48 <setvbuf+0x24>
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d0cd      	beq.n	8005dca <setvbuf+0xa6>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	b913      	cbnz	r3, 8005e38 <setvbuf+0x114>
 8005e32:	4638      	mov	r0, r7
 8005e34:	f000 fa46 	bl	80062c4 <__sinit>
 8005e38:	f1b8 0f01 	cmp.w	r8, #1
 8005e3c:	bf08      	it	eq
 8005e3e:	89a3      	ldrheq	r3, [r4, #12]
 8005e40:	6026      	str	r6, [r4, #0]
 8005e42:	bf04      	itt	eq
 8005e44:	f043 0301 	orreq.w	r3, r3, #1
 8005e48:	81a3      	strheq	r3, [r4, #12]
 8005e4a:	89a2      	ldrh	r2, [r4, #12]
 8005e4c:	f012 0308 	ands.w	r3, r2, #8
 8005e50:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005e54:	d01c      	beq.n	8005e90 <setvbuf+0x16c>
 8005e56:	07d3      	lsls	r3, r2, #31
 8005e58:	bf41      	itttt	mi
 8005e5a:	2300      	movmi	r3, #0
 8005e5c:	426d      	negmi	r5, r5
 8005e5e:	60a3      	strmi	r3, [r4, #8]
 8005e60:	61a5      	strmi	r5, [r4, #24]
 8005e62:	bf58      	it	pl
 8005e64:	60a5      	strpl	r5, [r4, #8]
 8005e66:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005e68:	f015 0501 	ands.w	r5, r5, #1
 8005e6c:	d115      	bne.n	8005e9a <setvbuf+0x176>
 8005e6e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005e72:	e7c8      	b.n	8005e06 <setvbuf+0xe2>
 8005e74:	4648      	mov	r0, r9
 8005e76:	f000 fb2b 	bl	80064d0 <malloc>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d0ae      	beq.n	8005dde <setvbuf+0xba>
 8005e80:	464d      	mov	r5, r9
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	e7d0      	b.n	8005e2e <setvbuf+0x10a>
 8005e8c:	2500      	movs	r5, #0
 8005e8e:	e7a8      	b.n	8005de2 <setvbuf+0xbe>
 8005e90:	60a3      	str	r3, [r4, #8]
 8005e92:	e7e8      	b.n	8005e66 <setvbuf+0x142>
 8005e94:	f04f 35ff 	mov.w	r5, #4294967295
 8005e98:	e7b9      	b.n	8005e0e <setvbuf+0xea>
 8005e9a:	2500      	movs	r5, #0
 8005e9c:	e7b7      	b.n	8005e0e <setvbuf+0xea>
 8005e9e:	bf00      	nop
 8005ea0:	2000000c 	.word	0x2000000c
 8005ea4:	08007290 	.word	0x08007290
 8005ea8:	080072b0 	.word	0x080072b0
 8005eac:	08007270 	.word	0x08007270

08005eb0 <siprintf>:
 8005eb0:	b40e      	push	{r1, r2, r3}
 8005eb2:	b500      	push	{lr}
 8005eb4:	b09c      	sub	sp, #112	; 0x70
 8005eb6:	ab1d      	add	r3, sp, #116	; 0x74
 8005eb8:	9002      	str	r0, [sp, #8]
 8005eba:	9006      	str	r0, [sp, #24]
 8005ebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ec0:	4809      	ldr	r0, [pc, #36]	; (8005ee8 <siprintf+0x38>)
 8005ec2:	9107      	str	r1, [sp, #28]
 8005ec4:	9104      	str	r1, [sp, #16]
 8005ec6:	4909      	ldr	r1, [pc, #36]	; (8005eec <siprintf+0x3c>)
 8005ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ecc:	9105      	str	r1, [sp, #20]
 8005ece:	6800      	ldr	r0, [r0, #0]
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	a902      	add	r1, sp, #8
 8005ed4:	f000 fc40 	bl	8006758 <_svfiprintf_r>
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	b01c      	add	sp, #112	; 0x70
 8005ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ee4:	b003      	add	sp, #12
 8005ee6:	4770      	bx	lr
 8005ee8:	2000000c 	.word	0x2000000c
 8005eec:	ffff0208 	.word	0xffff0208

08005ef0 <strcat>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	7814      	ldrb	r4, [r2, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	3201      	adds	r2, #1
 8005efa:	2c00      	cmp	r4, #0
 8005efc:	d1fa      	bne.n	8005ef4 <strcat+0x4>
 8005efe:	3b01      	subs	r3, #1
 8005f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f08:	2a00      	cmp	r2, #0
 8005f0a:	d1f9      	bne.n	8005f00 <strcat+0x10>
 8005f0c:	bd10      	pop	{r4, pc}
	...

08005f10 <__swbuf_r>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	460e      	mov	r6, r1
 8005f14:	4614      	mov	r4, r2
 8005f16:	4605      	mov	r5, r0
 8005f18:	b118      	cbz	r0, 8005f22 <__swbuf_r+0x12>
 8005f1a:	6983      	ldr	r3, [r0, #24]
 8005f1c:	b90b      	cbnz	r3, 8005f22 <__swbuf_r+0x12>
 8005f1e:	f000 f9d1 	bl	80062c4 <__sinit>
 8005f22:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <__swbuf_r+0x98>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	d12b      	bne.n	8005f80 <__swbuf_r+0x70>
 8005f28:	686c      	ldr	r4, [r5, #4]
 8005f2a:	69a3      	ldr	r3, [r4, #24]
 8005f2c:	60a3      	str	r3, [r4, #8]
 8005f2e:	89a3      	ldrh	r3, [r4, #12]
 8005f30:	071a      	lsls	r2, r3, #28
 8005f32:	d52f      	bpl.n	8005f94 <__swbuf_r+0x84>
 8005f34:	6923      	ldr	r3, [r4, #16]
 8005f36:	b36b      	cbz	r3, 8005f94 <__swbuf_r+0x84>
 8005f38:	6923      	ldr	r3, [r4, #16]
 8005f3a:	6820      	ldr	r0, [r4, #0]
 8005f3c:	1ac0      	subs	r0, r0, r3
 8005f3e:	6963      	ldr	r3, [r4, #20]
 8005f40:	b2f6      	uxtb	r6, r6
 8005f42:	4283      	cmp	r3, r0
 8005f44:	4637      	mov	r7, r6
 8005f46:	dc04      	bgt.n	8005f52 <__swbuf_r+0x42>
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 f926 	bl	800619c <_fflush_r>
 8005f50:	bb30      	cbnz	r0, 8005fa0 <__swbuf_r+0x90>
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	60a3      	str	r3, [r4, #8]
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	6022      	str	r2, [r4, #0]
 8005f5e:	701e      	strb	r6, [r3, #0]
 8005f60:	6963      	ldr	r3, [r4, #20]
 8005f62:	3001      	adds	r0, #1
 8005f64:	4283      	cmp	r3, r0
 8005f66:	d004      	beq.n	8005f72 <__swbuf_r+0x62>
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	07db      	lsls	r3, r3, #31
 8005f6c:	d506      	bpl.n	8005f7c <__swbuf_r+0x6c>
 8005f6e:	2e0a      	cmp	r6, #10
 8005f70:	d104      	bne.n	8005f7c <__swbuf_r+0x6c>
 8005f72:	4621      	mov	r1, r4
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 f911 	bl	800619c <_fflush_r>
 8005f7a:	b988      	cbnz	r0, 8005fa0 <__swbuf_r+0x90>
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <__swbuf_r+0x9c>)
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d101      	bne.n	8005f8a <__swbuf_r+0x7a>
 8005f86:	68ac      	ldr	r4, [r5, #8]
 8005f88:	e7cf      	b.n	8005f2a <__swbuf_r+0x1a>
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <__swbuf_r+0xa0>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	bf08      	it	eq
 8005f90:	68ec      	ldreq	r4, [r5, #12]
 8005f92:	e7ca      	b.n	8005f2a <__swbuf_r+0x1a>
 8005f94:	4621      	mov	r1, r4
 8005f96:	4628      	mov	r0, r5
 8005f98:	f000 f80c 	bl	8005fb4 <__swsetup_r>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d0cb      	beq.n	8005f38 <__swbuf_r+0x28>
 8005fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8005fa4:	e7ea      	b.n	8005f7c <__swbuf_r+0x6c>
 8005fa6:	bf00      	nop
 8005fa8:	08007290 	.word	0x08007290
 8005fac:	080072b0 	.word	0x080072b0
 8005fb0:	08007270 	.word	0x08007270

08005fb4 <__swsetup_r>:
 8005fb4:	4b32      	ldr	r3, [pc, #200]	; (8006080 <__swsetup_r+0xcc>)
 8005fb6:	b570      	push	{r4, r5, r6, lr}
 8005fb8:	681d      	ldr	r5, [r3, #0]
 8005fba:	4606      	mov	r6, r0
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	b125      	cbz	r5, 8005fca <__swsetup_r+0x16>
 8005fc0:	69ab      	ldr	r3, [r5, #24]
 8005fc2:	b913      	cbnz	r3, 8005fca <__swsetup_r+0x16>
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f97d 	bl	80062c4 <__sinit>
 8005fca:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <__swsetup_r+0xd0>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d10f      	bne.n	8005ff0 <__swsetup_r+0x3c>
 8005fd0:	686c      	ldr	r4, [r5, #4]
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fd8:	0719      	lsls	r1, r3, #28
 8005fda:	d42c      	bmi.n	8006036 <__swsetup_r+0x82>
 8005fdc:	06dd      	lsls	r5, r3, #27
 8005fde:	d411      	bmi.n	8006004 <__swsetup_r+0x50>
 8005fe0:	2309      	movs	r3, #9
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fe8:	81a3      	strh	r3, [r4, #12]
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
 8005fee:	e03e      	b.n	800606e <__swsetup_r+0xba>
 8005ff0:	4b25      	ldr	r3, [pc, #148]	; (8006088 <__swsetup_r+0xd4>)
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d101      	bne.n	8005ffa <__swsetup_r+0x46>
 8005ff6:	68ac      	ldr	r4, [r5, #8]
 8005ff8:	e7eb      	b.n	8005fd2 <__swsetup_r+0x1e>
 8005ffa:	4b24      	ldr	r3, [pc, #144]	; (800608c <__swsetup_r+0xd8>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	bf08      	it	eq
 8006000:	68ec      	ldreq	r4, [r5, #12]
 8006002:	e7e6      	b.n	8005fd2 <__swsetup_r+0x1e>
 8006004:	0758      	lsls	r0, r3, #29
 8006006:	d512      	bpl.n	800602e <__swsetup_r+0x7a>
 8006008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800600a:	b141      	cbz	r1, 800601e <__swsetup_r+0x6a>
 800600c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006010:	4299      	cmp	r1, r3
 8006012:	d002      	beq.n	800601a <__swsetup_r+0x66>
 8006014:	4630      	mov	r0, r6
 8006016:	f000 fa63 	bl	80064e0 <_free_r>
 800601a:	2300      	movs	r3, #0
 800601c:	6363      	str	r3, [r4, #52]	; 0x34
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	2300      	movs	r3, #0
 8006028:	6063      	str	r3, [r4, #4]
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	f043 0308 	orr.w	r3, r3, #8
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	b94b      	cbnz	r3, 800604e <__swsetup_r+0x9a>
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d003      	beq.n	800604e <__swsetup_r+0x9a>
 8006046:	4621      	mov	r1, r4
 8006048:	4630      	mov	r0, r6
 800604a:	f000 fa01 	bl	8006450 <__smakebuf_r>
 800604e:	89a0      	ldrh	r0, [r4, #12]
 8006050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006054:	f010 0301 	ands.w	r3, r0, #1
 8006058:	d00a      	beq.n	8006070 <__swsetup_r+0xbc>
 800605a:	2300      	movs	r3, #0
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	6963      	ldr	r3, [r4, #20]
 8006060:	425b      	negs	r3, r3
 8006062:	61a3      	str	r3, [r4, #24]
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	b943      	cbnz	r3, 800607a <__swsetup_r+0xc6>
 8006068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800606c:	d1ba      	bne.n	8005fe4 <__swsetup_r+0x30>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	0781      	lsls	r1, r0, #30
 8006072:	bf58      	it	pl
 8006074:	6963      	ldrpl	r3, [r4, #20]
 8006076:	60a3      	str	r3, [r4, #8]
 8006078:	e7f4      	b.n	8006064 <__swsetup_r+0xb0>
 800607a:	2000      	movs	r0, #0
 800607c:	e7f7      	b.n	800606e <__swsetup_r+0xba>
 800607e:	bf00      	nop
 8006080:	2000000c 	.word	0x2000000c
 8006084:	08007290 	.word	0x08007290
 8006088:	080072b0 	.word	0x080072b0
 800608c:	08007270 	.word	0x08007270

08006090 <__sflush_r>:
 8006090:	898a      	ldrh	r2, [r1, #12]
 8006092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	4605      	mov	r5, r0
 8006098:	0710      	lsls	r0, r2, #28
 800609a:	460c      	mov	r4, r1
 800609c:	d458      	bmi.n	8006150 <__sflush_r+0xc0>
 800609e:	684b      	ldr	r3, [r1, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	dc05      	bgt.n	80060b0 <__sflush_r+0x20>
 80060a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dc02      	bgt.n	80060b0 <__sflush_r+0x20>
 80060aa:	2000      	movs	r0, #0
 80060ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	d0f9      	beq.n	80060aa <__sflush_r+0x1a>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060bc:	682f      	ldr	r7, [r5, #0]
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	d032      	beq.n	8006128 <__sflush_r+0x98>
 80060c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	075a      	lsls	r2, r3, #29
 80060c8:	d505      	bpl.n	80060d6 <__sflush_r+0x46>
 80060ca:	6863      	ldr	r3, [r4, #4]
 80060cc:	1ac0      	subs	r0, r0, r3
 80060ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060d0:	b10b      	cbz	r3, 80060d6 <__sflush_r+0x46>
 80060d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060d4:	1ac0      	subs	r0, r0, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	4602      	mov	r2, r0
 80060da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060dc:	6a21      	ldr	r1, [r4, #32]
 80060de:	4628      	mov	r0, r5
 80060e0:	47b0      	blx	r6
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	d106      	bne.n	80060f6 <__sflush_r+0x66>
 80060e8:	6829      	ldr	r1, [r5, #0]
 80060ea:	291d      	cmp	r1, #29
 80060ec:	d82c      	bhi.n	8006148 <__sflush_r+0xb8>
 80060ee:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <__sflush_r+0x108>)
 80060f0:	40ca      	lsrs	r2, r1
 80060f2:	07d6      	lsls	r6, r2, #31
 80060f4:	d528      	bpl.n	8006148 <__sflush_r+0xb8>
 80060f6:	2200      	movs	r2, #0
 80060f8:	6062      	str	r2, [r4, #4]
 80060fa:	04d9      	lsls	r1, r3, #19
 80060fc:	6922      	ldr	r2, [r4, #16]
 80060fe:	6022      	str	r2, [r4, #0]
 8006100:	d504      	bpl.n	800610c <__sflush_r+0x7c>
 8006102:	1c42      	adds	r2, r0, #1
 8006104:	d101      	bne.n	800610a <__sflush_r+0x7a>
 8006106:	682b      	ldr	r3, [r5, #0]
 8006108:	b903      	cbnz	r3, 800610c <__sflush_r+0x7c>
 800610a:	6560      	str	r0, [r4, #84]	; 0x54
 800610c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800610e:	602f      	str	r7, [r5, #0]
 8006110:	2900      	cmp	r1, #0
 8006112:	d0ca      	beq.n	80060aa <__sflush_r+0x1a>
 8006114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006118:	4299      	cmp	r1, r3
 800611a:	d002      	beq.n	8006122 <__sflush_r+0x92>
 800611c:	4628      	mov	r0, r5
 800611e:	f000 f9df 	bl	80064e0 <_free_r>
 8006122:	2000      	movs	r0, #0
 8006124:	6360      	str	r0, [r4, #52]	; 0x34
 8006126:	e7c1      	b.n	80060ac <__sflush_r+0x1c>
 8006128:	6a21      	ldr	r1, [r4, #32]
 800612a:	2301      	movs	r3, #1
 800612c:	4628      	mov	r0, r5
 800612e:	47b0      	blx	r6
 8006130:	1c41      	adds	r1, r0, #1
 8006132:	d1c7      	bne.n	80060c4 <__sflush_r+0x34>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0c4      	beq.n	80060c4 <__sflush_r+0x34>
 800613a:	2b1d      	cmp	r3, #29
 800613c:	d001      	beq.n	8006142 <__sflush_r+0xb2>
 800613e:	2b16      	cmp	r3, #22
 8006140:	d101      	bne.n	8006146 <__sflush_r+0xb6>
 8006142:	602f      	str	r7, [r5, #0]
 8006144:	e7b1      	b.n	80060aa <__sflush_r+0x1a>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	e7ad      	b.n	80060ac <__sflush_r+0x1c>
 8006150:	690f      	ldr	r7, [r1, #16]
 8006152:	2f00      	cmp	r7, #0
 8006154:	d0a9      	beq.n	80060aa <__sflush_r+0x1a>
 8006156:	0793      	lsls	r3, r2, #30
 8006158:	680e      	ldr	r6, [r1, #0]
 800615a:	bf08      	it	eq
 800615c:	694b      	ldreq	r3, [r1, #20]
 800615e:	600f      	str	r7, [r1, #0]
 8006160:	bf18      	it	ne
 8006162:	2300      	movne	r3, #0
 8006164:	eba6 0807 	sub.w	r8, r6, r7
 8006168:	608b      	str	r3, [r1, #8]
 800616a:	f1b8 0f00 	cmp.w	r8, #0
 800616e:	dd9c      	ble.n	80060aa <__sflush_r+0x1a>
 8006170:	6a21      	ldr	r1, [r4, #32]
 8006172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006174:	4643      	mov	r3, r8
 8006176:	463a      	mov	r2, r7
 8006178:	4628      	mov	r0, r5
 800617a:	47b0      	blx	r6
 800617c:	2800      	cmp	r0, #0
 800617e:	dc06      	bgt.n	800618e <__sflush_r+0xfe>
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	e78e      	b.n	80060ac <__sflush_r+0x1c>
 800618e:	4407      	add	r7, r0
 8006190:	eba8 0800 	sub.w	r8, r8, r0
 8006194:	e7e9      	b.n	800616a <__sflush_r+0xda>
 8006196:	bf00      	nop
 8006198:	20400001 	.word	0x20400001

0800619c <_fflush_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	690b      	ldr	r3, [r1, #16]
 80061a0:	4605      	mov	r5, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	b913      	cbnz	r3, 80061ac <_fflush_r+0x10>
 80061a6:	2500      	movs	r5, #0
 80061a8:	4628      	mov	r0, r5
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	b118      	cbz	r0, 80061b6 <_fflush_r+0x1a>
 80061ae:	6983      	ldr	r3, [r0, #24]
 80061b0:	b90b      	cbnz	r3, 80061b6 <_fflush_r+0x1a>
 80061b2:	f000 f887 	bl	80062c4 <__sinit>
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <_fflush_r+0x6c>)
 80061b8:	429c      	cmp	r4, r3
 80061ba:	d11b      	bne.n	80061f4 <_fflush_r+0x58>
 80061bc:	686c      	ldr	r4, [r5, #4]
 80061be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0ef      	beq.n	80061a6 <_fflush_r+0xa>
 80061c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061c8:	07d0      	lsls	r0, r2, #31
 80061ca:	d404      	bmi.n	80061d6 <_fflush_r+0x3a>
 80061cc:	0599      	lsls	r1, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_fflush_r+0x3a>
 80061d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d2:	f000 f915 	bl	8006400 <__retarget_lock_acquire_recursive>
 80061d6:	4628      	mov	r0, r5
 80061d8:	4621      	mov	r1, r4
 80061da:	f7ff ff59 	bl	8006090 <__sflush_r>
 80061de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e0:	07da      	lsls	r2, r3, #31
 80061e2:	4605      	mov	r5, r0
 80061e4:	d4e0      	bmi.n	80061a8 <_fflush_r+0xc>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	059b      	lsls	r3, r3, #22
 80061ea:	d4dd      	bmi.n	80061a8 <_fflush_r+0xc>
 80061ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ee:	f000 f908 	bl	8006402 <__retarget_lock_release_recursive>
 80061f2:	e7d9      	b.n	80061a8 <_fflush_r+0xc>
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <_fflush_r+0x70>)
 80061f6:	429c      	cmp	r4, r3
 80061f8:	d101      	bne.n	80061fe <_fflush_r+0x62>
 80061fa:	68ac      	ldr	r4, [r5, #8]
 80061fc:	e7df      	b.n	80061be <_fflush_r+0x22>
 80061fe:	4b04      	ldr	r3, [pc, #16]	; (8006210 <_fflush_r+0x74>)
 8006200:	429c      	cmp	r4, r3
 8006202:	bf08      	it	eq
 8006204:	68ec      	ldreq	r4, [r5, #12]
 8006206:	e7da      	b.n	80061be <_fflush_r+0x22>
 8006208:	08007290 	.word	0x08007290
 800620c:	080072b0 	.word	0x080072b0
 8006210:	08007270 	.word	0x08007270

08006214 <std>:
 8006214:	2300      	movs	r3, #0
 8006216:	b510      	push	{r4, lr}
 8006218:	4604      	mov	r4, r0
 800621a:	e9c0 3300 	strd	r3, r3, [r0]
 800621e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006222:	6083      	str	r3, [r0, #8]
 8006224:	8181      	strh	r1, [r0, #12]
 8006226:	6643      	str	r3, [r0, #100]	; 0x64
 8006228:	81c2      	strh	r2, [r0, #14]
 800622a:	6183      	str	r3, [r0, #24]
 800622c:	4619      	mov	r1, r3
 800622e:	2208      	movs	r2, #8
 8006230:	305c      	adds	r0, #92	; 0x5c
 8006232:	f7ff fce1 	bl	8005bf8 <memset>
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <std+0x38>)
 8006238:	6263      	str	r3, [r4, #36]	; 0x24
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <std+0x3c>)
 800623c:	62a3      	str	r3, [r4, #40]	; 0x28
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <std+0x40>)
 8006240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <std+0x44>)
 8006244:	6224      	str	r4, [r4, #32]
 8006246:	6323      	str	r3, [r4, #48]	; 0x30
 8006248:	bd10      	pop	{r4, pc}
 800624a:	bf00      	nop
 800624c:	08006f55 	.word	0x08006f55
 8006250:	08006f77 	.word	0x08006f77
 8006254:	08006faf 	.word	0x08006faf
 8006258:	08006fd3 	.word	0x08006fd3

0800625c <_cleanup_r>:
 800625c:	4901      	ldr	r1, [pc, #4]	; (8006264 <_cleanup_r+0x8>)
 800625e:	f000 b8af 	b.w	80063c0 <_fwalk_reent>
 8006262:	bf00      	nop
 8006264:	0800619d 	.word	0x0800619d

08006268 <__sfmoreglue>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	2268      	movs	r2, #104	; 0x68
 800626c:	1e4d      	subs	r5, r1, #1
 800626e:	4355      	muls	r5, r2
 8006270:	460e      	mov	r6, r1
 8006272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006276:	f000 f99f 	bl	80065b8 <_malloc_r>
 800627a:	4604      	mov	r4, r0
 800627c:	b140      	cbz	r0, 8006290 <__sfmoreglue+0x28>
 800627e:	2100      	movs	r1, #0
 8006280:	e9c0 1600 	strd	r1, r6, [r0]
 8006284:	300c      	adds	r0, #12
 8006286:	60a0      	str	r0, [r4, #8]
 8006288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800628c:	f7ff fcb4 	bl	8005bf8 <memset>
 8006290:	4620      	mov	r0, r4
 8006292:	bd70      	pop	{r4, r5, r6, pc}

08006294 <__sfp_lock_acquire>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__sfp_lock_acquire+0x8>)
 8006296:	f000 b8b3 	b.w	8006400 <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	200001b1 	.word	0x200001b1

080062a0 <__sfp_lock_release>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__sfp_lock_release+0x8>)
 80062a2:	f000 b8ae 	b.w	8006402 <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	200001b1 	.word	0x200001b1

080062ac <__sinit_lock_acquire>:
 80062ac:	4801      	ldr	r0, [pc, #4]	; (80062b4 <__sinit_lock_acquire+0x8>)
 80062ae:	f000 b8a7 	b.w	8006400 <__retarget_lock_acquire_recursive>
 80062b2:	bf00      	nop
 80062b4:	200001b2 	.word	0x200001b2

080062b8 <__sinit_lock_release>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__sinit_lock_release+0x8>)
 80062ba:	f000 b8a2 	b.w	8006402 <__retarget_lock_release_recursive>
 80062be:	bf00      	nop
 80062c0:	200001b2 	.word	0x200001b2

080062c4 <__sinit>:
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4604      	mov	r4, r0
 80062c8:	f7ff fff0 	bl	80062ac <__sinit_lock_acquire>
 80062cc:	69a3      	ldr	r3, [r4, #24]
 80062ce:	b11b      	cbz	r3, 80062d8 <__sinit+0x14>
 80062d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d4:	f7ff bff0 	b.w	80062b8 <__sinit_lock_release>
 80062d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062dc:	6523      	str	r3, [r4, #80]	; 0x50
 80062de:	4b13      	ldr	r3, [pc, #76]	; (800632c <__sinit+0x68>)
 80062e0:	4a13      	ldr	r2, [pc, #76]	; (8006330 <__sinit+0x6c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80062e6:	42a3      	cmp	r3, r4
 80062e8:	bf04      	itt	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	61a3      	streq	r3, [r4, #24]
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 f820 	bl	8006334 <__sfp>
 80062f4:	6060      	str	r0, [r4, #4]
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 f81c 	bl	8006334 <__sfp>
 80062fc:	60a0      	str	r0, [r4, #8]
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 f818 	bl	8006334 <__sfp>
 8006304:	2200      	movs	r2, #0
 8006306:	60e0      	str	r0, [r4, #12]
 8006308:	2104      	movs	r1, #4
 800630a:	6860      	ldr	r0, [r4, #4]
 800630c:	f7ff ff82 	bl	8006214 <std>
 8006310:	68a0      	ldr	r0, [r4, #8]
 8006312:	2201      	movs	r2, #1
 8006314:	2109      	movs	r1, #9
 8006316:	f7ff ff7d 	bl	8006214 <std>
 800631a:	68e0      	ldr	r0, [r4, #12]
 800631c:	2202      	movs	r2, #2
 800631e:	2112      	movs	r1, #18
 8006320:	f7ff ff78 	bl	8006214 <std>
 8006324:	2301      	movs	r3, #1
 8006326:	61a3      	str	r3, [r4, #24]
 8006328:	e7d2      	b.n	80062d0 <__sinit+0xc>
 800632a:	bf00      	nop
 800632c:	0800726c 	.word	0x0800726c
 8006330:	0800625d 	.word	0x0800625d

08006334 <__sfp>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	4607      	mov	r7, r0
 8006338:	f7ff ffac 	bl	8006294 <__sfp_lock_acquire>
 800633c:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <__sfp+0x84>)
 800633e:	681e      	ldr	r6, [r3, #0]
 8006340:	69b3      	ldr	r3, [r6, #24]
 8006342:	b913      	cbnz	r3, 800634a <__sfp+0x16>
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff ffbd 	bl	80062c4 <__sinit>
 800634a:	3648      	adds	r6, #72	; 0x48
 800634c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006350:	3b01      	subs	r3, #1
 8006352:	d503      	bpl.n	800635c <__sfp+0x28>
 8006354:	6833      	ldr	r3, [r6, #0]
 8006356:	b30b      	cbz	r3, 800639c <__sfp+0x68>
 8006358:	6836      	ldr	r6, [r6, #0]
 800635a:	e7f7      	b.n	800634c <__sfp+0x18>
 800635c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006360:	b9d5      	cbnz	r5, 8006398 <__sfp+0x64>
 8006362:	4b16      	ldr	r3, [pc, #88]	; (80063bc <__sfp+0x88>)
 8006364:	60e3      	str	r3, [r4, #12]
 8006366:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800636a:	6665      	str	r5, [r4, #100]	; 0x64
 800636c:	f000 f847 	bl	80063fe <__retarget_lock_init_recursive>
 8006370:	f7ff ff96 	bl	80062a0 <__sfp_lock_release>
 8006374:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006378:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800637c:	6025      	str	r5, [r4, #0]
 800637e:	61a5      	str	r5, [r4, #24]
 8006380:	2208      	movs	r2, #8
 8006382:	4629      	mov	r1, r5
 8006384:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006388:	f7ff fc36 	bl	8005bf8 <memset>
 800638c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006390:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006394:	4620      	mov	r0, r4
 8006396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006398:	3468      	adds	r4, #104	; 0x68
 800639a:	e7d9      	b.n	8006350 <__sfp+0x1c>
 800639c:	2104      	movs	r1, #4
 800639e:	4638      	mov	r0, r7
 80063a0:	f7ff ff62 	bl	8006268 <__sfmoreglue>
 80063a4:	4604      	mov	r4, r0
 80063a6:	6030      	str	r0, [r6, #0]
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d1d5      	bne.n	8006358 <__sfp+0x24>
 80063ac:	f7ff ff78 	bl	80062a0 <__sfp_lock_release>
 80063b0:	230c      	movs	r3, #12
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	e7ee      	b.n	8006394 <__sfp+0x60>
 80063b6:	bf00      	nop
 80063b8:	0800726c 	.word	0x0800726c
 80063bc:	ffff0001 	.word	0xffff0001

080063c0 <_fwalk_reent>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	4606      	mov	r6, r0
 80063c6:	4688      	mov	r8, r1
 80063c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063cc:	2700      	movs	r7, #0
 80063ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063d2:	f1b9 0901 	subs.w	r9, r9, #1
 80063d6:	d505      	bpl.n	80063e4 <_fwalk_reent+0x24>
 80063d8:	6824      	ldr	r4, [r4, #0]
 80063da:	2c00      	cmp	r4, #0
 80063dc:	d1f7      	bne.n	80063ce <_fwalk_reent+0xe>
 80063de:	4638      	mov	r0, r7
 80063e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e4:	89ab      	ldrh	r3, [r5, #12]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d907      	bls.n	80063fa <_fwalk_reent+0x3a>
 80063ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063ee:	3301      	adds	r3, #1
 80063f0:	d003      	beq.n	80063fa <_fwalk_reent+0x3a>
 80063f2:	4629      	mov	r1, r5
 80063f4:	4630      	mov	r0, r6
 80063f6:	47c0      	blx	r8
 80063f8:	4307      	orrs	r7, r0
 80063fa:	3568      	adds	r5, #104	; 0x68
 80063fc:	e7e9      	b.n	80063d2 <_fwalk_reent+0x12>

080063fe <__retarget_lock_init_recursive>:
 80063fe:	4770      	bx	lr

08006400 <__retarget_lock_acquire_recursive>:
 8006400:	4770      	bx	lr

08006402 <__retarget_lock_release_recursive>:
 8006402:	4770      	bx	lr

08006404 <__swhatbuf_r>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	460e      	mov	r6, r1
 8006408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640c:	2900      	cmp	r1, #0
 800640e:	b096      	sub	sp, #88	; 0x58
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	da08      	bge.n	8006428 <__swhatbuf_r+0x24>
 8006416:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	602a      	str	r2, [r5, #0]
 800641e:	061a      	lsls	r2, r3, #24
 8006420:	d410      	bmi.n	8006444 <__swhatbuf_r+0x40>
 8006422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006426:	e00e      	b.n	8006446 <__swhatbuf_r+0x42>
 8006428:	466a      	mov	r2, sp
 800642a:	f000 fdf9 	bl	8007020 <_fstat_r>
 800642e:	2800      	cmp	r0, #0
 8006430:	dbf1      	blt.n	8006416 <__swhatbuf_r+0x12>
 8006432:	9a01      	ldr	r2, [sp, #4]
 8006434:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006438:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800643c:	425a      	negs	r2, r3
 800643e:	415a      	adcs	r2, r3
 8006440:	602a      	str	r2, [r5, #0]
 8006442:	e7ee      	b.n	8006422 <__swhatbuf_r+0x1e>
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	2000      	movs	r0, #0
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	b016      	add	sp, #88	; 0x58
 800644c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006450 <__smakebuf_r>:
 8006450:	898b      	ldrh	r3, [r1, #12]
 8006452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006454:	079d      	lsls	r5, r3, #30
 8006456:	4606      	mov	r6, r0
 8006458:	460c      	mov	r4, r1
 800645a:	d507      	bpl.n	800646c <__smakebuf_r+0x1c>
 800645c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	2301      	movs	r3, #1
 8006466:	6163      	str	r3, [r4, #20]
 8006468:	b002      	add	sp, #8
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	ab01      	add	r3, sp, #4
 800646e:	466a      	mov	r2, sp
 8006470:	f7ff ffc8 	bl	8006404 <__swhatbuf_r>
 8006474:	9900      	ldr	r1, [sp, #0]
 8006476:	4605      	mov	r5, r0
 8006478:	4630      	mov	r0, r6
 800647a:	f000 f89d 	bl	80065b8 <_malloc_r>
 800647e:	b948      	cbnz	r0, 8006494 <__smakebuf_r+0x44>
 8006480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006484:	059a      	lsls	r2, r3, #22
 8006486:	d4ef      	bmi.n	8006468 <__smakebuf_r+0x18>
 8006488:	f023 0303 	bic.w	r3, r3, #3
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	e7e3      	b.n	800645c <__smakebuf_r+0xc>
 8006494:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <__smakebuf_r+0x7c>)
 8006496:	62b3      	str	r3, [r6, #40]	; 0x28
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	6020      	str	r0, [r4, #0]
 800649c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	9b00      	ldr	r3, [sp, #0]
 80064a4:	6163      	str	r3, [r4, #20]
 80064a6:	9b01      	ldr	r3, [sp, #4]
 80064a8:	6120      	str	r0, [r4, #16]
 80064aa:	b15b      	cbz	r3, 80064c4 <__smakebuf_r+0x74>
 80064ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b0:	4630      	mov	r0, r6
 80064b2:	f000 fdc7 	bl	8007044 <_isatty_r>
 80064b6:	b128      	cbz	r0, 80064c4 <__smakebuf_r+0x74>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	89a0      	ldrh	r0, [r4, #12]
 80064c6:	4305      	orrs	r5, r0
 80064c8:	81a5      	strh	r5, [r4, #12]
 80064ca:	e7cd      	b.n	8006468 <__smakebuf_r+0x18>
 80064cc:	0800625d 	.word	0x0800625d

080064d0 <malloc>:
 80064d0:	4b02      	ldr	r3, [pc, #8]	; (80064dc <malloc+0xc>)
 80064d2:	4601      	mov	r1, r0
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	f000 b86f 	b.w	80065b8 <_malloc_r>
 80064da:	bf00      	nop
 80064dc:	2000000c 	.word	0x2000000c

080064e0 <_free_r>:
 80064e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064e2:	2900      	cmp	r1, #0
 80064e4:	d044      	beq.n	8006570 <_free_r+0x90>
 80064e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ea:	9001      	str	r0, [sp, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f1a1 0404 	sub.w	r4, r1, #4
 80064f2:	bfb8      	it	lt
 80064f4:	18e4      	addlt	r4, r4, r3
 80064f6:	f000 fdef 	bl	80070d8 <__malloc_lock>
 80064fa:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <_free_r+0x94>)
 80064fc:	9801      	ldr	r0, [sp, #4]
 80064fe:	6813      	ldr	r3, [r2, #0]
 8006500:	b933      	cbnz	r3, 8006510 <_free_r+0x30>
 8006502:	6063      	str	r3, [r4, #4]
 8006504:	6014      	str	r4, [r2, #0]
 8006506:	b003      	add	sp, #12
 8006508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800650c:	f000 bdea 	b.w	80070e4 <__malloc_unlock>
 8006510:	42a3      	cmp	r3, r4
 8006512:	d908      	bls.n	8006526 <_free_r+0x46>
 8006514:	6825      	ldr	r5, [r4, #0]
 8006516:	1961      	adds	r1, r4, r5
 8006518:	428b      	cmp	r3, r1
 800651a:	bf01      	itttt	eq
 800651c:	6819      	ldreq	r1, [r3, #0]
 800651e:	685b      	ldreq	r3, [r3, #4]
 8006520:	1949      	addeq	r1, r1, r5
 8006522:	6021      	streq	r1, [r4, #0]
 8006524:	e7ed      	b.n	8006502 <_free_r+0x22>
 8006526:	461a      	mov	r2, r3
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	b10b      	cbz	r3, 8006530 <_free_r+0x50>
 800652c:	42a3      	cmp	r3, r4
 800652e:	d9fa      	bls.n	8006526 <_free_r+0x46>
 8006530:	6811      	ldr	r1, [r2, #0]
 8006532:	1855      	adds	r5, r2, r1
 8006534:	42a5      	cmp	r5, r4
 8006536:	d10b      	bne.n	8006550 <_free_r+0x70>
 8006538:	6824      	ldr	r4, [r4, #0]
 800653a:	4421      	add	r1, r4
 800653c:	1854      	adds	r4, r2, r1
 800653e:	42a3      	cmp	r3, r4
 8006540:	6011      	str	r1, [r2, #0]
 8006542:	d1e0      	bne.n	8006506 <_free_r+0x26>
 8006544:	681c      	ldr	r4, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	6053      	str	r3, [r2, #4]
 800654a:	4421      	add	r1, r4
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	e7da      	b.n	8006506 <_free_r+0x26>
 8006550:	d902      	bls.n	8006558 <_free_r+0x78>
 8006552:	230c      	movs	r3, #12
 8006554:	6003      	str	r3, [r0, #0]
 8006556:	e7d6      	b.n	8006506 <_free_r+0x26>
 8006558:	6825      	ldr	r5, [r4, #0]
 800655a:	1961      	adds	r1, r4, r5
 800655c:	428b      	cmp	r3, r1
 800655e:	bf04      	itt	eq
 8006560:	6819      	ldreq	r1, [r3, #0]
 8006562:	685b      	ldreq	r3, [r3, #4]
 8006564:	6063      	str	r3, [r4, #4]
 8006566:	bf04      	itt	eq
 8006568:	1949      	addeq	r1, r1, r5
 800656a:	6021      	streq	r1, [r4, #0]
 800656c:	6054      	str	r4, [r2, #4]
 800656e:	e7ca      	b.n	8006506 <_free_r+0x26>
 8006570:	b003      	add	sp, #12
 8006572:	bd30      	pop	{r4, r5, pc}
 8006574:	200001b4 	.word	0x200001b4

08006578 <sbrk_aligned>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	4e0e      	ldr	r6, [pc, #56]	; (80065b4 <sbrk_aligned+0x3c>)
 800657c:	460c      	mov	r4, r1
 800657e:	6831      	ldr	r1, [r6, #0]
 8006580:	4605      	mov	r5, r0
 8006582:	b911      	cbnz	r1, 800658a <sbrk_aligned+0x12>
 8006584:	f000 fcd6 	bl	8006f34 <_sbrk_r>
 8006588:	6030      	str	r0, [r6, #0]
 800658a:	4621      	mov	r1, r4
 800658c:	4628      	mov	r0, r5
 800658e:	f000 fcd1 	bl	8006f34 <_sbrk_r>
 8006592:	1c43      	adds	r3, r0, #1
 8006594:	d00a      	beq.n	80065ac <sbrk_aligned+0x34>
 8006596:	1cc4      	adds	r4, r0, #3
 8006598:	f024 0403 	bic.w	r4, r4, #3
 800659c:	42a0      	cmp	r0, r4
 800659e:	d007      	beq.n	80065b0 <sbrk_aligned+0x38>
 80065a0:	1a21      	subs	r1, r4, r0
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 fcc6 	bl	8006f34 <_sbrk_r>
 80065a8:	3001      	adds	r0, #1
 80065aa:	d101      	bne.n	80065b0 <sbrk_aligned+0x38>
 80065ac:	f04f 34ff 	mov.w	r4, #4294967295
 80065b0:	4620      	mov	r0, r4
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	200001b8 	.word	0x200001b8

080065b8 <_malloc_r>:
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	1ccd      	adds	r5, r1, #3
 80065be:	f025 0503 	bic.w	r5, r5, #3
 80065c2:	3508      	adds	r5, #8
 80065c4:	2d0c      	cmp	r5, #12
 80065c6:	bf38      	it	cc
 80065c8:	250c      	movcc	r5, #12
 80065ca:	2d00      	cmp	r5, #0
 80065cc:	4607      	mov	r7, r0
 80065ce:	db01      	blt.n	80065d4 <_malloc_r+0x1c>
 80065d0:	42a9      	cmp	r1, r5
 80065d2:	d905      	bls.n	80065e0 <_malloc_r+0x28>
 80065d4:	230c      	movs	r3, #12
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	2600      	movs	r6, #0
 80065da:	4630      	mov	r0, r6
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	4e2e      	ldr	r6, [pc, #184]	; (800669c <_malloc_r+0xe4>)
 80065e2:	f000 fd79 	bl	80070d8 <__malloc_lock>
 80065e6:	6833      	ldr	r3, [r6, #0]
 80065e8:	461c      	mov	r4, r3
 80065ea:	bb34      	cbnz	r4, 800663a <_malloc_r+0x82>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4638      	mov	r0, r7
 80065f0:	f7ff ffc2 	bl	8006578 <sbrk_aligned>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	4604      	mov	r4, r0
 80065f8:	d14d      	bne.n	8006696 <_malloc_r+0xde>
 80065fa:	6834      	ldr	r4, [r6, #0]
 80065fc:	4626      	mov	r6, r4
 80065fe:	2e00      	cmp	r6, #0
 8006600:	d140      	bne.n	8006684 <_malloc_r+0xcc>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	4631      	mov	r1, r6
 8006606:	4638      	mov	r0, r7
 8006608:	eb04 0803 	add.w	r8, r4, r3
 800660c:	f000 fc92 	bl	8006f34 <_sbrk_r>
 8006610:	4580      	cmp	r8, r0
 8006612:	d13a      	bne.n	800668a <_malloc_r+0xd2>
 8006614:	6821      	ldr	r1, [r4, #0]
 8006616:	3503      	adds	r5, #3
 8006618:	1a6d      	subs	r5, r5, r1
 800661a:	f025 0503 	bic.w	r5, r5, #3
 800661e:	3508      	adds	r5, #8
 8006620:	2d0c      	cmp	r5, #12
 8006622:	bf38      	it	cc
 8006624:	250c      	movcc	r5, #12
 8006626:	4629      	mov	r1, r5
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff ffa5 	bl	8006578 <sbrk_aligned>
 800662e:	3001      	adds	r0, #1
 8006630:	d02b      	beq.n	800668a <_malloc_r+0xd2>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	442b      	add	r3, r5
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	e00e      	b.n	8006658 <_malloc_r+0xa0>
 800663a:	6822      	ldr	r2, [r4, #0]
 800663c:	1b52      	subs	r2, r2, r5
 800663e:	d41e      	bmi.n	800667e <_malloc_r+0xc6>
 8006640:	2a0b      	cmp	r2, #11
 8006642:	d916      	bls.n	8006672 <_malloc_r+0xba>
 8006644:	1961      	adds	r1, r4, r5
 8006646:	42a3      	cmp	r3, r4
 8006648:	6025      	str	r5, [r4, #0]
 800664a:	bf18      	it	ne
 800664c:	6059      	strne	r1, [r3, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	bf08      	it	eq
 8006652:	6031      	streq	r1, [r6, #0]
 8006654:	5162      	str	r2, [r4, r5]
 8006656:	604b      	str	r3, [r1, #4]
 8006658:	4638      	mov	r0, r7
 800665a:	f104 060b 	add.w	r6, r4, #11
 800665e:	f000 fd41 	bl	80070e4 <__malloc_unlock>
 8006662:	f026 0607 	bic.w	r6, r6, #7
 8006666:	1d23      	adds	r3, r4, #4
 8006668:	1af2      	subs	r2, r6, r3
 800666a:	d0b6      	beq.n	80065da <_malloc_r+0x22>
 800666c:	1b9b      	subs	r3, r3, r6
 800666e:	50a3      	str	r3, [r4, r2]
 8006670:	e7b3      	b.n	80065da <_malloc_r+0x22>
 8006672:	6862      	ldr	r2, [r4, #4]
 8006674:	42a3      	cmp	r3, r4
 8006676:	bf0c      	ite	eq
 8006678:	6032      	streq	r2, [r6, #0]
 800667a:	605a      	strne	r2, [r3, #4]
 800667c:	e7ec      	b.n	8006658 <_malloc_r+0xa0>
 800667e:	4623      	mov	r3, r4
 8006680:	6864      	ldr	r4, [r4, #4]
 8006682:	e7b2      	b.n	80065ea <_malloc_r+0x32>
 8006684:	4634      	mov	r4, r6
 8006686:	6876      	ldr	r6, [r6, #4]
 8006688:	e7b9      	b.n	80065fe <_malloc_r+0x46>
 800668a:	230c      	movs	r3, #12
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	4638      	mov	r0, r7
 8006690:	f000 fd28 	bl	80070e4 <__malloc_unlock>
 8006694:	e7a1      	b.n	80065da <_malloc_r+0x22>
 8006696:	6025      	str	r5, [r4, #0]
 8006698:	e7de      	b.n	8006658 <_malloc_r+0xa0>
 800669a:	bf00      	nop
 800669c:	200001b4 	.word	0x200001b4

080066a0 <__ssputs_r>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	688e      	ldr	r6, [r1, #8]
 80066a6:	429e      	cmp	r6, r3
 80066a8:	4682      	mov	sl, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4690      	mov	r8, r2
 80066ae:	461f      	mov	r7, r3
 80066b0:	d838      	bhi.n	8006724 <__ssputs_r+0x84>
 80066b2:	898a      	ldrh	r2, [r1, #12]
 80066b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066b8:	d032      	beq.n	8006720 <__ssputs_r+0x80>
 80066ba:	6825      	ldr	r5, [r4, #0]
 80066bc:	6909      	ldr	r1, [r1, #16]
 80066be:	eba5 0901 	sub.w	r9, r5, r1
 80066c2:	6965      	ldr	r5, [r4, #20]
 80066c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066cc:	3301      	adds	r3, #1
 80066ce:	444b      	add	r3, r9
 80066d0:	106d      	asrs	r5, r5, #1
 80066d2:	429d      	cmp	r5, r3
 80066d4:	bf38      	it	cc
 80066d6:	461d      	movcc	r5, r3
 80066d8:	0553      	lsls	r3, r2, #21
 80066da:	d531      	bpl.n	8006740 <__ssputs_r+0xa0>
 80066dc:	4629      	mov	r1, r5
 80066de:	f7ff ff6b 	bl	80065b8 <_malloc_r>
 80066e2:	4606      	mov	r6, r0
 80066e4:	b950      	cbnz	r0, 80066fc <__ssputs_r+0x5c>
 80066e6:	230c      	movs	r3, #12
 80066e8:	f8ca 3000 	str.w	r3, [sl]
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f2:	81a3      	strh	r3, [r4, #12]
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fc:	6921      	ldr	r1, [r4, #16]
 80066fe:	464a      	mov	r2, r9
 8006700:	f000 fcc2 	bl	8007088 <memcpy>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	6126      	str	r6, [r4, #16]
 8006712:	6165      	str	r5, [r4, #20]
 8006714:	444e      	add	r6, r9
 8006716:	eba5 0509 	sub.w	r5, r5, r9
 800671a:	6026      	str	r6, [r4, #0]
 800671c:	60a5      	str	r5, [r4, #8]
 800671e:	463e      	mov	r6, r7
 8006720:	42be      	cmp	r6, r7
 8006722:	d900      	bls.n	8006726 <__ssputs_r+0x86>
 8006724:	463e      	mov	r6, r7
 8006726:	6820      	ldr	r0, [r4, #0]
 8006728:	4632      	mov	r2, r6
 800672a:	4641      	mov	r1, r8
 800672c:	f000 fcba 	bl	80070a4 <memmove>
 8006730:	68a3      	ldr	r3, [r4, #8]
 8006732:	1b9b      	subs	r3, r3, r6
 8006734:	60a3      	str	r3, [r4, #8]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	4433      	add	r3, r6
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	2000      	movs	r0, #0
 800673e:	e7db      	b.n	80066f8 <__ssputs_r+0x58>
 8006740:	462a      	mov	r2, r5
 8006742:	f000 fcd5 	bl	80070f0 <_realloc_r>
 8006746:	4606      	mov	r6, r0
 8006748:	2800      	cmp	r0, #0
 800674a:	d1e1      	bne.n	8006710 <__ssputs_r+0x70>
 800674c:	6921      	ldr	r1, [r4, #16]
 800674e:	4650      	mov	r0, sl
 8006750:	f7ff fec6 	bl	80064e0 <_free_r>
 8006754:	e7c7      	b.n	80066e6 <__ssputs_r+0x46>
	...

08006758 <_svfiprintf_r>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	4698      	mov	r8, r3
 800675e:	898b      	ldrh	r3, [r1, #12]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	b09d      	sub	sp, #116	; 0x74
 8006764:	4607      	mov	r7, r0
 8006766:	460d      	mov	r5, r1
 8006768:	4614      	mov	r4, r2
 800676a:	d50e      	bpl.n	800678a <_svfiprintf_r+0x32>
 800676c:	690b      	ldr	r3, [r1, #16]
 800676e:	b963      	cbnz	r3, 800678a <_svfiprintf_r+0x32>
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	f7ff ff21 	bl	80065b8 <_malloc_r>
 8006776:	6028      	str	r0, [r5, #0]
 8006778:	6128      	str	r0, [r5, #16]
 800677a:	b920      	cbnz	r0, 8006786 <_svfiprintf_r+0x2e>
 800677c:	230c      	movs	r3, #12
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e0d1      	b.n	800692a <_svfiprintf_r+0x1d2>
 8006786:	2340      	movs	r3, #64	; 0x40
 8006788:	616b      	str	r3, [r5, #20]
 800678a:	2300      	movs	r3, #0
 800678c:	9309      	str	r3, [sp, #36]	; 0x24
 800678e:	2320      	movs	r3, #32
 8006790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006794:	f8cd 800c 	str.w	r8, [sp, #12]
 8006798:	2330      	movs	r3, #48	; 0x30
 800679a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006944 <_svfiprintf_r+0x1ec>
 800679e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067a2:	f04f 0901 	mov.w	r9, #1
 80067a6:	4623      	mov	r3, r4
 80067a8:	469a      	mov	sl, r3
 80067aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067ae:	b10a      	cbz	r2, 80067b4 <_svfiprintf_r+0x5c>
 80067b0:	2a25      	cmp	r2, #37	; 0x25
 80067b2:	d1f9      	bne.n	80067a8 <_svfiprintf_r+0x50>
 80067b4:	ebba 0b04 	subs.w	fp, sl, r4
 80067b8:	d00b      	beq.n	80067d2 <_svfiprintf_r+0x7a>
 80067ba:	465b      	mov	r3, fp
 80067bc:	4622      	mov	r2, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	4638      	mov	r0, r7
 80067c2:	f7ff ff6d 	bl	80066a0 <__ssputs_r>
 80067c6:	3001      	adds	r0, #1
 80067c8:	f000 80aa 	beq.w	8006920 <_svfiprintf_r+0x1c8>
 80067cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ce:	445a      	add	r2, fp
 80067d0:	9209      	str	r2, [sp, #36]	; 0x24
 80067d2:	f89a 3000 	ldrb.w	r3, [sl]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80a2 	beq.w	8006920 <_svfiprintf_r+0x1c8>
 80067dc:	2300      	movs	r3, #0
 80067de:	f04f 32ff 	mov.w	r2, #4294967295
 80067e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067e6:	f10a 0a01 	add.w	sl, sl, #1
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	9307      	str	r3, [sp, #28]
 80067ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067f2:	931a      	str	r3, [sp, #104]	; 0x68
 80067f4:	4654      	mov	r4, sl
 80067f6:	2205      	movs	r2, #5
 80067f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fc:	4851      	ldr	r0, [pc, #324]	; (8006944 <_svfiprintf_r+0x1ec>)
 80067fe:	f7f9 fd0f 	bl	8000220 <memchr>
 8006802:	9a04      	ldr	r2, [sp, #16]
 8006804:	b9d8      	cbnz	r0, 800683e <_svfiprintf_r+0xe6>
 8006806:	06d0      	lsls	r0, r2, #27
 8006808:	bf44      	itt	mi
 800680a:	2320      	movmi	r3, #32
 800680c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006810:	0711      	lsls	r1, r2, #28
 8006812:	bf44      	itt	mi
 8006814:	232b      	movmi	r3, #43	; 0x2b
 8006816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800681a:	f89a 3000 	ldrb.w	r3, [sl]
 800681e:	2b2a      	cmp	r3, #42	; 0x2a
 8006820:	d015      	beq.n	800684e <_svfiprintf_r+0xf6>
 8006822:	9a07      	ldr	r2, [sp, #28]
 8006824:	4654      	mov	r4, sl
 8006826:	2000      	movs	r0, #0
 8006828:	f04f 0c0a 	mov.w	ip, #10
 800682c:	4621      	mov	r1, r4
 800682e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006832:	3b30      	subs	r3, #48	; 0x30
 8006834:	2b09      	cmp	r3, #9
 8006836:	d94e      	bls.n	80068d6 <_svfiprintf_r+0x17e>
 8006838:	b1b0      	cbz	r0, 8006868 <_svfiprintf_r+0x110>
 800683a:	9207      	str	r2, [sp, #28]
 800683c:	e014      	b.n	8006868 <_svfiprintf_r+0x110>
 800683e:	eba0 0308 	sub.w	r3, r0, r8
 8006842:	fa09 f303 	lsl.w	r3, r9, r3
 8006846:	4313      	orrs	r3, r2
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	46a2      	mov	sl, r4
 800684c:	e7d2      	b.n	80067f4 <_svfiprintf_r+0x9c>
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	1d19      	adds	r1, r3, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	9103      	str	r1, [sp, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfbb      	ittet	lt
 800685a:	425b      	neglt	r3, r3
 800685c:	f042 0202 	orrlt.w	r2, r2, #2
 8006860:	9307      	strge	r3, [sp, #28]
 8006862:	9307      	strlt	r3, [sp, #28]
 8006864:	bfb8      	it	lt
 8006866:	9204      	strlt	r2, [sp, #16]
 8006868:	7823      	ldrb	r3, [r4, #0]
 800686a:	2b2e      	cmp	r3, #46	; 0x2e
 800686c:	d10c      	bne.n	8006888 <_svfiprintf_r+0x130>
 800686e:	7863      	ldrb	r3, [r4, #1]
 8006870:	2b2a      	cmp	r3, #42	; 0x2a
 8006872:	d135      	bne.n	80068e0 <_svfiprintf_r+0x188>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	1d1a      	adds	r2, r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	9203      	str	r2, [sp, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	bfb8      	it	lt
 8006880:	f04f 33ff 	movlt.w	r3, #4294967295
 8006884:	3402      	adds	r4, #2
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006954 <_svfiprintf_r+0x1fc>
 800688c:	7821      	ldrb	r1, [r4, #0]
 800688e:	2203      	movs	r2, #3
 8006890:	4650      	mov	r0, sl
 8006892:	f7f9 fcc5 	bl	8000220 <memchr>
 8006896:	b140      	cbz	r0, 80068aa <_svfiprintf_r+0x152>
 8006898:	2340      	movs	r3, #64	; 0x40
 800689a:	eba0 000a 	sub.w	r0, r0, sl
 800689e:	fa03 f000 	lsl.w	r0, r3, r0
 80068a2:	9b04      	ldr	r3, [sp, #16]
 80068a4:	4303      	orrs	r3, r0
 80068a6:	3401      	adds	r4, #1
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ae:	4826      	ldr	r0, [pc, #152]	; (8006948 <_svfiprintf_r+0x1f0>)
 80068b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068b4:	2206      	movs	r2, #6
 80068b6:	f7f9 fcb3 	bl	8000220 <memchr>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d038      	beq.n	8006930 <_svfiprintf_r+0x1d8>
 80068be:	4b23      	ldr	r3, [pc, #140]	; (800694c <_svfiprintf_r+0x1f4>)
 80068c0:	bb1b      	cbnz	r3, 800690a <_svfiprintf_r+0x1b2>
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	3307      	adds	r3, #7
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	3308      	adds	r3, #8
 80068cc:	9303      	str	r3, [sp, #12]
 80068ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d0:	4433      	add	r3, r6
 80068d2:	9309      	str	r3, [sp, #36]	; 0x24
 80068d4:	e767      	b.n	80067a6 <_svfiprintf_r+0x4e>
 80068d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80068da:	460c      	mov	r4, r1
 80068dc:	2001      	movs	r0, #1
 80068de:	e7a5      	b.n	800682c <_svfiprintf_r+0xd4>
 80068e0:	2300      	movs	r3, #0
 80068e2:	3401      	adds	r4, #1
 80068e4:	9305      	str	r3, [sp, #20]
 80068e6:	4619      	mov	r1, r3
 80068e8:	f04f 0c0a 	mov.w	ip, #10
 80068ec:	4620      	mov	r0, r4
 80068ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068f2:	3a30      	subs	r2, #48	; 0x30
 80068f4:	2a09      	cmp	r2, #9
 80068f6:	d903      	bls.n	8006900 <_svfiprintf_r+0x1a8>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0c5      	beq.n	8006888 <_svfiprintf_r+0x130>
 80068fc:	9105      	str	r1, [sp, #20]
 80068fe:	e7c3      	b.n	8006888 <_svfiprintf_r+0x130>
 8006900:	fb0c 2101 	mla	r1, ip, r1, r2
 8006904:	4604      	mov	r4, r0
 8006906:	2301      	movs	r3, #1
 8006908:	e7f0      	b.n	80068ec <_svfiprintf_r+0x194>
 800690a:	ab03      	add	r3, sp, #12
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	462a      	mov	r2, r5
 8006910:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <_svfiprintf_r+0x1f8>)
 8006912:	a904      	add	r1, sp, #16
 8006914:	4638      	mov	r0, r7
 8006916:	f3af 8000 	nop.w
 800691a:	1c42      	adds	r2, r0, #1
 800691c:	4606      	mov	r6, r0
 800691e:	d1d6      	bne.n	80068ce <_svfiprintf_r+0x176>
 8006920:	89ab      	ldrh	r3, [r5, #12]
 8006922:	065b      	lsls	r3, r3, #25
 8006924:	f53f af2c 	bmi.w	8006780 <_svfiprintf_r+0x28>
 8006928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800692a:	b01d      	add	sp, #116	; 0x74
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006930:	ab03      	add	r3, sp, #12
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	462a      	mov	r2, r5
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <_svfiprintf_r+0x1f8>)
 8006938:	a904      	add	r1, sp, #16
 800693a:	4638      	mov	r0, r7
 800693c:	f000 f9d4 	bl	8006ce8 <_printf_i>
 8006940:	e7eb      	b.n	800691a <_svfiprintf_r+0x1c2>
 8006942:	bf00      	nop
 8006944:	080072d0 	.word	0x080072d0
 8006948:	080072da 	.word	0x080072da
 800694c:	00000000 	.word	0x00000000
 8006950:	080066a1 	.word	0x080066a1
 8006954:	080072d6 	.word	0x080072d6

08006958 <__sfputc_r>:
 8006958:	6893      	ldr	r3, [r2, #8]
 800695a:	3b01      	subs	r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	b410      	push	{r4}
 8006960:	6093      	str	r3, [r2, #8]
 8006962:	da08      	bge.n	8006976 <__sfputc_r+0x1e>
 8006964:	6994      	ldr	r4, [r2, #24]
 8006966:	42a3      	cmp	r3, r4
 8006968:	db01      	blt.n	800696e <__sfputc_r+0x16>
 800696a:	290a      	cmp	r1, #10
 800696c:	d103      	bne.n	8006976 <__sfputc_r+0x1e>
 800696e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006972:	f7ff bacd 	b.w	8005f10 <__swbuf_r>
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	1c58      	adds	r0, r3, #1
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	7019      	strb	r1, [r3, #0]
 800697e:	4608      	mov	r0, r1
 8006980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006984:	4770      	bx	lr

08006986 <__sfputs_r>:
 8006986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	4614      	mov	r4, r2
 800698e:	18d5      	adds	r5, r2, r3
 8006990:	42ac      	cmp	r4, r5
 8006992:	d101      	bne.n	8006998 <__sfputs_r+0x12>
 8006994:	2000      	movs	r0, #0
 8006996:	e007      	b.n	80069a8 <__sfputs_r+0x22>
 8006998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699c:	463a      	mov	r2, r7
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ffda 	bl	8006958 <__sfputc_r>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d1f3      	bne.n	8006990 <__sfputs_r+0xa>
 80069a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ac <_vfiprintf_r>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	460d      	mov	r5, r1
 80069b2:	b09d      	sub	sp, #116	; 0x74
 80069b4:	4614      	mov	r4, r2
 80069b6:	4698      	mov	r8, r3
 80069b8:	4606      	mov	r6, r0
 80069ba:	b118      	cbz	r0, 80069c4 <_vfiprintf_r+0x18>
 80069bc:	6983      	ldr	r3, [r0, #24]
 80069be:	b90b      	cbnz	r3, 80069c4 <_vfiprintf_r+0x18>
 80069c0:	f7ff fc80 	bl	80062c4 <__sinit>
 80069c4:	4b89      	ldr	r3, [pc, #548]	; (8006bec <_vfiprintf_r+0x240>)
 80069c6:	429d      	cmp	r5, r3
 80069c8:	d11b      	bne.n	8006a02 <_vfiprintf_r+0x56>
 80069ca:	6875      	ldr	r5, [r6, #4]
 80069cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	d405      	bmi.n	80069de <_vfiprintf_r+0x32>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	059a      	lsls	r2, r3, #22
 80069d6:	d402      	bmi.n	80069de <_vfiprintf_r+0x32>
 80069d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069da:	f7ff fd11 	bl	8006400 <__retarget_lock_acquire_recursive>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	071b      	lsls	r3, r3, #28
 80069e2:	d501      	bpl.n	80069e8 <_vfiprintf_r+0x3c>
 80069e4:	692b      	ldr	r3, [r5, #16]
 80069e6:	b9eb      	cbnz	r3, 8006a24 <_vfiprintf_r+0x78>
 80069e8:	4629      	mov	r1, r5
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff fae2 	bl	8005fb4 <__swsetup_r>
 80069f0:	b1c0      	cbz	r0, 8006a24 <_vfiprintf_r+0x78>
 80069f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f4:	07dc      	lsls	r4, r3, #31
 80069f6:	d50e      	bpl.n	8006a16 <_vfiprintf_r+0x6a>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b01d      	add	sp, #116	; 0x74
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	4b7b      	ldr	r3, [pc, #492]	; (8006bf0 <_vfiprintf_r+0x244>)
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d101      	bne.n	8006a0c <_vfiprintf_r+0x60>
 8006a08:	68b5      	ldr	r5, [r6, #8]
 8006a0a:	e7df      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a0c:	4b79      	ldr	r3, [pc, #484]	; (8006bf4 <_vfiprintf_r+0x248>)
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	bf08      	it	eq
 8006a12:	68f5      	ldreq	r5, [r6, #12]
 8006a14:	e7da      	b.n	80069cc <_vfiprintf_r+0x20>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	0598      	lsls	r0, r3, #22
 8006a1a:	d4ed      	bmi.n	80069f8 <_vfiprintf_r+0x4c>
 8006a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1e:	f7ff fcf0 	bl	8006402 <__retarget_lock_release_recursive>
 8006a22:	e7e9      	b.n	80069f8 <_vfiprintf_r+0x4c>
 8006a24:	2300      	movs	r3, #0
 8006a26:	9309      	str	r3, [sp, #36]	; 0x24
 8006a28:	2320      	movs	r3, #32
 8006a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a32:	2330      	movs	r3, #48	; 0x30
 8006a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bf8 <_vfiprintf_r+0x24c>
 8006a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a3c:	f04f 0901 	mov.w	r9, #1
 8006a40:	4623      	mov	r3, r4
 8006a42:	469a      	mov	sl, r3
 8006a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a48:	b10a      	cbz	r2, 8006a4e <_vfiprintf_r+0xa2>
 8006a4a:	2a25      	cmp	r2, #37	; 0x25
 8006a4c:	d1f9      	bne.n	8006a42 <_vfiprintf_r+0x96>
 8006a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a52:	d00b      	beq.n	8006a6c <_vfiprintf_r+0xc0>
 8006a54:	465b      	mov	r3, fp
 8006a56:	4622      	mov	r2, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff ff93 	bl	8006986 <__sfputs_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	f000 80aa 	beq.w	8006bba <_vfiprintf_r+0x20e>
 8006a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a68:	445a      	add	r2, fp
 8006a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a2 	beq.w	8006bba <_vfiprintf_r+0x20e>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a80:	f10a 0a01 	add.w	sl, sl, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a8e:	4654      	mov	r4, sl
 8006a90:	2205      	movs	r2, #5
 8006a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a96:	4858      	ldr	r0, [pc, #352]	; (8006bf8 <_vfiprintf_r+0x24c>)
 8006a98:	f7f9 fbc2 	bl	8000220 <memchr>
 8006a9c:	9a04      	ldr	r2, [sp, #16]
 8006a9e:	b9d8      	cbnz	r0, 8006ad8 <_vfiprintf_r+0x12c>
 8006aa0:	06d1      	lsls	r1, r2, #27
 8006aa2:	bf44      	itt	mi
 8006aa4:	2320      	movmi	r3, #32
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aaa:	0713      	lsls	r3, r2, #28
 8006aac:	bf44      	itt	mi
 8006aae:	232b      	movmi	r3, #43	; 0x2b
 8006ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aba:	d015      	beq.n	8006ae8 <_vfiprintf_r+0x13c>
 8006abc:	9a07      	ldr	r2, [sp, #28]
 8006abe:	4654      	mov	r4, sl
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f04f 0c0a 	mov.w	ip, #10
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006acc:	3b30      	subs	r3, #48	; 0x30
 8006ace:	2b09      	cmp	r3, #9
 8006ad0:	d94e      	bls.n	8006b70 <_vfiprintf_r+0x1c4>
 8006ad2:	b1b0      	cbz	r0, 8006b02 <_vfiprintf_r+0x156>
 8006ad4:	9207      	str	r2, [sp, #28]
 8006ad6:	e014      	b.n	8006b02 <_vfiprintf_r+0x156>
 8006ad8:	eba0 0308 	sub.w	r3, r0, r8
 8006adc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	46a2      	mov	sl, r4
 8006ae6:	e7d2      	b.n	8006a8e <_vfiprintf_r+0xe2>
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	1d19      	adds	r1, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	9103      	str	r1, [sp, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bfbb      	ittet	lt
 8006af4:	425b      	neglt	r3, r3
 8006af6:	f042 0202 	orrlt.w	r2, r2, #2
 8006afa:	9307      	strge	r3, [sp, #28]
 8006afc:	9307      	strlt	r3, [sp, #28]
 8006afe:	bfb8      	it	lt
 8006b00:	9204      	strlt	r2, [sp, #16]
 8006b02:	7823      	ldrb	r3, [r4, #0]
 8006b04:	2b2e      	cmp	r3, #46	; 0x2e
 8006b06:	d10c      	bne.n	8006b22 <_vfiprintf_r+0x176>
 8006b08:	7863      	ldrb	r3, [r4, #1]
 8006b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b0c:	d135      	bne.n	8006b7a <_vfiprintf_r+0x1ce>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	9203      	str	r2, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b1e:	3402      	adds	r4, #2
 8006b20:	9305      	str	r3, [sp, #20]
 8006b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c08 <_vfiprintf_r+0x25c>
 8006b26:	7821      	ldrb	r1, [r4, #0]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	f7f9 fb78 	bl	8000220 <memchr>
 8006b30:	b140      	cbz	r0, 8006b44 <_vfiprintf_r+0x198>
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	eba0 000a 	sub.w	r0, r0, sl
 8006b38:	fa03 f000 	lsl.w	r0, r3, r0
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	4303      	orrs	r3, r0
 8006b40:	3401      	adds	r4, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	482c      	ldr	r0, [pc, #176]	; (8006bfc <_vfiprintf_r+0x250>)
 8006b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b4e:	2206      	movs	r2, #6
 8006b50:	f7f9 fb66 	bl	8000220 <memchr>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d03f      	beq.n	8006bd8 <_vfiprintf_r+0x22c>
 8006b58:	4b29      	ldr	r3, [pc, #164]	; (8006c00 <_vfiprintf_r+0x254>)
 8006b5a:	bb1b      	cbnz	r3, 8006ba4 <_vfiprintf_r+0x1f8>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	3307      	adds	r3, #7
 8006b60:	f023 0307 	bic.w	r3, r3, #7
 8006b64:	3308      	adds	r3, #8
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	443b      	add	r3, r7
 8006b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6e:	e767      	b.n	8006a40 <_vfiprintf_r+0x94>
 8006b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b74:	460c      	mov	r4, r1
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7a5      	b.n	8006ac6 <_vfiprintf_r+0x11a>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4620      	mov	r0, r4
 8006b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8c:	3a30      	subs	r2, #48	; 0x30
 8006b8e:	2a09      	cmp	r2, #9
 8006b90:	d903      	bls.n	8006b9a <_vfiprintf_r+0x1ee>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0c5      	beq.n	8006b22 <_vfiprintf_r+0x176>
 8006b96:	9105      	str	r1, [sp, #20]
 8006b98:	e7c3      	b.n	8006b22 <_vfiprintf_r+0x176>
 8006b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e7f0      	b.n	8006b86 <_vfiprintf_r+0x1da>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <_vfiprintf_r+0x258>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f3af 8000 	nop.w
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	1c78      	adds	r0, r7, #1
 8006bb8:	d1d6      	bne.n	8006b68 <_vfiprintf_r+0x1bc>
 8006bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bbc:	07d9      	lsls	r1, r3, #31
 8006bbe:	d405      	bmi.n	8006bcc <_vfiprintf_r+0x220>
 8006bc0:	89ab      	ldrh	r3, [r5, #12]
 8006bc2:	059a      	lsls	r2, r3, #22
 8006bc4:	d402      	bmi.n	8006bcc <_vfiprintf_r+0x220>
 8006bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bc8:	f7ff fc1b 	bl	8006402 <__retarget_lock_release_recursive>
 8006bcc:	89ab      	ldrh	r3, [r5, #12]
 8006bce:	065b      	lsls	r3, r3, #25
 8006bd0:	f53f af12 	bmi.w	80069f8 <_vfiprintf_r+0x4c>
 8006bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd6:	e711      	b.n	80069fc <_vfiprintf_r+0x50>
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	462a      	mov	r2, r5
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <_vfiprintf_r+0x258>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f880 	bl	8006ce8 <_printf_i>
 8006be8:	e7e4      	b.n	8006bb4 <_vfiprintf_r+0x208>
 8006bea:	bf00      	nop
 8006bec:	08007290 	.word	0x08007290
 8006bf0:	080072b0 	.word	0x080072b0
 8006bf4:	08007270 	.word	0x08007270
 8006bf8:	080072d0 	.word	0x080072d0
 8006bfc:	080072da 	.word	0x080072da
 8006c00:	00000000 	.word	0x00000000
 8006c04:	08006987 	.word	0x08006987
 8006c08:	080072d6 	.word	0x080072d6

08006c0c <_printf_common>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	4616      	mov	r6, r2
 8006c12:	4699      	mov	r9, r3
 8006c14:	688a      	ldr	r2, [r1, #8]
 8006c16:	690b      	ldr	r3, [r1, #16]
 8006c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	bfb8      	it	lt
 8006c20:	4613      	movlt	r3, r2
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c28:	4607      	mov	r7, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_printf_common+0x26>
 8006c2e:	3301      	adds	r3, #1
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	0699      	lsls	r1, r3, #26
 8006c36:	bf42      	ittt	mi
 8006c38:	6833      	ldrmi	r3, [r6, #0]
 8006c3a:	3302      	addmi	r3, #2
 8006c3c:	6033      	strmi	r3, [r6, #0]
 8006c3e:	6825      	ldr	r5, [r4, #0]
 8006c40:	f015 0506 	ands.w	r5, r5, #6
 8006c44:	d106      	bne.n	8006c54 <_printf_common+0x48>
 8006c46:	f104 0a19 	add.w	sl, r4, #25
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	6832      	ldr	r2, [r6, #0]
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dc26      	bgt.n	8006ca2 <_printf_common+0x96>
 8006c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c58:	1e13      	subs	r3, r2, #0
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	bf18      	it	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	0692      	lsls	r2, r2, #26
 8006c62:	d42b      	bmi.n	8006cbc <_printf_common+0xb0>
 8006c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c0      	blx	r8
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d01e      	beq.n	8006cb0 <_printf_common+0xa4>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	68e5      	ldr	r5, [r4, #12]
 8006c76:	6832      	ldr	r2, [r6, #0]
 8006c78:	f003 0306 	and.w	r3, r3, #6
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	bf08      	it	eq
 8006c80:	1aad      	subeq	r5, r5, r2
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	6922      	ldr	r2, [r4, #16]
 8006c86:	bf0c      	ite	eq
 8006c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c8c:	2500      	movne	r5, #0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bfc4      	itt	gt
 8006c92:	1a9b      	subgt	r3, r3, r2
 8006c94:	18ed      	addgt	r5, r5, r3
 8006c96:	2600      	movs	r6, #0
 8006c98:	341a      	adds	r4, #26
 8006c9a:	42b5      	cmp	r5, r6
 8006c9c:	d11a      	bne.n	8006cd4 <_printf_common+0xc8>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e008      	b.n	8006cb4 <_printf_common+0xa8>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	4638      	mov	r0, r7
 8006caa:	47c0      	blx	r8
 8006cac:	3001      	adds	r0, #1
 8006cae:	d103      	bne.n	8006cb8 <_printf_common+0xac>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb8:	3501      	adds	r5, #1
 8006cba:	e7c6      	b.n	8006c4a <_printf_common+0x3e>
 8006cbc:	18e1      	adds	r1, r4, r3
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	2030      	movs	r0, #48	; 0x30
 8006cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cc6:	4422      	add	r2, r4
 8006cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	e7c7      	b.n	8006c64 <_printf_common+0x58>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4649      	mov	r1, r9
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c0      	blx	r8
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d0e6      	beq.n	8006cb0 <_printf_common+0xa4>
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7d9      	b.n	8006c9a <_printf_common+0x8e>
	...

08006ce8 <_printf_i>:
 8006ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	7e0f      	ldrb	r7, [r1, #24]
 8006cee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cf0:	2f78      	cmp	r7, #120	; 0x78
 8006cf2:	4691      	mov	r9, r2
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cfe:	d807      	bhi.n	8006d10 <_printf_i+0x28>
 8006d00:	2f62      	cmp	r7, #98	; 0x62
 8006d02:	d80a      	bhi.n	8006d1a <_printf_i+0x32>
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	f000 80d8 	beq.w	8006eba <_printf_i+0x1d2>
 8006d0a:	2f58      	cmp	r7, #88	; 0x58
 8006d0c:	f000 80a3 	beq.w	8006e56 <_printf_i+0x16e>
 8006d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d18:	e03a      	b.n	8006d90 <_printf_i+0xa8>
 8006d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d1e:	2b15      	cmp	r3, #21
 8006d20:	d8f6      	bhi.n	8006d10 <_printf_i+0x28>
 8006d22:	a101      	add	r1, pc, #4	; (adr r1, 8006d28 <_printf_i+0x40>)
 8006d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d11 	.word	0x08006d11
 8006d34:	08006d11 	.word	0x08006d11
 8006d38:	08006d11 	.word	0x08006d11
 8006d3c:	08006d11 	.word	0x08006d11
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006d11 	.word	0x08006d11
 8006d48:	08006d11 	.word	0x08006d11
 8006d4c:	08006d11 	.word	0x08006d11
 8006d50:	08006d11 	.word	0x08006d11
 8006d54:	08006ea1 	.word	0x08006ea1
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006e83 	.word	0x08006e83
 8006d60:	08006d11 	.word	0x08006d11
 8006d64:	08006d11 	.word	0x08006d11
 8006d68:	08006ec3 	.word	0x08006ec3
 8006d6c:	08006d11 	.word	0x08006d11
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006d11 	.word	0x08006d11
 8006d78:	08006d11 	.word	0x08006d11
 8006d7c:	08006e8b 	.word	0x08006e8b
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	1d1a      	adds	r2, r3, #4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	602a      	str	r2, [r5, #0]
 8006d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0a3      	b.n	8006edc <_printf_i+0x1f4>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	6829      	ldr	r1, [r5, #0]
 8006d98:	0606      	lsls	r6, r0, #24
 8006d9a:	f101 0304 	add.w	r3, r1, #4
 8006d9e:	d50a      	bpl.n	8006db6 <_printf_i+0xce>
 8006da0:	680e      	ldr	r6, [r1, #0]
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	2e00      	cmp	r6, #0
 8006da6:	da03      	bge.n	8006db0 <_printf_i+0xc8>
 8006da8:	232d      	movs	r3, #45	; 0x2d
 8006daa:	4276      	negs	r6, r6
 8006dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db0:	485e      	ldr	r0, [pc, #376]	; (8006f2c <_printf_i+0x244>)
 8006db2:	230a      	movs	r3, #10
 8006db4:	e019      	b.n	8006dea <_printf_i+0x102>
 8006db6:	680e      	ldr	r6, [r1, #0]
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dbe:	bf18      	it	ne
 8006dc0:	b236      	sxthne	r6, r6
 8006dc2:	e7ef      	b.n	8006da4 <_printf_i+0xbc>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	6820      	ldr	r0, [r4, #0]
 8006dc8:	1d19      	adds	r1, r3, #4
 8006dca:	6029      	str	r1, [r5, #0]
 8006dcc:	0601      	lsls	r1, r0, #24
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0xec>
 8006dd0:	681e      	ldr	r6, [r3, #0]
 8006dd2:	e002      	b.n	8006dda <_printf_i+0xf2>
 8006dd4:	0646      	lsls	r6, r0, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0xe8>
 8006dd8:	881e      	ldrh	r6, [r3, #0]
 8006dda:	4854      	ldr	r0, [pc, #336]	; (8006f2c <_printf_i+0x244>)
 8006ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8006dde:	bf0c      	ite	eq
 8006de0:	2308      	moveq	r3, #8
 8006de2:	230a      	movne	r3, #10
 8006de4:	2100      	movs	r1, #0
 8006de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dea:	6865      	ldr	r5, [r4, #4]
 8006dec:	60a5      	str	r5, [r4, #8]
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	bfa2      	ittt	ge
 8006df2:	6821      	ldrge	r1, [r4, #0]
 8006df4:	f021 0104 	bicge.w	r1, r1, #4
 8006df8:	6021      	strge	r1, [r4, #0]
 8006dfa:	b90e      	cbnz	r6, 8006e00 <_printf_i+0x118>
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	d04d      	beq.n	8006e9c <_printf_i+0x1b4>
 8006e00:	4615      	mov	r5, r2
 8006e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e06:	fb03 6711 	mls	r7, r3, r1, r6
 8006e0a:	5dc7      	ldrb	r7, [r0, r7]
 8006e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e10:	4637      	mov	r7, r6
 8006e12:	42bb      	cmp	r3, r7
 8006e14:	460e      	mov	r6, r1
 8006e16:	d9f4      	bls.n	8006e02 <_printf_i+0x11a>
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d10b      	bne.n	8006e34 <_printf_i+0x14c>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07de      	lsls	r6, r3, #31
 8006e20:	d508      	bpl.n	8006e34 <_printf_i+0x14c>
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	6861      	ldr	r1, [r4, #4]
 8006e26:	4299      	cmp	r1, r3
 8006e28:	bfde      	ittt	le
 8006e2a:	2330      	movle	r3, #48	; 0x30
 8006e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e34:	1b52      	subs	r2, r2, r5
 8006e36:	6122      	str	r2, [r4, #16]
 8006e38:	f8cd a000 	str.w	sl, [sp]
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	aa03      	add	r2, sp, #12
 8006e40:	4621      	mov	r1, r4
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7ff fee2 	bl	8006c0c <_printf_common>
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d14c      	bne.n	8006ee6 <_printf_i+0x1fe>
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	b004      	add	sp, #16
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e56:	4835      	ldr	r0, [pc, #212]	; (8006f2c <_printf_i+0x244>)
 8006e58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e5c:	6829      	ldr	r1, [r5, #0]
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e64:	6029      	str	r1, [r5, #0]
 8006e66:	061d      	lsls	r5, r3, #24
 8006e68:	d514      	bpl.n	8006e94 <_printf_i+0x1ac>
 8006e6a:	07df      	lsls	r7, r3, #31
 8006e6c:	bf44      	itt	mi
 8006e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e72:	6023      	strmi	r3, [r4, #0]
 8006e74:	b91e      	cbnz	r6, 8006e7e <_printf_i+0x196>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	f023 0320 	bic.w	r3, r3, #32
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	2310      	movs	r3, #16
 8006e80:	e7b0      	b.n	8006de4 <_printf_i+0xfc>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	f043 0320 	orr.w	r3, r3, #32
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	2378      	movs	r3, #120	; 0x78
 8006e8c:	4828      	ldr	r0, [pc, #160]	; (8006f30 <_printf_i+0x248>)
 8006e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e92:	e7e3      	b.n	8006e5c <_printf_i+0x174>
 8006e94:	0659      	lsls	r1, r3, #25
 8006e96:	bf48      	it	mi
 8006e98:	b2b6      	uxthmi	r6, r6
 8006e9a:	e7e6      	b.n	8006e6a <_printf_i+0x182>
 8006e9c:	4615      	mov	r5, r2
 8006e9e:	e7bb      	b.n	8006e18 <_printf_i+0x130>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	6826      	ldr	r6, [r4, #0]
 8006ea4:	6961      	ldr	r1, [r4, #20]
 8006ea6:	1d18      	adds	r0, r3, #4
 8006ea8:	6028      	str	r0, [r5, #0]
 8006eaa:	0635      	lsls	r5, r6, #24
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	d501      	bpl.n	8006eb4 <_printf_i+0x1cc>
 8006eb0:	6019      	str	r1, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <_printf_i+0x1d2>
 8006eb4:	0670      	lsls	r0, r6, #25
 8006eb6:	d5fb      	bpl.n	8006eb0 <_printf_i+0x1c8>
 8006eb8:	8019      	strh	r1, [r3, #0]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6123      	str	r3, [r4, #16]
 8006ebe:	4615      	mov	r5, r2
 8006ec0:	e7ba      	b.n	8006e38 <_printf_i+0x150>
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	1d1a      	adds	r2, r3, #4
 8006ec6:	602a      	str	r2, [r5, #0]
 8006ec8:	681d      	ldr	r5, [r3, #0]
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f7f9 f9a6 	bl	8000220 <memchr>
 8006ed4:	b108      	cbz	r0, 8006eda <_printf_i+0x1f2>
 8006ed6:	1b40      	subs	r0, r0, r5
 8006ed8:	6060      	str	r0, [r4, #4]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee4:	e7a8      	b.n	8006e38 <_printf_i+0x150>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	462a      	mov	r2, r5
 8006eea:	4649      	mov	r1, r9
 8006eec:	4640      	mov	r0, r8
 8006eee:	47d0      	blx	sl
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0ab      	beq.n	8006e4c <_printf_i+0x164>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	079b      	lsls	r3, r3, #30
 8006ef8:	d413      	bmi.n	8006f22 <_printf_i+0x23a>
 8006efa:	68e0      	ldr	r0, [r4, #12]
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	4298      	cmp	r0, r3
 8006f00:	bfb8      	it	lt
 8006f02:	4618      	movlt	r0, r3
 8006f04:	e7a4      	b.n	8006e50 <_printf_i+0x168>
 8006f06:	2301      	movs	r3, #1
 8006f08:	4632      	mov	r2, r6
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	47d0      	blx	sl
 8006f10:	3001      	adds	r0, #1
 8006f12:	d09b      	beq.n	8006e4c <_printf_i+0x164>
 8006f14:	3501      	adds	r5, #1
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	9903      	ldr	r1, [sp, #12]
 8006f1a:	1a5b      	subs	r3, r3, r1
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dcf2      	bgt.n	8006f06 <_printf_i+0x21e>
 8006f20:	e7eb      	b.n	8006efa <_printf_i+0x212>
 8006f22:	2500      	movs	r5, #0
 8006f24:	f104 0619 	add.w	r6, r4, #25
 8006f28:	e7f5      	b.n	8006f16 <_printf_i+0x22e>
 8006f2a:	bf00      	nop
 8006f2c:	080072e1 	.word	0x080072e1
 8006f30:	080072f2 	.word	0x080072f2

08006f34 <_sbrk_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d06      	ldr	r5, [pc, #24]	; (8006f50 <_sbrk_r+0x1c>)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7fc f816 	bl	8002f70 <_sbrk>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_sbrk_r+0x1a>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_sbrk_r+0x1a>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	200001bc 	.word	0x200001bc

08006f54 <__sread>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5c:	f000 f8f8 	bl	8007150 <_read_r>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	bfab      	itete	ge
 8006f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f66:	89a3      	ldrhlt	r3, [r4, #12]
 8006f68:	181b      	addge	r3, r3, r0
 8006f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f6e:	bfac      	ite	ge
 8006f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f72:	81a3      	strhlt	r3, [r4, #12]
 8006f74:	bd10      	pop	{r4, pc}

08006f76 <__swrite>:
 8006f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	461f      	mov	r7, r3
 8006f7c:	898b      	ldrh	r3, [r1, #12]
 8006f7e:	05db      	lsls	r3, r3, #23
 8006f80:	4605      	mov	r5, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	4616      	mov	r6, r2
 8006f86:	d505      	bpl.n	8006f94 <__swrite+0x1e>
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f000 f868 	bl	8007064 <_lseek_r>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	f000 b817 	b.w	8006fdc <_write_r>

08006fae <__sseek>:
 8006fae:	b510      	push	{r4, lr}
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb6:	f000 f855 	bl	8007064 <_lseek_r>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	bf15      	itete	ne
 8006fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fca:	81a3      	strheq	r3, [r4, #12]
 8006fcc:	bf18      	it	ne
 8006fce:	81a3      	strhne	r3, [r4, #12]
 8006fd0:	bd10      	pop	{r4, pc}

08006fd2 <__sclose>:
 8006fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd6:	f000 b813 	b.w	8007000 <_close_r>
	...

08006fdc <_write_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	; (8006ffc <_write_r+0x20>)
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7fb fe4a 	bl	8002c84 <_write>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_write_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_write_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	200001bc 	.word	0x200001bc

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	; (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fb fe66 	bl	8002cdc <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	200001bc 	.word	0x200001bc

08007020 <_fstat_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	; (8007040 <_fstat_r+0x20>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f7fb fea5 	bl	8002d7c <_fstat>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d102      	bne.n	800703c <_fstat_r+0x1c>
 8007036:	682b      	ldr	r3, [r5, #0]
 8007038:	b103      	cbz	r3, 800703c <_fstat_r+0x1c>
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	bf00      	nop
 8007040:	200001bc 	.word	0x200001bc

08007044 <_isatty_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d06      	ldr	r5, [pc, #24]	; (8007060 <_isatty_r+0x1c>)
 8007048:	2300      	movs	r3, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	f7fb fe02 	bl	8002c58 <_isatty>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_isatty_r+0x1a>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_isatty_r+0x1a>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	200001bc 	.word	0x200001bc

08007064 <_lseek_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	; (8007084 <_lseek_r+0x20>)
 8007068:	4604      	mov	r4, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	2200      	movs	r2, #0
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fb fe49 	bl	8002d0a <_lseek>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_lseek_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_lseek_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	200001bc 	.word	0x200001bc

08007088 <memcpy>:
 8007088:	440a      	add	r2, r1
 800708a:	4291      	cmp	r1, r2
 800708c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007090:	d100      	bne.n	8007094 <memcpy+0xc>
 8007092:	4770      	bx	lr
 8007094:	b510      	push	{r4, lr}
 8007096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800709a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800709e:	4291      	cmp	r1, r2
 80070a0:	d1f9      	bne.n	8007096 <memcpy+0xe>
 80070a2:	bd10      	pop	{r4, pc}

080070a4 <memmove>:
 80070a4:	4288      	cmp	r0, r1
 80070a6:	b510      	push	{r4, lr}
 80070a8:	eb01 0402 	add.w	r4, r1, r2
 80070ac:	d902      	bls.n	80070b4 <memmove+0x10>
 80070ae:	4284      	cmp	r4, r0
 80070b0:	4623      	mov	r3, r4
 80070b2:	d807      	bhi.n	80070c4 <memmove+0x20>
 80070b4:	1e43      	subs	r3, r0, #1
 80070b6:	42a1      	cmp	r1, r4
 80070b8:	d008      	beq.n	80070cc <memmove+0x28>
 80070ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070c2:	e7f8      	b.n	80070b6 <memmove+0x12>
 80070c4:	4402      	add	r2, r0
 80070c6:	4601      	mov	r1, r0
 80070c8:	428a      	cmp	r2, r1
 80070ca:	d100      	bne.n	80070ce <memmove+0x2a>
 80070cc:	bd10      	pop	{r4, pc}
 80070ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070d6:	e7f7      	b.n	80070c8 <memmove+0x24>

080070d8 <__malloc_lock>:
 80070d8:	4801      	ldr	r0, [pc, #4]	; (80070e0 <__malloc_lock+0x8>)
 80070da:	f7ff b991 	b.w	8006400 <__retarget_lock_acquire_recursive>
 80070de:	bf00      	nop
 80070e0:	200001b0 	.word	0x200001b0

080070e4 <__malloc_unlock>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__malloc_unlock+0x8>)
 80070e6:	f7ff b98c 	b.w	8006402 <__retarget_lock_release_recursive>
 80070ea:	bf00      	nop
 80070ec:	200001b0 	.word	0x200001b0

080070f0 <_realloc_r>:
 80070f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f4:	4680      	mov	r8, r0
 80070f6:	4614      	mov	r4, r2
 80070f8:	460e      	mov	r6, r1
 80070fa:	b921      	cbnz	r1, 8007106 <_realloc_r+0x16>
 80070fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	4611      	mov	r1, r2
 8007102:	f7ff ba59 	b.w	80065b8 <_malloc_r>
 8007106:	b92a      	cbnz	r2, 8007114 <_realloc_r+0x24>
 8007108:	f7ff f9ea 	bl	80064e0 <_free_r>
 800710c:	4625      	mov	r5, r4
 800710e:	4628      	mov	r0, r5
 8007110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007114:	f000 f82e 	bl	8007174 <_malloc_usable_size_r>
 8007118:	4284      	cmp	r4, r0
 800711a:	4607      	mov	r7, r0
 800711c:	d802      	bhi.n	8007124 <_realloc_r+0x34>
 800711e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007122:	d812      	bhi.n	800714a <_realloc_r+0x5a>
 8007124:	4621      	mov	r1, r4
 8007126:	4640      	mov	r0, r8
 8007128:	f7ff fa46 	bl	80065b8 <_malloc_r>
 800712c:	4605      	mov	r5, r0
 800712e:	2800      	cmp	r0, #0
 8007130:	d0ed      	beq.n	800710e <_realloc_r+0x1e>
 8007132:	42bc      	cmp	r4, r7
 8007134:	4622      	mov	r2, r4
 8007136:	4631      	mov	r1, r6
 8007138:	bf28      	it	cs
 800713a:	463a      	movcs	r2, r7
 800713c:	f7ff ffa4 	bl	8007088 <memcpy>
 8007140:	4631      	mov	r1, r6
 8007142:	4640      	mov	r0, r8
 8007144:	f7ff f9cc 	bl	80064e0 <_free_r>
 8007148:	e7e1      	b.n	800710e <_realloc_r+0x1e>
 800714a:	4635      	mov	r5, r6
 800714c:	e7df      	b.n	800710e <_realloc_r+0x1e>
	...

08007150 <_read_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	; (8007170 <_read_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7fb fde4 	bl	8002d2c <_read>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_read_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_read_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	200001bc 	.word	0x200001bc

08007174 <_malloc_usable_size_r>:
 8007174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007178:	1f18      	subs	r0, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	bfbc      	itt	lt
 800717e:	580b      	ldrlt	r3, [r1, r0]
 8007180:	18c0      	addlt	r0, r0, r3
 8007182:	4770      	bx	lr

08007184 <_init>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr

08007190 <_fini>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr
