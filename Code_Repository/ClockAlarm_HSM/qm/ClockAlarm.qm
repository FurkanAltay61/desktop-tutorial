<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpc"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpc::QHsm">
   <attribute name="curr_time" type="uint32_t" visibility="0x02" properties="0x01"/>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <attribute name="temp_format" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_digit" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeout" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_timeout" type="uint8_t" visibility="0x02" properties="0x00"/>
   <operation name="get_curr_time" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>This returns the value of current time</documentation>
    <code>HAL_TIM_Base_Stop_IT(&amp;htim6);
uint32_t temp;
temp = Clock_Alarm_curr_time;
HAL_TIM_Base_Start_IT(&amp;htim6);
return temp;</code>
   </operation>
   <operation name="update_curr_time" type="void" visibility="0x00" properties="0x01">
    <code>if(++Clock_Alarm_curr_time == MAX_TIME){
    Clock_Alarm_curr_time = 0;
}</code>
   </operation>
   <operation name="set_curr_time" type="void" visibility="0x00" properties="0x01">
    <parameter name="new_curr_time" type="uint32_t"/>
    <code>HAL_TIM_Base_Stop_IT(&amp;htim6);
Clock_Alarm_curr_time = new_curr_time;
HAL_TIM_Base_Start_IT(&amp;htim6);</code>
   </operation>
   <operation name="display_curr_time" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="column" type="uint8_t"/>
    <code>char time_as_string[30];
uint32_t time_;
char dumbuf[10];

uint32_t time24h = Clock_Alarm_get_curr_time(); //convert to number of seconds
uint8_t ss = time24h % 10U;       //extract sub-second to append later

time24h /= 10;
time_ = (me-&gt;time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
memset(time_as_string,0x00,sizeof(time_as_string));
strcat(time_as_string,integertime_to_string(time_)); //hh:mm:ss
strcat(time_as_string,&quot;.&quot;);
sprintf(dumbuf,&quot;%d&quot;,ss);
strcat(time_as_string,dumbuf);

/*if mode is 12H , concatenate  am/pm information */
if(me-&gt;time_mode == MODE_12H){
    strcat(time_as_string,&quot; &quot;);
    strcat(time_as_string,get_am_or_pm(time24h));
}

display_write(time_as_string,row,column);</code>
   </operation>
   <operation name="display_clock_setting_time" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="column" type="uint8_t"/>
    <code>char time_as_string[30];
static char ampm[2];


memset(ampm,0x00,sizeof(ampm));
memset(time_as_string,0x00,sizeof(time_as_string));
strcat(time_as_string,integertime_to_string(me-&gt;temp_time)); //hh:mm:ss

/*concatenate  am/pm information */
if(me-&gt;temp_format != FORMAT_24H){
    strcat(time_as_string,&quot; &quot;);

    if(me-&gt;temp_format == FORMAT_AM){
        ampm[0] = 'A';
        ampm[1] = 'M';
    }
    else{
        ampm[0] = 'P';
        ampm[1] = 'M';
    }

    strcat(time_as_string,ampm);
}


display_write(time_as_string,row,column);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1/2">
     <action>Clock_Alarm_set_curr_time(INITIAL_CURR_TIME);
me-&gt;alarm_time = INITIAL_ALARM_TIME;
me-&gt;time_mode = MODE_12H;
me-&gt;alarm_status = ALARM_OFF;</action>
     <initial_glyph conn="14,19,5,3,21,14,3">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../2">
      <history_glyph conn="29,53,3,3,7,-14,2"/>
     </history>
     <tran trig="ALARM">
      <choice target="../../../2">
       <guard>(me-&gt;alarm_status == ALARM_ON &amp;&amp; Clock_Alarm_get_curr_time()/10 == me-&gt;alarm_time)</guard>
       <choice_glyph conn="132,196,4,0,15">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="132,185,2,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Ticking">
      <entry brief="display_curr_time">Clock_Alarm_display_curr_time(me,TICKING_CURR_TIME_ROW,TICKING_CURR_TIME_COL);</entry>
      <tran trig="SET" target="../../3/2">
       <action>
char *ampm;

me-&gt;temp_time = Clock_Alarm_get_curr_time()/10;
if(me-&gt;time_mode == MODE_12H){
    
    ampm = get_am_or_pm(me-&gt;temp_time);
  
    if(*(ampm+0) == 'A' &amp;&amp; *(ampm+1) == 'M'){
        me-&gt;temp_format = FORMAT_AM;
    }
    else{
        me-&gt;temp_format = FORMAT_PM;
    }
    me-&gt;temp_time = convert_24hformat_to_12h(me-&gt;temp_time);
}
else
    me-&gt;temp_format = FORMAT_24H;</action>
       <tran_glyph conn="57,34,1,3,47">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../3/3">
       <tran_glyph conn="57,39,1,3,42,67,5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>Clock_Alarm_display_curr_time(me,TICKING_CURR_TIME_ROW,TICKING_CURR_TIME_COL);</action>
       <tran_glyph conn="38,36,3,-1,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="38,26,19,18">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="Settings">
      <tran trig="ABRT" target="../../2">
       <tran_glyph conn="91,68,3,2,-44,-24">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2">
       <tran_glyph conn="91,72,3,2,-50,-28">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Clock_Setting">
       <entry>Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);</entry>
       <initial target="../2">
        <initial_glyph conn="108,53,4,3,-3,6">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="OK">
        <action>if(me-&gt;temp_format != FORMAT_24H){
    me-&gt;temp_time = convert_12hformat_to_24h( me-&gt;temp_time,(time_format_t)me-&gt;temp_format);
    me-&gt;time_mode = MODE_12H;
}else{
    me-&gt;time_mode = MODE_24H;
}

me-&gt;temp_time *= 10UL;
Clock_Alarm_set_curr_time(me-&gt;temp_time);</action>
        <choice>
         <guard>0</guard>
         <choice_glyph conn="119,80,5,-1,11">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="104,80,3,-1,15">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="cs_hour_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -=  DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);</action>
         <tran_glyph conn="114,48,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../3">
         <tran_glyph conn="128,47,1,3,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="114,39,14,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_hour_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_HOUR(me-&gt;temp_time)) * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="134,48,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../4">
         <tran_glyph conn="149,47,1,3,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="134,39,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10) * 60UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="156,48,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="171,47,1,3,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="156,39,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 60UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="177,48,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../6">
         <tran_glyph conn="192,47,1,3,3,9,-84,10,2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="177,39,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_sec_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_SEC(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL );
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="113,70,3,-1,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="127,68,1,3,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="113,60,14,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_sec_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_SEC(me-&gt;temp_time));
me-&gt;temp_time += (me-&gt;temp_digit);
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="134,70,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../8">
         <tran_glyph conn="149,68,1,3,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="134,60,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_format">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
//String msg[3] = {&quot;24H&quot;,&quot;AM &quot;,&quot;PM &quot;};
char msg[3][3]={&quot;24H&quot;,&quot;AM &quot;,&quot;PM &quot;};
display_write(msg[me-&gt;temp_format],CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
</entry>
        <tran trig="SET">
         <action>char msg[4]={0};

if(me-&gt;temp_format == FORMAT_24H){
    me-&gt;temp_format = FORMAT_AM;
    strcpy(msg,&quot;AM&quot;);
}
else if(me-&gt;temp_format == FORMAT_AM){
    me-&gt;temp_format = FORMAT_PM;
    strcpy(msg,&quot;PM&quot;);
}
else if (me-&gt;temp_format == FORMAT_PM){
    me-&gt;temp_format = FORMAT_24H;
    strcpy(msg,&quot;24H&quot;);
}
display_write(msg,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
</action>
         <tran_glyph conn="156,70,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../9">
          <guard>is_time_set_error(me-&gt;temp_time,(time_format_t)me-&gt;temp_format)</guard>
          <choice_glyph conn="177,67,5,3,5">
           <action box="-9,1,13,4"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="167,67,1,-1,10">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="156,60,11,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_error">
        <exit>me-&gt;timeout = 0;</exit>
        <initial target="../3">
         <initial_glyph conn="185,67,5,0,2,5">
          <action box="0,-2,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="SET" target="../..">
         <tran_glyph conn="203,60,0,0,-32">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <tran_glyph conn="212,78,1,-1,-11,2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state name="cs_err_on">
         <entry>char *err_msg;
err_msg = &quot;Error!&quot;;
display_write(err_msg , 1 , 4);
//display_write(&quot;Error!&quot; , 1 , 4);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../4">
           <guard>me-&gt;timeout == 10</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="196,75,5,3,5">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="192,75,1,-1,4">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="185,72,7,6">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state name="cs_err_off">
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../3">
           <guard>me-&gt;timeout == 10</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="198,69,5,0,-9,3">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="205,72,0,-1,-3,-7">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="201,72,7,6"/>
        </state>
        <state_glyph node="182,60,30,21">
         <exit box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="104,28,117,59">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="Alarm_Setting">
       <entry>Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);</entry>
       <initial target="../3">
        <initial_glyph conn="109,122,4,3,-5,6">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="OK">
        <action>me-&gt;alarm_status = me-&gt;temp_digit;
if(me-&gt;temp_format != FORMAT_24H){
    me-&gt;temp_time = convert_12hformat_to_24h( me-&gt;temp_time,(time_format_t)me-&gt;temp_format);
}
me-&gt;alarm_time = me-&gt;temp_time;</action>
        <choice>
         <guard>0</guard>
         <choice_glyph conn="152,156,5,-1,7">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="148,162,2,-1,-6,4">
         <action box="0,-3,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="TICK">
        <action>Clock_Alarm_display_curr_time(me,ALARM_SETTING_CURR_TIME_ROW,ALARM_SETTING_CURR_TIME_COL);
if( QHsm_state(me) != Q_STATE_CAST(&amp;Clock_Alarm_alarm_onoff))
    Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
    
if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_hour_d1))
    display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_hour_d2))
    display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_min_d1))
    display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_min_d2))
    display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_sec_d1))
    display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_sec_d2))
    display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_format))
    display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_alarm_onoff))
     display_set_cursor(CLOCK_SETTING_TIME_ROW,ALARM_SETTING_STATUS_COL);</action>
        <tran_glyph conn="104,155,3,-1,11">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="as_hour_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -=  DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);</action>
         <tran_glyph conn="115,120,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../4">
         <tran_glyph conn="129,119,1,3,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="115,111,14,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_hour_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_HOUR(me-&gt;temp_time)) * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="136,120,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="151,119,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="136,111,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_min_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10) * 60UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="159,120,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../6">
         <tran_glyph conn="174,119,1,3,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="159,111,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_min_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 60UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="181,120,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="196,119,1,3,3,9,-87,12,3">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="181,111,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_sec_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_SEC(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL );
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="115,143,3,-1,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../8">
         <tran_glyph conn="129,141,1,3,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="115,133,14,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_sec_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_SEC(me-&gt;temp_time));
me-&gt;temp_time += (me-&gt;temp_digit);
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="136,143,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../9">
         <tran_glyph conn="151,141,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="136,133,15,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_format">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
//String msg[3] = {&quot;24H&quot;,&quot;AM &quot;,&quot;PM &quot;};
char msg[3][3]={&quot;24H&quot;,&quot;AM &quot;,&quot;PM &quot;};
display_write(msg[me-&gt;temp_format],CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
</entry>
        <tran trig="SET">
         <action>char msg[4]={0};

if(me-&gt;temp_format == FORMAT_24H){
    me-&gt;temp_format = FORMAT_AM;
    strcpy(msg,&quot;AM&quot;);
}
else if(me-&gt;temp_format == FORMAT_AM){
    me-&gt;temp_format = FORMAT_PM;
    strcpy(msg,&quot;PM&quot;);
}
else if (me-&gt;temp_format == FORMAT_PM){
    me-&gt;temp_format = FORMAT_24H;
    strcpy(msg,&quot;24H&quot;);
}
display_write(msg,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
</action>
         <tran_glyph conn="159,143,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../10">
          <guard>is_time_set_error(me-&gt;temp_time,(time_format_t)me-&gt;temp_format)</guard>
          <choice_glyph conn="180,140,5,3,8">
           <action box="-9,1,13,4"/>
          </choice_glyph>
         </choice>
         <choice target="../../../11">
          <guard>else</guard>
          <choice_glyph conn="180,140,4,3,-9,21,-13,2">
           <action box="0,-4,10,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="170,140,1,-1,10">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="159,133,11,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_error">
        <exit>me-&gt;timeout = 0;</exit>
        <initial target="../4">
         <initial_glyph conn="191,151,5,2,4,-3">
          <action box="0,-2,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="OK">
         <tran_glyph conn="216,150,1,-1,-9,2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="TICK">
         <tran_glyph conn="201,154,2,-1,-4">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="SET" target="../..">
         <tran_glyph conn="207,154,2,2,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state name="as_err_on">
         <entry>char *err_msg;
err_msg = &quot;Error!&quot;;
display_write(err_msg , 1 , 4);
//display_write(&quot;Error!&quot; , 1 , 4);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../5">
           <guard>me-&gt;timeout == 10</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="201,145,5,3,5">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="197,145,1,-1,4">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="190,142,7,6">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state name="as_err_off">
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../4">
           <guard>me-&gt;timeout == 10</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="203,139,5,0,-9,3">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="210,142,0,-1,-3,-7">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="206,142,7,6"/>
        </state>
        <state_glyph node="188,133,28,21">
         <exit box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="alarm_onoff">
        <entry>me-&gt;temp_digit = 0U;
display_write(&quot;ALARM_OFF&quot;,0,1);
display_set_cursor(0,1);</entry>
        <tran trig="SET">
         <action>if(me-&gt;temp_digit){
    display_write(&quot;ALARM_OFF&quot;,0,1);
    me-&gt;temp_digit = 0;
}
else{
    display_write(&quot;ALARM_ON&quot;,0,1);
    me-&gt;temp_digit = 1;
}</action>
         <tran_glyph conn="203,121,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="203,111,14,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="104,99,117,63">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="91,19,134,148"/>
     </state>
     <state_glyph node="29,10,204,175"/>
    </state>
    <state name="Alarm_Notify">
     <entry>me-&gt;timeout = 0;</entry>
     <initial target="../3">
      <initial_glyph conn="104,243,5,2,12,-6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="96,219,3,3,-70,-166,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <action>++me-&gt;alarm_timeout;
Clock_Alarm_display_curr_time(me,ALARM_SETTING_CURR_TIME_ROW,ALARM_SETTING_CURR_TIME_COL);</action>
      <choice target="../../../1/2">
       <guard>me-&gt;alarm_timeout == 200U</guard>
       <action>me-&gt;alarm_timeout = 0;</action>
       <choice_glyph conn="52,236,5,3,-43,-200,29">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="96,236,3,-1,-44">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="alarm_msg_on">
      <entry>display_write(&quot;ALARM&quot;,0,1);</entry>
      <tran trig="TICK">
       <action>++me-&gt;timeout;</action>
       <choice target="../../../4">
        <guard>me-&gt;timeout == 10</guard>
        <action>me-&gt;timeout = 0;</action>
        <choice_glyph conn="130,230,5,3,9">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="124,230,1,-1,6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="105,222,19,15">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="alarm_msg_off">
      <tran trig="TICK">
       <action>++me-&gt;timeout;</action>
       <choice target="../../../3">
        <guard>me-&gt;timeout == 10</guard>
        <action>me-&gt;timeout = 0;</action>
        <choice_glyph conn="135,217,5,0,-20,5">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="150,222,0,-1,-5,-15">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="139,222,19,15"/>
     </state>
     <state_glyph node="96,211,74,36">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="294,303"/>
   </statechart>
  </class>
  <attribute name="super_ClockAlarm" type="QHsm *const" visibility="0x00" properties="0x00">
   <code>= &amp;Clock_Alarm_obj.super;</code>
  </attribute>
  <operation name="Clock_Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QHsm_ctor(&amp;Clock_Alarm_obj.super,Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <directory name="../Core/Src">
   <file name="ClockAlarm_SM.c">
    <text>#include &quot;main.h&quot;
#include &quot;qpc.h&quot;
#include &quot;ClockAlarm_SM.h&quot;
#include &quot;string.h&quot;
#include &quot;stdio.h&quot;
#include &quot;stdbool.h&quot;

extern TIM_HandleTypeDef htim6;

$declare${HSMs::Clock_Alarm}
$define${HSMs::super_ClockAlarm}

void display_cursor_on_blinkon();
void display_set_cursor(uint8_t ,uint8_t);
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm);
uint32_t convert_24hformat_to_12h(uint32_t time24h);
void  display_write(char *str_, uint8_t r, uint8_t c);
char* integertime_to_string(uint32_t time_);
char* get_am_or_pm(uint32_t time24h);
bool is_time_set_error(uint32_t time_,time_format_t format);


$define${HSMs::Clock_Alarm}
$define${HSMs::Clock_Alarm_ctor}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
    Clock_Alarm_update_curr_time();
}


/*
 * Description: Converts given integer time in 12H format to integer time 24H format
 * param1 : Integer time in 12H format
 * param2 : time format of type time_format_t
 * return : Integer time in 24H format
 */
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm){
    uint8_t hour;
    uint32_t time24h;
    hour = GET_HOUR(time12h);
    if(ampm == FORMAT_AM){
        time24h = (hour == 12)? (time12h-(12UL * 3600UL)) : time12h;
    }else{
        time24h = (hour == 12)? time12h : (time12h +(12UL * 3600UL));
    }
    return time24h;
}

/*
 * Description: Converts given integer time in 24H format to integer time 12H format
 * param1 : Integer time in 24H format
 * return : Integer time in 12H format
 */
uint32_t convert_24hformat_to_12h(uint32_t time24h){
    uint8_t hour;
    uint32_t time12h;
    hour = GET_HOUR(time24h);

    if(hour == 0)
        time12h = time24h + (12UL * 3600UL);
    else{
        if((hour &lt; 12UL) || (hour == 12UL))
            return time24h;
        else
            time12h = time24h - (12UL * 3600UL);
    }
    return time12h;
}


/*
 * Description : Decodes AM/PM information from given time in 24H format
 * param1: Integer time in 24H format
 * return : A string value(&quot;AM&quot; or &quot;PM&quot;)
 */
char* get_am_or_pm(uint32_t time24h){

    static char ampm[2];
    memset(ampm,0x00,sizeof(ampm));

    uint8_t h = GET_HOUR(time24h);
    if(h == 0U){
        ampm[0] = 'A';
		ampm[1] = 'M';
    }else if( h &gt; 12U){
        ampm[0] = 'P';
		ampm[1] = 'M';
    }else if (h == 12U){
        ampm[0] = 'P';
		ampm[1] = 'M';
	}
    else
        ampm[0] = 'A';
		ampm[1] = 'M';

	return ampm;
}


/*
 * Description: Writes a message to the LCD at given row and column number
 * param1 : Message to write in 'String' format
 * param2 : row number of the LCD
 * param2 : column number of the LCD
 */
void  display_write(char *str_, uint8_t r, uint8_t c){
//    lcd_set_cursor(c,r);
//    lcd_print_string(str_);

	printf(&quot;%s\r\n&quot;,str_);
}

void display_set_cursor(uint8_t r, uint8_t c){
//     lcd_set_cursor(c,r);
}



/*
 * Description: converts an 'integer' time to 'String' time
 * param1 : time represented in terms of number of seconds
 * return : time as 'String' value in the format HH:MM:SS
 */
char* integertime_to_string(uint32_t time_){
    uint8_t h,m,s;
    static char buf[10]; //00:00:00+null
    memset(buf,0x00,sizeof(buf));
    h = GET_HOUR(time_); /* Extract how many hours the 'time_' represent */
    m = GET_MIN(time_);  /* Extract how many minutes the 'time_' represent */
    s = GET_SEC(time_);	 /* Extract how many seconds the 'time_' represent */
    sprintf(buf,&quot;%02d:%02d:%02d&quot;,h,m,s);
    return buf;
}



bool is_time_set_error(uint32_t time_,time_format_t format){
    uint8_t h = GET_HOUR(time_);
    return ((h &gt; 23) || ((h &gt; 12 || (h == 0))&amp;&amp; format != FORMAT_24H) );
}

</text>
   </file>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCK_ALARM_H
#define CLOCK_ALARM_H


enum ClockAlarm_Signals{
    SET_SIG = Q_USER_SIG,
    OK_SIG,
    ABRT_SIG,
    ALARM_SIG,
    TICK_SIG,
    MAX_SIG,
};


enum time_mode{
    MODE_24H,
    MODE_12H
};

enum alarm_status{
    ALARM_OFF,
    ALARM_ON
};

typedef enum time_format{
    FORMAT_24H = 0,
    FORMAT_AM,
    FORMAT_PM
}time_format_t;

#define MAX_TIME (864000UL)
#define INITIAL_CURR_TIME  ((10UL * 3600UL + 10UL * 60UL + 10UL) * 10UL)
#define INITIAL_ALARM_TIME (8UL * 3600UL)

#define TICKING_CURR_TIME_ROW    0
#define TICKING_CURR_TIME_COL    3
#define CLOCK_SETTING_TIME_ROW   0
#define CLOCK_SETTING_TIME_COL   3

#define ALARM_SETTING_CURR_TIME_ROW 0
#define ALARM_SETTING_CURR_TIME_COL 3
#define ALARM_SETTING_STATUS_COL    4

#define CLOCK_SETTING_TIME_HOUR_D1_COL    2
#define CLOCK_SETTING_TIME_HOUR_D2_COL    3
#define CLOCK_SETTING_TIME_MIN_D1_COL     5
#define CLOCK_SETTING_TIME_MIN_D2_COL     5
#define CLOCK_SETTING_TIME_SEC_D1_COL     8
#define CLOCK_SETTING_TIME_SEC_D2_COL     9
#define CLOCK_SETTING_TIME_FMT_COL        10


#define GET_HOUR(seconds)     (seconds/3600UL)
#define GET_MIN(seconds)      ((seconds/60UL)%60UL)
#define GET_SEC(seconds)      (seconds % 60UL)
#define DIGIT1(d)             (d/10U)
#define DIGIT2(d)             (d%10U)

$declare${HSMs::Clock_Alarm_ctor}
$declare${HSMs::super_ClockAlarm}



#endif</text>
   </file>
  </directory>
 </package>
</model>
