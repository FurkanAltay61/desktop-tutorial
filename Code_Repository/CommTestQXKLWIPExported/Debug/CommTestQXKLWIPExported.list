
CommTestQXKLWIPExported.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000157d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cec  080159a4  080159a4  000259a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018690  08018690  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08018690  08018690  00028690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018698  08018698  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018698  08018698  00028698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801869c  0801869c  0002869c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080186a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a8ac  2000008c  0801872c  0003008c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000a938  0801872c  0003a938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fca1  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000829f  00000000  00000000  0005fd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  00068000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e40  00000000  00000000  00069fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035b08  00000000  00000000  0006bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000352f4  00000000  00000000  000a1900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115285  00000000  00000000  000d6bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ebe79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ad8  00000000  00000000  001ebecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001f49a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001f49e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801598c 	.word	0x0801598c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0801598c 	.word	0x0801598c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000a8 	.word	0x200000a8
 80005f4:	200000fc 	.word	0x200000fc

080005f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <__NVIC_SystemReset+0x24>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800060a:	4904      	ldr	r1, [pc, #16]	; (800061c <__NVIC_SystemReset+0x24>)
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__NVIC_SystemReset+0x28>)
 800060e:	4313      	orrs	r3, r2
 8000610:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000612:	f3bf 8f4f 	dsb	sy
}
 8000616:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <__NVIC_SystemReset+0x20>
 800061c:	e000ed00 	.word	0xe000ed00
 8000620:	05fa0004 	.word	0x05fa0004

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b085      	sub	sp, #20
 8000628:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fd4e 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f897 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f98f 	bl	8000954 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000636:	f000 f937 	bl	80008a8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800063a:	f000 f965 	bl	8000908 <MX_DMA_Init>
  MX_TIM6_Init();
 800063e:	f000 f8fd 	bl	800083c <MX_TIM6_Init>
  MX_LWIP_Init();
 8000642:	f007 fb8d 	bl	8007d60 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_DeInit(&huart3);
 8000646:	4836      	ldr	r0, [pc, #216]	; (8000720 <main+0xfc>)
 8000648:	f004 fc6a 	bl	8004f20 <HAL_UART_DeInit>
  HAL_UART_Init(&huart3);
 800064c:	4834      	ldr	r0, [pc, #208]	; (8000720 <main+0xfc>)
 800064e:	f004 fc19 	bl	8004e84 <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart3,(uint8_t *)uartdriver.text,sizeof(uartdriver.text));
 8000652:	2214      	movs	r2, #20
 8000654:	4933      	ldr	r1, [pc, #204]	; (8000724 <main+0x100>)
 8000656:	4832      	ldr	r0, [pc, #200]	; (8000720 <main+0xfc>)
 8000658:	f004 fdfe 	bl	8005258 <HAL_UART_Receive_DMA>
  RetargetInit(&huart3);
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <main+0xfc>)
 800065e:	f000 fa6f 	bl	8000b40 <RetargetInit>

  printf("Merhaba\r\n");
 8000662:	4831      	ldr	r0, [pc, #196]	; (8000728 <main+0x104>)
 8000664:	f013 fe70 	bl	8014348 <puts>

  UartDriver_ctor(&uartdriver);
 8000668:	4830      	ldr	r0, [pc, #192]	; (800072c <main+0x108>)
 800066a:	f013 fc67 	bl	8013f3c <UartDriver_ctor>
  LwipDriver_ctor(&lwipdriver);
 800066e:	4830      	ldr	r0, [pc, #192]	; (8000730 <main+0x10c>)
 8000670:	f013 faf8 	bl	8013c64 <LwipDriver_ctor>


  QF_init();
 8000674:	f012 fda4 	bl	80131c0 <QF_init>
  QF_psInit(subscrSto, Q_DIM(subscrSto));
 8000678:	210a      	movs	r1, #10
 800067a:	482e      	ldr	r0, [pc, #184]	; (8000734 <main+0x110>)
 800067c:	f013 f9a2 	bl	80139c4 <QF_psInit>
  /* initialize event pools... */
  QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 8000680:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8000684:	f242 7138 	movw	r1, #10040	; 0x2738
 8000688:	482b      	ldr	r0, [pc, #172]	; (8000738 <main+0x114>)
 800068a:	f012 fba7 	bl	8012ddc <QF_poolInit>

  /*Aktif objeler arasındaki öncelik ilişkisine dikkat et , öncelikler kesinlikle aynı olmayacak*/
  QActive_setAttr(AO_LwipDriver, TASK_NAME_ATTR, "Lwip");
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <main+0x118>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <main+0x11c>)
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f012 fe0e 	bl	80132b8 <QActive_setAttr>
  QACTIVE_START(AO_LwipDriver,2U,LwipDriver_queue,Q_DIM(LwipDriver_queue),LwipDriverStack,Q_DIM(LwipDriverStack),(QEvt *)0);
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <main+0x118>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d103      	bne.n	80006ae <main+0x8a>
 80006a6:	2192      	movs	r1, #146	; 0x92
 80006a8:	4826      	ldr	r0, [pc, #152]	; (8000744 <main+0x120>)
 80006aa:	f000 fa19 	bl	8000ae0 <Q_onAssert>
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <main+0x118>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689c      	ldr	r4, [r3, #8]
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <main+0x118>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	2300      	movs	r3, #0
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	f44f 7320 	mov.w	r3, #640	; 0x280
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <main+0x124>)
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <main+0x128>)
 80006cc:	2102      	movs	r1, #2
 80006ce:	47a0      	blx	r4
  QActive_setAttr(AO_UartDriver, TASK_NAME_ATTR, "Uart");
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <main+0x12c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <main+0x130>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f012 fded 	bl	80132b8 <QActive_setAttr>
  QACTIVE_START(AO_UartDriver,1U,UartDriver_queue,Q_DIM(UartDriver_queue),UartDriverStack,Q_DIM(UartDriverStack),(QEvt *)0);
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <main+0x12c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d103      	bne.n	80006f0 <main+0xcc>
 80006e8:	2194      	movs	r1, #148	; 0x94
 80006ea:	4816      	ldr	r0, [pc, #88]	; (8000744 <main+0x120>)
 80006ec:	f000 f9f8 	bl	8000ae0 <Q_onAssert>
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <main+0x12c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	689c      	ldr	r4, [r3, #8]
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <main+0x12c>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <main+0x134>)
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	230a      	movs	r3, #10
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <main+0x138>)
 800070e:	2101      	movs	r1, #1
 8000710:	47a0      	blx	r4
  return QF_run();
 8000712:	f012 fd5d 	bl	80131d0 <QF_run>
 8000716:	4603      	mov	r3, r0

//	  MX_LWIP_Process();

  }
  /* USER CODE END 3 */
}
 8000718:	4618      	mov	r0, r3
 800071a:	3704      	adds	r7, #4
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	20000348 	.word	0x20000348
 8000724:	20000510 	.word	0x20000510
 8000728:	080159a4 	.word	0x080159a4
 800072c:	2000048c 	.word	0x2000048c
 8000730:	20000524 	.word	0x20000524
 8000734:	200005c4 	.word	0x200005c4
 8000738:	200005ec 	.word	0x200005ec
 800073c:	20000000 	.word	0x20000000
 8000740:	080159b0 	.word	0x080159b0
 8000744:	080183c0 	.word	0x080183c0
 8000748:	20002eb4 	.word	0x20002eb4
 800074c:	20002d24 	.word	0x20002d24
 8000750:	20000004 	.word	0x20000004
 8000754:	080159b8 	.word	0x080159b8
 8000758:	200038dc 	.word	0x200038dc
 800075c:	200038b4 	.word	0x200038b4

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f013 fd5c 	bl	801422c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000784:	f002 ff70 	bl	8003668 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemClock_Config+0xd4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a29      	ldr	r2, [pc, #164]	; (8000834 <SystemClock_Config+0xd4>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xd4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <SystemClock_Config+0xd8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a24      	ldr	r2, [pc, #144]	; (8000838 <SystemClock_Config+0xd8>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <SystemClock_Config+0xd8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007d0:	23d8      	movs	r3, #216	; 0xd8
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007d8:	2309      	movs	r3, #9
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 ffa1 	bl	8003728 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007ec:	f000 f9a3 	bl	8000b36 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f0:	f002 ff4a 	bl	8003688 <HAL_PWREx_EnableOverDrive>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007fa:	f000 f99c 	bl	8000b36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2107      	movs	r1, #7
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fa27 	bl	8003c70 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000828:	f000 f985 	bl	8000b36 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	; 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_TIM6_Init+0x64>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_TIM6_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_TIM6_Init+0x64>)
 8000854:	f240 221b 	movw	r2, #539	; 0x21b
 8000858:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_TIM6_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_TIM6_Init+0x64>)
 8000862:	2263      	movs	r2, #99	; 0x63
 8000864:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_TIM6_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_TIM6_Init+0x64>)
 800086e:	f004 f815 	bl	800489c <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000878:	f000 f95d 	bl	8000b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_TIM6_Init+0x64>)
 800088a:	f004 fa4f 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 f94f 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200002fc 	.word	0x200002fc
 80008a4:	40001000 	.word	0x40001000

080008a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART3_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART3_UART_Init+0x58>)
 80008ec:	f004 faca 	bl	8004e84 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f91e 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000348 	.word	0x20000348
 8000904:	40004800 	.word	0x40004800

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_DMA_Init+0x48>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <MX_DMA_Init+0x48>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_DMA_Init+0x48>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2105      	movs	r1, #5
 800092a:	200c      	movs	r0, #12
 800092c:	f000 fd4d 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000930:	200c      	movs	r0, #12
 8000932:	f000 fd66 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	200e      	movs	r0, #14
 800093c:	f000 fd45 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000940:	200e      	movs	r0, #14
 8000942:	f000 fd5e 	bl	8001402 <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b59      	ldr	r3, [pc, #356]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a58      	ldr	r2, [pc, #352]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b56      	ldr	r3, [pc, #344]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	4b53      	ldr	r3, [pc, #332]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a52      	ldr	r2, [pc, #328]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b50      	ldr	r3, [pc, #320]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a4c      	ldr	r2, [pc, #304]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a3a      	ldr	r2, [pc, #232]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x17c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a00:	4834      	ldr	r0, [pc, #208]	; (8000ad4 <MX_GPIO_Init+0x180>)
 8000a02:	f002 fde5 	bl	80035d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4833      	ldr	r0, [pc, #204]	; (8000ad8 <MX_GPIO_Init+0x184>)
 8000a0c:	f002 fde0 	bl	80035d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a16:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	482d      	ldr	r0, [pc, #180]	; (8000adc <MX_GPIO_Init+0x188>)
 8000a28:	f002 fb1a 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <MX_GPIO_Init+0x180>)
 8000a46:	f002 fb0b 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a4a:	2340      	movs	r3, #64	; 0x40
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481d      	ldr	r0, [pc, #116]	; (8000ad8 <MX_GPIO_Init+0x184>)
 8000a62:	f002 fafd 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <MX_GPIO_Init+0x184>)
 8000a7a:	f002 faf1 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 8000a7e:	2330      	movs	r3, #48	; 0x30
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a82:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <MX_GPIO_Init+0x180>)
 8000a94:	f002 fae4 	bl	8003060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f000 fc94 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000aa2:	200a      	movs	r0, #10
 8000aa4:	f000 fcad 	bl	8001402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2105      	movs	r1, #5
 8000aac:	2017      	movs	r0, #23
 8000aae:	f000 fc8c 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ab2:	2017      	movs	r0, #23
 8000ab4:	f000 fca5 	bl	8001402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2105      	movs	r1, #5
 8000abc:	2028      	movs	r0, #40	; 0x28
 8000abe:	f000 fc84 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ac2:	2028      	movs	r0, #40	; 0x28
 8000ac4:	f000 fc9d 	bl	8001402 <HAL_NVIC_EnableIRQ>

}
 8000ac8:	bf00      	nop
 8000aca:	3730      	adds	r7, #48	; 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40020800 	.word	0x40020800

08000ae0 <Q_onAssert>:

/* USER CODE BEGIN 4 */


void Q_onAssert(char const *module, int loc) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 8000aea:	f7ff fd85 	bl	80005f8 <__NVIC_SystemReset>
	...

08000af0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */

	  static uint8_t const l_tickhook = 0;
	  BaseType_t xTickWoken = pdFALSE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
	  QF_TICK_X_FROM_ISR(0U,&xTickWoken,&l_tickhook);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	2000      	movs	r0, #0
 8000b00:	f012 fd38 	bl	8013574 <QF_tickXFromISR_>
	  portEND_SWITCHING_ISR(xTickWoken);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <HAL_SYSTICK_Callback+0x2a>
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_SYSTICK_Callback+0x34>)
 8000b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	f3bf 8f4f 	dsb	sy
 8000b16:	f3bf 8f6f 	isb	sy
	__NOP();
 8000b1a:	bf00      	nop
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	e000ed04 	.word	0xe000ed04

08000b28 <QF_onStartup>:
	QF_INT_ENABLE();
#endif
}


void QF_onStartup(void){
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
//	MX_LWIP_Init();
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3a:	b672      	cpsid	i
}
 8000b3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <Error_Handler+0x8>

08000b40 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <RetargetInit+0x28>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <RetargetInit+0x2c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6898      	ldr	r0, [r3, #8]
 8000b54:	2300      	movs	r3, #0
 8000b56:	2202      	movs	r2, #2
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f013 fc3b 	bl	80143d4 <setvbuf>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20003edc 	.word	0x20003edc
 8000b6c:	20000028 	.word	0x20000028

08000b70 <_isatty>:

int _isatty(int fd) {
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db04      	blt.n	8000b88 <_isatty+0x18>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	dc01      	bgt.n	8000b88 <_isatty+0x18>
    return 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e003      	b.n	8000b90 <_isatty+0x20>

  errno = EBADF;
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <_isatty+0x2c>)
 8000b8a:	2209      	movs	r2, #9
 8000b8c:	601a      	str	r2, [r3, #0]
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	2000a924 	.word	0x2000a924

08000ba0 <_write>:

int _write(int fd, char* ptr, int len) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d002      	beq.n	8000bb8 <_write+0x18>
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d111      	bne.n	8000bdc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <_write+0x50>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	f004 f9e4 	bl	8004f92 <HAL_UART_Transmit>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <_write+0x38>
      return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	e006      	b.n	8000be6 <_write+0x46>
    else
      return EIO;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	e004      	b.n	8000be6 <_write+0x46>
  }
  errno = EBADF;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <_write+0x54>)
 8000bde:	2209      	movs	r2, #9
 8000be0:	601a      	str	r2, [r3, #0]
  return -1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20003edc 	.word	0x20003edc
 8000bf4:	2000a924 	.word	0x2000a924

08000bf8 <_close>:

int _close(int fd) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db04      	blt.n	8000c10 <_close+0x18>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	dc01      	bgt.n	8000c10 <_close+0x18>
    return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e004      	b.n	8000c1a <_close+0x22>

  errno = EBADF;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_close+0x30>)
 8000c12:	2209      	movs	r2, #9
 8000c14:	601a      	str	r2, [r3, #0]
  return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2000a924 	.word	0x2000a924

08000c2c <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <_lseek+0x24>)
 8000c3a:	2209      	movs	r2, #9
 8000c3c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000a924 	.word	0x2000a924

08000c54 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d110      	bne.n	8000c88 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <_read+0x48>)
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2201      	movs	r2, #1
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	f004 fa21 	bl	80050b8 <HAL_UART_Receive>
 8000c76:	4603      	mov	r3, r0
 8000c78:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <_read+0x30>
      return 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e006      	b.n	8000c92 <_read+0x3e>
    else
      return EIO;
 8000c84:	2305      	movs	r3, #5
 8000c86:	e004      	b.n	8000c92 <_read+0x3e>
  }
  errno = EBADF;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <_read+0x4c>)
 8000c8a:	2209      	movs	r2, #9
 8000c8c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20003edc 	.word	0x20003edc
 8000ca0:	2000a924 	.word	0x2000a924

08000ca4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db08      	blt.n	8000cc6 <_fstat+0x22>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	dc05      	bgt.n	8000cc6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc0:	605a      	str	r2, [r3, #4]
    return 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e003      	b.n	8000cce <_fstat+0x2a>
  }

  errno = EBADF;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <_fstat+0x38>)
 8000cc8:	2209      	movs	r2, #9
 8000cca:	601a      	str	r2, [r3, #0]
  return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000a924 	.word	0x2000a924

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fb54 	bl	80013ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_TIM_Base_MspInit+0x44>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d113      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0x48>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <HAL_TIM_Base_MspInit+0x48>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_TIM_Base_MspInit+0x48>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2105      	movs	r1, #5
 8000d5e:	2036      	movs	r0, #54	; 0x36
 8000d60:	f000 fb33 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d64:	2036      	movs	r0, #54	; 0x36
 8000d66:	f000 fb4c 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40001000 	.word	0x40001000
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0aa      	sub	sp, #168	; 0xa8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2284      	movs	r2, #132	; 0x84
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f013 fa45 	bl	801422c <memset>
  if(huart->Instance==USART3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a55      	ldr	r2, [pc, #340]	; (8000efc <HAL_UART_MspInit+0x180>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	f040 80a2 	bne.w	8000ef2 <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 f97d 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000dc8:	f7ff feb5 	bl	8000b36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dcc:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a4b      	ldr	r2, [pc, #300]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_UART_MspInit+0x184>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e16:	2307      	movs	r3, #7
 8000e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e20:	4619      	mov	r1, r3
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <HAL_UART_MspInit+0x188>)
 8000e24:	f002 f91c 	bl	8003060 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e2a:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <HAL_UART_MspInit+0x190>)
 8000e2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e34:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e48:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e6a:	4827      	ldr	r0, [pc, #156]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e6c:	f000 faf2 	bl	8001454 <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000e76:	f7ff fe5e 	bl	8000b36 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e7e:	671a      	str	r2, [r3, #112]	; 0x70
 8000e80:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <HAL_UART_MspInit+0x18c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <HAL_UART_MspInit+0x198>)
 8000e8a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e92:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000e96:	2240      	movs	r2, #64	; 0x40
 8000e98:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000ec8:	f000 fac4 	bl	8001454 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8000ed2:	f7ff fe30 	bl	8000b36 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000eda:	66da      	str	r2, [r3, #108]	; 0x6c
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_UART_MspInit+0x194>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2027      	movs	r0, #39	; 0x27
 8000ee8:	f000 fa6f 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eec:	2027      	movs	r0, #39	; 0x27
 8000eee:	f000 fa88 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	37a8      	adds	r7, #168	; 0xa8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004800 	.word	0x40004800
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	200003cc 	.word	0x200003cc
 8000f0c:	40026028 	.word	0x40026028
 8000f10:	2000042c 	.word	0x2000042c
 8000f14:	40026058 	.word	0x40026058

08000f18 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_UART_MspDeInit+0x4c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d117      	bne.n	8000f5a <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_UART_MspDeInit+0x50>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_UART_MspDeInit+0x50>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8000f36:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <HAL_UART_MspDeInit+0x54>)
 8000f3c:	f002 fa3c 	bl	80033b8 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fb33 	bl	80015b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fb2e 	bl	80015b0 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000f54:	2027      	movs	r0, #39	; 0x27
 8000f56:	f000 fa62 	bl	800141e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f8d0 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8000fa4:	f7ff fda4 	bl	8000af0 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON2_Pin);
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f002 fb41 	bl	8003638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA1_Stream1_IRQHandler+0x10>)
 8000fc2:	f000 fc45 	bl	8001850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200003cc 	.word	0x200003cc

08000fd0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream3_IRQHandler+0x10>)
 8000fd6:	f000 fc3b 	bl	8001850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000042c 	.word	0x2000042c

08000fe4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTON1_Pin);
 8000fe8:	2020      	movs	r0, #32
 8000fea:	f002 fb25 	bl	8003638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <USART3_IRQHandler+0x10>)
 8000ffa:	f004 f97b 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000348 	.word	0x20000348

08001008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800100c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001010:	f002 fb12 	bl	8003638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TIM6_DAC_IRQHandler+0x10>)
 800101e:	f003 fc94 	bl	800494a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200002fc 	.word	0x200002fc

0800102c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <ETH_IRQHandler+0x10>)
 8001032:	f001 fa5f 	bl	80024f4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000711c 	.word	0x2000711c

08001040 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <ETH_WKUP_IRQHandler+0x10>)
 8001046:	f001 fa55 	bl	80024f4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000711c 	.word	0x2000711c

08001054 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f013 f865 	bl	8014174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fabb 	bl	8000624 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80010bc:	080186a0 	.word	0x080186a0
  ldr r2, =_sbss
 80010c0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80010c4:	2000a938 	.word	0x2000a938

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>

080010ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 f970 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f000 f805 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fe01 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f999 	bl	800143a <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f953 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000008 	.word	0x20000008
 800113c:	20000010 	.word	0x20000010
 8001140:	2000000c 	.word	0x2000000c

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000010 	.word	0x20000010
 8001168:	20003ee0 	.word	0x20003ee0

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20003ee0 	.word	0x20003ee0

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000010 	.word	0x20000010

080011cc <__NVIC_SetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	05fa0000 	.word	0x05fa0000

08001214 <__NVIC_GetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_DisableIRQ>:
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db12      	blt.n	80012a4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	490a      	ldr	r1, [pc, #40]	; (80012b0 <__NVIC_DisableIRQ+0x44>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	3320      	adds	r3, #32
 8001294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001298:	f3bf 8f4f 	dsb	sy
}
 800129c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800129e:	f3bf 8f6f 	isb	sy
}
 80012a2:	bf00      	nop
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff05 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff1a 	bl	8001214 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff8e 	bl	8001308 <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff0d 	bl	8001230 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff1d 	bl	800126c <__NVIC_DisableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff94 	bl	8001370 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fe84 	bl	800116c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e099      	b.n	80015a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001490:	e00f      	b.n	80014b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001492:	f7ff fe6b 	bl	800116c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b05      	cmp	r3, #5
 800149e:	d908      	bls.n	80014b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2220      	movs	r2, #32
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2203      	movs	r2, #3
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e078      	b.n	80015a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e8      	bne.n	8001492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	4b38      	ldr	r3, [pc, #224]	; (80015ac <HAL_DMA_Init+0x158>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4313      	orrs	r3, r2
 8001502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	2b04      	cmp	r3, #4
 800150a:	d107      	bne.n	800151c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4313      	orrs	r3, r2
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f023 0307 	bic.w	r3, r3, #7
 8001532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4313      	orrs	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	2b04      	cmp	r3, #4
 8001544:	d117      	bne.n	8001576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00e      	beq.n	8001576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fb67 	bl	8001c2c <DMA_CheckFifoParam>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001572:	2301      	movs	r3, #1
 8001574:	e016      	b.n	80015a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fb1e 	bl	8001bc0 <DMA_CalcBaseAndBitshift>
 8001584:	4603      	mov	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	223f      	movs	r2, #63	; 0x3f
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	f010803f 	.word	0xf010803f

080015b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e050      	b.n	8001664 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d101      	bne.n	80015d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80015ce:	2302      	movs	r3, #2
 80015d0:	e048      	b.n	8001664 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2221      	movs	r2, #33	; 0x21
 8001610:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fad4 	bl	8001bc0 <DMA_CalcBaseAndBitshift>
 8001618:	4603      	mov	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	223f      	movs	r2, #63	; 0x3f
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_DMA_Start_IT+0x26>
 800168e:	2302      	movs	r3, #2
 8001690:	e048      	b.n	8001724 <HAL_DMA_Start_IT+0xb8>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d137      	bne.n	8001716 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 fa52 	bl	8001b64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	223f      	movs	r2, #63	; 0x3f
 80016c6:	409a      	lsls	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0216 	orr.w	r2, r2, #22
 80016da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0208 	orr.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e005      	b.n	8001722 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800171e:	2302      	movs	r3, #2
 8001720:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800173a:	f7ff fd17 	bl	800116c <HAL_GetTick>
 800173e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d008      	beq.n	800175e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e052      	b.n	8001804 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0216 	bic.w	r2, r2, #22
 800176c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_DMA_Abort+0x62>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0208 	bic.w	r2, r2, #8
 800179c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ae:	e013      	b.n	80017d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b0:	f7ff fcdc 	bl	800116c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d90c      	bls.n	80017d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2203      	movs	r2, #3
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e015      	b.n	8001804 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e4      	bne.n	80017b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	223f      	movs	r2, #63	; 0x3f
 80017ec:	409a      	lsls	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d004      	beq.n	800182a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00c      	b.n	8001844 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2205      	movs	r2, #5
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800185c:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_DMA_IRQHandler+0x248>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a8e      	ldr	r2, [pc, #568]	; (8001a9c <HAL_DMA_IRQHandler+0x24c>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0a9b      	lsrs	r3, r3, #10
 8001868:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187a:	2208      	movs	r2, #8
 800187c:	409a      	lsls	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01a      	beq.n	80018bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0204 	bic.w	r2, r2, #4
 80018a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	2208      	movs	r2, #8
 80018aa:	409a      	lsls	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	2201      	movs	r2, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d012      	beq.n	80018f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	2201      	movs	r2, #1
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f043 0202 	orr.w	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f6:	2204      	movs	r2, #4
 80018f8:	409a      	lsls	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d012      	beq.n	8001928 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001914:	2204      	movs	r2, #4
 8001916:	409a      	lsls	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	f043 0204 	orr.w	r2, r3, #4
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	2210      	movs	r2, #16
 800192e:	409a      	lsls	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d043      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d03c      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	2210      	movs	r2, #16
 800194c:	409a      	lsls	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d018      	beq.n	8001992 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	d024      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
 800197e:	e01f      	b.n	80019c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01b      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
 8001990:	e016      	b.n	80019c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d107      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0208 	bic.w	r2, r2, #8
 80019ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	2220      	movs	r2, #32
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 808f 	beq.w	8001af0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8087 	beq.w	8001af0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	2220      	movs	r2, #32
 80019e8:	409a      	lsls	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d136      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0216 	bic.w	r2, r2, #22
 8001a08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695a      	ldr	r2, [r3, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <HAL_DMA_IRQHandler+0x1da>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0208 	bic.w	r2, r2, #8
 8001a38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	223f      	movs	r2, #63	; 0x3f
 8001a40:	409a      	lsls	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d07e      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
        }
        return;
 8001a66:	e079      	b.n	8001b5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01d      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10d      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d031      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
 8001a94:	e02c      	b.n	8001af0 <HAL_DMA_IRQHandler+0x2a0>
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
 8001ab0:	e01e      	b.n	8001af0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0210 	bic.w	r2, r2, #16
 8001ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d032      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d022      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2205      	movs	r2, #5
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d307      	bcc.n	8001b38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f2      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x2cc>
 8001b36:	e000      	b.n	8001b3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
 8001b5a:	e000      	b.n	8001b5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b5c:	bf00      	nop
    }
  }
}
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b40      	cmp	r3, #64	; 0x40
 8001b90:	d108      	bne.n	8001ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ba2:	e007      	b.n	8001bb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3b10      	subs	r3, #16
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <DMA_CalcBaseAndBitshift+0x60>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <DMA_CalcBaseAndBitshift+0x64>)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d908      	bls.n	8001c00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <DMA_CalcBaseAndBitshift+0x68>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	1d1a      	adds	r2, r3, #4
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bfe:	e006      	b.n	8001c0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <DMA_CalcBaseAndBitshift+0x68>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	aaaaaaab 	.word	0xaaaaaaab
 8001c24:	080183e0 	.word	0x080183e0
 8001c28:	fffffc00 	.word	0xfffffc00

08001c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d11f      	bne.n	8001c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d856      	bhi.n	8001cfa <DMA_CheckFifoParam+0xce>
 8001c4c:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <DMA_CheckFifoParam+0x28>)
 8001c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c52:	bf00      	nop
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001c77 	.word	0x08001c77
 8001c5c:	08001c65 	.word	0x08001c65
 8001c60:	08001cfb 	.word	0x08001cfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d046      	beq.n	8001cfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c74:	e043      	b.n	8001cfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c7e:	d140      	bne.n	8001d02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c84:	e03d      	b.n	8001d02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c8e:	d121      	bne.n	8001cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d837      	bhi.n	8001d06 <DMA_CheckFifoParam+0xda>
 8001c96:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <DMA_CheckFifoParam+0x70>)
 8001c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9c:	08001cad 	.word	0x08001cad
 8001ca0:	08001cb3 	.word	0x08001cb3
 8001ca4:	08001cad 	.word	0x08001cad
 8001ca8:	08001cc5 	.word	0x08001cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb0:	e030      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d025      	beq.n	8001d0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc2:	e022      	b.n	8001d0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ccc:	d11f      	bne.n	8001d0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cd2:	e01c      	b.n	8001d0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d903      	bls.n	8001ce2 <DMA_CheckFifoParam+0xb6>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d003      	beq.n	8001ce8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ce0:	e018      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce6:	e015      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00e      	beq.n	8001d12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf8:	e00b      	b.n	8001d12 <DMA_CheckFifoParam+0xe6>
      break;
 8001cfa:	bf00      	nop
 8001cfc:	e00a      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      break;
 8001cfe:	bf00      	nop
 8001d00:	e008      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      break;
 8001d02:	bf00      	nop
 8001d04:	e006      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      break;
 8001d06:	bf00      	nop
 8001d08:	e004      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e002      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d0e:	bf00      	nop
 8001d10:	e000      	b.n	8001d14 <DMA_CheckFifoParam+0xe8>
      break;
 8001d12:	bf00      	nop
    }
  } 
  
  return status; 
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop

08001d24 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001d34:	4ba1      	ldr	r3, [pc, #644]	; (8001fbc <HAL_ETH_Init+0x298>)
 8001d36:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e18e      	b.n	8002068 <HAL_ETH_Init+0x344>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d111      	bne.n	8001d7a <HAL_ETH_Init+0x56>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    ETH_InitCallbacksToDefault(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f001 f964 	bl	800302c <ETH_InitCallbacksToDefault>

    if(heth->MspInitCallback == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <HAL_ETH_Init+0x4e>
    {
      /* Init the low level hardware : GPIO, CLOCK, NVIC. */
      heth->MspInitCallback = HAL_ETH_MspInit;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_ETH_Init+0x29c>)
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
    heth->MspInitCallback(heth);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
    HAL_ETH_MspInit(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_ETH_Init+0x2a0>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a91      	ldr	r2, [pc, #580]	; (8001fc4 <HAL_ETH_Init+0x2a0>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b8f      	ldr	r3, [pc, #572]	; (8001fc4 <HAL_ETH_Init+0x2a0>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d92:	4b8d      	ldr	r3, [pc, #564]	; (8001fc8 <HAL_ETH_Init+0x2a4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a8c      	ldr	r2, [pc, #560]	; (8001fc8 <HAL_ETH_Init+0x2a4>)
 8001d98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d9e:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <HAL_ETH_Init+0x2a4>)
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4988      	ldr	r1, [pc, #544]	; (8001fc8 <HAL_ETH_Init+0x2a4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dc2:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f9d2 	bl	800116c <HAL_GetTick>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001dca:	e011      	b.n	8001df0 <HAL_ETH_Init+0xcc>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001dcc:	f7ff f9ce 	bl	800116c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dda:	d909      	bls.n	8001df0 <HAL_ETH_Init+0xcc>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2203      	movs	r2, #3
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e13b      	b.n	8002068 <HAL_ETH_Init+0x344>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e4      	bne.n	8001dcc <HAL_ETH_Init+0xa8>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f023 031c 	bic.w	r3, r3, #28
 8001e10:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e12:	f002 f91f 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8001e16:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	4a6c      	ldr	r2, [pc, #432]	; (8001fcc <HAL_ETH_Init+0x2a8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d908      	bls.n	8001e32 <HAL_ETH_Init+0x10e>
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	4a6b      	ldr	r2, [pc, #428]	; (8001fd0 <HAL_ETH_Init+0x2ac>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d804      	bhi.n	8001e32 <HAL_ETH_Init+0x10e>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e027      	b.n	8001e82 <HAL_ETH_Init+0x15e>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4a66      	ldr	r2, [pc, #408]	; (8001fd0 <HAL_ETH_Init+0x2ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d908      	bls.n	8001e4c <HAL_ETH_Init+0x128>
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4a5f      	ldr	r2, [pc, #380]	; (8001fbc <HAL_ETH_Init+0x298>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d204      	bcs.n	8001e4c <HAL_ETH_Init+0x128>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f043 030c 	orr.w	r3, r3, #12
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e01a      	b.n	8001e82 <HAL_ETH_Init+0x15e>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	4a5b      	ldr	r2, [pc, #364]	; (8001fbc <HAL_ETH_Init+0x298>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d303      	bcc.n	8001e5c <HAL_ETH_Init+0x138>
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4a5f      	ldr	r2, [pc, #380]	; (8001fd4 <HAL_ETH_Init+0x2b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d911      	bls.n	8001e80 <HAL_ETH_Init+0x15c>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	4a5d      	ldr	r2, [pc, #372]	; (8001fd4 <HAL_ETH_Init+0x2b0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d908      	bls.n	8001e76 <HAL_ETH_Init+0x152>
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	4a5c      	ldr	r2, [pc, #368]	; (8001fd8 <HAL_ETH_Init+0x2b4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d804      	bhi.n	8001e76 <HAL_ETH_Init+0x152>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	e005      	b.n	8001e82 <HAL_ETH_Init+0x15e>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f043 0310 	orr.w	r3, r3, #16
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e000      	b.n	8001e82 <HAL_ETH_Init+0x15e>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e80:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e8e:	2100      	movs	r1, #0
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fc1c 	bl	80026ce <HAL_ETH_WritePHYRegister>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_ETH_Init+0x190>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001ea0:	6939      	ldr	r1, [r7, #16]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fdd2 	bl	8002a4c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0d9      	b.n	8002068 <HAL_ETH_Init+0x344>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001eb4:	20ff      	movs	r0, #255	; 0xff
 8001eb6:	f7ff f965 	bl	8001184 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80a7 	beq.w	8002012 <HAL_ETH_Init+0x2ee>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff f952 	bl	800116c <HAL_GetTick>
 8001ec8:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fb93 	bl	80025fe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001ed8:	f7ff f948 	bl	800116c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d90f      	bls.n	8001f0a <HAL_ETH_Init+0x1e6>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001eee:	6939      	ldr	r1, [r7, #16]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fdab 	bl	8002a4c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0ae      	b.n	8002068 <HAL_ETH_Init+0x344>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0da      	beq.n	8001eca <HAL_ETH_Init+0x1a6>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f18:	2100      	movs	r1, #0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fbd7 	bl	80026ce <HAL_ETH_WritePHYRegister>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_ETH_Init+0x21a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f2a:	6939      	ldr	r1, [r7, #16]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fd8d 	bl	8002a4c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e094      	b.n	8002068 <HAL_ETH_Init+0x344>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f3e:	f7ff f915 	bl	800116c <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fb56 	bl	80025fe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f52:	f7ff f90b 	bl	800116c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d90f      	bls.n	8001f84 <HAL_ETH_Init+0x260>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f68:	6939      	ldr	r1, [r7, #16]
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fd6e 	bl	8002a4c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e071      	b.n	8002068 <HAL_ETH_Init+0x344>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0da      	beq.n	8001f44 <HAL_ETH_Init+0x220>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	461a      	mov	r2, r3
 8001f94:	2110      	movs	r1, #16
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fb31 	bl	80025fe <HAL_ETH_ReadPHYRegister>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01c      	beq.n	8001fdc <HAL_ETH_Init+0x2b8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fa6:	6939      	ldr	r1, [r7, #16]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fd4f 	bl	8002a4c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e056      	b.n	8002068 <HAL_ETH_Init+0x344>
 8001fba:	bf00      	nop
 8001fbc:	03938700 	.word	0x03938700
 8001fc0:	08007fdd 	.word	0x08007fdd
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	01312cff 	.word	0x01312cff
 8001fd0:	02160ebf 	.word	0x02160ebf
 8001fd4:	05f5e0ff 	.word	0x05f5e0ff
 8001fd8:	08f0d17f 	.word	0x08f0d17f
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_ETH_Init+0x2cc>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	e002      	b.n	8001ff6 <HAL_ETH_Init+0x2d2>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_ETH_Init+0x2e4>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	e026      	b.n	8002056 <HAL_ETH_Init+0x332>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e021      	b.n	8002056 <HAL_ETH_Init+0x332>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002022:	4313      	orrs	r3, r2
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	2100      	movs	r1, #0
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fb4f 	bl	80026ce <HAL_ETH_WritePHYRegister>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_ETH_Init+0x32a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800203a:	6939      	ldr	r1, [r7, #16]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fd05 	bl	8002a4c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00c      	b.n	8002068 <HAL_ETH_Init+0x344>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800204e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002052:	f7ff f897 	bl	8001184 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002056:	6939      	ldr	r1, [r7, #16]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fcf7 	bl	8002a4c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_ETH_DMATxDescListInit+0x20>
 800208c:	2302      	movs	r3, #2
 800208e:	e051      	b.n	8002134 <HAL_ETH_DMATxDescListInit+0xc4>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e030      	b.n	800210e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	015b      	lsls	r3, r3, #5
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	4413      	add	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020bc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d208      	bcs.n	8002102 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	015b      	lsls	r3, r3, #5
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	461a      	mov	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	e002      	b.n	8002108 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3ca      	bcc.n	80020ac <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002120:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_ETH_DMARxDescListInit+0x20>
 800215c:	2302      	movs	r3, #2
 800215e:	e055      	b.n	800220c <HAL_ETH_DMARxDescListInit+0xcc>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e034      	b.n	80021e6 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	4413      	add	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800218c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002194:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d208      	bcs.n	80021da <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	015b      	lsls	r3, r3, #5
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4413      	add	r3, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	e002      	b.n	80021e0 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3c6      	bcc.n	800217c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021f8:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_ETH_TransmitFrame+0x24>
 8002238:	2302      	movs	r3, #2
 800223a:	e0cc      	b.n	80023d6 <HAL_ETH_TransmitFrame+0x1be>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002262:	2301      	movs	r3, #1
 8002264:	e0b7      	b.n	80023d6 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	da09      	bge.n	8002284 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2212      	movs	r2, #18
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0a8      	b.n	80023d6 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800228a:	4293      	cmp	r3, r2
 800228c:	d915      	bls.n	80022ba <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_ETH_TransmitFrame+0x1cc>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0a9b      	lsrs	r3, r3, #10
 8002298:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_ETH_TransmitFrame+0x1cc>)
 800229e:	fba3 1302 	umull	r1, r3, r3, r2
 80022a2:	0a9b      	lsrs	r3, r3, #10
 80022a4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e001      	b.n	80022be <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11c      	bne.n	80022fe <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80022d2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022de:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022ee:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	e04b      	b.n	8002396 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e044      	b.n	800238e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002312:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002328:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002332:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3b01      	subs	r3, #1
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d116      	bne.n	800236c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800234c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_ETH_TransmitFrame+0x1d0>)
 8002352:	fb03 f202 	mul.w	r2, r3, r2
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	4413      	add	r3, r2
 800235a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800235e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800236a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800237a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	3301      	adds	r3, #1
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3b6      	bcc.n	8002304 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b0:	461a      	mov	r2, r3
 80023b2:	2304      	movs	r3, #4
 80023b4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023be:	461a      	mov	r2, r3
 80023c0:	2300      	movs	r3, #0
 80023c2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	ac02b00b 	.word	0xac02b00b
 80023e8:	fffffa0c 	.word	0xfffffa0c

080023ec <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_ETH_GetReceivedFrame+0x1a>
 8002402:	2302      	movs	r3, #2
 8002404:	e070      	b.n	80024e8 <HAL_ETH_GetReceivedFrame+0xfc>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db5a      	blt.n	80024d6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d030      	beq.n	8002490 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	2b01      	cmp	r3, #1
 800243e:	d103      	bne.n	8002448 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800245c:	3b04      	subs	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e02b      	b.n	80024e8 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d010      	beq.n	80024c0 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	461a      	mov	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
 80024be:	e00a      	b.n	80024d6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d113      	bne.n	8002536 <HAL_ETH_IRQHandler+0x42>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	461a      	mov	r2, r3
 8002520:	2340      	movs	r3, #64	; 0x40
 8002522:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002534:	e01b      	b.n	800256e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d112      	bne.n	800256e <HAL_ETH_IRQHandler+0x7a>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002558:	461a      	mov	r2, r3
 800255a:	2301      	movs	r3, #1
 800255c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800257c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800258c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002590:	d113      	bne.n	80025ba <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a8:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	460b      	mov	r3, r1
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b82      	cmp	r3, #130	; 0x82
 800261e:	d101      	bne.n	8002624 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
 8002622:	e050      	b.n	80026c6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2282      	movs	r2, #130	; 0x82
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 031c 	and.w	r3, r3, #28
 800263a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8a1b      	ldrh	r3, [r3, #16]
 8002640:	02db      	lsls	r3, r3, #11
 8002642:	b29b      	uxth	r3, r3
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0302 	bic.w	r3, r3, #2
 800265e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002670:	f7fe fd7c 	bl	800116c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002676:	e015      	b.n	80026a4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002678:	f7fe fd78 	bl	800116c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002686:	d309      	bcc.n	800269c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e014      	b.n	80026c6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1e4      	bne.n	8002678 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	460b      	mov	r3, r1
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b42      	cmp	r3, #66	; 0x42
 80026ee:	d101      	bne.n	80026f4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
 80026f2:	e04e      	b.n	8002792 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2242      	movs	r2, #66	; 0x42
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 031c 	and.w	r3, r3, #28
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8a1b      	ldrh	r3, [r3, #16]
 8002710:	02db      	lsls	r3, r3, #11
 8002712:	b29b      	uxth	r3, r3
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800274a:	f7fe fd0f 	bl	800116c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002750:	e015      	b.n	800277e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002752:	f7fe fd0b 	bl	800116c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d309      	bcc.n	8002776 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e00d      	b.n	8002792 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e4      	bne.n	8002752 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_ETH_Start+0x16>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e01f      	b.n	80027f0 <HAL_ETH_Start+0x56>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fb41 	bl	8002e48 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fb78 	bl	8002ebc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fc07 	bl	8002fe0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fbac 	bl	8002f30 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fbd5 	bl	8002f88 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_ETH_Stop+0x16>
 800280a:	2302      	movs	r3, #2
 800280c:	e01f      	b.n	800284e <HAL_ETH_Stop+0x56>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb9c 	bl	8002f5c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fbc5 	bl	8002fb4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fb63 	bl	8002ef6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fbd5 	bl	8002fe0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fb23 	bl	8002e82 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_ETH_ConfigMAC+0x1c>
 8002870:	2302      	movs	r3, #2
 8002872:	e0e4      	b.n	8002a3e <HAL_ETH_ConfigMAC+0x1e6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80b1 	beq.w	80029ee <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <HAL_ETH_ConfigMAC+0x1f0>)
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80028a4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80028aa:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80028b0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80028b6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80028bc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80028c2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80028c8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80028ce:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80028d4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80028da:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80028e0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80028e6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028fe:	2001      	movs	r0, #1
 8002900:	f7fe fc40 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002914:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800291a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002920:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002926:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800292c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002932:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800293e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002940:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800294a:	2001      	movs	r0, #1
 800294c:	f7fe fc1a 	bl	8001184 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002960:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800296a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	f64f 7341 	movw	r3, #65345	; 0xff41
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002988:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800298e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002994:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800299a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80029a0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b8:	2001      	movs	r0, #1
 80029ba:	f7fe fbe3 	bl	8001184 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fe fbd0 	bl	8001184 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	61da      	str	r2, [r3, #28]
 80029ec:	e01e      	b.n	8002a2c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80029fc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f7fe fbb0 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	ff20810f 	.word	0xff20810f

08002a4c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0b0      	sub	sp, #192	; 0xc0
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a68:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a70:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a96:	663b      	str	r3, [r7, #96]	; 0x60
 8002a98:	e001      	b.n	8002a9e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002ab8:	2340      	movs	r3, #64	; 0x40
 8002aba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002b20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b24:	4ba9      	ldr	r3, [pc, #676]	; (8002dcc <ETH_MACDMAConfig+0x380>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b30:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002b34:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002b38:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b3e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002b42:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002b46:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002b4c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002b50:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002b54:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002b58:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002b5c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002b60:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b74:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7fe faff 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b8e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b94:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002b98:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002b9e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002ba4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002baa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002bb0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002bb4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002bbc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bbe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fe fada 	bl	8001184 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bd8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002be2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002bec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002bf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bfc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c00:	4013      	ands	r3, r2
 8002c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c0a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c10:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c16:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c1c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c22:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c28:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c3c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7fe fa9b 	bl	8001184 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c56:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c58:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002c5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f7fe fa86 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c80:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002c90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c94:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002cdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ce0:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <ETH_MACDMAConfig+0x384>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002ce8:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002cea:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002cec:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002cee:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002cf0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002cf2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002cf4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002cf6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002cf8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002cfa:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002cfc:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d00:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d04:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d08:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d22:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe fa26 	bl	8001184 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d40:	461a      	mov	r2, r3
 8002d42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d46:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d4c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002d50:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d54:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002d58:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002d5e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d62:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d70:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fe f9ff 	bl	8001184 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d94:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d10b      	bne.n	8002db6 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da6:	69d9      	ldr	r1, [r3, #28]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <ETH_MACDMAConfig+0x388>)
 8002dae:	430b      	orrs	r3, r1
 8002db0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002db4:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f80a 	bl	8002dd8 <ETH_MACAddressConfig>
}
 8002dc4:	bf00      	nop
 8002dc6:	37c0      	adds	r7, #192	; 0xc0
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	ff20810f 	.word	0xff20810f
 8002dd0:	f8de3f23 	.word	0xf8de3f23
 8002dd4:	00010040 	.word	0x00010040

08002dd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3305      	adds	r3, #5
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	3204      	adds	r2, #4
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <ETH_MACAddressConfig+0x68>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3303      	adds	r3, #3
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	061a      	lsls	r2, r3, #24
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3301      	adds	r3, #1
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <ETH_MACAddressConfig+0x6c>)
 8002e2a:	4413      	add	r3, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6013      	str	r3, [r2, #0]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40028040 	.word	0x40028040
 8002e44:	40028044 	.word	0x40028044

08002e48 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f7fe f989 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	601a      	str	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0208 	bic.w	r2, r2, #8
 8002e9c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f7fe f96c 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0204 	orr.w	r2, r2, #4
 8002ed6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7fe f94f 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	601a      	str	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0204 	bic.w	r2, r2, #4
 8002f10:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7fe f932 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f4e:	6193      	str	r3, [r2, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f7a:	6193      	str	r3, [r2, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fa6:	6193      	str	r3, [r2, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	f023 0302 	bic.w	r3, r3, #2
 8002fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fd2:	6193      	str	r3, [r2, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003002:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003010:	2001      	movs	r0, #1
 8003012:	f7fe f8b7 	bl	8001184 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003020:	6193      	str	r3, [r2, #24]
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <ETH_InitCallbacksToDefault>:

#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
static void ETH_InitCallbacksToDefault(ETH_HandleTypeDef *heth)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Init the ETH Callback settings */
  heth->TxCpltCallback       = HAL_ETH_TxCpltCallback; /* Legacy weak TxCpltCallback   */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <ETH_InitCallbacksToDefault+0x28>)
 8003038:	649a      	str	r2, [r3, #72]	; 0x48
  heth->RxCpltCallback       = HAL_ETH_RxCpltCallback; /* Legacy weak RxCpltCallback   */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <ETH_InitCallbacksToDefault+0x2c>)
 800303e:	64da      	str	r2, [r3, #76]	; 0x4c
  heth->DMAErrorCallback     = HAL_ETH_ErrorCallback;  /* Legacy weak DMAErrorCallback */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a06      	ldr	r2, [pc, #24]	; (800305c <ETH_InitCallbacksToDefault+0x30>)
 8003044:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	080025c3 	.word	0x080025c3
 8003058:	080025d7 	.word	0x080025d7
 800305c:	080025eb 	.word	0x080025eb

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e175      	b.n	800336c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003080:	2201      	movs	r2, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	f040 8164 	bne.w	8003366 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d005      	beq.n	80030b6 <HAL_GPIO_Init+0x56>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d130      	bne.n	8003118 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ec:	2201      	movs	r2, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 0201 	and.w	r2, r3, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b03      	cmp	r3, #3
 8003122:	d017      	beq.n	8003154 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d123      	bne.n	80031a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	08da      	lsrs	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3208      	adds	r2, #8
 8003168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	08da      	lsrs	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3208      	adds	r2, #8
 80031a2:	69b9      	ldr	r1, [r7, #24]
 80031a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0203 	and.w	r2, r3, #3
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80be 	beq.w	8003366 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_GPIO_Init+0x324>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_GPIO_Init+0x324>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_GPIO_Init+0x324>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003202:	4a61      	ldr	r2, [pc, #388]	; (8003388 <HAL_GPIO_Init+0x328>)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	3302      	adds	r3, #2
 800320a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	220f      	movs	r2, #15
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_GPIO_Init+0x32c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d037      	beq.n	800329e <HAL_GPIO_Init+0x23e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a57      	ldr	r2, [pc, #348]	; (8003390 <HAL_GPIO_Init+0x330>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d031      	beq.n	800329a <HAL_GPIO_Init+0x23a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a56      	ldr	r2, [pc, #344]	; (8003394 <HAL_GPIO_Init+0x334>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02b      	beq.n	8003296 <HAL_GPIO_Init+0x236>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a55      	ldr	r2, [pc, #340]	; (8003398 <HAL_GPIO_Init+0x338>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d025      	beq.n	8003292 <HAL_GPIO_Init+0x232>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_GPIO_Init+0x33c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <HAL_GPIO_Init+0x22e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a53      	ldr	r2, [pc, #332]	; (80033a0 <HAL_GPIO_Init+0x340>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d019      	beq.n	800328a <HAL_GPIO_Init+0x22a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <HAL_GPIO_Init+0x344>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0x226>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a51      	ldr	r2, [pc, #324]	; (80033a8 <HAL_GPIO_Init+0x348>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00d      	beq.n	8003282 <HAL_GPIO_Init+0x222>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a50      	ldr	r2, [pc, #320]	; (80033ac <HAL_GPIO_Init+0x34c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <HAL_GPIO_Init+0x21e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4f      	ldr	r2, [pc, #316]	; (80033b0 <HAL_GPIO_Init+0x350>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_GPIO_Init+0x21a>
 8003276:	2309      	movs	r3, #9
 8003278:	e012      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800327a:	230a      	movs	r3, #10
 800327c:	e010      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800327e:	2308      	movs	r3, #8
 8003280:	e00e      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003282:	2307      	movs	r3, #7
 8003284:	e00c      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003286:	2306      	movs	r3, #6
 8003288:	e00a      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800328a:	2305      	movs	r3, #5
 800328c:	e008      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800328e:	2304      	movs	r3, #4
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003292:	2303      	movs	r3, #3
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800329e:	2300      	movs	r3, #0
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	f002 0203 	and.w	r2, r2, #3
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032b0:	4935      	ldr	r1, [pc, #212]	; (8003388 <HAL_GPIO_Init+0x328>)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_GPIO_Init+0x354>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <HAL_GPIO_Init+0x354>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_GPIO_Init+0x354>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <HAL_GPIO_Init+0x354>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003312:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <HAL_GPIO_Init+0x354>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_GPIO_Init+0x354>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_GPIO_Init+0x354>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <HAL_GPIO_Init+0x354>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3301      	adds	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	f67f ae86 	bls.w	8003080 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	40013800 	.word	0x40013800
 800338c:	40020000 	.word	0x40020000
 8003390:	40020400 	.word	0x40020400
 8003394:	40020800 	.word	0x40020800
 8003398:	40020c00 	.word	0x40020c00
 800339c:	40021000 	.word	0x40021000
 80033a0:	40021400 	.word	0x40021400
 80033a4:	40021800 	.word	0x40021800
 80033a8:	40021c00 	.word	0x40021c00
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40022400 	.word	0x40022400
 80033b4:	40013c00 	.word	0x40013c00

080033b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e0d9      	b.n	8003588 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033d4:	2201      	movs	r2, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f040 80c9 	bne.w	8003582 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80033f0:	4a6b      	ldr	r2, [pc, #428]	; (80035a0 <HAL_GPIO_DeInit+0x1e8>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a63      	ldr	r2, [pc, #396]	; (80035a4 <HAL_GPIO_DeInit+0x1ec>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d037      	beq.n	800348a <HAL_GPIO_DeInit+0xd2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a62      	ldr	r2, [pc, #392]	; (80035a8 <HAL_GPIO_DeInit+0x1f0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_GPIO_DeInit+0xce>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a61      	ldr	r2, [pc, #388]	; (80035ac <HAL_GPIO_DeInit+0x1f4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02b      	beq.n	8003482 <HAL_GPIO_DeInit+0xca>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a60      	ldr	r2, [pc, #384]	; (80035b0 <HAL_GPIO_DeInit+0x1f8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d025      	beq.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a5f      	ldr	r2, [pc, #380]	; (80035b4 <HAL_GPIO_DeInit+0x1fc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <HAL_GPIO_DeInit+0xc2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a5e      	ldr	r2, [pc, #376]	; (80035b8 <HAL_GPIO_DeInit+0x200>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d019      	beq.n	8003476 <HAL_GPIO_DeInit+0xbe>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_GPIO_DeInit+0x204>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_DeInit+0xba>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a5c      	ldr	r2, [pc, #368]	; (80035c0 <HAL_GPIO_DeInit+0x208>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_GPIO_DeInit+0xb6>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a5b      	ldr	r2, [pc, #364]	; (80035c4 <HAL_GPIO_DeInit+0x20c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_DeInit+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a5a      	ldr	r2, [pc, #360]	; (80035c8 <HAL_GPIO_DeInit+0x210>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_GPIO_DeInit+0xae>
 8003462:	2309      	movs	r3, #9
 8003464:	e012      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 8003466:	230a      	movs	r3, #10
 8003468:	e010      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 800346a:	2308      	movs	r3, #8
 800346c:	e00e      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 800346e:	2307      	movs	r3, #7
 8003470:	e00c      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 8003472:	2306      	movs	r3, #6
 8003474:	e00a      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 8003476:	2305      	movs	r3, #5
 8003478:	e008      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 800347a:	2304      	movs	r3, #4
 800347c:	e006      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 800347e:	2303      	movs	r3, #3
 8003480:	e004      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 8003482:	2302      	movs	r3, #2
 8003484:	e002      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_GPIO_DeInit+0xd4>
 800348a:	2300      	movs	r3, #0
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	f002 0203 	and.w	r2, r2, #3
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	4093      	lsls	r3, r2
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	429a      	cmp	r2, r3
 800349a:	d132      	bne.n	8003502 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800349c:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	4949      	ldr	r1, [pc, #292]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034aa:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	4946      	ldr	r1, [pc, #280]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034b8:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43db      	mvns	r3, r3
 80034c0:	4942      	ldr	r1, [pc, #264]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	493f      	ldr	r1, [pc, #252]	; (80035cc <HAL_GPIO_DeInit+0x214>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80034e4:	4a2e      	ldr	r2, [pc, #184]	; (80035a0 <HAL_GPIO_DeInit+0x1e8>)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	482a      	ldr	r0, [pc, #168]	; (80035a0 <HAL_GPIO_DeInit+0x1e8>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	400a      	ands	r2, r1
 80034fc:	3302      	adds	r3, #2
 80034fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2103      	movs	r1, #3
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	220f      	movs	r2, #15
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	08d2      	lsrs	r2, r2, #3
 8003538:	4019      	ands	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2103      	movs	r1, #3
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	2101      	movs	r1, #1
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2103      	movs	r1, #3
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	401a      	ands	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3301      	adds	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	f67f af22 	bls.w	80033d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40021400 	.word	0x40021400
 80035bc:	40021800 	.word	0x40021800
 80035c0:	40021c00 	.word	0x40021c00
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40022400 	.word	0x40022400
 80035cc:	40013c00 	.word	0x40013c00

080035d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035ec:	e003      	b.n	80035f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035ee:	887b      	ldrh	r3, [r7, #2]
 80035f0:	041a      	lsls	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	619a      	str	r2, [r3, #24]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003614:	887a      	ldrh	r2, [r7, #2]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4013      	ands	r3, r2
 800361a:	041a      	lsls	r2, r3, #16
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43d9      	mvns	r1, r3
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	400b      	ands	r3, r1
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d006      	beq.n	800365c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800364e:	4a05      	ldr	r2, [pc, #20]	; (8003664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	4618      	mov	r0, r3
 8003658:	f010 fc30 	bl	8013ebc <HAL_GPIO_EXTI_Callback>
  }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40007000 	.word	0x40007000

08003688 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a22      	ldr	r2, [pc, #136]	; (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b6:	f7fd fd59 	bl	800116c <HAL_GetTick>
 80036ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036bc:	e009      	b.n	80036d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036be:	f7fd fd55 	bl	800116c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036cc:	d901      	bls.n	80036d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e022      	b.n	8003718 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d1ee      	bne.n	80036be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ec:	f7fd fd3e 	bl	800116c <HAL_GetTick>
 80036f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036f2:	e009      	b.n	8003708 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036f4:	f7fd fd3a 	bl	800116c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003702:	d901      	bls.n	8003708 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e007      	b.n	8003718 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003714:	d1ee      	bne.n	80036f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000

08003728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e291      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8087 	beq.w	800385a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374c:	4b96      	ldr	r3, [pc, #600]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b04      	cmp	r3, #4
 8003756:	d00c      	beq.n	8003772 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003758:	4b93      	ldr	r3, [pc, #588]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d112      	bne.n	800378a <HAL_RCC_OscConfig+0x62>
 8003764:	4b90      	ldr	r3, [pc, #576]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003770:	d10b      	bne.n	800378a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003772:	4b8d      	ldr	r3, [pc, #564]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d06c      	beq.n	8003858 <HAL_RCC_OscConfig+0x130>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d168      	bne.n	8003858 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e26b      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x7a>
 8003794:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e02e      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x9c>
 80037aa:	4b7f      	ldr	r3, [pc, #508]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7e      	ldr	r2, [pc, #504]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b7c      	ldr	r3, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a7b      	ldr	r2, [pc, #492]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e01d      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a72      	ldr	r2, [pc, #456]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037e8:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6b      	ldr	r2, [pc, #428]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd fcb0 	bl	800116c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fd fcac 	bl	800116c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e21f      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd fc9c 	bl	800116c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fd fc98 	bl	800116c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e20b      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x110>
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d069      	beq.n	800393a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003866:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d11c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x190>
 800387e:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d116      	bne.n	80038b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_RCC_OscConfig+0x17a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e1df      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	493d      	ldr	r1, [pc, #244]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	e040      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd fc4e 	bl	800116c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d4:	f7fd fc4a 	bl	800116c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1bd      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4929      	ldr	r1, [pc, #164]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
 8003906:	e018      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fc2a 	bl	800116c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391c:	f7fd fc26 	bl	800116c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e199      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d038      	beq.n	80039b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d019      	beq.n	8003982 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fd fc07 	bl	800116c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003962:	f7fd fc03 	bl	800116c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e176      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x23a>
 8003980:	e01a      	b.n	80039b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd fbed 	bl	800116c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fd fbe9 	bl	800116c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d903      	bls.n	80039ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e15c      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
 80039a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b91      	ldr	r3, [pc, #580]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ee      	bne.n	8003996 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a4 	beq.w	8003b0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c6:	4b8b      	ldr	r3, [pc, #556]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a87      	ldr	r2, [pc, #540]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ee:	4b82      	ldr	r3, [pc, #520]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039fa:	4b7f      	ldr	r3, [pc, #508]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a7e      	ldr	r2, [pc, #504]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7fd fbb1 	bl	800116c <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fd fbad 	bl	800116c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	; 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e120      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a20:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x31a>
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a6e      	ldr	r2, [pc, #440]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	e02d      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x33c>
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a69      	ldr	r2, [pc, #420]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
 8003a56:	4b67      	ldr	r3, [pc, #412]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a66      	ldr	r2, [pc, #408]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
 8003a62:	e01c      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCC_OscConfig+0x35e>
 8003a6c:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a60      	ldr	r2, [pc, #384]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a72:	f043 0304 	orr.w	r3, r3, #4
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	4b5e      	ldr	r3, [pc, #376]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	e00b      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a5a      	ldr	r2, [pc, #360]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a57      	ldr	r2, [pc, #348]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fd fb61 	bl	800116c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd fb5d 	bl	800116c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0ce      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	4b4b      	ldr	r3, [pc, #300]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ee      	beq.n	8003aae <HAL_RCC_OscConfig+0x386>
 8003ad0:	e014      	b.n	8003afc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fd fb4b 	bl	800116c <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fd fb47 	bl	800116c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0b8      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af0:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ee      	bne.n	8003ada <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a3b      	ldr	r2, [pc, #236]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80a4 	beq.w	8003c60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d06b      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d149      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2c:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a30      	ldr	r2, [pc, #192]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd fb18 	bl	800116c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd fb14 	bl	800116c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e087      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	4313      	orrs	r3, r2
 8003b84:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fae8 	bl	800116c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fae4 	bl	800116c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e057      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x478>
 8003bbe:	e04f      	b.n	8003c60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fd face 	bl	800116c <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd faca 	bl	800116c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e03d      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_OscConfig+0x4cc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4ac>
 8003bf2:	e035      	b.n	8003c60 <HAL_RCC_OscConfig+0x538>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x544>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d028      	beq.n	8003c5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d121      	bne.n	8003c5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d111      	bne.n	8003c5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d0      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 020f 	bic.w	r2, r3, #15
 8003c9e:	4965      	ldr	r1, [pc, #404]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d040      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d115      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e073      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06b      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d52:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4936      	ldr	r1, [pc, #216]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d64:	f7fd fa02 	bl	800116c <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6c:	f7fd f9fe 	bl	800116c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e053      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 020c 	and.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d1eb      	bne.n	8003d6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d210      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 020f 	bic.w	r2, r3, #15
 8003daa:	4922      	ldr	r1, [pc, #136]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x1cc>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1d0>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1d4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd f95e 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	080183c8 	.word	0x080183c8
 8003e40:	20000008 	.word	0x20000008
 8003e44:	2000000c 	.word	0x2000000c

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b094      	sub	sp, #80	; 0x50
 8003e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
 8003e54:	2300      	movs	r3, #0
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e58:	2300      	movs	r3, #0
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e60:	4b79      	ldr	r3, [pc, #484]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00d      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x40>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	f200 80e1 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x34>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7a:	e0db      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b73      	ldr	r3, [pc, #460]	; (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e80:	e0db      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e82:	4b73      	ldr	r3, [pc, #460]	; (8004050 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e86:	e0d8      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e88:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e92:	4b6d      	ldr	r3, [pc, #436]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	f04f 0000 	mov.w	r0, #0
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	0159      	lsls	r1, r3, #5
 8003ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ecc:	0150      	lsls	r0, r2, #5
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	1a51      	subs	r1, r2, r1
 8003ed6:	6139      	str	r1, [r7, #16]
 8003ed8:	4629      	mov	r1, r5
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eec:	4659      	mov	r1, fp
 8003eee:	018b      	lsls	r3, r1, #6
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	018a      	lsls	r2, r1, #6
 8003efa:	4651      	mov	r1, sl
 8003efc:	ebb2 0801 	subs.w	r8, r2, r1
 8003f00:	4659      	mov	r1, fp
 8003f02:	eb63 0901 	sbc.w	r9, r3, r1
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1a:	4690      	mov	r8, r2
 8003f1c:	4699      	mov	r9, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	eb18 0303 	adds.w	r3, r8, r3
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	462b      	mov	r3, r5
 8003f28:	eb49 0303 	adc.w	r3, r9, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	024b      	lsls	r3, r1, #9
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f44:	4621      	mov	r1, r4
 8003f46:	024a      	lsls	r2, r1, #9
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4e:	2200      	movs	r2, #0
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f58:	f7fc f9b2 	bl	80002c0 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f64:	e058      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f66:	4b38      	ldr	r3, [pc, #224]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	4611      	mov	r1, r2
 8003f72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	0159      	lsls	r1, r3, #5
 8003f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f92:	0150      	lsls	r0, r2, #5
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4641      	mov	r1, r8
 8003f9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	00eb      	lsls	r3, r5, #3
 8003fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fce:	00e2      	lsls	r2, r4, #3
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	461d      	mov	r5, r3
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	18e3      	adds	r3, r4, r3
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	464b      	mov	r3, r9
 8003fdc:	eb45 0303 	adc.w	r3, r5, r3
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	028b      	lsls	r3, r1, #10
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	028a      	lsls	r2, r1, #10
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	61fa      	str	r2, [r7, #28]
 8004008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400c:	f7fc f958 	bl	80002c0 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004028:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800402a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004032:	e002      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800403c:	4618      	mov	r0, r3
 800403e:	3750      	adds	r7, #80	; 0x50
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	00f42400 	.word	0x00f42400
 8004050:	007a1200 	.word	0x007a1200

08004054 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_RCC_GetHCLKFreq+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000008 	.word	0x20000008

0800406c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004070:	f7ff fff0 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0a9b      	lsrs	r3, r3, #10
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	080183d8 	.word	0x080183d8

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004098:	f7ff ffdc 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0b5b      	lsrs	r3, r3, #13
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	080183d8 	.word	0x080183d8

080040bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040e4:	4b69      	ldr	r3, [pc, #420]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a68      	ldr	r2, [pc, #416]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040ee:	6093      	str	r3, [r2, #8]
 80040f0:	4b66      	ldr	r3, [pc, #408]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	4964      	ldr	r1, [pc, #400]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004106:	2301      	movs	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d017      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004116:	4b5d      	ldr	r3, [pc, #372]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	4959      	ldr	r1, [pc, #356]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004134:	d101      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d017      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004152:	4b4e      	ldr	r3, [pc, #312]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004158:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	494a      	ldr	r1, [pc, #296]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004170:	d101      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004172:	2301      	movs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 808b 	beq.w	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a0:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	4a39      	ldr	r2, [pc, #228]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6413      	str	r3, [r2, #64]	; 0x40
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041b8:	4b35      	ldr	r3, [pc, #212]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a34      	ldr	r2, [pc, #208]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c4:	f7fc ffd2 	bl	800116c <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fc ffce 	bl	800116c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	; 0x64
 80041d8:	d901      	bls.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e357      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041de:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d035      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d02e      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004208:	4b20      	ldr	r3, [pc, #128]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004212:	4b1e      	ldr	r3, [pc, #120]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a1d      	ldr	r2, [pc, #116]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004228:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800422a:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004230:	4b16      	ldr	r3, [pc, #88]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	d114      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fc ff96 	bl	800116c <HAL_GetTick>
 8004240:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004242:	e00a      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fc ff92 	bl	800116c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e319      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0ee      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004272:	d111      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004282:	400b      	ands	r3, r1
 8004284:	4901      	ldr	r1, [pc, #4]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
 800428a:	e00b      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800428c:	40023800 	.word	0x40023800
 8004290:	40007000 	.word	0x40007000
 8004294:	0ffffcff 	.word	0x0ffffcff
 8004298:	4baa      	ldr	r3, [pc, #680]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4aa9      	ldr	r2, [pc, #676]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042a2:	6093      	str	r3, [r2, #8]
 80042a4:	4ba7      	ldr	r3, [pc, #668]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b0:	49a4      	ldr	r1, [pc, #656]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042c2:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c8:	4a9e      	ldr	r2, [pc, #632]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042d2:	4b9c      	ldr	r3, [pc, #624]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	4999      	ldr	r1, [pc, #612]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042f0:	4b94      	ldr	r3, [pc, #592]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fe:	4991      	ldr	r1, [pc, #580]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004312:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004320:	4988      	ldr	r1, [pc, #544]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004334:	4b83      	ldr	r3, [pc, #524]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004342:	4980      	ldr	r1, [pc, #512]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004356:	4b7b      	ldr	r3, [pc, #492]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4977      	ldr	r1, [pc, #476]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004378:	4b72      	ldr	r3, [pc, #456]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	f023 0203 	bic.w	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	496f      	ldr	r1, [pc, #444]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800439a:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f023 020c 	bic.w	r2, r3, #12
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	4966      	ldr	r1, [pc, #408]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043bc:	4b61      	ldr	r3, [pc, #388]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	495e      	ldr	r1, [pc, #376]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043de:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	4955      	ldr	r1, [pc, #340]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	494d      	ldr	r1, [pc, #308]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004422:	4b48      	ldr	r3, [pc, #288]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4944      	ldr	r1, [pc, #272]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004444:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	493c      	ldr	r1, [pc, #240]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	4933      	ldr	r1, [pc, #204]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004488:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004496:	492b      	ldr	r1, [pc, #172]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d011      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044aa:	4b26      	ldr	r3, [pc, #152]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b8:	4922      	ldr	r1, [pc, #136]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c8:	d101      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	4912      	ldr	r1, [pc, #72]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451c:	4909      	ldr	r1, [pc, #36]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d006      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80d9 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a01      	ldr	r2, [pc, #4]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004542:	e001      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004544:	40023800 	.word	0x40023800
 8004548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454a:	f7fc fe0f 	bl	800116c <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004552:	f7fc fe0b 	bl	800116c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	; 0x64
 800455e:	d901      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e194      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004564:	4b6c      	ldr	r3, [pc, #432]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d021      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	d11d      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004584:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004592:	4b61      	ldr	r3, [pc, #388]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004598:	0e1b      	lsrs	r3, r3, #24
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	019a      	lsls	r2, r3, #6
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	431a      	orrs	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	071b      	lsls	r3, r3, #28
 80045b8:	4957      	ldr	r1, [pc, #348]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02e      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ea:	d129      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045ec:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f2:	0c1b      	lsrs	r3, r3, #16
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045fa:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004600:	0f1b      	lsrs	r3, r3, #28
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	019a      	lsls	r2, r3, #6
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	431a      	orrs	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	071b      	lsls	r3, r3, #28
 8004620:	493d      	ldr	r1, [pc, #244]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462e:	f023 021f 	bic.w	r2, r3, #31
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	3b01      	subs	r3, #1
 8004638:	4937      	ldr	r1, [pc, #220]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01d      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800464c:	4b32      	ldr	r3, [pc, #200]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004652:	0e1b      	lsrs	r3, r3, #24
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800465a:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004660:	0f1b      	lsrs	r3, r3, #28
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	019a      	lsls	r2, r3, #6
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	431a      	orrs	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	061b      	lsls	r3, r3, #24
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	071b      	lsls	r3, r3, #28
 8004680:	4925      	ldr	r1, [pc, #148]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d011      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	019a      	lsls	r2, r3, #6
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	071b      	lsls	r3, r3, #28
 80046b0:	4919      	ldr	r1, [pc, #100]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046b8:	4b17      	ldr	r3, [pc, #92]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c4:	f7fc fd52 	bl	800116c <HAL_GetTick>
 80046c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046cc:	f7fc fd4e 	bl	800116c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0d7      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046de:	4b0e      	ldr	r3, [pc, #56]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 80cd 	bne.w	800488c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a08      	ldr	r2, [pc, #32]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fe:	f7fc fd35 	bl	800116c <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004706:	f7fc fd31 	bl	800116c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b64      	cmp	r3, #100	; 0x64
 8004712:	d903      	bls.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0ba      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004718:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800471c:	4b5e      	ldr	r3, [pc, #376]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004728:	d0ed      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004746:	2b00      	cmp	r3, #0
 8004748:	d02e      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d12a      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004752:	4b51      	ldr	r3, [pc, #324]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004760:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	0f1b      	lsrs	r3, r3, #28
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	019a      	lsls	r2, r3, #6
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	071b      	lsls	r3, r3, #28
 8004786:	4944      	ldr	r1, [pc, #272]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800478e:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004794:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	3b01      	subs	r3, #1
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	493d      	ldr	r1, [pc, #244]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d022      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047bc:	d11d      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	0e1b      	lsrs	r3, r3, #24
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047cc:	4b32      	ldr	r3, [pc, #200]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	0f1b      	lsrs	r3, r3, #28
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	019a      	lsls	r2, r3, #6
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	431a      	orrs	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	061b      	lsls	r3, r3, #24
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	071b      	lsls	r3, r3, #28
 80047f2:	4929      	ldr	r1, [pc, #164]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d028      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004806:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	0e1b      	lsrs	r3, r3, #24
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004814:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	019a      	lsls	r2, r3, #6
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	431a      	orrs	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	061b      	lsls	r3, r3, #24
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	071b      	lsls	r3, r3, #28
 800483a:	4917      	ldr	r1, [pc, #92]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4911      	ldr	r1, [pc, #68]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004864:	f7fc fc82 	bl	800116c <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800486c:	f7fc fc7e 	bl	800116c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e007      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488a:	d1ef      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800

0800489c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e049      	b.n	8004942 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fa34 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f000 f986 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b02      	cmp	r3, #2
 800495e:	d122      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d11b      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0202 	mvn.w	r2, #2
 8004976:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f90f 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004992:	e005      	b.n	80049a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f901 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f912 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d122      	bne.n	80049fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d11b      	bne.n	80049fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f06f 0204 	mvn.w	r2, #4
 80049ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f8e5 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 80049e6:	e005      	b.n	80049f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8d7 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8e8 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d122      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d11b      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0208 	mvn.w	r2, #8
 8004a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2204      	movs	r2, #4
 8004a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f8bb 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004a3a:	e005      	b.n	8004a48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8ad 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8be 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d122      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d11b      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0210 	mvn.w	r2, #16
 8004a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2208      	movs	r2, #8
 8004a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f891 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004a8e:	e005      	b.n	8004a9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f883 	bl	8004b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f894 	bl	8004bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10e      	bne.n	8004ace <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f06f 0201 	mvn.w	r2, #1
 8004ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f85d 	bl	8004b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d10e      	bne.n	8004afa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f9b1 	bl	8004e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9a4 	bl	8004e70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f842 	bl	8004bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0220 	mvn.w	r2, #32
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f964 	bl	8004e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d027      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d023      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d017      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d108      	bne.n	8004cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	40001800 	.word	0x40001800
 8004d24:	40001c00 	.word	0x40001c00
 8004d28:	40002000 	.word	0x40002000

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e06d      	b.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a30      	ldr	r2, [pc, #192]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2f      	ldr	r2, [pc, #188]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d022      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db6:	d01d      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d018      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d10c      	bne.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40010400 	.word	0x40010400
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40001800 	.word	0x40001800

08004e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e040      	b.n	8004f18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fb ff68 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2224      	movs	r2, #36	; 0x24
 8004eb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fd0a 	bl	80058dc <UART_SetConfig>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e022      	b.n	8004f18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 ff62 	bl	8005da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 ffe9 	bl	8005ee8 <UART_CheckIdleState>
 8004f16:	4603      	mov	r3, r0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e02b      	b.n	8004f8a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2224      	movs	r2, #36	; 0x24
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7fb ffd9 	bl	8000f18 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b08a      	sub	sp, #40	; 0x28
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	f040 8081 	bne.w	80050ae <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_UART_Transmit+0x26>
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e079      	b.n	80050b0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Transmit+0x38>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e072      	b.n	80050b0 <HAL_UART_Transmit+0x11e>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2221      	movs	r2, #33	; 0x21
 8004fde:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fe0:	f7fc f8c4 	bl	800116c <HAL_GetTick>
 8004fe4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d108      	bne.n	8005012 <HAL_UART_Transmit+0x80>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d104      	bne.n	8005012 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e003      	b.n	800501a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005022:	e02c      	b.n	800507e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 ff8d 	bl	8005f4e <UART_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e038      	b.n	80050b0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	3302      	adds	r3, #2
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e007      	b.n	800506c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3301      	adds	r3, #1
 800506a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1cc      	bne.n	8005024 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	2140      	movs	r1, #64	; 0x40
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 ff5a 	bl	8005f4e <UART_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e005      	b.n	80050b0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e000      	b.n	80050b0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80050ae:	2302      	movs	r3, #2
  }
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	4613      	mov	r3, r2
 80050c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	f040 80be 	bne.w	800524e <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_UART_Receive+0x26>
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0b6      	b.n	8005250 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_UART_Receive+0x38>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0af      	b.n	8005250 <HAL_UART_Receive+0x198>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2222      	movs	r2, #34	; 0x22
 8005104:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510c:	f7fc f82e 	bl	800116c <HAL_GetTick>
 8005110:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	d10e      	bne.n	800514a <HAL_UART_Receive+0x92>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d105      	bne.n	8005140 <HAL_UART_Receive+0x88>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f240 12ff 	movw	r2, #511	; 0x1ff
 800513a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800513e:	e02d      	b.n	800519c <HAL_UART_Receive+0xe4>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	22ff      	movs	r2, #255	; 0xff
 8005144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005148:	e028      	b.n	800519c <HAL_UART_Receive+0xe4>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <HAL_UART_Receive+0xb6>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <HAL_UART_Receive+0xac>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005162:	e01b      	b.n	800519c <HAL_UART_Receive+0xe4>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	227f      	movs	r2, #127	; 0x7f
 8005168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800516c:	e016      	b.n	800519c <HAL_UART_Receive+0xe4>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005176:	d10d      	bne.n	8005194 <HAL_UART_Receive+0xdc>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_UART_Receive+0xd2>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	227f      	movs	r2, #127	; 0x7f
 8005184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005188:	e008      	b.n	800519c <HAL_UART_Receive+0xe4>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	223f      	movs	r2, #63	; 0x3f
 800518e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005192:	e003      	b.n	800519c <HAL_UART_Receive+0xe4>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d108      	bne.n	80051c0 <HAL_UART_Receive+0x108>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e003      	b.n	80051c8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80051d0:	e032      	b.n	8005238 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	2120      	movs	r1, #32
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 feb6 	bl	8005f4e <UART_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e031      	b.n	8005250 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10c      	bne.n	800520c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	8a7b      	ldrh	r3, [r7, #18]
 80051fc:	4013      	ands	r3, r2
 80051fe:	b29a      	uxth	r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	3302      	adds	r3, #2
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e00c      	b.n	8005226 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	b2da      	uxtb	r2, r3
 8005214:	8a7b      	ldrh	r3, [r7, #18]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4013      	ands	r3, r2
 800521a:	b2da      	uxtb	r2, r3
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1c6      	bne.n	80051d2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800526a:	2b20      	cmp	r3, #32
 800526c:	d13d      	bne.n	80052ea <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_UART_Receive_DMA+0x22>
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e036      	b.n	80052ec <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_UART_Receive_DMA+0x34>
 8005288:	2302      	movs	r3, #2
 800528a:	e02f      	b.n	80052ec <HAL_UART_Receive_DMA+0x94>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d018      	beq.n	80052da <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	613b      	str	r3, [r7, #16]
   return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	69f9      	ldr	r1, [r7, #28]
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	461a      	mov	r2, r3
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fef9 	bl	80060d8 <UART_Start_Receive_DMA>
 80052e6:	4603      	mov	r3, r0
 80052e8:	e000      	b.n	80052ec <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3728      	adds	r7, #40	; 0x28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0ba      	sub	sp, #232	; 0xe8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800531a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800531e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005322:	4013      	ands	r3, r2
 8005324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d115      	bne.n	800535c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00f      	beq.n	800535c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800533c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 828f 	beq.w	8005870 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
      }
      return;
 800535a:	e289      	b.n	8005870 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800535c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8117 	beq.w	8005594 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005372:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005376:	4b85      	ldr	r3, [pc, #532]	; (800558c <HAL_UART_IRQHandler+0x298>)
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 810a 	beq.w	8005594 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d011      	beq.n	80053b0 <HAL_UART_IRQHandler+0xbc>
 800538c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a6:	f043 0201 	orr.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d011      	beq.n	80053e0 <HAL_UART_IRQHandler+0xec>
 80053bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2202      	movs	r2, #2
 80053ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d6:	f043 0204 	orr.w	r2, r3, #4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d011      	beq.n	8005410 <HAL_UART_IRQHandler+0x11c>
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2204      	movs	r2, #4
 80053fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005406:	f043 0202 	orr.w	r2, r3, #2
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d017      	beq.n	800544c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2208      	movs	r2, #8
 800543a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005442:	f043 0208 	orr.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_UART_IRQHandler+0x18a>
 8005458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 81f5 	beq.w	8005874 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800548a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04f      	beq.n	8005576 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 feca 	bl	8006270 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d141      	bne.n	800556e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800551a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800552e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1d9      	bne.n	80054ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	2b00      	cmp	r3, #0
 800553c:	d013      	beq.n	8005566 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <HAL_UART_IRQHandler+0x29c>)
 8005544:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4618      	mov	r0, r3
 800554c:	f7fc f95e 	bl	800180c <HAL_DMA_Abort_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005560:	4610      	mov	r0, r2
 8005562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	e00f      	b.n	8005586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9a2 	bl	80058b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	e00b      	b.n	8005586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f99e 	bl	80058b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005574:	e007      	b.n	8005586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f99a 	bl	80058b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005584:	e176      	b.n	8005874 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005586:	bf00      	nop
    return;
 8005588:	e174      	b.n	8005874 <HAL_UART_IRQHandler+0x580>
 800558a:	bf00      	nop
 800558c:	04000120 	.word	0x04000120
 8005590:	0800650b 	.word	0x0800650b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	2b01      	cmp	r3, #1
 800559a:	f040 8144 	bne.w	8005826 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 813d 	beq.w	8005826 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8136 	beq.w	8005826 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2210      	movs	r2, #16
 80055c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	f040 80b2 	bne.w	8005736 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8148 	beq.w	8005878 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055f2:	429a      	cmp	r2, r3
 80055f4:	f080 8140 	bcs.w	8005878 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	f000 8085 	beq.w	800571a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800563e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1da      	bne.n	8005610 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800566a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800567e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005682:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e1      	bne.n	800565a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80056fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005702:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800570a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e4      	bne.n	80056da <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	4618      	mov	r0, r3
 8005716:	f7fc f809 	bl	800172c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005726:	b29b      	uxth	r3, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	b29b      	uxth	r3, r3
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8c8 	bl	80058c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005734:	e0a0      	b.n	8005878 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005742:	b29b      	uxth	r3, r3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8092 	beq.w	800587c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8005758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 808d 	beq.w	800587c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005784:	647b      	str	r3, [r7, #68]	; 0x44
 8005786:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800578a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e4      	bne.n	8005762 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	623b      	str	r3, [r7, #32]
   return(result);
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057bc:	633a      	str	r2, [r7, #48]	; 0x30
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e3      	bne.n	8005798 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0310 	bic.w	r3, r3, #16
 80057f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	617b      	str	r3, [r7, #20]
   return(result);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e4      	bne.n	80057e2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f850 	bl	80058c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005824:	e02a      	b.n	800587c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00e      	beq.n	8005850 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01c      	beq.n	8005880 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
    }
    return;
 800584e:	e017      	b.n	8005880 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d012      	beq.n	8005882 <HAL_UART_IRQHandler+0x58e>
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00c      	beq.n	8005882 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fe64 	bl	8006536 <UART_EndTransmit_IT>
    return;
 800586e:	e008      	b.n	8005882 <HAL_UART_IRQHandler+0x58e>
      return;
 8005870:	bf00      	nop
 8005872:	e006      	b.n	8005882 <HAL_UART_IRQHandler+0x58e>
    return;
 8005874:	bf00      	nop
 8005876:	e004      	b.n	8005882 <HAL_UART_IRQHandler+0x58e>
      return;
 8005878:	bf00      	nop
 800587a:	e002      	b.n	8005882 <HAL_UART_IRQHandler+0x58e>
      return;
 800587c:	bf00      	nop
 800587e:	e000      	b.n	8005882 <HAL_UART_IRQHandler+0x58e>
    return;
 8005880:	bf00      	nop
  }

}
 8005882:	37e8      	adds	r7, #232	; 0xe8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4ba6      	ldr	r3, [pc, #664]	; (8005ba0 <UART_SetConfig+0x2c4>)
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	430b      	orrs	r3, r1
 8005912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a94      	ldr	r2, [pc, #592]	; (8005ba4 <UART_SetConfig+0x2c8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d120      	bne.n	800599a <UART_SetConfig+0xbe>
 8005958:	4b93      	ldr	r3, [pc, #588]	; (8005ba8 <UART_SetConfig+0x2cc>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d816      	bhi.n	8005994 <UART_SetConfig+0xb8>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x90>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	0800597d 	.word	0x0800597d
 8005970:	08005989 	.word	0x08005989
 8005974:	08005983 	.word	0x08005983
 8005978:	0800598f 	.word	0x0800598f
 800597c:	2301      	movs	r3, #1
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e150      	b.n	8005c24 <UART_SetConfig+0x348>
 8005982:	2302      	movs	r3, #2
 8005984:	77fb      	strb	r3, [r7, #31]
 8005986:	e14d      	b.n	8005c24 <UART_SetConfig+0x348>
 8005988:	2304      	movs	r3, #4
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e14a      	b.n	8005c24 <UART_SetConfig+0x348>
 800598e:	2308      	movs	r3, #8
 8005990:	77fb      	strb	r3, [r7, #31]
 8005992:	e147      	b.n	8005c24 <UART_SetConfig+0x348>
 8005994:	2310      	movs	r3, #16
 8005996:	77fb      	strb	r3, [r7, #31]
 8005998:	e144      	b.n	8005c24 <UART_SetConfig+0x348>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a83      	ldr	r2, [pc, #524]	; (8005bac <UART_SetConfig+0x2d0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d132      	bne.n	8005a0a <UART_SetConfig+0x12e>
 80059a4:	4b80      	ldr	r3, [pc, #512]	; (8005ba8 <UART_SetConfig+0x2cc>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d828      	bhi.n	8005a04 <UART_SetConfig+0x128>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0xdc>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005a05 	.word	0x08005a05
 80059c0:	08005a05 	.word	0x08005a05
 80059c4:	08005a05 	.word	0x08005a05
 80059c8:	080059f9 	.word	0x080059f9
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a05 	.word	0x08005a05
 80059d8:	080059f3 	.word	0x080059f3
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a05 	.word	0x08005a05
 80059e8:	080059ff 	.word	0x080059ff
 80059ec:	2300      	movs	r3, #0
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e118      	b.n	8005c24 <UART_SetConfig+0x348>
 80059f2:	2302      	movs	r3, #2
 80059f4:	77fb      	strb	r3, [r7, #31]
 80059f6:	e115      	b.n	8005c24 <UART_SetConfig+0x348>
 80059f8:	2304      	movs	r3, #4
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e112      	b.n	8005c24 <UART_SetConfig+0x348>
 80059fe:	2308      	movs	r3, #8
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e10f      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a04:	2310      	movs	r3, #16
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e10c      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a68      	ldr	r2, [pc, #416]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d120      	bne.n	8005a56 <UART_SetConfig+0x17a>
 8005a14:	4b64      	ldr	r3, [pc, #400]	; (8005ba8 <UART_SetConfig+0x2cc>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a1e:	2b30      	cmp	r3, #48	; 0x30
 8005a20:	d013      	beq.n	8005a4a <UART_SetConfig+0x16e>
 8005a22:	2b30      	cmp	r3, #48	; 0x30
 8005a24:	d814      	bhi.n	8005a50 <UART_SetConfig+0x174>
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d009      	beq.n	8005a3e <UART_SetConfig+0x162>
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d810      	bhi.n	8005a50 <UART_SetConfig+0x174>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <UART_SetConfig+0x15c>
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d006      	beq.n	8005a44 <UART_SetConfig+0x168>
 8005a36:	e00b      	b.n	8005a50 <UART_SetConfig+0x174>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	77fb      	strb	r3, [r7, #31]
 8005a3c:	e0f2      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e0ef      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a44:	2304      	movs	r3, #4
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e0ec      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e0e9      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a50:	2310      	movs	r3, #16
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e0e6      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a56      	ldr	r2, [pc, #344]	; (8005bb4 <UART_SetConfig+0x2d8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d120      	bne.n	8005aa2 <UART_SetConfig+0x1c6>
 8005a60:	4b51      	ldr	r3, [pc, #324]	; (8005ba8 <UART_SetConfig+0x2cc>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a6c:	d013      	beq.n	8005a96 <UART_SetConfig+0x1ba>
 8005a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a70:	d814      	bhi.n	8005a9c <UART_SetConfig+0x1c0>
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d009      	beq.n	8005a8a <UART_SetConfig+0x1ae>
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d810      	bhi.n	8005a9c <UART_SetConfig+0x1c0>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <UART_SetConfig+0x1a8>
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d006      	beq.n	8005a90 <UART_SetConfig+0x1b4>
 8005a82:	e00b      	b.n	8005a9c <UART_SetConfig+0x1c0>
 8005a84:	2300      	movs	r3, #0
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e0cc      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e0c9      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a90:	2304      	movs	r3, #4
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e0c6      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a96:	2308      	movs	r3, #8
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e0c3      	b.n	8005c24 <UART_SetConfig+0x348>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e0c0      	b.n	8005c24 <UART_SetConfig+0x348>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a44      	ldr	r2, [pc, #272]	; (8005bb8 <UART_SetConfig+0x2dc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d125      	bne.n	8005af8 <UART_SetConfig+0x21c>
 8005aac:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <UART_SetConfig+0x2cc>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aba:	d017      	beq.n	8005aec <UART_SetConfig+0x210>
 8005abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac0:	d817      	bhi.n	8005af2 <UART_SetConfig+0x216>
 8005ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac6:	d00b      	beq.n	8005ae0 <UART_SetConfig+0x204>
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d811      	bhi.n	8005af2 <UART_SetConfig+0x216>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <UART_SetConfig+0x1fe>
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	d006      	beq.n	8005ae6 <UART_SetConfig+0x20a>
 8005ad8:	e00b      	b.n	8005af2 <UART_SetConfig+0x216>
 8005ada:	2300      	movs	r3, #0
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e0a1      	b.n	8005c24 <UART_SetConfig+0x348>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e09e      	b.n	8005c24 <UART_SetConfig+0x348>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e09b      	b.n	8005c24 <UART_SetConfig+0x348>
 8005aec:	2308      	movs	r3, #8
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e098      	b.n	8005c24 <UART_SetConfig+0x348>
 8005af2:	2310      	movs	r3, #16
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e095      	b.n	8005c24 <UART_SetConfig+0x348>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2f      	ldr	r2, [pc, #188]	; (8005bbc <UART_SetConfig+0x2e0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d125      	bne.n	8005b4e <UART_SetConfig+0x272>
 8005b02:	4b29      	ldr	r3, [pc, #164]	; (8005ba8 <UART_SetConfig+0x2cc>)
 8005b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b10:	d017      	beq.n	8005b42 <UART_SetConfig+0x266>
 8005b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b16:	d817      	bhi.n	8005b48 <UART_SetConfig+0x26c>
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1c:	d00b      	beq.n	8005b36 <UART_SetConfig+0x25a>
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b22:	d811      	bhi.n	8005b48 <UART_SetConfig+0x26c>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <UART_SetConfig+0x254>
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2c:	d006      	beq.n	8005b3c <UART_SetConfig+0x260>
 8005b2e:	e00b      	b.n	8005b48 <UART_SetConfig+0x26c>
 8005b30:	2301      	movs	r3, #1
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e076      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b36:	2302      	movs	r3, #2
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e073      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e070      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b42:	2308      	movs	r3, #8
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e06d      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e06a      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <UART_SetConfig+0x2e4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d138      	bne.n	8005bca <UART_SetConfig+0x2ee>
 8005b58:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <UART_SetConfig+0x2cc>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b66:	d017      	beq.n	8005b98 <UART_SetConfig+0x2bc>
 8005b68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6c:	d82a      	bhi.n	8005bc4 <UART_SetConfig+0x2e8>
 8005b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b72:	d00b      	beq.n	8005b8c <UART_SetConfig+0x2b0>
 8005b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b78:	d824      	bhi.n	8005bc4 <UART_SetConfig+0x2e8>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <UART_SetConfig+0x2aa>
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b82:	d006      	beq.n	8005b92 <UART_SetConfig+0x2b6>
 8005b84:	e01e      	b.n	8005bc4 <UART_SetConfig+0x2e8>
 8005b86:	2300      	movs	r3, #0
 8005b88:	77fb      	strb	r3, [r7, #31]
 8005b8a:	e04b      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e048      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b92:	2304      	movs	r3, #4
 8005b94:	77fb      	strb	r3, [r7, #31]
 8005b96:	e045      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e042      	b.n	8005c24 <UART_SetConfig+0x348>
 8005b9e:	bf00      	nop
 8005ba0:	efff69f3 	.word	0xefff69f3
 8005ba4:	40011000 	.word	0x40011000
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40004400 	.word	0x40004400
 8005bb0:	40004800 	.word	0x40004800
 8005bb4:	40004c00 	.word	0x40004c00
 8005bb8:	40005000 	.word	0x40005000
 8005bbc:	40011400 	.word	0x40011400
 8005bc0:	40007800 	.word	0x40007800
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e02c      	b.n	8005c24 <UART_SetConfig+0x348>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a72      	ldr	r2, [pc, #456]	; (8005d98 <UART_SetConfig+0x4bc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d125      	bne.n	8005c20 <UART_SetConfig+0x344>
 8005bd4:	4b71      	ldr	r3, [pc, #452]	; (8005d9c <UART_SetConfig+0x4c0>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005be2:	d017      	beq.n	8005c14 <UART_SetConfig+0x338>
 8005be4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005be8:	d817      	bhi.n	8005c1a <UART_SetConfig+0x33e>
 8005bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bee:	d00b      	beq.n	8005c08 <UART_SetConfig+0x32c>
 8005bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf4:	d811      	bhi.n	8005c1a <UART_SetConfig+0x33e>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <UART_SetConfig+0x326>
 8005bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfe:	d006      	beq.n	8005c0e <UART_SetConfig+0x332>
 8005c00:	e00b      	b.n	8005c1a <UART_SetConfig+0x33e>
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e00d      	b.n	8005c24 <UART_SetConfig+0x348>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e00a      	b.n	8005c24 <UART_SetConfig+0x348>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e007      	b.n	8005c24 <UART_SetConfig+0x348>
 8005c14:	2308      	movs	r3, #8
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e004      	b.n	8005c24 <UART_SetConfig+0x348>
 8005c1a:	2310      	movs	r3, #16
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e001      	b.n	8005c24 <UART_SetConfig+0x348>
 8005c20:	2310      	movs	r3, #16
 8005c22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2c:	d15b      	bne.n	8005ce6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d828      	bhi.n	8005c86 <UART_SetConfig+0x3aa>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x360>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c71 	.word	0x08005c71
 8005c48:	08005c87 	.word	0x08005c87
 8005c4c:	08005c77 	.word	0x08005c77
 8005c50:	08005c87 	.word	0x08005c87
 8005c54:	08005c87 	.word	0x08005c87
 8005c58:	08005c87 	.word	0x08005c87
 8005c5c:	08005c7f 	.word	0x08005c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c60:	f7fe fa04 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8005c64:	61b8      	str	r0, [r7, #24]
        break;
 8005c66:	e013      	b.n	8005c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c68:	f7fe fa14 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8005c6c:	61b8      	str	r0, [r7, #24]
        break;
 8005c6e:	e00f      	b.n	8005c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c70:	4b4b      	ldr	r3, [pc, #300]	; (8005da0 <UART_SetConfig+0x4c4>)
 8005c72:	61bb      	str	r3, [r7, #24]
        break;
 8005c74:	e00c      	b.n	8005c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c76:	f7fe f8e7 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8005c7a:	61b8      	str	r0, [r7, #24]
        break;
 8005c7c:	e008      	b.n	8005c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c82:	61bb      	str	r3, [r7, #24]
        break;
 8005c84:	e004      	b.n	8005c90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d074      	beq.n	8005d80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	005a      	lsls	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	d916      	bls.n	8005ce0 <UART_SetConfig+0x404>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb8:	d212      	bcs.n	8005ce0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f023 030f 	bic.w	r3, r3, #15
 8005cc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	89fb      	ldrh	r3, [r7, #14]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	89fa      	ldrh	r2, [r7, #14]
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	e04f      	b.n	8005d80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	77bb      	strb	r3, [r7, #30]
 8005ce4:	e04c      	b.n	8005d80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ce6:	7ffb      	ldrb	r3, [r7, #31]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d828      	bhi.n	8005d3e <UART_SetConfig+0x462>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0x418>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d21 	.word	0x08005d21
 8005cfc:	08005d29 	.word	0x08005d29
 8005d00:	08005d3f 	.word	0x08005d3f
 8005d04:	08005d2f 	.word	0x08005d2f
 8005d08:	08005d3f 	.word	0x08005d3f
 8005d0c:	08005d3f 	.word	0x08005d3f
 8005d10:	08005d3f 	.word	0x08005d3f
 8005d14:	08005d37 	.word	0x08005d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d18:	f7fe f9a8 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8005d1c:	61b8      	str	r0, [r7, #24]
        break;
 8005d1e:	e013      	b.n	8005d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d20:	f7fe f9b8 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8005d24:	61b8      	str	r0, [r7, #24]
        break;
 8005d26:	e00f      	b.n	8005d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d28:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <UART_SetConfig+0x4c4>)
 8005d2a:	61bb      	str	r3, [r7, #24]
        break;
 8005d2c:	e00c      	b.n	8005d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2e:	f7fe f88b 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8005d32:	61b8      	str	r0, [r7, #24]
        break;
 8005d34:	e008      	b.n	8005d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3a:	61bb      	str	r3, [r7, #24]
        break;
 8005d3c:	e004      	b.n	8005d48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	77bb      	strb	r3, [r7, #30]
        break;
 8005d46:	bf00      	nop
    }

    if (pclk != 0U)
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d018      	beq.n	8005d80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	085a      	lsrs	r2, r3, #1
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	441a      	add	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b0f      	cmp	r3, #15
 8005d66:	d909      	bls.n	8005d7c <UART_SetConfig+0x4a0>
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6e:	d205      	bcs.n	8005d7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60da      	str	r2, [r3, #12]
 8005d7a:	e001      	b.n	8005d80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3720      	adds	r7, #32
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40007c00 	.word	0x40007c00
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	00f42400 	.word	0x00f42400

08005da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01a      	beq.n	8005eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea2:	d10a      	bne.n	8005eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ef8:	f7fb f938 	bl	800116c <HAL_GetTick>
 8005efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d10e      	bne.n	8005f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f817 	bl	8005f4e <UART_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e00d      	b.n	8005f46 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b09c      	sub	sp, #112	; 0x70
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5e:	e0a5      	b.n	80060ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	f000 80a1 	beq.w	80060ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f6a:	f7fb f8ff 	bl	800116c <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d302      	bcc.n	8005f80 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d13e      	bne.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f94:	667b      	str	r3, [r7, #100]	; 0x64
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e5      	bne.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e067      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d04f      	beq.n	80060ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601a:	d147      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006024:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800603a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
 8006046:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800604a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	613b      	str	r3, [r7, #16]
   return(result);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006078:	623a      	str	r2, [r7, #32]
 800607a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69f9      	ldr	r1, [r7, #28]
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	61bb      	str	r3, [r7, #24]
   return(result);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e010      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4013      	ands	r3, r2
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	f43f af4a 	beq.w	8005f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3770      	adds	r7, #112	; 0x70
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b096      	sub	sp, #88	; 0x58
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2222      	movs	r2, #34	; 0x22
 8006100:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006106:	2b00      	cmp	r3, #0
 8006108:	d02b      	beq.n	8006162 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a42      	ldr	r2, [pc, #264]	; (8006218 <UART_Start_Receive_DMA+0x140>)
 8006110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006116:	4a41      	ldr	r2, [pc, #260]	; (800621c <UART_Start_Receive_DMA+0x144>)
 8006118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	4a40      	ldr	r2, [pc, #256]	; (8006220 <UART_Start_Receive_DMA+0x148>)
 8006120:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	2200      	movs	r2, #0
 8006128:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3324      	adds	r3, #36	; 0x24
 8006134:	4619      	mov	r1, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	461a      	mov	r2, r3
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	f7fb fa95 	bl	800166c <HAL_DMA_Start_IT>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2210      	movs	r2, #16
 800614c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e055      	b.n	800620e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d018      	beq.n	80061a4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006186:	657b      	str	r3, [r7, #84]	; 0x54
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006190:	64bb      	str	r3, [r7, #72]	; 0x48
 8006192:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800619e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e6      	bne.n	8006172 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061c4:	637a      	str	r2, [r7, #52]	; 0x34
 80061c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	613b      	str	r3, [r7, #16]
   return(result);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3308      	adds	r3, #8
 80061f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f8:	623a      	str	r2, [r7, #32]
 80061fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	69f9      	ldr	r1, [r7, #28]
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	61bb      	str	r3, [r7, #24]
   return(result);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3758      	adds	r7, #88	; 0x58
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	08006337 	.word	0x08006337
 800621c:	08006457 	.word	0x08006457
 8006220:	0800648f 	.word	0x0800648f

08006224 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	60bb      	str	r3, [r7, #8]
   return(result);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6979      	ldr	r1, [r7, #20]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	613b      	str	r3, [r7, #16]
   return(result);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e6      	bne.n	800622c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006264:	bf00      	nop
 8006266:	3724      	adds	r7, #36	; 0x24
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b095      	sub	sp, #84	; 0x54
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800628c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
 8006298:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800629c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e6      	bne.n	8006278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f023 0301 	bic.w	r3, r3, #1
 80062c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e5      	bne.n	80062aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d118      	bne.n	8006318 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f023 0310 	bic.w	r3, r3, #16
 80062fa:	647b      	str	r3, [r7, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6979      	ldr	r1, [r7, #20]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	613b      	str	r3, [r7, #16]
   return(result);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e6      	bne.n	80062e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	665a      	str	r2, [r3, #100]	; 0x64
}
 800632a:	bf00      	nop
 800632c:	3754      	adds	r7, #84	; 0x54
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b09c      	sub	sp, #112	; 0x70
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634c:	d070      	beq.n	8006430 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800634e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006350:	2200      	movs	r2, #0
 8006352:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800636a:	66bb      	str	r3, [r7, #104]	; 0x68
 800636c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006374:	65bb      	str	r3, [r7, #88]	; 0x58
 8006376:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800637a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e6      	bne.n	8006356 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	667b      	str	r3, [r7, #100]	; 0x64
 80063a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3308      	adds	r3, #8
 80063a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063a8:	647a      	str	r2, [r7, #68]	; 0x44
 80063aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	623b      	str	r3, [r7, #32]
   return(result);
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d2:	663b      	str	r3, [r7, #96]	; 0x60
 80063d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063dc:	633a      	str	r2, [r7, #48]	; 0x30
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	2220      	movs	r2, #32
 80063f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d118      	bne.n	8006430 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	60fb      	str	r3, [r7, #12]
   return(result);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0310 	bic.w	r3, r3, #16
 8006412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	69b9      	ldr	r1, [r7, #24]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	617b      	str	r3, [r7, #20]
   return(result);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800643e:	4619      	mov	r1, r3
 8006440:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006442:	f7ff fa3f 	bl	80058c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006446:	e002      	b.n	800644e <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8006448:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800644a:	f00d fe55 	bl	80140f8 <HAL_UART_RxCpltCallback>
}
 800644e:	bf00      	nop
 8006450:	3770      	adds	r7, #112	; 0x70
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	2b01      	cmp	r3, #1
 800646a:	d109      	bne.n	8006480 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	4619      	mov	r1, r3
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f7ff fa23 	bl	80058c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800647e:	e002      	b.n	8006486 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff fa0b 	bl	800589c <HAL_UART_RxHalfCpltCallback>
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d109      	bne.n	80064ca <UART_DMAError+0x3c>
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b21      	cmp	r3, #33	; 0x21
 80064ba:	d106      	bne.n	80064ca <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80064c4:	6978      	ldr	r0, [r7, #20]
 80064c6:	f7ff fead 	bl	8006224 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d109      	bne.n	80064ec <UART_DMAError+0x5e>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b22      	cmp	r3, #34	; 0x22
 80064dc:	d106      	bne.n	80064ec <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80064e6:	6978      	ldr	r0, [r7, #20]
 80064e8:	f7ff fec2 	bl	8006270 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f2:	f043 0210 	orr.w	r2, r3, #16
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064fc:	6978      	ldr	r0, [r7, #20]
 80064fe:	f7ff f9d7 	bl	80058b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006502:	bf00      	nop
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f7ff f9c1 	bl	80058b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b088      	sub	sp, #32
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	60bb      	str	r3, [r7, #8]
   return(result);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6979      	ldr	r1, [r7, #20]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	613b      	str	r3, [r7, #16]
   return(result);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e6      	bne.n	800653e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2220      	movs	r2, #32
 8006574:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff f983 	bl	8005888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006582:	bf00      	nop
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f103 0208 	add.w	r2, r3, #8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f04f 32ff 	mov.w	r2, #4294967295
 80065a2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 0208 	add.w	r2, r3, #8
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f103 0208 	add.w	r2, r3, #8
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d103      	bne.n	8006604 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	e00c      	b.n	800661e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3308      	adds	r3, #8
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e002      	b.n	8006612 <vListInsert+0x2e>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	d2f6      	bcs.n	800660c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	601a      	str	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6892      	ldr	r2, [r2, #8]
 800666c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6852      	ldr	r2, [r2, #4]
 8006676:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d103      	bne.n	800668a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	1e5a      	subs	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b08e      	sub	sp, #56	; 0x38
 80066ae:	af04      	add	r7, sp, #16
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10c      	bne.n	80066d8 <xTaskCreateStatic+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	b672      	cpsid	i
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	b662      	cpsie	i
 80066d2:	623b      	str	r3, [r7, #32]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <xTaskCreateStatic+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10c      	bne.n	80066f8 <xTaskCreateStatic+0x4e>
        __asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	b672      	cpsid	i
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	b662      	cpsie	i
 80066f2:	61fb      	str	r3, [r7, #28]
    }
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xTaskCreateStatic+0x4c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 80066f8:	2354      	movs	r3, #84	; 0x54
 80066fa:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b54      	cmp	r3, #84	; 0x54
 8006700:	d00c      	beq.n	800671c <xTaskCreateStatic+0x72>
        __asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	b672      	cpsid	i
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	b662      	cpsie	i
 8006716:	61bb      	str	r3, [r7, #24]
    }
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <xTaskCreateStatic+0x70>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800671c:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01e      	beq.n	8006762 <xTaskCreateStatic+0xb8>
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01b      	beq.n	8006762 <xTaskCreateStatic+0xb8>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006732:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800673c:	2300      	movs	r3, #0
 800673e:	9303      	str	r3, [sp, #12]
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	9302      	str	r3, [sp, #8]
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f80b 	bl	8006770 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800675a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800675c:	f000 f8a8 	bl	80068b0 <prvAddNewTaskToReadyList>
 8006760:	e001      	b.n	8006766 <xTaskCreateStatic+0xbc>
        }
        else
        {
            xReturn = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8006766:	697b      	ldr	r3, [r7, #20]
    }
 8006768:	4618      	mov	r0, r3
 800676a:	3728      	adds	r7, #40	; 0x28
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006788:	440b      	add	r3, r1
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f023 0307 	bic.w	r3, r3, #7
 8006796:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <prvInitialiseNewTask+0x4c>
        __asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	b672      	cpsid	i
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	b662      	cpsie	i
 80067b6:	617b      	str	r3, [r7, #20]
    }
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <prvInitialiseNewTask+0x4a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01f      	beq.n	8006802 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	e012      	b.n	80067ee <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	7819      	ldrb	r1, [r3, #0]
 80067d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	3334      	adds	r3, #52	; 0x34
 80067d8:	460a      	mov	r2, r1
 80067da:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	3301      	adds	r3, #1
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	2b0f      	cmp	r3, #15
 80067f2:	d9e9      	bls.n	80067c8 <prvInitialiseNewTask+0x58>
 80067f4:	e000      	b.n	80067f8 <prvInitialiseNewTask+0x88>
            {
                break;
 80067f6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006800:	e003      	b.n	800680a <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	2b06      	cmp	r3, #6
 800680e:	d90c      	bls.n	800682a <prvInitialiseNewTask+0xba>
        __asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	b672      	cpsid	i
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	b662      	cpsie	i
 8006824:	613b      	str	r3, [r7, #16]
    }
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	2b06      	cmp	r3, #6
 800682e:	d901      	bls.n	8006834 <prvInitialiseNewTask+0xc4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006830:	2306      	movs	r3, #6
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683e:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2200      	movs	r2, #0
 8006844:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	3304      	adds	r3, #4
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff febd 	bl	80065ca <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	3318      	adds	r3, #24
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff feb8 	bl	80065ca <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f1c3 0207 	rsb	r2, r3, #7
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	334c      	adds	r3, #76	; 0x4c
 8006874:	2204      	movs	r2, #4
 8006876:	2100      	movs	r1, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f00d fcd7 	bl	801422c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	3350      	adds	r3, #80	; 0x50
 8006882:	2201      	movs	r2, #1
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f00d fcd0 	bl	801422c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	69b8      	ldr	r0, [r7, #24]
 8006892:	f000 ff8d 	bl	80077b0 <pxPortInitialiseStack>
 8006896:	4602      	mov	r2, r0
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80068a8:	bf00      	nop
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80068b8:	f001 f88a 	bl	80079d0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80068bc:	4b3e      	ldr	r3, [pc, #248]	; (80069b8 <prvAddNewTaskToReadyList+0x108>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a3d      	ldr	r2, [pc, #244]	; (80069b8 <prvAddNewTaskToReadyList+0x108>)
 80068c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80068c6:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <prvAddNewTaskToReadyList+0x10c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80068ce:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <prvAddNewTaskToReadyList+0x10c>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068d4:	4b38      	ldr	r3, [pc, #224]	; (80069b8 <prvAddNewTaskToReadyList+0x108>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d110      	bne.n	80068fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80068dc:	f000 fb7c 	bl	8006fd8 <prvInitialiseTaskLists>
 80068e0:	e00d      	b.n	80068fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80068e2:	4b37      	ldr	r3, [pc, #220]	; (80069c0 <prvAddNewTaskToReadyList+0x110>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068ea:	4b34      	ldr	r3, [pc, #208]	; (80069bc <prvAddNewTaskToReadyList+0x10c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d802      	bhi.n	80068fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80068f8:	4a30      	ldr	r2, [pc, #192]	; (80069bc <prvAddNewTaskToReadyList+0x10c>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <prvAddNewTaskToReadyList+0x114>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a2f      	ldr	r2, [pc, #188]	; (80069c4 <prvAddNewTaskToReadyList+0x114>)
 8006906:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	2201      	movs	r2, #1
 800690e:	409a      	lsls	r2, r3
 8006910:	4b2d      	ldr	r3, [pc, #180]	; (80069c8 <prvAddNewTaskToReadyList+0x118>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4313      	orrs	r3, r2
 8006916:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <prvAddNewTaskToReadyList+0x118>)
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	492b      	ldr	r1, [pc, #172]	; (80069cc <prvAddNewTaskToReadyList+0x11c>)
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	3304      	adds	r3, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	609a      	str	r2, [r3, #8]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60da      	str	r2, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	3204      	adds	r2, #4
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <prvAddNewTaskToReadyList+0x11c>)
 800695e:	441a      	add	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	615a      	str	r2, [r3, #20]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4918      	ldr	r1, [pc, #96]	; (80069cc <prvAddNewTaskToReadyList+0x11c>)
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	4814      	ldr	r0, [pc, #80]	; (80069cc <prvAddNewTaskToReadyList+0x11c>)
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4403      	add	r3, r0
 8006984:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006986:	f001 f857 	bl	8007a38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800698a:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <prvAddNewTaskToReadyList+0x110>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <prvAddNewTaskToReadyList+0x10c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	429a      	cmp	r2, r3
 800699e:	d207      	bcs.n	80069b0 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <prvAddNewTaskToReadyList+0x120>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20003fe4 	.word	0x20003fe4
 80069bc:	20003ee4 	.word	0x20003ee4
 80069c0:	20003ff0 	.word	0x20003ff0
 80069c4:	20004000 	.word	0x20004000
 80069c8:	20003fec 	.word	0x20003fec
 80069cc:	20003ee8 	.word	0x20003ee8
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	; 0x28
 80069d8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069e2:	463a      	mov	r2, r7
 80069e4:	1d39      	adds	r1, r7, #4
 80069e6:	f107 0308 	add.w	r3, r7, #8
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7f9 fdea 	bl	80005c4 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	9202      	str	r2, [sp, #8]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	460a      	mov	r2, r1
 8006a02:	4921      	ldr	r1, [pc, #132]	; (8006a88 <vTaskStartScheduler+0xb4>)
 8006a04:	4821      	ldr	r0, [pc, #132]	; (8006a8c <vTaskStartScheduler+0xb8>)
 8006a06:	f7ff fe50 	bl	80066aa <xTaskCreateStatic>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4a20      	ldr	r2, [pc, #128]	; (8006a90 <vTaskStartScheduler+0xbc>)
 8006a0e:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 8006a10:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <vTaskStartScheduler+0xbc>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e001      	b.n	8006a22 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d118      	bne.n	8006a5a <vTaskStartScheduler+0x86>
        __asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	b672      	cpsid	i
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	b662      	cpsie	i
 8006a3c:	613b      	str	r3, [r7, #16]
    }
 8006a3e:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006a40:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <vTaskStartScheduler+0xc0>)
 8006a42:	f04f 32ff 	mov.w	r2, #4294967295
 8006a46:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <vTaskStartScheduler+0xc4>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <vTaskStartScheduler+0xc8>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006a54:	f000 ff3e 	bl	80078d4 <xPortStartScheduler>
 8006a58:	e010      	b.n	8006a7c <vTaskStartScheduler+0xa8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d10c      	bne.n	8006a7c <vTaskStartScheduler+0xa8>
        __asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	60fb      	str	r3, [r7, #12]
    }
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <vTaskStartScheduler+0xa6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006a7c:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <vTaskStartScheduler+0xcc>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
}
 8006a80:	bf00      	nop
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	080159c0 	.word	0x080159c0
 8006a8c:	08006fa9 	.word	0x08006fa9
 8006a90:	20004008 	.word	0x20004008
 8006a94:	20004004 	.word	0x20004004
 8006a98:	20003ff0 	.word	0x20003ff0
 8006a9c:	20003fe8 	.word	0x20003fe8
 8006aa0:	20000014 	.word	0x20000014

08006aa4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <vTaskSuspendAll+0x18>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	4a03      	ldr	r2, [pc, #12]	; (8006abc <vTaskSuspendAll+0x18>)
 8006ab0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006ab2:	bf00      	nop
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	2000400c 	.word	0x2000400c

08006ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006ace:	4b72      	ldr	r3, [pc, #456]	; (8006c98 <xTaskResumeAll+0x1d8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10c      	bne.n	8006af0 <xTaskResumeAll+0x30>
        __asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	b672      	cpsid	i
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	b662      	cpsie	i
 8006aea:	607b      	str	r3, [r7, #4]
    }
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006af0:	f000 ff6e 	bl	80079d0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006af4:	4b68      	ldr	r3, [pc, #416]	; (8006c98 <xTaskResumeAll+0x1d8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	4a67      	ldr	r2, [pc, #412]	; (8006c98 <xTaskResumeAll+0x1d8>)
 8006afc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afe:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <xTaskResumeAll+0x1d8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 80c0 	bne.w	8006c88 <xTaskResumeAll+0x1c8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b08:	4b64      	ldr	r3, [pc, #400]	; (8006c9c <xTaskResumeAll+0x1dc>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80bb 	beq.w	8006c88 <xTaskResumeAll+0x1c8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b12:	e08a      	b.n	8006c2a <xTaskResumeAll+0x16a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b14:	4b62      	ldr	r3, [pc, #392]	; (8006ca0 <xTaskResumeAll+0x1e0>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	6a12      	ldr	r2, [r2, #32]
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	69d2      	ldr	r2, [r2, #28]
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3318      	adds	r3, #24
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d103      	bne.n	8006b4a <xTaskResumeAll+0x8a>
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	6a1a      	ldr	r2, [r3, #32]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	1e5a      	subs	r2, r3, #1
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	68d2      	ldr	r2, [r2, #12]
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	6892      	ldr	r2, [r2, #8]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d103      	bne.n	8006b88 <xTaskResumeAll+0xc8>
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	605a      	str	r2, [r3, #4]
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	615a      	str	r2, [r3, #20]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	4b40      	ldr	r3, [pc, #256]	; (8006ca4 <xTaskResumeAll+0x1e4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	4a3f      	ldr	r2, [pc, #252]	; (8006ca4 <xTaskResumeAll+0x1e4>)
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	493e      	ldr	r1, [pc, #248]	; (8006ca8 <xTaskResumeAll+0x1e8>)
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	3304      	adds	r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	609a      	str	r2, [r3, #8]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	60da      	str	r2, [r3, #12]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	3204      	adds	r2, #4
 8006bd6:	605a      	str	r2, [r3, #4]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	1d1a      	adds	r2, r3, #4
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4a2e      	ldr	r2, [pc, #184]	; (8006ca8 <xTaskResumeAll+0x1e8>)
 8006bee:	441a      	add	r2, r3
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	615a      	str	r2, [r3, #20]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf8:	492b      	ldr	r1, [pc, #172]	; (8006ca8 <xTaskResumeAll+0x1e8>)
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	4827      	ldr	r0, [pc, #156]	; (8006ca8 <xTaskResumeAll+0x1e8>)
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4403      	add	r3, r0
 8006c14:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <xTaskResumeAll+0x1ec>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d302      	bcc.n	8006c2a <xTaskResumeAll+0x16a>
                    {
                        xYieldPending = pdTRUE;
 8006c24:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <xTaskResumeAll+0x1f0>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <xTaskResumeAll+0x1e0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f47f af70 	bne.w	8006b14 <xTaskResumeAll+0x54>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <xTaskResumeAll+0x17e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006c3a:	f000 fa6d 	bl	8007118 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c3e:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <xTaskResumeAll+0x1f4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <xTaskResumeAll+0x1ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006c4a:	f000 f837 	bl	8006cbc <xTaskIncrementTick>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <xTaskResumeAll+0x19a>
                            {
                                xYieldPending = pdTRUE;
 8006c54:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <xTaskResumeAll+0x1f0>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f1      	bne.n	8006c4a <xTaskResumeAll+0x18a>

                        xPendedTicks = 0;
 8006c66:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <xTaskResumeAll+0x1f4>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xTaskResumeAll+0x1f0>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <xTaskResumeAll+0x1c8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <xTaskResumeAll+0x1f8>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006c88:	f000 fed6 	bl	8007a38 <vPortExitCritical>

    return xAlreadyYielded;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	2000400c 	.word	0x2000400c
 8006c9c:	20003fe4 	.word	0x20003fe4
 8006ca0:	20003fa4 	.word	0x20003fa4
 8006ca4:	20003fec 	.word	0x20003fec
 8006ca8:	20003ee8 	.word	0x20003ee8
 8006cac:	20003ee4 	.word	0x20003ee4
 8006cb0:	20003ff8 	.word	0x20003ff8
 8006cb4:	20003ff4 	.word	0x20003ff4
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc6:	4b7e      	ldr	r3, [pc, #504]	; (8006ec0 <xTaskIncrementTick+0x204>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f040 80ee 	bne.w	8006eac <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cd0:	4b7c      	ldr	r3, [pc, #496]	; (8006ec4 <xTaskIncrementTick+0x208>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006cd8:	4a7a      	ldr	r2, [pc, #488]	; (8006ec4 <xTaskIncrementTick+0x208>)
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d122      	bne.n	8006d2a <xTaskIncrementTick+0x6e>
        {
            taskSWITCH_DELAYED_LISTS();
 8006ce4:	4b78      	ldr	r3, [pc, #480]	; (8006ec8 <xTaskIncrementTick+0x20c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00c      	beq.n	8006d08 <xTaskIncrementTick+0x4c>
        __asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	b672      	cpsid	i
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	b662      	cpsie	i
 8006d02:	607b      	str	r3, [r7, #4]
    }
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <xTaskIncrementTick+0x4a>
 8006d08:	4b6f      	ldr	r3, [pc, #444]	; (8006ec8 <xTaskIncrementTick+0x20c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	4b6f      	ldr	r3, [pc, #444]	; (8006ecc <xTaskIncrementTick+0x210>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a6d      	ldr	r2, [pc, #436]	; (8006ec8 <xTaskIncrementTick+0x20c>)
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	4a6d      	ldr	r2, [pc, #436]	; (8006ecc <xTaskIncrementTick+0x210>)
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4b6c      	ldr	r3, [pc, #432]	; (8006ed0 <xTaskIncrementTick+0x214>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3301      	adds	r3, #1
 8006d22:	4a6b      	ldr	r2, [pc, #428]	; (8006ed0 <xTaskIncrementTick+0x214>)
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	f000 f9f7 	bl	8007118 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006d2a:	4b6a      	ldr	r3, [pc, #424]	; (8006ed4 <xTaskIncrementTick+0x218>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	f0c0 80a6 	bcc.w	8006e82 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d36:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <xTaskIncrementTick+0x20c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <xTaskIncrementTick+0x8e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d40:	4b64      	ldr	r3, [pc, #400]	; (8006ed4 <xTaskIncrementTick+0x218>)
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	601a      	str	r2, [r3, #0]
                    break;
 8006d48:	e09b      	b.n	8006e82 <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4a:	4b5f      	ldr	r3, [pc, #380]	; (8006ec8 <xTaskIncrementTick+0x20c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006d5a:	6a3a      	ldr	r2, [r7, #32]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d203      	bcs.n	8006d6a <xTaskIncrementTick+0xae>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006d62:	4a5c      	ldr	r2, [pc, #368]	; (8006ed4 <xTaskIncrementTick+0x218>)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006d68:	e08b      	b.n	8006e82 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	68d2      	ldr	r2, [r2, #12]
 8006d78:	609a      	str	r2, [r3, #8]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	6892      	ldr	r2, [r2, #8]
 8006d82:	605a      	str	r2, [r3, #4]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d103      	bne.n	8006d98 <xTaskIncrementTick+0xdc>
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	605a      	str	r2, [r3, #4]
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	615a      	str	r2, [r3, #20]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	1e5a      	subs	r2, r3, #1
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01e      	beq.n	8006dee <xTaskIncrementTick+0x132>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	6a12      	ldr	r2, [r2, #32]
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	69d2      	ldr	r2, [r2, #28]
 8006dc8:	605a      	str	r2, [r3, #4]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	3318      	adds	r3, #24
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d103      	bne.n	8006dde <xTaskIncrementTick+0x122>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	6a1a      	ldr	r2, [r3, #32]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	605a      	str	r2, [r3, #4]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2200      	movs	r2, #0
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	1e5a      	subs	r2, r3, #1
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	2201      	movs	r2, #1
 8006df4:	409a      	lsls	r2, r3
 8006df6:	4b38      	ldr	r3, [pc, #224]	; (8006ed8 <xTaskIncrementTick+0x21c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	4a36      	ldr	r2, [pc, #216]	; (8006ed8 <xTaskIncrementTick+0x21c>)
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e04:	4935      	ldr	r1, [pc, #212]	; (8006edc <xTaskIncrementTick+0x220>)
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3304      	adds	r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	60da      	str	r2, [r3, #12]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	3204      	adds	r2, #4
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	1d1a      	adds	r2, r3, #4
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	609a      	str	r2, [r3, #8]
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a26      	ldr	r2, [pc, #152]	; (8006edc <xTaskIncrementTick+0x220>)
 8006e44:	441a      	add	r2, r3
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	615a      	str	r2, [r3, #20]
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4e:	4923      	ldr	r1, [pc, #140]	; (8006edc <xTaskIncrementTick+0x220>)
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	1c59      	adds	r1, r3, #1
 8006e5e:	481f      	ldr	r0, [pc, #124]	; (8006edc <xTaskIncrementTick+0x220>)
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4403      	add	r3, r0
 8006e6a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <xTaskIncrementTick+0x224>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	429a      	cmp	r2, r3
 8006e78:	f4ff af5d 	bcc.w	8006d36 <xTaskIncrementTick+0x7a>
                            {
                                xSwitchRequired = pdTRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e80:	e759      	b.n	8006d36 <xTaskIncrementTick+0x7a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e82:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <xTaskIncrementTick+0x224>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e88:	4914      	ldr	r1, [pc, #80]	; (8006edc <xTaskIncrementTick+0x220>)
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d901      	bls.n	8006e9e <xTaskIncrementTick+0x1e2>
                {
                    xSwitchRequired = pdTRUE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <xTaskIncrementTick+0x228>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <xTaskIncrementTick+0x1fa>
                {
                    xSwitchRequired = pdTRUE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eaa:	e004      	b.n	8006eb6 <xTaskIncrementTick+0x1fa>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <xTaskIncrementTick+0x22c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a0d      	ldr	r2, [pc, #52]	; (8006ee8 <xTaskIncrementTick+0x22c>)
 8006eb4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	; 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	2000400c 	.word	0x2000400c
 8006ec4:	20003fe8 	.word	0x20003fe8
 8006ec8:	20003f9c 	.word	0x20003f9c
 8006ecc:	20003fa0 	.word	0x20003fa0
 8006ed0:	20003ffc 	.word	0x20003ffc
 8006ed4:	20004004 	.word	0x20004004
 8006ed8:	20003fec 	.word	0x20003fec
 8006edc:	20003ee8 	.word	0x20003ee8
 8006ee0:	20003ee4 	.word	0x20003ee4
 8006ee4:	20003ff8 	.word	0x20003ff8
 8006ee8:	20003ff4 	.word	0x20003ff4

08006eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ef2:	4b28      	ldr	r3, [pc, #160]	; (8006f94 <vTaskSwitchContext+0xa8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006efa:	4b27      	ldr	r3, [pc, #156]	; (8006f98 <vTaskSwitchContext+0xac>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006f00:	e041      	b.n	8006f86 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8006f02:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <vTaskSwitchContext+0xac>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f08:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <vTaskSwitchContext+0xb0>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	fab3 f383 	clz	r3, r3
 8006f14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	f1c3 031f 	rsb	r3, r3, #31
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	4920      	ldr	r1, [pc, #128]	; (8006fa0 <vTaskSwitchContext+0xb4>)
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10c      	bne.n	8006f4c <vTaskSwitchContext+0x60>
        __asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	b672      	cpsid	i
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	b662      	cpsie	i
 8006f46:	607b      	str	r3, [r7, #4]
    }
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <vTaskSwitchContext+0x5e>
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <vTaskSwitchContext+0xb4>)
 8006f58:	4413      	add	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d104      	bne.n	8006f7c <vTaskSwitchContext+0x90>
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	605a      	str	r2, [r3, #4]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	4a08      	ldr	r2, [pc, #32]	; (8006fa4 <vTaskSwitchContext+0xb8>)
 8006f84:	6013      	str	r3, [r2, #0]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000400c 	.word	0x2000400c
 8006f98:	20003ff8 	.word	0x20003ff8
 8006f9c:	20003fec 	.word	0x20003fec
 8006fa0:	20003ee8 	.word	0x20003ee8
 8006fa4:	20003ee4 	.word	0x20003ee4

08006fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006fb0:	f000 f852 	bl	8007058 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <prvIdleTask+0x28>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d9f9      	bls.n	8006fb0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <prvIdleTask+0x2c>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006fcc:	e7f0      	b.n	8006fb0 <prvIdleTask+0x8>
 8006fce:	bf00      	nop
 8006fd0:	20003ee8 	.word	0x20003ee8
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	e00c      	b.n	8006ffe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4a12      	ldr	r2, [pc, #72]	; (8007038 <prvInitialiseTaskLists+0x60>)
 8006ff0:	4413      	add	r3, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff fac9 	bl	800658a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b06      	cmp	r3, #6
 8007002:	d9ef      	bls.n	8006fe4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007004:	480d      	ldr	r0, [pc, #52]	; (800703c <prvInitialiseTaskLists+0x64>)
 8007006:	f7ff fac0 	bl	800658a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800700a:	480d      	ldr	r0, [pc, #52]	; (8007040 <prvInitialiseTaskLists+0x68>)
 800700c:	f7ff fabd 	bl	800658a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007010:	480c      	ldr	r0, [pc, #48]	; (8007044 <prvInitialiseTaskLists+0x6c>)
 8007012:	f7ff faba 	bl	800658a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007016:	480c      	ldr	r0, [pc, #48]	; (8007048 <prvInitialiseTaskLists+0x70>)
 8007018:	f7ff fab7 	bl	800658a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800701c:	480b      	ldr	r0, [pc, #44]	; (800704c <prvInitialiseTaskLists+0x74>)
 800701e:	f7ff fab4 	bl	800658a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007022:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <prvInitialiseTaskLists+0x78>)
 8007024:	4a05      	ldr	r2, [pc, #20]	; (800703c <prvInitialiseTaskLists+0x64>)
 8007026:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007028:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <prvInitialiseTaskLists+0x7c>)
 800702a:	4a05      	ldr	r2, [pc, #20]	; (8007040 <prvInitialiseTaskLists+0x68>)
 800702c:	601a      	str	r2, [r3, #0]
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20003ee8 	.word	0x20003ee8
 800703c:	20003f74 	.word	0x20003f74
 8007040:	20003f88 	.word	0x20003f88
 8007044:	20003fa4 	.word	0x20003fa4
 8007048:	20003fb8 	.word	0x20003fb8
 800704c:	20003fd0 	.word	0x20003fd0
 8007050:	20003f9c 	.word	0x20003f9c
 8007054:	20003fa0 	.word	0x20003fa0

08007058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800705e:	e019      	b.n	8007094 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007060:	f000 fcb6 	bl	80079d0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <prvCheckTasksWaitingTermination+0x50>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff faf0 	bl	8006656 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <prvCheckTasksWaitingTermination+0x54>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3b01      	subs	r3, #1
 800707c:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <prvCheckTasksWaitingTermination+0x54>)
 800707e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007080:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <prvCheckTasksWaitingTermination+0x58>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3b01      	subs	r3, #1
 8007086:	4a0a      	ldr	r2, [pc, #40]	; (80070b0 <prvCheckTasksWaitingTermination+0x58>)
 8007088:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800708a:	f000 fcd5 	bl	8007a38 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f810 	bl	80070b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <prvCheckTasksWaitingTermination+0x58>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e1      	bne.n	8007060 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20003fb8 	.word	0x20003fb8
 80070ac:	20003fe4 	.word	0x20003fe4
 80070b0:	20003fcc 	.word	0x20003fcc

080070b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d108      	bne.n	80070d8 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFreeStack( pxTCB->pxStack );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fd88 	bl	8007be0 <vPortFree>
                    vPortFree( pxTCB );
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fd85 	bl	8007be0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80070d6:	e01a      	b.n	800710e <prvDeleteTCB+0x5a>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d103      	bne.n	80070ea <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fd7c 	bl	8007be0 <vPortFree>
    }
 80070e8:	e011      	b.n	800710e <prvDeleteTCB+0x5a>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d00c      	beq.n	800710e <prvDeleteTCB+0x5a>
        __asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	b672      	cpsid	i
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	b662      	cpsie	i
 8007108:	60fb      	str	r3, [r7, #12]
    }
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <prvDeleteTCB+0x58>
    }
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <prvResetNextTaskUnblockTime+0x30>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <prvResetNextTaskUnblockTime+0x34>)
 8007128:	f04f 32ff 	mov.w	r2, #4294967295
 800712c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800712e:	e005      	b.n	800713c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <prvResetNextTaskUnblockTime+0x30>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a04      	ldr	r2, [pc, #16]	; (800714c <prvResetNextTaskUnblockTime+0x34>)
 800713a:	6013      	str	r3, [r2, #0]
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20003f9c 	.word	0x20003f9c
 800714c:	20004004 	.word	0x20004004

08007150 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <ulTaskGenericNotifyTake+0x2c>
        __asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	b672      	cpsid	i
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	b662      	cpsie	i
 8007176:	613b      	str	r3, [r7, #16]
    }
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <ulTaskGenericNotifyTake+0x2a>

        taskENTER_CRITICAL();
 800717c:	f000 fc28 	bl	80079d0 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8007180:	4b28      	ldr	r3, [pc, #160]	; (8007224 <ulTaskGenericNotifyTake+0xd4>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3312      	adds	r3, #18
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d115      	bne.n	80071be <ulTaskGenericNotifyTake+0x6e>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <ulTaskGenericNotifyTake+0xd4>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	3350      	adds	r3, #80	; 0x50
 800719c:	2201      	movs	r2, #1
 800719e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <ulTaskGenericNotifyTake+0x6e>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071a6:	2101      	movs	r1, #1
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fa81 	bl	80076b0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80071ae:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <ulTaskGenericNotifyTake+0xd8>)
 80071b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80071be:	f000 fc3b 	bl	8007a38 <vPortExitCritical>

        taskENTER_CRITICAL();
 80071c2:	f000 fc05 	bl	80079d0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80071c6:	4b17      	ldr	r3, [pc, #92]	; (8007224 <ulTaskGenericNotifyTake+0xd4>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3312      	adds	r3, #18
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d014      	beq.n	8007206 <ulTaskGenericNotifyTake+0xb6>
            {
                if( xClearCountOnExit != pdFALSE )
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <ulTaskGenericNotifyTake+0xa4>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <ulTaskGenericNotifyTake+0xd4>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3312      	adds	r3, #18
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	2200      	movs	r2, #0
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	e008      	b.n	8007206 <ulTaskGenericNotifyTake+0xb6>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 80071f4:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <ulTaskGenericNotifyTake+0xd4>)
 80071f6:	6819      	ldr	r1, [r3, #0]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	1e5a      	subs	r2, r3, #1
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3312      	adds	r3, #18
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <ulTaskGenericNotifyTake+0xd4>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	3350      	adds	r3, #80	; 0x50
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007214:	f000 fc10 	bl	8007a38 <vPortExitCritical>

        return ulReturn;
 8007218:	697b      	ldr	r3, [r7, #20]
    }
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20003ee4 	.word	0x20003ee4
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800722c:	b580      	push	{r7, lr}
 800722e:	b08e      	sub	sp, #56	; 0x38
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800723a:	2301      	movs	r3, #1
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00c      	beq.n	800725e <xTaskGenericNotify+0x32>
        __asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	b672      	cpsid	i
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	b662      	cpsie	i
 8007258:	623b      	str	r3, [r7, #32]
    }
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10c      	bne.n	800727e <xTaskGenericNotify+0x52>
        __asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	b672      	cpsid	i
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	b662      	cpsie	i
 8007278:	61fb      	str	r3, [r7, #28]
    }
 800727a:	bf00      	nop
 800727c:	e7fe      	b.n	800727c <xTaskGenericNotify+0x50>
        pxTCB = xTaskToNotify;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8007282:	f000 fba5 	bl	80079d0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <xTaskGenericNotify+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800728c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	3312      	adds	r3, #18
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800729c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4413      	add	r3, r2
 80072a2:	3350      	adds	r3, #80	; 0x50
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80072aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4413      	add	r3, r2
 80072b0:	3350      	adds	r3, #80	; 0x50
 80072b2:	2202      	movs	r2, #2
 80072b4:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d841      	bhi.n	8007340 <xTaskGenericNotify+0x114>
 80072bc:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <xTaskGenericNotify+0x98>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	08007363 	.word	0x08007363
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	080072f7 	.word	0x080072f7
 80072d0:	08007313 	.word	0x08007313
 80072d4:	08007323 	.word	0x08007323
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80072d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	3312      	adds	r3, #18
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3312      	adds	r3, #18
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	605a      	str	r2, [r3, #4]
                    break;
 80072f4:	e038      	b.n	8007368 <xTaskGenericNotify+0x13c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80072f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3312      	adds	r3, #18
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	3312      	adds	r3, #18
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	605a      	str	r2, [r3, #4]
                    break;
 8007310:	e02a      	b.n	8007368 <xTaskGenericNotify+0x13c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3312      	adds	r3, #18
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	605a      	str	r2, [r3, #4]
                    break;
 8007320:	e022      	b.n	8007368 <xTaskGenericNotify+0x13c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007326:	2b02      	cmp	r3, #2
 8007328:	d007      	beq.n	800733a <xTaskGenericNotify+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800732a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	3312      	adds	r3, #18
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007338:	e016      	b.n	8007368 <xTaskGenericNotify+0x13c>
                        xReturn = pdFAIL;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 800733e:	e013      	b.n	8007368 <xTaskGenericNotify+0x13c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007340:	4b4e      	ldr	r3, [pc, #312]	; (800747c <xTaskGenericNotify+0x250>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00e      	beq.n	8007366 <xTaskGenericNotify+0x13a>
        __asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	b672      	cpsid	i
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	b662      	cpsie	i
 800735c:	61bb      	str	r3, [r7, #24]
    }
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xTaskGenericNotify+0x134>
                    break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <xTaskGenericNotify+0x13c>

                    break;
 8007366:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800736c:	2b01      	cmp	r3, #1
 800736e:	d17d      	bne.n	800746c <xTaskGenericNotify+0x240>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737c:	68d2      	ldr	r2, [r2, #12]
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007386:	6892      	ldr	r2, [r2, #8]
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	3304      	adds	r3, #4
 8007392:	429a      	cmp	r2, r3
 8007394:	d103      	bne.n	800739e <xTaskGenericNotify+0x172>
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	605a      	str	r2, [r3, #4]
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	2200      	movs	r2, #0
 80073a2:	615a      	str	r2, [r3, #20]
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	1e5a      	subs	r2, r3, #1
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	2201      	movs	r2, #1
 80073b4:	409a      	lsls	r2, r3
 80073b6:	4b32      	ldr	r3, [pc, #200]	; (8007480 <xTaskGenericNotify+0x254>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	4a30      	ldr	r2, [pc, #192]	; (8007480 <xTaskGenericNotify+0x254>)
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c4:	492f      	ldr	r1, [pc, #188]	; (8007484 <xTaskGenericNotify+0x258>)
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	3304      	adds	r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073da:	609a      	str	r2, [r3, #8]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	3204      	adds	r2, #4
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	1d1a      	adds	r2, r3, #4
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	609a      	str	r2, [r3, #8]
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4a20      	ldr	r2, [pc, #128]	; (8007484 <xTaskGenericNotify+0x258>)
 8007404:	441a      	add	r2, r3
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	615a      	str	r2, [r3, #20]
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	491d      	ldr	r1, [pc, #116]	; (8007484 <xTaskGenericNotify+0x258>)
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	1c59      	adds	r1, r3, #1
 800741e:	4819      	ldr	r0, [pc, #100]	; (8007484 <xTaskGenericNotify+0x258>)
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4403      	add	r3, r0
 800742a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <xTaskGenericNotify+0x222>
        __asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	b672      	cpsid	i
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	b662      	cpsie	i
 8007448:	617b      	str	r3, [r7, #20]
    }
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xTaskGenericNotify+0x220>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <xTaskGenericNotify+0x25c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	429a      	cmp	r2, r3
 800745a:	d907      	bls.n	800746c <xTaskGenericNotify+0x240>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800745c:	4b0b      	ldr	r3, [pc, #44]	; (800748c <xTaskGenericNotify+0x260>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800746c:	f000 fae4 	bl	8007a38 <vPortExitCritical>

        return xReturn;
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8007472:	4618      	mov	r0, r3
 8007474:	3738      	adds	r7, #56	; 0x38
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20003fe8 	.word	0x20003fe8
 8007480:	20003fec 	.word	0x20003fec
 8007484:	20003ee8 	.word	0x20003ee8
 8007488:	20003ee4 	.word	0x20003ee4
 800748c:	e000ed04 	.word	0xe000ed04

08007490 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007490:	b580      	push	{r7, lr}
 8007492:	b090      	sub	sp, #64	; 0x40
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10c      	bne.n	80074bc <vTaskGenericNotifyGiveFromISR+0x2c>
        __asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	b672      	cpsid	i
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	b662      	cpsie	i
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <vTaskGenericNotifyGiveFromISR+0x2a>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00c      	beq.n	80074dc <vTaskGenericNotifyGiveFromISR+0x4c>
        __asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	b672      	cpsid	i
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	b662      	cpsie	i
 80074d6:	623b      	str	r3, [r7, #32]
    }
 80074d8:	bf00      	nop
 80074da:	e7fe      	b.n	80074da <vTaskGenericNotifyGiveFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074dc:	f000 fb3c 	bl	8007b58 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80074e4:	f3ef 8211 	mrs	r2, BASEPRI
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	b672      	cpsid	i
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	b662      	cpsie	i
 80074fc:	61fa      	str	r2, [r7, #28]
 80074fe:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8007500:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007502:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4413      	add	r3, r2
 800750a:	3350      	adds	r3, #80	; 0x50
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4413      	add	r3, r2
 8007518:	3350      	adds	r3, #80	; 0x50
 800751a:	2202      	movs	r2, #2
 800751c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800751e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	3312      	adds	r3, #18
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	3312      	adds	r3, #18
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800753c:	2b01      	cmp	r3, #1
 800753e:	f040 80a0 	bne.w	8007682 <vTaskGenericNotifyGiveFromISR+0x1f2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00c      	beq.n	8007564 <vTaskGenericNotifyGiveFromISR+0xd4>
        __asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	b672      	cpsid	i
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	b662      	cpsie	i
 800755e:	617b      	str	r3, [r7, #20]
    }
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vTaskGenericNotifyGiveFromISR+0xd2>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007564:	4b4c      	ldr	r3, [pc, #304]	; (8007698 <vTaskGenericNotifyGiveFromISR+0x208>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d15e      	bne.n	800762a <vTaskGenericNotifyGiveFromISR+0x19a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007578:	68d2      	ldr	r2, [r2, #12]
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007582:	6892      	ldr	r2, [r2, #8]
 8007584:	605a      	str	r2, [r3, #4]
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758c:	3304      	adds	r3, #4
 800758e:	429a      	cmp	r2, r3
 8007590:	d103      	bne.n	800759a <vTaskGenericNotifyGiveFromISR+0x10a>
 8007592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759c:	2200      	movs	r2, #0
 800759e:	615a      	str	r2, [r3, #20]
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	1e5a      	subs	r2, r3, #1
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80075aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	2201      	movs	r2, #1
 80075b0:	409a      	lsls	r2, r3
 80075b2:	4b3a      	ldr	r3, [pc, #232]	; (800769c <vTaskGenericNotifyGiveFromISR+0x20c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	4a38      	ldr	r2, [pc, #224]	; (800769c <vTaskGenericNotifyGiveFromISR+0x20c>)
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	4937      	ldr	r1, [pc, #220]	; (80076a0 <vTaskGenericNotifyGiveFromISR+0x210>)
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	3304      	adds	r3, #4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075e6:	3204      	adds	r2, #4
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ec:	1d1a      	adds	r2, r3, #4
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	609a      	str	r2, [r3, #8]
 80075f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4a28      	ldr	r2, [pc, #160]	; (80076a0 <vTaskGenericNotifyGiveFromISR+0x210>)
 8007600:	441a      	add	r2, r3
 8007602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007604:	615a      	str	r2, [r3, #20]
 8007606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	4925      	ldr	r1, [pc, #148]	; (80076a0 <vTaskGenericNotifyGiveFromISR+0x210>)
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	1c59      	adds	r1, r3, #1
 800761a:	4821      	ldr	r0, [pc, #132]	; (80076a0 <vTaskGenericNotifyGiveFromISR+0x210>)
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4403      	add	r3, r0
 8007626:	6019      	str	r1, [r3, #0]
 8007628:	e01b      	b.n	8007662 <vTaskGenericNotifyGiveFromISR+0x1d2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800762a:	4b1e      	ldr	r3, [pc, #120]	; (80076a4 <vTaskGenericNotifyGiveFromISR+0x214>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
 8007630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007634:	61da      	str	r2, [r3, #28]
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763c:	621a      	str	r2, [r3, #32]
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007644:	3218      	adds	r2, #24
 8007646:	605a      	str	r2, [r3, #4]
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	f103 0218 	add.w	r2, r3, #24
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	609a      	str	r2, [r3, #8]
 8007652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007654:	4a13      	ldr	r2, [pc, #76]	; (80076a4 <vTaskGenericNotifyGiveFromISR+0x214>)
 8007656:	629a      	str	r2, [r3, #40]	; 0x28
 8007658:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <vTaskGenericNotifyGiveFromISR+0x214>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3301      	adds	r3, #1
 800765e:	4a11      	ldr	r2, [pc, #68]	; (80076a4 <vTaskGenericNotifyGiveFromISR+0x214>)
 8007660:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <vTaskGenericNotifyGiveFromISR+0x218>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	429a      	cmp	r2, r3
 800766e:	d908      	bls.n	8007682 <vTaskGenericNotifyGiveFromISR+0x1f2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <vTaskGenericNotifyGiveFromISR+0x1ec>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <vTaskGenericNotifyGiveFromISR+0x21c>)
 800767e:	2201      	movs	r2, #1
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800768c:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 800768e:	bf00      	nop
 8007690:	3740      	adds	r7, #64	; 0x40
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	2000400c 	.word	0x2000400c
 800769c:	20003fec 	.word	0x20003fec
 80076a0:	20003ee8 	.word	0x20003ee8
 80076a4:	20003fa4 	.word	0x20003fa4
 80076a8:	20003ee4 	.word	0x20003ee4
 80076ac:	20003ff8 	.word	0x20003ff8

080076b0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80076ba:	4b36      	ldr	r3, [pc, #216]	; (8007794 <prvAddCurrentTaskToDelayedList+0xe4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c0:	4b35      	ldr	r3, [pc, #212]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe ffc5 	bl	8006656 <uxListRemove>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10b      	bne.n	80076ea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80076d2:	4b31      	ldr	r3, [pc, #196]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	2201      	movs	r2, #1
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	43da      	mvns	r2, r3
 80076e0:	4b2e      	ldr	r3, [pc, #184]	; (800779c <prvAddCurrentTaskToDelayedList+0xec>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4013      	ands	r3, r2
 80076e6:	4a2d      	ldr	r2, [pc, #180]	; (800779c <prvAddCurrentTaskToDelayedList+0xec>)
 80076e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d124      	bne.n	800773c <prvAddCurrentTaskToDelayedList+0x8c>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d021      	beq.n	800773c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f8:	4b29      	ldr	r3, [pc, #164]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	4b26      	ldr	r3, [pc, #152]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	609a      	str	r2, [r3, #8]
 8007706:	4b24      	ldr	r3, [pc, #144]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	6892      	ldr	r2, [r2, #8]
 800770e:	60da      	str	r2, [r3, #12]
 8007710:	4b21      	ldr	r3, [pc, #132]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	3204      	adds	r2, #4
 800771a:	605a      	str	r2, [r3, #4]
 800771c:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	4b1c      	ldr	r3, [pc, #112]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1d      	ldr	r2, [pc, #116]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800772c:	615a      	str	r2, [r3, #20]
 800772e:	4b1c      	ldr	r3, [pc, #112]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800773a:	e026      	b.n	800778a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007744:	4b14      	ldr	r3, [pc, #80]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	429a      	cmp	r2, r3
 8007752:	d209      	bcs.n	8007768 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007754:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3304      	adds	r3, #4
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f7fe ff3f 	bl	80065e4 <vListInsert>
}
 8007766:	e010      	b.n	800778a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007768:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <prvAddCurrentTaskToDelayedList+0xe8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3304      	adds	r3, #4
 8007772:	4619      	mov	r1, r3
 8007774:	4610      	mov	r0, r2
 8007776:	f7fe ff35 	bl	80065e4 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800777a:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <prvAddCurrentTaskToDelayedList+0xfc>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	429a      	cmp	r2, r3
 8007782:	d202      	bcs.n	800778a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8007784:	4a09      	ldr	r2, [pc, #36]	; (80077ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6013      	str	r3, [r2, #0]
}
 800778a:	bf00      	nop
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20003fe8 	.word	0x20003fe8
 8007798:	20003ee4 	.word	0x20003ee4
 800779c:	20003fec 	.word	0x20003fec
 80077a0:	20003fd0 	.word	0x20003fd0
 80077a4:	20003fa0 	.word	0x20003fa0
 80077a8:	20003f9c 	.word	0x20003f9c
 80077ac:	20004004 	.word	0x20004004

080077b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3b04      	subs	r3, #4
 80077c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f023 0201 	bic.w	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3b04      	subs	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80077e0:	4a0c      	ldr	r2, [pc, #48]	; (8007814 <pxPortInitialiseStack+0x64>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3b14      	subs	r3, #20
 80077ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f06f 0202 	mvn.w	r2, #2
 80077fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3b20      	subs	r3, #32
 8007804:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007806:	68fb      	ldr	r3, [r7, #12]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	08007819 	.word	0x08007819

08007818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007822:	4b14      	ldr	r3, [pc, #80]	; (8007874 <prvTaskExitError+0x5c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d00c      	beq.n	8007846 <prvTaskExitError+0x2e>
        __asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	b672      	cpsid	i
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	b662      	cpsie	i
 8007840:	60fb      	str	r3, [r7, #12]
    }
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <prvTaskExitError+0x2c>
        __asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	b672      	cpsid	i
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	b662      	cpsie	i
 800785a:	60bb      	str	r3, [r7, #8]
    }
 800785c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800785e:	bf00      	nop
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0fc      	beq.n	8007860 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	20000018 	.word	0x20000018
	...

08007880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007880:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <pxCurrentTCBConst2>)
 8007882:	6819      	ldr	r1, [r3, #0]
 8007884:	6808      	ldr	r0, [r1, #0]
 8007886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788a:	f380 8809 	msr	PSP, r0
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8811 	msr	BASEPRI, r0
 800789a:	4770      	bx	lr
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst2>:
 80078a0:	20003ee4 	.word	0x20003ee4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80078a8:	4808      	ldr	r0, [pc, #32]	; (80078cc <prvPortStartFirstTask+0x24>)
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	6800      	ldr	r0, [r0, #0]
 80078ae:	f380 8808 	msr	MSP, r0
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8814 	msr	CONTROL, r0
 80078ba:	b662      	cpsie	i
 80078bc:	b661      	cpsie	f
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	df00      	svc	0
 80078c8:	bf00      	nop
 80078ca:	0000      	.short	0x0000
 80078cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop

080078d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078da:	4b37      	ldr	r3, [pc, #220]	; (80079b8 <xPortStartScheduler+0xe4>)
 80078dc:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	22ff      	movs	r2, #255	; 0xff
 80078ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	4b2f      	ldr	r3, [pc, #188]	; (80079bc <xPortStartScheduler+0xe8>)
 8007900:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007902:	4b2f      	ldr	r3, [pc, #188]	; (80079c0 <xPortStartScheduler+0xec>)
 8007904:	2207      	movs	r2, #7
 8007906:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007908:	e009      	b.n	800791e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800790a:	4b2d      	ldr	r3, [pc, #180]	; (80079c0 <xPortStartScheduler+0xec>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3b01      	subs	r3, #1
 8007910:	4a2b      	ldr	r2, [pc, #172]	; (80079c0 <xPortStartScheduler+0xec>)
 8007912:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b2db      	uxtb	r3, r3
 800791c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007926:	2b80      	cmp	r3, #128	; 0x80
 8007928:	d0ef      	beq.n	800790a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800792a:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <xPortStartScheduler+0xec>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f1c3 0307 	rsb	r3, r3, #7
 8007932:	2b04      	cmp	r3, #4
 8007934:	d00c      	beq.n	8007950 <xPortStartScheduler+0x7c>
        __asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	b672      	cpsid	i
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	b662      	cpsie	i
 800794a:	60bb      	str	r3, [r7, #8]
    }
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <xPortStartScheduler+0xec>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	4a1a      	ldr	r2, [pc, #104]	; (80079c0 <xPortStartScheduler+0xec>)
 8007958:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800795a:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <xPortStartScheduler+0xec>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007962:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <xPortStartScheduler+0xec>)
 8007964:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <xPortStartScheduler+0xf0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a14      	ldr	r2, [pc, #80]	; (80079c4 <xPortStartScheduler+0xf0>)
 8007974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007978:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <xPortStartScheduler+0xf0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a11      	ldr	r2, [pc, #68]	; (80079c4 <xPortStartScheduler+0xf0>)
 8007980:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007984:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007986:	f000 f8b7 	bl	8007af8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800798a:	4b0f      	ldr	r3, [pc, #60]	; (80079c8 <xPortStartScheduler+0xf4>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007990:	f000 f8d6 	bl	8007b40 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007994:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <xPortStartScheduler+0xf8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a0c      	ldr	r2, [pc, #48]	; (80079cc <xPortStartScheduler+0xf8>)
 800799a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800799e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80079a0:	f7ff ff82 	bl	80078a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80079a4:	f7ff faa2 	bl	8006eec <vTaskSwitchContext>
    prvTaskExitError();
 80079a8:	f7ff ff36 	bl	8007818 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	e000e400 	.word	0xe000e400
 80079bc:	20004010 	.word	0x20004010
 80079c0:	20004014 	.word	0x20004014
 80079c4:	e000ed20 	.word	0xe000ed20
 80079c8:	20000018 	.word	0x20000018
 80079cc:	e000ef34 	.word	0xe000ef34

080079d0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
        __asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	b672      	cpsid	i
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	b662      	cpsie	i
 80079ea:	607b      	str	r3, [r7, #4]
    }
 80079ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <vPortEnterCritical+0x60>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a0e      	ldr	r2, [pc, #56]	; (8007a30 <vPortEnterCritical+0x60>)
 80079f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80079f8:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <vPortEnterCritical+0x60>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d111      	bne.n	8007a24 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a00:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <vPortEnterCritical+0x64>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00c      	beq.n	8007a24 <vPortEnterCritical+0x54>
        __asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	b672      	cpsid	i
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	b662      	cpsie	i
 8007a1e:	603b      	str	r3, [r7, #0]
    }
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <vPortEnterCritical+0x52>
    }
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	20000018 	.word	0x20000018
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007a3e:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <vPortExitCritical+0x54>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10c      	bne.n	8007a60 <vPortExitCritical+0x28>
        __asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	b672      	cpsid	i
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	b662      	cpsie	i
 8007a5a:	607b      	str	r3, [r7, #4]
    }
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <vPortExitCritical+0x54>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <vPortExitCritical+0x54>)
 8007a68:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007a6a:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <vPortExitCritical+0x54>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <vPortExitCritical+0x46>
 8007a72:	2300      	movs	r3, #0
 8007a74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	f383 8811 	msr	BASEPRI, r3
    }
 8007a7c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000018 	.word	0x20000018

08007a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007a90:	f3ef 8009 	mrs	r0, PSP
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <pxCurrentTCBConst>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f01e 0f10 	tst.w	lr, #16
 8007aa0:	bf08      	it	eq
 8007aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ab4:	b672      	cpsid	i
 8007ab6:	f380 8811 	msr	BASEPRI, r0
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	b662      	cpsie	i
 8007ac4:	f7ff fa12 	bl	8006eec <vTaskSwitchContext>
 8007ac8:	f04f 0000 	mov.w	r0, #0
 8007acc:	f380 8811 	msr	BASEPRI, r0
 8007ad0:	bc09      	pop	{r0, r3}
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	6808      	ldr	r0, [r1, #0]
 8007ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ada:	f01e 0f10 	tst.w	lr, #16
 8007ade:	bf08      	it	eq
 8007ae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ae4:	f380 8809 	msr	PSP, r0
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop

08007af0 <pxCurrentTCBConst>:
 8007af0:	20003ee4 	.word	0x20003ee4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007afc:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <vPortSetupTimerInterrupt+0x34>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <vPortSetupTimerInterrupt+0x38>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <vPortSetupTimerInterrupt+0x3c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a0a      	ldr	r2, [pc, #40]	; (8007b38 <vPortSetupTimerInterrupt+0x40>)
 8007b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b12:	099b      	lsrs	r3, r3, #6
 8007b14:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <vPortSetupTimerInterrupt+0x44>)
 8007b16:	3b01      	subs	r3, #1
 8007b18:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b1a:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <vPortSetupTimerInterrupt+0x34>)
 8007b1c:	2207      	movs	r2, #7
 8007b1e:	601a      	str	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	e000e010 	.word	0xe000e010
 8007b30:	e000e018 	.word	0xe000e018
 8007b34:	20000008 	.word	0x20000008
 8007b38:	10624dd3 	.word	0x10624dd3
 8007b3c:	e000e014 	.word	0xe000e014

08007b40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007b40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b50 <vPortEnableVFP+0x10>
 8007b44:	6801      	ldr	r1, [r0, #0]
 8007b46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b4a:	6001      	str	r1, [r0, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	0000      	.short	0x0000
 8007b50:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop

08007b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007b5e:	f3ef 8305 	mrs	r3, IPSR
 8007b62:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b0f      	cmp	r3, #15
 8007b68:	d916      	bls.n	8007b98 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b6a:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <vPortValidateInterruptPriority+0x78>)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <vPortValidateInterruptPriority+0x7c>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	7afa      	ldrb	r2, [r7, #11]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d20c      	bcs.n	8007b98 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	b672      	cpsid	i
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	b662      	cpsie	i
 8007b92:	607b      	str	r3, [r7, #4]
    }
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <vPortValidateInterruptPriority+0x80>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ba0:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <vPortValidateInterruptPriority+0x84>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d90c      	bls.n	8007bc2 <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	b672      	cpsid	i
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	b662      	cpsie	i
 8007bbc:	603b      	str	r3, [r7, #0]
    }
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <vPortValidateInterruptPriority+0x68>
    }
 8007bc2:	bf00      	nop
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	e000e3f0 	.word	0xe000e3f0
 8007bd4:	20004010 	.word	0x20004010
 8007bd8:	e000ed0c 	.word	0xe000ed0c
 8007bdc:	20004014 	.word	0x20004014

08007be0 <vPortFree>:
    return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d051      	beq.n	8007c96 <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	4b26      	ldr	r3, [pc, #152]	; (8007ca0 <vPortFree+0xc0>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10c      	bne.n	8007c28 <vPortFree+0x48>
        __asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	b672      	cpsid	i
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	b662      	cpsie	i
 8007c22:	60fb      	str	r3, [r7, #12]
    }
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00c      	beq.n	8007c4a <vPortFree+0x6a>
        __asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	b672      	cpsid	i
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	b662      	cpsie	i
 8007c44:	60bb      	str	r3, [r7, #8]
    }
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <vPortFree+0xc0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01e      	beq.n	8007c96 <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d11a      	bne.n	8007c96 <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <vPortFree+0xc0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	401a      	ands	r2, r3
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007c70:	f7fe ff18 	bl	8006aa4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <vPortFree+0xc4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <vPortFree+0xc4>)
 8007c80:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c82:	6938      	ldr	r0, [r7, #16]
 8007c84:	f000 f812 	bl	8007cac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <vPortFree+0xc8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	4a06      	ldr	r2, [pc, #24]	; (8007ca8 <vPortFree+0xc8>)
 8007c90:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007c92:	f7fe ff15 	bl	8006ac0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007c96:	bf00      	nop
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	2000402c 	.word	0x2000402c
 8007ca4:	20004024 	.word	0x20004024
 8007ca8:	20004028 	.word	0x20004028

08007cac <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cb4:	4b28      	ldr	r3, [pc, #160]	; (8007d58 <prvInsertBlockIntoFreeList+0xac>)
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e002      	b.n	8007cc0 <prvInsertBlockIntoFreeList+0x14>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d8f7      	bhi.n	8007cba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d108      	bne.n	8007cee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	441a      	add	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d118      	bne.n	8007d34 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <prvInsertBlockIntoFreeList+0xb0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d00d      	beq.n	8007d2a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e008      	b.n	8007d3c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <prvInsertBlockIntoFreeList+0xb0>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e003      	b.n	8007d3c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d002      	beq.n	8007d4a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007d4a:	bf00      	nop
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20004018 	.word	0x20004018
 8007d5c:	20004020 	.word	0x20004020

08007d60 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007d66:	4b8d      	ldr	r3, [pc, #564]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007d68:	22c0      	movs	r2, #192	; 0xc0
 8007d6a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007d6c:	4b8b      	ldr	r3, [pc, #556]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007d6e:	22a8      	movs	r2, #168	; 0xa8
 8007d70:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007d72:	4b8a      	ldr	r3, [pc, #552]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8007d78:	4b88      	ldr	r3, [pc, #544]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007d7a:	220a      	movs	r2, #10
 8007d7c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007d7e:	4b88      	ldr	r3, [pc, #544]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007d84:	4b86      	ldr	r3, [pc, #536]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007d86:	22ff      	movs	r2, #255	; 0xff
 8007d88:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007d8a:	4b85      	ldr	r3, [pc, #532]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007d8c:	22ff      	movs	r2, #255	; 0xff
 8007d8e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007d90:	4b83      	ldr	r3, [pc, #524]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007d96:	4b83      	ldr	r3, [pc, #524]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007d9c:	4b81      	ldr	r3, [pc, #516]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007da2:	4b80      	ldr	r3, [pc, #512]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007da8:	4b7e      	ldr	r3, [pc, #504]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007dae:	f000 fce5 	bl	800877c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007db2:	4b7a      	ldr	r3, [pc, #488]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	061a      	lsls	r2, r3, #24
 8007db8:	4b78      	ldr	r3, [pc, #480]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	4b76      	ldr	r3, [pc, #472]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007dc2:	789b      	ldrb	r3, [r3, #2]
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	4a74      	ldr	r2, [pc, #464]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007dca:	78d2      	ldrb	r2, [r2, #3]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	061a      	lsls	r2, r3, #24
 8007dd0:	4b72      	ldr	r3, [pc, #456]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	0619      	lsls	r1, r3, #24
 8007dd6:	4b71      	ldr	r3, [pc, #452]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	041b      	lsls	r3, r3, #16
 8007ddc:	4319      	orrs	r1, r3
 8007dde:	4b6f      	ldr	r3, [pc, #444]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007de0:	789b      	ldrb	r3, [r3, #2]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	430b      	orrs	r3, r1
 8007de6:	496d      	ldr	r1, [pc, #436]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007de8:	78c9      	ldrb	r1, [r1, #3]
 8007dea:	430b      	orrs	r3, r1
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007df2:	431a      	orrs	r2, r3
 8007df4:	4b69      	ldr	r3, [pc, #420]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	0619      	lsls	r1, r3, #24
 8007dfa:	4b68      	ldr	r3, [pc, #416]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007dfc:	785b      	ldrb	r3, [r3, #1]
 8007dfe:	041b      	lsls	r3, r3, #16
 8007e00:	4319      	orrs	r1, r3
 8007e02:	4b66      	ldr	r3, [pc, #408]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007e04:	789b      	ldrb	r3, [r3, #2]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	4964      	ldr	r1, [pc, #400]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007e0c:	78c9      	ldrb	r1, [r1, #3]
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e16:	431a      	orrs	r2, r3
 8007e18:	4b60      	ldr	r3, [pc, #384]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	0619      	lsls	r1, r3, #24
 8007e1e:	4b5f      	ldr	r3, [pc, #380]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	4319      	orrs	r1, r3
 8007e26:	4b5d      	ldr	r3, [pc, #372]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007e28:	789b      	ldrb	r3, [r3, #2]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	495b      	ldr	r1, [pc, #364]	; (8007f9c <MX_LWIP_Init+0x23c>)
 8007e30:	78c9      	ldrb	r1, [r1, #3]
 8007e32:	430b      	orrs	r3, r1
 8007e34:	0e1b      	lsrs	r3, r3, #24
 8007e36:	4313      	orrs	r3, r2
 8007e38:	4a5b      	ldr	r2, [pc, #364]	; (8007fa8 <MX_LWIP_Init+0x248>)
 8007e3a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007e3c:	4b58      	ldr	r3, [pc, #352]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	061a      	lsls	r2, r3, #24
 8007e42:	4b57      	ldr	r3, [pc, #348]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	4b55      	ldr	r3, [pc, #340]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e4c:	789b      	ldrb	r3, [r3, #2]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	4313      	orrs	r3, r2
 8007e52:	4a53      	ldr	r2, [pc, #332]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e54:	78d2      	ldrb	r2, [r2, #3]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	061a      	lsls	r2, r3, #24
 8007e5a:	4b51      	ldr	r3, [pc, #324]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	0619      	lsls	r1, r3, #24
 8007e60:	4b4f      	ldr	r3, [pc, #316]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	041b      	lsls	r3, r3, #16
 8007e66:	4319      	orrs	r1, r3
 8007e68:	4b4d      	ldr	r3, [pc, #308]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e6a:	789b      	ldrb	r3, [r3, #2]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	494b      	ldr	r1, [pc, #300]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e72:	78c9      	ldrb	r1, [r1, #3]
 8007e74:	430b      	orrs	r3, r1
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	4b48      	ldr	r3, [pc, #288]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	0619      	lsls	r1, r3, #24
 8007e84:	4b46      	ldr	r3, [pc, #280]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	4319      	orrs	r1, r3
 8007e8c:	4b44      	ldr	r3, [pc, #272]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e8e:	789b      	ldrb	r3, [r3, #2]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	430b      	orrs	r3, r1
 8007e94:	4942      	ldr	r1, [pc, #264]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007e96:	78c9      	ldrb	r1, [r1, #3]
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	4b3f      	ldr	r3, [pc, #252]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	0619      	lsls	r1, r3, #24
 8007ea8:	4b3d      	ldr	r3, [pc, #244]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	041b      	lsls	r3, r3, #16
 8007eae:	4319      	orrs	r1, r3
 8007eb0:	4b3b      	ldr	r3, [pc, #236]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007eb2:	789b      	ldrb	r3, [r3, #2]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	4939      	ldr	r1, [pc, #228]	; (8007fa0 <MX_LWIP_Init+0x240>)
 8007eba:	78c9      	ldrb	r1, [r1, #3]
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	0e1b      	lsrs	r3, r3, #24
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	4a3a      	ldr	r2, [pc, #232]	; (8007fac <MX_LWIP_Init+0x24c>)
 8007ec4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007ec6:	4b37      	ldr	r3, [pc, #220]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	061a      	lsls	r2, r3, #24
 8007ecc:	4b35      	ldr	r3, [pc, #212]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	041b      	lsls	r3, r3, #16
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	4b33      	ldr	r3, [pc, #204]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007ed6:	789b      	ldrb	r3, [r3, #2]
 8007ed8:	021b      	lsls	r3, r3, #8
 8007eda:	4313      	orrs	r3, r2
 8007edc:	4a31      	ldr	r2, [pc, #196]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007ede:	78d2      	ldrb	r2, [r2, #3]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	061a      	lsls	r2, r3, #24
 8007ee4:	4b2f      	ldr	r3, [pc, #188]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	0619      	lsls	r1, r3, #24
 8007eea:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	4319      	orrs	r1, r3
 8007ef2:	4b2c      	ldr	r3, [pc, #176]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007ef4:	789b      	ldrb	r3, [r3, #2]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	492a      	ldr	r1, [pc, #168]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007efc:	78c9      	ldrb	r1, [r1, #3]
 8007efe:	430b      	orrs	r3, r1
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f06:	431a      	orrs	r2, r3
 8007f08:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	0619      	lsls	r1, r3, #24
 8007f0e:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	4319      	orrs	r1, r3
 8007f16:	4b23      	ldr	r3, [pc, #140]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f18:	789b      	ldrb	r3, [r3, #2]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	4921      	ldr	r1, [pc, #132]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f20:	78c9      	ldrb	r1, [r1, #3]
 8007f22:	430b      	orrs	r3, r1
 8007f24:	0a1b      	lsrs	r3, r3, #8
 8007f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	0619      	lsls	r1, r3, #24
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	041b      	lsls	r3, r3, #16
 8007f38:	4319      	orrs	r1, r3
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f3c:	789b      	ldrb	r3, [r3, #2]
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	430b      	orrs	r3, r1
 8007f42:	4918      	ldr	r1, [pc, #96]	; (8007fa4 <MX_LWIP_Init+0x244>)
 8007f44:	78c9      	ldrb	r1, [r1, #3]
 8007f46:	430b      	orrs	r3, r1
 8007f48:	0e1b      	lsrs	r3, r3, #24
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <MX_LWIP_Init+0x250>)
 8007f4e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007f50:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <MX_LWIP_Init+0x254>)
 8007f52:	9302      	str	r3, [sp, #8]
 8007f54:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <MX_LWIP_Init+0x258>)
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <MX_LWIP_Init+0x250>)
 8007f5e:	4a13      	ldr	r2, [pc, #76]	; (8007fac <MX_LWIP_Init+0x24c>)
 8007f60:	4911      	ldr	r1, [pc, #68]	; (8007fa8 <MX_LWIP_Init+0x248>)
 8007f62:	4816      	ldr	r0, [pc, #88]	; (8007fbc <MX_LWIP_Init+0x25c>)
 8007f64:	f001 f8b0 	bl	80090c8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007f68:	4814      	ldr	r0, [pc, #80]	; (8007fbc <MX_LWIP_Init+0x25c>)
 8007f6a:	f001 fa5f 	bl	800942c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <MX_LWIP_Init+0x25c>)
 8007f70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f74:	089b      	lsrs	r3, r3, #2
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007f80:	480e      	ldr	r0, [pc, #56]	; (8007fbc <MX_LWIP_Init+0x25c>)
 8007f82:	f001 fa63 	bl	800944c <netif_set_up>
 8007f86:	e002      	b.n	8007f8e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007f88:	480c      	ldr	r0, [pc, #48]	; (8007fbc <MX_LWIP_Init+0x25c>)
 8007f8a:	f001 facb 	bl	8009524 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007f8e:	490c      	ldr	r1, [pc, #48]	; (8007fc0 <MX_LWIP_Init+0x260>)
 8007f90:	480a      	ldr	r0, [pc, #40]	; (8007fbc <MX_LWIP_Init+0x25c>)
 8007f92:	f001 faf9 	bl	8009588 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007f96:	bf00      	nop
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20004070 	.word	0x20004070
 8007fa0:	20004074 	.word	0x20004074
 8007fa4:	20004078 	.word	0x20004078
 8007fa8:	20004064 	.word	0x20004064
 8007fac:	20004068 	.word	0x20004068
 8007fb0:	2000406c 	.word	0x2000406c
 8007fb4:	08012429 	.word	0x08012429
 8007fb8:	080085a9 	.word	0x080085a9
 8007fbc:	20004030 	.word	0x20004030
 8007fc0:	08008615 	.word	0x08008615

08007fc4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007fc8:	4803      	ldr	r0, [pc, #12]	; (8007fd8 <MX_LWIP_Process+0x14>)
 8007fca:	f000 facd 	bl	8008568 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007fce:	f007 fb5d 	bl	800f68c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007fd2:	bf00      	nop
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20004030 	.word	0x20004030

08007fdc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	; 0x38
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	60da      	str	r2, [r3, #12]
 8007ff2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a56      	ldr	r2, [pc, #344]	; (8008154 <HAL_ETH_MspInit+0x178>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	f040 80a6 	bne.w	800814c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008000:	4b55      	ldr	r3, [pc, #340]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	4a54      	ldr	r2, [pc, #336]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800800a:	6313      	str	r3, [r2, #48]	; 0x30
 800800c:	4b52      	ldr	r3, [pc, #328]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008014:	623b      	str	r3, [r7, #32]
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	4b4f      	ldr	r3, [pc, #316]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	4a4e      	ldr	r2, [pc, #312]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800801e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008022:	6313      	str	r3, [r2, #48]	; 0x30
 8008024:	4b4c      	ldr	r3, [pc, #304]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800802c:	61fb      	str	r3, [r7, #28]
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	4b49      	ldr	r3, [pc, #292]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	4a48      	ldr	r2, [pc, #288]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008036:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800803a:	6313      	str	r3, [r2, #48]	; 0x30
 800803c:	4b46      	ldr	r3, [pc, #280]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008048:	4b43      	ldr	r3, [pc, #268]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	4a42      	ldr	r2, [pc, #264]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800804e:	f043 0304 	orr.w	r3, r3, #4
 8008052:	6313      	str	r3, [r2, #48]	; 0x30
 8008054:	4b40      	ldr	r3, [pc, #256]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008060:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	4a3c      	ldr	r2, [pc, #240]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6313      	str	r3, [r2, #48]	; 0x30
 800806c:	4b3a      	ldr	r3, [pc, #232]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008078:	4b37      	ldr	r3, [pc, #220]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	4a36      	ldr	r2, [pc, #216]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800807e:	f043 0302 	orr.w	r3, r3, #2
 8008082:	6313      	str	r3, [r2, #48]	; 0x30
 8008084:	4b34      	ldr	r3, [pc, #208]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008090:	4b31      	ldr	r3, [pc, #196]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	4a30      	ldr	r2, [pc, #192]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 8008096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809a:	6313      	str	r3, [r2, #48]	; 0x30
 800809c:	4b2e      	ldr	r3, [pc, #184]	; (8008158 <HAL_ETH_MspInit+0x17c>)
 800809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80080a8:	2332      	movs	r3, #50	; 0x32
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ac:	2302      	movs	r3, #2
 80080ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080b4:	2303      	movs	r3, #3
 80080b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080b8:	230b      	movs	r3, #11
 80080ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c0:	4619      	mov	r1, r3
 80080c2:	4826      	ldr	r0, [pc, #152]	; (800815c <HAL_ETH_MspInit+0x180>)
 80080c4:	f7fa ffcc 	bl	8003060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80080c8:	2386      	movs	r3, #134	; 0x86
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080cc:	2302      	movs	r3, #2
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080d4:	2303      	movs	r3, #3
 80080d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080d8:	230b      	movs	r3, #11
 80080da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080e0:	4619      	mov	r1, r3
 80080e2:	481f      	ldr	r0, [pc, #124]	; (8008160 <HAL_ETH_MspInit+0x184>)
 80080e4:	f7fa ffbc 	bl	8003060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80080e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ee:	2302      	movs	r3, #2
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f6:	2303      	movs	r3, #3
 80080f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080fa:	230b      	movs	r3, #11
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80080fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008102:	4619      	mov	r1, r3
 8008104:	4817      	ldr	r0, [pc, #92]	; (8008164 <HAL_ETH_MspInit+0x188>)
 8008106:	f7fa ffab 	bl	8003060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800810a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008110:	2302      	movs	r3, #2
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008114:	2300      	movs	r3, #0
 8008116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008118:	2303      	movs	r3, #3
 800811a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800811c:	230b      	movs	r3, #11
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008124:	4619      	mov	r1, r3
 8008126:	4810      	ldr	r0, [pc, #64]	; (8008168 <HAL_ETH_MspInit+0x18c>)
 8008128:	f7fa ff9a 	bl	8003060 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800812c:	2200      	movs	r2, #0
 800812e:	2105      	movs	r1, #5
 8008130:	203d      	movs	r0, #61	; 0x3d
 8008132:	f7f9 f94a 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008136:	203d      	movs	r0, #61	; 0x3d
 8008138:	f7f9 f963 	bl	8001402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800813c:	2200      	movs	r2, #0
 800813e:	2105      	movs	r1, #5
 8008140:	203e      	movs	r0, #62	; 0x3e
 8008142:	f7f9 f942 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008146:	203e      	movs	r0, #62	; 0x3e
 8008148:	f7f9 f95b 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800814c:	bf00      	nop
 800814e:	3738      	adds	r7, #56	; 0x38
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	40028000 	.word	0x40028000
 8008158:	40023800 	.word	0x40023800
 800815c:	40020800 	.word	0x40020800
 8008160:	40020000 	.word	0x40020000
 8008164:	40020400 	.word	0x40020400
 8008168:	40021800 	.word	0x40021800

0800816c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008178:	4b4d      	ldr	r3, [pc, #308]	; (80082b0 <low_level_init+0x144>)
 800817a:	4a4e      	ldr	r2, [pc, #312]	; (80082b4 <low_level_init+0x148>)
 800817c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800817e:	4b4c      	ldr	r3, [pc, #304]	; (80082b0 <low_level_init+0x144>)
 8008180:	2201      	movs	r2, #1
 8008182:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008184:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <low_level_init+0x144>)
 8008186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800818a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800818c:	4b48      	ldr	r3, [pc, #288]	; (80082b0 <low_level_init+0x144>)
 800818e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008192:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008194:	4b46      	ldr	r3, [pc, #280]	; (80082b0 <low_level_init+0x144>)
 8008196:	2200      	movs	r2, #0
 8008198:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800819a:	2300      	movs	r3, #0
 800819c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800819e:	2380      	movs	r3, #128	; 0x80
 80081a0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80081a2:	23e1      	movs	r3, #225	; 0xe1
 80081a4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80081a6:	2300      	movs	r3, #0
 80081a8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80081aa:	2300      	movs	r3, #0
 80081ac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80081ae:	2300      	movs	r3, #0
 80081b0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80081b2:	4a3f      	ldr	r2, [pc, #252]	; (80082b0 <low_level_init+0x144>)
 80081b4:	f107 0308 	add.w	r3, r7, #8
 80081b8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80081ba:	4b3d      	ldr	r3, [pc, #244]	; (80082b0 <low_level_init+0x144>)
 80081bc:	2200      	movs	r2, #0
 80081be:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80081c0:	4b3b      	ldr	r3, [pc, #236]	; (80082b0 <low_level_init+0x144>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80081c6:	4b3a      	ldr	r3, [pc, #232]	; (80082b0 <low_level_init+0x144>)
 80081c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80081cc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80081ce:	4838      	ldr	r0, [pc, #224]	; (80082b0 <low_level_init+0x144>)
 80081d0:	f7f9 fda8 	bl	8001d24 <HAL_ETH_Init>
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d108      	bne.n	80081f0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081e4:	f043 0304 	orr.w	r3, r3, #4
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80081f0:	2304      	movs	r3, #4
 80081f2:	4a31      	ldr	r2, [pc, #196]	; (80082b8 <low_level_init+0x14c>)
 80081f4:	4931      	ldr	r1, [pc, #196]	; (80082bc <low_level_init+0x150>)
 80081f6:	482e      	ldr	r0, [pc, #184]	; (80082b0 <low_level_init+0x144>)
 80081f8:	f7f9 ff3a 	bl	8002070 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80081fc:	2304      	movs	r3, #4
 80081fe:	4a30      	ldr	r2, [pc, #192]	; (80082c0 <low_level_init+0x154>)
 8008200:	4930      	ldr	r1, [pc, #192]	; (80082c4 <low_level_init+0x158>)
 8008202:	482b      	ldr	r0, [pc, #172]	; (80082b0 <low_level_init+0x144>)
 8008204:	f7f9 ff9c 	bl	8002140 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2206      	movs	r2, #6
 800820c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008210:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <low_level_init+0x144>)
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800821c:	4b24      	ldr	r3, [pc, #144]	; (80082b0 <low_level_init+0x144>)
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	785a      	ldrb	r2, [r3, #1]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008228:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <low_level_init+0x144>)
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	789a      	ldrb	r2, [r3, #2]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008234:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <low_level_init+0x144>)
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	78da      	ldrb	r2, [r3, #3]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008240:	4b1b      	ldr	r3, [pc, #108]	; (80082b0 <low_level_init+0x144>)
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	791a      	ldrb	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800824c:	4b18      	ldr	r3, [pc, #96]	; (80082b0 <low_level_init+0x144>)
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	795a      	ldrb	r2, [r3, #5]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800825e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008266:	f043 030a 	orr.w	r3, r3, #10
 800826a:	b2da      	uxtb	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008272:	480f      	ldr	r0, [pc, #60]	; (80082b0 <low_level_init+0x144>)
 8008274:	f7fa fa91 	bl	800279a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008278:	f107 0310 	add.w	r3, r7, #16
 800827c:	461a      	mov	r2, r3
 800827e:	211d      	movs	r1, #29
 8008280:	480b      	ldr	r0, [pc, #44]	; (80082b0 <low_level_init+0x144>)
 8008282:	f7fa f9bc 	bl	80025fe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f043 030b 	orr.w	r3, r3, #11
 800828c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	461a      	mov	r2, r3
 8008292:	211d      	movs	r1, #29
 8008294:	4806      	ldr	r0, [pc, #24]	; (80082b0 <low_level_init+0x144>)
 8008296:	f7fa fa1a 	bl	80026ce <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	461a      	mov	r2, r3
 80082a0:	211d      	movs	r1, #29
 80082a2:	4803      	ldr	r0, [pc, #12]	; (80082b0 <low_level_init+0x144>)
 80082a4:	f7fa f9ab 	bl	80025fe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80082a8:	bf00      	nop
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	2000711c 	.word	0x2000711c
 80082b4:	40028000 	.word	0x40028000
 80082b8:	2000594c 	.word	0x2000594c
 80082bc:	200040fc 	.word	0x200040fc
 80082c0:	2000417c 	.word	0x2000417c
 80082c4:	2000407c 	.word	0x2000407c

080082c8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80082d2:	4b4b      	ldr	r3, [pc, #300]	; (8008400 <low_level_output+0x138>)
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80082ea:	4b45      	ldr	r3, [pc, #276]	; (8008400 <low_level_output+0x138>)
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	623b      	str	r3, [r7, #32]
 80082f8:	e05a      	b.n	80083b0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da03      	bge.n	800830a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008302:	23f8      	movs	r3, #248	; 0xf8
 8008304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008308:	e05c      	b.n	80083c4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	895b      	ldrh	r3, [r3, #10]
 800830e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008314:	e02f      	b.n	8008376 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	18d0      	adds	r0, r2, r3
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	18d1      	adds	r1, r2, r3
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	461a      	mov	r2, r3
 800832e:	f00b ff55 	bl	80141dc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	da03      	bge.n	8008348 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008340:	23f8      	movs	r3, #248	; 0xf8
 8008342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008346:	e03d      	b.n	80083c4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008358:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008364:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008370:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4413      	add	r3, r2
 800837c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008380:	4293      	cmp	r3, r2
 8008382:	d8c8      	bhi.n	8008316 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	18d0      	adds	r0, r2, r3
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4413      	add	r3, r2
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4619      	mov	r1, r3
 8008396:	f00b ff21 	bl	80141dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	623b      	str	r3, [r7, #32]
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1a1      	bne.n	80082fa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80083b6:	6979      	ldr	r1, [r7, #20]
 80083b8:	4811      	ldr	r0, [pc, #68]	; (8008400 <low_level_output+0x138>)
 80083ba:	f7f9 ff2d 	bl	8002218 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <low_level_output+0x138>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00d      	beq.n	80083f2 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80083d6:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <low_level_output+0x138>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083de:	461a      	mov	r2, r3
 80083e0:	2320      	movs	r3, #32
 80083e2:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80083e4:	4b06      	ldr	r3, [pc, #24]	; (8008400 <low_level_output+0x138>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ec:	461a      	mov	r2, r3
 80083ee:	2300      	movs	r3, #0
 80083f0:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80083f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3728      	adds	r7, #40	; 0x28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	2000711c 	.word	0x2000711c

08008404 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08c      	sub	sp, #48	; 0x30
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800840c:	2300      	movs	r3, #0
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008424:	2300      	movs	r3, #0
 8008426:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008428:	484e      	ldr	r0, [pc, #312]	; (8008564 <low_level_input+0x160>)
 800842a:	f7f9 ffdf 	bl	80023ec <HAL_ETH_GetReceivedFrame>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <low_level_input+0x34>

    return NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	e091      	b.n	800855c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008438:	4b4a      	ldr	r3, [pc, #296]	; (8008564 <low_level_input+0x160>)
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800843e:	4b49      	ldr	r3, [pc, #292]	; (8008564 <low_level_input+0x160>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008444:	89fb      	ldrh	r3, [r7, #14]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800844a:	89fb      	ldrh	r3, [r7, #14]
 800844c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008450:	4619      	mov	r1, r3
 8008452:	2000      	movs	r0, #0
 8008454:	f001 f934 	bl	80096c0 <pbuf_alloc>
 8008458:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d04b      	beq.n	80084f8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008460:	4b40      	ldr	r3, [pc, #256]	; (8008564 <low_level_input+0x160>)
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
 800846e:	e040      	b.n	80084f2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	895b      	ldrh	r3, [r3, #10]
 8008474:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800847a:	e021      	b.n	80084c0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	18d0      	adds	r0, r2, r3
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	18d1      	adds	r1, r2, r3
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	461a      	mov	r2, r3
 8008494:	f00b fea2 	bl	80141dc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80084ae:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80084ba:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d8d6      	bhi.n	800847c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	18d0      	adds	r0, r2, r3
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4619      	mov	r1, r3
 80084e0:	f00b fe7c 	bl	80141dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	4413      	add	r3, r2
 80084ea:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1bb      	bne.n	8008470 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <low_level_input+0x160>)
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	e00b      	b.n	800851c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	3301      	adds	r3, #1
 800851a:	613b      	str	r3, [r7, #16]
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <low_level_input+0x160>)
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	429a      	cmp	r2, r3
 8008524:	d3ee      	bcc.n	8008504 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <low_level_input+0x160>)
 8008528:	2200      	movs	r2, #0
 800852a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <low_level_input+0x160>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800853e:	4b09      	ldr	r3, [pc, #36]	; (8008564 <low_level_input+0x160>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008546:	461a      	mov	r2, r3
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <low_level_input+0x160>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008554:	461a      	mov	r2, r3
 8008556:	2300      	movs	r3, #0
 8008558:	6093      	str	r3, [r2, #8]
  }
  return p;
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800855c:	4618      	mov	r0, r3
 800855e:	3730      	adds	r7, #48	; 0x30
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	2000711c 	.word	0x2000711c

08008568 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ff47 	bl	8008404 <low_level_input>
 8008576:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d010      	beq.n	80085a0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	4798      	blx	r3
 8008588:	4603      	mov	r3, r0
 800858a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800858c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f001 fb77 	bl	8009c88 <pbuf_free>
    p = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	e000      	b.n	80085a2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80085a0:	bf00      	nop
  }
}
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <ethernetif_init+0x1c>
 80085b6:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <ethernetif_init+0x48>)
 80085b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80085bc:	490d      	ldr	r1, [pc, #52]	; (80085f4 <ethernetif_init+0x4c>)
 80085be:	480e      	ldr	r0, [pc, #56]	; (80085f8 <ethernetif_init+0x50>)
 80085c0:	f00b fe3c 	bl	801423c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2273      	movs	r2, #115	; 0x73
 80085c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2274      	movs	r2, #116	; 0x74
 80085d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a09      	ldr	r2, [pc, #36]	; (80085fc <ethernetif_init+0x54>)
 80085d8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a08      	ldr	r2, [pc, #32]	; (8008600 <ethernetif_init+0x58>)
 80085de:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff fdc3 	bl	800816c <low_level_init>

  return ERR_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	080159c8 	.word	0x080159c8
 80085f4:	080159e4 	.word	0x080159e4
 80085f8:	080159f4 	.word	0x080159f4
 80085fc:	080108e1 	.word	0x080108e1
 8008600:	080082c9 	.word	0x080082c9

08008604 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008608:	f7f8 fdb0 	bl	800116c <HAL_GetTick>
 800860c:	4603      	mov	r3, r0
}
 800860e:	4618      	mov	r0, r3
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d05d      	beq.n	80086f2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008636:	4b34      	ldr	r3, [pc, #208]	; (8008708 <ethernetif_update_config+0xf4>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d03f      	beq.n	80086be <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800863e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008642:	2100      	movs	r1, #0
 8008644:	4830      	ldr	r0, [pc, #192]	; (8008708 <ethernetif_update_config+0xf4>)
 8008646:	f7fa f842 	bl	80026ce <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800864a:	f7f8 fd8f 	bl	800116c <HAL_GetTick>
 800864e:	4603      	mov	r3, r0
 8008650:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008652:	f107 0308 	add.w	r3, r7, #8
 8008656:	461a      	mov	r2, r3
 8008658:	2101      	movs	r1, #1
 800865a:	482b      	ldr	r0, [pc, #172]	; (8008708 <ethernetif_update_config+0xf4>)
 800865c:	f7f9 ffcf 	bl	80025fe <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008660:	f7f8 fd84 	bl	800116c <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866e:	d828      	bhi.n	80086c2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0eb      	beq.n	8008652 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	461a      	mov	r2, r3
 8008680:	2110      	movs	r1, #16
 8008682:	4821      	ldr	r0, [pc, #132]	; (8008708 <ethernetif_update_config+0xf4>)
 8008684:	f7f9 ffbb 	bl	80025fe <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008692:	4b1d      	ldr	r3, [pc, #116]	; (8008708 <ethernetif_update_config+0xf4>)
 8008694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	e002      	b.n	80086a2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800869c:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <ethernetif_update_config+0xf4>)
 800869e:	2200      	movs	r2, #0
 80086a0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80086ac:	4b16      	ldr	r3, [pc, #88]	; (8008708 <ethernetif_update_config+0xf4>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	609a      	str	r2, [r3, #8]
 80086b2:	e016      	b.n	80086e2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80086b4:	4b14      	ldr	r3, [pc, #80]	; (8008708 <ethernetif_update_config+0xf4>)
 80086b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086ba:	609a      	str	r2, [r3, #8]
 80086bc:	e011      	b.n	80086e2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <ethernetif_update_config+0xb0>
          goto error;
 80086c2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80086c4:	4b10      	ldr	r3, [pc, #64]	; (8008708 <ethernetif_update_config+0xf4>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	08db      	lsrs	r3, r3, #3
 80086ca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80086cc:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <ethernetif_update_config+0xf4>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80086d4:	4313      	orrs	r3, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	461a      	mov	r2, r3
 80086da:	2100      	movs	r1, #0
 80086dc:	480a      	ldr	r0, [pc, #40]	; (8008708 <ethernetif_update_config+0xf4>)
 80086de:	f7f9 fff6 	bl	80026ce <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80086e2:	2100      	movs	r1, #0
 80086e4:	4808      	ldr	r0, [pc, #32]	; (8008708 <ethernetif_update_config+0xf4>)
 80086e6:	f7fa f8b7 	bl	8002858 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80086ea:	4807      	ldr	r0, [pc, #28]	; (8008708 <ethernetif_update_config+0xf4>)
 80086ec:	f7fa f855 	bl	800279a <HAL_ETH_Start>
 80086f0:	e002      	b.n	80086f8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80086f2:	4805      	ldr	r0, [pc, #20]	; (8008708 <ethernetif_update_config+0xf4>)
 80086f4:	f7fa f880 	bl	80027f8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f807 	bl	800870c <ethernetif_notify_conn_changed>
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	2000711c 	.word	0x2000711c

0800870c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	b21a      	sxth	r2, r3
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	0a1b      	lsrs	r3, r3, #8
 8008734:	b29b      	uxth	r3, r3
 8008736:	b21b      	sxth	r3, r3
 8008738:	4313      	orrs	r3, r2
 800873a:	b21b      	sxth	r3, r3
 800873c:	b29b      	uxth	r3, r3
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	061a      	lsls	r2, r3, #24
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	0e1b      	lsrs	r3, r3, #24
 800876e:	4313      	orrs	r3, r2
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008786:	f000 f8d5 	bl	8008934 <mem_init>
  memp_init();
 800878a:	f000 fbdb 	bl	8008f44 <memp_init>
  pbuf_init();
  netif_init();
 800878e:	f000 fc93 	bl	80090b8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008792:	f006 ffbd 	bl	800f710 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008796:	f001 fd15 	bl	800a1c4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800879a:	f006 ff2f 	bl	800f5fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <ptr_to_mem+0x20>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	88fb      	ldrh	r3, [r7, #6]
 80087b8:	4413      	add	r3, r2
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	200077e4 	.word	0x200077e4

080087cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80087d4:	4b05      	ldr	r3, [pc, #20]	; (80087ec <mem_to_ptr+0x20>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	b29b      	uxth	r3, r3
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	200077e4 	.word	0x200077e4

080087f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80087f0:	b590      	push	{r4, r7, lr}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80087f8:	4b45      	ldr	r3, [pc, #276]	; (8008910 <plug_holes+0x120>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d206      	bcs.n	8008810 <plug_holes+0x20>
 8008802:	4b44      	ldr	r3, [pc, #272]	; (8008914 <plug_holes+0x124>)
 8008804:	f240 12df 	movw	r2, #479	; 0x1df
 8008808:	4943      	ldr	r1, [pc, #268]	; (8008918 <plug_holes+0x128>)
 800880a:	4844      	ldr	r0, [pc, #272]	; (800891c <plug_holes+0x12c>)
 800880c:	f00b fd16 	bl	801423c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008810:	4b43      	ldr	r3, [pc, #268]	; (8008920 <plug_holes+0x130>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d306      	bcc.n	8008828 <plug_holes+0x38>
 800881a:	4b3e      	ldr	r3, [pc, #248]	; (8008914 <plug_holes+0x124>)
 800881c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008820:	4940      	ldr	r1, [pc, #256]	; (8008924 <plug_holes+0x134>)
 8008822:	483e      	ldr	r0, [pc, #248]	; (800891c <plug_holes+0x12c>)
 8008824:	f00b fd0a 	bl	801423c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	791b      	ldrb	r3, [r3, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d006      	beq.n	800883e <plug_holes+0x4e>
 8008830:	4b38      	ldr	r3, [pc, #224]	; (8008914 <plug_holes+0x124>)
 8008832:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008836:	493c      	ldr	r1, [pc, #240]	; (8008928 <plug_holes+0x138>)
 8008838:	4838      	ldr	r0, [pc, #224]	; (800891c <plug_holes+0x12c>)
 800883a:	f00b fcff 	bl	801423c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008846:	d906      	bls.n	8008856 <plug_holes+0x66>
 8008848:	4b32      	ldr	r3, [pc, #200]	; (8008914 <plug_holes+0x124>)
 800884a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800884e:	4937      	ldr	r1, [pc, #220]	; (800892c <plug_holes+0x13c>)
 8008850:	4832      	ldr	r0, [pc, #200]	; (800891c <plug_holes+0x12c>)
 8008852:	f00b fcf3 	bl	801423c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff ffa4 	bl	80087a8 <ptr_to_mem>
 8008860:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	429a      	cmp	r2, r3
 8008868:	d024      	beq.n	80088b4 <plug_holes+0xc4>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	791b      	ldrb	r3, [r3, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d120      	bne.n	80088b4 <plug_holes+0xc4>
 8008872:	4b2b      	ldr	r3, [pc, #172]	; (8008920 <plug_holes+0x130>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	429a      	cmp	r2, r3
 800887a:	d01b      	beq.n	80088b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800887c:	4b2c      	ldr	r3, [pc, #176]	; (8008930 <plug_holes+0x140>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	429a      	cmp	r2, r3
 8008884:	d102      	bne.n	800888c <plug_holes+0x9c>
      lfree = mem;
 8008886:	4a2a      	ldr	r2, [pc, #168]	; (8008930 <plug_holes+0x140>)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	881a      	ldrh	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800889c:	d00a      	beq.n	80088b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff ff80 	bl	80087a8 <ptr_to_mem>
 80088a8:	4604      	mov	r4, r0
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff ff8e 	bl	80087cc <mem_to_ptr>
 80088b0:	4603      	mov	r3, r0
 80088b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	885b      	ldrh	r3, [r3, #2]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff ff75 	bl	80087a8 <ptr_to_mem>
 80088be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d01f      	beq.n	8008908 <plug_holes+0x118>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	791b      	ldrb	r3, [r3, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11b      	bne.n	8008908 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <plug_holes+0x140>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d102      	bne.n	80088e0 <plug_holes+0xf0>
      lfree = pmem;
 80088da:	4a15      	ldr	r2, [pc, #84]	; (8008930 <plug_holes+0x140>)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	881a      	ldrh	r2, [r3, #0]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80088f0:	d00a      	beq.n	8008908 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff ff56 	bl	80087a8 <ptr_to_mem>
 80088fc:	4604      	mov	r4, r0
 80088fe:	68b8      	ldr	r0, [r7, #8]
 8008900:	f7ff ff64 	bl	80087cc <mem_to_ptr>
 8008904:	4603      	mov	r3, r0
 8008906:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008908:	bf00      	nop
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	bd90      	pop	{r4, r7, pc}
 8008910:	200077e4 	.word	0x200077e4
 8008914:	08015a1c 	.word	0x08015a1c
 8008918:	08015a4c 	.word	0x08015a4c
 800891c:	08015a64 	.word	0x08015a64
 8008920:	200077e8 	.word	0x200077e8
 8008924:	08015a8c 	.word	0x08015a8c
 8008928:	08015aa8 	.word	0x08015aa8
 800892c:	08015ac4 	.word	0x08015ac4
 8008930:	200077ec 	.word	0x200077ec

08008934 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800893a:	4b18      	ldr	r3, [pc, #96]	; (800899c <mem_init+0x68>)
 800893c:	3303      	adds	r3, #3
 800893e:	f023 0303 	bic.w	r3, r3, #3
 8008942:	461a      	mov	r2, r3
 8008944:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <mem_init+0x6c>)
 8008946:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <mem_init+0x6c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008954:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008962:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008966:	f7ff ff1f 	bl	80087a8 <ptr_to_mem>
 800896a:	4603      	mov	r3, r0
 800896c:	4a0d      	ldr	r2, [pc, #52]	; (80089a4 <mem_init+0x70>)
 800896e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008970:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <mem_init+0x70>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2201      	movs	r2, #1
 8008976:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <mem_init+0x70>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008980:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <mem_init+0x70>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800898a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800898c:	4b04      	ldr	r3, [pc, #16]	; (80089a0 <mem_init+0x6c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a05      	ldr	r2, [pc, #20]	; (80089a8 <mem_init+0x74>)
 8008992:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20007190 	.word	0x20007190
 80089a0:	200077e4 	.word	0x200077e4
 80089a4:	200077e8 	.word	0x200077e8
 80089a8:	200077ec 	.word	0x200077ec

080089ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff ff09 	bl	80087cc <mem_to_ptr>
 80089ba:	4603      	mov	r3, r0
 80089bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fef0 	bl	80087a8 <ptr_to_mem>
 80089c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	885b      	ldrh	r3, [r3, #2]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff feea 	bl	80087a8 <ptr_to_mem>
 80089d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80089de:	d818      	bhi.n	8008a12 <mem_link_valid+0x66>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	885b      	ldrh	r3, [r3, #2]
 80089e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80089e8:	d813      	bhi.n	8008a12 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80089ee:	8afa      	ldrh	r2, [r7, #22]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d004      	beq.n	80089fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	8afa      	ldrh	r2, [r7, #22]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d109      	bne.n	8008a12 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80089fe:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <mem_link_valid+0x74>)
 8008a00:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d006      	beq.n	8008a16 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	885b      	ldrh	r3, [r3, #2]
 8008a0c:	8afa      	ldrh	r2, [r7, #22]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d001      	beq.n	8008a16 <mem_link_valid+0x6a>
    return 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	e000      	b.n	8008a18 <mem_link_valid+0x6c>
  }
  return 1;
 8008a16:	2301      	movs	r3, #1
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	200077e8 	.word	0x200077e8

08008a24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d04c      	beq.n	8008acc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d007      	beq.n	8008a4c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008a3c:	4b25      	ldr	r3, [pc, #148]	; (8008ad4 <mem_free+0xb0>)
 8008a3e:	f240 2273 	movw	r2, #627	; 0x273
 8008a42:	4925      	ldr	r1, [pc, #148]	; (8008ad8 <mem_free+0xb4>)
 8008a44:	4825      	ldr	r0, [pc, #148]	; (8008adc <mem_free+0xb8>)
 8008a46:	f00b fbf9 	bl	801423c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008a4a:	e040      	b.n	8008ace <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3b08      	subs	r3, #8
 8008a50:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008a52:	4b23      	ldr	r3, [pc, #140]	; (8008ae0 <mem_free+0xbc>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d306      	bcc.n	8008a6a <mem_free+0x46>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f103 020c 	add.w	r2, r3, #12
 8008a62:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <mem_free+0xc0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d907      	bls.n	8008a7a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008a6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <mem_free+0xb0>)
 8008a6c:	f240 227f 	movw	r2, #639	; 0x27f
 8008a70:	491d      	ldr	r1, [pc, #116]	; (8008ae8 <mem_free+0xc4>)
 8008a72:	481a      	ldr	r0, [pc, #104]	; (8008adc <mem_free+0xb8>)
 8008a74:	f00b fbe2 	bl	801423c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008a78:	e029      	b.n	8008ace <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	791b      	ldrb	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d107      	bne.n	8008a92 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <mem_free+0xb0>)
 8008a84:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008a88:	4918      	ldr	r1, [pc, #96]	; (8008aec <mem_free+0xc8>)
 8008a8a:	4814      	ldr	r0, [pc, #80]	; (8008adc <mem_free+0xb8>)
 8008a8c:	f00b fbd6 	bl	801423c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008a90:	e01d      	b.n	8008ace <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff ff8a 	bl	80089ac <mem_link_valid>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d107      	bne.n	8008aae <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <mem_free+0xb0>)
 8008aa0:	f240 2295 	movw	r2, #661	; 0x295
 8008aa4:	4912      	ldr	r1, [pc, #72]	; (8008af0 <mem_free+0xcc>)
 8008aa6:	480d      	ldr	r0, [pc, #52]	; (8008adc <mem_free+0xb8>)
 8008aa8:	f00b fbc8 	bl	801423c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008aac:	e00f      	b.n	8008ace <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <mem_free+0xd0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d202      	bcs.n	8008ac4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008abe:	4a0d      	ldr	r2, [pc, #52]	; (8008af4 <mem_free+0xd0>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7ff fe93 	bl	80087f0 <plug_holes>
 8008aca:	e000      	b.n	8008ace <mem_free+0xaa>
    return;
 8008acc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	08015a1c 	.word	0x08015a1c
 8008ad8:	08015af0 	.word	0x08015af0
 8008adc:	08015a64 	.word	0x08015a64
 8008ae0:	200077e4 	.word	0x200077e4
 8008ae4:	200077e8 	.word	0x200077e8
 8008ae8:	08015b14 	.word	0x08015b14
 8008aec:	08015b30 	.word	0x08015b30
 8008af0:	08015b58 	.word	0x08015b58
 8008af4:	200077ec 	.word	0x200077ec

08008af8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008b04:	887b      	ldrh	r3, [r7, #2]
 8008b06:	3303      	adds	r3, #3
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008b10:	8bfb      	ldrh	r3, [r7, #30]
 8008b12:	2b0b      	cmp	r3, #11
 8008b14:	d801      	bhi.n	8008b1a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008b16:	230c      	movs	r3, #12
 8008b18:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008b1a:	8bfb      	ldrh	r3, [r7, #30]
 8008b1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b20:	d803      	bhi.n	8008b2a <mem_trim+0x32>
 8008b22:	8bfa      	ldrh	r2, [r7, #30]
 8008b24:	887b      	ldrh	r3, [r7, #2]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d201      	bcs.n	8008b2e <mem_trim+0x36>
    return NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e0cc      	b.n	8008cc8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008b2e:	4b68      	ldr	r3, [pc, #416]	; (8008cd0 <mem_trim+0x1d8>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d304      	bcc.n	8008b42 <mem_trim+0x4a>
 8008b38:	4b66      	ldr	r3, [pc, #408]	; (8008cd4 <mem_trim+0x1dc>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d306      	bcc.n	8008b50 <mem_trim+0x58>
 8008b42:	4b65      	ldr	r3, [pc, #404]	; (8008cd8 <mem_trim+0x1e0>)
 8008b44:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008b48:	4964      	ldr	r1, [pc, #400]	; (8008cdc <mem_trim+0x1e4>)
 8008b4a:	4865      	ldr	r0, [pc, #404]	; (8008ce0 <mem_trim+0x1e8>)
 8008b4c:	f00b fb76 	bl	801423c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008b50:	4b5f      	ldr	r3, [pc, #380]	; (8008cd0 <mem_trim+0x1d8>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d304      	bcc.n	8008b64 <mem_trim+0x6c>
 8008b5a:	4b5e      	ldr	r3, [pc, #376]	; (8008cd4 <mem_trim+0x1dc>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d301      	bcc.n	8008b68 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	e0af      	b.n	8008cc8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3b08      	subs	r3, #8
 8008b6c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008b6e:	69b8      	ldr	r0, [r7, #24]
 8008b70:	f7ff fe2c 	bl	80087cc <mem_to_ptr>
 8008b74:	4603      	mov	r3, r0
 8008b76:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	881a      	ldrh	r2, [r3, #0]
 8008b7c:	8afb      	ldrh	r3, [r7, #22]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b08      	subs	r3, #8
 8008b84:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008b86:	8bfa      	ldrh	r2, [r7, #30]
 8008b88:	8abb      	ldrh	r3, [r7, #20]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d906      	bls.n	8008b9c <mem_trim+0xa4>
 8008b8e:	4b52      	ldr	r3, [pc, #328]	; (8008cd8 <mem_trim+0x1e0>)
 8008b90:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008b94:	4953      	ldr	r1, [pc, #332]	; (8008ce4 <mem_trim+0x1ec>)
 8008b96:	4852      	ldr	r0, [pc, #328]	; (8008ce0 <mem_trim+0x1e8>)
 8008b98:	f00b fb50 	bl	801423c <iprintf>
  if (newsize > size) {
 8008b9c:	8bfa      	ldrh	r2, [r7, #30]
 8008b9e:	8abb      	ldrh	r3, [r7, #20]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d901      	bls.n	8008ba8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e08f      	b.n	8008cc8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008ba8:	8bfa      	ldrh	r2, [r7, #30]
 8008baa:	8abb      	ldrh	r3, [r7, #20]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d101      	bne.n	8008bb4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	e089      	b.n	8008cc8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fdf5 	bl	80087a8 <ptr_to_mem>
 8008bbe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d13f      	bne.n	8008c48 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008bd0:	d106      	bne.n	8008be0 <mem_trim+0xe8>
 8008bd2:	4b41      	ldr	r3, [pc, #260]	; (8008cd8 <mem_trim+0x1e0>)
 8008bd4:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008bd8:	4943      	ldr	r1, [pc, #268]	; (8008ce8 <mem_trim+0x1f0>)
 8008bda:	4841      	ldr	r0, [pc, #260]	; (8008ce0 <mem_trim+0x1e8>)
 8008bdc:	f00b fb2e 	bl	801423c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008be6:	8afa      	ldrh	r2, [r7, #22]
 8008be8:	8bfb      	ldrh	r3, [r7, #30]
 8008bea:	4413      	add	r3, r2
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3308      	adds	r3, #8
 8008bf0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008bf2:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <mem_trim+0x1f4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d106      	bne.n	8008c0a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fdd2 	bl	80087a8 <ptr_to_mem>
 8008c04:	4603      	mov	r3, r0
 8008c06:	4a39      	ldr	r2, [pc, #228]	; (8008cec <mem_trim+0x1f4>)
 8008c08:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008c0a:	89fb      	ldrh	r3, [r7, #14]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff fdcb 	bl	80087a8 <ptr_to_mem>
 8008c12:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	2200      	movs	r2, #0
 8008c18:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	89ba      	ldrh	r2, [r7, #12]
 8008c1e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	8afa      	ldrh	r2, [r7, #22]
 8008c24:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	89fa      	ldrh	r2, [r7, #14]
 8008c2a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c34:	d047      	beq.n	8008cc6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff fdb4 	bl	80087a8 <ptr_to_mem>
 8008c40:	4602      	mov	r2, r0
 8008c42:	89fb      	ldrh	r3, [r7, #14]
 8008c44:	8053      	strh	r3, [r2, #2]
 8008c46:	e03e      	b.n	8008cc6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008c48:	8bfb      	ldrh	r3, [r7, #30]
 8008c4a:	f103 0214 	add.w	r2, r3, #20
 8008c4e:	8abb      	ldrh	r3, [r7, #20]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d838      	bhi.n	8008cc6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008c54:	8afa      	ldrh	r2, [r7, #22]
 8008c56:	8bfb      	ldrh	r3, [r7, #30]
 8008c58:	4413      	add	r3, r2
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c68:	d106      	bne.n	8008c78 <mem_trim+0x180>
 8008c6a:	4b1b      	ldr	r3, [pc, #108]	; (8008cd8 <mem_trim+0x1e0>)
 8008c6c:	f240 3216 	movw	r2, #790	; 0x316
 8008c70:	491d      	ldr	r1, [pc, #116]	; (8008ce8 <mem_trim+0x1f0>)
 8008c72:	481b      	ldr	r0, [pc, #108]	; (8008ce0 <mem_trim+0x1e8>)
 8008c74:	f00b fae2 	bl	801423c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008c78:	89fb      	ldrh	r3, [r7, #14]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff fd94 	bl	80087a8 <ptr_to_mem>
 8008c80:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008c82:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <mem_trim+0x1f4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d202      	bcs.n	8008c92 <mem_trim+0x19a>
      lfree = mem2;
 8008c8c:	4a17      	ldr	r2, [pc, #92]	; (8008cec <mem_trim+0x1f4>)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2200      	movs	r2, #0
 8008c96:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	881a      	ldrh	r2, [r3, #0]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	8afa      	ldrh	r2, [r7, #22]
 8008ca4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	89fa      	ldrh	r2, [r7, #14]
 8008caa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008cb4:	d007      	beq.n	8008cc6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff fd74 	bl	80087a8 <ptr_to_mem>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	89fb      	ldrh	r3, [r7, #14]
 8008cc4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008cc6:	687b      	ldr	r3, [r7, #4]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	200077e4 	.word	0x200077e4
 8008cd4:	200077e8 	.word	0x200077e8
 8008cd8:	08015a1c 	.word	0x08015a1c
 8008cdc:	08015b8c 	.word	0x08015b8c
 8008ce0:	08015a64 	.word	0x08015a64
 8008ce4:	08015ba4 	.word	0x08015ba4
 8008ce8:	08015bc4 	.word	0x08015bc4
 8008cec:	200077ec 	.word	0x200077ec

08008cf0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008cfa:	88fb      	ldrh	r3, [r7, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <mem_malloc+0x14>
    return NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e0d9      	b.n	8008eb8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	3303      	adds	r3, #3
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f023 0303 	bic.w	r3, r3, #3
 8008d0e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008d10:	8bbb      	ldrh	r3, [r7, #28]
 8008d12:	2b0b      	cmp	r3, #11
 8008d14:	d801      	bhi.n	8008d1a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008d16:	230c      	movs	r3, #12
 8008d18:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008d1a:	8bbb      	ldrh	r3, [r7, #28]
 8008d1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008d20:	d803      	bhi.n	8008d2a <mem_malloc+0x3a>
 8008d22:	8bba      	ldrh	r2, [r7, #28]
 8008d24:	88fb      	ldrh	r3, [r7, #6]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d201      	bcs.n	8008d2e <mem_malloc+0x3e>
    return NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e0c4      	b.n	8008eb8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008d2e:	4b64      	ldr	r3, [pc, #400]	; (8008ec0 <mem_malloc+0x1d0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fd4a 	bl	80087cc <mem_to_ptr>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	83fb      	strh	r3, [r7, #30]
 8008d3c:	e0b4      	b.n	8008ea8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008d3e:	8bfb      	ldrh	r3, [r7, #30]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff fd31 	bl	80087a8 <ptr_to_mem>
 8008d46:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	791b      	ldrb	r3, [r3, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 80a4 	bne.w	8008e9a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	8bfb      	ldrh	r3, [r7, #30]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	f1a3 0208 	sub.w	r2, r3, #8
 8008d60:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008d62:	429a      	cmp	r2, r3
 8008d64:	f0c0 8099 	bcc.w	8008e9a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	8bfb      	ldrh	r3, [r7, #30]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	f1a3 0208 	sub.w	r2, r3, #8
 8008d76:	8bbb      	ldrh	r3, [r7, #28]
 8008d78:	3314      	adds	r3, #20
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d333      	bcc.n	8008de6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008d7e:	8bfa      	ldrh	r2, [r7, #30]
 8008d80:	8bbb      	ldrh	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3308      	adds	r3, #8
 8008d88:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008d8a:	8a7b      	ldrh	r3, [r7, #18]
 8008d8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008d90:	d106      	bne.n	8008da0 <mem_malloc+0xb0>
 8008d92:	4b4c      	ldr	r3, [pc, #304]	; (8008ec4 <mem_malloc+0x1d4>)
 8008d94:	f240 3287 	movw	r2, #903	; 0x387
 8008d98:	494b      	ldr	r1, [pc, #300]	; (8008ec8 <mem_malloc+0x1d8>)
 8008d9a:	484c      	ldr	r0, [pc, #304]	; (8008ecc <mem_malloc+0x1dc>)
 8008d9c:	f00b fa4e 	bl	801423c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008da0:	8a7b      	ldrh	r3, [r7, #18]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff fd00 	bl	80087a8 <ptr_to_mem>
 8008da8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	881a      	ldrh	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8bfa      	ldrh	r2, [r7, #30]
 8008dbc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	8a7a      	ldrh	r2, [r7, #18]
 8008dc2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008dd2:	d00b      	beq.n	8008dec <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fce5 	bl	80087a8 <ptr_to_mem>
 8008dde:	4602      	mov	r2, r0
 8008de0:	8a7b      	ldrh	r3, [r7, #18]
 8008de2:	8053      	strh	r3, [r2, #2]
 8008de4:	e002      	b.n	8008dec <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2201      	movs	r2, #1
 8008dea:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <mem_malloc+0x1d0>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d127      	bne.n	8008e46 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008df6:	4b32      	ldr	r3, [pc, #200]	; (8008ec0 <mem_malloc+0x1d0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008dfc:	e005      	b.n	8008e0a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff fcd0 	bl	80087a8 <ptr_to_mem>
 8008e08:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	791b      	ldrb	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d004      	beq.n	8008e1c <mem_malloc+0x12c>
 8008e12:	4b2f      	ldr	r3, [pc, #188]	; (8008ed0 <mem_malloc+0x1e0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d1f0      	bne.n	8008dfe <mem_malloc+0x10e>
          }
          lfree = cur;
 8008e1c:	4a28      	ldr	r2, [pc, #160]	; (8008ec0 <mem_malloc+0x1d0>)
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008e22:	4b27      	ldr	r3, [pc, #156]	; (8008ec0 <mem_malloc+0x1d0>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b2a      	ldr	r3, [pc, #168]	; (8008ed0 <mem_malloc+0x1e0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d00b      	beq.n	8008e46 <mem_malloc+0x156>
 8008e2e:	4b24      	ldr	r3, [pc, #144]	; (8008ec0 <mem_malloc+0x1d0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	791b      	ldrb	r3, [r3, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d006      	beq.n	8008e46 <mem_malloc+0x156>
 8008e38:	4b22      	ldr	r3, [pc, #136]	; (8008ec4 <mem_malloc+0x1d4>)
 8008e3a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008e3e:	4925      	ldr	r1, [pc, #148]	; (8008ed4 <mem_malloc+0x1e4>)
 8008e40:	4822      	ldr	r0, [pc, #136]	; (8008ecc <mem_malloc+0x1dc>)
 8008e42:	f00b f9fb 	bl	801423c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008e46:	8bba      	ldrh	r2, [r7, #28]
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	3308      	adds	r3, #8
 8008e4e:	4a20      	ldr	r2, [pc, #128]	; (8008ed0 <mem_malloc+0x1e0>)
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d906      	bls.n	8008e64 <mem_malloc+0x174>
 8008e56:	4b1b      	ldr	r3, [pc, #108]	; (8008ec4 <mem_malloc+0x1d4>)
 8008e58:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008e5c:	491e      	ldr	r1, [pc, #120]	; (8008ed8 <mem_malloc+0x1e8>)
 8008e5e:	481b      	ldr	r0, [pc, #108]	; (8008ecc <mem_malloc+0x1dc>)
 8008e60:	f00b f9ec 	bl	801423c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d006      	beq.n	8008e7c <mem_malloc+0x18c>
 8008e6e:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <mem_malloc+0x1d4>)
 8008e70:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008e74:	4919      	ldr	r1, [pc, #100]	; (8008edc <mem_malloc+0x1ec>)
 8008e76:	4815      	ldr	r0, [pc, #84]	; (8008ecc <mem_malloc+0x1dc>)
 8008e78:	f00b f9e0 	bl	801423c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d006      	beq.n	8008e94 <mem_malloc+0x1a4>
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <mem_malloc+0x1d4>)
 8008e88:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008e8c:	4914      	ldr	r1, [pc, #80]	; (8008ee0 <mem_malloc+0x1f0>)
 8008e8e:	480f      	ldr	r0, [pc, #60]	; (8008ecc <mem_malloc+0x1dc>)
 8008e90:	f00b f9d4 	bl	801423c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	3308      	adds	r3, #8
 8008e98:	e00e      	b.n	8008eb8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008e9a:	8bfb      	ldrh	r3, [r7, #30]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fc83 	bl	80087a8 <ptr_to_mem>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008ea8:	8bfa      	ldrh	r2, [r7, #30]
 8008eaa:	8bbb      	ldrh	r3, [r7, #28]
 8008eac:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	f4ff af44 	bcc.w	8008d3e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	200077ec 	.word	0x200077ec
 8008ec4:	08015a1c 	.word	0x08015a1c
 8008ec8:	08015bc4 	.word	0x08015bc4
 8008ecc:	08015a64 	.word	0x08015a64
 8008ed0:	200077e8 	.word	0x200077e8
 8008ed4:	08015bd8 	.word	0x08015bd8
 8008ed8:	08015bf4 	.word	0x08015bf4
 8008edc:	08015c24 	.word	0x08015c24
 8008ee0:	08015c54 	.word	0x08015c54

08008ee4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	3303      	adds	r3, #3
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	e011      	b.n	8008f2a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3301      	adds	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4293      	cmp	r3, r2
 8008f34:	dbe7      	blt.n	8008f06 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	80fb      	strh	r3, [r7, #6]
 8008f4e:	e009      	b.n	8008f64 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	4a08      	ldr	r2, [pc, #32]	; (8008f74 <memp_init+0x30>)
 8008f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff ffc3 	bl	8008ee4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008f5e:	88fb      	ldrh	r3, [r7, #6]
 8008f60:	3301      	adds	r3, #1
 8008f62:	80fb      	strh	r3, [r7, #6]
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d9f2      	bls.n	8008f50 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	08018454 	.word	0x08018454

08008f78 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d012      	beq.n	8008fb4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d006      	beq.n	8008fb0 <do_memp_malloc_pool+0x38>
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <do_memp_malloc_pool+0x48>)
 8008fa4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008fa8:	4906      	ldr	r1, [pc, #24]	; (8008fc4 <do_memp_malloc_pool+0x4c>)
 8008faa:	4807      	ldr	r0, [pc, #28]	; (8008fc8 <do_memp_malloc_pool+0x50>)
 8008fac:	f00b f946 	bl	801423c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	e000      	b.n	8008fb6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	08015c78 	.word	0x08015c78
 8008fc4:	08015ca8 	.word	0x08015ca8
 8008fc8:	08015ccc 	.word	0x08015ccc

08008fcc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d908      	bls.n	8008fee <memp_malloc+0x22>
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <memp_malloc+0x3c>)
 8008fde:	f240 1257 	movw	r2, #343	; 0x157
 8008fe2:	490a      	ldr	r1, [pc, #40]	; (800900c <memp_malloc+0x40>)
 8008fe4:	480a      	ldr	r0, [pc, #40]	; (8009010 <memp_malloc+0x44>)
 8008fe6:	f00b f929 	bl	801423c <iprintf>
 8008fea:	2300      	movs	r3, #0
 8008fec:	e008      	b.n	8009000 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	4a08      	ldr	r2, [pc, #32]	; (8009014 <memp_malloc+0x48>)
 8008ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff ffbe 	bl	8008f78 <do_memp_malloc_pool>
 8008ffc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	08015c78 	.word	0x08015c78
 800900c:	08015d08 	.word	0x08015d08
 8009010:	08015ccc 	.word	0x08015ccc
 8009014:	08018454 	.word	0x08018454

08009018 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	f003 0303 	and.w	r3, r3, #3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <do_memp_free_pool+0x22>
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <do_memp_free_pool+0x40>)
 800902e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009032:	490a      	ldr	r1, [pc, #40]	; (800905c <do_memp_free_pool+0x44>)
 8009034:	480a      	ldr	r0, [pc, #40]	; (8009060 <do_memp_free_pool+0x48>)
 8009036:	f00b f901 	bl	801423c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009050:	bf00      	nop
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	08015c78 	.word	0x08015c78
 800905c:	08015d28 	.word	0x08015d28
 8009060:	08015ccc 	.word	0x08015ccc

08009064 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	2b08      	cmp	r3, #8
 8009074:	d907      	bls.n	8009086 <memp_free+0x22>
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <memp_free+0x44>)
 8009078:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800907c:	490b      	ldr	r1, [pc, #44]	; (80090ac <memp_free+0x48>)
 800907e:	480c      	ldr	r0, [pc, #48]	; (80090b0 <memp_free+0x4c>)
 8009080:	f00b f8dc 	bl	801423c <iprintf>
 8009084:	e00c      	b.n	80090a0 <memp_free+0x3c>

  if (mem == NULL) {
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d008      	beq.n	800909e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	4a09      	ldr	r2, [pc, #36]	; (80090b4 <memp_free+0x50>)
 8009090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff ffbe 	bl	8009018 <do_memp_free_pool>
 800909c:	e000      	b.n	80090a0 <memp_free+0x3c>
    return;
 800909e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	08015c78 	.word	0x08015c78
 80090ac:	08015d48 	.word	0x08015d48
 80090b0:	08015ccc 	.word	0x08015ccc
 80090b4:	08018454 	.word	0x08018454

080090b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80090bc:	bf00      	nop
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
	...

080090c8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d108      	bne.n	80090ee <netif_add+0x26>
 80090dc:	4b57      	ldr	r3, [pc, #348]	; (800923c <netif_add+0x174>)
 80090de:	f240 1227 	movw	r2, #295	; 0x127
 80090e2:	4957      	ldr	r1, [pc, #348]	; (8009240 <netif_add+0x178>)
 80090e4:	4857      	ldr	r0, [pc, #348]	; (8009244 <netif_add+0x17c>)
 80090e6:	f00b f8a9 	bl	801423c <iprintf>
 80090ea:	2300      	movs	r3, #0
 80090ec:	e0a2      	b.n	8009234 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d108      	bne.n	8009106 <netif_add+0x3e>
 80090f4:	4b51      	ldr	r3, [pc, #324]	; (800923c <netif_add+0x174>)
 80090f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80090fa:	4953      	ldr	r1, [pc, #332]	; (8009248 <netif_add+0x180>)
 80090fc:	4851      	ldr	r0, [pc, #324]	; (8009244 <netif_add+0x17c>)
 80090fe:	f00b f89d 	bl	801423c <iprintf>
 8009102:	2300      	movs	r3, #0
 8009104:	e096      	b.n	8009234 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800910c:	4b4f      	ldr	r3, [pc, #316]	; (800924c <netif_add+0x184>)
 800910e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009116:	4b4d      	ldr	r3, [pc, #308]	; (800924c <netif_add+0x184>)
 8009118:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009120:	4b4a      	ldr	r3, [pc, #296]	; (800924c <netif_add+0x184>)
 8009122:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4a45      	ldr	r2, [pc, #276]	; (8009250 <netif_add+0x188>)
 800913a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009156:	4b3f      	ldr	r3, [pc, #252]	; (8009254 <netif_add+0x18c>)
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009164:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 f913 	bl	8009398 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	4798      	blx	r3
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <netif_add+0xba>
    return NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	e058      	b.n	8009234 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009188:	2bff      	cmp	r3, #255	; 0xff
 800918a:	d103      	bne.n	8009194 <netif_add+0xcc>
        netif->num = 0;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009198:	4b2f      	ldr	r3, [pc, #188]	; (8009258 <netif_add+0x190>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	617b      	str	r3, [r7, #20]
 800919e:	e02b      	b.n	80091f8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d106      	bne.n	80091b6 <netif_add+0xee>
 80091a8:	4b24      	ldr	r3, [pc, #144]	; (800923c <netif_add+0x174>)
 80091aa:	f240 128b 	movw	r2, #395	; 0x18b
 80091ae:	492b      	ldr	r1, [pc, #172]	; (800925c <netif_add+0x194>)
 80091b0:	4824      	ldr	r0, [pc, #144]	; (8009244 <netif_add+0x17c>)
 80091b2:	f00b f843 	bl	801423c <iprintf>
        num_netifs++;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	3301      	adds	r3, #1
 80091ba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2bff      	cmp	r3, #255	; 0xff
 80091c0:	dd06      	ble.n	80091d0 <netif_add+0x108>
 80091c2:	4b1e      	ldr	r3, [pc, #120]	; (800923c <netif_add+0x174>)
 80091c4:	f240 128d 	movw	r2, #397	; 0x18d
 80091c8:	4925      	ldr	r1, [pc, #148]	; (8009260 <netif_add+0x198>)
 80091ca:	481e      	ldr	r0, [pc, #120]	; (8009244 <netif_add+0x17c>)
 80091cc:	f00b f836 	bl	801423c <iprintf>
        if (netif2->num == netif->num) {
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091dc:	429a      	cmp	r2, r3
 80091de:	d108      	bne.n	80091f2 <netif_add+0x12a>
          netif->num++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091e6:	3301      	adds	r3, #1
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80091f0:	e005      	b.n	80091fe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1d0      	bne.n	80091a0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1be      	bne.n	8009182 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800920a:	2bfe      	cmp	r3, #254	; 0xfe
 800920c:	d103      	bne.n	8009216 <netif_add+0x14e>
    netif_num = 0;
 800920e:	4b11      	ldr	r3, [pc, #68]	; (8009254 <netif_add+0x18c>)
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e006      	b.n	8009224 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800921c:	3301      	adds	r3, #1
 800921e:	b2da      	uxtb	r2, r3
 8009220:	4b0c      	ldr	r3, [pc, #48]	; (8009254 <netif_add+0x18c>)
 8009222:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009224:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <netif_add+0x190>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <netif_add+0x190>)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009232:	68fb      	ldr	r3, [r7, #12]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	08015d64 	.word	0x08015d64
 8009240:	08015df8 	.word	0x08015df8
 8009244:	08015db4 	.word	0x08015db4
 8009248:	08015e14 	.word	0x08015e14
 800924c:	080184b8 	.word	0x080184b8
 8009250:	080095ab 	.word	0x080095ab
 8009254:	2000a6e4 	.word	0x2000a6e4
 8009258:	2000a6dc 	.word	0x2000a6dc
 800925c:	08015e38 	.word	0x08015e38
 8009260:	08015e4c 	.word	0x08015e4c

08009264 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f002 faef 	bl	800b854 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f006 feb5 	bl	800ffe8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <netif_do_set_ipaddr+0x20>
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <netif_do_set_ipaddr+0x88>)
 800929c:	f240 12cb 	movw	r2, #459	; 0x1cb
 80092a0:	491c      	ldr	r1, [pc, #112]	; (8009314 <netif_do_set_ipaddr+0x8c>)
 80092a2:	481d      	ldr	r0, [pc, #116]	; (8009318 <netif_do_set_ipaddr+0x90>)
 80092a4:	f00a ffca 	bl	801423c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d106      	bne.n	80092bc <netif_do_set_ipaddr+0x34>
 80092ae:	4b18      	ldr	r3, [pc, #96]	; (8009310 <netif_do_set_ipaddr+0x88>)
 80092b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80092b4:	4917      	ldr	r1, [pc, #92]	; (8009314 <netif_do_set_ipaddr+0x8c>)
 80092b6:	4818      	ldr	r0, [pc, #96]	; (8009318 <netif_do_set_ipaddr+0x90>)
 80092b8:	f00a ffc0 	bl	801423c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3304      	adds	r3, #4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d01c      	beq.n	8009304 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3304      	adds	r3, #4
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff ffbf 	bl	8009264 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <netif_do_set_ipaddr+0x6a>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	e000      	b.n	80092f4 <netif_do_set_ipaddr+0x6c>
 80092f2:	2300      	movs	r3, #0
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80092f8:	2101      	movs	r1, #1
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f8d2 	bl	80094a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	08015d64 	.word	0x08015d64
 8009314:	08015e7c 	.word	0x08015e7c
 8009318:	08015db4 	.word	0x08015db4

0800931c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3308      	adds	r3, #8
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d00a      	beq.n	800934c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <netif_do_set_netmask+0x26>
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	e000      	b.n	8009344 <netif_do_set_netmask+0x28>
 8009342:	2300      	movs	r3, #0
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800935a:	b480      	push	{r7}
 800935c:	b085      	sub	sp, #20
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	330c      	adds	r3, #12
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d00a      	beq.n	800938a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <netif_do_set_gw+0x26>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	e000      	b.n	8009382 <netif_do_set_gw+0x28>
 8009380:	2300      	movs	r3, #0
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80093b4:	4b1c      	ldr	r3, [pc, #112]	; (8009428 <netif_set_addr+0x90>)
 80093b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80093be:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <netif_set_addr+0x90>)
 80093c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80093c8:	4b17      	ldr	r3, [pc, #92]	; (8009428 <netif_set_addr+0x90>)
 80093ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <netif_set_addr+0x42>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <netif_set_addr+0x46>
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <netif_set_addr+0x48>
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d006      	beq.n	80093f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80093e8:	f107 0310 	add.w	r3, r7, #16
 80093ec:	461a      	mov	r2, r3
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff ff49 	bl	8009288 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff ff8e 	bl	800931c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff ffa8 	bl	800935a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d106      	bne.n	800941e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009410:	f107 0310 	add.w	r3, r7, #16
 8009414:	461a      	mov	r2, r3
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7ff ff35 	bl	8009288 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800941e:	bf00      	nop
 8009420:	3720      	adds	r7, #32
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	080184b8 	.word	0x080184b8

0800942c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009434:	4a04      	ldr	r2, [pc, #16]	; (8009448 <netif_set_default+0x1c>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	2000a6e0 	.word	0x2000a6e0

0800944c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d107      	bne.n	800946a <netif_set_up+0x1e>
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <netif_set_up+0x4c>)
 800945c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009460:	490e      	ldr	r1, [pc, #56]	; (800949c <netif_set_up+0x50>)
 8009462:	480f      	ldr	r0, [pc, #60]	; (80094a0 <netif_set_up+0x54>)
 8009464:	f00a feea 	bl	801423c <iprintf>
 8009468:	e013      	b.n	8009492 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10c      	bne.n	8009492 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	b2da      	uxtb	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800948a:	2103      	movs	r1, #3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f809 	bl	80094a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	08015d64 	.word	0x08015d64
 800949c:	08015eec 	.word	0x08015eec
 80094a0:	08015db4 	.word	0x08015db4

080094a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <netif_issue_reports+0x20>
 80094b6:	4b18      	ldr	r3, [pc, #96]	; (8009518 <netif_issue_reports+0x74>)
 80094b8:	f240 326d 	movw	r2, #877	; 0x36d
 80094bc:	4917      	ldr	r1, [pc, #92]	; (800951c <netif_issue_reports+0x78>)
 80094be:	4818      	ldr	r0, [pc, #96]	; (8009520 <netif_issue_reports+0x7c>)
 80094c0:	f00a febc 	bl	801423c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d01e      	beq.n	8009510 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d017      	beq.n	8009510 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d013      	beq.n	8009512 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3304      	adds	r3, #4
 80094ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00e      	beq.n	8009512 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d007      	beq.n	8009512 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3304      	adds	r3, #4
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f007 fcd7 	bl	8010ebc <etharp_request>
 800950e:	e000      	b.n	8009512 <netif_issue_reports+0x6e>
    return;
 8009510:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	08015d64 	.word	0x08015d64
 800951c:	08015f08 	.word	0x08015f08
 8009520:	08015db4 	.word	0x08015db4

08009524 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <netif_set_down+0x1e>
 8009532:	4b12      	ldr	r3, [pc, #72]	; (800957c <netif_set_down+0x58>)
 8009534:	f240 329b 	movw	r2, #923	; 0x39b
 8009538:	4911      	ldr	r1, [pc, #68]	; (8009580 <netif_set_down+0x5c>)
 800953a:	4812      	ldr	r0, [pc, #72]	; (8009584 <netif_set_down+0x60>)
 800953c:	f00a fe7e 	bl	801423c <iprintf>
 8009540:	e019      	b.n	8009576 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009556:	f023 0301 	bic.w	r3, r3, #1
 800955a:	b2da      	uxtb	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f007 f861 	bl	8010638 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	08015d64 	.word	0x08015d64
 8009580:	08015f2c 	.word	0x08015f2c
 8009584:	08015db4 	.word	0x08015db4

08009588 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	61da      	str	r2, [r3, #28]
  }
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b085      	sub	sp, #20
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80095b6:	f06f 030b 	mvn.w	r3, #11
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80095d2:	79fb      	ldrb	r3, [r7, #7]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d013      	beq.n	8009600 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80095d8:	4b0d      	ldr	r3, [pc, #52]	; (8009610 <netif_get_by_index+0x48>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	e00c      	b.n	80095fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095e6:	3301      	adds	r3, #1
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	79fa      	ldrb	r2, [r7, #7]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d101      	bne.n	80095f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	e006      	b.n	8009602 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1ef      	bne.n	80095e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	2000a6dc 	.word	0x2000a6dc

08009614 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800961a:	4b0c      	ldr	r3, [pc, #48]	; (800964c <pbuf_free_ooseq+0x38>)
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <pbuf_free_ooseq+0x3c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	607b      	str	r3, [r7, #4]
 8009626:	e00a      	b.n	800963e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f002 f94d 	bl	800b8d0 <tcp_free_ooseq>
      return;
 8009636:	e005      	b.n	8009644 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	607b      	str	r3, [r7, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1f1      	bne.n	8009628 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	2000a6e5 	.word	0x2000a6e5
 8009650:	2000a6f4 	.word	0x2000a6f4

08009654 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009658:	4b03      	ldr	r3, [pc, #12]	; (8009668 <pbuf_pool_is_empty+0x14>)
 800965a:	2201      	movs	r2, #1
 800965c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800965e:	bf00      	nop
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	2000a6e5 	.word	0x2000a6e5

0800966c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4611      	mov	r1, r2
 8009678:	461a      	mov	r2, r3
 800967a:	460b      	mov	r3, r1
 800967c:	80fb      	strh	r3, [r7, #6]
 800967e:	4613      	mov	r3, r2
 8009680:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	88fa      	ldrh	r2, [r7, #6]
 8009692:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	88ba      	ldrh	r2, [r7, #4]
 8009698:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800969a:	8b3b      	ldrh	r3, [r7, #24]
 800969c:	b2da      	uxtb	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	7f3a      	ldrb	r2, [r7, #28]
 80096a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2201      	movs	r2, #1
 80096ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	73da      	strb	r2, [r3, #15]
}
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08c      	sub	sp, #48	; 0x30
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	4603      	mov	r3, r0
 80096c8:	71fb      	strb	r3, [r7, #7]
 80096ca:	460b      	mov	r3, r1
 80096cc:	80bb      	strh	r3, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80096d6:	887b      	ldrh	r3, [r7, #2]
 80096d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80096dc:	d07f      	beq.n	80097de <pbuf_alloc+0x11e>
 80096de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80096e2:	f300 80c8 	bgt.w	8009876 <pbuf_alloc+0x1b6>
 80096e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80096ea:	d010      	beq.n	800970e <pbuf_alloc+0x4e>
 80096ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80096f0:	f300 80c1 	bgt.w	8009876 <pbuf_alloc+0x1b6>
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d002      	beq.n	80096fe <pbuf_alloc+0x3e>
 80096f8:	2b41      	cmp	r3, #65	; 0x41
 80096fa:	f040 80bc 	bne.w	8009876 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80096fe:	887a      	ldrh	r2, [r7, #2]
 8009700:	88bb      	ldrh	r3, [r7, #4]
 8009702:	4619      	mov	r1, r3
 8009704:	2000      	movs	r0, #0
 8009706:	f000 f8d1 	bl	80098ac <pbuf_alloc_reference>
 800970a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800970c:	e0bd      	b.n	800988a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009716:	88bb      	ldrh	r3, [r7, #4]
 8009718:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800971a:	2008      	movs	r0, #8
 800971c:	f7ff fc56 	bl	8008fcc <memp_malloc>
 8009720:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d109      	bne.n	800973c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009728:	f7ff ff94 	bl	8009654 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009734:	f000 faa8 	bl	8009c88 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009738:	2300      	movs	r3, #0
 800973a:	e0a7      	b.n	800988c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800973c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800973e:	3303      	adds	r3, #3
 8009740:	b29b      	uxth	r3, r3
 8009742:	f023 0303 	bic.w	r3, r3, #3
 8009746:	b29b      	uxth	r3, r3
 8009748:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800974c:	b29b      	uxth	r3, r3
 800974e:	8b7a      	ldrh	r2, [r7, #26]
 8009750:	4293      	cmp	r3, r2
 8009752:	bf28      	it	cs
 8009754:	4613      	movcs	r3, r2
 8009756:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800975a:	3310      	adds	r3, #16
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4413      	add	r3, r2
 8009760:	3303      	adds	r3, #3
 8009762:	f023 0303 	bic.w	r3, r3, #3
 8009766:	4618      	mov	r0, r3
 8009768:	89f9      	ldrh	r1, [r7, #14]
 800976a:	8b7a      	ldrh	r2, [r7, #26]
 800976c:	2300      	movs	r3, #0
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	887b      	ldrh	r3, [r7, #2]
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	460b      	mov	r3, r1
 8009776:	4601      	mov	r1, r0
 8009778:	6938      	ldr	r0, [r7, #16]
 800977a:	f7ff ff77 	bl	800966c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d006      	beq.n	8009798 <pbuf_alloc+0xd8>
 800978a:	4b42      	ldr	r3, [pc, #264]	; (8009894 <pbuf_alloc+0x1d4>)
 800978c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009790:	4941      	ldr	r1, [pc, #260]	; (8009898 <pbuf_alloc+0x1d8>)
 8009792:	4842      	ldr	r0, [pc, #264]	; (800989c <pbuf_alloc+0x1dc>)
 8009794:	f00a fd52 	bl	801423c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800979a:	3303      	adds	r3, #3
 800979c:	f023 0303 	bic.w	r3, r3, #3
 80097a0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80097a4:	d106      	bne.n	80097b4 <pbuf_alloc+0xf4>
 80097a6:	4b3b      	ldr	r3, [pc, #236]	; (8009894 <pbuf_alloc+0x1d4>)
 80097a8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80097ac:	493c      	ldr	r1, [pc, #240]	; (80098a0 <pbuf_alloc+0x1e0>)
 80097ae:	483b      	ldr	r0, [pc, #236]	; (800989c <pbuf_alloc+0x1dc>)
 80097b0:	f00a fd44 	bl	801423c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
 80097be:	e002      	b.n	80097c6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80097ca:	8b7a      	ldrh	r2, [r7, #26]
 80097cc:	89fb      	ldrh	r3, [r7, #14]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80097d6:	8b7b      	ldrh	r3, [r7, #26]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d19e      	bne.n	800971a <pbuf_alloc+0x5a>
      break;
 80097dc:	e055      	b.n	800988a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80097de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097e0:	3303      	adds	r3, #3
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	88bb      	ldrh	r3, [r7, #4]
 80097ec:	3303      	adds	r3, #3
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f023 0303 	bic.w	r3, r3, #3
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80097fa:	8b3b      	ldrh	r3, [r7, #24]
 80097fc:	3310      	adds	r3, #16
 80097fe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009800:	8b3a      	ldrh	r2, [r7, #24]
 8009802:	88bb      	ldrh	r3, [r7, #4]
 8009804:	3303      	adds	r3, #3
 8009806:	f023 0303 	bic.w	r3, r3, #3
 800980a:	429a      	cmp	r2, r3
 800980c:	d306      	bcc.n	800981c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800980e:	8afa      	ldrh	r2, [r7, #22]
 8009810:	88bb      	ldrh	r3, [r7, #4]
 8009812:	3303      	adds	r3, #3
 8009814:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009818:	429a      	cmp	r2, r3
 800981a:	d201      	bcs.n	8009820 <pbuf_alloc+0x160>
        return NULL;
 800981c:	2300      	movs	r3, #0
 800981e:	e035      	b.n	800988c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009820:	8afb      	ldrh	r3, [r7, #22]
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff fa64 	bl	8008cf0 <mem_malloc>
 8009828:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <pbuf_alloc+0x174>
        return NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	e02b      	b.n	800988c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009836:	3310      	adds	r3, #16
 8009838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983a:	4413      	add	r3, r2
 800983c:	3303      	adds	r3, #3
 800983e:	f023 0303 	bic.w	r3, r3, #3
 8009842:	4618      	mov	r0, r3
 8009844:	88b9      	ldrh	r1, [r7, #4]
 8009846:	88ba      	ldrh	r2, [r7, #4]
 8009848:	2300      	movs	r3, #0
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	887b      	ldrh	r3, [r7, #2]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	460b      	mov	r3, r1
 8009852:	4601      	mov	r1, r0
 8009854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009856:	f7ff ff09 	bl	800966c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d010      	beq.n	8009888 <pbuf_alloc+0x1c8>
 8009866:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <pbuf_alloc+0x1d4>)
 8009868:	f44f 7291 	mov.w	r2, #290	; 0x122
 800986c:	490d      	ldr	r1, [pc, #52]	; (80098a4 <pbuf_alloc+0x1e4>)
 800986e:	480b      	ldr	r0, [pc, #44]	; (800989c <pbuf_alloc+0x1dc>)
 8009870:	f00a fce4 	bl	801423c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009874:	e008      	b.n	8009888 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009876:	4b07      	ldr	r3, [pc, #28]	; (8009894 <pbuf_alloc+0x1d4>)
 8009878:	f240 1227 	movw	r2, #295	; 0x127
 800987c:	490a      	ldr	r1, [pc, #40]	; (80098a8 <pbuf_alloc+0x1e8>)
 800987e:	4807      	ldr	r0, [pc, #28]	; (800989c <pbuf_alloc+0x1dc>)
 8009880:	f00a fcdc 	bl	801423c <iprintf>
      return NULL;
 8009884:	2300      	movs	r3, #0
 8009886:	e001      	b.n	800988c <pbuf_alloc+0x1cc>
      break;
 8009888:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800988c:	4618      	mov	r0, r3
 800988e:	3728      	adds	r7, #40	; 0x28
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	08015f94 	.word	0x08015f94
 8009898:	08015fc4 	.word	0x08015fc4
 800989c:	08015ff4 	.word	0x08015ff4
 80098a0:	0801601c 	.word	0x0801601c
 80098a4:	08016050 	.word	0x08016050
 80098a8:	0801607c 	.word	0x0801607c

080098ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	807b      	strh	r3, [r7, #2]
 80098b8:	4613      	mov	r3, r2
 80098ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80098bc:	883b      	ldrh	r3, [r7, #0]
 80098be:	2b41      	cmp	r3, #65	; 0x41
 80098c0:	d009      	beq.n	80098d6 <pbuf_alloc_reference+0x2a>
 80098c2:	883b      	ldrh	r3, [r7, #0]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d006      	beq.n	80098d6 <pbuf_alloc_reference+0x2a>
 80098c8:	4b0f      	ldr	r3, [pc, #60]	; (8009908 <pbuf_alloc_reference+0x5c>)
 80098ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80098ce:	490f      	ldr	r1, [pc, #60]	; (800990c <pbuf_alloc_reference+0x60>)
 80098d0:	480f      	ldr	r0, [pc, #60]	; (8009910 <pbuf_alloc_reference+0x64>)
 80098d2:	f00a fcb3 	bl	801423c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80098d6:	2007      	movs	r0, #7
 80098d8:	f7ff fb78 	bl	8008fcc <memp_malloc>
 80098dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e00b      	b.n	8009900 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80098e8:	8879      	ldrh	r1, [r7, #2]
 80098ea:	887a      	ldrh	r2, [r7, #2]
 80098ec:	2300      	movs	r3, #0
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	883b      	ldrh	r3, [r7, #0]
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	460b      	mov	r3, r1
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f7ff feb7 	bl	800966c <pbuf_init_alloced_pbuf>
  return p;
 80098fe:	68fb      	ldr	r3, [r7, #12]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	08015f94 	.word	0x08015f94
 800990c:	08016098 	.word	0x08016098
 8009910:	08015ff4 	.word	0x08015ff4

08009914 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af02      	add	r7, sp, #8
 800991a:	607b      	str	r3, [r7, #4]
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]
 8009920:	460b      	mov	r3, r1
 8009922:	81bb      	strh	r3, [r7, #12]
 8009924:	4613      	mov	r3, r2
 8009926:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800992c:	8a7b      	ldrh	r3, [r7, #18]
 800992e:	3303      	adds	r3, #3
 8009930:	f023 0203 	bic.w	r2, r3, #3
 8009934:	89bb      	ldrh	r3, [r7, #12]
 8009936:	441a      	add	r2, r3
 8009938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800993a:	429a      	cmp	r2, r3
 800993c:	d901      	bls.n	8009942 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800993e:	2300      	movs	r3, #0
 8009940:	e018      	b.n	8009974 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009948:	8a7b      	ldrh	r3, [r7, #18]
 800994a:	3303      	adds	r3, #3
 800994c:	f023 0303 	bic.w	r3, r3, #3
 8009950:	6a3a      	ldr	r2, [r7, #32]
 8009952:	4413      	add	r3, r2
 8009954:	617b      	str	r3, [r7, #20]
 8009956:	e001      	b.n	800995c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	89b9      	ldrh	r1, [r7, #12]
 8009960:	89ba      	ldrh	r2, [r7, #12]
 8009962:	2302      	movs	r3, #2
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	897b      	ldrh	r3, [r7, #10]
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	460b      	mov	r3, r1
 800996c:	6979      	ldr	r1, [r7, #20]
 800996e:	f7ff fe7d 	bl	800966c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009972:	687b      	ldr	r3, [r7, #4]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <pbuf_realloc+0x20>
 800998e:	4b3a      	ldr	r3, [pc, #232]	; (8009a78 <pbuf_realloc+0xfc>)
 8009990:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009994:	4939      	ldr	r1, [pc, #228]	; (8009a7c <pbuf_realloc+0x100>)
 8009996:	483a      	ldr	r0, [pc, #232]	; (8009a80 <pbuf_realloc+0x104>)
 8009998:	f00a fc50 	bl	801423c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	891b      	ldrh	r3, [r3, #8]
 80099a0:	887a      	ldrh	r2, [r7, #2]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d263      	bcs.n	8009a6e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	891a      	ldrh	r2, [r3, #8]
 80099aa:	887b      	ldrh	r3, [r7, #2]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80099b0:	887b      	ldrh	r3, [r7, #2]
 80099b2:	817b      	strh	r3, [r7, #10]
  q = p;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80099b8:	e018      	b.n	80099ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	895b      	ldrh	r3, [r3, #10]
 80099be:	897a      	ldrh	r2, [r7, #10]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	891a      	ldrh	r2, [r3, #8]
 80099c8:	893b      	ldrh	r3, [r7, #8]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <pbuf_realloc+0x70>
 80099de:	4b26      	ldr	r3, [pc, #152]	; (8009a78 <pbuf_realloc+0xfc>)
 80099e0:	f240 12af 	movw	r2, #431	; 0x1af
 80099e4:	4927      	ldr	r1, [pc, #156]	; (8009a84 <pbuf_realloc+0x108>)
 80099e6:	4826      	ldr	r0, [pc, #152]	; (8009a80 <pbuf_realloc+0x104>)
 80099e8:	f00a fc28 	bl	801423c <iprintf>
  while (rem_len > q->len) {
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	895b      	ldrh	r3, [r3, #10]
 80099f0:	897a      	ldrh	r2, [r7, #10]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d8e1      	bhi.n	80099ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	7b1b      	ldrb	r3, [r3, #12]
 80099fa:	f003 030f 	and.w	r3, r3, #15
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d121      	bne.n	8009a46 <pbuf_realloc+0xca>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	895b      	ldrh	r3, [r3, #10]
 8009a06:	897a      	ldrh	r2, [r7, #10]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d01c      	beq.n	8009a46 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	7b5b      	ldrb	r3, [r3, #13]
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d116      	bne.n	8009a46 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	897b      	ldrh	r3, [r7, #10]
 8009a24:	4413      	add	r3, r2
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4619      	mov	r1, r3
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7ff f864 	bl	8008af8 <mem_trim>
 8009a30:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d106      	bne.n	8009a46 <pbuf_realloc+0xca>
 8009a38:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <pbuf_realloc+0xfc>)
 8009a3a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009a3e:	4912      	ldr	r1, [pc, #72]	; (8009a88 <pbuf_realloc+0x10c>)
 8009a40:	480f      	ldr	r0, [pc, #60]	; (8009a80 <pbuf_realloc+0x104>)
 8009a42:	f00a fbfb 	bl	801423c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	897a      	ldrh	r2, [r7, #10]
 8009a4a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	895a      	ldrh	r2, [r3, #10]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d004      	beq.n	8009a66 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 f911 	bl	8009c88 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e000      	b.n	8009a70 <pbuf_realloc+0xf4>
    return;
 8009a6e:	bf00      	nop

}
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	08015f94 	.word	0x08015f94
 8009a7c:	080160ac 	.word	0x080160ac
 8009a80:	08015ff4 	.word	0x08015ff4
 8009a84:	080160c4 	.word	0x080160c4
 8009a88:	080160dc 	.word	0x080160dc

08009a8c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d106      	bne.n	8009aae <pbuf_add_header_impl+0x22>
 8009aa0:	4b2b      	ldr	r3, [pc, #172]	; (8009b50 <pbuf_add_header_impl+0xc4>)
 8009aa2:	f240 12df 	movw	r2, #479	; 0x1df
 8009aa6:	492b      	ldr	r1, [pc, #172]	; (8009b54 <pbuf_add_header_impl+0xc8>)
 8009aa8:	482b      	ldr	r0, [pc, #172]	; (8009b58 <pbuf_add_header_impl+0xcc>)
 8009aaa:	f00a fbc7 	bl	801423c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d003      	beq.n	8009abc <pbuf_add_header_impl+0x30>
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aba:	d301      	bcc.n	8009ac0 <pbuf_add_header_impl+0x34>
    return 1;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e043      	b.n	8009b48 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <pbuf_add_header_impl+0x3e>
    return 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e03e      	b.n	8009b48 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	891a      	ldrh	r2, [r3, #8]
 8009ad2:	8a7b      	ldrh	r3, [r7, #18]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8a7a      	ldrh	r2, [r7, #18]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d901      	bls.n	8009ae2 <pbuf_add_header_impl+0x56>
    return 1;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e032      	b.n	8009b48 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	7b1b      	ldrb	r3, [r3, #12]
 8009ae6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009ae8:	8a3b      	ldrh	r3, [r7, #16]
 8009aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00c      	beq.n	8009b0c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	425b      	negs	r3, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3310      	adds	r3, #16
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d20d      	bcs.n	8009b24 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e01d      	b.n	8009b48 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d006      	beq.n	8009b20 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	425b      	negs	r3, r3
 8009b1a:	4413      	add	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	e001      	b.n	8009b24 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e011      	b.n	8009b48 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	895a      	ldrh	r2, [r3, #10]
 8009b2e:	8a7b      	ldrh	r3, [r7, #18]
 8009b30:	4413      	add	r3, r2
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	891a      	ldrh	r2, [r3, #8]
 8009b3c:	8a7b      	ldrh	r3, [r7, #18]
 8009b3e:	4413      	add	r3, r2
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	811a      	strh	r2, [r3, #8]


  return 0;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	08015f94 	.word	0x08015f94
 8009b54:	080160f8 	.word	0x080160f8
 8009b58:	08015ff4 	.word	0x08015ff4

08009b5c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009b66:	2200      	movs	r2, #0
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff ff8e 	bl	8009a8c <pbuf_add_header_impl>
 8009b70:	4603      	mov	r3, r0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <pbuf_remove_header+0x1e>
 8009b8c:	4b20      	ldr	r3, [pc, #128]	; (8009c10 <pbuf_remove_header+0x94>)
 8009b8e:	f240 224b 	movw	r2, #587	; 0x24b
 8009b92:	4920      	ldr	r1, [pc, #128]	; (8009c14 <pbuf_remove_header+0x98>)
 8009b94:	4820      	ldr	r0, [pc, #128]	; (8009c18 <pbuf_remove_header+0x9c>)
 8009b96:	f00a fb51 	bl	801423c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <pbuf_remove_header+0x2c>
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ba6:	d301      	bcc.n	8009bac <pbuf_remove_header+0x30>
    return 1;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e02c      	b.n	8009c06 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <pbuf_remove_header+0x3a>
    return 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e027      	b.n	8009c06 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	895b      	ldrh	r3, [r3, #10]
 8009bbe:	89fa      	ldrh	r2, [r7, #14]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d908      	bls.n	8009bd6 <pbuf_remove_header+0x5a>
 8009bc4:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <pbuf_remove_header+0x94>)
 8009bc6:	f240 2255 	movw	r2, #597	; 0x255
 8009bca:	4914      	ldr	r1, [pc, #80]	; (8009c1c <pbuf_remove_header+0xa0>)
 8009bcc:	4812      	ldr	r0, [pc, #72]	; (8009c18 <pbuf_remove_header+0x9c>)
 8009bce:	f00a fb35 	bl	801423c <iprintf>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e017      	b.n	8009c06 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	441a      	add	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	895a      	ldrh	r2, [r3, #10]
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	891a      	ldrh	r2, [r3, #8]
 8009bfa:	89fb      	ldrh	r3, [r7, #14]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	08015f94 	.word	0x08015f94
 8009c14:	080160f8 	.word	0x080160f8
 8009c18:	08015ff4 	.word	0x08015ff4
 8009c1c:	08016104 	.word	0x08016104

08009c20 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	807b      	strh	r3, [r7, #2]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009c30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da08      	bge.n	8009c4a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c3c:	425b      	negs	r3, r3
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff ff9b 	bl	8009b7c <pbuf_remove_header>
 8009c46:	4603      	mov	r3, r0
 8009c48:	e007      	b.n	8009c5a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009c4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c4e:	787a      	ldrb	r2, [r7, #1]
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ff1a 	bl	8009a8c <pbuf_add_header_impl>
 8009c58:	4603      	mov	r3, r0
  }
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c72:	2201      	movs	r2, #1
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff ffd2 	bl	8009c20 <pbuf_header_impl>
 8009c7c:	4603      	mov	r3, r0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10b      	bne.n	8009cae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <pbuf_free+0x22>
 8009c9c:	4b38      	ldr	r3, [pc, #224]	; (8009d80 <pbuf_free+0xf8>)
 8009c9e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009ca2:	4938      	ldr	r1, [pc, #224]	; (8009d84 <pbuf_free+0xfc>)
 8009ca4:	4838      	ldr	r0, [pc, #224]	; (8009d88 <pbuf_free+0x100>)
 8009ca6:	f00a fac9 	bl	801423c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	e063      	b.n	8009d76 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009cb2:	e05c      	b.n	8009d6e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	7b9b      	ldrb	r3, [r3, #14]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d106      	bne.n	8009cca <pbuf_free+0x42>
 8009cbc:	4b30      	ldr	r3, [pc, #192]	; (8009d80 <pbuf_free+0xf8>)
 8009cbe:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009cc2:	4932      	ldr	r1, [pc, #200]	; (8009d8c <pbuf_free+0x104>)
 8009cc4:	4830      	ldr	r0, [pc, #192]	; (8009d88 <pbuf_free+0x100>)
 8009cc6:	f00a fab9 	bl	801423c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7b9b      	ldrb	r3, [r3, #14]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	739a      	strb	r2, [r3, #14]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7b9b      	ldrb	r3, [r3, #14]
 8009cda:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009cdc:	7dbb      	ldrb	r3, [r7, #22]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d143      	bne.n	8009d6a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	7b1b      	ldrb	r3, [r3, #12]
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7b5b      	ldrb	r3, [r3, #13]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d011      	beq.n	8009d22 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <pbuf_free+0x90>
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <pbuf_free+0xf8>)
 8009d0c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009d10:	491f      	ldr	r1, [pc, #124]	; (8009d90 <pbuf_free+0x108>)
 8009d12:	481d      	ldr	r0, [pc, #116]	; (8009d88 <pbuf_free+0x100>)
 8009d14:	f00a fa92 	bl	801423c <iprintf>
        pc->custom_free_function(p);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3
 8009d20:	e01d      	b.n	8009d5e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d104      	bne.n	8009d32 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	2008      	movs	r0, #8
 8009d2c:	f7ff f99a 	bl	8009064 <memp_free>
 8009d30:	e015      	b.n	8009d5e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d104      	bne.n	8009d42 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	2007      	movs	r0, #7
 8009d3c:	f7ff f992 	bl	8009064 <memp_free>
 8009d40:	e00d      	b.n	8009d5e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d103      	bne.n	8009d50 <pbuf_free+0xc8>
          mem_free(p);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7fe fe6b 	bl	8008a24 <mem_free>
 8009d4e:	e006      	b.n	8009d5e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <pbuf_free+0xf8>)
 8009d52:	f240 320f 	movw	r2, #783	; 0x30f
 8009d56:	490f      	ldr	r1, [pc, #60]	; (8009d94 <pbuf_free+0x10c>)
 8009d58:	480b      	ldr	r0, [pc, #44]	; (8009d88 <pbuf_free+0x100>)
 8009d5a:	f00a fa6f 	bl	801423c <iprintf>
        }
      }
      count++;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	3301      	adds	r3, #1
 8009d62:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	e001      	b.n	8009d6e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d19f      	bne.n	8009cb4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	08015f94 	.word	0x08015f94
 8009d84:	080160f8 	.word	0x080160f8
 8009d88:	08015ff4 	.word	0x08015ff4
 8009d8c:	08016124 	.word	0x08016124
 8009d90:	0801613c 	.word	0x0801613c
 8009d94:	08016160 	.word	0x08016160

08009d98 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009da4:	e005      	b.n	8009db2 <pbuf_clen+0x1a>
    ++len;
 8009da6:	89fb      	ldrh	r3, [r7, #14]
 8009da8:	3301      	adds	r3, #1
 8009daa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f6      	bne.n	8009da6 <pbuf_clen+0xe>
  }
  return len;
 8009db8:	89fb      	ldrh	r3, [r7, #14]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d010      	beq.n	8009df8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	7b9b      	ldrb	r3, [r3, #14]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7b9b      	ldrb	r3, [r3, #14]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <pbuf_ref+0x30>
 8009dea:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <pbuf_ref+0x38>)
 8009dec:	f240 3242 	movw	r2, #834	; 0x342
 8009df0:	4904      	ldr	r1, [pc, #16]	; (8009e04 <pbuf_ref+0x3c>)
 8009df2:	4805      	ldr	r0, [pc, #20]	; (8009e08 <pbuf_ref+0x40>)
 8009df4:	f00a fa22 	bl	801423c <iprintf>
  }
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	08015f94 	.word	0x08015f94
 8009e04:	08016174 	.word	0x08016174
 8009e08:	08015ff4 	.word	0x08015ff4

08009e0c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <pbuf_cat+0x16>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d107      	bne.n	8009e32 <pbuf_cat+0x26>
 8009e22:	4b20      	ldr	r3, [pc, #128]	; (8009ea4 <pbuf_cat+0x98>)
 8009e24:	f240 3259 	movw	r2, #857	; 0x359
 8009e28:	491f      	ldr	r1, [pc, #124]	; (8009ea8 <pbuf_cat+0x9c>)
 8009e2a:	4820      	ldr	r0, [pc, #128]	; (8009eac <pbuf_cat+0xa0>)
 8009e2c:	f00a fa06 	bl	801423c <iprintf>
 8009e30:	e034      	b.n	8009e9c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	e00a      	b.n	8009e4e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	891a      	ldrh	r2, [r3, #8]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	891b      	ldrh	r3, [r3, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1f0      	bne.n	8009e38 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	891a      	ldrh	r2, [r3, #8]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	895b      	ldrh	r3, [r3, #10]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d006      	beq.n	8009e70 <pbuf_cat+0x64>
 8009e62:	4b10      	ldr	r3, [pc, #64]	; (8009ea4 <pbuf_cat+0x98>)
 8009e64:	f240 3262 	movw	r2, #866	; 0x362
 8009e68:	4911      	ldr	r1, [pc, #68]	; (8009eb0 <pbuf_cat+0xa4>)
 8009e6a:	4810      	ldr	r0, [pc, #64]	; (8009eac <pbuf_cat+0xa0>)
 8009e6c:	f00a f9e6 	bl	801423c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d006      	beq.n	8009e86 <pbuf_cat+0x7a>
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <pbuf_cat+0x98>)
 8009e7a:	f240 3263 	movw	r2, #867	; 0x363
 8009e7e:	490d      	ldr	r1, [pc, #52]	; (8009eb4 <pbuf_cat+0xa8>)
 8009e80:	480a      	ldr	r0, [pc, #40]	; (8009eac <pbuf_cat+0xa0>)
 8009e82:	f00a f9db 	bl	801423c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	891a      	ldrh	r2, [r3, #8]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	891b      	ldrh	r3, [r3, #8]
 8009e8e:	4413      	add	r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	08015f94 	.word	0x08015f94
 8009ea8:	08016188 	.word	0x08016188
 8009eac:	08015ff4 	.word	0x08015ff4
 8009eb0:	080161c0 	.word	0x080161c0
 8009eb4:	080161f0 	.word	0x080161f0

08009eb8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ffa1 	bl	8009e0c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009eca:	6838      	ldr	r0, [r7, #0]
 8009ecc:	f7ff ff7c 	bl	8009dc8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d008      	beq.n	8009f02 <pbuf_copy+0x2a>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d005      	beq.n	8009f02 <pbuf_copy+0x2a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	891a      	ldrh	r2, [r3, #8]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	891b      	ldrh	r3, [r3, #8]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d209      	bcs.n	8009f16 <pbuf_copy+0x3e>
 8009f02:	4b57      	ldr	r3, [pc, #348]	; (800a060 <pbuf_copy+0x188>)
 8009f04:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009f08:	4956      	ldr	r1, [pc, #344]	; (800a064 <pbuf_copy+0x18c>)
 8009f0a:	4857      	ldr	r0, [pc, #348]	; (800a068 <pbuf_copy+0x190>)
 8009f0c:	f00a f996 	bl	801423c <iprintf>
 8009f10:	f06f 030f 	mvn.w	r3, #15
 8009f14:	e09f      	b.n	800a056 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	895b      	ldrh	r3, [r3, #10]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	895b      	ldrh	r3, [r3, #10]
 8009f24:	4619      	mov	r1, r3
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	1acb      	subs	r3, r1, r3
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d306      	bcc.n	8009f3c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	895b      	ldrh	r3, [r3, #10]
 8009f32:	461a      	mov	r2, r3
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	e005      	b.n	8009f48 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	895b      	ldrh	r3, [r3, #10]
 8009f40:	461a      	mov	r2, r3
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	18d0      	adds	r0, r2, r3
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	4413      	add	r3, r2
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	f00a f93e 	bl	80141dc <memcpy>
    offset_to += len;
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4413      	add	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	895b      	ldrh	r3, [r3, #10]
 8009f74:	461a      	mov	r2, r3
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d906      	bls.n	8009f8a <pbuf_copy+0xb2>
 8009f7c:	4b38      	ldr	r3, [pc, #224]	; (800a060 <pbuf_copy+0x188>)
 8009f7e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009f82:	493a      	ldr	r1, [pc, #232]	; (800a06c <pbuf_copy+0x194>)
 8009f84:	4838      	ldr	r0, [pc, #224]	; (800a068 <pbuf_copy+0x190>)
 8009f86:	f00a f959 	bl	801423c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	895b      	ldrh	r3, [r3, #10]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d906      	bls.n	8009fa4 <pbuf_copy+0xcc>
 8009f96:	4b32      	ldr	r3, [pc, #200]	; (800a060 <pbuf_copy+0x188>)
 8009f98:	f240 32da 	movw	r2, #986	; 0x3da
 8009f9c:	4934      	ldr	r1, [pc, #208]	; (800a070 <pbuf_copy+0x198>)
 8009f9e:	4832      	ldr	r0, [pc, #200]	; (800a068 <pbuf_copy+0x190>)
 8009fa0:	f00a f94c 	bl	801423c <iprintf>
    if (offset_from >= p_from->len) {
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	895b      	ldrh	r3, [r3, #10]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d304      	bcc.n	8009fba <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	895b      	ldrh	r3, [r3, #10]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d114      	bne.n	8009ff0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10c      	bne.n	8009ff0 <pbuf_copy+0x118>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <pbuf_copy+0x118>
 8009fdc:	4b20      	ldr	r3, [pc, #128]	; (800a060 <pbuf_copy+0x188>)
 8009fde:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009fe2:	4924      	ldr	r1, [pc, #144]	; (800a074 <pbuf_copy+0x19c>)
 8009fe4:	4820      	ldr	r0, [pc, #128]	; (800a068 <pbuf_copy+0x190>)
 8009fe6:	f00a f929 	bl	801423c <iprintf>
 8009fea:	f06f 030f 	mvn.w	r3, #15
 8009fee:	e032      	b.n	800a056 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d013      	beq.n	800a01e <pbuf_copy+0x146>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	895a      	ldrh	r2, [r3, #10]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	891b      	ldrh	r3, [r3, #8]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d10d      	bne.n	800a01e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d009      	beq.n	800a01e <pbuf_copy+0x146>
 800a00a:	4b15      	ldr	r3, [pc, #84]	; (800a060 <pbuf_copy+0x188>)
 800a00c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a010:	4919      	ldr	r1, [pc, #100]	; (800a078 <pbuf_copy+0x1a0>)
 800a012:	4815      	ldr	r0, [pc, #84]	; (800a068 <pbuf_copy+0x190>)
 800a014:	f00a f912 	bl	801423c <iprintf>
 800a018:	f06f 0305 	mvn.w	r3, #5
 800a01c:	e01b      	b.n	800a056 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d013      	beq.n	800a04c <pbuf_copy+0x174>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	895a      	ldrh	r2, [r3, #10]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	891b      	ldrh	r3, [r3, #8]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d10d      	bne.n	800a04c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <pbuf_copy+0x174>
 800a038:	4b09      	ldr	r3, [pc, #36]	; (800a060 <pbuf_copy+0x188>)
 800a03a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a03e:	490e      	ldr	r1, [pc, #56]	; (800a078 <pbuf_copy+0x1a0>)
 800a040:	4809      	ldr	r0, [pc, #36]	; (800a068 <pbuf_copy+0x190>)
 800a042:	f00a f8fb 	bl	801423c <iprintf>
 800a046:	f06f 0305 	mvn.w	r3, #5
 800a04a:	e004      	b.n	800a056 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f47f af61 	bne.w	8009f16 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	08015f94 	.word	0x08015f94
 800a064:	0801623c 	.word	0x0801623c
 800a068:	08015ff4 	.word	0x08015ff4
 800a06c:	0801626c 	.word	0x0801626c
 800a070:	08016284 	.word	0x08016284
 800a074:	080162a0 	.word	0x080162a0
 800a078:	080162b0 	.word	0x080162b0

0800a07c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4611      	mov	r1, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	460b      	mov	r3, r1
 800a08c:	80fb      	strh	r3, [r7, #6]
 800a08e:	4613      	mov	r3, r2
 800a090:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d108      	bne.n	800a0b2 <pbuf_copy_partial+0x36>
 800a0a0:	4b2b      	ldr	r3, [pc, #172]	; (800a150 <pbuf_copy_partial+0xd4>)
 800a0a2:	f240 420a 	movw	r2, #1034	; 0x40a
 800a0a6:	492b      	ldr	r1, [pc, #172]	; (800a154 <pbuf_copy_partial+0xd8>)
 800a0a8:	482b      	ldr	r0, [pc, #172]	; (800a158 <pbuf_copy_partial+0xdc>)
 800a0aa:	f00a f8c7 	bl	801423c <iprintf>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e04a      	b.n	800a148 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d108      	bne.n	800a0ca <pbuf_copy_partial+0x4e>
 800a0b8:	4b25      	ldr	r3, [pc, #148]	; (800a150 <pbuf_copy_partial+0xd4>)
 800a0ba:	f240 420b 	movw	r2, #1035	; 0x40b
 800a0be:	4927      	ldr	r1, [pc, #156]	; (800a15c <pbuf_copy_partial+0xe0>)
 800a0c0:	4825      	ldr	r0, [pc, #148]	; (800a158 <pbuf_copy_partial+0xdc>)
 800a0c2:	f00a f8bb 	bl	801423c <iprintf>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e03e      	b.n	800a148 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	e034      	b.n	800a13a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a0d0:	88bb      	ldrh	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <pbuf_copy_partial+0x70>
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	895b      	ldrh	r3, [r3, #10]
 800a0da:	88ba      	ldrh	r2, [r7, #4]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d305      	bcc.n	800a0ec <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	895b      	ldrh	r3, [r3, #10]
 800a0e4:	88ba      	ldrh	r2, [r7, #4]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	80bb      	strh	r3, [r7, #4]
 800a0ea:	e023      	b.n	800a134 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	895a      	ldrh	r2, [r3, #10]
 800a0f0:	88bb      	ldrh	r3, [r7, #4]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a0f6:	8b3a      	ldrh	r2, [r7, #24]
 800a0f8:	88fb      	ldrh	r3, [r7, #6]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d901      	bls.n	800a102 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a102:	8b7b      	ldrh	r3, [r7, #26]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	18d0      	adds	r0, r2, r3
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	88bb      	ldrh	r3, [r7, #4]
 800a10e:	4413      	add	r3, r2
 800a110:	8b3a      	ldrh	r2, [r7, #24]
 800a112:	4619      	mov	r1, r3
 800a114:	f00a f862 	bl	80141dc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a118:	8afa      	ldrh	r2, [r7, #22]
 800a11a:	8b3b      	ldrh	r3, [r7, #24]
 800a11c:	4413      	add	r3, r2
 800a11e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a120:	8b7a      	ldrh	r2, [r7, #26]
 800a122:	8b3b      	ldrh	r3, [r7, #24]
 800a124:	4413      	add	r3, r2
 800a126:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a128:	88fa      	ldrh	r2, [r7, #6]
 800a12a:	8b3b      	ldrh	r3, [r7, #24]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	88fb      	ldrh	r3, [r7, #6]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <pbuf_copy_partial+0xca>
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1c4      	bne.n	800a0d0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a146:	8afb      	ldrh	r3, [r7, #22]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3720      	adds	r7, #32
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	08015f94 	.word	0x08015f94
 800a154:	080162dc 	.word	0x080162dc
 800a158:	08015ff4 	.word	0x08015ff4
 800a15c:	080162fc 	.word	0x080162fc

0800a160 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	603a      	str	r2, [r7, #0]
 800a16a:	71fb      	strb	r3, [r7, #7]
 800a16c:	460b      	mov	r3, r1
 800a16e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	8919      	ldrh	r1, [r3, #8]
 800a174:	88ba      	ldrh	r2, [r7, #4]
 800a176:	79fb      	ldrb	r3, [r7, #7]
 800a178:	4618      	mov	r0, r3
 800a17a:	f7ff faa1 	bl	80096c0 <pbuf_alloc>
 800a17e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <pbuf_clone+0x2a>
    return NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	e011      	b.n	800a1ae <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7ff fea3 	bl	8009ed8 <pbuf_copy>
 800a192:	4603      	mov	r3, r0
 800a194:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a196:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d006      	beq.n	800a1ac <pbuf_clone+0x4c>
 800a19e:	4b06      	ldr	r3, [pc, #24]	; (800a1b8 <pbuf_clone+0x58>)
 800a1a0:	f240 5224 	movw	r2, #1316	; 0x524
 800a1a4:	4905      	ldr	r1, [pc, #20]	; (800a1bc <pbuf_clone+0x5c>)
 800a1a6:	4806      	ldr	r0, [pc, #24]	; (800a1c0 <pbuf_clone+0x60>)
 800a1a8:	f00a f848 	bl	801423c <iprintf>
  return q;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	08015f94 	.word	0x08015f94
 800a1bc:	08016408 	.word	0x08016408
 800a1c0:	08015ff4 	.word	0x08015ff4

0800a1c4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a1c8:	f00a f8c6 	bl	8014358 <rand>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	4b01      	ldr	r3, [pc, #4]	; (800a1e4 <tcp_init+0x20>)
 800a1de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a1e0:	bf00      	nop
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	2000001c 	.word	0x2000001c

0800a1e8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	7d1b      	ldrb	r3, [r3, #20]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d105      	bne.n	800a204 <tcp_free+0x1c>
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <tcp_free+0x2c>)
 800a1fa:	22d4      	movs	r2, #212	; 0xd4
 800a1fc:	4906      	ldr	r1, [pc, #24]	; (800a218 <tcp_free+0x30>)
 800a1fe:	4807      	ldr	r0, [pc, #28]	; (800a21c <tcp_free+0x34>)
 800a200:	f00a f81c 	bl	801423c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	2001      	movs	r0, #1
 800a208:	f7fe ff2c 	bl	8009064 <memp_free>
}
 800a20c:	bf00      	nop
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	08016494 	.word	0x08016494
 800a218:	080164c4 	.word	0x080164c4
 800a21c:	080164d8 	.word	0x080164d8

0800a220 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7d1b      	ldrb	r3, [r3, #20]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d105      	bne.n	800a23c <tcp_free_listen+0x1c>
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <tcp_free_listen+0x2c>)
 800a232:	22df      	movs	r2, #223	; 0xdf
 800a234:	4906      	ldr	r1, [pc, #24]	; (800a250 <tcp_free_listen+0x30>)
 800a236:	4807      	ldr	r0, [pc, #28]	; (800a254 <tcp_free_listen+0x34>)
 800a238:	f00a f800 	bl	801423c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	2002      	movs	r0, #2
 800a240:	f7fe ff10 	bl	8009064 <memp_free>
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	08016494 	.word	0x08016494
 800a250:	08016500 	.word	0x08016500
 800a254:	080164d8 	.word	0x080164d8

0800a258 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a25c:	f000 fea2 	bl	800afa4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a260:	4b07      	ldr	r3, [pc, #28]	; (800a280 <tcp_tmr+0x28>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	3301      	adds	r3, #1
 800a266:	b2da      	uxtb	r2, r3
 800a268:	4b05      	ldr	r3, [pc, #20]	; (800a280 <tcp_tmr+0x28>)
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	4b04      	ldr	r3, [pc, #16]	; (800a280 <tcp_tmr+0x28>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a278:	f000 fb54 	bl	800a924 <tcp_slowtmr>
  }
}
 800a27c:	bf00      	nop
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	2000a6fd 	.word	0x2000a6fd

0800a284 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d105      	bne.n	800a2a0 <tcp_remove_listener+0x1c>
 800a294:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <tcp_remove_listener+0x48>)
 800a296:	22ff      	movs	r2, #255	; 0xff
 800a298:	490d      	ldr	r1, [pc, #52]	; (800a2d0 <tcp_remove_listener+0x4c>)
 800a29a:	480e      	ldr	r0, [pc, #56]	; (800a2d4 <tcp_remove_listener+0x50>)
 800a29c:	f009 ffce 	bl	801423c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	e00a      	b.n	800a2bc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d102      	bne.n	800a2b6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1f1      	bne.n	800a2a6 <tcp_remove_listener+0x22>
    }
  }
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	08016494 	.word	0x08016494
 800a2d0:	0801651c 	.word	0x0801651c
 800a2d4:	080164d8 	.word	0x080164d8

0800a2d8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <tcp_listen_closed+0x1c>
 800a2e6:	4b14      	ldr	r3, [pc, #80]	; (800a338 <tcp_listen_closed+0x60>)
 800a2e8:	f240 1211 	movw	r2, #273	; 0x111
 800a2ec:	4913      	ldr	r1, [pc, #76]	; (800a33c <tcp_listen_closed+0x64>)
 800a2ee:	4814      	ldr	r0, [pc, #80]	; (800a340 <tcp_listen_closed+0x68>)
 800a2f0:	f009 ffa4 	bl	801423c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7d1b      	ldrb	r3, [r3, #20]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d006      	beq.n	800a30a <tcp_listen_closed+0x32>
 800a2fc:	4b0e      	ldr	r3, [pc, #56]	; (800a338 <tcp_listen_closed+0x60>)
 800a2fe:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a302:	4910      	ldr	r1, [pc, #64]	; (800a344 <tcp_listen_closed+0x6c>)
 800a304:	480e      	ldr	r0, [pc, #56]	; (800a340 <tcp_listen_closed+0x68>)
 800a306:	f009 ff99 	bl	801423c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a30a:	2301      	movs	r3, #1
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	e00b      	b.n	800a328 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a310:	4a0d      	ldr	r2, [pc, #52]	; (800a348 <tcp_listen_closed+0x70>)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7ff ffb1 	bl	800a284 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d9f0      	bls.n	800a310 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a32e:	bf00      	nop
 800a330:	bf00      	nop
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	08016494 	.word	0x08016494
 800a33c:	08016544 	.word	0x08016544
 800a340:	080164d8 	.word	0x080164d8
 800a344:	08016550 	.word	0x08016550
 800a348:	08018490 	.word	0x08018490

0800a34c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a34c:	b5b0      	push	{r4, r5, r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af04      	add	r7, sp, #16
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <tcp_close_shutdown+0x20>
 800a35e:	4b63      	ldr	r3, [pc, #396]	; (800a4ec <tcp_close_shutdown+0x1a0>)
 800a360:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a364:	4962      	ldr	r1, [pc, #392]	; (800a4f0 <tcp_close_shutdown+0x1a4>)
 800a366:	4863      	ldr	r0, [pc, #396]	; (800a4f4 <tcp_close_shutdown+0x1a8>)
 800a368:	f009 ff68 	bl	801423c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d066      	beq.n	800a440 <tcp_close_shutdown+0xf4>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	7d1b      	ldrb	r3, [r3, #20]
 800a376:	2b04      	cmp	r3, #4
 800a378:	d003      	beq.n	800a382 <tcp_close_shutdown+0x36>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	7d1b      	ldrb	r3, [r3, #20]
 800a37e:	2b07      	cmp	r3, #7
 800a380:	d15e      	bne.n	800a440 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a386:	2b00      	cmp	r3, #0
 800a388:	d104      	bne.n	800a394 <tcp_close_shutdown+0x48>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a38e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a392:	d055      	beq.n	800a440 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	8b5b      	ldrh	r3, [r3, #26]
 800a398:	f003 0310 	and.w	r3, r3, #16
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d106      	bne.n	800a3ae <tcp_close_shutdown+0x62>
 800a3a0:	4b52      	ldr	r3, [pc, #328]	; (800a4ec <tcp_close_shutdown+0x1a0>)
 800a3a2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a3a6:	4954      	ldr	r1, [pc, #336]	; (800a4f8 <tcp_close_shutdown+0x1ac>)
 800a3a8:	4852      	ldr	r0, [pc, #328]	; (800a4f4 <tcp_close_shutdown+0x1a8>)
 800a3aa:	f009 ff47 	bl	801423c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a3b6:	687d      	ldr	r5, [r7, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	8ad2      	ldrh	r2, [r2, #22]
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	8b09      	ldrh	r1, [r1, #24]
 800a3c4:	9102      	str	r1, [sp, #8]
 800a3c6:	9201      	str	r2, [sp, #4]
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462b      	mov	r3, r5
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f004 fe91 	bl	800f0f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 f8c6 	bl	800b568 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a3dc:	4b47      	ldr	r3, [pc, #284]	; (800a4fc <tcp_close_shutdown+0x1b0>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d105      	bne.n	800a3f2 <tcp_close_shutdown+0xa6>
 800a3e6:	4b45      	ldr	r3, [pc, #276]	; (800a4fc <tcp_close_shutdown+0x1b0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	4a43      	ldr	r2, [pc, #268]	; (800a4fc <tcp_close_shutdown+0x1b0>)
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	e013      	b.n	800a41a <tcp_close_shutdown+0xce>
 800a3f2:	4b42      	ldr	r3, [pc, #264]	; (800a4fc <tcp_close_shutdown+0x1b0>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	e00c      	b.n	800a414 <tcp_close_shutdown+0xc8>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	429a      	cmp	r2, r3
 800a402:	d104      	bne.n	800a40e <tcp_close_shutdown+0xc2>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	60da      	str	r2, [r3, #12]
 800a40c:	e005      	b.n	800a41a <tcp_close_shutdown+0xce>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1ef      	bne.n	800a3fa <tcp_close_shutdown+0xae>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	60da      	str	r2, [r3, #12]
 800a420:	4b37      	ldr	r3, [pc, #220]	; (800a500 <tcp_close_shutdown+0x1b4>)
 800a422:	2201      	movs	r2, #1
 800a424:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a426:	4b37      	ldr	r3, [pc, #220]	; (800a504 <tcp_close_shutdown+0x1b8>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d102      	bne.n	800a436 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a430:	f003 fd5e 	bl	800def0 <tcp_trigger_input_pcb_close>
 800a434:	e002      	b.n	800a43c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff fed6 	bl	800a1e8 <tcp_free>
      }
      return ERR_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	e050      	b.n	800a4e2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7d1b      	ldrb	r3, [r3, #20]
 800a444:	2b02      	cmp	r3, #2
 800a446:	d03b      	beq.n	800a4c0 <tcp_close_shutdown+0x174>
 800a448:	2b02      	cmp	r3, #2
 800a44a:	dc44      	bgt.n	800a4d6 <tcp_close_shutdown+0x18a>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <tcp_close_shutdown+0x10a>
 800a450:	2b01      	cmp	r3, #1
 800a452:	d02a      	beq.n	800a4aa <tcp_close_shutdown+0x15e>
 800a454:	e03f      	b.n	800a4d6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	8adb      	ldrh	r3, [r3, #22]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d021      	beq.n	800a4a2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a45e:	4b2a      	ldr	r3, [pc, #168]	; (800a508 <tcp_close_shutdown+0x1bc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d105      	bne.n	800a474 <tcp_close_shutdown+0x128>
 800a468:	4b27      	ldr	r3, [pc, #156]	; (800a508 <tcp_close_shutdown+0x1bc>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	4a26      	ldr	r2, [pc, #152]	; (800a508 <tcp_close_shutdown+0x1bc>)
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	e013      	b.n	800a49c <tcp_close_shutdown+0x150>
 800a474:	4b24      	ldr	r3, [pc, #144]	; (800a508 <tcp_close_shutdown+0x1bc>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60bb      	str	r3, [r7, #8]
 800a47a:	e00c      	b.n	800a496 <tcp_close_shutdown+0x14a>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	429a      	cmp	r2, r3
 800a484:	d104      	bne.n	800a490 <tcp_close_shutdown+0x144>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	60da      	str	r2, [r3, #12]
 800a48e:	e005      	b.n	800a49c <tcp_close_shutdown+0x150>
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	60bb      	str	r3, [r7, #8]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1ef      	bne.n	800a47c <tcp_close_shutdown+0x130>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fea0 	bl	800a1e8 <tcp_free>
      break;
 800a4a8:	e01a      	b.n	800a4e0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff ff14 	bl	800a2d8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	4816      	ldr	r0, [pc, #88]	; (800a50c <tcp_close_shutdown+0x1c0>)
 800a4b4:	f001 f8a8 	bl	800b608 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff feb1 	bl	800a220 <tcp_free_listen>
      break;
 800a4be:	e00f      	b.n	800a4e0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	480e      	ldr	r0, [pc, #56]	; (800a4fc <tcp_close_shutdown+0x1b0>)
 800a4c4:	f001 f8a0 	bl	800b608 <tcp_pcb_remove>
 800a4c8:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <tcp_close_shutdown+0x1b4>)
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff fe8a 	bl	800a1e8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a4d4:	e004      	b.n	800a4e0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f81a 	bl	800a510 <tcp_close_shutdown_fin>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	e000      	b.n	800a4e2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	08016494 	.word	0x08016494
 800a4f0:	08016568 	.word	0x08016568
 800a4f4:	080164d8 	.word	0x080164d8
 800a4f8:	08016588 	.word	0x08016588
 800a4fc:	2000a6f4 	.word	0x2000a6f4
 800a500:	2000a6fc 	.word	0x2000a6fc
 800a504:	2000a734 	.word	0x2000a734
 800a508:	2000a6ec 	.word	0x2000a6ec
 800a50c:	2000a6f0 	.word	0x2000a6f0

0800a510 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d106      	bne.n	800a52c <tcp_close_shutdown_fin+0x1c>
 800a51e:	4b2e      	ldr	r3, [pc, #184]	; (800a5d8 <tcp_close_shutdown_fin+0xc8>)
 800a520:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a524:	492d      	ldr	r1, [pc, #180]	; (800a5dc <tcp_close_shutdown_fin+0xcc>)
 800a526:	482e      	ldr	r0, [pc, #184]	; (800a5e0 <tcp_close_shutdown_fin+0xd0>)
 800a528:	f009 fe88 	bl	801423c <iprintf>

  switch (pcb->state) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	7d1b      	ldrb	r3, [r3, #20]
 800a530:	2b07      	cmp	r3, #7
 800a532:	d020      	beq.n	800a576 <tcp_close_shutdown_fin+0x66>
 800a534:	2b07      	cmp	r3, #7
 800a536:	dc2b      	bgt.n	800a590 <tcp_close_shutdown_fin+0x80>
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d002      	beq.n	800a542 <tcp_close_shutdown_fin+0x32>
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d00d      	beq.n	800a55c <tcp_close_shutdown_fin+0x4c>
 800a540:	e026      	b.n	800a590 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f003 fee6 	bl	800e314 <tcp_send_fin>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11f      	bne.n	800a594 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2205      	movs	r2, #5
 800a558:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a55a:	e01b      	b.n	800a594 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f003 fed9 	bl	800e314 <tcp_send_fin>
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d114      	bne.n	800a598 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2205      	movs	r2, #5
 800a572:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a574:	e010      	b.n	800a598 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f003 fecc 	bl	800e314 <tcp_send_fin>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d109      	bne.n	800a59c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2209      	movs	r2, #9
 800a58c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a58e:	e005      	b.n	800a59c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	e01c      	b.n	800a5ce <tcp_close_shutdown_fin+0xbe>
      break;
 800a594:	bf00      	nop
 800a596:	e002      	b.n	800a59e <tcp_close_shutdown_fin+0x8e>
      break;
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <tcp_close_shutdown_fin+0x8e>
      break;
 800a59c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d103      	bne.n	800a5ae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f003 fff2 	bl	800e590 <tcp_output>
 800a5ac:	e00d      	b.n	800a5ca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b6:	d108      	bne.n	800a5ca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	8b5b      	ldrh	r3, [r3, #26]
 800a5bc:	f043 0308 	orr.w	r3, r3, #8
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e001      	b.n	800a5ce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	08016494 	.word	0x08016494
 800a5dc:	08016544 	.word	0x08016544
 800a5e0:	080164d8 	.word	0x080164d8

0800a5e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d109      	bne.n	800a606 <tcp_close+0x22>
 800a5f2:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <tcp_close+0x4c>)
 800a5f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a5f8:	490e      	ldr	r1, [pc, #56]	; (800a634 <tcp_close+0x50>)
 800a5fa:	480f      	ldr	r0, [pc, #60]	; (800a638 <tcp_close+0x54>)
 800a5fc:	f009 fe1e 	bl	801423c <iprintf>
 800a600:	f06f 030f 	mvn.w	r3, #15
 800a604:	e00f      	b.n	800a626 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	7d1b      	ldrb	r3, [r3, #20]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d006      	beq.n	800a61c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	8b5b      	ldrh	r3, [r3, #26]
 800a612:	f043 0310 	orr.w	r3, r3, #16
 800a616:	b29a      	uxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a61c:	2101      	movs	r1, #1
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe94 	bl	800a34c <tcp_close_shutdown>
 800a624:	4603      	mov	r3, r0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	08016494 	.word	0x08016494
 800a634:	080165a4 	.word	0x080165a4
 800a638:	080164d8 	.word	0x080164d8

0800a63c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08e      	sub	sp, #56	; 0x38
 800a640:	af04      	add	r7, sp, #16
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d107      	bne.n	800a65c <tcp_abandon+0x20>
 800a64c:	4b52      	ldr	r3, [pc, #328]	; (800a798 <tcp_abandon+0x15c>)
 800a64e:	f240 223d 	movw	r2, #573	; 0x23d
 800a652:	4952      	ldr	r1, [pc, #328]	; (800a79c <tcp_abandon+0x160>)
 800a654:	4852      	ldr	r0, [pc, #328]	; (800a7a0 <tcp_abandon+0x164>)
 800a656:	f009 fdf1 	bl	801423c <iprintf>
 800a65a:	e099      	b.n	800a790 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7d1b      	ldrb	r3, [r3, #20]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d106      	bne.n	800a672 <tcp_abandon+0x36>
 800a664:	4b4c      	ldr	r3, [pc, #304]	; (800a798 <tcp_abandon+0x15c>)
 800a666:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a66a:	494e      	ldr	r1, [pc, #312]	; (800a7a4 <tcp_abandon+0x168>)
 800a66c:	484c      	ldr	r0, [pc, #304]	; (800a7a0 <tcp_abandon+0x164>)
 800a66e:	f009 fde5 	bl	801423c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	7d1b      	ldrb	r3, [r3, #20]
 800a676:	2b0a      	cmp	r3, #10
 800a678:	d107      	bne.n	800a68a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	484a      	ldr	r0, [pc, #296]	; (800a7a8 <tcp_abandon+0x16c>)
 800a67e:	f000 ffc3 	bl	800b608 <tcp_pcb_remove>
    tcp_free(pcb);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff fdb0 	bl	800a1e8 <tcp_free>
 800a688:	e082      	b.n	800a790 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a696:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7d1b      	ldrb	r3, [r3, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d126      	bne.n	800a702 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	8adb      	ldrh	r3, [r3, #22]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d02e      	beq.n	800a71a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a6bc:	4b3b      	ldr	r3, [pc, #236]	; (800a7ac <tcp_abandon+0x170>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d105      	bne.n	800a6d2 <tcp_abandon+0x96>
 800a6c6:	4b39      	ldr	r3, [pc, #228]	; (800a7ac <tcp_abandon+0x170>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	4a37      	ldr	r2, [pc, #220]	; (800a7ac <tcp_abandon+0x170>)
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	e013      	b.n	800a6fa <tcp_abandon+0xbe>
 800a6d2:	4b36      	ldr	r3, [pc, #216]	; (800a7ac <tcp_abandon+0x170>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	61fb      	str	r3, [r7, #28]
 800a6d8:	e00c      	b.n	800a6f4 <tcp_abandon+0xb8>
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d104      	bne.n	800a6ee <tcp_abandon+0xb2>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	60da      	str	r2, [r3, #12]
 800a6ec:	e005      	b.n	800a6fa <tcp_abandon+0xbe>
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	61fb      	str	r3, [r7, #28]
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1ef      	bne.n	800a6da <tcp_abandon+0x9e>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	60da      	str	r2, [r3, #12]
 800a700:	e00b      	b.n	800a71a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	8adb      	ldrh	r3, [r3, #22]
 800a70a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	4828      	ldr	r0, [pc, #160]	; (800a7b0 <tcp_abandon+0x174>)
 800a710:	f000 ff7a 	bl	800b608 <tcp_pcb_remove>
 800a714:	4b27      	ldr	r3, [pc, #156]	; (800a7b4 <tcp_abandon+0x178>)
 800a716:	2201      	movs	r2, #1
 800a718:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d004      	beq.n	800a72c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fd1c 	bl	800b164 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d004      	beq.n	800a73e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 fd13 	bl	800b164 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fd0a 	bl	800b164 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00e      	beq.n	800a774 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3304      	adds	r3, #4
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	8b12      	ldrh	r2, [r2, #24]
 800a760:	9202      	str	r2, [sp, #8]
 800a762:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a764:	9201      	str	r2, [sp, #4]
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	460b      	mov	r3, r1
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	69b9      	ldr	r1, [r7, #24]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f004 fcc2 	bl	800f0f8 <tcp_rst>
    }
    last_state = pcb->state;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	7d1b      	ldrb	r3, [r3, #20]
 800a778:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff fd34 	bl	800a1e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d004      	beq.n	800a790 <tcp_abandon+0x154>
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f06f 010c 	mvn.w	r1, #12
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	4798      	blx	r3
  }
}
 800a790:	3728      	adds	r7, #40	; 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	08016494 	.word	0x08016494
 800a79c:	080165d8 	.word	0x080165d8
 800a7a0:	080164d8 	.word	0x080164d8
 800a7a4:	080165f4 	.word	0x080165f4
 800a7a8:	2000a6f8 	.word	0x2000a6f8
 800a7ac:	2000a6ec 	.word	0x2000a6ec
 800a7b0:	2000a6f4 	.word	0x2000a6f4
 800a7b4:	2000a6fc 	.word	0x2000a6fc

0800a7b8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff ff3a 	bl	800a63c <tcp_abandon>
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d106      	bne.n	800a7ec <tcp_update_rcv_ann_wnd+0x1c>
 800a7de:	4b25      	ldr	r3, [pc, #148]	; (800a874 <tcp_update_rcv_ann_wnd+0xa4>)
 800a7e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a7e4:	4924      	ldr	r1, [pc, #144]	; (800a878 <tcp_update_rcv_ann_wnd+0xa8>)
 800a7e6:	4825      	ldr	r0, [pc, #148]	; (800a87c <tcp_update_rcv_ann_wnd+0xac>)
 800a7e8:	f009 fd28 	bl	801423c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a7f4:	4413      	add	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a800:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a804:	bf28      	it	cs
 800a806:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a80a:	b292      	uxth	r2, r2
 800a80c:	4413      	add	r3, r2
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	db08      	blt.n	800a828 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	e020      	b.n	800a86a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	dd03      	ble.n	800a83e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a83c:	e014      	b.n	800a868 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a850:	d306      	bcc.n	800a860 <tcp_update_rcv_ann_wnd+0x90>
 800a852:	4b08      	ldr	r3, [pc, #32]	; (800a874 <tcp_update_rcv_ann_wnd+0xa4>)
 800a854:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a858:	4909      	ldr	r1, [pc, #36]	; (800a880 <tcp_update_rcv_ann_wnd+0xb0>)
 800a85a:	4808      	ldr	r0, [pc, #32]	; (800a87c <tcp_update_rcv_ann_wnd+0xac>)
 800a85c:	f009 fcee 	bl	801423c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	b29a      	uxth	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a868:	2300      	movs	r3, #0
  }
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	08016494 	.word	0x08016494
 800a878:	080166f0 	.word	0x080166f0
 800a87c:	080164d8 	.word	0x080164d8
 800a880:	08016714 	.word	0x08016714

0800a884 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	460b      	mov	r3, r1
 800a88e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d107      	bne.n	800a8a6 <tcp_recved+0x22>
 800a896:	4b1f      	ldr	r3, [pc, #124]	; (800a914 <tcp_recved+0x90>)
 800a898:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a89c:	491e      	ldr	r1, [pc, #120]	; (800a918 <tcp_recved+0x94>)
 800a89e:	481f      	ldr	r0, [pc, #124]	; (800a91c <tcp_recved+0x98>)
 800a8a0:	f009 fccc 	bl	801423c <iprintf>
 800a8a4:	e032      	b.n	800a90c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7d1b      	ldrb	r3, [r3, #20]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d106      	bne.n	800a8bc <tcp_recved+0x38>
 800a8ae:	4b19      	ldr	r3, [pc, #100]	; (800a914 <tcp_recved+0x90>)
 800a8b0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a8b4:	491a      	ldr	r1, [pc, #104]	; (800a920 <tcp_recved+0x9c>)
 800a8b6:	4819      	ldr	r0, [pc, #100]	; (800a91c <tcp_recved+0x98>)
 800a8b8:	f009 fcc0 	bl	801423c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8c0:	887b      	ldrh	r3, [r7, #2]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a8c6:	89fb      	ldrh	r3, [r7, #14]
 800a8c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a8cc:	d804      	bhi.n	800a8d8 <tcp_recved+0x54>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8d2:	89fa      	ldrh	r2, [r7, #14]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d204      	bcs.n	800a8e2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a8de:	851a      	strh	r2, [r3, #40]	; 0x28
 800a8e0:	e002      	b.n	800a8e8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	89fa      	ldrh	r2, [r7, #14]
 800a8e6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff ff71 	bl	800a7d0 <tcp_update_rcv_ann_wnd>
 800a8ee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a8f6:	d309      	bcc.n	800a90c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	8b5b      	ldrh	r3, [r3, #26]
 800a8fc:	f043 0302 	orr.w	r3, r3, #2
 800a900:	b29a      	uxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f003 fe42 	bl	800e590 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	08016494 	.word	0x08016494
 800a918:	08016730 	.word	0x08016730
 800a91c:	080164d8 	.word	0x080164d8
 800a920:	08016748 	.word	0x08016748

0800a924 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a924:	b5b0      	push	{r4, r5, r7, lr}
 800a926:	b090      	sub	sp, #64	; 0x40
 800a928:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a930:	4b94      	ldr	r3, [pc, #592]	; (800ab84 <tcp_slowtmr+0x260>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3301      	adds	r3, #1
 800a936:	4a93      	ldr	r2, [pc, #588]	; (800ab84 <tcp_slowtmr+0x260>)
 800a938:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a93a:	4b93      	ldr	r3, [pc, #588]	; (800ab88 <tcp_slowtmr+0x264>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	3301      	adds	r3, #1
 800a940:	b2da      	uxtb	r2, r3
 800a942:	4b91      	ldr	r3, [pc, #580]	; (800ab88 <tcp_slowtmr+0x264>)
 800a944:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a94a:	4b90      	ldr	r3, [pc, #576]	; (800ab8c <tcp_slowtmr+0x268>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a950:	e29d      	b.n	800ae8e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	7d1b      	ldrb	r3, [r3, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d106      	bne.n	800a968 <tcp_slowtmr+0x44>
 800a95a:	4b8d      	ldr	r3, [pc, #564]	; (800ab90 <tcp_slowtmr+0x26c>)
 800a95c:	f240 42be 	movw	r2, #1214	; 0x4be
 800a960:	498c      	ldr	r1, [pc, #560]	; (800ab94 <tcp_slowtmr+0x270>)
 800a962:	488d      	ldr	r0, [pc, #564]	; (800ab98 <tcp_slowtmr+0x274>)
 800a964:	f009 fc6a 	bl	801423c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	7d1b      	ldrb	r3, [r3, #20]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d106      	bne.n	800a97e <tcp_slowtmr+0x5a>
 800a970:	4b87      	ldr	r3, [pc, #540]	; (800ab90 <tcp_slowtmr+0x26c>)
 800a972:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a976:	4989      	ldr	r1, [pc, #548]	; (800ab9c <tcp_slowtmr+0x278>)
 800a978:	4887      	ldr	r0, [pc, #540]	; (800ab98 <tcp_slowtmr+0x274>)
 800a97a:	f009 fc5f 	bl	801423c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	7d1b      	ldrb	r3, [r3, #20]
 800a982:	2b0a      	cmp	r3, #10
 800a984:	d106      	bne.n	800a994 <tcp_slowtmr+0x70>
 800a986:	4b82      	ldr	r3, [pc, #520]	; (800ab90 <tcp_slowtmr+0x26c>)
 800a988:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a98c:	4984      	ldr	r1, [pc, #528]	; (800aba0 <tcp_slowtmr+0x27c>)
 800a98e:	4882      	ldr	r0, [pc, #520]	; (800ab98 <tcp_slowtmr+0x274>)
 800a990:	f009 fc54 	bl	801423c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	7f9a      	ldrb	r2, [r3, #30]
 800a998:	4b7b      	ldr	r3, [pc, #492]	; (800ab88 <tcp_slowtmr+0x264>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d105      	bne.n	800a9ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a9aa:	e270      	b.n	800ae8e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a9ac:	4b76      	ldr	r3, [pc, #472]	; (800ab88 <tcp_slowtmr+0x264>)
 800a9ae:	781a      	ldrb	r2, [r3, #0]
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	7d1b      	ldrb	r3, [r3, #20]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d10a      	bne.n	800a9de <tcp_slowtmr+0xba>
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9ce:	2b05      	cmp	r3, #5
 800a9d0:	d905      	bls.n	800a9de <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9dc:	e11e      	b.n	800ac1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9e4:	2b0b      	cmp	r3, #11
 800a9e6:	d905      	bls.n	800a9f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9f2:	e113      	b.n	800ac1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d075      	beq.n	800aaea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d006      	beq.n	800aa14 <tcp_slowtmr+0xf0>
 800aa06:	4b62      	ldr	r3, [pc, #392]	; (800ab90 <tcp_slowtmr+0x26c>)
 800aa08:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800aa0c:	4965      	ldr	r1, [pc, #404]	; (800aba4 <tcp_slowtmr+0x280>)
 800aa0e:	4862      	ldr	r0, [pc, #392]	; (800ab98 <tcp_slowtmr+0x274>)
 800aa10:	f009 fc14 	bl	801423c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d106      	bne.n	800aa2a <tcp_slowtmr+0x106>
 800aa1c:	4b5c      	ldr	r3, [pc, #368]	; (800ab90 <tcp_slowtmr+0x26c>)
 800aa1e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800aa22:	4961      	ldr	r1, [pc, #388]	; (800aba8 <tcp_slowtmr+0x284>)
 800aa24:	485c      	ldr	r0, [pc, #368]	; (800ab98 <tcp_slowtmr+0x274>)
 800aa26:	f009 fc09 	bl	801423c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aa30:	2b0b      	cmp	r3, #11
 800aa32:	d905      	bls.n	800aa40 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800aa34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa38:	3301      	adds	r3, #1
 800aa3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa3e:	e0ed      	b.n	800ac1c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa46:	3b01      	subs	r3, #1
 800aa48:	4a58      	ldr	r2, [pc, #352]	; (800abac <tcp_slowtmr+0x288>)
 800aa4a:	5cd3      	ldrb	r3, [r2, r3]
 800aa4c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800aa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa54:	7c7a      	ldrb	r2, [r7, #17]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d907      	bls.n	800aa6a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa60:	3301      	adds	r3, #1
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa70:	7c7a      	ldrb	r2, [r7, #17]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	f200 80d2 	bhi.w	800ac1c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800aa78:	2301      	movs	r3, #1
 800aa7a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d108      	bne.n	800aa98 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800aa86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa88:	f004 fc2a 	bl	800f2e0 <tcp_zero_window_probe>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d014      	beq.n	800aabc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800aa92:	2300      	movs	r3, #0
 800aa94:	623b      	str	r3, [r7, #32]
 800aa96:	e011      	b.n	800aabc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaa2:	f003 faef 	bl	800e084 <tcp_split_unsent_seg>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d107      	bne.n	800aabc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800aaac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaae:	f003 fd6f 	bl	800e590 <tcp_output>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 80ac 	beq.w	800ac1c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aad2:	2b06      	cmp	r3, #6
 800aad4:	f200 80a2 	bhi.w	800ac1c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aade:	3301      	adds	r3, #1
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800aae8:	e098      	b.n	800ac1c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	db0f      	blt.n	800ab14 <tcp_slowtmr+0x1f0>
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aafa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d008      	beq.n	800ab14 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	b21a      	sxth	r2, r3
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ab20:	429a      	cmp	r2, r3
 800ab22:	db7b      	blt.n	800ac1c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ab24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab26:	f004 f825 	bl	800eb74 <tcp_rexmit_rto_prepare>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d007      	beq.n	800ab40 <tcp_slowtmr+0x21c>
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d171      	bne.n	800ac1c <tcp_slowtmr+0x2f8>
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d06d      	beq.n	800ac1c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	7d1b      	ldrb	r3, [r3, #20]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d03a      	beq.n	800abbe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab4e:	2b0c      	cmp	r3, #12
 800ab50:	bf28      	it	cs
 800ab52:	230c      	movcs	r3, #12
 800ab54:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ab5c:	10db      	asrs	r3, r3, #3
 800ab5e:	b21b      	sxth	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ab68:	4413      	add	r3, r2
 800ab6a:	7efa      	ldrb	r2, [r7, #27]
 800ab6c:	4910      	ldr	r1, [pc, #64]	; (800abb0 <tcp_slowtmr+0x28c>)
 800ab6e:	5c8a      	ldrb	r2, [r1, r2]
 800ab70:	4093      	lsls	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	dc1a      	bgt.n	800abb4 <tcp_slowtmr+0x290>
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	b21a      	sxth	r2, r3
 800ab82:	e019      	b.n	800abb8 <tcp_slowtmr+0x294>
 800ab84:	2000a6e8 	.word	0x2000a6e8
 800ab88:	2000a6fe 	.word	0x2000a6fe
 800ab8c:	2000a6f4 	.word	0x2000a6f4
 800ab90:	08016494 	.word	0x08016494
 800ab94:	080167d8 	.word	0x080167d8
 800ab98:	080164d8 	.word	0x080164d8
 800ab9c:	08016804 	.word	0x08016804
 800aba0:	08016830 	.word	0x08016830
 800aba4:	08016860 	.word	0x08016860
 800aba8:	08016894 	.word	0x08016894
 800abac:	08018488 	.word	0x08018488
 800abb0:	08018478 	.word	0x08018478
 800abb4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	2200      	movs	r2, #0
 800abc2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800abd0:	4293      	cmp	r3, r2
 800abd2:	bf28      	it	cs
 800abd4:	4613      	movcs	r3, r2
 800abd6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800abd8:	8a7b      	ldrh	r3, [r7, #18]
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	b29a      	uxth	r2, r3
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800abea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d206      	bcs.n	800ac04 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ac04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac06:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ac0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac10:	2200      	movs	r2, #0
 800ac12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ac16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac18:	f004 f81c 	bl	800ec54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	7d1b      	ldrb	r3, [r3, #20]
 800ac20:	2b06      	cmp	r3, #6
 800ac22:	d111      	bne.n	800ac48 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac26:	8b5b      	ldrh	r3, [r3, #26]
 800ac28:	f003 0310 	and.w	r3, r3, #16
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac30:	4b9c      	ldr	r3, [pc, #624]	; (800aea4 <tcp_slowtmr+0x580>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	2b28      	cmp	r3, #40	; 0x28
 800ac3c:	d904      	bls.n	800ac48 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ac3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac42:	3301      	adds	r3, #1
 800ac44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4a:	7a5b      	ldrb	r3, [r3, #9]
 800ac4c:	f003 0308 	and.w	r3, r3, #8
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d04a      	beq.n	800acea <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d003      	beq.n	800ac64 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ac60:	2b07      	cmp	r3, #7
 800ac62:	d142      	bne.n	800acea <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac64:	4b8f      	ldr	r3, [pc, #572]	; (800aea4 <tcp_slowtmr+0x580>)
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ac74:	4b8c      	ldr	r3, [pc, #560]	; (800aea8 <tcp_slowtmr+0x584>)
 800ac76:	440b      	add	r3, r1
 800ac78:	498c      	ldr	r1, [pc, #560]	; (800aeac <tcp_slowtmr+0x588>)
 800ac7a:	fba1 1303 	umull	r1, r3, r1, r3
 800ac7e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d90a      	bls.n	800ac9a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ac84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac88:	3301      	adds	r3, #1
 800ac8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ac8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac92:	3301      	adds	r3, #1
 800ac94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac98:	e027      	b.n	800acea <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac9a:	4b82      	ldr	r3, [pc, #520]	; (800aea4 <tcp_slowtmr+0x580>)
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800acb0:	4618      	mov	r0, r3
 800acb2:	4b7f      	ldr	r3, [pc, #508]	; (800aeb0 <tcp_slowtmr+0x58c>)
 800acb4:	fb00 f303 	mul.w	r3, r0, r3
 800acb8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800acba:	497c      	ldr	r1, [pc, #496]	; (800aeac <tcp_slowtmr+0x588>)
 800acbc:	fba1 1303 	umull	r1, r3, r1, r3
 800acc0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d911      	bls.n	800acea <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800acc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acc8:	f004 faca 	bl	800f260 <tcp_keepalive>
 800accc:	4603      	mov	r3, r0
 800acce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800acd2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d107      	bne.n	800acea <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ace0:	3301      	adds	r3, #1
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d011      	beq.n	800ad16 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800acf2:	4b6c      	ldr	r3, [pc, #432]	; (800aea4 <tcp_slowtmr+0x580>)
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	1ad2      	subs	r2, r2, r3
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ad02:	4619      	mov	r1, r3
 800ad04:	460b      	mov	r3, r1
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	440b      	add	r3, r1
 800ad0a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d302      	bcc.n	800ad16 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ad10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad12:	f000 fddd 	bl	800b8d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	7d1b      	ldrb	r3, [r3, #20]
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d10b      	bne.n	800ad36 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad1e:	4b61      	ldr	r3, [pc, #388]	; (800aea4 <tcp_slowtmr+0x580>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	2b28      	cmp	r3, #40	; 0x28
 800ad2a:	d904      	bls.n	800ad36 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ad2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad30:	3301      	adds	r3, #1
 800ad32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	7d1b      	ldrb	r3, [r3, #20]
 800ad3a:	2b09      	cmp	r3, #9
 800ad3c:	d10b      	bne.n	800ad56 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad3e:	4b59      	ldr	r3, [pc, #356]	; (800aea4 <tcp_slowtmr+0x580>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	2bf0      	cmp	r3, #240	; 0xf0
 800ad4a:	d904      	bls.n	800ad56 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ad4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad50:	3301      	adds	r3, #1
 800ad52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ad56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d060      	beq.n	800ae20 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad64:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ad66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad68:	f000 fbfe 	bl	800b568 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d010      	beq.n	800ad94 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad72:	4b50      	ldr	r3, [pc, #320]	; (800aeb4 <tcp_slowtmr+0x590>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d106      	bne.n	800ad8a <tcp_slowtmr+0x466>
 800ad7c:	4b4e      	ldr	r3, [pc, #312]	; (800aeb8 <tcp_slowtmr+0x594>)
 800ad7e:	f240 526d 	movw	r2, #1389	; 0x56d
 800ad82:	494e      	ldr	r1, [pc, #312]	; (800aebc <tcp_slowtmr+0x598>)
 800ad84:	484e      	ldr	r0, [pc, #312]	; (800aec0 <tcp_slowtmr+0x59c>)
 800ad86:	f009 fa59 	bl	801423c <iprintf>
        prev->next = pcb->next;
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	60da      	str	r2, [r3, #12]
 800ad92:	e00f      	b.n	800adb4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ad94:	4b47      	ldr	r3, [pc, #284]	; (800aeb4 <tcp_slowtmr+0x590>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d006      	beq.n	800adac <tcp_slowtmr+0x488>
 800ad9e:	4b46      	ldr	r3, [pc, #280]	; (800aeb8 <tcp_slowtmr+0x594>)
 800ada0:	f240 5271 	movw	r2, #1393	; 0x571
 800ada4:	4947      	ldr	r1, [pc, #284]	; (800aec4 <tcp_slowtmr+0x5a0>)
 800ada6:	4846      	ldr	r0, [pc, #280]	; (800aec0 <tcp_slowtmr+0x59c>)
 800ada8:	f009 fa48 	bl	801423c <iprintf>
        tcp_active_pcbs = pcb->next;
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	4a40      	ldr	r2, [pc, #256]	; (800aeb4 <tcp_slowtmr+0x590>)
 800adb2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800adb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d013      	beq.n	800ade4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800adc4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	3304      	adds	r3, #4
 800adca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adcc:	8ad2      	ldrh	r2, [r2, #22]
 800adce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800add0:	8b09      	ldrh	r1, [r1, #24]
 800add2:	9102      	str	r1, [sp, #8]
 800add4:	9201      	str	r2, [sp, #4]
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	462b      	mov	r3, r5
 800adda:	4622      	mov	r2, r4
 800addc:	4601      	mov	r1, r0
 800adde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ade0:	f004 f98a 	bl	800f0f8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ade4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adec:	7d1b      	ldrb	r3, [r3, #20]
 800adee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800adf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800adfa:	6838      	ldr	r0, [r7, #0]
 800adfc:	f7ff f9f4 	bl	800a1e8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ae00:	4b31      	ldr	r3, [pc, #196]	; (800aec8 <tcp_slowtmr+0x5a4>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d004      	beq.n	800ae16 <tcp_slowtmr+0x4f2>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f06f 010c 	mvn.w	r1, #12
 800ae12:	68b8      	ldr	r0, [r7, #8]
 800ae14:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ae16:	4b2c      	ldr	r3, [pc, #176]	; (800aec8 <tcp_slowtmr+0x5a4>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d037      	beq.n	800ae8e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ae1e:	e592      	b.n	800a946 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	7f1b      	ldrb	r3, [r3, #28]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae38:	7f1a      	ldrb	r2, [r3, #28]
 800ae3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3c:	7f5b      	ldrb	r3, [r3, #29]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d325      	bcc.n	800ae8e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	2200      	movs	r2, #0
 800ae46:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ae48:	4b1f      	ldr	r3, [pc, #124]	; (800aec8 <tcp_slowtmr+0x5a4>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ae4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <tcp_slowtmr+0x54c>
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae60:	6912      	ldr	r2, [r2, #16]
 800ae62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ae6e:	e002      	b.n	800ae76 <tcp_slowtmr+0x552>
 800ae70:	2300      	movs	r3, #0
 800ae72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ae76:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <tcp_slowtmr+0x5a4>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d000      	beq.n	800ae80 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ae7e:	e562      	b.n	800a946 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ae80:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d102      	bne.n	800ae8e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ae88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8a:	f003 fb81 	bl	800e590 <tcp_output>
  while (pcb != NULL) {
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f47f ad5e 	bne.w	800a952 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ae9a:	4b0c      	ldr	r3, [pc, #48]	; (800aecc <tcp_slowtmr+0x5a8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800aea0:	e069      	b.n	800af76 <tcp_slowtmr+0x652>
 800aea2:	bf00      	nop
 800aea4:	2000a6e8 	.word	0x2000a6e8
 800aea8:	000a4cb8 	.word	0x000a4cb8
 800aeac:	10624dd3 	.word	0x10624dd3
 800aeb0:	000124f8 	.word	0x000124f8
 800aeb4:	2000a6f4 	.word	0x2000a6f4
 800aeb8:	08016494 	.word	0x08016494
 800aebc:	080168cc 	.word	0x080168cc
 800aec0:	080164d8 	.word	0x080164d8
 800aec4:	080168f8 	.word	0x080168f8
 800aec8:	2000a6fc 	.word	0x2000a6fc
 800aecc:	2000a6f8 	.word	0x2000a6f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed2:	7d1b      	ldrb	r3, [r3, #20]
 800aed4:	2b0a      	cmp	r3, #10
 800aed6:	d006      	beq.n	800aee6 <tcp_slowtmr+0x5c2>
 800aed8:	4b2b      	ldr	r3, [pc, #172]	; (800af88 <tcp_slowtmr+0x664>)
 800aeda:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800aede:	492b      	ldr	r1, [pc, #172]	; (800af8c <tcp_slowtmr+0x668>)
 800aee0:	482b      	ldr	r0, [pc, #172]	; (800af90 <tcp_slowtmr+0x66c>)
 800aee2:	f009 f9ab 	bl	801423c <iprintf>
    pcb_remove = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aeec:	4b29      	ldr	r3, [pc, #164]	; (800af94 <tcp_slowtmr+0x670>)
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2bf0      	cmp	r3, #240	; 0xf0
 800aef8:	d904      	bls.n	800af04 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800aefa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aefe:	3301      	adds	r3, #1
 800af00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800af04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d02f      	beq.n	800af6c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800af0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af0e:	f000 fb2b 	bl	800b568 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af14:	2b00      	cmp	r3, #0
 800af16:	d010      	beq.n	800af3a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800af18:	4b1f      	ldr	r3, [pc, #124]	; (800af98 <tcp_slowtmr+0x674>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af1e:	429a      	cmp	r2, r3
 800af20:	d106      	bne.n	800af30 <tcp_slowtmr+0x60c>
 800af22:	4b19      	ldr	r3, [pc, #100]	; (800af88 <tcp_slowtmr+0x664>)
 800af24:	f240 52af 	movw	r2, #1455	; 0x5af
 800af28:	491c      	ldr	r1, [pc, #112]	; (800af9c <tcp_slowtmr+0x678>)
 800af2a:	4819      	ldr	r0, [pc, #100]	; (800af90 <tcp_slowtmr+0x66c>)
 800af2c:	f009 f986 	bl	801423c <iprintf>
        prev->next = pcb->next;
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	68da      	ldr	r2, [r3, #12]
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	60da      	str	r2, [r3, #12]
 800af38:	e00f      	b.n	800af5a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800af3a:	4b17      	ldr	r3, [pc, #92]	; (800af98 <tcp_slowtmr+0x674>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af40:	429a      	cmp	r2, r3
 800af42:	d006      	beq.n	800af52 <tcp_slowtmr+0x62e>
 800af44:	4b10      	ldr	r3, [pc, #64]	; (800af88 <tcp_slowtmr+0x664>)
 800af46:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800af4a:	4915      	ldr	r1, [pc, #84]	; (800afa0 <tcp_slowtmr+0x67c>)
 800af4c:	4810      	ldr	r0, [pc, #64]	; (800af90 <tcp_slowtmr+0x66c>)
 800af4e:	f009 f975 	bl	801423c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	4a10      	ldr	r2, [pc, #64]	; (800af98 <tcp_slowtmr+0x674>)
 800af58:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800af5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800af5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800af64:	69f8      	ldr	r0, [r7, #28]
 800af66:	f7ff f93f 	bl	800a1e8 <tcp_free>
 800af6a:	e004      	b.n	800af76 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800af6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1a9      	bne.n	800aed0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	3730      	adds	r7, #48	; 0x30
 800af82:	46bd      	mov	sp, r7
 800af84:	bdb0      	pop	{r4, r5, r7, pc}
 800af86:	bf00      	nop
 800af88:	08016494 	.word	0x08016494
 800af8c:	08016924 	.word	0x08016924
 800af90:	080164d8 	.word	0x080164d8
 800af94:	2000a6e8 	.word	0x2000a6e8
 800af98:	2000a6f8 	.word	0x2000a6f8
 800af9c:	08016954 	.word	0x08016954
 800afa0:	0801697c 	.word	0x0801697c

0800afa4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800afaa:	4b2d      	ldr	r3, [pc, #180]	; (800b060 <tcp_fasttmr+0xbc>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	3301      	adds	r3, #1
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	4b2b      	ldr	r3, [pc, #172]	; (800b060 <tcp_fasttmr+0xbc>)
 800afb4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800afb6:	4b2b      	ldr	r3, [pc, #172]	; (800b064 <tcp_fasttmr+0xc0>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800afbc:	e048      	b.n	800b050 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	7f9a      	ldrb	r2, [r3, #30]
 800afc2:	4b27      	ldr	r3, [pc, #156]	; (800b060 <tcp_fasttmr+0xbc>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d03f      	beq.n	800b04a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800afca:	4b25      	ldr	r3, [pc, #148]	; (800b060 <tcp_fasttmr+0xbc>)
 800afcc:	781a      	ldrb	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	8b5b      	ldrh	r3, [r3, #26]
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d010      	beq.n	800b000 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	8b5b      	ldrh	r3, [r3, #26]
 800afe2:	f043 0302 	orr.w	r3, r3, #2
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f003 facf 	bl	800e590 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8b5b      	ldrh	r3, [r3, #26]
 800aff6:	f023 0303 	bic.w	r3, r3, #3
 800affa:	b29a      	uxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	8b5b      	ldrh	r3, [r3, #26]
 800b004:	f003 0308 	and.w	r3, r3, #8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d009      	beq.n	800b020 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8b5b      	ldrh	r3, [r3, #26]
 800b010:	f023 0308 	bic.w	r3, r3, #8
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff fa78 	bl	800a510 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b02e:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <tcp_fasttmr+0xc4>)
 800b030:	2200      	movs	r2, #0
 800b032:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f819 	bl	800b06c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b03a:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <tcp_fasttmr+0xc4>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d000      	beq.n	800b044 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b042:	e7b8      	b.n	800afb6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	607b      	str	r3, [r7, #4]
 800b048:	e002      	b.n	800b050 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1b3      	bne.n	800afbe <tcp_fasttmr+0x1a>
    }
  }
}
 800b056:	bf00      	nop
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	2000a6fe 	.word	0x2000a6fe
 800b064:	2000a6f4 	.word	0x2000a6f4
 800b068:	2000a6fc 	.word	0x2000a6fc

0800b06c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b06c:	b590      	push	{r4, r7, lr}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d109      	bne.n	800b08e <tcp_process_refused_data+0x22>
 800b07a:	4b37      	ldr	r3, [pc, #220]	; (800b158 <tcp_process_refused_data+0xec>)
 800b07c:	f240 6209 	movw	r2, #1545	; 0x609
 800b080:	4936      	ldr	r1, [pc, #216]	; (800b15c <tcp_process_refused_data+0xf0>)
 800b082:	4837      	ldr	r0, [pc, #220]	; (800b160 <tcp_process_refused_data+0xf4>)
 800b084:	f009 f8da 	bl	801423c <iprintf>
 800b088:	f06f 030f 	mvn.w	r3, #15
 800b08c:	e060      	b.n	800b150 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b092:	7b5b      	ldrb	r3, [r3, #13]
 800b094:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b09a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <tcp_process_refused_data+0x58>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6918      	ldr	r0, [r3, #16]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	6879      	ldr	r1, [r7, #4]
 800b0bc:	47a0      	blx	r4
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73fb      	strb	r3, [r7, #15]
 800b0c2:	e007      	b.n	800b0d4 <tcp_process_refused_data+0x68>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	f000 f8a4 	bl	800b218 <tcp_recv_null>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d12a      	bne.n	800b132 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	f003 0320 	and.w	r3, r3, #32
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d033      	beq.n	800b14e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b0ee:	d005      	beq.n	800b0fc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00b      	beq.n	800b11e <tcp_process_refused_data+0xb2>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6918      	ldr	r0, [r3, #16]
 800b110:	2300      	movs	r3, #0
 800b112:	2200      	movs	r2, #0
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	47a0      	blx	r4
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]
 800b11c:	e001      	b.n	800b122 <tcp_process_refused_data+0xb6>
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b126:	f113 0f0d 	cmn.w	r3, #13
 800b12a:	d110      	bne.n	800b14e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b12c:	f06f 030c 	mvn.w	r3, #12
 800b130:	e00e      	b.n	800b150 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b136:	f113 0f0d 	cmn.w	r3, #13
 800b13a:	d102      	bne.n	800b142 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b13c:	f06f 030c 	mvn.w	r3, #12
 800b140:	e006      	b.n	800b150 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b148:	f06f 0304 	mvn.w	r3, #4
 800b14c:	e000      	b.n	800b150 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	bd90      	pop	{r4, r7, pc}
 800b158:	08016494 	.word	0x08016494
 800b15c:	080169a4 	.word	0x080169a4
 800b160:	080164d8 	.word	0x080164d8

0800b164 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b16c:	e007      	b.n	800b17e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f80a 	bl	800b18e <tcp_seg_free>
    seg = next;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1f4      	bne.n	800b16e <tcp_segs_free+0xa>
  }
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00c      	beq.n	800b1b6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d004      	beq.n	800b1ae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fd6d 	bl	8009c88 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	2003      	movs	r0, #3
 800b1b2:	f7fd ff57 	bl	8009064 <memp_free>
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
	...

0800b1c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d106      	bne.n	800b1dc <tcp_seg_copy+0x1c>
 800b1ce:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <tcp_seg_copy+0x4c>)
 800b1d0:	f240 6282 	movw	r2, #1666	; 0x682
 800b1d4:	490e      	ldr	r1, [pc, #56]	; (800b210 <tcp_seg_copy+0x50>)
 800b1d6:	480f      	ldr	r0, [pc, #60]	; (800b214 <tcp_seg_copy+0x54>)
 800b1d8:	f009 f830 	bl	801423c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b1dc:	2003      	movs	r0, #3
 800b1de:	f7fd fef5 	bl	8008fcc <memp_malloc>
 800b1e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <tcp_seg_copy+0x2e>
    return NULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e00a      	b.n	800b204 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b1ee:	2210      	movs	r2, #16
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f008 fff2 	bl	80141dc <memcpy>
  pbuf_ref(cseg->p);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fe fde3 	bl	8009dc8 <pbuf_ref>
  return cseg;
 800b202:	68fb      	ldr	r3, [r7, #12]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	08016494 	.word	0x08016494
 800b210:	080169e8 	.word	0x080169e8
 800b214:	080164d8 	.word	0x080164d8

0800b218 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d109      	bne.n	800b240 <tcp_recv_null+0x28>
 800b22c:	4b12      	ldr	r3, [pc, #72]	; (800b278 <tcp_recv_null+0x60>)
 800b22e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b232:	4912      	ldr	r1, [pc, #72]	; (800b27c <tcp_recv_null+0x64>)
 800b234:	4812      	ldr	r0, [pc, #72]	; (800b280 <tcp_recv_null+0x68>)
 800b236:	f009 f801 	bl	801423c <iprintf>
 800b23a:	f06f 030f 	mvn.w	r3, #15
 800b23e:	e016      	b.n	800b26e <tcp_recv_null+0x56>

  if (p != NULL) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d009      	beq.n	800b25a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	891b      	ldrh	r3, [r3, #8]
 800b24a:	4619      	mov	r1, r3
 800b24c:	68b8      	ldr	r0, [r7, #8]
 800b24e:	f7ff fb19 	bl	800a884 <tcp_recved>
    pbuf_free(p);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7fe fd18 	bl	8009c88 <pbuf_free>
 800b258:	e008      	b.n	800b26c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b25a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d104      	bne.n	800b26c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b262:	68b8      	ldr	r0, [r7, #8]
 800b264:	f7ff f9be 	bl	800a5e4 <tcp_close>
 800b268:	4603      	mov	r3, r0
 800b26a:	e000      	b.n	800b26e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	08016494 	.word	0x08016494
 800b27c:	08016a04 	.word	0x08016a04
 800b280:	080164d8 	.word	0x080164d8

0800b284 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b28e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b292:	2b00      	cmp	r3, #0
 800b294:	db01      	blt.n	800b29a <tcp_kill_prio+0x16>
 800b296:	79fb      	ldrb	r3, [r7, #7]
 800b298:	e000      	b.n	800b29c <tcp_kill_prio+0x18>
 800b29a:	237f      	movs	r3, #127	; 0x7f
 800b29c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b29e:	7afb      	ldrb	r3, [r7, #11]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d034      	beq.n	800b30e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b2a4:	7afb      	ldrb	r3, [r7, #11]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2b2:	4b19      	ldr	r3, [pc, #100]	; (800b318 <tcp_kill_prio+0x94>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e01f      	b.n	800b2fa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	7d5b      	ldrb	r3, [r3, #21]
 800b2be:	7afa      	ldrb	r2, [r7, #11]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d80c      	bhi.n	800b2de <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b2c8:	7afa      	ldrb	r2, [r7, #11]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d112      	bne.n	800b2f4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b2ce:	4b13      	ldr	r3, [pc, #76]	; (800b31c <tcp_kill_prio+0x98>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d80a      	bhi.n	800b2f4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b2de:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <tcp_kill_prio+0x98>)
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	7d5b      	ldrb	r3, [r3, #21]
 800b2f2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	617b      	str	r3, [r7, #20]
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1dc      	bne.n	800b2ba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d004      	beq.n	800b310 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b306:	6938      	ldr	r0, [r7, #16]
 800b308:	f7ff fa56 	bl	800a7b8 <tcp_abort>
 800b30c:	e000      	b.n	800b310 <tcp_kill_prio+0x8c>
    return;
 800b30e:	bf00      	nop
  }
}
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	2000a6f4 	.word	0x2000a6f4
 800b31c:	2000a6e8 	.word	0x2000a6e8

0800b320 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	2b08      	cmp	r3, #8
 800b32e:	d009      	beq.n	800b344 <tcp_kill_state+0x24>
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	2b09      	cmp	r3, #9
 800b334:	d006      	beq.n	800b344 <tcp_kill_state+0x24>
 800b336:	4b1a      	ldr	r3, [pc, #104]	; (800b3a0 <tcp_kill_state+0x80>)
 800b338:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b33c:	4919      	ldr	r1, [pc, #100]	; (800b3a4 <tcp_kill_state+0x84>)
 800b33e:	481a      	ldr	r0, [pc, #104]	; (800b3a8 <tcp_kill_state+0x88>)
 800b340:	f008 ff7c 	bl	801423c <iprintf>

  inactivity = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b34c:	4b17      	ldr	r3, [pc, #92]	; (800b3ac <tcp_kill_state+0x8c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	e017      	b.n	800b384 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	7d1b      	ldrb	r3, [r3, #20]
 800b358:	79fa      	ldrb	r2, [r7, #7]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d10f      	bne.n	800b37e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b35e:	4b14      	ldr	r3, [pc, #80]	; (800b3b0 <tcp_kill_state+0x90>)
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d807      	bhi.n	800b37e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b36e:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <tcp_kill_state+0x90>)
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	617b      	str	r3, [r7, #20]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1e4      	bne.n	800b354 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b390:	2100      	movs	r1, #0
 800b392:	6938      	ldr	r0, [r7, #16]
 800b394:	f7ff f952 	bl	800a63c <tcp_abandon>
  }
}
 800b398:	bf00      	nop
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	08016494 	.word	0x08016494
 800b3a4:	08016a20 	.word	0x08016a20
 800b3a8:	080164d8 	.word	0x080164d8
 800b3ac:	2000a6f4 	.word	0x2000a6f4
 800b3b0:	2000a6e8 	.word	0x2000a6e8

0800b3b4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <tcp_kill_timewait+0x58>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	e012      	b.n	800b3f0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3ca:	4b11      	ldr	r3, [pc, #68]	; (800b410 <tcp_kill_timewait+0x5c>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d807      	bhi.n	800b3ea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b3da:	4b0d      	ldr	r3, [pc, #52]	; (800b410 <tcp_kill_timewait+0x5c>)
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1e9      	bne.n	800b3ca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b3fc:	68b8      	ldr	r0, [r7, #8]
 800b3fe:	f7ff f9db 	bl	800a7b8 <tcp_abort>
  }
}
 800b402:	bf00      	nop
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	2000a6f8 	.word	0x2000a6f8
 800b410:	2000a6e8 	.word	0x2000a6e8

0800b414 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b41a:	4b10      	ldr	r3, [pc, #64]	; (800b45c <tcp_handle_closepend+0x48>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b420:	e014      	b.n	800b44c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	8b5b      	ldrh	r3, [r3, #26]
 800b42c:	f003 0308 	and.w	r3, r3, #8
 800b430:	2b00      	cmp	r3, #0
 800b432:	d009      	beq.n	800b448 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	8b5b      	ldrh	r3, [r3, #26]
 800b438:	f023 0308 	bic.w	r3, r3, #8
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff f864 	bl	800a510 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e7      	bne.n	800b422 <tcp_handle_closepend+0xe>
  }
}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2000a6f4 	.word	0x2000a6f4

0800b460 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b46a:	2001      	movs	r0, #1
 800b46c:	f7fd fdae 	bl	8008fcc <memp_malloc>
 800b470:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d126      	bne.n	800b4c6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b478:	f7ff ffcc 	bl	800b414 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b47c:	f7ff ff9a 	bl	800b3b4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b480:	2001      	movs	r0, #1
 800b482:	f7fd fda3 	bl	8008fcc <memp_malloc>
 800b486:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d11b      	bne.n	800b4c6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b48e:	2009      	movs	r0, #9
 800b490:	f7ff ff46 	bl	800b320 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b494:	2001      	movs	r0, #1
 800b496:	f7fd fd99 	bl	8008fcc <memp_malloc>
 800b49a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d111      	bne.n	800b4c6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b4a2:	2008      	movs	r0, #8
 800b4a4:	f7ff ff3c 	bl	800b320 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	f7fd fd8f 	bl	8008fcc <memp_malloc>
 800b4ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d107      	bne.n	800b4c6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fee3 	bl	800b284 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4be:	2001      	movs	r0, #1
 800b4c0:	f7fd fd84 	bl	8008fcc <memp_malloc>
 800b4c4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d03f      	beq.n	800b54c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b4cc:	229c      	movs	r2, #156	; 0x9c
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f008 feab 	bl	801422c <memset>
    pcb->prio = prio;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	79fa      	ldrb	r2, [r7, #7]
 800b4da:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b4e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b4ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	22ff      	movs	r2, #255	; 0xff
 800b4fa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b502:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2206      	movs	r2, #6
 800b508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2206      	movs	r2, #6
 800b510:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b518:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b522:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <tcp_alloc+0xf8>)
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b52a:	4b0c      	ldr	r3, [pc, #48]	; (800b55c <tcp_alloc+0xfc>)
 800b52c:	781a      	ldrb	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b538:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4a08      	ldr	r2, [pc, #32]	; (800b560 <tcp_alloc+0x100>)
 800b540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	4a07      	ldr	r2, [pc, #28]	; (800b564 <tcp_alloc+0x104>)
 800b548:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b54c:	68fb      	ldr	r3, [r7, #12]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	2000a6e8 	.word	0x2000a6e8
 800b55c:	2000a6fe 	.word	0x2000a6fe
 800b560:	0800b219 	.word	0x0800b219
 800b564:	006ddd00 	.word	0x006ddd00

0800b568 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d107      	bne.n	800b586 <tcp_pcb_purge+0x1e>
 800b576:	4b21      	ldr	r3, [pc, #132]	; (800b5fc <tcp_pcb_purge+0x94>)
 800b578:	f640 0251 	movw	r2, #2129	; 0x851
 800b57c:	4920      	ldr	r1, [pc, #128]	; (800b600 <tcp_pcb_purge+0x98>)
 800b57e:	4821      	ldr	r0, [pc, #132]	; (800b604 <tcp_pcb_purge+0x9c>)
 800b580:	f008 fe5c 	bl	801423c <iprintf>
 800b584:	e037      	b.n	800b5f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	7d1b      	ldrb	r3, [r3, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d033      	beq.n	800b5f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b592:	2b0a      	cmp	r3, #10
 800b594:	d02f      	beq.n	800b5f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d02b      	beq.n	800b5f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d007      	beq.n	800b5b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe fb6c 	bl	8009c88 <pbuf_free>
      pcb->refused_data = NULL;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f986 	bl	800b8d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff fdc7 	bl	800b164 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7ff fdc2 	bl	800b164 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	08016494 	.word	0x08016494
 800b600:	08016ae0 	.word	0x08016ae0
 800b604:	080164d8 	.word	0x080164d8

0800b608 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d106      	bne.n	800b626 <tcp_pcb_remove+0x1e>
 800b618:	4b3e      	ldr	r3, [pc, #248]	; (800b714 <tcp_pcb_remove+0x10c>)
 800b61a:	f640 0283 	movw	r2, #2179	; 0x883
 800b61e:	493e      	ldr	r1, [pc, #248]	; (800b718 <tcp_pcb_remove+0x110>)
 800b620:	483e      	ldr	r0, [pc, #248]	; (800b71c <tcp_pcb_remove+0x114>)
 800b622:	f008 fe0b 	bl	801423c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <tcp_pcb_remove+0x32>
 800b62c:	4b39      	ldr	r3, [pc, #228]	; (800b714 <tcp_pcb_remove+0x10c>)
 800b62e:	f640 0284 	movw	r2, #2180	; 0x884
 800b632:	493b      	ldr	r1, [pc, #236]	; (800b720 <tcp_pcb_remove+0x118>)
 800b634:	4839      	ldr	r0, [pc, #228]	; (800b71c <tcp_pcb_remove+0x114>)
 800b636:	f008 fe01 	bl	801423c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d105      	bne.n	800b650 <tcp_pcb_remove+0x48>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68da      	ldr	r2, [r3, #12]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	e013      	b.n	800b678 <tcp_pcb_remove+0x70>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	e00c      	b.n	800b672 <tcp_pcb_remove+0x6a>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d104      	bne.n	800b66c <tcp_pcb_remove+0x64>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68da      	ldr	r2, [r3, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	60da      	str	r2, [r3, #12]
 800b66a:	e005      	b.n	800b678 <tcp_pcb_remove+0x70>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1ef      	bne.n	800b658 <tcp_pcb_remove+0x50>
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2200      	movs	r2, #0
 800b67c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b67e:	6838      	ldr	r0, [r7, #0]
 800b680:	f7ff ff72 	bl	800b568 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	7d1b      	ldrb	r3, [r3, #20]
 800b688:	2b0a      	cmp	r3, #10
 800b68a:	d013      	beq.n	800b6b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b690:	2b01      	cmp	r3, #1
 800b692:	d00f      	beq.n	800b6b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	8b5b      	ldrh	r3, [r3, #26]
 800b698:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d009      	beq.n	800b6b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	8b5b      	ldrh	r3, [r3, #26]
 800b6a4:	f043 0302 	orr.w	r3, r3, #2
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b6ae:	6838      	ldr	r0, [r7, #0]
 800b6b0:	f002 ff6e 	bl	800e590 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	7d1b      	ldrb	r3, [r3, #20]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d020      	beq.n	800b6fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <tcp_pcb_remove+0xca>
 800b6c4:	4b13      	ldr	r3, [pc, #76]	; (800b714 <tcp_pcb_remove+0x10c>)
 800b6c6:	f640 0293 	movw	r2, #2195	; 0x893
 800b6ca:	4916      	ldr	r1, [pc, #88]	; (800b724 <tcp_pcb_remove+0x11c>)
 800b6cc:	4813      	ldr	r0, [pc, #76]	; (800b71c <tcp_pcb_remove+0x114>)
 800b6ce:	f008 fdb5 	bl	801423c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d006      	beq.n	800b6e8 <tcp_pcb_remove+0xe0>
 800b6da:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <tcp_pcb_remove+0x10c>)
 800b6dc:	f640 0294 	movw	r2, #2196	; 0x894
 800b6e0:	4911      	ldr	r1, [pc, #68]	; (800b728 <tcp_pcb_remove+0x120>)
 800b6e2:	480e      	ldr	r0, [pc, #56]	; (800b71c <tcp_pcb_remove+0x114>)
 800b6e4:	f008 fdaa 	bl	801423c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d006      	beq.n	800b6fe <tcp_pcb_remove+0xf6>
 800b6f0:	4b08      	ldr	r3, [pc, #32]	; (800b714 <tcp_pcb_remove+0x10c>)
 800b6f2:	f640 0296 	movw	r2, #2198	; 0x896
 800b6f6:	490d      	ldr	r1, [pc, #52]	; (800b72c <tcp_pcb_remove+0x124>)
 800b6f8:	4808      	ldr	r0, [pc, #32]	; (800b71c <tcp_pcb_remove+0x114>)
 800b6fa:	f008 fd9f 	bl	801423c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2200      	movs	r2, #0
 800b702:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2200      	movs	r2, #0
 800b708:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	08016494 	.word	0x08016494
 800b718:	08016afc 	.word	0x08016afc
 800b71c:	080164d8 	.word	0x080164d8
 800b720:	08016b18 	.word	0x08016b18
 800b724:	08016b38 	.word	0x08016b38
 800b728:	08016b50 	.word	0x08016b50
 800b72c:	08016b6c 	.word	0x08016b6c

0800b730 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <tcp_next_iss+0x1c>
 800b73e:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <tcp_next_iss+0x38>)
 800b740:	f640 02af 	movw	r2, #2223	; 0x8af
 800b744:	4909      	ldr	r1, [pc, #36]	; (800b76c <tcp_next_iss+0x3c>)
 800b746:	480a      	ldr	r0, [pc, #40]	; (800b770 <tcp_next_iss+0x40>)
 800b748:	f008 fd78 	bl	801423c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b74c:	4b09      	ldr	r3, [pc, #36]	; (800b774 <tcp_next_iss+0x44>)
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	4b09      	ldr	r3, [pc, #36]	; (800b778 <tcp_next_iss+0x48>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4413      	add	r3, r2
 800b756:	4a07      	ldr	r2, [pc, #28]	; (800b774 <tcp_next_iss+0x44>)
 800b758:	6013      	str	r3, [r2, #0]
  return iss;
 800b75a:	4b06      	ldr	r3, [pc, #24]	; (800b774 <tcp_next_iss+0x44>)
 800b75c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	08016494 	.word	0x08016494
 800b76c:	08016b84 	.word	0x08016b84
 800b770:	080164d8 	.word	0x080164d8
 800b774:	20000020 	.word	0x20000020
 800b778:	2000a6e8 	.word	0x2000a6e8

0800b77c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d106      	bne.n	800b79e <tcp_eff_send_mss_netif+0x22>
 800b790:	4b14      	ldr	r3, [pc, #80]	; (800b7e4 <tcp_eff_send_mss_netif+0x68>)
 800b792:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b796:	4914      	ldr	r1, [pc, #80]	; (800b7e8 <tcp_eff_send_mss_netif+0x6c>)
 800b798:	4814      	ldr	r0, [pc, #80]	; (800b7ec <tcp_eff_send_mss_netif+0x70>)
 800b79a:	f008 fd4f 	bl	801423c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b7a4:	89fb      	ldrh	r3, [r7, #14]
 800b7a6:	e019      	b.n	800b7dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b7ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b7ae:	8afb      	ldrh	r3, [r7, #22]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d012      	beq.n	800b7da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b7b4:	2328      	movs	r3, #40	; 0x28
 800b7b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b7b8:	8afa      	ldrh	r2, [r7, #22]
 800b7ba:	8abb      	ldrh	r3, [r7, #20]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d904      	bls.n	800b7ca <tcp_eff_send_mss_netif+0x4e>
 800b7c0:	8afa      	ldrh	r2, [r7, #22]
 800b7c2:	8abb      	ldrh	r3, [r7, #20]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	e000      	b.n	800b7cc <tcp_eff_send_mss_netif+0x50>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b7ce:	8a7a      	ldrh	r2, [r7, #18]
 800b7d0:	89fb      	ldrh	r3, [r7, #14]
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	bf28      	it	cs
 800b7d6:	4613      	movcs	r3, r2
 800b7d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b7da:	89fb      	ldrh	r3, [r7, #14]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	08016494 	.word	0x08016494
 800b7e8:	08016ba0 	.word	0x08016ba0
 800b7ec:	080164d8 	.word	0x080164d8

0800b7f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d119      	bne.n	800b838 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b804:	4b10      	ldr	r3, [pc, #64]	; (800b848 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b806:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b80a:	4910      	ldr	r1, [pc, #64]	; (800b84c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b80c:	4810      	ldr	r0, [pc, #64]	; (800b850 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b80e:	f008 fd15 	bl	801423c <iprintf>

  while (pcb != NULL) {
 800b812:	e011      	b.n	800b838 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d108      	bne.n	800b832 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7fe ffc6 	bl	800a7b8 <tcp_abort>
      pcb = next;
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	e002      	b.n	800b838 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1ea      	bne.n	800b814 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b83e:	bf00      	nop
 800b840:	bf00      	nop
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	08016494 	.word	0x08016494
 800b84c:	08016bc8 	.word	0x08016bc8
 800b850:	080164d8 	.word	0x080164d8

0800b854 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d02a      	beq.n	800b8ba <tcp_netif_ip_addr_changed+0x66>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d026      	beq.n	800b8ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b86c:	4b15      	ldr	r3, [pc, #84]	; (800b8c4 <tcp_netif_ip_addr_changed+0x70>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff ffbc 	bl	800b7f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b878:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <tcp_netif_ip_addr_changed+0x74>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff ffb6 	bl	800b7f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d017      	beq.n	800b8ba <tcp_netif_ip_addr_changed+0x66>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d013      	beq.n	800b8ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b892:	4b0e      	ldr	r3, [pc, #56]	; (800b8cc <tcp_netif_ip_addr_changed+0x78>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	60fb      	str	r3, [r7, #12]
 800b898:	e00c      	b.n	800b8b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d103      	bne.n	800b8ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1ef      	bne.n	800b89a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b8ba:	bf00      	nop
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	2000a6f4 	.word	0x2000a6f4
 800b8c8:	2000a6ec 	.word	0x2000a6ec
 800b8cc:	2000a6f0 	.word	0x2000a6f0

0800b8d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d007      	beq.n	800b8f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fc3d 	bl	800b164 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b8f8:	b590      	push	{r4, r7, lr}
 800b8fa:	b08d      	sub	sp, #52	; 0x34
 800b8fc:	af04      	add	r7, sp, #16
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d105      	bne.n	800b914 <tcp_input+0x1c>
 800b908:	4b9b      	ldr	r3, [pc, #620]	; (800bb78 <tcp_input+0x280>)
 800b90a:	2283      	movs	r2, #131	; 0x83
 800b90c:	499b      	ldr	r1, [pc, #620]	; (800bb7c <tcp_input+0x284>)
 800b90e:	489c      	ldr	r0, [pc, #624]	; (800bb80 <tcp_input+0x288>)
 800b910:	f008 fc94 	bl	801423c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	4a9a      	ldr	r2, [pc, #616]	; (800bb84 <tcp_input+0x28c>)
 800b91a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	895b      	ldrh	r3, [r3, #10]
 800b920:	2b13      	cmp	r3, #19
 800b922:	f240 83d1 	bls.w	800c0c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b926:	4b98      	ldr	r3, [pc, #608]	; (800bb88 <tcp_input+0x290>)
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	4a97      	ldr	r2, [pc, #604]	; (800bb88 <tcp_input+0x290>)
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	4611      	mov	r1, r2
 800b930:	4618      	mov	r0, r3
 800b932:	f005 fef9 	bl	8011728 <ip4_addr_isbroadcast_u32>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f040 83c7 	bne.w	800c0cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b93e:	4b92      	ldr	r3, [pc, #584]	; (800bb88 <tcp_input+0x290>)
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b946:	2be0      	cmp	r3, #224	; 0xe0
 800b948:	f000 83c0 	beq.w	800c0cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b94c:	4b8d      	ldr	r3, [pc, #564]	; (800bb84 <tcp_input+0x28c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	899b      	ldrh	r3, [r3, #12]
 800b952:	b29b      	uxth	r3, r3
 800b954:	4618      	mov	r0, r3
 800b956:	f7fc fee3 	bl	8008720 <lwip_htons>
 800b95a:	4603      	mov	r3, r0
 800b95c:	0b1b      	lsrs	r3, r3, #12
 800b95e:	b29b      	uxth	r3, r3
 800b960:	b2db      	uxtb	r3, r3
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b966:	7cbb      	ldrb	r3, [r7, #18]
 800b968:	2b13      	cmp	r3, #19
 800b96a:	f240 83b1 	bls.w	800c0d0 <tcp_input+0x7d8>
 800b96e:	7cbb      	ldrb	r3, [r7, #18]
 800b970:	b29a      	uxth	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	891b      	ldrh	r3, [r3, #8]
 800b976:	429a      	cmp	r2, r3
 800b978:	f200 83aa 	bhi.w	800c0d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b97c:	7cbb      	ldrb	r3, [r7, #18]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	3b14      	subs	r3, #20
 800b982:	b29a      	uxth	r2, r3
 800b984:	4b81      	ldr	r3, [pc, #516]	; (800bb8c <tcp_input+0x294>)
 800b986:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b988:	4b81      	ldr	r3, [pc, #516]	; (800bb90 <tcp_input+0x298>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	895a      	ldrh	r2, [r3, #10]
 800b992:	7cbb      	ldrb	r3, [r7, #18]
 800b994:	b29b      	uxth	r3, r3
 800b996:	429a      	cmp	r2, r3
 800b998:	d309      	bcc.n	800b9ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b99a:	4b7c      	ldr	r3, [pc, #496]	; (800bb8c <tcp_input+0x294>)
 800b99c:	881a      	ldrh	r2, [r3, #0]
 800b99e:	4b7d      	ldr	r3, [pc, #500]	; (800bb94 <tcp_input+0x29c>)
 800b9a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b9a2:	7cbb      	ldrb	r3, [r7, #18]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fe f8e8 	bl	8009b7c <pbuf_remove_header>
 800b9ac:	e04e      	b.n	800ba4c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d105      	bne.n	800b9c2 <tcp_input+0xca>
 800b9b6:	4b70      	ldr	r3, [pc, #448]	; (800bb78 <tcp_input+0x280>)
 800b9b8:	22c2      	movs	r2, #194	; 0xc2
 800b9ba:	4977      	ldr	r1, [pc, #476]	; (800bb98 <tcp_input+0x2a0>)
 800b9bc:	4870      	ldr	r0, [pc, #448]	; (800bb80 <tcp_input+0x288>)
 800b9be:	f008 fc3d 	bl	801423c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b9c2:	2114      	movs	r1, #20
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7fe f8d9 	bl	8009b7c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	895a      	ldrh	r2, [r3, #10]
 800b9ce:	4b71      	ldr	r3, [pc, #452]	; (800bb94 <tcp_input+0x29c>)
 800b9d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b9d2:	4b6e      	ldr	r3, [pc, #440]	; (800bb8c <tcp_input+0x294>)
 800b9d4:	881a      	ldrh	r2, [r3, #0]
 800b9d6:	4b6f      	ldr	r3, [pc, #444]	; (800bb94 <tcp_input+0x29c>)
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b9de:	4b6d      	ldr	r3, [pc, #436]	; (800bb94 <tcp_input+0x29c>)
 800b9e0:	881b      	ldrh	r3, [r3, #0]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7fe f8c9 	bl	8009b7c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	895b      	ldrh	r3, [r3, #10]
 800b9f0:	8a3a      	ldrh	r2, [r7, #16]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	f200 836e 	bhi.w	800c0d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	4a64      	ldr	r2, [pc, #400]	; (800bb90 <tcp_input+0x298>)
 800ba00:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	8a3a      	ldrh	r2, [r7, #16]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe f8b6 	bl	8009b7c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	891a      	ldrh	r2, [r3, #8]
 800ba14:	8a3b      	ldrh	r3, [r7, #16]
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	895b      	ldrh	r3, [r3, #10]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d005      	beq.n	800ba32 <tcp_input+0x13a>
 800ba26:	4b54      	ldr	r3, [pc, #336]	; (800bb78 <tcp_input+0x280>)
 800ba28:	22df      	movs	r2, #223	; 0xdf
 800ba2a:	495c      	ldr	r1, [pc, #368]	; (800bb9c <tcp_input+0x2a4>)
 800ba2c:	4854      	ldr	r0, [pc, #336]	; (800bb80 <tcp_input+0x288>)
 800ba2e:	f008 fc05 	bl	801423c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	891a      	ldrh	r2, [r3, #8]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	891b      	ldrh	r3, [r3, #8]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d005      	beq.n	800ba4c <tcp_input+0x154>
 800ba40:	4b4d      	ldr	r3, [pc, #308]	; (800bb78 <tcp_input+0x280>)
 800ba42:	22e0      	movs	r2, #224	; 0xe0
 800ba44:	4956      	ldr	r1, [pc, #344]	; (800bba0 <tcp_input+0x2a8>)
 800ba46:	484e      	ldr	r0, [pc, #312]	; (800bb80 <tcp_input+0x288>)
 800ba48:	f008 fbf8 	bl	801423c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ba4c:	4b4d      	ldr	r3, [pc, #308]	; (800bb84 <tcp_input+0x28c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	4a4b      	ldr	r2, [pc, #300]	; (800bb84 <tcp_input+0x28c>)
 800ba56:	6814      	ldr	r4, [r2, #0]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fc fe61 	bl	8008720 <lwip_htons>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ba62:	4b48      	ldr	r3, [pc, #288]	; (800bb84 <tcp_input+0x28c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	885b      	ldrh	r3, [r3, #2]
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	4a46      	ldr	r2, [pc, #280]	; (800bb84 <tcp_input+0x28c>)
 800ba6c:	6814      	ldr	r4, [r2, #0]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fc fe56 	bl	8008720 <lwip_htons>
 800ba74:	4603      	mov	r3, r0
 800ba76:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ba78:	4b42      	ldr	r3, [pc, #264]	; (800bb84 <tcp_input+0x28c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	4a41      	ldr	r2, [pc, #260]	; (800bb84 <tcp_input+0x28c>)
 800ba80:	6814      	ldr	r4, [r2, #0]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fc fe61 	bl	800874a <lwip_htonl>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	6063      	str	r3, [r4, #4]
 800ba8c:	6863      	ldr	r3, [r4, #4]
 800ba8e:	4a45      	ldr	r2, [pc, #276]	; (800bba4 <tcp_input+0x2ac>)
 800ba90:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ba92:	4b3c      	ldr	r3, [pc, #240]	; (800bb84 <tcp_input+0x28c>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	4a3a      	ldr	r2, [pc, #232]	; (800bb84 <tcp_input+0x28c>)
 800ba9a:	6814      	ldr	r4, [r2, #0]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fc fe54 	bl	800874a <lwip_htonl>
 800baa2:	4603      	mov	r3, r0
 800baa4:	60a3      	str	r3, [r4, #8]
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	4a3f      	ldr	r2, [pc, #252]	; (800bba8 <tcp_input+0x2b0>)
 800baaa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800baac:	4b35      	ldr	r3, [pc, #212]	; (800bb84 <tcp_input+0x28c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	89db      	ldrh	r3, [r3, #14]
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	4a33      	ldr	r2, [pc, #204]	; (800bb84 <tcp_input+0x28c>)
 800bab6:	6814      	ldr	r4, [r2, #0]
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fc fe31 	bl	8008720 <lwip_htons>
 800babe:	4603      	mov	r3, r0
 800bac0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bac2:	4b30      	ldr	r3, [pc, #192]	; (800bb84 <tcp_input+0x28c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	899b      	ldrh	r3, [r3, #12]
 800bac8:	b29b      	uxth	r3, r3
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fc fe28 	bl	8008720 <lwip_htons>
 800bad0:	4603      	mov	r3, r0
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	4b34      	ldr	r3, [pc, #208]	; (800bbac <tcp_input+0x2b4>)
 800badc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	891a      	ldrh	r2, [r3, #8]
 800bae2:	4b33      	ldr	r3, [pc, #204]	; (800bbb0 <tcp_input+0x2b8>)
 800bae4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bae6:	4b31      	ldr	r3, [pc, #196]	; (800bbac <tcp_input+0x2b4>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00c      	beq.n	800bb0c <tcp_input+0x214>
    tcplen++;
 800baf2:	4b2f      	ldr	r3, [pc, #188]	; (800bbb0 <tcp_input+0x2b8>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	3301      	adds	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	4b2d      	ldr	r3, [pc, #180]	; (800bbb0 <tcp_input+0x2b8>)
 800bafc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	891a      	ldrh	r2, [r3, #8]
 800bb02:	4b2b      	ldr	r3, [pc, #172]	; (800bbb0 <tcp_input+0x2b8>)
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	f200 82e6 	bhi.w	800c0d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb10:	4b28      	ldr	r3, [pc, #160]	; (800bbb4 <tcp_input+0x2bc>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	61fb      	str	r3, [r7, #28]
 800bb16:	e09d      	b.n	800bc54 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	7d1b      	ldrb	r3, [r3, #20]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d105      	bne.n	800bb2c <tcp_input+0x234>
 800bb20:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <tcp_input+0x280>)
 800bb22:	22fb      	movs	r2, #251	; 0xfb
 800bb24:	4924      	ldr	r1, [pc, #144]	; (800bbb8 <tcp_input+0x2c0>)
 800bb26:	4816      	ldr	r0, [pc, #88]	; (800bb80 <tcp_input+0x288>)
 800bb28:	f008 fb88 	bl	801423c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	7d1b      	ldrb	r3, [r3, #20]
 800bb30:	2b0a      	cmp	r3, #10
 800bb32:	d105      	bne.n	800bb40 <tcp_input+0x248>
 800bb34:	4b10      	ldr	r3, [pc, #64]	; (800bb78 <tcp_input+0x280>)
 800bb36:	22fc      	movs	r2, #252	; 0xfc
 800bb38:	4920      	ldr	r1, [pc, #128]	; (800bbbc <tcp_input+0x2c4>)
 800bb3a:	4811      	ldr	r0, [pc, #68]	; (800bb80 <tcp_input+0x288>)
 800bb3c:	f008 fb7e 	bl	801423c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	7d1b      	ldrb	r3, [r3, #20]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d105      	bne.n	800bb54 <tcp_input+0x25c>
 800bb48:	4b0b      	ldr	r3, [pc, #44]	; (800bb78 <tcp_input+0x280>)
 800bb4a:	22fd      	movs	r2, #253	; 0xfd
 800bb4c:	491c      	ldr	r1, [pc, #112]	; (800bbc0 <tcp_input+0x2c8>)
 800bb4e:	480c      	ldr	r0, [pc, #48]	; (800bb80 <tcp_input+0x288>)
 800bb50:	f008 fb74 	bl	801423c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	7a1b      	ldrb	r3, [r3, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d033      	beq.n	800bbc4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	7a1a      	ldrb	r2, [r3, #8]
 800bb60:	4b09      	ldr	r3, [pc, #36]	; (800bb88 <tcp_input+0x290>)
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb68:	3301      	adds	r3, #1
 800bb6a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d029      	beq.n	800bbc4 <tcp_input+0x2cc>
      prev = pcb;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	61bb      	str	r3, [r7, #24]
      continue;
 800bb74:	e06b      	b.n	800bc4e <tcp_input+0x356>
 800bb76:	bf00      	nop
 800bb78:	08016bfc 	.word	0x08016bfc
 800bb7c:	08016c30 	.word	0x08016c30
 800bb80:	08016c48 	.word	0x08016c48
 800bb84:	2000a710 	.word	0x2000a710
 800bb88:	20007178 	.word	0x20007178
 800bb8c:	2000a714 	.word	0x2000a714
 800bb90:	2000a718 	.word	0x2000a718
 800bb94:	2000a716 	.word	0x2000a716
 800bb98:	08016c70 	.word	0x08016c70
 800bb9c:	08016c80 	.word	0x08016c80
 800bba0:	08016c8c 	.word	0x08016c8c
 800bba4:	2000a720 	.word	0x2000a720
 800bba8:	2000a724 	.word	0x2000a724
 800bbac:	2000a72c 	.word	0x2000a72c
 800bbb0:	2000a72a 	.word	0x2000a72a
 800bbb4:	2000a6f4 	.word	0x2000a6f4
 800bbb8:	08016cac 	.word	0x08016cac
 800bbbc:	08016cd4 	.word	0x08016cd4
 800bbc0:	08016d00 	.word	0x08016d00
    }

    if (pcb->remote_port == tcphdr->src &&
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	8b1a      	ldrh	r2, [r3, #24]
 800bbc8:	4b72      	ldr	r3, [pc, #456]	; (800bd94 <tcp_input+0x49c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d13a      	bne.n	800bc4a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	8ada      	ldrh	r2, [r3, #22]
 800bbd8:	4b6e      	ldr	r3, [pc, #440]	; (800bd94 <tcp_input+0x49c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	885b      	ldrh	r3, [r3, #2]
 800bbde:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d132      	bne.n	800bc4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	4b6b      	ldr	r3, [pc, #428]	; (800bd98 <tcp_input+0x4a0>)
 800bbea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d12c      	bne.n	800bc4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	4b68      	ldr	r3, [pc, #416]	; (800bd98 <tcp_input+0x4a0>)
 800bbf6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d126      	bne.n	800bc4a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	69fa      	ldr	r2, [r7, #28]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d106      	bne.n	800bc14 <tcp_input+0x31c>
 800bc06:	4b65      	ldr	r3, [pc, #404]	; (800bd9c <tcp_input+0x4a4>)
 800bc08:	f240 120d 	movw	r2, #269	; 0x10d
 800bc0c:	4964      	ldr	r1, [pc, #400]	; (800bda0 <tcp_input+0x4a8>)
 800bc0e:	4865      	ldr	r0, [pc, #404]	; (800bda4 <tcp_input+0x4ac>)
 800bc10:	f008 fb14 	bl	801423c <iprintf>
      if (prev != NULL) {
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00a      	beq.n	800bc30 <tcp_input+0x338>
        prev->next = pcb->next;
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	68da      	ldr	r2, [r3, #12]
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bc22:	4b61      	ldr	r3, [pc, #388]	; (800bda8 <tcp_input+0x4b0>)
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bc2a:	4a5f      	ldr	r2, [pc, #380]	; (800bda8 <tcp_input+0x4b0>)
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	69fa      	ldr	r2, [r7, #28]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d111      	bne.n	800bc5e <tcp_input+0x366>
 800bc3a:	4b58      	ldr	r3, [pc, #352]	; (800bd9c <tcp_input+0x4a4>)
 800bc3c:	f240 1215 	movw	r2, #277	; 0x115
 800bc40:	495a      	ldr	r1, [pc, #360]	; (800bdac <tcp_input+0x4b4>)
 800bc42:	4858      	ldr	r0, [pc, #352]	; (800bda4 <tcp_input+0x4ac>)
 800bc44:	f008 fafa 	bl	801423c <iprintf>
      break;
 800bc48:	e009      	b.n	800bc5e <tcp_input+0x366>
    }
    prev = pcb;
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	61fb      	str	r3, [r7, #28]
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f47f af5e 	bne.w	800bb18 <tcp_input+0x220>
 800bc5c:	e000      	b.n	800bc60 <tcp_input+0x368>
      break;
 800bc5e:	bf00      	nop
  }

  if (pcb == NULL) {
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f040 80aa 	bne.w	800bdbc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc68:	4b51      	ldr	r3, [pc, #324]	; (800bdb0 <tcp_input+0x4b8>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	61fb      	str	r3, [r7, #28]
 800bc6e:	e03f      	b.n	800bcf0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	7d1b      	ldrb	r3, [r3, #20]
 800bc74:	2b0a      	cmp	r3, #10
 800bc76:	d006      	beq.n	800bc86 <tcp_input+0x38e>
 800bc78:	4b48      	ldr	r3, [pc, #288]	; (800bd9c <tcp_input+0x4a4>)
 800bc7a:	f240 121f 	movw	r2, #287	; 0x11f
 800bc7e:	494d      	ldr	r1, [pc, #308]	; (800bdb4 <tcp_input+0x4bc>)
 800bc80:	4848      	ldr	r0, [pc, #288]	; (800bda4 <tcp_input+0x4ac>)
 800bc82:	f008 fadb 	bl	801423c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	7a1b      	ldrb	r3, [r3, #8]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d009      	beq.n	800bca2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	7a1a      	ldrb	r2, [r3, #8]
 800bc92:	4b41      	ldr	r3, [pc, #260]	; (800bd98 <tcp_input+0x4a0>)
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d122      	bne.n	800bce8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	8b1a      	ldrh	r2, [r3, #24]
 800bca6:	4b3b      	ldr	r3, [pc, #236]	; (800bd94 <tcp_input+0x49c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d11b      	bne.n	800bcea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	8ada      	ldrh	r2, [r3, #22]
 800bcb6:	4b37      	ldr	r3, [pc, #220]	; (800bd94 <tcp_input+0x49c>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	885b      	ldrh	r3, [r3, #2]
 800bcbc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d113      	bne.n	800bcea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	4b34      	ldr	r3, [pc, #208]	; (800bd98 <tcp_input+0x4a0>)
 800bcc8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d10d      	bne.n	800bcea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	4b31      	ldr	r3, [pc, #196]	; (800bd98 <tcp_input+0x4a0>)
 800bcd4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d107      	bne.n	800bcea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bcda:	69f8      	ldr	r0, [r7, #28]
 800bcdc:	f000 fb56 	bl	800c38c <tcp_timewait_input>
        }
        pbuf_free(p);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7fd ffd1 	bl	8009c88 <pbuf_free>
        return;
 800bce6:	e1fd      	b.n	800c0e4 <tcp_input+0x7ec>
        continue;
 800bce8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	61fb      	str	r3, [r7, #28]
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1bc      	bne.n	800bc70 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	; (800bdb8 <tcp_input+0x4c0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	e02a      	b.n	800bd58 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	7a1b      	ldrb	r3, [r3, #8]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00c      	beq.n	800bd24 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	7a1a      	ldrb	r2, [r3, #8]
 800bd0e:	4b22      	ldr	r3, [pc, #136]	; (800bd98 <tcp_input+0x4a0>)
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd16:	3301      	adds	r3, #1
 800bd18:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d002      	beq.n	800bd24 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	61bb      	str	r3, [r7, #24]
        continue;
 800bd22:	e016      	b.n	800bd52 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	8ada      	ldrh	r2, [r3, #22]
 800bd28:	4b1a      	ldr	r3, [pc, #104]	; (800bd94 <tcp_input+0x49c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	885b      	ldrh	r3, [r3, #2]
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d10c      	bne.n	800bd4e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	4b17      	ldr	r3, [pc, #92]	; (800bd98 <tcp_input+0x4a0>)
 800bd3a:	695b      	ldr	r3, [r3, #20]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d00f      	beq.n	800bd60 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00d      	beq.n	800bd62 <tcp_input+0x46a>
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d009      	beq.n	800bd62 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	617b      	str	r3, [r7, #20]
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1d1      	bne.n	800bd02 <tcp_input+0x40a>
 800bd5e:	e000      	b.n	800bd62 <tcp_input+0x46a>
            break;
 800bd60:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d029      	beq.n	800bdbc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	68da      	ldr	r2, [r3, #12]
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bd76:	4b10      	ldr	r3, [pc, #64]	; (800bdb8 <tcp_input+0x4c0>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bd7e:	4a0e      	ldr	r2, [pc, #56]	; (800bdb8 <tcp_input+0x4c0>)
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bd84:	6978      	ldr	r0, [r7, #20]
 800bd86:	f000 fa03 	bl	800c190 <tcp_listen_input>
      }
      pbuf_free(p);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7fd ff7c 	bl	8009c88 <pbuf_free>
      return;
 800bd90:	e1a8      	b.n	800c0e4 <tcp_input+0x7ec>
 800bd92:	bf00      	nop
 800bd94:	2000a710 	.word	0x2000a710
 800bd98:	20007178 	.word	0x20007178
 800bd9c:	08016bfc 	.word	0x08016bfc
 800bda0:	08016d28 	.word	0x08016d28
 800bda4:	08016c48 	.word	0x08016c48
 800bda8:	2000a6f4 	.word	0x2000a6f4
 800bdac:	08016d54 	.word	0x08016d54
 800bdb0:	2000a6f8 	.word	0x2000a6f8
 800bdb4:	08016d80 	.word	0x08016d80
 800bdb8:	2000a6f0 	.word	0x2000a6f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 8158 	beq.w	800c074 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bdc4:	4b95      	ldr	r3, [pc, #596]	; (800c01c <tcp_input+0x724>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	891a      	ldrh	r2, [r3, #8]
 800bdce:	4b93      	ldr	r3, [pc, #588]	; (800c01c <tcp_input+0x724>)
 800bdd0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bdd2:	4a92      	ldr	r2, [pc, #584]	; (800c01c <tcp_input+0x724>)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bdd8:	4b91      	ldr	r3, [pc, #580]	; (800c020 <tcp_input+0x728>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a8f      	ldr	r2, [pc, #572]	; (800c01c <tcp_input+0x724>)
 800bdde:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bde0:	4b90      	ldr	r3, [pc, #576]	; (800c024 <tcp_input+0x72c>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bde6:	4b90      	ldr	r3, [pc, #576]	; (800c028 <tcp_input+0x730>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bdec:	4b8f      	ldr	r3, [pc, #572]	; (800c02c <tcp_input+0x734>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bdf2:	4b8f      	ldr	r3, [pc, #572]	; (800c030 <tcp_input+0x738>)
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	f003 0308 	and.w	r3, r3, #8
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	7b5b      	ldrb	r3, [r3, #13]
 800be02:	f043 0301 	orr.w	r3, r3, #1
 800be06:	b2da      	uxtb	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be10:	2b00      	cmp	r3, #0
 800be12:	d017      	beq.n	800be44 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be14:	69f8      	ldr	r0, [r7, #28]
 800be16:	f7ff f929 	bl	800b06c <tcp_process_refused_data>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f113 0f0d 	cmn.w	r3, #13
 800be20:	d007      	beq.n	800be32 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00c      	beq.n	800be44 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be2a:	4b82      	ldr	r3, [pc, #520]	; (800c034 <tcp_input+0x73c>)
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d008      	beq.n	800be44 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be36:	2b00      	cmp	r3, #0
 800be38:	f040 80e3 	bne.w	800c002 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800be3c:	69f8      	ldr	r0, [r7, #28]
 800be3e:	f003 f9ad 	bl	800f19c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800be42:	e0de      	b.n	800c002 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800be44:	4a7c      	ldr	r2, [pc, #496]	; (800c038 <tcp_input+0x740>)
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800be4a:	69f8      	ldr	r0, [r7, #28]
 800be4c:	f000 fb18 	bl	800c480 <tcp_process>
 800be50:	4603      	mov	r3, r0
 800be52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800be54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be58:	f113 0f0d 	cmn.w	r3, #13
 800be5c:	f000 80d3 	beq.w	800c006 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800be60:	4b71      	ldr	r3, [pc, #452]	; (800c028 <tcp_input+0x730>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	f003 0308 	and.w	r3, r3, #8
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d015      	beq.n	800be98 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be72:	2b00      	cmp	r3, #0
 800be74:	d008      	beq.n	800be88 <tcp_input+0x590>
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be7c:	69fa      	ldr	r2, [r7, #28]
 800be7e:	6912      	ldr	r2, [r2, #16]
 800be80:	f06f 010d 	mvn.w	r1, #13
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800be88:	69f9      	ldr	r1, [r7, #28]
 800be8a:	486c      	ldr	r0, [pc, #432]	; (800c03c <tcp_input+0x744>)
 800be8c:	f7ff fbbc 	bl	800b608 <tcp_pcb_remove>
        tcp_free(pcb);
 800be90:	69f8      	ldr	r0, [r7, #28]
 800be92:	f7fe f9a9 	bl	800a1e8 <tcp_free>
 800be96:	e0da      	b.n	800c04e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800be9c:	4b63      	ldr	r3, [pc, #396]	; (800c02c <tcp_input+0x734>)
 800be9e:	881b      	ldrh	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01d      	beq.n	800bee0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bea4:	4b61      	ldr	r3, [pc, #388]	; (800c02c <tcp_input+0x734>)
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <tcp_input+0x5d2>
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beba:	69fa      	ldr	r2, [r7, #28]
 800bebc:	6910      	ldr	r0, [r2, #16]
 800bebe:	89fa      	ldrh	r2, [r7, #14]
 800bec0:	69f9      	ldr	r1, [r7, #28]
 800bec2:	4798      	blx	r3
 800bec4:	4603      	mov	r3, r0
 800bec6:	74fb      	strb	r3, [r7, #19]
 800bec8:	e001      	b.n	800bece <tcp_input+0x5d6>
 800beca:	2300      	movs	r3, #0
 800becc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bed2:	f113 0f0d 	cmn.w	r3, #13
 800bed6:	f000 8098 	beq.w	800c00a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800beda:	4b54      	ldr	r3, [pc, #336]	; (800c02c <tcp_input+0x734>)
 800bedc:	2200      	movs	r2, #0
 800bede:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bee0:	69f8      	ldr	r0, [r7, #28]
 800bee2:	f000 f915 	bl	800c110 <tcp_input_delayed_close>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 8090 	bne.w	800c00e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800beee:	4b4d      	ldr	r3, [pc, #308]	; (800c024 <tcp_input+0x72c>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d041      	beq.n	800bf7a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800befa:	2b00      	cmp	r3, #0
 800befc:	d006      	beq.n	800bf0c <tcp_input+0x614>
 800befe:	4b50      	ldr	r3, [pc, #320]	; (800c040 <tcp_input+0x748>)
 800bf00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bf04:	494f      	ldr	r1, [pc, #316]	; (800c044 <tcp_input+0x74c>)
 800bf06:	4850      	ldr	r0, [pc, #320]	; (800c048 <tcp_input+0x750>)
 800bf08:	f008 f998 	bl	801423c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	8b5b      	ldrh	r3, [r3, #26]
 800bf10:	f003 0310 	and.w	r3, r3, #16
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d008      	beq.n	800bf2a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bf18:	4b42      	ldr	r3, [pc, #264]	; (800c024 <tcp_input+0x72c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fd feb3 	bl	8009c88 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bf22:	69f8      	ldr	r0, [r7, #28]
 800bf24:	f7fe fc48 	bl	800a7b8 <tcp_abort>
            goto aborted;
 800bf28:	e091      	b.n	800c04e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00c      	beq.n	800bf4e <tcp_input+0x656>
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	6918      	ldr	r0, [r3, #16]
 800bf3e:	4b39      	ldr	r3, [pc, #228]	; (800c024 <tcp_input+0x72c>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	2300      	movs	r3, #0
 800bf44:	69f9      	ldr	r1, [r7, #28]
 800bf46:	47a0      	blx	r4
 800bf48:	4603      	mov	r3, r0
 800bf4a:	74fb      	strb	r3, [r7, #19]
 800bf4c:	e008      	b.n	800bf60 <tcp_input+0x668>
 800bf4e:	4b35      	ldr	r3, [pc, #212]	; (800c024 <tcp_input+0x72c>)
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	2300      	movs	r3, #0
 800bf54:	69f9      	ldr	r1, [r7, #28]
 800bf56:	2000      	movs	r0, #0
 800bf58:	f7ff f95e 	bl	800b218 <tcp_recv_null>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bf60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf64:	f113 0f0d 	cmn.w	r3, #13
 800bf68:	d053      	beq.n	800c012 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bf6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bf72:	4b2c      	ldr	r3, [pc, #176]	; (800c024 <tcp_input+0x72c>)
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bf7a:	4b2b      	ldr	r3, [pc, #172]	; (800c028 <tcp_input+0x730>)
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	f003 0320 	and.w	r3, r3, #32
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d030      	beq.n	800bfe8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf92:	7b5a      	ldrb	r2, [r3, #13]
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf98:	f042 0220 	orr.w	r2, r2, #32
 800bf9c:	b2d2      	uxtb	r2, r2
 800bf9e:	735a      	strb	r2, [r3, #13]
 800bfa0:	e022      	b.n	800bfe8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfa6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bfaa:	d005      	beq.n	800bfb8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <tcp_input+0x6e2>
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	6918      	ldr	r0, [r3, #16]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	2200      	movs	r2, #0
 800bfd0:	69f9      	ldr	r1, [r7, #28]
 800bfd2:	47a0      	blx	r4
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	74fb      	strb	r3, [r7, #19]
 800bfd8:	e001      	b.n	800bfde <tcp_input+0x6e6>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bfde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfe2:	f113 0f0d 	cmn.w	r3, #13
 800bfe6:	d016      	beq.n	800c016 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bfe8:	4b13      	ldr	r3, [pc, #76]	; (800c038 <tcp_input+0x740>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bfee:	69f8      	ldr	r0, [r7, #28]
 800bff0:	f000 f88e 	bl	800c110 <tcp_input_delayed_close>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d128      	bne.n	800c04c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bffa:	69f8      	ldr	r0, [r7, #28]
 800bffc:	f002 fac8 	bl	800e590 <tcp_output>
 800c000:	e025      	b.n	800c04e <tcp_input+0x756>
        goto aborted;
 800c002:	bf00      	nop
 800c004:	e023      	b.n	800c04e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c006:	bf00      	nop
 800c008:	e021      	b.n	800c04e <tcp_input+0x756>
              goto aborted;
 800c00a:	bf00      	nop
 800c00c:	e01f      	b.n	800c04e <tcp_input+0x756>
          goto aborted;
 800c00e:	bf00      	nop
 800c010:	e01d      	b.n	800c04e <tcp_input+0x756>
            goto aborted;
 800c012:	bf00      	nop
 800c014:	e01b      	b.n	800c04e <tcp_input+0x756>
              goto aborted;
 800c016:	bf00      	nop
 800c018:	e019      	b.n	800c04e <tcp_input+0x756>
 800c01a:	bf00      	nop
 800c01c:	2000a700 	.word	0x2000a700
 800c020:	2000a710 	.word	0x2000a710
 800c024:	2000a730 	.word	0x2000a730
 800c028:	2000a72d 	.word	0x2000a72d
 800c02c:	2000a728 	.word	0x2000a728
 800c030:	2000a72c 	.word	0x2000a72c
 800c034:	2000a72a 	.word	0x2000a72a
 800c038:	2000a734 	.word	0x2000a734
 800c03c:	2000a6f4 	.word	0x2000a6f4
 800c040:	08016bfc 	.word	0x08016bfc
 800c044:	08016db0 	.word	0x08016db0
 800c048:	08016c48 	.word	0x08016c48
          goto aborted;
 800c04c:	bf00      	nop
    tcp_input_pcb = NULL;
 800c04e:	4b27      	ldr	r3, [pc, #156]	; (800c0ec <tcp_input+0x7f4>)
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c054:	4b26      	ldr	r3, [pc, #152]	; (800c0f0 <tcp_input+0x7f8>)
 800c056:	2200      	movs	r2, #0
 800c058:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c05a:	4b26      	ldr	r3, [pc, #152]	; (800c0f4 <tcp_input+0x7fc>)
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d03f      	beq.n	800c0e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c062:	4b24      	ldr	r3, [pc, #144]	; (800c0f4 <tcp_input+0x7fc>)
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	4618      	mov	r0, r3
 800c068:	f7fd fe0e 	bl	8009c88 <pbuf_free>
      inseg.p = NULL;
 800c06c:	4b21      	ldr	r3, [pc, #132]	; (800c0f4 <tcp_input+0x7fc>)
 800c06e:	2200      	movs	r2, #0
 800c070:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c072:	e036      	b.n	800c0e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c074:	4b20      	ldr	r3, [pc, #128]	; (800c0f8 <tcp_input+0x800>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	899b      	ldrh	r3, [r3, #12]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fc fb4f 	bl	8008720 <lwip_htons>
 800c082:	4603      	mov	r3, r0
 800c084:	b2db      	uxtb	r3, r3
 800c086:	f003 0304 	and.w	r3, r3, #4
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d118      	bne.n	800c0c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c08e:	4b1b      	ldr	r3, [pc, #108]	; (800c0fc <tcp_input+0x804>)
 800c090:	6819      	ldr	r1, [r3, #0]
 800c092:	4b1b      	ldr	r3, [pc, #108]	; (800c100 <tcp_input+0x808>)
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	4b1a      	ldr	r3, [pc, #104]	; (800c104 <tcp_input+0x80c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c09e:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <tcp_input+0x800>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0a2:	885b      	ldrh	r3, [r3, #2]
 800c0a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0a6:	4a14      	ldr	r2, [pc, #80]	; (800c0f8 <tcp_input+0x800>)
 800c0a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0aa:	8812      	ldrh	r2, [r2, #0]
 800c0ac:	b292      	uxth	r2, r2
 800c0ae:	9202      	str	r2, [sp, #8]
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	4b15      	ldr	r3, [pc, #84]	; (800c108 <tcp_input+0x810>)
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	4b15      	ldr	r3, [pc, #84]	; (800c10c <tcp_input+0x814>)
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	f003 f81c 	bl	800f0f8 <tcp_rst>
    pbuf_free(p);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7fd fde1 	bl	8009c88 <pbuf_free>
  return;
 800c0c6:	e00c      	b.n	800c0e2 <tcp_input+0x7ea>
    goto dropped;
 800c0c8:	bf00      	nop
 800c0ca:	e006      	b.n	800c0da <tcp_input+0x7e2>
    goto dropped;
 800c0cc:	bf00      	nop
 800c0ce:	e004      	b.n	800c0da <tcp_input+0x7e2>
    goto dropped;
 800c0d0:	bf00      	nop
 800c0d2:	e002      	b.n	800c0da <tcp_input+0x7e2>
      goto dropped;
 800c0d4:	bf00      	nop
 800c0d6:	e000      	b.n	800c0da <tcp_input+0x7e2>
      goto dropped;
 800c0d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7fd fdd4 	bl	8009c88 <pbuf_free>
 800c0e0:	e000      	b.n	800c0e4 <tcp_input+0x7ec>
  return;
 800c0e2:	bf00      	nop
}
 800c0e4:	3724      	adds	r7, #36	; 0x24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd90      	pop	{r4, r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	2000a734 	.word	0x2000a734
 800c0f0:	2000a730 	.word	0x2000a730
 800c0f4:	2000a700 	.word	0x2000a700
 800c0f8:	2000a710 	.word	0x2000a710
 800c0fc:	2000a724 	.word	0x2000a724
 800c100:	2000a72a 	.word	0x2000a72a
 800c104:	2000a720 	.word	0x2000a720
 800c108:	20007188 	.word	0x20007188
 800c10c:	2000718c 	.word	0x2000718c

0800c110 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d106      	bne.n	800c12c <tcp_input_delayed_close+0x1c>
 800c11e:	4b17      	ldr	r3, [pc, #92]	; (800c17c <tcp_input_delayed_close+0x6c>)
 800c120:	f240 225a 	movw	r2, #602	; 0x25a
 800c124:	4916      	ldr	r1, [pc, #88]	; (800c180 <tcp_input_delayed_close+0x70>)
 800c126:	4817      	ldr	r0, [pc, #92]	; (800c184 <tcp_input_delayed_close+0x74>)
 800c128:	f008 f888 	bl	801423c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c12c:	4b16      	ldr	r3, [pc, #88]	; (800c188 <tcp_input_delayed_close+0x78>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	f003 0310 	and.w	r3, r3, #16
 800c134:	2b00      	cmp	r3, #0
 800c136:	d01c      	beq.n	800c172 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	8b5b      	ldrh	r3, [r3, #26]
 800c13c:	f003 0310 	and.w	r3, r3, #16
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10d      	bne.n	800c160 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d008      	beq.n	800c160 <tcp_input_delayed_close+0x50>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	6912      	ldr	r2, [r2, #16]
 800c158:	f06f 010e 	mvn.w	r1, #14
 800c15c:	4610      	mov	r0, r2
 800c15e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	480a      	ldr	r0, [pc, #40]	; (800c18c <tcp_input_delayed_close+0x7c>)
 800c164:	f7ff fa50 	bl	800b608 <tcp_pcb_remove>
    tcp_free(pcb);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7fe f83d 	bl	800a1e8 <tcp_free>
    return 1;
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	08016bfc 	.word	0x08016bfc
 800c180:	08016dcc 	.word	0x08016dcc
 800c184:	08016c48 	.word	0x08016c48
 800c188:	2000a72d 	.word	0x2000a72d
 800c18c:	2000a6f4 	.word	0x2000a6f4

0800c190 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c190:	b590      	push	{r4, r7, lr}
 800c192:	b08b      	sub	sp, #44	; 0x2c
 800c194:	af04      	add	r7, sp, #16
 800c196:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c198:	4b6f      	ldr	r3, [pc, #444]	; (800c358 <tcp_listen_input+0x1c8>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	f003 0304 	and.w	r3, r3, #4
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 80d2 	bne.w	800c34a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d106      	bne.n	800c1ba <tcp_listen_input+0x2a>
 800c1ac:	4b6b      	ldr	r3, [pc, #428]	; (800c35c <tcp_listen_input+0x1cc>)
 800c1ae:	f240 2281 	movw	r2, #641	; 0x281
 800c1b2:	496b      	ldr	r1, [pc, #428]	; (800c360 <tcp_listen_input+0x1d0>)
 800c1b4:	486b      	ldr	r0, [pc, #428]	; (800c364 <tcp_listen_input+0x1d4>)
 800c1b6:	f008 f841 	bl	801423c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c1ba:	4b67      	ldr	r3, [pc, #412]	; (800c358 <tcp_listen_input+0x1c8>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	f003 0310 	and.w	r3, r3, #16
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d019      	beq.n	800c1fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1c6:	4b68      	ldr	r3, [pc, #416]	; (800c368 <tcp_listen_input+0x1d8>)
 800c1c8:	6819      	ldr	r1, [r3, #0]
 800c1ca:	4b68      	ldr	r3, [pc, #416]	; (800c36c <tcp_listen_input+0x1dc>)
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	4b67      	ldr	r3, [pc, #412]	; (800c370 <tcp_listen_input+0x1e0>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1d6:	4b67      	ldr	r3, [pc, #412]	; (800c374 <tcp_listen_input+0x1e4>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1da:	885b      	ldrh	r3, [r3, #2]
 800c1dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1de:	4a65      	ldr	r2, [pc, #404]	; (800c374 <tcp_listen_input+0x1e4>)
 800c1e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1e2:	8812      	ldrh	r2, [r2, #0]
 800c1e4:	b292      	uxth	r2, r2
 800c1e6:	9202      	str	r2, [sp, #8]
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	4b63      	ldr	r3, [pc, #396]	; (800c378 <tcp_listen_input+0x1e8>)
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	4b63      	ldr	r3, [pc, #396]	; (800c37c <tcp_listen_input+0x1ec>)
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f002 ff80 	bl	800f0f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c1f8:	e0a9      	b.n	800c34e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c1fa:	4b57      	ldr	r3, [pc, #348]	; (800c358 <tcp_listen_input+0x1c8>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	f003 0302 	and.w	r3, r3, #2
 800c202:	2b00      	cmp	r3, #0
 800c204:	f000 80a3 	beq.w	800c34e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	7d5b      	ldrb	r3, [r3, #21]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7ff f927 	bl	800b460 <tcp_alloc>
 800c212:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d111      	bne.n	800c23e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00a      	beq.n	800c238 <tcp_listen_input+0xa8>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	6910      	ldr	r0, [r2, #16]
 800c22a:	f04f 32ff 	mov.w	r2, #4294967295
 800c22e:	2100      	movs	r1, #0
 800c230:	4798      	blx	r3
 800c232:	4603      	mov	r3, r0
 800c234:	73bb      	strb	r3, [r7, #14]
      return;
 800c236:	e08b      	b.n	800c350 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c238:	23f0      	movs	r3, #240	; 0xf0
 800c23a:	73bb      	strb	r3, [r7, #14]
      return;
 800c23c:	e088      	b.n	800c350 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c23e:	4b50      	ldr	r3, [pc, #320]	; (800c380 <tcp_listen_input+0x1f0>)
 800c240:	695a      	ldr	r2, [r3, #20]
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c246:	4b4e      	ldr	r3, [pc, #312]	; (800c380 <tcp_listen_input+0x1f0>)
 800c248:	691a      	ldr	r2, [r3, #16]
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8ada      	ldrh	r2, [r3, #22]
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c256:	4b47      	ldr	r3, [pc, #284]	; (800c374 <tcp_listen_input+0x1e4>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2203      	movs	r2, #3
 800c266:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c268:	4b41      	ldr	r3, [pc, #260]	; (800c370 <tcp_listen_input+0x1e0>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	1c5a      	adds	r2, r3, #1
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c27a:	6978      	ldr	r0, [r7, #20]
 800c27c:	f7ff fa58 	bl	800b730 <tcp_next_iss>
 800c280:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	693a      	ldr	r2, [r7, #16]
 800c28c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c29a:	4b35      	ldr	r3, [pc, #212]	; (800c370 <tcp_listen_input+0x1e0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	1e5a      	subs	r2, r3, #1
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	691a      	ldr	r2, [r3, #16]
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	7a5b      	ldrb	r3, [r3, #9]
 800c2b6:	f003 030c 	and.w	r3, r3, #12
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7a1a      	ldrb	r2, [r3, #8]
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c2c8:	4b2e      	ldr	r3, [pc, #184]	; (800c384 <tcp_listen_input+0x1f4>)
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	60da      	str	r2, [r3, #12]
 800c2d0:	4a2c      	ldr	r2, [pc, #176]	; (800c384 <tcp_listen_input+0x1f4>)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	f003 f8d1 	bl	800f47c <tcp_timer_needed>
 800c2da:	4b2b      	ldr	r3, [pc, #172]	; (800c388 <tcp_listen_input+0x1f8>)
 800c2dc:	2201      	movs	r2, #1
 800c2de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c2e0:	6978      	ldr	r0, [r7, #20]
 800c2e2:	f001 fd8f 	bl	800de04 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c2e6:	4b23      	ldr	r3, [pc, #140]	; (800c374 <tcp_listen_input+0x1e4>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	89db      	ldrh	r3, [r3, #14]
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	3304      	adds	r3, #4
 800c308:	4618      	mov	r0, r3
 800c30a:	f004 ff77 	bl	80111fc <ip4_route>
 800c30e:	4601      	mov	r1, r0
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	3304      	adds	r3, #4
 800c314:	461a      	mov	r2, r3
 800c316:	4620      	mov	r0, r4
 800c318:	f7ff fa30 	bl	800b77c <tcp_eff_send_mss_netif>
 800c31c:	4603      	mov	r3, r0
 800c31e:	461a      	mov	r2, r3
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c324:	2112      	movs	r1, #18
 800c326:	6978      	ldr	r0, [r7, #20]
 800c328:	f002 f844 	bl	800e3b4 <tcp_enqueue_flags>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c338:	2100      	movs	r1, #0
 800c33a:	6978      	ldr	r0, [r7, #20]
 800c33c:	f7fe f97e 	bl	800a63c <tcp_abandon>
      return;
 800c340:	e006      	b.n	800c350 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c342:	6978      	ldr	r0, [r7, #20]
 800c344:	f002 f924 	bl	800e590 <tcp_output>
  return;
 800c348:	e001      	b.n	800c34e <tcp_listen_input+0x1be>
    return;
 800c34a:	bf00      	nop
 800c34c:	e000      	b.n	800c350 <tcp_listen_input+0x1c0>
  return;
 800c34e:	bf00      	nop
}
 800c350:	371c      	adds	r7, #28
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}
 800c356:	bf00      	nop
 800c358:	2000a72c 	.word	0x2000a72c
 800c35c:	08016bfc 	.word	0x08016bfc
 800c360:	08016df4 	.word	0x08016df4
 800c364:	08016c48 	.word	0x08016c48
 800c368:	2000a724 	.word	0x2000a724
 800c36c:	2000a72a 	.word	0x2000a72a
 800c370:	2000a720 	.word	0x2000a720
 800c374:	2000a710 	.word	0x2000a710
 800c378:	20007188 	.word	0x20007188
 800c37c:	2000718c 	.word	0x2000718c
 800c380:	20007178 	.word	0x20007178
 800c384:	2000a6f4 	.word	0x2000a6f4
 800c388:	2000a6fc 	.word	0x2000a6fc

0800c38c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af04      	add	r7, sp, #16
 800c392:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c394:	4b2f      	ldr	r3, [pc, #188]	; (800c454 <tcp_timewait_input+0xc8>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	f003 0304 	and.w	r3, r3, #4
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d153      	bne.n	800c448 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d106      	bne.n	800c3b4 <tcp_timewait_input+0x28>
 800c3a6:	4b2c      	ldr	r3, [pc, #176]	; (800c458 <tcp_timewait_input+0xcc>)
 800c3a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c3ac:	492b      	ldr	r1, [pc, #172]	; (800c45c <tcp_timewait_input+0xd0>)
 800c3ae:	482c      	ldr	r0, [pc, #176]	; (800c460 <tcp_timewait_input+0xd4>)
 800c3b0:	f007 ff44 	bl	801423c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c3b4:	4b27      	ldr	r3, [pc, #156]	; (800c454 <tcp_timewait_input+0xc8>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f003 0302 	and.w	r3, r3, #2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d02a      	beq.n	800c416 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c3c0:	4b28      	ldr	r3, [pc, #160]	; (800c464 <tcp_timewait_input+0xd8>)
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	db2d      	blt.n	800c42a <tcp_timewait_input+0x9e>
 800c3ce:	4b25      	ldr	r3, [pc, #148]	; (800c464 <tcp_timewait_input+0xd8>)
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c3da:	440b      	add	r3, r1
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	dc23      	bgt.n	800c42a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3e2:	4b21      	ldr	r3, [pc, #132]	; (800c468 <tcp_timewait_input+0xdc>)
 800c3e4:	6819      	ldr	r1, [r3, #0]
 800c3e6:	4b21      	ldr	r3, [pc, #132]	; (800c46c <tcp_timewait_input+0xe0>)
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	4b1d      	ldr	r3, [pc, #116]	; (800c464 <tcp_timewait_input+0xd8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3f2:	4b1f      	ldr	r3, [pc, #124]	; (800c470 <tcp_timewait_input+0xe4>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3f6:	885b      	ldrh	r3, [r3, #2]
 800c3f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3fa:	4a1d      	ldr	r2, [pc, #116]	; (800c470 <tcp_timewait_input+0xe4>)
 800c3fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3fe:	8812      	ldrh	r2, [r2, #0]
 800c400:	b292      	uxth	r2, r2
 800c402:	9202      	str	r2, [sp, #8]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	4b1b      	ldr	r3, [pc, #108]	; (800c474 <tcp_timewait_input+0xe8>)
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	4b1b      	ldr	r3, [pc, #108]	; (800c478 <tcp_timewait_input+0xec>)
 800c40c:	4602      	mov	r2, r0
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f002 fe72 	bl	800f0f8 <tcp_rst>
      return;
 800c414:	e01b      	b.n	800c44e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c416:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <tcp_timewait_input+0xc8>)
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d003      	beq.n	800c42a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c422:	4b16      	ldr	r3, [pc, #88]	; (800c47c <tcp_timewait_input+0xf0>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c42a:	4b10      	ldr	r3, [pc, #64]	; (800c46c <tcp_timewait_input+0xe0>)
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	8b5b      	ldrh	r3, [r3, #26]
 800c436:	f043 0302 	orr.w	r3, r3, #2
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f002 f8a5 	bl	800e590 <tcp_output>
  }
  return;
 800c446:	e001      	b.n	800c44c <tcp_timewait_input+0xc0>
    return;
 800c448:	bf00      	nop
 800c44a:	e000      	b.n	800c44e <tcp_timewait_input+0xc2>
  return;
 800c44c:	bf00      	nop
}
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	2000a72c 	.word	0x2000a72c
 800c458:	08016bfc 	.word	0x08016bfc
 800c45c:	08016e14 	.word	0x08016e14
 800c460:	08016c48 	.word	0x08016c48
 800c464:	2000a720 	.word	0x2000a720
 800c468:	2000a724 	.word	0x2000a724
 800c46c:	2000a72a 	.word	0x2000a72a
 800c470:	2000a710 	.word	0x2000a710
 800c474:	20007188 	.word	0x20007188
 800c478:	2000718c 	.word	0x2000718c
 800c47c:	2000a6e8 	.word	0x2000a6e8

0800c480 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c480:	b590      	push	{r4, r7, lr}
 800c482:	b08d      	sub	sp, #52	; 0x34
 800c484:	af04      	add	r7, sp, #16
 800c486:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d106      	bne.n	800c4a4 <tcp_process+0x24>
 800c496:	4b9d      	ldr	r3, [pc, #628]	; (800c70c <tcp_process+0x28c>)
 800c498:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c49c:	499c      	ldr	r1, [pc, #624]	; (800c710 <tcp_process+0x290>)
 800c49e:	489d      	ldr	r0, [pc, #628]	; (800c714 <tcp_process+0x294>)
 800c4a0:	f007 fecc 	bl	801423c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c4a4:	4b9c      	ldr	r3, [pc, #624]	; (800c718 <tcp_process+0x298>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	f003 0304 	and.w	r3, r3, #4
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d04e      	beq.n	800c54e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7d1b      	ldrb	r3, [r3, #20]
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d108      	bne.n	800c4ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4bc:	4b97      	ldr	r3, [pc, #604]	; (800c71c <tcp_process+0x29c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d123      	bne.n	800c50c <tcp_process+0x8c>
        acceptable = 1;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	76fb      	strb	r3, [r7, #27]
 800c4c8:	e020      	b.n	800c50c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4ce:	4b94      	ldr	r3, [pc, #592]	; (800c720 <tcp_process+0x2a0>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d102      	bne.n	800c4dc <tcp_process+0x5c>
        acceptable = 1;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	76fb      	strb	r3, [r7, #27]
 800c4da:	e017      	b.n	800c50c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c4dc:	4b90      	ldr	r3, [pc, #576]	; (800c720 <tcp_process+0x2a0>)
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	db10      	blt.n	800c50c <tcp_process+0x8c>
 800c4ea:	4b8d      	ldr	r3, [pc, #564]	; (800c720 <tcp_process+0x2a0>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c4f6:	440b      	add	r3, r1
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	dc06      	bgt.n	800c50c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	8b5b      	ldrh	r3, [r3, #26]
 800c502:	f043 0302 	orr.w	r3, r3, #2
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c50c:	7efb      	ldrb	r3, [r7, #27]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d01b      	beq.n	800c54a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	7d1b      	ldrb	r3, [r3, #20]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <tcp_process+0xa8>
 800c51a:	4b7c      	ldr	r3, [pc, #496]	; (800c70c <tcp_process+0x28c>)
 800c51c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c520:	4980      	ldr	r1, [pc, #512]	; (800c724 <tcp_process+0x2a4>)
 800c522:	487c      	ldr	r0, [pc, #496]	; (800c714 <tcp_process+0x294>)
 800c524:	f007 fe8a 	bl	801423c <iprintf>
      recv_flags |= TF_RESET;
 800c528:	4b7f      	ldr	r3, [pc, #508]	; (800c728 <tcp_process+0x2a8>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	f043 0308 	orr.w	r3, r3, #8
 800c530:	b2da      	uxtb	r2, r3
 800c532:	4b7d      	ldr	r3, [pc, #500]	; (800c728 <tcp_process+0x2a8>)
 800c534:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	8b5b      	ldrh	r3, [r3, #26]
 800c53a:	f023 0301 	bic.w	r3, r3, #1
 800c53e:	b29a      	uxth	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c544:	f06f 030d 	mvn.w	r3, #13
 800c548:	e37a      	b.n	800cc40 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	e378      	b.n	800cc40 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c54e:	4b72      	ldr	r3, [pc, #456]	; (800c718 <tcp_process+0x298>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d010      	beq.n	800c57c <tcp_process+0xfc>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7d1b      	ldrb	r3, [r3, #20]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d00c      	beq.n	800c57c <tcp_process+0xfc>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7d1b      	ldrb	r3, [r3, #20]
 800c566:	2b03      	cmp	r3, #3
 800c568:	d008      	beq.n	800c57c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	8b5b      	ldrh	r3, [r3, #26]
 800c56e:	f043 0302 	orr.w	r3, r3, #2
 800c572:	b29a      	uxth	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c578:	2300      	movs	r3, #0
 800c57a:	e361      	b.n	800cc40 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	8b5b      	ldrh	r3, [r3, #26]
 800c580:	f003 0310 	and.w	r3, r3, #16
 800c584:	2b00      	cmp	r3, #0
 800c586:	d103      	bne.n	800c590 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c588:	4b68      	ldr	r3, [pc, #416]	; (800c72c <tcp_process+0x2ac>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f001 fc2f 	bl	800de04 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	7d1b      	ldrb	r3, [r3, #20]
 800c5aa:	3b02      	subs	r3, #2
 800c5ac:	2b07      	cmp	r3, #7
 800c5ae:	f200 8337 	bhi.w	800cc20 <tcp_process+0x7a0>
 800c5b2:	a201      	add	r2, pc, #4	; (adr r2, 800c5b8 <tcp_process+0x138>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c5d9 	.word	0x0800c5d9
 800c5bc:	0800c809 	.word	0x0800c809
 800c5c0:	0800c981 	.word	0x0800c981
 800c5c4:	0800c9ab 	.word	0x0800c9ab
 800c5c8:	0800cacf 	.word	0x0800cacf
 800c5cc:	0800c981 	.word	0x0800c981
 800c5d0:	0800cb5b 	.word	0x0800cb5b
 800c5d4:	0800cbeb 	.word	0x0800cbeb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c5d8:	4b4f      	ldr	r3, [pc, #316]	; (800c718 <tcp_process+0x298>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	f003 0310 	and.w	r3, r3, #16
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 80e4 	beq.w	800c7ae <tcp_process+0x32e>
 800c5e6:	4b4c      	ldr	r3, [pc, #304]	; (800c718 <tcp_process+0x298>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 0302 	and.w	r3, r3, #2
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 80dd 	beq.w	800c7ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	4b48      	ldr	r3, [pc, #288]	; (800c71c <tcp_process+0x29c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	f040 80d5 	bne.w	800c7ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c604:	4b46      	ldr	r3, [pc, #280]	; (800c720 <tcp_process+0x2a0>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	1c5a      	adds	r2, r3, #1
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c616:	4b41      	ldr	r3, [pc, #260]	; (800c71c <tcp_process+0x29c>)
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c61e:	4b44      	ldr	r3, [pc, #272]	; (800c730 <tcp_process+0x2b0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	89db      	ldrh	r3, [r3, #14]
 800c624:	b29a      	uxth	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c638:	4b39      	ldr	r3, [pc, #228]	; (800c720 <tcp_process+0x2a0>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	1e5a      	subs	r2, r3, #1
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2204      	movs	r2, #4
 800c646:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3304      	adds	r3, #4
 800c650:	4618      	mov	r0, r3
 800c652:	f004 fdd3 	bl	80111fc <ip4_route>
 800c656:	4601      	mov	r1, r0
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3304      	adds	r3, #4
 800c65c:	461a      	mov	r2, r3
 800c65e:	4620      	mov	r0, r4
 800c660:	f7ff f88c 	bl	800b77c <tcp_eff_send_mss_netif>
 800c664:	4603      	mov	r3, r0
 800c666:	461a      	mov	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c670:	009a      	lsls	r2, r3, #2
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	f241 111c 	movw	r1, #4380	; 0x111c
 800c67c:	428b      	cmp	r3, r1
 800c67e:	bf38      	it	cc
 800c680:	460b      	movcc	r3, r1
 800c682:	429a      	cmp	r2, r3
 800c684:	d204      	bcs.n	800c690 <tcp_process+0x210>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	e00d      	b.n	800c6ac <tcp_process+0x22c>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	f241 121c 	movw	r2, #4380	; 0x111c
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d904      	bls.n	800c6a8 <tcp_process+0x228>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	e001      	b.n	800c6ac <tcp_process+0x22c>
 800c6a8:	f241 131c 	movw	r3, #4380	; 0x111c
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <tcp_process+0x24a>
 800c6bc:	4b13      	ldr	r3, [pc, #76]	; (800c70c <tcp_process+0x28c>)
 800c6be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c6c2:	491c      	ldr	r1, [pc, #112]	; (800c734 <tcp_process+0x2b4>)
 800c6c4:	4813      	ldr	r0, [pc, #76]	; (800c714 <tcp_process+0x294>)
 800c6c6:	f007 fdb9 	bl	801423c <iprintf>
        --pcb->snd_queuelen;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d12a      	bne.n	800c73c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d106      	bne.n	800c700 <tcp_process+0x280>
 800c6f2:	4b06      	ldr	r3, [pc, #24]	; (800c70c <tcp_process+0x28c>)
 800c6f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c6f8:	490f      	ldr	r1, [pc, #60]	; (800c738 <tcp_process+0x2b8>)
 800c6fa:	4806      	ldr	r0, [pc, #24]	; (800c714 <tcp_process+0x294>)
 800c6fc:	f007 fd9e 	bl	801423c <iprintf>
          pcb->unsent = rseg->next;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	66da      	str	r2, [r3, #108]	; 0x6c
 800c708:	e01c      	b.n	800c744 <tcp_process+0x2c4>
 800c70a:	bf00      	nop
 800c70c:	08016bfc 	.word	0x08016bfc
 800c710:	08016e34 	.word	0x08016e34
 800c714:	08016c48 	.word	0x08016c48
 800c718:	2000a72c 	.word	0x2000a72c
 800c71c:	2000a724 	.word	0x2000a724
 800c720:	2000a720 	.word	0x2000a720
 800c724:	08016e50 	.word	0x08016e50
 800c728:	2000a72d 	.word	0x2000a72d
 800c72c:	2000a6e8 	.word	0x2000a6e8
 800c730:	2000a710 	.word	0x2000a710
 800c734:	08016e70 	.word	0x08016e70
 800c738:	08016e88 	.word	0x08016e88
        } else {
          pcb->unacked = rseg->next;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c744:	69f8      	ldr	r0, [r7, #28]
 800c746:	f7fe fd22 	bl	800b18e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d104      	bne.n	800c75c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c758:	861a      	strh	r2, [r3, #48]	; 0x30
 800c75a:	e006      	b.n	800c76a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00a      	beq.n	800c78a <tcp_process+0x30a>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6910      	ldr	r0, [r2, #16]
 800c77e:	2200      	movs	r2, #0
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	4798      	blx	r3
 800c784:	4603      	mov	r3, r0
 800c786:	76bb      	strb	r3, [r7, #26]
 800c788:	e001      	b.n	800c78e <tcp_process+0x30e>
 800c78a:	2300      	movs	r3, #0
 800c78c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c78e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c792:	f113 0f0d 	cmn.w	r3, #13
 800c796:	d102      	bne.n	800c79e <tcp_process+0x31e>
          return ERR_ABRT;
 800c798:	f06f 030c 	mvn.w	r3, #12
 800c79c:	e250      	b.n	800cc40 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	8b5b      	ldrh	r3, [r3, #26]
 800c7a2:	f043 0302 	orr.w	r3, r3, #2
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c7ac:	e23a      	b.n	800cc24 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c7ae:	4b98      	ldr	r3, [pc, #608]	; (800ca10 <tcp_process+0x590>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 0310 	and.w	r3, r3, #16
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f000 8234 	beq.w	800cc24 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7bc:	4b95      	ldr	r3, [pc, #596]	; (800ca14 <tcp_process+0x594>)
 800c7be:	6819      	ldr	r1, [r3, #0]
 800c7c0:	4b95      	ldr	r3, [pc, #596]	; (800ca18 <tcp_process+0x598>)
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	4b95      	ldr	r3, [pc, #596]	; (800ca1c <tcp_process+0x59c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7cc:	4b94      	ldr	r3, [pc, #592]	; (800ca20 <tcp_process+0x5a0>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7d0:	885b      	ldrh	r3, [r3, #2]
 800c7d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7d4:	4a92      	ldr	r2, [pc, #584]	; (800ca20 <tcp_process+0x5a0>)
 800c7d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7d8:	8812      	ldrh	r2, [r2, #0]
 800c7da:	b292      	uxth	r2, r2
 800c7dc:	9202      	str	r2, [sp, #8]
 800c7de:	9301      	str	r3, [sp, #4]
 800c7e0:	4b90      	ldr	r3, [pc, #576]	; (800ca24 <tcp_process+0x5a4>)
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	4b90      	ldr	r3, [pc, #576]	; (800ca28 <tcp_process+0x5a8>)
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f002 fc85 	bl	800f0f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7f4:	2b05      	cmp	r3, #5
 800c7f6:	f200 8215 	bhi.w	800cc24 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f002 fa4f 	bl	800eca4 <tcp_rexmit_rto>
      break;
 800c806:	e20d      	b.n	800cc24 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c808:	4b81      	ldr	r3, [pc, #516]	; (800ca10 <tcp_process+0x590>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	f003 0310 	and.w	r3, r3, #16
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 80a1 	beq.w	800c958 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c816:	4b7f      	ldr	r3, [pc, #508]	; (800ca14 <tcp_process+0x594>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	3b01      	subs	r3, #1
 800c822:	2b00      	cmp	r3, #0
 800c824:	db7e      	blt.n	800c924 <tcp_process+0x4a4>
 800c826:	4b7b      	ldr	r3, [pc, #492]	; (800ca14 <tcp_process+0x594>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	2b00      	cmp	r3, #0
 800c832:	dc77      	bgt.n	800c924 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2204      	movs	r2, #4
 800c838:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d102      	bne.n	800c848 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c842:	23fa      	movs	r3, #250	; 0xfa
 800c844:	76bb      	strb	r3, [r7, #26]
 800c846:	e01d      	b.n	800c884 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d106      	bne.n	800c860 <tcp_process+0x3e0>
 800c852:	4b76      	ldr	r3, [pc, #472]	; (800ca2c <tcp_process+0x5ac>)
 800c854:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c858:	4975      	ldr	r1, [pc, #468]	; (800ca30 <tcp_process+0x5b0>)
 800c85a:	4876      	ldr	r0, [pc, #472]	; (800ca34 <tcp_process+0x5b4>)
 800c85c:	f007 fcee 	bl	801423c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00a      	beq.n	800c880 <tcp_process+0x400>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6910      	ldr	r0, [r2, #16]
 800c874:	2200      	movs	r2, #0
 800c876:	6879      	ldr	r1, [r7, #4]
 800c878:	4798      	blx	r3
 800c87a:	4603      	mov	r3, r0
 800c87c:	76bb      	strb	r3, [r7, #26]
 800c87e:	e001      	b.n	800c884 <tcp_process+0x404>
 800c880:	23f0      	movs	r3, #240	; 0xf0
 800c882:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c884:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00a      	beq.n	800c8a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c88c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c890:	f113 0f0d 	cmn.w	r3, #13
 800c894:	d002      	beq.n	800c89c <tcp_process+0x41c>
              tcp_abort(pcb);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f7fd ff8e 	bl	800a7b8 <tcp_abort>
            }
            return ERR_ABRT;
 800c89c:	f06f 030c 	mvn.w	r3, #12
 800c8a0:	e1ce      	b.n	800cc40 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 fae0 	bl	800ce68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c8a8:	4b63      	ldr	r3, [pc, #396]	; (800ca38 <tcp_process+0x5b8>)
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <tcp_process+0x43c>
            recv_acked--;
 800c8b0:	4b61      	ldr	r3, [pc, #388]	; (800ca38 <tcp_process+0x5b8>)
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	4b5f      	ldr	r3, [pc, #380]	; (800ca38 <tcp_process+0x5b8>)
 800c8ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8c0:	009a      	lsls	r2, r3, #2
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	f241 111c 	movw	r1, #4380	; 0x111c
 800c8cc:	428b      	cmp	r3, r1
 800c8ce:	bf38      	it	cc
 800c8d0:	460b      	movcc	r3, r1
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d204      	bcs.n	800c8e0 <tcp_process+0x460>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	e00d      	b.n	800c8fc <tcp_process+0x47c>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	f241 121c 	movw	r2, #4380	; 0x111c
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d904      	bls.n	800c8f8 <tcp_process+0x478>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	e001      	b.n	800c8fc <tcp_process+0x47c>
 800c8f8:	f241 131c 	movw	r3, #4380	; 0x111c
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c902:	4b4e      	ldr	r3, [pc, #312]	; (800ca3c <tcp_process+0x5bc>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	f003 0320 	and.w	r3, r3, #32
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d037      	beq.n	800c97e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	8b5b      	ldrh	r3, [r3, #26]
 800c912:	f043 0302 	orr.w	r3, r3, #2
 800c916:	b29a      	uxth	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2207      	movs	r2, #7
 800c920:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c922:	e02c      	b.n	800c97e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c924:	4b3b      	ldr	r3, [pc, #236]	; (800ca14 <tcp_process+0x594>)
 800c926:	6819      	ldr	r1, [r3, #0]
 800c928:	4b3b      	ldr	r3, [pc, #236]	; (800ca18 <tcp_process+0x598>)
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	461a      	mov	r2, r3
 800c92e:	4b3b      	ldr	r3, [pc, #236]	; (800ca1c <tcp_process+0x59c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c934:	4b3a      	ldr	r3, [pc, #232]	; (800ca20 <tcp_process+0x5a0>)
 800c936:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c938:	885b      	ldrh	r3, [r3, #2]
 800c93a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c93c:	4a38      	ldr	r2, [pc, #224]	; (800ca20 <tcp_process+0x5a0>)
 800c93e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c940:	8812      	ldrh	r2, [r2, #0]
 800c942:	b292      	uxth	r2, r2
 800c944:	9202      	str	r2, [sp, #8]
 800c946:	9301      	str	r3, [sp, #4]
 800c948:	4b36      	ldr	r3, [pc, #216]	; (800ca24 <tcp_process+0x5a4>)
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	4b36      	ldr	r3, [pc, #216]	; (800ca28 <tcp_process+0x5a8>)
 800c94e:	4602      	mov	r2, r0
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f002 fbd1 	bl	800f0f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c956:	e167      	b.n	800cc28 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c958:	4b2d      	ldr	r3, [pc, #180]	; (800ca10 <tcp_process+0x590>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 8161 	beq.w	800cc28 <tcp_process+0x7a8>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	1e5a      	subs	r2, r3, #1
 800c96c:	4b2b      	ldr	r3, [pc, #172]	; (800ca1c <tcp_process+0x59c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	429a      	cmp	r2, r3
 800c972:	f040 8159 	bne.w	800cc28 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f002 f9b6 	bl	800ece8 <tcp_rexmit>
      break;
 800c97c:	e154      	b.n	800cc28 <tcp_process+0x7a8>
 800c97e:	e153      	b.n	800cc28 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fa71 	bl	800ce68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c986:	4b2d      	ldr	r3, [pc, #180]	; (800ca3c <tcp_process+0x5bc>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	f003 0320 	and.w	r3, r3, #32
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f000 814c 	beq.w	800cc2c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	8b5b      	ldrh	r3, [r3, #26]
 800c998:	f043 0302 	orr.w	r3, r3, #2
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2207      	movs	r2, #7
 800c9a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9a8:	e140      	b.n	800cc2c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fa5c 	bl	800ce68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c9b0:	4b22      	ldr	r3, [pc, #136]	; (800ca3c <tcp_process+0x5bc>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	f003 0320 	and.w	r3, r3, #32
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d071      	beq.n	800caa0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9bc:	4b14      	ldr	r3, [pc, #80]	; (800ca10 <tcp_process+0x590>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	f003 0310 	and.w	r3, r3, #16
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d060      	beq.n	800ca8a <tcp_process+0x60a>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9cc:	4b11      	ldr	r3, [pc, #68]	; (800ca14 <tcp_process+0x594>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d15a      	bne.n	800ca8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d156      	bne.n	800ca8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	8b5b      	ldrh	r3, [r3, #26]
 800c9e0:	f043 0302 	orr.w	r3, r3, #2
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7fe fdbc 	bl	800b568 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c9f0:	4b13      	ldr	r3, [pc, #76]	; (800ca40 <tcp_process+0x5c0>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d105      	bne.n	800ca06 <tcp_process+0x586>
 800c9fa:	4b11      	ldr	r3, [pc, #68]	; (800ca40 <tcp_process+0x5c0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	4a0f      	ldr	r2, [pc, #60]	; (800ca40 <tcp_process+0x5c0>)
 800ca02:	6013      	str	r3, [r2, #0]
 800ca04:	e02e      	b.n	800ca64 <tcp_process+0x5e4>
 800ca06:	4b0e      	ldr	r3, [pc, #56]	; (800ca40 <tcp_process+0x5c0>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	e027      	b.n	800ca5e <tcp_process+0x5de>
 800ca0e:	bf00      	nop
 800ca10:	2000a72c 	.word	0x2000a72c
 800ca14:	2000a724 	.word	0x2000a724
 800ca18:	2000a72a 	.word	0x2000a72a
 800ca1c:	2000a720 	.word	0x2000a720
 800ca20:	2000a710 	.word	0x2000a710
 800ca24:	20007188 	.word	0x20007188
 800ca28:	2000718c 	.word	0x2000718c
 800ca2c:	08016bfc 	.word	0x08016bfc
 800ca30:	08016e9c 	.word	0x08016e9c
 800ca34:	08016c48 	.word	0x08016c48
 800ca38:	2000a728 	.word	0x2000a728
 800ca3c:	2000a72d 	.word	0x2000a72d
 800ca40:	2000a6f4 	.word	0x2000a6f4
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d104      	bne.n	800ca58 <tcp_process+0x5d8>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68da      	ldr	r2, [r3, #12]
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	60da      	str	r2, [r3, #12]
 800ca56:	e005      	b.n	800ca64 <tcp_process+0x5e4>
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1ef      	bne.n	800ca44 <tcp_process+0x5c4>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	60da      	str	r2, [r3, #12]
 800ca6a:	4b77      	ldr	r3, [pc, #476]	; (800cc48 <tcp_process+0x7c8>)
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	220a      	movs	r2, #10
 800ca74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ca76:	4b75      	ldr	r3, [pc, #468]	; (800cc4c <tcp_process+0x7cc>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	60da      	str	r2, [r3, #12]
 800ca7e:	4a73      	ldr	r2, [pc, #460]	; (800cc4c <tcp_process+0x7cc>)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6013      	str	r3, [r2, #0]
 800ca84:	f002 fcfa 	bl	800f47c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ca88:	e0d2      	b.n	800cc30 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	8b5b      	ldrh	r3, [r3, #26]
 800ca8e:	f043 0302 	orr.w	r3, r3, #2
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2208      	movs	r2, #8
 800ca9c:	751a      	strb	r2, [r3, #20]
      break;
 800ca9e:	e0c7      	b.n	800cc30 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800caa0:	4b6b      	ldr	r3, [pc, #428]	; (800cc50 <tcp_process+0x7d0>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	f003 0310 	and.w	r3, r3, #16
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 80c1 	beq.w	800cc30 <tcp_process+0x7b0>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cab2:	4b68      	ldr	r3, [pc, #416]	; (800cc54 <tcp_process+0x7d4>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	f040 80ba 	bne.w	800cc30 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f040 80b5 	bne.w	800cc30 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2206      	movs	r2, #6
 800caca:	751a      	strb	r2, [r3, #20]
      break;
 800cacc:	e0b0      	b.n	800cc30 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f9ca 	bl	800ce68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cad4:	4b60      	ldr	r3, [pc, #384]	; (800cc58 <tcp_process+0x7d8>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	f003 0320 	and.w	r3, r3, #32
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 80a9 	beq.w	800cc34 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	8b5b      	ldrh	r3, [r3, #26]
 800cae6:	f043 0302 	orr.w	r3, r3, #2
 800caea:	b29a      	uxth	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7fe fd39 	bl	800b568 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800caf6:	4b59      	ldr	r3, [pc, #356]	; (800cc5c <tcp_process+0x7dc>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d105      	bne.n	800cb0c <tcp_process+0x68c>
 800cb00:	4b56      	ldr	r3, [pc, #344]	; (800cc5c <tcp_process+0x7dc>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	4a55      	ldr	r2, [pc, #340]	; (800cc5c <tcp_process+0x7dc>)
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	e013      	b.n	800cb34 <tcp_process+0x6b4>
 800cb0c:	4b53      	ldr	r3, [pc, #332]	; (800cc5c <tcp_process+0x7dc>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	613b      	str	r3, [r7, #16]
 800cb12:	e00c      	b.n	800cb2e <tcp_process+0x6ae>
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d104      	bne.n	800cb28 <tcp_process+0x6a8>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68da      	ldr	r2, [r3, #12]
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	60da      	str	r2, [r3, #12]
 800cb26:	e005      	b.n	800cb34 <tcp_process+0x6b4>
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	613b      	str	r3, [r7, #16]
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1ef      	bne.n	800cb14 <tcp_process+0x694>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	60da      	str	r2, [r3, #12]
 800cb3a:	4b43      	ldr	r3, [pc, #268]	; (800cc48 <tcp_process+0x7c8>)
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	220a      	movs	r2, #10
 800cb44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cb46:	4b41      	ldr	r3, [pc, #260]	; (800cc4c <tcp_process+0x7cc>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	60da      	str	r2, [r3, #12]
 800cb4e:	4a3f      	ldr	r2, [pc, #252]	; (800cc4c <tcp_process+0x7cc>)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	f002 fc92 	bl	800f47c <tcp_timer_needed>
      }
      break;
 800cb58:	e06c      	b.n	800cc34 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f984 	bl	800ce68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cb60:	4b3b      	ldr	r3, [pc, #236]	; (800cc50 <tcp_process+0x7d0>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	f003 0310 	and.w	r3, r3, #16
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d065      	beq.n	800cc38 <tcp_process+0x7b8>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb70:	4b38      	ldr	r3, [pc, #224]	; (800cc54 <tcp_process+0x7d4>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d15f      	bne.n	800cc38 <tcp_process+0x7b8>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d15b      	bne.n	800cc38 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7fe fcf1 	bl	800b568 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cb86:	4b35      	ldr	r3, [pc, #212]	; (800cc5c <tcp_process+0x7dc>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d105      	bne.n	800cb9c <tcp_process+0x71c>
 800cb90:	4b32      	ldr	r3, [pc, #200]	; (800cc5c <tcp_process+0x7dc>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	4a31      	ldr	r2, [pc, #196]	; (800cc5c <tcp_process+0x7dc>)
 800cb98:	6013      	str	r3, [r2, #0]
 800cb9a:	e013      	b.n	800cbc4 <tcp_process+0x744>
 800cb9c:	4b2f      	ldr	r3, [pc, #188]	; (800cc5c <tcp_process+0x7dc>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	e00c      	b.n	800cbbe <tcp_process+0x73e>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d104      	bne.n	800cbb8 <tcp_process+0x738>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68da      	ldr	r2, [r3, #12]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	60da      	str	r2, [r3, #12]
 800cbb6:	e005      	b.n	800cbc4 <tcp_process+0x744>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	60fb      	str	r3, [r7, #12]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1ef      	bne.n	800cba4 <tcp_process+0x724>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	60da      	str	r2, [r3, #12]
 800cbca:	4b1f      	ldr	r3, [pc, #124]	; (800cc48 <tcp_process+0x7c8>)
 800cbcc:	2201      	movs	r2, #1
 800cbce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	220a      	movs	r2, #10
 800cbd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cbd6:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <tcp_process+0x7cc>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	60da      	str	r2, [r3, #12]
 800cbde:	4a1b      	ldr	r2, [pc, #108]	; (800cc4c <tcp_process+0x7cc>)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	f002 fc4a 	bl	800f47c <tcp_timer_needed>
      }
      break;
 800cbe8:	e026      	b.n	800cc38 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f93c 	bl	800ce68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cbf0:	4b17      	ldr	r3, [pc, #92]	; (800cc50 <tcp_process+0x7d0>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	f003 0310 	and.w	r3, r3, #16
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d01f      	beq.n	800cc3c <tcp_process+0x7bc>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc00:	4b14      	ldr	r3, [pc, #80]	; (800cc54 <tcp_process+0x7d4>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d119      	bne.n	800cc3c <tcp_process+0x7bc>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d115      	bne.n	800cc3c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cc10:	4b11      	ldr	r3, [pc, #68]	; (800cc58 <tcp_process+0x7d8>)
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	f043 0310 	orr.w	r3, r3, #16
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <tcp_process+0x7d8>)
 800cc1c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cc1e:	e00d      	b.n	800cc3c <tcp_process+0x7bc>
    default:
      break;
 800cc20:	bf00      	nop
 800cc22:	e00c      	b.n	800cc3e <tcp_process+0x7be>
      break;
 800cc24:	bf00      	nop
 800cc26:	e00a      	b.n	800cc3e <tcp_process+0x7be>
      break;
 800cc28:	bf00      	nop
 800cc2a:	e008      	b.n	800cc3e <tcp_process+0x7be>
      break;
 800cc2c:	bf00      	nop
 800cc2e:	e006      	b.n	800cc3e <tcp_process+0x7be>
      break;
 800cc30:	bf00      	nop
 800cc32:	e004      	b.n	800cc3e <tcp_process+0x7be>
      break;
 800cc34:	bf00      	nop
 800cc36:	e002      	b.n	800cc3e <tcp_process+0x7be>
      break;
 800cc38:	bf00      	nop
 800cc3a:	e000      	b.n	800cc3e <tcp_process+0x7be>
      break;
 800cc3c:	bf00      	nop
  }
  return ERR_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3724      	adds	r7, #36	; 0x24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}
 800cc48:	2000a6fc 	.word	0x2000a6fc
 800cc4c:	2000a6f8 	.word	0x2000a6f8
 800cc50:	2000a72c 	.word	0x2000a72c
 800cc54:	2000a724 	.word	0x2000a724
 800cc58:	2000a72d 	.word	0x2000a72d
 800cc5c:	2000a6f4 	.word	0x2000a6f4

0800cc60 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cc60:	b590      	push	{r4, r7, lr}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <tcp_oos_insert_segment+0x1e>
 800cc70:	4b3b      	ldr	r3, [pc, #236]	; (800cd60 <tcp_oos_insert_segment+0x100>)
 800cc72:	f240 421f 	movw	r2, #1055	; 0x41f
 800cc76:	493b      	ldr	r1, [pc, #236]	; (800cd64 <tcp_oos_insert_segment+0x104>)
 800cc78:	483b      	ldr	r0, [pc, #236]	; (800cd68 <tcp_oos_insert_segment+0x108>)
 800cc7a:	f007 fadf 	bl	801423c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	899b      	ldrh	r3, [r3, #12]
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fb fd4a 	bl	8008720 <lwip_htons>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d028      	beq.n	800ccea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cc98:	6838      	ldr	r0, [r7, #0]
 800cc9a:	f7fe fa63 	bl	800b164 <tcp_segs_free>
    next = NULL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	603b      	str	r3, [r7, #0]
 800cca2:	e056      	b.n	800cd52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	899b      	ldrh	r3, [r3, #12]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fb fd37 	bl	8008720 <lwip_htons>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00d      	beq.n	800ccda <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	899b      	ldrh	r3, [r3, #12]
 800ccc4:	b29c      	uxth	r4, r3
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	f7fb fd2a 	bl	8008720 <lwip_htons>
 800cccc:	4603      	mov	r3, r0
 800ccce:	461a      	mov	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	4322      	orrs	r2, r4
 800ccd6:	b292      	uxth	r2, r2
 800ccd8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7fe fa52 	bl	800b18e <tcp_seg_free>
    while (next &&
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00e      	beq.n	800cd0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	891b      	ldrh	r3, [r3, #8]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	4b1d      	ldr	r3, [pc, #116]	; (800cd6c <tcp_oos_insert_segment+0x10c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	441a      	add	r2, r3
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	8909      	ldrh	r1, [r1, #8]
 800cd06:	440b      	add	r3, r1
 800cd08:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	daca      	bge.n	800cca4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d01e      	beq.n	800cd52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	891b      	ldrh	r3, [r3, #8]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	4b14      	ldr	r3, [pc, #80]	; (800cd6c <tcp_oos_insert_segment+0x10c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	441a      	add	r2, r3
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dd12      	ble.n	800cd52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	4b0d      	ldr	r3, [pc, #52]	; (800cd6c <tcp_oos_insert_segment+0x10c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	891b      	ldrh	r3, [r3, #8]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	f7fc fe15 	bl	800997c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	601a      	str	r2, [r3, #0]
}
 800cd58:	bf00      	nop
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd90      	pop	{r4, r7, pc}
 800cd60:	08016bfc 	.word	0x08016bfc
 800cd64:	08016ebc 	.word	0x08016ebc
 800cd68:	08016c48 	.word	0x08016c48
 800cd6c:	2000a720 	.word	0x2000a720

0800cd70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cd70:	b5b0      	push	{r4, r5, r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cd7e:	e03e      	b.n	800cdfe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fd f802 	bl	8009d98 <pbuf_clen>
 800cd94:	4603      	mov	r3, r0
 800cd96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd9e:	8a7a      	ldrh	r2, [r7, #18]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d906      	bls.n	800cdb2 <tcp_free_acked_segments+0x42>
 800cda4:	4b2a      	ldr	r3, [pc, #168]	; (800ce50 <tcp_free_acked_segments+0xe0>)
 800cda6:	f240 4257 	movw	r2, #1111	; 0x457
 800cdaa:	492a      	ldr	r1, [pc, #168]	; (800ce54 <tcp_free_acked_segments+0xe4>)
 800cdac:	482a      	ldr	r0, [pc, #168]	; (800ce58 <tcp_free_acked_segments+0xe8>)
 800cdae:	f007 fa45 	bl	801423c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cdb8:	8a7b      	ldrh	r3, [r7, #18]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	891a      	ldrh	r2, [r3, #8]
 800cdc8:	4b24      	ldr	r3, [pc, #144]	; (800ce5c <tcp_free_acked_segments+0xec>)
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	4413      	add	r3, r2
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	4b22      	ldr	r3, [pc, #136]	; (800ce5c <tcp_free_acked_segments+0xec>)
 800cdd2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cdd4:	6978      	ldr	r0, [r7, #20]
 800cdd6:	f7fe f9da 	bl	800b18e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00c      	beq.n	800cdfe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d109      	bne.n	800cdfe <tcp_free_acked_segments+0x8e>
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d106      	bne.n	800cdfe <tcp_free_acked_segments+0x8e>
 800cdf0:	4b17      	ldr	r3, [pc, #92]	; (800ce50 <tcp_free_acked_segments+0xe0>)
 800cdf2:	f240 4261 	movw	r2, #1121	; 0x461
 800cdf6:	491a      	ldr	r1, [pc, #104]	; (800ce60 <tcp_free_acked_segments+0xf0>)
 800cdf8:	4817      	ldr	r0, [pc, #92]	; (800ce58 <tcp_free_acked_segments+0xe8>)
 800cdfa:	f007 fa1f 	bl	801423c <iprintf>
  while (seg_list != NULL &&
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d020      	beq.n	800ce46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fb fc9d 	bl	800874a <lwip_htonl>
 800ce10:	4604      	mov	r4, r0
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	891b      	ldrh	r3, [r3, #8]
 800ce16:	461d      	mov	r5, r3
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	899b      	ldrh	r3, [r3, #12]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7fb fc7d 	bl	8008720 <lwip_htons>
 800ce26:	4603      	mov	r3, r0
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <tcp_free_acked_segments+0xc6>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <tcp_free_acked_segments+0xc8>
 800ce36:	2300      	movs	r3, #0
 800ce38:	442b      	add	r3, r5
 800ce3a:	18e2      	adds	r2, r4, r3
 800ce3c:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <tcp_free_acked_segments+0xf4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	dd9c      	ble.n	800cd80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ce46:	68bb      	ldr	r3, [r7, #8]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ce50:	08016bfc 	.word	0x08016bfc
 800ce54:	08016ee4 	.word	0x08016ee4
 800ce58:	08016c48 	.word	0x08016c48
 800ce5c:	2000a728 	.word	0x2000a728
 800ce60:	08016f0c 	.word	0x08016f0c
 800ce64:	2000a724 	.word	0x2000a724

0800ce68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ce68:	b5b0      	push	{r4, r5, r7, lr}
 800ce6a:	b094      	sub	sp, #80	; 0x50
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d106      	bne.n	800ce88 <tcp_receive+0x20>
 800ce7a:	4b91      	ldr	r3, [pc, #580]	; (800d0c0 <tcp_receive+0x258>)
 800ce7c:	f240 427b 	movw	r2, #1147	; 0x47b
 800ce80:	4990      	ldr	r1, [pc, #576]	; (800d0c4 <tcp_receive+0x25c>)
 800ce82:	4891      	ldr	r0, [pc, #580]	; (800d0c8 <tcp_receive+0x260>)
 800ce84:	f007 f9da 	bl	801423c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	7d1b      	ldrb	r3, [r3, #20]
 800ce8c:	2b03      	cmp	r3, #3
 800ce8e:	d806      	bhi.n	800ce9e <tcp_receive+0x36>
 800ce90:	4b8b      	ldr	r3, [pc, #556]	; (800d0c0 <tcp_receive+0x258>)
 800ce92:	f240 427c 	movw	r2, #1148	; 0x47c
 800ce96:	498d      	ldr	r1, [pc, #564]	; (800d0cc <tcp_receive+0x264>)
 800ce98:	488b      	ldr	r0, [pc, #556]	; (800d0c8 <tcp_receive+0x260>)
 800ce9a:	f007 f9cf 	bl	801423c <iprintf>

  if (flags & TCP_ACK) {
 800ce9e:	4b8c      	ldr	r3, [pc, #560]	; (800d0d0 <tcp_receive+0x268>)
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	f003 0310 	and.w	r3, r3, #16
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f000 8264 	beq.w	800d374 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceb8:	4413      	add	r3, r2
 800ceba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cec0:	4b84      	ldr	r3, [pc, #528]	; (800d0d4 <tcp_receive+0x26c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	db1b      	blt.n	800cf02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cece:	4b81      	ldr	r3, [pc, #516]	; (800d0d4 <tcp_receive+0x26c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d106      	bne.n	800cee4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ceda:	4b7f      	ldr	r3, [pc, #508]	; (800d0d8 <tcp_receive+0x270>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	db0e      	blt.n	800cf02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cee8:	4b7b      	ldr	r3, [pc, #492]	; (800d0d8 <tcp_receive+0x270>)
 800ceea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d125      	bne.n	800cf3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cef0:	4b7a      	ldr	r3, [pc, #488]	; (800d0dc <tcp_receive+0x274>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	89db      	ldrh	r3, [r3, #14]
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d91c      	bls.n	800cf3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cf02:	4b76      	ldr	r3, [pc, #472]	; (800d0dc <tcp_receive+0x274>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	89db      	ldrh	r3, [r3, #14]
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d205      	bcs.n	800cf2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cf2c:	4b69      	ldr	r3, [pc, #420]	; (800d0d4 <tcp_receive+0x26c>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cf34:	4b68      	ldr	r3, [pc, #416]	; (800d0d8 <tcp_receive+0x270>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cf3c:	4b66      	ldr	r3, [pc, #408]	; (800d0d8 <tcp_receive+0x270>)
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	dc58      	bgt.n	800cffc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cf4a:	4b65      	ldr	r3, [pc, #404]	; (800d0e0 <tcp_receive+0x278>)
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d14b      	bne.n	800cfea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cf5c:	4413      	add	r3, r2
 800cf5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d142      	bne.n	800cfea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	db3d      	blt.n	800cfea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf72:	4b59      	ldr	r3, [pc, #356]	; (800d0d8 <tcp_receive+0x270>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d137      	bne.n	800cfea <tcp_receive+0x182>
              found_dupack = 1;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf84:	2bff      	cmp	r3, #255	; 0xff
 800cf86:	d007      	beq.n	800cf98 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf8e:	3301      	adds	r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d91b      	bls.n	800cfda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfac:	4413      	add	r3, r2
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d30a      	bcc.n	800cfd0 <tcp_receive+0x168>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfc4:	4413      	add	r3, r2
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cfce:	e004      	b.n	800cfda <tcp_receive+0x172>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d902      	bls.n	800cfea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f001 feeb 	bl	800edc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cfea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f040 8161 	bne.w	800d2b4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cffa:	e15b      	b.n	800d2b4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cffc:	4b36      	ldr	r3, [pc, #216]	; (800d0d8 <tcp_receive+0x270>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	3b01      	subs	r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f2c0 814e 	blt.w	800d2aa <tcp_receive+0x442>
 800d00e:	4b32      	ldr	r3, [pc, #200]	; (800d0d8 <tcp_receive+0x270>)
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f300 8146 	bgt.w	800d2aa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	8b5b      	ldrh	r3, [r3, #26]
 800d022:	f003 0304 	and.w	r3, r3, #4
 800d026:	2b00      	cmp	r3, #0
 800d028:	d010      	beq.n	800d04c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	8b5b      	ldrh	r3, [r3, #26]
 800d02e:	f023 0304 	bic.w	r3, r3, #4
 800d032:	b29a      	uxth	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d05a:	10db      	asrs	r3, r3, #3
 800d05c:	b21b      	sxth	r3, r3
 800d05e:	b29a      	uxth	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d066:	b29b      	uxth	r3, r3
 800d068:	4413      	add	r3, r2
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	b21a      	sxth	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d074:	4b18      	ldr	r3, [pc, #96]	; (800d0d8 <tcp_receive+0x270>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	b29a      	uxth	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d07e:	b29b      	uxth	r3, r3
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d08c:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <tcp_receive+0x270>)
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	7d1b      	ldrb	r3, [r3, #20]
 800d098:	2b03      	cmp	r3, #3
 800d09a:	f240 8097 	bls.w	800d1cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d245      	bcs.n	800d13a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	8b5b      	ldrh	r3, [r3, #26]
 800d0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d014      	beq.n	800d0e4 <tcp_receive+0x27c>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e013      	b.n	800d0e6 <tcp_receive+0x27e>
 800d0be:	bf00      	nop
 800d0c0:	08016bfc 	.word	0x08016bfc
 800d0c4:	08016f2c 	.word	0x08016f2c
 800d0c8:	08016c48 	.word	0x08016c48
 800d0cc:	08016f48 	.word	0x08016f48
 800d0d0:	2000a72c 	.word	0x2000a72c
 800d0d4:	2000a720 	.word	0x2000a720
 800d0d8:	2000a724 	.word	0x2000a724
 800d0dc:	2000a710 	.word	0x2000a710
 800d0e0:	2000a72a 	.word	0x2000a72a
 800d0e4:	2302      	movs	r3, #2
 800d0e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d0ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0f4:	fb12 f303 	smulbb	r3, r2, r3
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	bf28      	it	cs
 800d100:	4613      	movcs	r3, r2
 800d102:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d10a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d10c:	4413      	add	r3, r2
 800d10e:	b29a      	uxth	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d116:	429a      	cmp	r2, r3
 800d118:	d309      	bcc.n	800d12e <tcp_receive+0x2c6>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d120:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d122:	4413      	add	r3, r2
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d12c:	e04e      	b.n	800d1cc <tcp_receive+0x364>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d134:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d138:	e048      	b.n	800d1cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d140:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d142:	4413      	add	r3, r2
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d309      	bcc.n	800d164 <tcp_receive+0x2fc>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d158:	4413      	add	r3, r2
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d162:	e004      	b.n	800d16e <tcp_receive+0x306>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d16a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d326      	bcc.n	800d1cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d19e:	4413      	add	r3, r2
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d30a      	bcc.n	800d1c2 <tcp_receive+0x35a>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1b6:	4413      	add	r3, r2
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d1c0:	e004      	b.n	800d1cc <tcp_receive+0x364>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d4:	4a98      	ldr	r2, [pc, #608]	; (800d438 <tcp_receive+0x5d0>)
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7ff fdca 	bl	800cd70 <tcp_free_acked_segments>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ea:	4a94      	ldr	r2, [pc, #592]	; (800d43c <tcp_receive+0x5d4>)
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7ff fdbf 	bl	800cd70 <tcp_free_acked_segments>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d104      	bne.n	800d20a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d206:	861a      	strh	r2, [r3, #48]	; 0x30
 800d208:	e002      	b.n	800d210 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d103      	bne.n	800d226 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d22c:	4b84      	ldr	r3, [pc, #528]	; (800d440 <tcp_receive+0x5d8>)
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	4413      	add	r3, r2
 800d232:	b29a      	uxth	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	8b5b      	ldrh	r3, [r3, #26]
 800d23e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d242:	2b00      	cmp	r3, #0
 800d244:	d035      	beq.n	800d2b2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d118      	bne.n	800d280 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00c      	beq.n	800d270 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	4618      	mov	r0, r3
 800d264:	f7fb fa71 	bl	800874a <lwip_htonl>
 800d268:	4603      	mov	r3, r0
 800d26a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dc20      	bgt.n	800d2b2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	8b5b      	ldrh	r3, [r3, #26]
 800d274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d278:	b29a      	uxth	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d27e:	e018      	b.n	800d2b2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7fb fa5c 	bl	800874a <lwip_htonl>
 800d292:	4603      	mov	r3, r0
 800d294:	1ae3      	subs	r3, r4, r3
 800d296:	2b00      	cmp	r3, #0
 800d298:	dc0b      	bgt.n	800d2b2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	8b5b      	ldrh	r3, [r3, #26]
 800d29e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d2a8:	e003      	b.n	800d2b2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f001 ff76 	bl	800f19c <tcp_send_empty_ack>
 800d2b0:	e000      	b.n	800d2b4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d2b2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d05b      	beq.n	800d374 <tcp_receive+0x50c>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2c0:	4b60      	ldr	r3, [pc, #384]	; (800d444 <tcp_receive+0x5dc>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	da54      	bge.n	800d374 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d2ca:	4b5f      	ldr	r3, [pc, #380]	; (800d448 <tcp_receive+0x5e0>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d2de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d2e8:	10db      	asrs	r3, r3, #3
 800d2ea:	b21b      	sxth	r3, r3
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d302:	4413      	add	r3, r2
 800d304:	b29b      	uxth	r3, r3
 800d306:	b21a      	sxth	r2, r3
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d30c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d310:	2b00      	cmp	r3, #0
 800d312:	da05      	bge.n	800d320 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d318:	425b      	negs	r3, r3
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d320:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d32a:	109b      	asrs	r3, r3, #2
 800d32c:	b21b      	sxth	r3, r3
 800d32e:	b29b      	uxth	r3, r3
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	b29b      	uxth	r3, r3
 800d334:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d33e:	b29a      	uxth	r2, r3
 800d340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d344:	4413      	add	r3, r2
 800d346:	b29b      	uxth	r3, r3
 800d348:	b21a      	sxth	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d354:	10db      	asrs	r3, r3, #3
 800d356:	b21b      	sxth	r3, r3
 800d358:	b29a      	uxth	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d360:	b29b      	uxth	r3, r3
 800d362:	4413      	add	r3, r2
 800d364:	b29b      	uxth	r3, r3
 800d366:	b21a      	sxth	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d374:	4b35      	ldr	r3, [pc, #212]	; (800d44c <tcp_receive+0x5e4>)
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 84e2 	beq.w	800dd42 <tcp_receive+0xeda>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7d1b      	ldrb	r3, [r3, #20]
 800d382:	2b06      	cmp	r3, #6
 800d384:	f200 84dd 	bhi.w	800dd42 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d38c:	4b30      	ldr	r3, [pc, #192]	; (800d450 <tcp_receive+0x5e8>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	3b01      	subs	r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	f2c0 808f 	blt.w	800d4b8 <tcp_receive+0x650>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d39e:	4b2b      	ldr	r3, [pc, #172]	; (800d44c <tcp_receive+0x5e4>)
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	4b2a      	ldr	r3, [pc, #168]	; (800d450 <tcp_receive+0x5e8>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	440b      	add	r3, r1
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f300 8082 	bgt.w	800d4b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d3b4:	4b27      	ldr	r3, [pc, #156]	; (800d454 <tcp_receive+0x5ec>)
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3be:	4b24      	ldr	r3, [pc, #144]	; (800d450 <tcp_receive+0x5e8>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d3c6:	4b23      	ldr	r3, [pc, #140]	; (800d454 <tcp_receive+0x5ec>)
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <tcp_receive+0x574>
 800d3ce:	4b22      	ldr	r3, [pc, #136]	; (800d458 <tcp_receive+0x5f0>)
 800d3d0:	f240 5294 	movw	r2, #1428	; 0x594
 800d3d4:	4921      	ldr	r1, [pc, #132]	; (800d45c <tcp_receive+0x5f4>)
 800d3d6:	4822      	ldr	r0, [pc, #136]	; (800d460 <tcp_receive+0x5f8>)
 800d3d8:	f006 ff30 	bl	801423c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d906      	bls.n	800d3f4 <tcp_receive+0x58c>
 800d3e6:	4b1c      	ldr	r3, [pc, #112]	; (800d458 <tcp_receive+0x5f0>)
 800d3e8:	f240 5295 	movw	r2, #1429	; 0x595
 800d3ec:	491d      	ldr	r1, [pc, #116]	; (800d464 <tcp_receive+0x5fc>)
 800d3ee:	481c      	ldr	r0, [pc, #112]	; (800d460 <tcp_receive+0x5f8>)
 800d3f0:	f006 ff24 	bl	801423c <iprintf>
      off = (u16_t)off32;
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d3fa:	4b16      	ldr	r3, [pc, #88]	; (800d454 <tcp_receive+0x5ec>)
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	891b      	ldrh	r3, [r3, #8]
 800d400:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d404:	429a      	cmp	r2, r3
 800d406:	d906      	bls.n	800d416 <tcp_receive+0x5ae>
 800d408:	4b13      	ldr	r3, [pc, #76]	; (800d458 <tcp_receive+0x5f0>)
 800d40a:	f240 5297 	movw	r2, #1431	; 0x597
 800d40e:	4916      	ldr	r1, [pc, #88]	; (800d468 <tcp_receive+0x600>)
 800d410:	4813      	ldr	r0, [pc, #76]	; (800d460 <tcp_receive+0x5f8>)
 800d412:	f006 ff13 	bl	801423c <iprintf>
      inseg.len -= off;
 800d416:	4b0f      	ldr	r3, [pc, #60]	; (800d454 <tcp_receive+0x5ec>)
 800d418:	891a      	ldrh	r2, [r3, #8]
 800d41a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	b29a      	uxth	r2, r3
 800d422:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <tcp_receive+0x5ec>)
 800d424:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d426:	4b0b      	ldr	r3, [pc, #44]	; (800d454 <tcp_receive+0x5ec>)
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	891a      	ldrh	r2, [r3, #8]
 800d42c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d434:	e02a      	b.n	800d48c <tcp_receive+0x624>
 800d436:	bf00      	nop
 800d438:	08016f64 	.word	0x08016f64
 800d43c:	08016f6c 	.word	0x08016f6c
 800d440:	2000a728 	.word	0x2000a728
 800d444:	2000a724 	.word	0x2000a724
 800d448:	2000a6e8 	.word	0x2000a6e8
 800d44c:	2000a72a 	.word	0x2000a72a
 800d450:	2000a720 	.word	0x2000a720
 800d454:	2000a700 	.word	0x2000a700
 800d458:	08016bfc 	.word	0x08016bfc
 800d45c:	08016f74 	.word	0x08016f74
 800d460:	08016c48 	.word	0x08016c48
 800d464:	08016f84 	.word	0x08016f84
 800d468:	08016f94 	.word	0x08016f94
        off -= p->len;
 800d46c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d46e:	895b      	ldrh	r3, [r3, #10]
 800d470:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d47e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d482:	2200      	movs	r2, #0
 800d484:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d48c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d48e:	895b      	ldrh	r3, [r3, #10]
 800d490:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d494:	429a      	cmp	r2, r3
 800d496:	d8e9      	bhi.n	800d46c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d49c:	4619      	mov	r1, r3
 800d49e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d4a0:	f7fc fb6c 	bl	8009b7c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a8:	4a91      	ldr	r2, [pc, #580]	; (800d6f0 <tcp_receive+0x888>)
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	4b91      	ldr	r3, [pc, #580]	; (800d6f4 <tcp_receive+0x88c>)
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	4a8f      	ldr	r2, [pc, #572]	; (800d6f0 <tcp_receive+0x888>)
 800d4b2:	6812      	ldr	r2, [r2, #0]
 800d4b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d4b6:	e00d      	b.n	800d4d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d4b8:	4b8d      	ldr	r3, [pc, #564]	; (800d6f0 <tcp_receive+0x888>)
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	da06      	bge.n	800d4d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	8b5b      	ldrh	r3, [r3, #26]
 800d4ca:	f043 0302 	orr.w	r3, r3, #2
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d4d4:	4b86      	ldr	r3, [pc, #536]	; (800d6f0 <tcp_receive+0x888>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f2c0 842a 	blt.w	800dd38 <tcp_receive+0xed0>
 800d4e4:	4b82      	ldr	r3, [pc, #520]	; (800d6f0 <tcp_receive+0x888>)
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ec:	6879      	ldr	r1, [r7, #4]
 800d4ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4f0:	440b      	add	r3, r1
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f300 841e 	bgt.w	800dd38 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d500:	4b7b      	ldr	r3, [pc, #492]	; (800d6f0 <tcp_receive+0x888>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	429a      	cmp	r2, r3
 800d506:	f040 829a 	bne.w	800da3e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d50a:	4b7a      	ldr	r3, [pc, #488]	; (800d6f4 <tcp_receive+0x88c>)
 800d50c:	891c      	ldrh	r4, [r3, #8]
 800d50e:	4b79      	ldr	r3, [pc, #484]	; (800d6f4 <tcp_receive+0x88c>)
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	899b      	ldrh	r3, [r3, #12]
 800d514:	b29b      	uxth	r3, r3
 800d516:	4618      	mov	r0, r3
 800d518:	f7fb f902 	bl	8008720 <lwip_htons>
 800d51c:	4603      	mov	r3, r0
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	f003 0303 	and.w	r3, r3, #3
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <tcp_receive+0x6c4>
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <tcp_receive+0x6c6>
 800d52c:	2300      	movs	r3, #0
 800d52e:	4423      	add	r3, r4
 800d530:	b29a      	uxth	r2, r3
 800d532:	4b71      	ldr	r3, [pc, #452]	; (800d6f8 <tcp_receive+0x890>)
 800d534:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d53a:	4b6f      	ldr	r3, [pc, #444]	; (800d6f8 <tcp_receive+0x890>)
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d275      	bcs.n	800d62e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d542:	4b6c      	ldr	r3, [pc, #432]	; (800d6f4 <tcp_receive+0x88c>)
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	899b      	ldrh	r3, [r3, #12]
 800d548:	b29b      	uxth	r3, r3
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fb f8e8 	bl	8008720 <lwip_htons>
 800d550:	4603      	mov	r3, r0
 800d552:	b2db      	uxtb	r3, r3
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d01f      	beq.n	800d59c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d55c:	4b65      	ldr	r3, [pc, #404]	; (800d6f4 <tcp_receive+0x88c>)
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	899b      	ldrh	r3, [r3, #12]
 800d562:	b29b      	uxth	r3, r3
 800d564:	b21b      	sxth	r3, r3
 800d566:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d56a:	b21c      	sxth	r4, r3
 800d56c:	4b61      	ldr	r3, [pc, #388]	; (800d6f4 <tcp_receive+0x88c>)
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	899b      	ldrh	r3, [r3, #12]
 800d572:	b29b      	uxth	r3, r3
 800d574:	4618      	mov	r0, r3
 800d576:	f7fb f8d3 	bl	8008720 <lwip_htons>
 800d57a:	4603      	mov	r3, r0
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	b29b      	uxth	r3, r3
 800d580:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d584:	b29b      	uxth	r3, r3
 800d586:	4618      	mov	r0, r3
 800d588:	f7fb f8ca 	bl	8008720 <lwip_htons>
 800d58c:	4603      	mov	r3, r0
 800d58e:	b21b      	sxth	r3, r3
 800d590:	4323      	orrs	r3, r4
 800d592:	b21a      	sxth	r2, r3
 800d594:	4b57      	ldr	r3, [pc, #348]	; (800d6f4 <tcp_receive+0x88c>)
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	b292      	uxth	r2, r2
 800d59a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d5a0:	4b54      	ldr	r3, [pc, #336]	; (800d6f4 <tcp_receive+0x88c>)
 800d5a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d5a4:	4b53      	ldr	r3, [pc, #332]	; (800d6f4 <tcp_receive+0x88c>)
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	899b      	ldrh	r3, [r3, #12]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fb f8b7 	bl	8008720 <lwip_htons>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	f003 0302 	and.w	r3, r3, #2
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d005      	beq.n	800d5ca <tcp_receive+0x762>
            inseg.len -= 1;
 800d5be:	4b4d      	ldr	r3, [pc, #308]	; (800d6f4 <tcp_receive+0x88c>)
 800d5c0:	891b      	ldrh	r3, [r3, #8]
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	b29a      	uxth	r2, r3
 800d5c6:	4b4b      	ldr	r3, [pc, #300]	; (800d6f4 <tcp_receive+0x88c>)
 800d5c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d5ca:	4b4a      	ldr	r3, [pc, #296]	; (800d6f4 <tcp_receive+0x88c>)
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	4a49      	ldr	r2, [pc, #292]	; (800d6f4 <tcp_receive+0x88c>)
 800d5d0:	8912      	ldrh	r2, [r2, #8]
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7fc f9d1 	bl	800997c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d5da:	4b46      	ldr	r3, [pc, #280]	; (800d6f4 <tcp_receive+0x88c>)
 800d5dc:	891c      	ldrh	r4, [r3, #8]
 800d5de:	4b45      	ldr	r3, [pc, #276]	; (800d6f4 <tcp_receive+0x88c>)
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	899b      	ldrh	r3, [r3, #12]
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fb f89a 	bl	8008720 <lwip_htons>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	f003 0303 	and.w	r3, r3, #3
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <tcp_receive+0x794>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e000      	b.n	800d5fe <tcp_receive+0x796>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4423      	add	r3, r4
 800d600:	b29a      	uxth	r2, r3
 800d602:	4b3d      	ldr	r3, [pc, #244]	; (800d6f8 <tcp_receive+0x890>)
 800d604:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d606:	4b3c      	ldr	r3, [pc, #240]	; (800d6f8 <tcp_receive+0x890>)
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	4b38      	ldr	r3, [pc, #224]	; (800d6f0 <tcp_receive+0x888>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	441a      	add	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d61a:	440b      	add	r3, r1
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d006      	beq.n	800d62e <tcp_receive+0x7c6>
 800d620:	4b36      	ldr	r3, [pc, #216]	; (800d6fc <tcp_receive+0x894>)
 800d622:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d626:	4936      	ldr	r1, [pc, #216]	; (800d700 <tcp_receive+0x898>)
 800d628:	4836      	ldr	r0, [pc, #216]	; (800d704 <tcp_receive+0x89c>)
 800d62a:	f006 fe07 	bl	801423c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 80e7 	beq.w	800d806 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d638:	4b2e      	ldr	r3, [pc, #184]	; (800d6f4 <tcp_receive+0x88c>)
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	899b      	ldrh	r3, [r3, #12]
 800d63e:	b29b      	uxth	r3, r3
 800d640:	4618      	mov	r0, r3
 800d642:	f7fb f86d 	bl	8008720 <lwip_htons>
 800d646:	4603      	mov	r3, r0
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d010      	beq.n	800d674 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d652:	e00a      	b.n	800d66a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d658:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7fd fd92 	bl	800b18e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1f0      	bne.n	800d654 <tcp_receive+0x7ec>
 800d672:	e0c8      	b.n	800d806 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d678:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d67a:	e052      	b.n	800d722 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	899b      	ldrh	r3, [r3, #12]
 800d682:	b29b      	uxth	r3, r3
 800d684:	4618      	mov	r0, r3
 800d686:	f7fb f84b 	bl	8008720 <lwip_htons>
 800d68a:	4603      	mov	r3, r0
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d03d      	beq.n	800d712 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d696:	4b17      	ldr	r3, [pc, #92]	; (800d6f4 <tcp_receive+0x88c>)
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	899b      	ldrh	r3, [r3, #12]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fb f83e 	bl	8008720 <lwip_htons>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d130      	bne.n	800d712 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d6b0:	4b10      	ldr	r3, [pc, #64]	; (800d6f4 <tcp_receive+0x88c>)
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	899b      	ldrh	r3, [r3, #12]
 800d6b6:	b29c      	uxth	r4, r3
 800d6b8:	2001      	movs	r0, #1
 800d6ba:	f7fb f831 	bl	8008720 <lwip_htons>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	4b0c      	ldr	r3, [pc, #48]	; (800d6f4 <tcp_receive+0x88c>)
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	4322      	orrs	r2, r4
 800d6c8:	b292      	uxth	r2, r2
 800d6ca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d6cc:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <tcp_receive+0x88c>)
 800d6ce:	891c      	ldrh	r4, [r3, #8]
 800d6d0:	4b08      	ldr	r3, [pc, #32]	; (800d6f4 <tcp_receive+0x88c>)
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	899b      	ldrh	r3, [r3, #12]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fb f821 	bl	8008720 <lwip_htons>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	f003 0303 	and.w	r3, r3, #3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00e      	beq.n	800d708 <tcp_receive+0x8a0>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e00d      	b.n	800d70a <tcp_receive+0x8a2>
 800d6ee:	bf00      	nop
 800d6f0:	2000a720 	.word	0x2000a720
 800d6f4:	2000a700 	.word	0x2000a700
 800d6f8:	2000a72a 	.word	0x2000a72a
 800d6fc:	08016bfc 	.word	0x08016bfc
 800d700:	08016fa4 	.word	0x08016fa4
 800d704:	08016c48 	.word	0x08016c48
 800d708:	2300      	movs	r3, #0
 800d70a:	4423      	add	r3, r4
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	4b98      	ldr	r3, [pc, #608]	; (800d970 <tcp_receive+0xb08>)
 800d710:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d714:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d71c:	6938      	ldr	r0, [r7, #16]
 800d71e:	f7fd fd36 	bl	800b18e <tcp_seg_free>
            while (next &&
 800d722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00e      	beq.n	800d746 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d728:	4b91      	ldr	r3, [pc, #580]	; (800d970 <tcp_receive+0xb08>)
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	461a      	mov	r2, r3
 800d72e:	4b91      	ldr	r3, [pc, #580]	; (800d974 <tcp_receive+0xb0c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	441a      	add	r2, r3
 800d734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d73c:	8909      	ldrh	r1, [r1, #8]
 800d73e:	440b      	add	r3, r1
 800d740:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d742:	2b00      	cmp	r3, #0
 800d744:	da9a      	bge.n	800d67c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d059      	beq.n	800d800 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d74c:	4b88      	ldr	r3, [pc, #544]	; (800d970 <tcp_receive+0xb08>)
 800d74e:	881b      	ldrh	r3, [r3, #0]
 800d750:	461a      	mov	r2, r3
 800d752:	4b88      	ldr	r3, [pc, #544]	; (800d974 <tcp_receive+0xb0c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	441a      	add	r2, r3
 800d758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d760:	2b00      	cmp	r3, #0
 800d762:	dd4d      	ble.n	800d800 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	4b81      	ldr	r3, [pc, #516]	; (800d974 <tcp_receive+0xb0c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	b29b      	uxth	r3, r3
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	b29a      	uxth	r2, r3
 800d776:	4b80      	ldr	r3, [pc, #512]	; (800d978 <tcp_receive+0xb10>)
 800d778:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d77a:	4b7f      	ldr	r3, [pc, #508]	; (800d978 <tcp_receive+0xb10>)
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	899b      	ldrh	r3, [r3, #12]
 800d780:	b29b      	uxth	r3, r3
 800d782:	4618      	mov	r0, r3
 800d784:	f7fa ffcc 	bl	8008720 <lwip_htons>
 800d788:	4603      	mov	r3, r0
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	f003 0302 	and.w	r3, r3, #2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <tcp_receive+0x938>
                inseg.len -= 1;
 800d794:	4b78      	ldr	r3, [pc, #480]	; (800d978 <tcp_receive+0xb10>)
 800d796:	891b      	ldrh	r3, [r3, #8]
 800d798:	3b01      	subs	r3, #1
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	4b76      	ldr	r3, [pc, #472]	; (800d978 <tcp_receive+0xb10>)
 800d79e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d7a0:	4b75      	ldr	r3, [pc, #468]	; (800d978 <tcp_receive+0xb10>)
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	4a74      	ldr	r2, [pc, #464]	; (800d978 <tcp_receive+0xb10>)
 800d7a6:	8912      	ldrh	r2, [r2, #8]
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fc f8e6 	bl	800997c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d7b0:	4b71      	ldr	r3, [pc, #452]	; (800d978 <tcp_receive+0xb10>)
 800d7b2:	891c      	ldrh	r4, [r3, #8]
 800d7b4:	4b70      	ldr	r3, [pc, #448]	; (800d978 <tcp_receive+0xb10>)
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	899b      	ldrh	r3, [r3, #12]
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fa ffaf 	bl	8008720 <lwip_htons>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	f003 0303 	and.w	r3, r3, #3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <tcp_receive+0x96a>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e000      	b.n	800d7d4 <tcp_receive+0x96c>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4423      	add	r3, r4
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	4b65      	ldr	r3, [pc, #404]	; (800d970 <tcp_receive+0xb08>)
 800d7da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d7dc:	4b64      	ldr	r3, [pc, #400]	; (800d970 <tcp_receive+0xb08>)
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	4b64      	ldr	r3, [pc, #400]	; (800d974 <tcp_receive+0xb0c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	441a      	add	r2, r3
 800d7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d006      	beq.n	800d800 <tcp_receive+0x998>
 800d7f2:	4b62      	ldr	r3, [pc, #392]	; (800d97c <tcp_receive+0xb14>)
 800d7f4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d7f8:	4961      	ldr	r1, [pc, #388]	; (800d980 <tcp_receive+0xb18>)
 800d7fa:	4862      	ldr	r0, [pc, #392]	; (800d984 <tcp_receive+0xb1c>)
 800d7fc:	f006 fd1e 	bl	801423c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d804:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d806:	4b5a      	ldr	r3, [pc, #360]	; (800d970 <tcp_receive+0xb08>)
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	461a      	mov	r2, r3
 800d80c:	4b59      	ldr	r3, [pc, #356]	; (800d974 <tcp_receive+0xb0c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	441a      	add	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d81a:	4b55      	ldr	r3, [pc, #340]	; (800d970 <tcp_receive+0xb08>)
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d206      	bcs.n	800d830 <tcp_receive+0x9c8>
 800d822:	4b56      	ldr	r3, [pc, #344]	; (800d97c <tcp_receive+0xb14>)
 800d824:	f240 6207 	movw	r2, #1543	; 0x607
 800d828:	4957      	ldr	r1, [pc, #348]	; (800d988 <tcp_receive+0xb20>)
 800d82a:	4856      	ldr	r0, [pc, #344]	; (800d984 <tcp_receive+0xb1c>)
 800d82c:	f006 fd06 	bl	801423c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d834:	4b4e      	ldr	r3, [pc, #312]	; (800d970 <tcp_receive+0xb08>)
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7fc ffc5 	bl	800a7d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d846:	4b4c      	ldr	r3, [pc, #304]	; (800d978 <tcp_receive+0xb10>)
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	891b      	ldrh	r3, [r3, #8]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d006      	beq.n	800d85e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d850:	4b49      	ldr	r3, [pc, #292]	; (800d978 <tcp_receive+0xb10>)
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	4a4d      	ldr	r2, [pc, #308]	; (800d98c <tcp_receive+0xb24>)
 800d856:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d858:	4b47      	ldr	r3, [pc, #284]	; (800d978 <tcp_receive+0xb10>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d85e:	4b46      	ldr	r3, [pc, #280]	; (800d978 <tcp_receive+0xb10>)
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	899b      	ldrh	r3, [r3, #12]
 800d864:	b29b      	uxth	r3, r3
 800d866:	4618      	mov	r0, r3
 800d868:	f7fa ff5a 	bl	8008720 <lwip_htons>
 800d86c:	4603      	mov	r3, r0
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 80b8 	beq.w	800d9ea <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d87a:	4b45      	ldr	r3, [pc, #276]	; (800d990 <tcp_receive+0xb28>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	f043 0320 	orr.w	r3, r3, #32
 800d882:	b2da      	uxtb	r2, r3
 800d884:	4b42      	ldr	r3, [pc, #264]	; (800d990 <tcp_receive+0xb28>)
 800d886:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d888:	e0af      	b.n	800d9ea <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d88e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	4a36      	ldr	r2, [pc, #216]	; (800d974 <tcp_receive+0xb0c>)
 800d89a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	891b      	ldrh	r3, [r3, #8]
 800d8a0:	461c      	mov	r4, r3
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	899b      	ldrh	r3, [r3, #12]
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fa ff38 	bl	8008720 <lwip_htons>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	f003 0303 	and.w	r3, r3, #3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d001      	beq.n	800d8c0 <tcp_receive+0xa58>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e000      	b.n	800d8c2 <tcp_receive+0xa5a>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	191a      	adds	r2, r3, r4
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	441a      	add	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8d2:	461c      	mov	r4, r3
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	891b      	ldrh	r3, [r3, #8]
 800d8d8:	461d      	mov	r5, r3
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	899b      	ldrh	r3, [r3, #12]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fa ff1c 	bl	8008720 <lwip_htons>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <tcp_receive+0xa90>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e000      	b.n	800d8fa <tcp_receive+0xa92>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	442b      	add	r3, r5
 800d8fc:	429c      	cmp	r4, r3
 800d8fe:	d206      	bcs.n	800d90e <tcp_receive+0xaa6>
 800d900:	4b1e      	ldr	r3, [pc, #120]	; (800d97c <tcp_receive+0xb14>)
 800d902:	f240 622b 	movw	r2, #1579	; 0x62b
 800d906:	4923      	ldr	r1, [pc, #140]	; (800d994 <tcp_receive+0xb2c>)
 800d908:	481e      	ldr	r0, [pc, #120]	; (800d984 <tcp_receive+0xb1c>)
 800d90a:	f006 fc97 	bl	801423c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	891b      	ldrh	r3, [r3, #8]
 800d912:	461c      	mov	r4, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	899b      	ldrh	r3, [r3, #12]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fa feff 	bl	8008720 <lwip_htons>
 800d922:	4603      	mov	r3, r0
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f003 0303 	and.w	r3, r3, #3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <tcp_receive+0xaca>
 800d92e:	2301      	movs	r3, #1
 800d930:	e000      	b.n	800d934 <tcp_receive+0xacc>
 800d932:	2300      	movs	r3, #0
 800d934:	1919      	adds	r1, r3, r4
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d93a:	b28b      	uxth	r3, r1
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	b29a      	uxth	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7fc ff43 	bl	800a7d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	891b      	ldrh	r3, [r3, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d028      	beq.n	800d9a6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d954:	4b0d      	ldr	r3, [pc, #52]	; (800d98c <tcp_receive+0xb24>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01d      	beq.n	800d998 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d95c:	4b0b      	ldr	r3, [pc, #44]	; (800d98c <tcp_receive+0xb24>)
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	4619      	mov	r1, r3
 800d966:	4610      	mov	r0, r2
 800d968:	f7fc fa50 	bl	8009e0c <pbuf_cat>
 800d96c:	e018      	b.n	800d9a0 <tcp_receive+0xb38>
 800d96e:	bf00      	nop
 800d970:	2000a72a 	.word	0x2000a72a
 800d974:	2000a720 	.word	0x2000a720
 800d978:	2000a700 	.word	0x2000a700
 800d97c:	08016bfc 	.word	0x08016bfc
 800d980:	08016fdc 	.word	0x08016fdc
 800d984:	08016c48 	.word	0x08016c48
 800d988:	08017018 	.word	0x08017018
 800d98c:	2000a730 	.word	0x2000a730
 800d990:	2000a72d 	.word	0x2000a72d
 800d994:	08017038 	.word	0x08017038
            } else {
              recv_data = cseg->p;
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	4a70      	ldr	r2, [pc, #448]	; (800db60 <tcp_receive+0xcf8>)
 800d99e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	899b      	ldrh	r3, [r3, #12]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fa feb6 	bl	8008720 <lwip_htons>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00d      	beq.n	800d9dc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d9c0:	4b68      	ldr	r3, [pc, #416]	; (800db64 <tcp_receive+0xcfc>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	f043 0320 	orr.w	r3, r3, #32
 800d9c8:	b2da      	uxtb	r2, r3
 800d9ca:	4b66      	ldr	r3, [pc, #408]	; (800db64 <tcp_receive+0xcfc>)
 800d9cc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	7d1b      	ldrb	r3, [r3, #20]
 800d9d2:	2b04      	cmp	r3, #4
 800d9d4:	d102      	bne.n	800d9dc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2207      	movs	r2, #7
 800d9da:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d9e4:	68b8      	ldr	r0, [r7, #8]
 800d9e6:	f7fd fbd2 	bl	800b18e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d008      	beq.n	800da04 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d9fe:	429a      	cmp	r2, r3
 800da00:	f43f af43 	beq.w	800d88a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	8b5b      	ldrh	r3, [r3, #26]
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00e      	beq.n	800da2e <tcp_receive+0xbc6>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	8b5b      	ldrh	r3, [r3, #26]
 800da14:	f023 0301 	bic.w	r3, r3, #1
 800da18:	b29a      	uxth	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	835a      	strh	r2, [r3, #26]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	8b5b      	ldrh	r3, [r3, #26]
 800da22:	f043 0302 	orr.w	r3, r3, #2
 800da26:	b29a      	uxth	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da2c:	e188      	b.n	800dd40 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	8b5b      	ldrh	r3, [r3, #26]
 800da32:	f043 0301 	orr.w	r3, r3, #1
 800da36:	b29a      	uxth	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da3c:	e180      	b.n	800dd40 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800da46:	4848      	ldr	r0, [pc, #288]	; (800db68 <tcp_receive+0xd00>)
 800da48:	f7fd fbba 	bl	800b1c0 <tcp_seg_copy>
 800da4c:	4602      	mov	r2, r0
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	675a      	str	r2, [r3, #116]	; 0x74
 800da52:	e16d      	b.n	800dd30 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800da54:	2300      	movs	r3, #0
 800da56:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800da5e:	e157      	b.n	800dd10 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800da60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	685a      	ldr	r2, [r3, #4]
 800da66:	4b41      	ldr	r3, [pc, #260]	; (800db6c <tcp_receive+0xd04>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d11d      	bne.n	800daaa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800da6e:	4b3e      	ldr	r3, [pc, #248]	; (800db68 <tcp_receive+0xd00>)
 800da70:	891a      	ldrh	r2, [r3, #8]
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	891b      	ldrh	r3, [r3, #8]
 800da76:	429a      	cmp	r2, r3
 800da78:	f240 814f 	bls.w	800dd1a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da7c:	483a      	ldr	r0, [pc, #232]	; (800db68 <tcp_receive+0xd00>)
 800da7e:	f7fd fb9f 	bl	800b1c0 <tcp_seg_copy>
 800da82:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 8149 	beq.w	800dd1e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800da8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <tcp_receive+0xc32>
                    prev->next = cseg;
 800da92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	601a      	str	r2, [r3, #0]
 800da98:	e002      	b.n	800daa0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800daa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800daa2:	6978      	ldr	r0, [r7, #20]
 800daa4:	f7ff f8dc 	bl	800cc60 <tcp_oos_insert_segment>
                }
                break;
 800daa8:	e139      	b.n	800dd1e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800daaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daac:	2b00      	cmp	r3, #0
 800daae:	d117      	bne.n	800dae0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dab0:	4b2e      	ldr	r3, [pc, #184]	; (800db6c <tcp_receive+0xd04>)
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	da57      	bge.n	800db70 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dac0:	4829      	ldr	r0, [pc, #164]	; (800db68 <tcp_receive+0xd00>)
 800dac2:	f7fd fb7d 	bl	800b1c0 <tcp_seg_copy>
 800dac6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f000 8129 	beq.w	800dd22 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	69ba      	ldr	r2, [r7, #24]
 800dad4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800dad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dad8:	69b8      	ldr	r0, [r7, #24]
 800dada:	f7ff f8c1 	bl	800cc60 <tcp_oos_insert_segment>
                  }
                  break;
 800dade:	e120      	b.n	800dd22 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dae0:	4b22      	ldr	r3, [pc, #136]	; (800db6c <tcp_receive+0xd04>)
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	3b01      	subs	r3, #1
 800daee:	2b00      	cmp	r3, #0
 800daf0:	db3e      	blt.n	800db70 <tcp_receive+0xd08>
 800daf2:	4b1e      	ldr	r3, [pc, #120]	; (800db6c <tcp_receive+0xd04>)
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	3301      	adds	r3, #1
 800db00:	2b00      	cmp	r3, #0
 800db02:	dc35      	bgt.n	800db70 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800db04:	4818      	ldr	r0, [pc, #96]	; (800db68 <tcp_receive+0xd00>)
 800db06:	f7fd fb5b 	bl	800b1c0 <tcp_seg_copy>
 800db0a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f000 8109 	beq.w	800dd26 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800db14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db1c:	8912      	ldrh	r2, [r2, #8]
 800db1e:	441a      	add	r2, r3
 800db20:	4b12      	ldr	r3, [pc, #72]	; (800db6c <tcp_receive+0xd04>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	2b00      	cmp	r3, #0
 800db28:	dd12      	ble.n	800db50 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800db2a:	4b10      	ldr	r3, [pc, #64]	; (800db6c <tcp_receive+0xd04>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	b29a      	uxth	r2, r3
 800db30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	b29b      	uxth	r3, r3
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800db40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db46:	891b      	ldrh	r3, [r3, #8]
 800db48:	4619      	mov	r1, r3
 800db4a:	4610      	mov	r0, r2
 800db4c:	f7fb ff16 	bl	800997c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800db50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800db56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db58:	69f8      	ldr	r0, [r7, #28]
 800db5a:	f7ff f881 	bl	800cc60 <tcp_oos_insert_segment>
                  }
                  break;
 800db5e:	e0e2      	b.n	800dd26 <tcp_receive+0xebe>
 800db60:	2000a730 	.word	0x2000a730
 800db64:	2000a72d 	.word	0x2000a72d
 800db68:	2000a700 	.word	0x2000a700
 800db6c:	2000a720 	.word	0x2000a720
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800db70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db72:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800db74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f040 80c6 	bne.w	800dd0a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800db7e:	4b80      	ldr	r3, [pc, #512]	; (800dd80 <tcp_receive+0xf18>)
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f340 80bd 	ble.w	800dd0a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800db90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	899b      	ldrh	r3, [r3, #12]
 800db96:	b29b      	uxth	r3, r3
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fa fdc1 	bl	8008720 <lwip_htons>
 800db9e:	4603      	mov	r3, r0
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f040 80bf 	bne.w	800dd2a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dbac:	4875      	ldr	r0, [pc, #468]	; (800dd84 <tcp_receive+0xf1c>)
 800dbae:	f7fd fb07 	bl	800b1c0 <tcp_seg_copy>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f000 80b6 	beq.w	800dd2e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbca:	8912      	ldrh	r2, [r2, #8]
 800dbcc:	441a      	add	r2, r3
 800dbce:	4b6c      	ldr	r3, [pc, #432]	; (800dd80 <tcp_receive+0xf18>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd12      	ble.n	800dbfe <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dbd8:	4b69      	ldr	r3, [pc, #420]	; (800dd80 <tcp_receive+0xf18>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf0:	685a      	ldr	r2, [r3, #4]
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	891b      	ldrh	r3, [r3, #8]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	f7fb febf 	bl	800997c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dbfe:	4b62      	ldr	r3, [pc, #392]	; (800dd88 <tcp_receive+0xf20>)
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	461a      	mov	r2, r3
 800dc04:	4b5e      	ldr	r3, [pc, #376]	; (800dd80 <tcp_receive+0xf18>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	441a      	add	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0e:	6879      	ldr	r1, [r7, #4]
 800dc10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc12:	440b      	add	r3, r1
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f340 8089 	ble.w	800dd2e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	899b      	ldrh	r3, [r3, #12]
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fa fd7a 	bl	8008720 <lwip_htons>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	f003 0301 	and.w	r3, r3, #1
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d022      	beq.n	800dc7e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	899b      	ldrh	r3, [r3, #12]
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	b21b      	sxth	r3, r3
 800dc44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dc48:	b21c      	sxth	r4, r3
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	899b      	ldrh	r3, [r3, #12]
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fa fd63 	bl	8008720 <lwip_htons>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fa fd5a 	bl	8008720 <lwip_htons>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	b21b      	sxth	r3, r3
 800dc70:	4323      	orrs	r3, r4
 800dc72:	b21a      	sxth	r2, r3
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	b292      	uxth	r2, r2
 800dc7c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc88:	4413      	add	r3, r2
 800dc8a:	b299      	uxth	r1, r3
 800dc8c:	4b3c      	ldr	r3, [pc, #240]	; (800dd80 <tcp_receive+0xf18>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	1a8a      	subs	r2, r1, r2
 800dc98:	b292      	uxth	r2, r2
 800dc9a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685a      	ldr	r2, [r3, #4]
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	891b      	ldrh	r3, [r3, #8]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	4610      	mov	r0, r2
 800dcac:	f7fb fe66 	bl	800997c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	891c      	ldrh	r4, [r3, #8]
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	899b      	ldrh	r3, [r3, #12]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fa fd2d 	bl	8008720 <lwip_htons>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	f003 0303 	and.w	r3, r3, #3
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d001      	beq.n	800dcd6 <tcp_receive+0xe6e>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e000      	b.n	800dcd8 <tcp_receive+0xe70>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	4423      	add	r3, r4
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	4b2a      	ldr	r3, [pc, #168]	; (800dd88 <tcp_receive+0xf20>)
 800dcde:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dce0:	4b29      	ldr	r3, [pc, #164]	; (800dd88 <tcp_receive+0xf20>)
 800dce2:	881b      	ldrh	r3, [r3, #0]
 800dce4:	461a      	mov	r2, r3
 800dce6:	4b26      	ldr	r3, [pc, #152]	; (800dd80 <tcp_receive+0xf18>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	441a      	add	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dcf4:	440b      	add	r3, r1
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d019      	beq.n	800dd2e <tcp_receive+0xec6>
 800dcfa:	4b24      	ldr	r3, [pc, #144]	; (800dd8c <tcp_receive+0xf24>)
 800dcfc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dd00:	4923      	ldr	r1, [pc, #140]	; (800dd90 <tcp_receive+0xf28>)
 800dd02:	4824      	ldr	r0, [pc, #144]	; (800dd94 <tcp_receive+0xf2c>)
 800dd04:	f006 fa9a 	bl	801423c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dd08:	e011      	b.n	800dd2e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f47f aea4 	bne.w	800da60 <tcp_receive+0xbf8>
 800dd18:	e00a      	b.n	800dd30 <tcp_receive+0xec8>
                break;
 800dd1a:	bf00      	nop
 800dd1c:	e008      	b.n	800dd30 <tcp_receive+0xec8>
                break;
 800dd1e:	bf00      	nop
 800dd20:	e006      	b.n	800dd30 <tcp_receive+0xec8>
                  break;
 800dd22:	bf00      	nop
 800dd24:	e004      	b.n	800dd30 <tcp_receive+0xec8>
                  break;
 800dd26:	bf00      	nop
 800dd28:	e002      	b.n	800dd30 <tcp_receive+0xec8>
                  break;
 800dd2a:	bf00      	nop
 800dd2c:	e000      	b.n	800dd30 <tcp_receive+0xec8>
                break;
 800dd2e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f001 fa33 	bl	800f19c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dd36:	e003      	b.n	800dd40 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f001 fa2f 	bl	800f19c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd3e:	e01a      	b.n	800dd76 <tcp_receive+0xf0e>
 800dd40:	e019      	b.n	800dd76 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dd42:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <tcp_receive+0xf18>)
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	db0a      	blt.n	800dd66 <tcp_receive+0xefe>
 800dd50:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <tcp_receive+0xf18>)
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd5c:	440b      	add	r3, r1
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	3301      	adds	r3, #1
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	dd07      	ble.n	800dd76 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	8b5b      	ldrh	r3, [r3, #26]
 800dd6a:	f043 0302 	orr.w	r3, r3, #2
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dd74:	e7ff      	b.n	800dd76 <tcp_receive+0xf0e>
 800dd76:	bf00      	nop
 800dd78:	3750      	adds	r7, #80	; 0x50
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	2000a720 	.word	0x2000a720
 800dd84:	2000a700 	.word	0x2000a700
 800dd88:	2000a72a 	.word	0x2000a72a
 800dd8c:	08016bfc 	.word	0x08016bfc
 800dd90:	08016fa4 	.word	0x08016fa4
 800dd94:	08016c48 	.word	0x08016c48

0800dd98 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dd9e:	4b15      	ldr	r3, [pc, #84]	; (800ddf4 <tcp_get_next_optbyte+0x5c>)
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	1c5a      	adds	r2, r3, #1
 800dda4:	b291      	uxth	r1, r2
 800dda6:	4a13      	ldr	r2, [pc, #76]	; (800ddf4 <tcp_get_next_optbyte+0x5c>)
 800dda8:	8011      	strh	r1, [r2, #0]
 800ddaa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ddac:	4b12      	ldr	r3, [pc, #72]	; (800ddf8 <tcp_get_next_optbyte+0x60>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d004      	beq.n	800ddbe <tcp_get_next_optbyte+0x26>
 800ddb4:	4b11      	ldr	r3, [pc, #68]	; (800ddfc <tcp_get_next_optbyte+0x64>)
 800ddb6:	881b      	ldrh	r3, [r3, #0]
 800ddb8:	88fa      	ldrh	r2, [r7, #6]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d208      	bcs.n	800ddd0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ddbe:	4b10      	ldr	r3, [pc, #64]	; (800de00 <tcp_get_next_optbyte+0x68>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	3314      	adds	r3, #20
 800ddc4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ddc6:	88fb      	ldrh	r3, [r7, #6]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	4413      	add	r3, r2
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	e00b      	b.n	800dde8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ddd0:	88fb      	ldrh	r3, [r7, #6]
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	4b09      	ldr	r3, [pc, #36]	; (800ddfc <tcp_get_next_optbyte+0x64>)
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ddde:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <tcp_get_next_optbyte+0x60>)
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	797b      	ldrb	r3, [r7, #5]
 800dde4:	4413      	add	r3, r2
 800dde6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr
 800ddf4:	2000a71c 	.word	0x2000a71c
 800ddf8:	2000a718 	.word	0x2000a718
 800ddfc:	2000a716 	.word	0x2000a716
 800de00:	2000a710 	.word	0x2000a710

0800de04 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <tcp_parseopt+0x1c>
 800de12:	4b32      	ldr	r3, [pc, #200]	; (800dedc <tcp_parseopt+0xd8>)
 800de14:	f240 727d 	movw	r2, #1917	; 0x77d
 800de18:	4931      	ldr	r1, [pc, #196]	; (800dee0 <tcp_parseopt+0xdc>)
 800de1a:	4832      	ldr	r0, [pc, #200]	; (800dee4 <tcp_parseopt+0xe0>)
 800de1c:	f006 fa0e 	bl	801423c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800de20:	4b31      	ldr	r3, [pc, #196]	; (800dee8 <tcp_parseopt+0xe4>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d055      	beq.n	800ded4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de28:	4b30      	ldr	r3, [pc, #192]	; (800deec <tcp_parseopt+0xe8>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	801a      	strh	r2, [r3, #0]
 800de2e:	e045      	b.n	800debc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800de30:	f7ff ffb2 	bl	800dd98 <tcp_get_next_optbyte>
 800de34:	4603      	mov	r3, r0
 800de36:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800de38:	7bfb      	ldrb	r3, [r7, #15]
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d006      	beq.n	800de4c <tcp_parseopt+0x48>
 800de3e:	2b02      	cmp	r3, #2
 800de40:	dc2b      	bgt.n	800de9a <tcp_parseopt+0x96>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d041      	beq.n	800deca <tcp_parseopt+0xc6>
 800de46:	2b01      	cmp	r3, #1
 800de48:	d127      	bne.n	800de9a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800de4a:	e037      	b.n	800debc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800de4c:	f7ff ffa4 	bl	800dd98 <tcp_get_next_optbyte>
 800de50:	4603      	mov	r3, r0
 800de52:	2b04      	cmp	r3, #4
 800de54:	d13b      	bne.n	800dece <tcp_parseopt+0xca>
 800de56:	4b25      	ldr	r3, [pc, #148]	; (800deec <tcp_parseopt+0xe8>)
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	3301      	adds	r3, #1
 800de5c:	4a22      	ldr	r2, [pc, #136]	; (800dee8 <tcp_parseopt+0xe4>)
 800de5e:	8812      	ldrh	r2, [r2, #0]
 800de60:	4293      	cmp	r3, r2
 800de62:	da34      	bge.n	800dece <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800de64:	f7ff ff98 	bl	800dd98 <tcp_get_next_optbyte>
 800de68:	4603      	mov	r3, r0
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	021b      	lsls	r3, r3, #8
 800de6e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800de70:	f7ff ff92 	bl	800dd98 <tcp_get_next_optbyte>
 800de74:	4603      	mov	r3, r0
 800de76:	b29a      	uxth	r2, r3
 800de78:	89bb      	ldrh	r3, [r7, #12]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800de7e:	89bb      	ldrh	r3, [r7, #12]
 800de80:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de84:	d804      	bhi.n	800de90 <tcp_parseopt+0x8c>
 800de86:	89bb      	ldrh	r3, [r7, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <tcp_parseopt+0x8c>
 800de8c:	89ba      	ldrh	r2, [r7, #12]
 800de8e:	e001      	b.n	800de94 <tcp_parseopt+0x90>
 800de90:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800de98:	e010      	b.n	800debc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800de9a:	f7ff ff7d 	bl	800dd98 <tcp_get_next_optbyte>
 800de9e:	4603      	mov	r3, r0
 800dea0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dea2:	7afb      	ldrb	r3, [r7, #11]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d914      	bls.n	800ded2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dea8:	7afb      	ldrb	r3, [r7, #11]
 800deaa:	b29a      	uxth	r2, r3
 800deac:	4b0f      	ldr	r3, [pc, #60]	; (800deec <tcp_parseopt+0xe8>)
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	4413      	add	r3, r2
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	3b02      	subs	r3, #2
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	4b0c      	ldr	r3, [pc, #48]	; (800deec <tcp_parseopt+0xe8>)
 800deba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800debc:	4b0b      	ldr	r3, [pc, #44]	; (800deec <tcp_parseopt+0xe8>)
 800debe:	881a      	ldrh	r2, [r3, #0]
 800dec0:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <tcp_parseopt+0xe4>)
 800dec2:	881b      	ldrh	r3, [r3, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d3b3      	bcc.n	800de30 <tcp_parseopt+0x2c>
 800dec8:	e004      	b.n	800ded4 <tcp_parseopt+0xd0>
          return;
 800deca:	bf00      	nop
 800decc:	e002      	b.n	800ded4 <tcp_parseopt+0xd0>
            return;
 800dece:	bf00      	nop
 800ded0:	e000      	b.n	800ded4 <tcp_parseopt+0xd0>
            return;
 800ded2:	bf00      	nop
      }
    }
  }
}
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	08016bfc 	.word	0x08016bfc
 800dee0:	08017060 	.word	0x08017060
 800dee4:	08016c48 	.word	0x08016c48
 800dee8:	2000a714 	.word	0x2000a714
 800deec:	2000a71c 	.word	0x2000a71c

0800def0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800def0:	b480      	push	{r7}
 800def2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800def4:	4b05      	ldr	r3, [pc, #20]	; (800df0c <tcp_trigger_input_pcb_close+0x1c>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f043 0310 	orr.w	r3, r3, #16
 800defc:	b2da      	uxtb	r2, r3
 800defe:	4b03      	ldr	r3, [pc, #12]	; (800df0c <tcp_trigger_input_pcb_close+0x1c>)
 800df00:	701a      	strb	r2, [r3, #0]
}
 800df02:	bf00      	nop
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	2000a72d 	.word	0x2000a72d

0800df10 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <tcp_route+0x28>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	7a1b      	ldrb	r3, [r3, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d006      	beq.n	800df38 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	7a1b      	ldrb	r3, [r3, #8]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fb fb4a 	bl	80095c8 <netif_get_by_index>
 800df34:	4603      	mov	r3, r0
 800df36:	e003      	b.n	800df40 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f003 f95f 	bl	80111fc <ip4_route>
 800df3e:	4603      	mov	r3, r0
  }
}
 800df40:	4618      	mov	r0, r3
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800df48:	b590      	push	{r4, r7, lr}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	603b      	str	r3, [r7, #0]
 800df54:	4613      	mov	r3, r2
 800df56:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d105      	bne.n	800df6a <tcp_create_segment+0x22>
 800df5e:	4b44      	ldr	r3, [pc, #272]	; (800e070 <tcp_create_segment+0x128>)
 800df60:	22a3      	movs	r2, #163	; 0xa3
 800df62:	4944      	ldr	r1, [pc, #272]	; (800e074 <tcp_create_segment+0x12c>)
 800df64:	4844      	ldr	r0, [pc, #272]	; (800e078 <tcp_create_segment+0x130>)
 800df66:	f006 f969 	bl	801423c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d105      	bne.n	800df7c <tcp_create_segment+0x34>
 800df70:	4b3f      	ldr	r3, [pc, #252]	; (800e070 <tcp_create_segment+0x128>)
 800df72:	22a4      	movs	r2, #164	; 0xa4
 800df74:	4941      	ldr	r1, [pc, #260]	; (800e07c <tcp_create_segment+0x134>)
 800df76:	4840      	ldr	r0, [pc, #256]	; (800e078 <tcp_create_segment+0x130>)
 800df78:	f006 f960 	bl	801423c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800df7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	b2db      	uxtb	r3, r3
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800df8a:	2003      	movs	r0, #3
 800df8c:	f7fb f81e 	bl	8008fcc <memp_malloc>
 800df90:	6138      	str	r0, [r7, #16]
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d104      	bne.n	800dfa2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800df98:	68b8      	ldr	r0, [r7, #8]
 800df9a:	f7fb fe75 	bl	8009c88 <pbuf_free>
    return NULL;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e061      	b.n	800e066 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dfa8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	2200      	movs	r2, #0
 800dfae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	891a      	ldrh	r2, [r3, #8]
 800dfba:	7dfb      	ldrb	r3, [r7, #23]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d205      	bcs.n	800dfce <tcp_create_segment+0x86>
 800dfc2:	4b2b      	ldr	r3, [pc, #172]	; (800e070 <tcp_create_segment+0x128>)
 800dfc4:	22b0      	movs	r2, #176	; 0xb0
 800dfc6:	492e      	ldr	r1, [pc, #184]	; (800e080 <tcp_create_segment+0x138>)
 800dfc8:	482b      	ldr	r0, [pc, #172]	; (800e078 <tcp_create_segment+0x130>)
 800dfca:	f006 f937 	bl	801423c <iprintf>
  seg->len = p->tot_len - optlen;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	891a      	ldrh	r2, [r3, #8]
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dfde:	2114      	movs	r1, #20
 800dfe0:	68b8      	ldr	r0, [r7, #8]
 800dfe2:	f7fb fdbb 	bl	8009b5c <pbuf_add_header>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d004      	beq.n	800dff6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800dfec:	6938      	ldr	r0, [r7, #16]
 800dfee:	f7fd f8ce 	bl	800b18e <tcp_seg_free>
    return NULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	e037      	b.n	800e066 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	8ada      	ldrh	r2, [r3, #22]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	68dc      	ldr	r4, [r3, #12]
 800e008:	4610      	mov	r0, r2
 800e00a:	f7fa fb89 	bl	8008720 <lwip_htons>
 800e00e:	4603      	mov	r3, r0
 800e010:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8b1a      	ldrh	r2, [r3, #24]
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	68dc      	ldr	r4, [r3, #12]
 800e01a:	4610      	mov	r0, r2
 800e01c:	f7fa fb80 	bl	8008720 <lwip_htons>
 800e020:	4603      	mov	r3, r0
 800e022:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	68dc      	ldr	r4, [r3, #12]
 800e028:	6838      	ldr	r0, [r7, #0]
 800e02a:	f7fa fb8e 	bl	800874a <lwip_htonl>
 800e02e:	4603      	mov	r3, r0
 800e030:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e032:	7dfb      	ldrb	r3, [r7, #23]
 800e034:	089b      	lsrs	r3, r3, #2
 800e036:	b2db      	uxtb	r3, r3
 800e038:	b29b      	uxth	r3, r3
 800e03a:	3305      	adds	r3, #5
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	031b      	lsls	r3, r3, #12
 800e040:	b29a      	uxth	r2, r3
 800e042:	79fb      	ldrb	r3, [r7, #7]
 800e044:	b29b      	uxth	r3, r3
 800e046:	4313      	orrs	r3, r2
 800e048:	b29a      	uxth	r2, r3
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	68dc      	ldr	r4, [r3, #12]
 800e04e:	4610      	mov	r0, r2
 800e050:	f7fa fb66 	bl	8008720 <lwip_htons>
 800e054:	4603      	mov	r3, r0
 800e056:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	749a      	strb	r2, [r3, #18]
 800e060:	2200      	movs	r2, #0
 800e062:	74da      	strb	r2, [r3, #19]
  return seg;
 800e064:	693b      	ldr	r3, [r7, #16]
}
 800e066:	4618      	mov	r0, r3
 800e068:	371c      	adds	r7, #28
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd90      	pop	{r4, r7, pc}
 800e06e:	bf00      	nop
 800e070:	0801707c 	.word	0x0801707c
 800e074:	080170b0 	.word	0x080170b0
 800e078:	080170d0 	.word	0x080170d0
 800e07c:	080170f8 	.word	0x080170f8
 800e080:	0801711c 	.word	0x0801711c

0800e084 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e084:	b590      	push	{r4, r7, lr}
 800e086:	b08b      	sub	sp, #44	; 0x2c
 800e088:	af02      	add	r7, sp, #8
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	460b      	mov	r3, r1
 800e08e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e090:	2300      	movs	r3, #0
 800e092:	61fb      	str	r3, [r7, #28]
 800e094:	2300      	movs	r3, #0
 800e096:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d106      	bne.n	800e0b0 <tcp_split_unsent_seg+0x2c>
 800e0a2:	4b95      	ldr	r3, [pc, #596]	; (800e2f8 <tcp_split_unsent_seg+0x274>)
 800e0a4:	f240 324b 	movw	r2, #843	; 0x34b
 800e0a8:	4994      	ldr	r1, [pc, #592]	; (800e2fc <tcp_split_unsent_seg+0x278>)
 800e0aa:	4895      	ldr	r0, [pc, #596]	; (800e300 <tcp_split_unsent_seg+0x27c>)
 800e0ac:	f006 f8c6 	bl	801423c <iprintf>

  useg = pcb->unsent;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d102      	bne.n	800e0c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c0:	e116      	b.n	800e2f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e0c2:	887b      	ldrh	r3, [r7, #2]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d109      	bne.n	800e0dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e0c8:	4b8b      	ldr	r3, [pc, #556]	; (800e2f8 <tcp_split_unsent_seg+0x274>)
 800e0ca:	f240 3253 	movw	r2, #851	; 0x353
 800e0ce:	498d      	ldr	r1, [pc, #564]	; (800e304 <tcp_split_unsent_seg+0x280>)
 800e0d0:	488b      	ldr	r0, [pc, #556]	; (800e300 <tcp_split_unsent_seg+0x27c>)
 800e0d2:	f006 f8b3 	bl	801423c <iprintf>
    return ERR_VAL;
 800e0d6:	f06f 0305 	mvn.w	r3, #5
 800e0da:	e109      	b.n	800e2f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	891b      	ldrh	r3, [r3, #8]
 800e0e0:	887a      	ldrh	r2, [r7, #2]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d301      	bcc.n	800e0ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e102      	b.n	800e2f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0ee:	887a      	ldrh	r2, [r7, #2]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d906      	bls.n	800e102 <tcp_split_unsent_seg+0x7e>
 800e0f4:	4b80      	ldr	r3, [pc, #512]	; (800e2f8 <tcp_split_unsent_seg+0x274>)
 800e0f6:	f240 325b 	movw	r2, #859	; 0x35b
 800e0fa:	4983      	ldr	r1, [pc, #524]	; (800e308 <tcp_split_unsent_seg+0x284>)
 800e0fc:	4880      	ldr	r0, [pc, #512]	; (800e300 <tcp_split_unsent_seg+0x27c>)
 800e0fe:	f006 f89d 	bl	801423c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	891b      	ldrh	r3, [r3, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <tcp_split_unsent_seg+0x94>
 800e10a:	4b7b      	ldr	r3, [pc, #492]	; (800e2f8 <tcp_split_unsent_seg+0x274>)
 800e10c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e110:	497e      	ldr	r1, [pc, #504]	; (800e30c <tcp_split_unsent_seg+0x288>)
 800e112:	487b      	ldr	r0, [pc, #492]	; (800e300 <tcp_split_unsent_seg+0x27c>)
 800e114:	f006 f892 	bl	801423c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	7a9b      	ldrb	r3, [r3, #10]
 800e11c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	b2db      	uxtb	r3, r3
 800e124:	f003 0304 	and.w	r3, r3, #4
 800e128:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	891a      	ldrh	r2, [r3, #8]
 800e12e:	887b      	ldrh	r3, [r7, #2]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e134:	7bbb      	ldrb	r3, [r7, #14]
 800e136:	b29a      	uxth	r2, r3
 800e138:	89bb      	ldrh	r3, [r7, #12]
 800e13a:	4413      	add	r3, r2
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e142:	4619      	mov	r1, r3
 800e144:	2036      	movs	r0, #54	; 0x36
 800e146:	f7fb fabb 	bl	80096c0 <pbuf_alloc>
 800e14a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f000 80b7 	beq.w	800e2c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	891a      	ldrh	r2, [r3, #8]
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	891b      	ldrh	r3, [r3, #8]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	b29a      	uxth	r2, r3
 800e162:	887b      	ldrh	r3, [r7, #2]
 800e164:	4413      	add	r3, r2
 800e166:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	6858      	ldr	r0, [r3, #4]
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	7bbb      	ldrb	r3, [r7, #14]
 800e172:	18d1      	adds	r1, r2, r3
 800e174:	897b      	ldrh	r3, [r7, #10]
 800e176:	89ba      	ldrh	r2, [r7, #12]
 800e178:	f7fb ff80 	bl	800a07c <pbuf_copy_partial>
 800e17c:	4603      	mov	r3, r0
 800e17e:	461a      	mov	r2, r3
 800e180:	89bb      	ldrh	r3, [r7, #12]
 800e182:	4293      	cmp	r3, r2
 800e184:	f040 809f 	bne.w	800e2c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	899b      	ldrh	r3, [r3, #12]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	4618      	mov	r0, r3
 800e192:	f7fa fac5 	bl	8008720 <lwip_htons>
 800e196:	4603      	mov	r3, r0
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e19e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e1a4:	7efb      	ldrb	r3, [r7, #27]
 800e1a6:	f003 0308 	and.w	r3, r3, #8
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d007      	beq.n	800e1be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e1ae:	7efb      	ldrb	r3, [r7, #27]
 800e1b0:	f023 0308 	bic.w	r3, r3, #8
 800e1b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e1b6:	7ebb      	ldrb	r3, [r7, #26]
 800e1b8:	f043 0308 	orr.w	r3, r3, #8
 800e1bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e1be:	7efb      	ldrb	r3, [r7, #27]
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d007      	beq.n	800e1d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e1c8:	7efb      	ldrb	r3, [r7, #27]
 800e1ca:	f023 0301 	bic.w	r3, r3, #1
 800e1ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e1d0:	7ebb      	ldrb	r3, [r7, #26]
 800e1d2:	f043 0301 	orr.w	r3, r3, #1
 800e1d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fa fab3 	bl	800874a <lwip_htonl>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	887b      	ldrh	r3, [r7, #2]
 800e1e8:	18d1      	adds	r1, r2, r3
 800e1ea:	7eba      	ldrb	r2, [r7, #26]
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	6939      	ldr	r1, [r7, #16]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f7ff fea7 	bl	800df48 <tcp_create_segment>
 800e1fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d063      	beq.n	800e2ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	4618      	mov	r0, r3
 800e208:	f7fb fdc6 	bl	8009d98 <pbuf_clen>
 800e20c:	4603      	mov	r3, r0
 800e20e:	461a      	mov	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e216:	1a9b      	subs	r3, r3, r2
 800e218:	b29a      	uxth	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	6858      	ldr	r0, [r3, #4]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	891a      	ldrh	r2, [r3, #8]
 800e22a:	89bb      	ldrh	r3, [r7, #12]
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	b29b      	uxth	r3, r3
 800e230:	4619      	mov	r1, r3
 800e232:	f7fb fba3 	bl	800997c <pbuf_realloc>
  useg->len -= remainder;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	891a      	ldrh	r2, [r3, #8]
 800e23a:	89bb      	ldrh	r3, [r7, #12]
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	b29a      	uxth	r2, r3
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	899b      	ldrh	r3, [r3, #12]
 800e24a:	b29c      	uxth	r4, r3
 800e24c:	7efb      	ldrb	r3, [r7, #27]
 800e24e:	b29b      	uxth	r3, r3
 800e250:	4618      	mov	r0, r3
 800e252:	f7fa fa65 	bl	8008720 <lwip_htons>
 800e256:	4603      	mov	r3, r0
 800e258:	461a      	mov	r2, r3
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	4322      	orrs	r2, r4
 800e260:	b292      	uxth	r2, r2
 800e262:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fb fd95 	bl	8009d98 <pbuf_clen>
 800e26e:	4603      	mov	r3, r0
 800e270:	461a      	mov	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e278:	4413      	add	r3, r2
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	4618      	mov	r0, r3
 800e288:	f7fb fd86 	bl	8009d98 <pbuf_clen>
 800e28c:	4603      	mov	r3, r0
 800e28e:	461a      	mov	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e296:	4413      	add	r3, r2
 800e298:	b29a      	uxth	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	69fa      	ldr	r2, [r7, #28]
 800e2ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d103      	bne.n	800e2be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e016      	b.n	800e2f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e2c2:	bf00      	nop
 800e2c4:	e002      	b.n	800e2cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2c6:	bf00      	nop
 800e2c8:	e000      	b.n	800e2cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d006      	beq.n	800e2e0 <tcp_split_unsent_seg+0x25c>
 800e2d2:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <tcp_split_unsent_seg+0x274>)
 800e2d4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e2d8:	490d      	ldr	r1, [pc, #52]	; (800e310 <tcp_split_unsent_seg+0x28c>)
 800e2da:	4809      	ldr	r0, [pc, #36]	; (800e300 <tcp_split_unsent_seg+0x27c>)
 800e2dc:	f005 ffae 	bl	801423c <iprintf>
  if (p != NULL) {
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e2e6:	6938      	ldr	r0, [r7, #16]
 800e2e8:	f7fb fcce 	bl	8009c88 <pbuf_free>
  }

  return ERR_MEM;
 800e2ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3724      	adds	r7, #36	; 0x24
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd90      	pop	{r4, r7, pc}
 800e2f8:	0801707c 	.word	0x0801707c
 800e2fc:	08017410 	.word	0x08017410
 800e300:	080170d0 	.word	0x080170d0
 800e304:	08017434 	.word	0x08017434
 800e308:	08017458 	.word	0x08017458
 800e30c:	08017468 	.word	0x08017468
 800e310:	08017478 	.word	0x08017478

0800e314 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e314:	b590      	push	{r4, r7, lr}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d106      	bne.n	800e330 <tcp_send_fin+0x1c>
 800e322:	4b21      	ldr	r3, [pc, #132]	; (800e3a8 <tcp_send_fin+0x94>)
 800e324:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e328:	4920      	ldr	r1, [pc, #128]	; (800e3ac <tcp_send_fin+0x98>)
 800e32a:	4821      	ldr	r0, [pc, #132]	; (800e3b0 <tcp_send_fin+0x9c>)
 800e32c:	f005 ff86 	bl	801423c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e334:	2b00      	cmp	r3, #0
 800e336:	d02e      	beq.n	800e396 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e33c:	60fb      	str	r3, [r7, #12]
 800e33e:	e002      	b.n	800e346 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1f8      	bne.n	800e340 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	899b      	ldrh	r3, [r3, #12]
 800e354:	b29b      	uxth	r3, r3
 800e356:	4618      	mov	r0, r3
 800e358:	f7fa f9e2 	bl	8008720 <lwip_htons>
 800e35c:	4603      	mov	r3, r0
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	f003 0307 	and.w	r3, r3, #7
 800e364:	2b00      	cmp	r3, #0
 800e366:	d116      	bne.n	800e396 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	899b      	ldrh	r3, [r3, #12]
 800e36e:	b29c      	uxth	r4, r3
 800e370:	2001      	movs	r0, #1
 800e372:	f7fa f9d5 	bl	8008720 <lwip_htons>
 800e376:	4603      	mov	r3, r0
 800e378:	461a      	mov	r2, r3
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	4322      	orrs	r2, r4
 800e380:	b292      	uxth	r2, r2
 800e382:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	8b5b      	ldrh	r3, [r3, #26]
 800e388:	f043 0320 	orr.w	r3, r3, #32
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e392:	2300      	movs	r3, #0
 800e394:	e004      	b.n	800e3a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e396:	2101      	movs	r1, #1
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 f80b 	bl	800e3b4 <tcp_enqueue_flags>
 800e39e:	4603      	mov	r3, r0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3714      	adds	r7, #20
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd90      	pop	{r4, r7, pc}
 800e3a8:	0801707c 	.word	0x0801707c
 800e3ac:	08017484 	.word	0x08017484
 800e3b0:	080170d0 	.word	0x080170d0

0800e3b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08a      	sub	sp, #40	; 0x28
 800e3b8:	af02      	add	r7, sp, #8
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e3c8:	78fb      	ldrb	r3, [r7, #3]
 800e3ca:	f003 0303 	and.w	r3, r3, #3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <tcp_enqueue_flags+0x2c>
 800e3d2:	4b67      	ldr	r3, [pc, #412]	; (800e570 <tcp_enqueue_flags+0x1bc>)
 800e3d4:	f240 4211 	movw	r2, #1041	; 0x411
 800e3d8:	4966      	ldr	r1, [pc, #408]	; (800e574 <tcp_enqueue_flags+0x1c0>)
 800e3da:	4867      	ldr	r0, [pc, #412]	; (800e578 <tcp_enqueue_flags+0x1c4>)
 800e3dc:	f005 ff2e 	bl	801423c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_enqueue_flags+0x40>
 800e3e6:	4b62      	ldr	r3, [pc, #392]	; (800e570 <tcp_enqueue_flags+0x1bc>)
 800e3e8:	f240 4213 	movw	r2, #1043	; 0x413
 800e3ec:	4963      	ldr	r1, [pc, #396]	; (800e57c <tcp_enqueue_flags+0x1c8>)
 800e3ee:	4862      	ldr	r0, [pc, #392]	; (800e578 <tcp_enqueue_flags+0x1c4>)
 800e3f0:	f005 ff24 	bl	801423c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	f003 0302 	and.w	r3, r3, #2
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e3fe:	2301      	movs	r3, #1
 800e400:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e402:	7ffb      	ldrb	r3, [r7, #31]
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	b2db      	uxtb	r3, r3
 800e408:	f003 0304 	and.w	r3, r3, #4
 800e40c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	b29b      	uxth	r3, r3
 800e412:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e416:	4619      	mov	r1, r3
 800e418:	2036      	movs	r0, #54	; 0x36
 800e41a:	f7fb f951 	bl	80096c0 <pbuf_alloc>
 800e41e:	6138      	str	r0, [r7, #16]
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d109      	bne.n	800e43a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	8b5b      	ldrh	r3, [r3, #26]
 800e42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e434:	f04f 33ff 	mov.w	r3, #4294967295
 800e438:	e095      	b.n	800e566 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	895a      	ldrh	r2, [r3, #10]
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
 800e440:	b29b      	uxth	r3, r3
 800e442:	429a      	cmp	r2, r3
 800e444:	d206      	bcs.n	800e454 <tcp_enqueue_flags+0xa0>
 800e446:	4b4a      	ldr	r3, [pc, #296]	; (800e570 <tcp_enqueue_flags+0x1bc>)
 800e448:	f240 4239 	movw	r2, #1081	; 0x439
 800e44c:	494c      	ldr	r1, [pc, #304]	; (800e580 <tcp_enqueue_flags+0x1cc>)
 800e44e:	484a      	ldr	r0, [pc, #296]	; (800e578 <tcp_enqueue_flags+0x1c4>)
 800e450:	f005 fef4 	bl	801423c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e458:	78fa      	ldrb	r2, [r7, #3]
 800e45a:	7ffb      	ldrb	r3, [r7, #31]
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	460b      	mov	r3, r1
 800e460:	6939      	ldr	r1, [r7, #16]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff fd70 	bl	800df48 <tcp_create_segment>
 800e468:	60f8      	str	r0, [r7, #12]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d109      	bne.n	800e484 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	8b5b      	ldrh	r3, [r3, #26]
 800e474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e478:	b29a      	uxth	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e47e:	f04f 33ff 	mov.w	r3, #4294967295
 800e482:	e070      	b.n	800e566 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	f003 0303 	and.w	r3, r3, #3
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d006      	beq.n	800e49e <tcp_enqueue_flags+0xea>
 800e490:	4b37      	ldr	r3, [pc, #220]	; (800e570 <tcp_enqueue_flags+0x1bc>)
 800e492:	f240 4242 	movw	r2, #1090	; 0x442
 800e496:	493b      	ldr	r1, [pc, #236]	; (800e584 <tcp_enqueue_flags+0x1d0>)
 800e498:	4837      	ldr	r0, [pc, #220]	; (800e578 <tcp_enqueue_flags+0x1c4>)
 800e49a:	f005 fecf 	bl	801423c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	891b      	ldrh	r3, [r3, #8]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d006      	beq.n	800e4b4 <tcp_enqueue_flags+0x100>
 800e4a6:	4b32      	ldr	r3, [pc, #200]	; (800e570 <tcp_enqueue_flags+0x1bc>)
 800e4a8:	f240 4243 	movw	r2, #1091	; 0x443
 800e4ac:	4936      	ldr	r1, [pc, #216]	; (800e588 <tcp_enqueue_flags+0x1d4>)
 800e4ae:	4832      	ldr	r0, [pc, #200]	; (800e578 <tcp_enqueue_flags+0x1c4>)
 800e4b0:	f005 fec4 	bl	801423c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d103      	bne.n	800e4c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e4c2:	e00d      	b.n	800e4e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4c8:	61bb      	str	r3, [r7, #24]
 800e4ca:	e002      	b.n	800e4d2 <tcp_enqueue_flags+0x11e>
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	61bb      	str	r3, [r7, #24]
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1f8      	bne.n	800e4cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	f003 0302 	and.w	r3, r3, #2
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d104      	bne.n	800e4fc <tcp_enqueue_flags+0x148>
 800e4f2:	78fb      	ldrb	r3, [r7, #3]
 800e4f4:	f003 0301 	and.w	r3, r3, #1
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d004      	beq.n	800e506 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e500:	1c5a      	adds	r2, r3, #1
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e506:	78fb      	ldrb	r3, [r7, #3]
 800e508:	f003 0301 	and.w	r3, r3, #1
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d006      	beq.n	800e51e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	8b5b      	ldrh	r3, [r3, #26]
 800e514:	f043 0320 	orr.w	r3, r3, #32
 800e518:	b29a      	uxth	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	4618      	mov	r0, r3
 800e524:	f7fb fc38 	bl	8009d98 <pbuf_clen>
 800e528:	4603      	mov	r3, r0
 800e52a:	461a      	mov	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e532:	4413      	add	r3, r2
 800e534:	b29a      	uxth	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00e      	beq.n	800e564 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d10a      	bne.n	800e564 <tcp_enqueue_flags+0x1b0>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e552:	2b00      	cmp	r3, #0
 800e554:	d106      	bne.n	800e564 <tcp_enqueue_flags+0x1b0>
 800e556:	4b06      	ldr	r3, [pc, #24]	; (800e570 <tcp_enqueue_flags+0x1bc>)
 800e558:	f240 4265 	movw	r2, #1125	; 0x465
 800e55c:	490b      	ldr	r1, [pc, #44]	; (800e58c <tcp_enqueue_flags+0x1d8>)
 800e55e:	4806      	ldr	r0, [pc, #24]	; (800e578 <tcp_enqueue_flags+0x1c4>)
 800e560:	f005 fe6c 	bl	801423c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3720      	adds	r7, #32
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	0801707c 	.word	0x0801707c
 800e574:	080174a0 	.word	0x080174a0
 800e578:	080170d0 	.word	0x080170d0
 800e57c:	080174f8 	.word	0x080174f8
 800e580:	08017518 	.word	0x08017518
 800e584:	08017554 	.word	0x08017554
 800e588:	0801756c 	.word	0x0801756c
 800e58c:	08017598 	.word	0x08017598

0800e590 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e590:	b5b0      	push	{r4, r5, r7, lr}
 800e592:	b08a      	sub	sp, #40	; 0x28
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <tcp_output+0x1c>
 800e59e:	4b8a      	ldr	r3, [pc, #552]	; (800e7c8 <tcp_output+0x238>)
 800e5a0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e5a4:	4989      	ldr	r1, [pc, #548]	; (800e7cc <tcp_output+0x23c>)
 800e5a6:	488a      	ldr	r0, [pc, #552]	; (800e7d0 <tcp_output+0x240>)
 800e5a8:	f005 fe48 	bl	801423c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7d1b      	ldrb	r3, [r3, #20]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d106      	bne.n	800e5c2 <tcp_output+0x32>
 800e5b4:	4b84      	ldr	r3, [pc, #528]	; (800e7c8 <tcp_output+0x238>)
 800e5b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e5ba:	4986      	ldr	r1, [pc, #536]	; (800e7d4 <tcp_output+0x244>)
 800e5bc:	4884      	ldr	r0, [pc, #528]	; (800e7d0 <tcp_output+0x240>)
 800e5be:	f005 fe3d 	bl	801423c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e5c2:	4b85      	ldr	r3, [pc, #532]	; (800e7d8 <tcp_output+0x248>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d101      	bne.n	800e5d0 <tcp_output+0x40>
    return ERR_OK;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	e1ce      	b.n	800e96e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	bf28      	it	cs
 800e5e0:	4613      	movcs	r3, r2
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10b      	bne.n	800e60a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	8b5b      	ldrh	r3, [r3, #26]
 800e5f6:	f003 0302 	and.w	r3, r3, #2
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f000 81aa 	beq.w	800e954 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 fdcb 	bl	800f19c <tcp_send_empty_ack>
 800e606:	4603      	mov	r3, r0
 800e608:	e1b1      	b.n	800e96e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e60a:	6879      	ldr	r1, [r7, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3304      	adds	r3, #4
 800e610:	461a      	mov	r2, r3
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7ff fc7c 	bl	800df10 <tcp_route>
 800e618:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d102      	bne.n	800e626 <tcp_output+0x96>
    return ERR_RTE;
 800e620:	f06f 0303 	mvn.w	r3, #3
 800e624:	e1a3      	b.n	800e96e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d003      	beq.n	800e634 <tcp_output+0xa4>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d111      	bne.n	800e658 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d002      	beq.n	800e640 <tcp_output+0xb0>
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	3304      	adds	r3, #4
 800e63e:	e000      	b.n	800e642 <tcp_output+0xb2>
 800e640:	2300      	movs	r3, #0
 800e642:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d102      	bne.n	800e650 <tcp_output+0xc0>
      return ERR_RTE;
 800e64a:	f06f 0303 	mvn.w	r3, #3
 800e64e:	e18e      	b.n	800e96e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fa f873 	bl	800874a <lwip_htonl>
 800e664:	4602      	mov	r2, r0
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e66e:	8912      	ldrh	r2, [r2, #8]
 800e670:	4413      	add	r3, r2
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	429a      	cmp	r2, r3
 800e676:	d227      	bcs.n	800e6c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e67e:	461a      	mov	r2, r3
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	4293      	cmp	r3, r2
 800e684:	d114      	bne.n	800e6b0 <tcp_output+0x120>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d110      	bne.n	800e6b0 <tcp_output+0x120>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10b      	bne.n	800e6b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	8b5b      	ldrh	r3, [r3, #26]
 800e6b4:	f003 0302 	and.w	r3, r3, #2
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 814d 	beq.w	800e958 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fd6c 	bl	800f19c <tcp_send_empty_ack>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	e152      	b.n	800e96e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f000 811c 	beq.w	800e916 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e6de:	e002      	b.n	800e6e6 <tcp_output+0x156>
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	623b      	str	r3, [r7, #32]
 800e6e6:	6a3b      	ldr	r3, [r7, #32]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1f8      	bne.n	800e6e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e6ee:	e112      	b.n	800e916 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	899b      	ldrh	r3, [r3, #12]
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fa f811 	bl	8008720 <lwip_htons>
 800e6fe:	4603      	mov	r3, r0
 800e700:	b2db      	uxtb	r3, r3
 800e702:	f003 0304 	and.w	r3, r3, #4
 800e706:	2b00      	cmp	r3, #0
 800e708:	d006      	beq.n	800e718 <tcp_output+0x188>
 800e70a:	4b2f      	ldr	r3, [pc, #188]	; (800e7c8 <tcp_output+0x238>)
 800e70c:	f240 5236 	movw	r2, #1334	; 0x536
 800e710:	4932      	ldr	r1, [pc, #200]	; (800e7dc <tcp_output+0x24c>)
 800e712:	482f      	ldr	r0, [pc, #188]	; (800e7d0 <tcp_output+0x240>)
 800e714:	f005 fd92 	bl	801423c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d01f      	beq.n	800e760 <tcp_output+0x1d0>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8b5b      	ldrh	r3, [r3, #26]
 800e724:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d119      	bne.n	800e760 <tcp_output+0x1d0>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00b      	beq.n	800e74c <tcp_output+0x1bc>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d110      	bne.n	800e760 <tcp_output+0x1d0>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e742:	891a      	ldrh	r2, [r3, #8]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e748:	429a      	cmp	r2, r3
 800e74a:	d209      	bcs.n	800e760 <tcp_output+0x1d0>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e752:	2b00      	cmp	r3, #0
 800e754:	d004      	beq.n	800e760 <tcp_output+0x1d0>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e75c:	2b08      	cmp	r3, #8
 800e75e:	d901      	bls.n	800e764 <tcp_output+0x1d4>
 800e760:	2301      	movs	r3, #1
 800e762:	e000      	b.n	800e766 <tcp_output+0x1d6>
 800e764:	2300      	movs	r3, #0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d106      	bne.n	800e778 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	8b5b      	ldrh	r3, [r3, #26]
 800e76e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 80e4 	beq.w	800e940 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	7d1b      	ldrb	r3, [r3, #20]
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d00d      	beq.n	800e79c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	899b      	ldrh	r3, [r3, #12]
 800e786:	b29c      	uxth	r4, r3
 800e788:	2010      	movs	r0, #16
 800e78a:	f7f9 ffc9 	bl	8008720 <lwip_htons>
 800e78e:	4603      	mov	r3, r0
 800e790:	461a      	mov	r2, r3
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	4322      	orrs	r2, r4
 800e798:	b292      	uxth	r2, r2
 800e79a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e79c:	697a      	ldr	r2, [r7, #20]
 800e79e:	6879      	ldr	r1, [r7, #4]
 800e7a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7a2:	f000 f909 	bl	800e9b8 <tcp_output_segment>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e7aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d016      	beq.n	800e7e0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	8b5b      	ldrh	r3, [r3, #26]
 800e7b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	835a      	strh	r2, [r3, #26]
      return err;
 800e7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7c4:	e0d3      	b.n	800e96e <tcp_output+0x3de>
 800e7c6:	bf00      	nop
 800e7c8:	0801707c 	.word	0x0801707c
 800e7cc:	080175c0 	.word	0x080175c0
 800e7d0:	080170d0 	.word	0x080170d0
 800e7d4:	080175d8 	.word	0x080175d8
 800e7d8:	2000a734 	.word	0x2000a734
 800e7dc:	08017600 	.word	0x08017600
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	7d1b      	ldrb	r3, [r3, #20]
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d006      	beq.n	800e7fe <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	8b5b      	ldrh	r3, [r3, #26]
 800e7f4:	f023 0303 	bic.w	r3, r3, #3
 800e7f8:	b29a      	uxth	r2, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	4618      	mov	r0, r3
 800e806:	f7f9 ffa0 	bl	800874a <lwip_htonl>
 800e80a:	4604      	mov	r4, r0
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	891b      	ldrh	r3, [r3, #8]
 800e810:	461d      	mov	r5, r3
 800e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	899b      	ldrh	r3, [r3, #12]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7f9 ff80 	bl	8008720 <lwip_htons>
 800e820:	4603      	mov	r3, r0
 800e822:	b2db      	uxtb	r3, r3
 800e824:	f003 0303 	and.w	r3, r3, #3
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <tcp_output+0x2a0>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e000      	b.n	800e832 <tcp_output+0x2a2>
 800e830:	2300      	movs	r3, #0
 800e832:	442b      	add	r3, r5
 800e834:	4423      	add	r3, r4
 800e836:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	2b00      	cmp	r3, #0
 800e842:	da02      	bge.n	800e84a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	891b      	ldrh	r3, [r3, #8]
 800e84e:	461c      	mov	r4, r3
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	899b      	ldrh	r3, [r3, #12]
 800e856:	b29b      	uxth	r3, r3
 800e858:	4618      	mov	r0, r3
 800e85a:	f7f9 ff61 	bl	8008720 <lwip_htons>
 800e85e:	4603      	mov	r3, r0
 800e860:	b2db      	uxtb	r3, r3
 800e862:	f003 0303 	and.w	r3, r3, #3
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <tcp_output+0x2de>
 800e86a:	2301      	movs	r3, #1
 800e86c:	e000      	b.n	800e870 <tcp_output+0x2e0>
 800e86e:	2300      	movs	r3, #0
 800e870:	4423      	add	r3, r4
 800e872:	2b00      	cmp	r3, #0
 800e874:	d049      	beq.n	800e90a <tcp_output+0x37a>
      seg->next = NULL;
 800e876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e880:	2b00      	cmp	r3, #0
 800e882:	d105      	bne.n	800e890 <tcp_output+0x300>
        pcb->unacked = seg;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e888:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	623b      	str	r3, [r7, #32]
 800e88e:	e03f      	b.n	800e910 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	4618      	mov	r0, r3
 800e898:	f7f9 ff57 	bl	800874a <lwip_htonl>
 800e89c:	4604      	mov	r4, r0
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7f9 ff50 	bl	800874a <lwip_htonl>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	1ae3      	subs	r3, r4, r3
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	da24      	bge.n	800e8fc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	3370      	adds	r3, #112	; 0x70
 800e8b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e8b8:	e002      	b.n	800e8c0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d011      	beq.n	800e8ec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7f9 ff3a 	bl	800874a <lwip_htonl>
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7f9 ff33 	bl	800874a <lwip_htonl>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	dbe6      	blt.n	800e8ba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	e009      	b.n	800e910 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e900:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e902:	6a3b      	ldr	r3, [r7, #32]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	623b      	str	r3, [r7, #32]
 800e908:	e002      	b.n	800e910 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e90a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e90c:	f7fc fc3f 	bl	800b18e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e914:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d012      	beq.n	800e942 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	4618      	mov	r0, r3
 800e924:	f7f9 ff11 	bl	800874a <lwip_htonl>
 800e928:	4602      	mov	r2, r0
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e932:	8912      	ldrh	r2, [r2, #8]
 800e934:	4413      	add	r3, r2
  while (seg != NULL &&
 800e936:	69ba      	ldr	r2, [r7, #24]
 800e938:	429a      	cmp	r2, r3
 800e93a:	f4bf aed9 	bcs.w	800e6f0 <tcp_output+0x160>
 800e93e:	e000      	b.n	800e942 <tcp_output+0x3b2>
      break;
 800e940:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e946:	2b00      	cmp	r3, #0
 800e948:	d108      	bne.n	800e95c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e952:	e004      	b.n	800e95e <tcp_output+0x3ce>
    goto output_done;
 800e954:	bf00      	nop
 800e956:	e002      	b.n	800e95e <tcp_output+0x3ce>
    goto output_done;
 800e958:	bf00      	nop
 800e95a:	e000      	b.n	800e95e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e95c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	8b5b      	ldrh	r3, [r3, #26]
 800e962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3728      	adds	r7, #40	; 0x28
 800e972:	46bd      	mov	sp, r7
 800e974:	bdb0      	pop	{r4, r5, r7, pc}
 800e976:	bf00      	nop

0800e978 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <tcp_output_segment_busy+0x1c>
 800e986:	4b09      	ldr	r3, [pc, #36]	; (800e9ac <tcp_output_segment_busy+0x34>)
 800e988:	f240 529a 	movw	r2, #1434	; 0x59a
 800e98c:	4908      	ldr	r1, [pc, #32]	; (800e9b0 <tcp_output_segment_busy+0x38>)
 800e98e:	4809      	ldr	r0, [pc, #36]	; (800e9b4 <tcp_output_segment_busy+0x3c>)
 800e990:	f005 fc54 	bl	801423c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	7b9b      	ldrb	r3, [r3, #14]
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	d001      	beq.n	800e9a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e000      	b.n	800e9a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	0801707c 	.word	0x0801707c
 800e9b0:	08017618 	.word	0x08017618
 800e9b4:	080170d0 	.word	0x080170d0

0800e9b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e9b8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ba:	b08c      	sub	sp, #48	; 0x30
 800e9bc:	af04      	add	r7, sp, #16
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d106      	bne.n	800e9d8 <tcp_output_segment+0x20>
 800e9ca:	4b63      	ldr	r3, [pc, #396]	; (800eb58 <tcp_output_segment+0x1a0>)
 800e9cc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e9d0:	4962      	ldr	r1, [pc, #392]	; (800eb5c <tcp_output_segment+0x1a4>)
 800e9d2:	4863      	ldr	r0, [pc, #396]	; (800eb60 <tcp_output_segment+0x1a8>)
 800e9d4:	f005 fc32 	bl	801423c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d106      	bne.n	800e9ec <tcp_output_segment+0x34>
 800e9de:	4b5e      	ldr	r3, [pc, #376]	; (800eb58 <tcp_output_segment+0x1a0>)
 800e9e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e9e4:	495f      	ldr	r1, [pc, #380]	; (800eb64 <tcp_output_segment+0x1ac>)
 800e9e6:	485e      	ldr	r0, [pc, #376]	; (800eb60 <tcp_output_segment+0x1a8>)
 800e9e8:	f005 fc28 	bl	801423c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d106      	bne.n	800ea00 <tcp_output_segment+0x48>
 800e9f2:	4b59      	ldr	r3, [pc, #356]	; (800eb58 <tcp_output_segment+0x1a0>)
 800e9f4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e9f8:	495b      	ldr	r1, [pc, #364]	; (800eb68 <tcp_output_segment+0x1b0>)
 800e9fa:	4859      	ldr	r0, [pc, #356]	; (800eb60 <tcp_output_segment+0x1a8>)
 800e9fc:	f005 fc1e 	bl	801423c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7ff ffb9 	bl	800e978 <tcp_output_segment_busy>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	e09f      	b.n	800eb50 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	68dc      	ldr	r4, [r3, #12]
 800ea18:	4610      	mov	r0, r2
 800ea1a:	f7f9 fe96 	bl	800874a <lwip_htonl>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	68dc      	ldr	r4, [r3, #12]
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	f7f9 fe78 	bl	8008720 <lwip_htons>
 800ea30:	4603      	mov	r3, r0
 800ea32:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ea3c:	441a      	add	r2, r3
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	3314      	adds	r3, #20
 800ea48:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	7a9b      	ldrb	r3, [r3, #10]
 800ea4e:	f003 0301 	and.w	r3, r3, #1
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d015      	beq.n	800ea82 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	6879      	ldr	r1, [r7, #4]
 800ea5e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ea62:	f7fc fe8b 	bl	800b77c <tcp_eff_send_mss_netif>
 800ea66:	4603      	mov	r3, r0
 800ea68:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ea6a:	8b7b      	ldrh	r3, [r7, #26]
 800ea6c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7f9 fe6a 	bl	800874a <lwip_htonl>
 800ea76:	4602      	mov	r2, r0
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	da02      	bge.n	800ea92 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10c      	bne.n	800eab4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ea9a:	4b34      	ldr	r3, [pc, #208]	; (800eb6c <tcp_output_segment+0x1b4>)
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7f9 fe4e 	bl	800874a <lwip_htonl>
 800eaae:	4602      	mov	r2, r0
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	68da      	ldr	r2, [r3, #12]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	8959      	ldrh	r1, [r3, #10]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	8b3a      	ldrh	r2, [r7, #24]
 800eace:	1a8a      	subs	r2, r1, r2
 800ead0:	b292      	uxth	r2, r2
 800ead2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	8919      	ldrh	r1, [r3, #8]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	8b3a      	ldrh	r2, [r7, #24]
 800eae0:	1a8a      	subs	r2, r1, r2
 800eae2:	b292      	uxth	r2, r2
 800eae4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	68fa      	ldr	r2, [r7, #12]
 800eaec:	68d2      	ldr	r2, [r2, #12]
 800eaee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	741a      	strb	r2, [r3, #16]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	f103 0214 	add.w	r2, r3, #20
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	7a9b      	ldrb	r3, [r3, #10]
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	f003 0304 	and.w	r3, r3, #4
 800eb0e:	4413      	add	r3, r2
 800eb10:	69fa      	ldr	r2, [r7, #28]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d006      	beq.n	800eb24 <tcp_output_segment+0x16c>
 800eb16:	4b10      	ldr	r3, [pc, #64]	; (800eb58 <tcp_output_segment+0x1a0>)
 800eb18:	f240 621c 	movw	r2, #1564	; 0x61c
 800eb1c:	4914      	ldr	r1, [pc, #80]	; (800eb70 <tcp_output_segment+0x1b8>)
 800eb1e:	4810      	ldr	r0, [pc, #64]	; (800eb60 <tcp_output_segment+0x1a8>)
 800eb20:	f005 fb8c 	bl	801423c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6858      	ldr	r0, [r3, #4]
 800eb28:	68b9      	ldr	r1, [r7, #8]
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	1d1c      	adds	r4, r3, #4
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	7add      	ldrb	r5, [r3, #11]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	7a9b      	ldrb	r3, [r3, #10]
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	9202      	str	r2, [sp, #8]
 800eb3a:	2206      	movs	r2, #6
 800eb3c:	9201      	str	r2, [sp, #4]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	462b      	mov	r3, r5
 800eb42:	4622      	mov	r2, r4
 800eb44:	f002 fd18 	bl	8011578 <ip4_output_if>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800eb4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3720      	adds	r7, #32
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bdb0      	pop	{r4, r5, r7, pc}
 800eb58:	0801707c 	.word	0x0801707c
 800eb5c:	08017640 	.word	0x08017640
 800eb60:	080170d0 	.word	0x080170d0
 800eb64:	08017660 	.word	0x08017660
 800eb68:	08017680 	.word	0x08017680
 800eb6c:	2000a6e8 	.word	0x2000a6e8
 800eb70:	080176a4 	.word	0x080176a4

0800eb74 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800eb74:	b5b0      	push	{r4, r5, r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <tcp_rexmit_rto_prepare+0x1c>
 800eb82:	4b31      	ldr	r3, [pc, #196]	; (800ec48 <tcp_rexmit_rto_prepare+0xd4>)
 800eb84:	f240 6263 	movw	r2, #1635	; 0x663
 800eb88:	4930      	ldr	r1, [pc, #192]	; (800ec4c <tcp_rexmit_rto_prepare+0xd8>)
 800eb8a:	4831      	ldr	r0, [pc, #196]	; (800ec50 <tcp_rexmit_rto_prepare+0xdc>)
 800eb8c:	f005 fb56 	bl	801423c <iprintf>

  if (pcb->unacked == NULL) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d102      	bne.n	800eb9e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eb98:	f06f 0305 	mvn.w	r3, #5
 800eb9c:	e050      	b.n	800ec40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba2:	60fb      	str	r3, [r7, #12]
 800eba4:	e00b      	b.n	800ebbe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff fee6 	bl	800e978 <tcp_output_segment_busy>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ebb2:	f06f 0305 	mvn.w	r3, #5
 800ebb6:	e043      	b.n	800ec40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1ef      	bne.n	800eba6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f7ff fed6 	bl	800e978 <tcp_output_segment_busy>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d002      	beq.n	800ebd8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ebd2:	f06f 0305 	mvn.w	r3, #5
 800ebd6:	e033      	b.n	800ec40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	8b5b      	ldrh	r3, [r3, #26]
 800ebf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7f9 fda1 	bl	800874a <lwip_htonl>
 800ec08:	4604      	mov	r4, r0
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	891b      	ldrh	r3, [r3, #8]
 800ec0e:	461d      	mov	r5, r3
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	899b      	ldrh	r3, [r3, #12]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7f9 fd81 	bl	8008720 <lwip_htons>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	f003 0303 	and.w	r3, r3, #3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <tcp_rexmit_rto_prepare+0xba>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e000      	b.n	800ec30 <tcp_rexmit_rto_prepare+0xbc>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	442b      	add	r3, r5
 800ec32:	18e2      	adds	r2, r4, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bdb0      	pop	{r4, r5, r7, pc}
 800ec48:	0801707c 	.word	0x0801707c
 800ec4c:	080176b8 	.word	0x080176b8
 800ec50:	080170d0 	.word	0x080170d0

0800ec54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d106      	bne.n	800ec70 <tcp_rexmit_rto_commit+0x1c>
 800ec62:	4b0d      	ldr	r3, [pc, #52]	; (800ec98 <tcp_rexmit_rto_commit+0x44>)
 800ec64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ec68:	490c      	ldr	r1, [pc, #48]	; (800ec9c <tcp_rexmit_rto_commit+0x48>)
 800ec6a:	480d      	ldr	r0, [pc, #52]	; (800eca0 <tcp_rexmit_rto_commit+0x4c>)
 800ec6c:	f005 fae6 	bl	801423c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec76:	2bff      	cmp	r3, #255	; 0xff
 800ec78:	d007      	beq.n	800ec8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec80:	3301      	adds	r3, #1
 800ec82:	b2da      	uxtb	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7ff fc80 	bl	800e590 <tcp_output>
}
 800ec90:	bf00      	nop
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	0801707c 	.word	0x0801707c
 800ec9c:	080176dc 	.word	0x080176dc
 800eca0:	080170d0 	.word	0x080170d0

0800eca4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <tcp_rexmit_rto+0x1c>
 800ecb2:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <tcp_rexmit_rto+0x38>)
 800ecb4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ecb8:	4909      	ldr	r1, [pc, #36]	; (800ece0 <tcp_rexmit_rto+0x3c>)
 800ecba:	480a      	ldr	r0, [pc, #40]	; (800ece4 <tcp_rexmit_rto+0x40>)
 800ecbc:	f005 fabe 	bl	801423c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff ff57 	bl	800eb74 <tcp_rexmit_rto_prepare>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d102      	bne.n	800ecd2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7ff ffc1 	bl	800ec54 <tcp_rexmit_rto_commit>
  }
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	0801707c 	.word	0x0801707c
 800ece0:	08017700 	.word	0x08017700
 800ece4:	080170d0 	.word	0x080170d0

0800ece8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <tcp_rexmit+0x1c>
 800ecf6:	4b2f      	ldr	r3, [pc, #188]	; (800edb4 <tcp_rexmit+0xcc>)
 800ecf8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ecfc:	492e      	ldr	r1, [pc, #184]	; (800edb8 <tcp_rexmit+0xd0>)
 800ecfe:	482f      	ldr	r0, [pc, #188]	; (800edbc <tcp_rexmit+0xd4>)
 800ed00:	f005 fa9c 	bl	801423c <iprintf>

  if (pcb->unacked == NULL) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d102      	bne.n	800ed12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ed0c:	f06f 0305 	mvn.w	r3, #5
 800ed10:	e04c      	b.n	800edac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ed18:	68b8      	ldr	r0, [r7, #8]
 800ed1a:	f7ff fe2d 	bl	800e978 <tcp_output_segment_busy>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ed24:	f06f 0305 	mvn.w	r3, #5
 800ed28:	e040      	b.n	800edac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	336c      	adds	r3, #108	; 0x6c
 800ed36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed38:	e002      	b.n	800ed40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d011      	beq.n	800ed6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7f9 fcfa 	bl	800874a <lwip_htonl>
 800ed56:	4604      	mov	r4, r0
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f9 fcf3 	bl	800874a <lwip_htonl>
 800ed64:	4603      	mov	r3, r0
 800ed66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	dbe6      	blt.n	800ed3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d103      	bne.n	800ed8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed90:	2bff      	cmp	r3, #255	; 0xff
 800ed92:	d007      	beq.n	800eda4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd90      	pop	{r4, r7, pc}
 800edb4:	0801707c 	.word	0x0801707c
 800edb8:	0801771c 	.word	0x0801771c
 800edbc:	080170d0 	.word	0x080170d0

0800edc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d106      	bne.n	800eddc <tcp_rexmit_fast+0x1c>
 800edce:	4b2a      	ldr	r3, [pc, #168]	; (800ee78 <tcp_rexmit_fast+0xb8>)
 800edd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800edd4:	4929      	ldr	r1, [pc, #164]	; (800ee7c <tcp_rexmit_fast+0xbc>)
 800edd6:	482a      	ldr	r0, [pc, #168]	; (800ee80 <tcp_rexmit_fast+0xc0>)
 800edd8:	f005 fa30 	bl	801423c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d045      	beq.n	800ee70 <tcp_rexmit_fast+0xb0>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	8b5b      	ldrh	r3, [r3, #26]
 800ede8:	f003 0304 	and.w	r3, r3, #4
 800edec:	2b00      	cmp	r3, #0
 800edee:	d13f      	bne.n	800ee70 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7ff ff79 	bl	800ece8 <tcp_rexmit>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d139      	bne.n	800ee70 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	bf28      	it	cs
 800ee0c:	4613      	movcs	r3, r2
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	da00      	bge.n	800ee16 <tcp_rexmit_fast+0x56>
 800ee14:	3301      	adds	r3, #1
 800ee16:	105b      	asrs	r3, r3, #1
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ee26:	461a      	mov	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d206      	bcs.n	800ee40 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	0049      	lsls	r1, r1, #1
 800ee4e:	440b      	add	r3, r1
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	4413      	add	r3, r2
 800ee54:	b29a      	uxth	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8b5b      	ldrh	r3, [r3, #26]
 800ee60:	f043 0304 	orr.w	r3, r3, #4
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ee70:	bf00      	nop
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	0801707c 	.word	0x0801707c
 800ee7c:	08017734 	.word	0x08017734
 800ee80:	080170d0 	.word	0x080170d0

0800ee84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	607b      	str	r3, [r7, #4]
 800ee8e:	460b      	mov	r3, r1
 800ee90:	817b      	strh	r3, [r7, #10]
 800ee92:	4613      	mov	r3, r2
 800ee94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ee96:	897a      	ldrh	r2, [r7, #10]
 800ee98:	893b      	ldrh	r3, [r7, #8]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	3314      	adds	r3, #20
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eea6:	4619      	mov	r1, r3
 800eea8:	2022      	movs	r0, #34	; 0x22
 800eeaa:	f7fa fc09 	bl	80096c0 <pbuf_alloc>
 800eeae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d04d      	beq.n	800ef52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eeb6:	897b      	ldrh	r3, [r7, #10]
 800eeb8:	3313      	adds	r3, #19
 800eeba:	697a      	ldr	r2, [r7, #20]
 800eebc:	8952      	ldrh	r2, [r2, #10]
 800eebe:	4293      	cmp	r3, r2
 800eec0:	db06      	blt.n	800eed0 <tcp_output_alloc_header_common+0x4c>
 800eec2:	4b26      	ldr	r3, [pc, #152]	; (800ef5c <tcp_output_alloc_header_common+0xd8>)
 800eec4:	f240 7223 	movw	r2, #1827	; 0x723
 800eec8:	4925      	ldr	r1, [pc, #148]	; (800ef60 <tcp_output_alloc_header_common+0xdc>)
 800eeca:	4826      	ldr	r0, [pc, #152]	; (800ef64 <tcp_output_alloc_header_common+0xe0>)
 800eecc:	f005 f9b6 	bl	801423c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eed6:	8c3b      	ldrh	r3, [r7, #32]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7f9 fc21 	bl	8008720 <lwip_htons>
 800eede:	4603      	mov	r3, r0
 800eee0:	461a      	mov	r2, r3
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7f9 fc19 	bl	8008720 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	461a      	mov	r2, r3
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f7f9 fc24 	bl	800874a <lwip_htonl>
 800ef02:	4602      	mov	r2, r0
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ef08:	897b      	ldrh	r3, [r7, #10]
 800ef0a:	089b      	lsrs	r3, r3, #2
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	3305      	adds	r3, #5
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	031b      	lsls	r3, r3, #12
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7f9 fbfd 	bl	8008720 <lwip_htons>
 800ef26:	4603      	mov	r3, r0
 800ef28:	461a      	mov	r2, r3
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ef2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7f9 fbf5 	bl	8008720 <lwip_htons>
 800ef36:	4603      	mov	r3, r0
 800ef38:	461a      	mov	r2, r3
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2200      	movs	r2, #0
 800ef42:	741a      	strb	r2, [r3, #16]
 800ef44:	2200      	movs	r2, #0
 800ef46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	749a      	strb	r2, [r3, #18]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ef52:	697b      	ldr	r3, [r7, #20]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	0801707c 	.word	0x0801707c
 800ef60:	08017754 	.word	0x08017754
 800ef64:	080170d0 	.word	0x080170d0

0800ef68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ef68:	b5b0      	push	{r4, r5, r7, lr}
 800ef6a:	b08a      	sub	sp, #40	; 0x28
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	607b      	str	r3, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	817b      	strh	r3, [r7, #10]
 800ef76:	4613      	mov	r3, r2
 800ef78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d106      	bne.n	800ef8e <tcp_output_alloc_header+0x26>
 800ef80:	4b15      	ldr	r3, [pc, #84]	; (800efd8 <tcp_output_alloc_header+0x70>)
 800ef82:	f240 7242 	movw	r2, #1858	; 0x742
 800ef86:	4915      	ldr	r1, [pc, #84]	; (800efdc <tcp_output_alloc_header+0x74>)
 800ef88:	4815      	ldr	r0, [pc, #84]	; (800efe0 <tcp_output_alloc_header+0x78>)
 800ef8a:	f005 f957 	bl	801423c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	8adb      	ldrh	r3, [r3, #22]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	8b12      	ldrh	r2, [r2, #24]
 800ef9a:	68f9      	ldr	r1, [r7, #12]
 800ef9c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ef9e:	893d      	ldrh	r5, [r7, #8]
 800efa0:	897c      	ldrh	r4, [r7, #10]
 800efa2:	9103      	str	r1, [sp, #12]
 800efa4:	2110      	movs	r1, #16
 800efa6:	9102      	str	r1, [sp, #8]
 800efa8:	9201      	str	r2, [sp, #4]
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	462a      	mov	r2, r5
 800efb0:	4621      	mov	r1, r4
 800efb2:	f7ff ff67 	bl	800ee84 <tcp_output_alloc_header_common>
 800efb6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d006      	beq.n	800efcc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800efc6:	441a      	add	r2, r3
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800efcc:	697b      	ldr	r3, [r7, #20]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3718      	adds	r7, #24
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bdb0      	pop	{r4, r5, r7, pc}
 800efd6:	bf00      	nop
 800efd8:	0801707c 	.word	0x0801707c
 800efdc:	08017784 	.word	0x08017784
 800efe0:	080170d0 	.word	0x080170d0

0800efe4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	4611      	mov	r1, r2
 800eff0:	461a      	mov	r2, r3
 800eff2:	460b      	mov	r3, r1
 800eff4:	71fb      	strb	r3, [r7, #7]
 800eff6:	4613      	mov	r3, r2
 800eff8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d106      	bne.n	800f012 <tcp_output_fill_options+0x2e>
 800f004:	4b13      	ldr	r3, [pc, #76]	; (800f054 <tcp_output_fill_options+0x70>)
 800f006:	f240 7256 	movw	r2, #1878	; 0x756
 800f00a:	4913      	ldr	r1, [pc, #76]	; (800f058 <tcp_output_fill_options+0x74>)
 800f00c:	4813      	ldr	r0, [pc, #76]	; (800f05c <tcp_output_fill_options+0x78>)
 800f00e:	f005 f915 	bl	801423c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	3314      	adds	r3, #20
 800f01c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	f103 0214 	add.w	r2, r3, #20
 800f024:	8bfb      	ldrh	r3, [r7, #30]
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	4619      	mov	r1, r3
 800f02a:	79fb      	ldrb	r3, [r7, #7]
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	f003 0304 	and.w	r3, r3, #4
 800f032:	440b      	add	r3, r1
 800f034:	4413      	add	r3, r2
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d006      	beq.n	800f04a <tcp_output_fill_options+0x66>
 800f03c:	4b05      	ldr	r3, [pc, #20]	; (800f054 <tcp_output_fill_options+0x70>)
 800f03e:	f240 7275 	movw	r2, #1909	; 0x775
 800f042:	4907      	ldr	r1, [pc, #28]	; (800f060 <tcp_output_fill_options+0x7c>)
 800f044:	4805      	ldr	r0, [pc, #20]	; (800f05c <tcp_output_fill_options+0x78>)
 800f046:	f005 f8f9 	bl	801423c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f04a:	bf00      	nop
 800f04c:	3720      	adds	r7, #32
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	0801707c 	.word	0x0801707c
 800f058:	080177ac 	.word	0x080177ac
 800f05c:	080170d0 	.word	0x080170d0
 800f060:	080176a4 	.word	0x080176a4

0800f064 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08a      	sub	sp, #40	; 0x28
 800f068:	af04      	add	r7, sp, #16
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <tcp_output_control_segment+0x22>
 800f078:	4b1c      	ldr	r3, [pc, #112]	; (800f0ec <tcp_output_control_segment+0x88>)
 800f07a:	f240 7287 	movw	r2, #1927	; 0x787
 800f07e:	491c      	ldr	r1, [pc, #112]	; (800f0f0 <tcp_output_control_segment+0x8c>)
 800f080:	481c      	ldr	r0, [pc, #112]	; (800f0f4 <tcp_output_control_segment+0x90>)
 800f082:	f005 f8db 	bl	801423c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	6879      	ldr	r1, [r7, #4]
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f7fe ff40 	bl	800df10 <tcp_route>
 800f090:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d102      	bne.n	800f09e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f098:	23fc      	movs	r3, #252	; 0xfc
 800f09a:	75fb      	strb	r3, [r7, #23]
 800f09c:	e01c      	b.n	800f0d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d006      	beq.n	800f0b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	7adb      	ldrb	r3, [r3, #11]
 800f0a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	7a9b      	ldrb	r3, [r3, #10]
 800f0ae:	757b      	strb	r3, [r7, #21]
 800f0b0:	e003      	b.n	800f0ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f0b2:	23ff      	movs	r3, #255	; 0xff
 800f0b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f0ba:	7dba      	ldrb	r2, [r7, #22]
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	9302      	str	r3, [sp, #8]
 800f0c0:	2306      	movs	r3, #6
 800f0c2:	9301      	str	r3, [sp, #4]
 800f0c4:	7d7b      	ldrb	r3, [r7, #21]
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	4613      	mov	r3, r2
 800f0ca:	683a      	ldr	r2, [r7, #0]
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	68b8      	ldr	r0, [r7, #8]
 800f0d0:	f002 fa52 	bl	8011578 <ip4_output_if>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f0d8:	68b8      	ldr	r0, [r7, #8]
 800f0da:	f7fa fdd5 	bl	8009c88 <pbuf_free>
  return err;
 800f0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	0801707c 	.word	0x0801707c
 800f0f0:	080177d4 	.word	0x080177d4
 800f0f4:	080170d0 	.word	0x080170d0

0800f0f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f0f8:	b590      	push	{r4, r7, lr}
 800f0fa:	b08b      	sub	sp, #44	; 0x2c
 800f0fc:	af04      	add	r7, sp, #16
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
 800f104:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d106      	bne.n	800f11a <tcp_rst+0x22>
 800f10c:	4b1f      	ldr	r3, [pc, #124]	; (800f18c <tcp_rst+0x94>)
 800f10e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f112:	491f      	ldr	r1, [pc, #124]	; (800f190 <tcp_rst+0x98>)
 800f114:	481f      	ldr	r0, [pc, #124]	; (800f194 <tcp_rst+0x9c>)
 800f116:	f005 f891 	bl	801423c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d106      	bne.n	800f12e <tcp_rst+0x36>
 800f120:	4b1a      	ldr	r3, [pc, #104]	; (800f18c <tcp_rst+0x94>)
 800f122:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f126:	491c      	ldr	r1, [pc, #112]	; (800f198 <tcp_rst+0xa0>)
 800f128:	481a      	ldr	r0, [pc, #104]	; (800f194 <tcp_rst+0x9c>)
 800f12a:	f005 f887 	bl	801423c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f12e:	2300      	movs	r3, #0
 800f130:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f132:	f246 0308 	movw	r3, #24584	; 0x6008
 800f136:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f138:	7dfb      	ldrb	r3, [r7, #23]
 800f13a:	b29c      	uxth	r4, r3
 800f13c:	68b8      	ldr	r0, [r7, #8]
 800f13e:	f7f9 fb04 	bl	800874a <lwip_htonl>
 800f142:	4602      	mov	r2, r0
 800f144:	8abb      	ldrh	r3, [r7, #20]
 800f146:	9303      	str	r3, [sp, #12]
 800f148:	2314      	movs	r3, #20
 800f14a:	9302      	str	r3, [sp, #8]
 800f14c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f14e:	9301      	str	r3, [sp, #4]
 800f150:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f152:	9300      	str	r3, [sp, #0]
 800f154:	4613      	mov	r3, r2
 800f156:	2200      	movs	r2, #0
 800f158:	4621      	mov	r1, r4
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7ff fe92 	bl	800ee84 <tcp_output_alloc_header_common>
 800f160:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00c      	beq.n	800f182 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	2200      	movs	r2, #0
 800f16c:	6939      	ldr	r1, [r7, #16]
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f7ff ff38 	bl	800efe4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	6939      	ldr	r1, [r7, #16]
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f7ff ff72 	bl	800f064 <tcp_output_control_segment>
 800f180:	e000      	b.n	800f184 <tcp_rst+0x8c>
    return;
 800f182:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f184:	371c      	adds	r7, #28
 800f186:	46bd      	mov	sp, r7
 800f188:	bd90      	pop	{r4, r7, pc}
 800f18a:	bf00      	nop
 800f18c:	0801707c 	.word	0x0801707c
 800f190:	08017800 	.word	0x08017800
 800f194:	080170d0 	.word	0x080170d0
 800f198:	0801781c 	.word	0x0801781c

0800f19c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f19c:	b590      	push	{r4, r7, lr}
 800f19e:	b087      	sub	sp, #28
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d106      	bne.n	800f1c0 <tcp_send_empty_ack+0x24>
 800f1b2:	4b28      	ldr	r3, [pc, #160]	; (800f254 <tcp_send_empty_ack+0xb8>)
 800f1b4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f1b8:	4927      	ldr	r1, [pc, #156]	; (800f258 <tcp_send_empty_ack+0xbc>)
 800f1ba:	4828      	ldr	r0, [pc, #160]	; (800f25c <tcp_send_empty_ack+0xc0>)
 800f1bc:	f005 f83e 	bl	801423c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f1c0:	7dfb      	ldrb	r3, [r7, #23]
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	f003 0304 	and.w	r3, r3, #4
 800f1ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f1cc:	7d7b      	ldrb	r3, [r7, #21]
 800f1ce:	b29c      	uxth	r4, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7f9 fab8 	bl	800874a <lwip_htonl>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2200      	movs	r2, #0
 800f1de:	4621      	mov	r1, r4
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7ff fec1 	bl	800ef68 <tcp_output_alloc_header>
 800f1e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d109      	bne.n	800f202 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	8b5b      	ldrh	r3, [r3, #26]
 800f1f2:	f043 0303 	orr.w	r3, r3, #3
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f1fc:	f06f 0301 	mvn.w	r3, #1
 800f200:	e023      	b.n	800f24a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f202:	7dbb      	ldrb	r3, [r7, #22]
 800f204:	7dfa      	ldrb	r2, [r7, #23]
 800f206:	6939      	ldr	r1, [r7, #16]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7ff feeb 	bl	800efe4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	3304      	adds	r3, #4
 800f214:	6939      	ldr	r1, [r7, #16]
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7ff ff24 	bl	800f064 <tcp_output_control_segment>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d007      	beq.n	800f238 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	8b5b      	ldrh	r3, [r3, #26]
 800f22c:	f043 0303 	orr.w	r3, r3, #3
 800f230:	b29a      	uxth	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	835a      	strh	r2, [r3, #26]
 800f236:	e006      	b.n	800f246 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	8b5b      	ldrh	r3, [r3, #26]
 800f23c:	f023 0303 	bic.w	r3, r3, #3
 800f240:	b29a      	uxth	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	371c      	adds	r7, #28
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd90      	pop	{r4, r7, pc}
 800f252:	bf00      	nop
 800f254:	0801707c 	.word	0x0801707c
 800f258:	08017838 	.word	0x08017838
 800f25c:	080170d0 	.word	0x080170d0

0800f260 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f260:	b590      	push	{r4, r7, lr}
 800f262:	b087      	sub	sp, #28
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f268:	2300      	movs	r3, #0
 800f26a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d106      	bne.n	800f280 <tcp_keepalive+0x20>
 800f272:	4b18      	ldr	r3, [pc, #96]	; (800f2d4 <tcp_keepalive+0x74>)
 800f274:	f640 0224 	movw	r2, #2084	; 0x824
 800f278:	4917      	ldr	r1, [pc, #92]	; (800f2d8 <tcp_keepalive+0x78>)
 800f27a:	4818      	ldr	r0, [pc, #96]	; (800f2dc <tcp_keepalive+0x7c>)
 800f27c:	f004 ffde 	bl	801423c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f280:	7dfb      	ldrb	r3, [r7, #23]
 800f282:	b29c      	uxth	r4, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f288:	3b01      	subs	r3, #1
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7f9 fa5d 	bl	800874a <lwip_htonl>
 800f290:	4603      	mov	r3, r0
 800f292:	2200      	movs	r2, #0
 800f294:	4621      	mov	r1, r4
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7ff fe66 	bl	800ef68 <tcp_output_alloc_header>
 800f29c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d102      	bne.n	800f2aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a8:	e010      	b.n	800f2cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f2aa:	7dfb      	ldrb	r3, [r7, #23]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	6939      	ldr	r1, [r7, #16]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7ff fe97 	bl	800efe4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	6939      	ldr	r1, [r7, #16]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7ff fed0 	bl	800f064 <tcp_output_control_segment>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f2c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	371c      	adds	r7, #28
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd90      	pop	{r4, r7, pc}
 800f2d4:	0801707c 	.word	0x0801707c
 800f2d8:	08017858 	.word	0x08017858
 800f2dc:	080170d0 	.word	0x080170d0

0800f2e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f2e0:	b590      	push	{r4, r7, lr}
 800f2e2:	b08b      	sub	sp, #44	; 0x2c
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d106      	bne.n	800f302 <tcp_zero_window_probe+0x22>
 800f2f4:	4b4c      	ldr	r3, [pc, #304]	; (800f428 <tcp_zero_window_probe+0x148>)
 800f2f6:	f640 024f 	movw	r2, #2127	; 0x84f
 800f2fa:	494c      	ldr	r1, [pc, #304]	; (800f42c <tcp_zero_window_probe+0x14c>)
 800f2fc:	484c      	ldr	r0, [pc, #304]	; (800f430 <tcp_zero_window_probe+0x150>)
 800f2fe:	f004 ff9d 	bl	801423c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f306:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f308:	6a3b      	ldr	r3, [r7, #32]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f30e:	2300      	movs	r3, #0
 800f310:	e086      	b.n	800f420 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f318:	2bff      	cmp	r3, #255	; 0xff
 800f31a:	d007      	beq.n	800f32c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f322:	3301      	adds	r3, #1
 800f324:	b2da      	uxtb	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f32c:	6a3b      	ldr	r3, [r7, #32]
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	899b      	ldrh	r3, [r3, #12]
 800f332:	b29b      	uxth	r3, r3
 800f334:	4618      	mov	r0, r3
 800f336:	f7f9 f9f3 	bl	8008720 <lwip_htons>
 800f33a:	4603      	mov	r3, r0
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	2b00      	cmp	r3, #0
 800f344:	d005      	beq.n	800f352 <tcp_zero_window_probe+0x72>
 800f346:	6a3b      	ldr	r3, [r7, #32]
 800f348:	891b      	ldrh	r3, [r3, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <tcp_zero_window_probe+0x72>
 800f34e:	2301      	movs	r3, #1
 800f350:	e000      	b.n	800f354 <tcp_zero_window_probe+0x74>
 800f352:	2300      	movs	r3, #0
 800f354:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f356:	7ffb      	ldrb	r3, [r7, #31]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	bf0c      	ite	eq
 800f35c:	2301      	moveq	r3, #1
 800f35e:	2300      	movne	r3, #0
 800f360:	b2db      	uxtb	r3, r3
 800f362:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f368:	b299      	uxth	r1, r3
 800f36a:	6a3b      	ldr	r3, [r7, #32]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	8bba      	ldrh	r2, [r7, #28]
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7ff fdf8 	bl	800ef68 <tcp_output_alloc_header>
 800f378:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d102      	bne.n	800f386 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f380:	f04f 33ff 	mov.w	r3, #4294967295
 800f384:	e04c      	b.n	800f420 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f38c:	7ffb      	ldrb	r3, [r7, #31]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d011      	beq.n	800f3b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	899b      	ldrh	r3, [r3, #12]
 800f396:	b29b      	uxth	r3, r3
 800f398:	b21b      	sxth	r3, r3
 800f39a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f39e:	b21c      	sxth	r4, r3
 800f3a0:	2011      	movs	r0, #17
 800f3a2:	f7f9 f9bd 	bl	8008720 <lwip_htons>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	b21b      	sxth	r3, r3
 800f3aa:	4323      	orrs	r3, r4
 800f3ac:	b21b      	sxth	r3, r3
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	819a      	strh	r2, [r3, #12]
 800f3b4:	e010      	b.n	800f3d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	3314      	adds	r3, #20
 800f3bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f3be:	6a3b      	ldr	r3, [r7, #32]
 800f3c0:	6858      	ldr	r0, [r3, #4]
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	891a      	ldrh	r2, [r3, #8]
 800f3c8:	6a3b      	ldr	r3, [r7, #32]
 800f3ca:	891b      	ldrh	r3, [r3, #8]
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	6939      	ldr	r1, [r7, #16]
 800f3d4:	f7fa fe52 	bl	800a07c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7f9 f9b3 	bl	800874a <lwip_htonl>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	1ad3      	subs	r3, r2, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	da02      	bge.n	800f3fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f400:	2200      	movs	r2, #0
 800f402:	69b9      	ldr	r1, [r7, #24]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff fded 	bl	800efe4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3304      	adds	r3, #4
 800f410:	69b9      	ldr	r1, [r7, #24]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7ff fe26 	bl	800f064 <tcp_output_control_segment>
 800f418:	4603      	mov	r3, r0
 800f41a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f41c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f420:	4618      	mov	r0, r3
 800f422:	372c      	adds	r7, #44	; 0x2c
 800f424:	46bd      	mov	sp, r7
 800f426:	bd90      	pop	{r4, r7, pc}
 800f428:	0801707c 	.word	0x0801707c
 800f42c:	08017874 	.word	0x08017874
 800f430:	080170d0 	.word	0x080170d0

0800f434 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f43c:	f7fa ff0c 	bl	800a258 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f440:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <tcpip_tcp_timer+0x38>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d103      	bne.n	800f450 <tcpip_tcp_timer+0x1c>
 800f448:	4b09      	ldr	r3, [pc, #36]	; (800f470 <tcpip_tcp_timer+0x3c>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d005      	beq.n	800f45c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f450:	2200      	movs	r2, #0
 800f452:	4908      	ldr	r1, [pc, #32]	; (800f474 <tcpip_tcp_timer+0x40>)
 800f454:	20fa      	movs	r0, #250	; 0xfa
 800f456:	f000 f8f3 	bl	800f640 <sys_timeout>
 800f45a:	e003      	b.n	800f464 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f45c:	4b06      	ldr	r3, [pc, #24]	; (800f478 <tcpip_tcp_timer+0x44>)
 800f45e:	2200      	movs	r2, #0
 800f460:	601a      	str	r2, [r3, #0]
  }
}
 800f462:	bf00      	nop
 800f464:	bf00      	nop
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	2000a6f4 	.word	0x2000a6f4
 800f470:	2000a6f8 	.word	0x2000a6f8
 800f474:	0800f435 	.word	0x0800f435
 800f478:	2000a740 	.word	0x2000a740

0800f47c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f480:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <tcp_timer_needed+0x30>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10f      	bne.n	800f4a8 <tcp_timer_needed+0x2c>
 800f488:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <tcp_timer_needed+0x34>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d103      	bne.n	800f498 <tcp_timer_needed+0x1c>
 800f490:	4b08      	ldr	r3, [pc, #32]	; (800f4b4 <tcp_timer_needed+0x38>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d007      	beq.n	800f4a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f498:	4b04      	ldr	r3, [pc, #16]	; (800f4ac <tcp_timer_needed+0x30>)
 800f49a:	2201      	movs	r2, #1
 800f49c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f49e:	2200      	movs	r2, #0
 800f4a0:	4905      	ldr	r1, [pc, #20]	; (800f4b8 <tcp_timer_needed+0x3c>)
 800f4a2:	20fa      	movs	r0, #250	; 0xfa
 800f4a4:	f000 f8cc 	bl	800f640 <sys_timeout>
  }
}
 800f4a8:	bf00      	nop
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	2000a740 	.word	0x2000a740
 800f4b0:	2000a6f4 	.word	0x2000a6f4
 800f4b4:	2000a6f8 	.word	0x2000a6f8
 800f4b8:	0800f435 	.word	0x0800f435

0800f4bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f4c8:	2006      	movs	r0, #6
 800f4ca:	f7f9 fd7f 	bl	8008fcc <memp_malloc>
 800f4ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d109      	bne.n	800f4ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d151      	bne.n	800f580 <sys_timeout_abs+0xc4>
 800f4dc:	4b2a      	ldr	r3, [pc, #168]	; (800f588 <sys_timeout_abs+0xcc>)
 800f4de:	22be      	movs	r2, #190	; 0xbe
 800f4e0:	492a      	ldr	r1, [pc, #168]	; (800f58c <sys_timeout_abs+0xd0>)
 800f4e2:	482b      	ldr	r0, [pc, #172]	; (800f590 <sys_timeout_abs+0xd4>)
 800f4e4:	f004 feaa 	bl	801423c <iprintf>
    return;
 800f4e8:	e04a      	b.n	800f580 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f502:	4b24      	ldr	r3, [pc, #144]	; (800f594 <sys_timeout_abs+0xd8>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d103      	bne.n	800f512 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f50a:	4a22      	ldr	r2, [pc, #136]	; (800f594 <sys_timeout_abs+0xd8>)
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	6013      	str	r3, [r2, #0]
    return;
 800f510:	e037      	b.n	800f582 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	4b1f      	ldr	r3, [pc, #124]	; (800f594 <sys_timeout_abs+0xd8>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	0fdb      	lsrs	r3, r3, #31
 800f520:	f003 0301 	and.w	r3, r3, #1
 800f524:	b2db      	uxtb	r3, r3
 800f526:	2b00      	cmp	r3, #0
 800f528:	d007      	beq.n	800f53a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f52a:	4b1a      	ldr	r3, [pc, #104]	; (800f594 <sys_timeout_abs+0xd8>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f532:	4a18      	ldr	r2, [pc, #96]	; (800f594 <sys_timeout_abs+0xd8>)
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	6013      	str	r3, [r2, #0]
 800f538:	e023      	b.n	800f582 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f53a:	4b16      	ldr	r3, [pc, #88]	; (800f594 <sys_timeout_abs+0xd8>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	617b      	str	r3, [r7, #20]
 800f540:	e01a      	b.n	800f578 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00b      	beq.n	800f562 <sys_timeout_abs+0xa6>
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	1ad3      	subs	r3, r2, r3
 800f556:	0fdb      	lsrs	r3, r3, #31
 800f558:	f003 0301 	and.w	r3, r3, #1
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d007      	beq.n	800f572 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	693a      	ldr	r2, [r7, #16]
 800f56e:	601a      	str	r2, [r3, #0]
        break;
 800f570:	e007      	b.n	800f582 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	617b      	str	r3, [r7, #20]
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1e1      	bne.n	800f542 <sys_timeout_abs+0x86>
 800f57e:	e000      	b.n	800f582 <sys_timeout_abs+0xc6>
    return;
 800f580:	bf00      	nop
      }
    }
  }
}
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	08017898 	.word	0x08017898
 800f58c:	080178cc 	.word	0x080178cc
 800f590:	0801790c 	.word	0x0801790c
 800f594:	2000a738 	.word	0x2000a738

0800f598 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	4798      	blx	r3

  now = sys_now();
 800f5aa:	f7f9 f82b 	bl	8008604 <sys_now>
 800f5ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	4b0f      	ldr	r3, [pc, #60]	; (800f5f4 <lwip_cyclic_timer+0x5c>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	0fdb      	lsrs	r3, r3, #31
 800f5c4:	f003 0301 	and.w	r3, r3, #1
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d009      	beq.n	800f5e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	4907      	ldr	r1, [pc, #28]	; (800f5f8 <lwip_cyclic_timer+0x60>)
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7ff ff6e 	bl	800f4bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f5e0:	e004      	b.n	800f5ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	4904      	ldr	r1, [pc, #16]	; (800f5f8 <lwip_cyclic_timer+0x60>)
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f7ff ff68 	bl	800f4bc <sys_timeout_abs>
}
 800f5ec:	bf00      	nop
 800f5ee:	3718      	adds	r7, #24
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	2000a73c 	.word	0x2000a73c
 800f5f8:	0800f599 	.word	0x0800f599

0800f5fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f602:	2301      	movs	r3, #1
 800f604:	607b      	str	r3, [r7, #4]
 800f606:	e00e      	b.n	800f626 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f608:	4a0b      	ldr	r2, [pc, #44]	; (800f638 <sys_timeouts_init+0x3c>)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	00db      	lsls	r3, r3, #3
 800f614:	4a08      	ldr	r2, [pc, #32]	; (800f638 <sys_timeouts_init+0x3c>)
 800f616:	4413      	add	r3, r2
 800f618:	461a      	mov	r2, r3
 800f61a:	4908      	ldr	r1, [pc, #32]	; (800f63c <sys_timeouts_init+0x40>)
 800f61c:	f000 f810 	bl	800f640 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	3301      	adds	r3, #1
 800f624:	607b      	str	r3, [r7, #4]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b02      	cmp	r3, #2
 800f62a:	d9ed      	bls.n	800f608 <sys_timeouts_init+0xc>
  }
}
 800f62c:	bf00      	nop
 800f62e:	bf00      	nop
 800f630:	3708      	adds	r7, #8
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	080184a0 	.word	0x080184a0
 800f63c:	0800f599 	.word	0x0800f599

0800f640 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f652:	d306      	bcc.n	800f662 <sys_timeout+0x22>
 800f654:	4b0a      	ldr	r3, [pc, #40]	; (800f680 <sys_timeout+0x40>)
 800f656:	f240 1229 	movw	r2, #297	; 0x129
 800f65a:	490a      	ldr	r1, [pc, #40]	; (800f684 <sys_timeout+0x44>)
 800f65c:	480a      	ldr	r0, [pc, #40]	; (800f688 <sys_timeout+0x48>)
 800f65e:	f004 fded 	bl	801423c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f662:	f7f8 ffcf 	bl	8008604 <sys_now>
 800f666:	4602      	mov	r2, r0
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	4413      	add	r3, r2
 800f66c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	68b9      	ldr	r1, [r7, #8]
 800f672:	6978      	ldr	r0, [r7, #20]
 800f674:	f7ff ff22 	bl	800f4bc <sys_timeout_abs>
#endif
}
 800f678:	bf00      	nop
 800f67a:	3718      	adds	r7, #24
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	08017898 	.word	0x08017898
 800f684:	08017934 	.word	0x08017934
 800f688:	0801790c 	.word	0x0801790c

0800f68c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f692:	f7f8 ffb7 	bl	8008604 <sys_now>
 800f696:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f698:	4b1a      	ldr	r3, [pc, #104]	; (800f704 <sys_check_timeouts+0x78>)
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d001      	beq.n	800f6a6 <sys_check_timeouts+0x1a>
 800f6a2:	f7f9 ffb7 	bl	8009614 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f6a6:	4b18      	ldr	r3, [pc, #96]	; (800f708 <sys_check_timeouts+0x7c>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d022      	beq.n	800f6f8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	0fdb      	lsrs	r3, r3, #31
 800f6bc:	f003 0301 	and.w	r3, r3, #1
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d11a      	bne.n	800f6fc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4a0f      	ldr	r2, [pc, #60]	; (800f708 <sys_check_timeouts+0x7c>)
 800f6cc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	4a0b      	ldr	r2, [pc, #44]	; (800f70c <sys_check_timeouts+0x80>)
 800f6e0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f6e2:	68b9      	ldr	r1, [r7, #8]
 800f6e4:	2006      	movs	r0, #6
 800f6e6:	f7f9 fcbd 	bl	8009064 <memp_free>
    if (handler != NULL) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0d3      	beq.n	800f698 <sys_check_timeouts+0xc>
      handler(arg);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6838      	ldr	r0, [r7, #0]
 800f6f4:	4798      	blx	r3
  do {
 800f6f6:	e7cf      	b.n	800f698 <sys_check_timeouts+0xc>
      return;
 800f6f8:	bf00      	nop
 800f6fa:	e000      	b.n	800f6fe <sys_check_timeouts+0x72>
      return;
 800f6fc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f6fe:	3710      	adds	r7, #16
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	2000a6e5 	.word	0x2000a6e5
 800f708:	2000a738 	.word	0x2000a738
 800f70c:	2000a73c 	.word	0x2000a73c

0800f710 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f714:	f004 fe20 	bl	8014358 <rand>
 800f718:	4603      	mov	r3, r0
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f720:	b29b      	uxth	r3, r3
 800f722:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f726:	b29a      	uxth	r2, r3
 800f728:	4b01      	ldr	r3, [pc, #4]	; (800f730 <udp_init+0x20>)
 800f72a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f72c:	bf00      	nop
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	20000024 	.word	0x20000024

0800f734 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f73e:	4b17      	ldr	r3, [pc, #92]	; (800f79c <udp_new_port+0x68>)
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	b291      	uxth	r1, r2
 800f746:	4a15      	ldr	r2, [pc, #84]	; (800f79c <udp_new_port+0x68>)
 800f748:	8011      	strh	r1, [r2, #0]
 800f74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f74e:	4293      	cmp	r3, r2
 800f750:	d103      	bne.n	800f75a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f752:	4b12      	ldr	r3, [pc, #72]	; (800f79c <udp_new_port+0x68>)
 800f754:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f758:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f75a:	4b11      	ldr	r3, [pc, #68]	; (800f7a0 <udp_new_port+0x6c>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	603b      	str	r3, [r7, #0]
 800f760:	e011      	b.n	800f786 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	8a5a      	ldrh	r2, [r3, #18]
 800f766:	4b0d      	ldr	r3, [pc, #52]	; (800f79c <udp_new_port+0x68>)
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d108      	bne.n	800f780 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f76e:	88fb      	ldrh	r3, [r7, #6]
 800f770:	3301      	adds	r3, #1
 800f772:	80fb      	strh	r3, [r7, #6]
 800f774:	88fb      	ldrh	r3, [r7, #6]
 800f776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f77a:	d3e0      	bcc.n	800f73e <udp_new_port+0xa>
        return 0;
 800f77c:	2300      	movs	r3, #0
 800f77e:	e007      	b.n	800f790 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	603b      	str	r3, [r7, #0]
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1ea      	bne.n	800f762 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f78c:	4b03      	ldr	r3, [pc, #12]	; (800f79c <udp_new_port+0x68>)
 800f78e:	881b      	ldrh	r3, [r3, #0]
}
 800f790:	4618      	mov	r0, r3
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	20000024 	.word	0x20000024
 800f7a0:	2000a744 	.word	0x2000a744

0800f7a4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d105      	bne.n	800f7c4 <udp_input_local_match+0x20>
 800f7b8:	4b27      	ldr	r3, [pc, #156]	; (800f858 <udp_input_local_match+0xb4>)
 800f7ba:	2287      	movs	r2, #135	; 0x87
 800f7bc:	4927      	ldr	r1, [pc, #156]	; (800f85c <udp_input_local_match+0xb8>)
 800f7be:	4828      	ldr	r0, [pc, #160]	; (800f860 <udp_input_local_match+0xbc>)
 800f7c0:	f004 fd3c 	bl	801423c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d105      	bne.n	800f7d6 <udp_input_local_match+0x32>
 800f7ca:	4b23      	ldr	r3, [pc, #140]	; (800f858 <udp_input_local_match+0xb4>)
 800f7cc:	2288      	movs	r2, #136	; 0x88
 800f7ce:	4925      	ldr	r1, [pc, #148]	; (800f864 <udp_input_local_match+0xc0>)
 800f7d0:	4823      	ldr	r0, [pc, #140]	; (800f860 <udp_input_local_match+0xbc>)
 800f7d2:	f004 fd33 	bl	801423c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	7a1b      	ldrb	r3, [r3, #8]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00b      	beq.n	800f7f6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	7a1a      	ldrb	r2, [r3, #8]
 800f7e2:	4b21      	ldr	r3, [pc, #132]	; (800f868 <udp_input_local_match+0xc4>)
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d001      	beq.n	800f7f6 <udp_input_local_match+0x52>
    return 0;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	e02b      	b.n	800f84e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f7f6:	79fb      	ldrb	r3, [r7, #7]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d018      	beq.n	800f82e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d013      	beq.n	800f82a <udp_input_local_match+0x86>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00f      	beq.n	800f82a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f80a:	4b17      	ldr	r3, [pc, #92]	; (800f868 <udp_input_local_match+0xc4>)
 800f80c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f812:	d00a      	beq.n	800f82a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	4b13      	ldr	r3, [pc, #76]	; (800f868 <udp_input_local_match+0xc4>)
 800f81a:	695b      	ldr	r3, [r3, #20]
 800f81c:	405a      	eors	r2, r3
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	3308      	adds	r3, #8
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f826:	2b00      	cmp	r3, #0
 800f828:	d110      	bne.n	800f84c <udp_input_local_match+0xa8>
          return 1;
 800f82a:	2301      	movs	r3, #1
 800f82c:	e00f      	b.n	800f84e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d009      	beq.n	800f848 <udp_input_local_match+0xa4>
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d005      	beq.n	800f848 <udp_input_local_match+0xa4>
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	4b09      	ldr	r3, [pc, #36]	; (800f868 <udp_input_local_match+0xc4>)
 800f842:	695b      	ldr	r3, [r3, #20]
 800f844:	429a      	cmp	r2, r3
 800f846:	d101      	bne.n	800f84c <udp_input_local_match+0xa8>
        return 1;
 800f848:	2301      	movs	r3, #1
 800f84a:	e000      	b.n	800f84e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	08017980 	.word	0x08017980
 800f85c:	080179b0 	.word	0x080179b0
 800f860:	080179d4 	.word	0x080179d4
 800f864:	080179fc 	.word	0x080179fc
 800f868:	20007178 	.word	0x20007178

0800f86c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f86c:	b590      	push	{r4, r7, lr}
 800f86e:	b08d      	sub	sp, #52	; 0x34
 800f870:	af02      	add	r7, sp, #8
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d105      	bne.n	800f88c <udp_input+0x20>
 800f880:	4b7c      	ldr	r3, [pc, #496]	; (800fa74 <udp_input+0x208>)
 800f882:	22cf      	movs	r2, #207	; 0xcf
 800f884:	497c      	ldr	r1, [pc, #496]	; (800fa78 <udp_input+0x20c>)
 800f886:	487d      	ldr	r0, [pc, #500]	; (800fa7c <udp_input+0x210>)
 800f888:	f004 fcd8 	bl	801423c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d105      	bne.n	800f89e <udp_input+0x32>
 800f892:	4b78      	ldr	r3, [pc, #480]	; (800fa74 <udp_input+0x208>)
 800f894:	22d0      	movs	r2, #208	; 0xd0
 800f896:	497a      	ldr	r1, [pc, #488]	; (800fa80 <udp_input+0x214>)
 800f898:	4878      	ldr	r0, [pc, #480]	; (800fa7c <udp_input+0x210>)
 800f89a:	f004 fccf 	bl	801423c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	895b      	ldrh	r3, [r3, #10]
 800f8a2:	2b07      	cmp	r3, #7
 800f8a4:	d803      	bhi.n	800f8ae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f7fa f9ee 	bl	8009c88 <pbuf_free>
    goto end;
 800f8ac:	e0de      	b.n	800fa6c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f8b4:	4b73      	ldr	r3, [pc, #460]	; (800fa84 <udp_input+0x218>)
 800f8b6:	695b      	ldr	r3, [r3, #20]
 800f8b8:	4a72      	ldr	r2, [pc, #456]	; (800fa84 <udp_input+0x218>)
 800f8ba:	6812      	ldr	r2, [r2, #0]
 800f8bc:	4611      	mov	r1, r2
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f001 ff32 	bl	8011728 <ip4_addr_isbroadcast_u32>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	881b      	ldrh	r3, [r3, #0]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7f8 ff26 	bl	8008720 <lwip_htons>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	885b      	ldrh	r3, [r3, #2]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7f8 ff1e 	bl	8008720 <lwip_htons>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8f4:	4b64      	ldr	r3, [pc, #400]	; (800fa88 <udp_input+0x21c>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800f8fa:	e054      	b.n	800f9a6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fe:	8a5b      	ldrh	r3, [r3, #18]
 800f900:	89fa      	ldrh	r2, [r7, #14]
 800f902:	429a      	cmp	r2, r3
 800f904:	d14a      	bne.n	800f99c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f906:	7cfb      	ldrb	r3, [r7, #19]
 800f908:	461a      	mov	r2, r3
 800f90a:	6839      	ldr	r1, [r7, #0]
 800f90c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f90e:	f7ff ff49 	bl	800f7a4 <udp_input_local_match>
 800f912:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f914:	2b00      	cmp	r3, #0
 800f916:	d041      	beq.n	800f99c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91a:	7c1b      	ldrb	r3, [r3, #16]
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d11d      	bne.n	800f960 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d102      	bne.n	800f930 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92c:	61fb      	str	r3, [r7, #28]
 800f92e:	e017      	b.n	800f960 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f930:	7cfb      	ldrb	r3, [r7, #19]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d014      	beq.n	800f960 <udp_input+0xf4>
 800f936:	4b53      	ldr	r3, [pc, #332]	; (800fa84 <udp_input+0x218>)
 800f938:	695b      	ldr	r3, [r3, #20]
 800f93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93e:	d10f      	bne.n	800f960 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	3304      	adds	r3, #4
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d008      	beq.n	800f960 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	3304      	adds	r3, #4
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d101      	bne.n	800f960 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f962:	8a9b      	ldrh	r3, [r3, #20]
 800f964:	8a3a      	ldrh	r2, [r7, #16]
 800f966:	429a      	cmp	r2, r3
 800f968:	d118      	bne.n	800f99c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d005      	beq.n	800f97e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f974:	685a      	ldr	r2, [r3, #4]
 800f976:	4b43      	ldr	r3, [pc, #268]	; (800fa84 <udp_input+0x218>)
 800f978:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d10e      	bne.n	800f99c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f97e:	6a3b      	ldr	r3, [r7, #32]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d014      	beq.n	800f9ae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	68da      	ldr	r2, [r3, #12]
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f98c:	4b3e      	ldr	r3, [pc, #248]	; (800fa88 <udp_input+0x21c>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f992:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f994:	4a3c      	ldr	r2, [pc, #240]	; (800fa88 <udp_input+0x21c>)
 800f996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f998:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f99a:	e008      	b.n	800f9ae <udp_input+0x142>
      }
    }

    prev = pcb;
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1a7      	bne.n	800f8fc <udp_input+0x90>
 800f9ac:	e000      	b.n	800f9b0 <udp_input+0x144>
        break;
 800f9ae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d101      	bne.n	800f9ba <udp_input+0x14e>
    pcb = uncon_pcb;
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <udp_input+0x15a>
    for_us = 1;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	76fb      	strb	r3, [r7, #27]
 800f9c4:	e00a      	b.n	800f9dc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	4b2d      	ldr	r3, [pc, #180]	; (800fa84 <udp_input+0x218>)
 800f9ce:	695b      	ldr	r3, [r3, #20]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	bf0c      	ite	eq
 800f9d4:	2301      	moveq	r3, #1
 800f9d6:	2300      	movne	r3, #0
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f9dc:	7efb      	ldrb	r3, [r7, #27]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d041      	beq.n	800fa66 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f9e2:	2108      	movs	r1, #8
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fa f8c9 	bl	8009b7c <pbuf_remove_header>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00a      	beq.n	800fa06 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f9f0:	4b20      	ldr	r3, [pc, #128]	; (800fa74 <udp_input+0x208>)
 800f9f2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f9f6:	4925      	ldr	r1, [pc, #148]	; (800fa8c <udp_input+0x220>)
 800f9f8:	4820      	ldr	r0, [pc, #128]	; (800fa7c <udp_input+0x210>)
 800f9fa:	f004 fc1f 	bl	801423c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7fa f942 	bl	8009c88 <pbuf_free>
      goto end;
 800fa04:	e032      	b.n	800fa6c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d012      	beq.n	800fa32 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	699b      	ldr	r3, [r3, #24]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00a      	beq.n	800fa2a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	699c      	ldr	r4, [r3, #24]
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	69d8      	ldr	r0, [r3, #28]
 800fa1c:	8a3b      	ldrh	r3, [r7, #16]
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	4b1b      	ldr	r3, [pc, #108]	; (800fa90 <udp_input+0x224>)
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa26:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fa28:	e021      	b.n	800fa6e <udp_input+0x202>
        pbuf_free(p);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7fa f92c 	bl	8009c88 <pbuf_free>
        goto end;
 800fa30:	e01c      	b.n	800fa6c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fa32:	7cfb      	ldrb	r3, [r7, #19]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d112      	bne.n	800fa5e <udp_input+0x1f2>
 800fa38:	4b12      	ldr	r3, [pc, #72]	; (800fa84 <udp_input+0x218>)
 800fa3a:	695b      	ldr	r3, [r3, #20]
 800fa3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa40:	2be0      	cmp	r3, #224	; 0xe0
 800fa42:	d00c      	beq.n	800fa5e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fa44:	4b0f      	ldr	r3, [pc, #60]	; (800fa84 <udp_input+0x218>)
 800fa46:	899b      	ldrh	r3, [r3, #12]
 800fa48:	3308      	adds	r3, #8
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	b21b      	sxth	r3, r3
 800fa4e:	4619      	mov	r1, r3
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7fa f906 	bl	8009c62 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fa56:	2103      	movs	r1, #3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f001 fb45 	bl	80110e8 <icmp_dest_unreach>
      pbuf_free(p);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7fa f912 	bl	8009c88 <pbuf_free>
  return;
 800fa64:	e003      	b.n	800fa6e <udp_input+0x202>
    pbuf_free(p);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7fa f90e 	bl	8009c88 <pbuf_free>
  return;
 800fa6c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fa6e:	372c      	adds	r7, #44	; 0x2c
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd90      	pop	{r4, r7, pc}
 800fa74:	08017980 	.word	0x08017980
 800fa78:	08017a24 	.word	0x08017a24
 800fa7c:	080179d4 	.word	0x080179d4
 800fa80:	08017a3c 	.word	0x08017a3c
 800fa84:	20007178 	.word	0x20007178
 800fa88:	2000a744 	.word	0x2000a744
 800fa8c:	08017a58 	.word	0x08017a58
 800fa90:	20007188 	.word	0x20007188

0800fa94 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d109      	bne.n	800fab8 <udp_send+0x24>
 800faa4:	4b11      	ldr	r3, [pc, #68]	; (800faec <udp_send+0x58>)
 800faa6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800faaa:	4911      	ldr	r1, [pc, #68]	; (800faf0 <udp_send+0x5c>)
 800faac:	4811      	ldr	r0, [pc, #68]	; (800faf4 <udp_send+0x60>)
 800faae:	f004 fbc5 	bl	801423c <iprintf>
 800fab2:	f06f 030f 	mvn.w	r3, #15
 800fab6:	e015      	b.n	800fae4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d109      	bne.n	800fad2 <udp_send+0x3e>
 800fabe:	4b0b      	ldr	r3, [pc, #44]	; (800faec <udp_send+0x58>)
 800fac0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800fac4:	490c      	ldr	r1, [pc, #48]	; (800faf8 <udp_send+0x64>)
 800fac6:	480b      	ldr	r0, [pc, #44]	; (800faf4 <udp_send+0x60>)
 800fac8:	f004 fbb8 	bl	801423c <iprintf>
 800facc:	f06f 030f 	mvn.w	r3, #15
 800fad0:	e008      	b.n	800fae4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	1d1a      	adds	r2, r3, #4
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	8a9b      	ldrh	r3, [r3, #20]
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f80d 	bl	800fafc <udp_sendto>
 800fae2:	4603      	mov	r3, r0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	08017980 	.word	0x08017980
 800faf0:	08017a74 	.word	0x08017a74
 800faf4:	080179d4 	.word	0x080179d4
 800faf8:	08017a8c 	.word	0x08017a8c

0800fafc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b088      	sub	sp, #32
 800fb00:	af02      	add	r7, sp, #8
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
 800fb08:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d109      	bne.n	800fb24 <udp_sendto+0x28>
 800fb10:	4b23      	ldr	r3, [pc, #140]	; (800fba0 <udp_sendto+0xa4>)
 800fb12:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fb16:	4923      	ldr	r1, [pc, #140]	; (800fba4 <udp_sendto+0xa8>)
 800fb18:	4823      	ldr	r0, [pc, #140]	; (800fba8 <udp_sendto+0xac>)
 800fb1a:	f004 fb8f 	bl	801423c <iprintf>
 800fb1e:	f06f 030f 	mvn.w	r3, #15
 800fb22:	e038      	b.n	800fb96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d109      	bne.n	800fb3e <udp_sendto+0x42>
 800fb2a:	4b1d      	ldr	r3, [pc, #116]	; (800fba0 <udp_sendto+0xa4>)
 800fb2c:	f240 2219 	movw	r2, #537	; 0x219
 800fb30:	491e      	ldr	r1, [pc, #120]	; (800fbac <udp_sendto+0xb0>)
 800fb32:	481d      	ldr	r0, [pc, #116]	; (800fba8 <udp_sendto+0xac>)
 800fb34:	f004 fb82 	bl	801423c <iprintf>
 800fb38:	f06f 030f 	mvn.w	r3, #15
 800fb3c:	e02b      	b.n	800fb96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d109      	bne.n	800fb58 <udp_sendto+0x5c>
 800fb44:	4b16      	ldr	r3, [pc, #88]	; (800fba0 <udp_sendto+0xa4>)
 800fb46:	f240 221a 	movw	r2, #538	; 0x21a
 800fb4a:	4919      	ldr	r1, [pc, #100]	; (800fbb0 <udp_sendto+0xb4>)
 800fb4c:	4816      	ldr	r0, [pc, #88]	; (800fba8 <udp_sendto+0xac>)
 800fb4e:	f004 fb75 	bl	801423c <iprintf>
 800fb52:	f06f 030f 	mvn.w	r3, #15
 800fb56:	e01e      	b.n	800fb96 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	7a1b      	ldrb	r3, [r3, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d006      	beq.n	800fb6e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	7a1b      	ldrb	r3, [r3, #8]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f9 fd2f 	bl	80095c8 <netif_get_by_index>
 800fb6a:	6178      	str	r0, [r7, #20]
 800fb6c:	e003      	b.n	800fb76 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f001 fb44 	bl	80111fc <ip4_route>
 800fb74:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d102      	bne.n	800fb82 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fb7c:	f06f 0303 	mvn.w	r3, #3
 800fb80:	e009      	b.n	800fb96 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fb82:	887a      	ldrh	r2, [r7, #2]
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	4613      	mov	r3, r2
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	68b9      	ldr	r1, [r7, #8]
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f000 f810 	bl	800fbb4 <udp_sendto_if>
 800fb94:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3718      	adds	r7, #24
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	08017980 	.word	0x08017980
 800fba4:	08017aa4 	.word	0x08017aa4
 800fba8:	080179d4 	.word	0x080179d4
 800fbac:	08017abc 	.word	0x08017abc
 800fbb0:	08017ad8 	.word	0x08017ad8

0800fbb4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b088      	sub	sp, #32
 800fbb8:	af02      	add	r7, sp, #8
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
 800fbc0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d109      	bne.n	800fbdc <udp_sendto_if+0x28>
 800fbc8:	4b2e      	ldr	r3, [pc, #184]	; (800fc84 <udp_sendto_if+0xd0>)
 800fbca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fbce:	492e      	ldr	r1, [pc, #184]	; (800fc88 <udp_sendto_if+0xd4>)
 800fbd0:	482e      	ldr	r0, [pc, #184]	; (800fc8c <udp_sendto_if+0xd8>)
 800fbd2:	f004 fb33 	bl	801423c <iprintf>
 800fbd6:	f06f 030f 	mvn.w	r3, #15
 800fbda:	e04f      	b.n	800fc7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d109      	bne.n	800fbf6 <udp_sendto_if+0x42>
 800fbe2:	4b28      	ldr	r3, [pc, #160]	; (800fc84 <udp_sendto_if+0xd0>)
 800fbe4:	f240 2281 	movw	r2, #641	; 0x281
 800fbe8:	4929      	ldr	r1, [pc, #164]	; (800fc90 <udp_sendto_if+0xdc>)
 800fbea:	4828      	ldr	r0, [pc, #160]	; (800fc8c <udp_sendto_if+0xd8>)
 800fbec:	f004 fb26 	bl	801423c <iprintf>
 800fbf0:	f06f 030f 	mvn.w	r3, #15
 800fbf4:	e042      	b.n	800fc7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d109      	bne.n	800fc10 <udp_sendto_if+0x5c>
 800fbfc:	4b21      	ldr	r3, [pc, #132]	; (800fc84 <udp_sendto_if+0xd0>)
 800fbfe:	f240 2282 	movw	r2, #642	; 0x282
 800fc02:	4924      	ldr	r1, [pc, #144]	; (800fc94 <udp_sendto_if+0xe0>)
 800fc04:	4821      	ldr	r0, [pc, #132]	; (800fc8c <udp_sendto_if+0xd8>)
 800fc06:	f004 fb19 	bl	801423c <iprintf>
 800fc0a:	f06f 030f 	mvn.w	r3, #15
 800fc0e:	e035      	b.n	800fc7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fc10:	6a3b      	ldr	r3, [r7, #32]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d109      	bne.n	800fc2a <udp_sendto_if+0x76>
 800fc16:	4b1b      	ldr	r3, [pc, #108]	; (800fc84 <udp_sendto_if+0xd0>)
 800fc18:	f240 2283 	movw	r2, #643	; 0x283
 800fc1c:	491e      	ldr	r1, [pc, #120]	; (800fc98 <udp_sendto_if+0xe4>)
 800fc1e:	481b      	ldr	r0, [pc, #108]	; (800fc8c <udp_sendto_if+0xd8>)
 800fc20:	f004 fb0c 	bl	801423c <iprintf>
 800fc24:	f06f 030f 	mvn.w	r3, #15
 800fc28:	e028      	b.n	800fc7c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d009      	beq.n	800fc44 <udp_sendto_if+0x90>
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d005      	beq.n	800fc44 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc40:	2be0      	cmp	r3, #224	; 0xe0
 800fc42:	d103      	bne.n	800fc4c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	3304      	adds	r3, #4
 800fc48:	617b      	str	r3, [r7, #20]
 800fc4a:	e00b      	b.n	800fc64 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	6a3b      	ldr	r3, [r7, #32]
 800fc52:	3304      	adds	r3, #4
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d002      	beq.n	800fc60 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fc5a:	f06f 0303 	mvn.w	r3, #3
 800fc5e:	e00d      	b.n	800fc7c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fc64:	887a      	ldrh	r2, [r7, #2]
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	9301      	str	r3, [sp, #4]
 800fc6a:	6a3b      	ldr	r3, [r7, #32]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	68b9      	ldr	r1, [r7, #8]
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f000 f811 	bl	800fc9c <udp_sendto_if_src>
 800fc7a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	08017980 	.word	0x08017980
 800fc88:	08017af4 	.word	0x08017af4
 800fc8c:	080179d4 	.word	0x080179d4
 800fc90:	08017b10 	.word	0x08017b10
 800fc94:	08017b2c 	.word	0x08017b2c
 800fc98:	08017b4c 	.word	0x08017b4c

0800fc9c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b08c      	sub	sp, #48	; 0x30
 800fca0:	af04      	add	r7, sp, #16
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d109      	bne.n	800fcc4 <udp_sendto_if_src+0x28>
 800fcb0:	4b65      	ldr	r3, [pc, #404]	; (800fe48 <udp_sendto_if_src+0x1ac>)
 800fcb2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fcb6:	4965      	ldr	r1, [pc, #404]	; (800fe4c <udp_sendto_if_src+0x1b0>)
 800fcb8:	4865      	ldr	r0, [pc, #404]	; (800fe50 <udp_sendto_if_src+0x1b4>)
 800fcba:	f004 fabf 	bl	801423c <iprintf>
 800fcbe:	f06f 030f 	mvn.w	r3, #15
 800fcc2:	e0bc      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d109      	bne.n	800fcde <udp_sendto_if_src+0x42>
 800fcca:	4b5f      	ldr	r3, [pc, #380]	; (800fe48 <udp_sendto_if_src+0x1ac>)
 800fccc:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fcd0:	4960      	ldr	r1, [pc, #384]	; (800fe54 <udp_sendto_if_src+0x1b8>)
 800fcd2:	485f      	ldr	r0, [pc, #380]	; (800fe50 <udp_sendto_if_src+0x1b4>)
 800fcd4:	f004 fab2 	bl	801423c <iprintf>
 800fcd8:	f06f 030f 	mvn.w	r3, #15
 800fcdc:	e0af      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d109      	bne.n	800fcf8 <udp_sendto_if_src+0x5c>
 800fce4:	4b58      	ldr	r3, [pc, #352]	; (800fe48 <udp_sendto_if_src+0x1ac>)
 800fce6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800fcea:	495b      	ldr	r1, [pc, #364]	; (800fe58 <udp_sendto_if_src+0x1bc>)
 800fcec:	4858      	ldr	r0, [pc, #352]	; (800fe50 <udp_sendto_if_src+0x1b4>)
 800fcee:	f004 faa5 	bl	801423c <iprintf>
 800fcf2:	f06f 030f 	mvn.w	r3, #15
 800fcf6:	e0a2      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800fcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d109      	bne.n	800fd12 <udp_sendto_if_src+0x76>
 800fcfe:	4b52      	ldr	r3, [pc, #328]	; (800fe48 <udp_sendto_if_src+0x1ac>)
 800fd00:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800fd04:	4955      	ldr	r1, [pc, #340]	; (800fe5c <udp_sendto_if_src+0x1c0>)
 800fd06:	4852      	ldr	r0, [pc, #328]	; (800fe50 <udp_sendto_if_src+0x1b4>)
 800fd08:	f004 fa98 	bl	801423c <iprintf>
 800fd0c:	f06f 030f 	mvn.w	r3, #15
 800fd10:	e095      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800fd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d109      	bne.n	800fd2c <udp_sendto_if_src+0x90>
 800fd18:	4b4b      	ldr	r3, [pc, #300]	; (800fe48 <udp_sendto_if_src+0x1ac>)
 800fd1a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800fd1e:	4950      	ldr	r1, [pc, #320]	; (800fe60 <udp_sendto_if_src+0x1c4>)
 800fd20:	484b      	ldr	r0, [pc, #300]	; (800fe50 <udp_sendto_if_src+0x1b4>)
 800fd22:	f004 fa8b 	bl	801423c <iprintf>
 800fd26:	f06f 030f 	mvn.w	r3, #15
 800fd2a:	e088      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	8a5b      	ldrh	r3, [r3, #18]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d10f      	bne.n	800fd54 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fd34:	68f9      	ldr	r1, [r7, #12]
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	8a5b      	ldrh	r3, [r3, #18]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f000 f893 	bl	800fe68 <udp_bind>
 800fd42:	4603      	mov	r3, r0
 800fd44:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800fd46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d002      	beq.n	800fd54 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800fd4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fd52:	e074      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	891b      	ldrh	r3, [r3, #8]
 800fd58:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d902      	bls.n	800fd66 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800fd60:	f04f 33ff 	mov.w	r3, #4294967295
 800fd64:	e06b      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fd66:	2108      	movs	r1, #8
 800fd68:	68b8      	ldr	r0, [r7, #8]
 800fd6a:	f7f9 fef7 	bl	8009b5c <pbuf_add_header>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d015      	beq.n	800fda0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800fd74:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd78:	2108      	movs	r1, #8
 800fd7a:	2022      	movs	r0, #34	; 0x22
 800fd7c:	f7f9 fca0 	bl	80096c0 <pbuf_alloc>
 800fd80:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d102      	bne.n	800fd8e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fd88:	f04f 33ff 	mov.w	r3, #4294967295
 800fd8c:	e057      	b.n	800fe3e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	891b      	ldrh	r3, [r3, #8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d006      	beq.n	800fda4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fd96:	68b9      	ldr	r1, [r7, #8]
 800fd98:	69f8      	ldr	r0, [r7, #28]
 800fd9a:	f7fa f88d 	bl	8009eb8 <pbuf_chain>
 800fd9e:	e001      	b.n	800fda4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	895b      	ldrh	r3, [r3, #10]
 800fda8:	2b07      	cmp	r3, #7
 800fdaa:	d806      	bhi.n	800fdba <udp_sendto_if_src+0x11e>
 800fdac:	4b26      	ldr	r3, [pc, #152]	; (800fe48 <udp_sendto_if_src+0x1ac>)
 800fdae:	f240 320d 	movw	r2, #781	; 0x30d
 800fdb2:	492c      	ldr	r1, [pc, #176]	; (800fe64 <udp_sendto_if_src+0x1c8>)
 800fdb4:	4826      	ldr	r0, [pc, #152]	; (800fe50 <udp_sendto_if_src+0x1b4>)
 800fdb6:	f004 fa41 	bl	801423c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	8a5b      	ldrh	r3, [r3, #18]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7f8 fcab 	bl	8008720 <lwip_htons>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	461a      	mov	r2, r3
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fdd2:	887b      	ldrh	r3, [r7, #2]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7f8 fca3 	bl	8008720 <lwip_htons>
 800fdda:	4603      	mov	r3, r0
 800fddc:	461a      	mov	r2, r3
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2200      	movs	r2, #0
 800fde6:	719a      	strb	r2, [r3, #6]
 800fde8:	2200      	movs	r2, #0
 800fdea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	891b      	ldrh	r3, [r3, #8]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7f8 fc95 	bl	8008720 <lwip_htons>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800fdfe:	2311      	movs	r3, #17
 800fe00:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	7adb      	ldrb	r3, [r3, #11]
 800fe06:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	7a9b      	ldrb	r3, [r3, #10]
 800fe0c:	7cb9      	ldrb	r1, [r7, #18]
 800fe0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe10:	9202      	str	r2, [sp, #8]
 800fe12:	7cfa      	ldrb	r2, [r7, #19]
 800fe14:	9201      	str	r2, [sp, #4]
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	460b      	mov	r3, r1
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe1e:	69f8      	ldr	r0, [r7, #28]
 800fe20:	f001 fbd4 	bl	80115cc <ip4_output_if_src>
 800fe24:	4603      	mov	r3, r0
 800fe26:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800fe28:	69fa      	ldr	r2, [r7, #28]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d004      	beq.n	800fe3a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800fe30:	69f8      	ldr	r0, [r7, #28]
 800fe32:	f7f9 ff29 	bl	8009c88 <pbuf_free>
    q = NULL;
 800fe36:	2300      	movs	r3, #0
 800fe38:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800fe3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3720      	adds	r7, #32
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	08017980 	.word	0x08017980
 800fe4c:	08017b6c 	.word	0x08017b6c
 800fe50:	080179d4 	.word	0x080179d4
 800fe54:	08017b8c 	.word	0x08017b8c
 800fe58:	08017bac 	.word	0x08017bac
 800fe5c:	08017bd0 	.word	0x08017bd0
 800fe60:	08017bf4 	.word	0x08017bf4
 800fe64:	08017c18 	.word	0x08017c18

0800fe68 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b086      	sub	sp, #24
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	4613      	mov	r3, r2
 800fe74:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d101      	bne.n	800fe80 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fe7c:	4b39      	ldr	r3, [pc, #228]	; (800ff64 <udp_bind+0xfc>)
 800fe7e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d109      	bne.n	800fe9a <udp_bind+0x32>
 800fe86:	4b38      	ldr	r3, [pc, #224]	; (800ff68 <udp_bind+0x100>)
 800fe88:	f240 32b7 	movw	r2, #951	; 0x3b7
 800fe8c:	4937      	ldr	r1, [pc, #220]	; (800ff6c <udp_bind+0x104>)
 800fe8e:	4838      	ldr	r0, [pc, #224]	; (800ff70 <udp_bind+0x108>)
 800fe90:	f004 f9d4 	bl	801423c <iprintf>
 800fe94:	f06f 030f 	mvn.w	r3, #15
 800fe98:	e060      	b.n	800ff5c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fe9e:	4b35      	ldr	r3, [pc, #212]	; (800ff74 <udp_bind+0x10c>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	617b      	str	r3, [r7, #20]
 800fea4:	e009      	b.n	800feba <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d102      	bne.n	800feb4 <udp_bind+0x4c>
      rebind = 1;
 800feae:	2301      	movs	r3, #1
 800feb0:	74fb      	strb	r3, [r7, #19]
      break;
 800feb2:	e005      	b.n	800fec0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	617b      	str	r3, [r7, #20]
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1f2      	bne.n	800fea6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800fec0:	88fb      	ldrh	r3, [r7, #6]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d109      	bne.n	800feda <udp_bind+0x72>
    port = udp_new_port();
 800fec6:	f7ff fc35 	bl	800f734 <udp_new_port>
 800feca:	4603      	mov	r3, r0
 800fecc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fece:	88fb      	ldrh	r3, [r7, #6]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d12c      	bne.n	800ff2e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800fed4:	f06f 0307 	mvn.w	r3, #7
 800fed8:	e040      	b.n	800ff5c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800feda:	4b26      	ldr	r3, [pc, #152]	; (800ff74 <udp_bind+0x10c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	617b      	str	r3, [r7, #20]
 800fee0:	e022      	b.n	800ff28 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d01b      	beq.n	800ff22 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	8a5b      	ldrh	r3, [r3, #18]
 800feee:	88fa      	ldrh	r2, [r7, #6]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d116      	bne.n	800ff22 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d00d      	beq.n	800ff1c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00a      	beq.n	800ff1c <udp_bind+0xb4>
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d006      	beq.n	800ff1c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ff0e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d003      	beq.n	800ff1c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d102      	bne.n	800ff22 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ff1c:	f06f 0307 	mvn.w	r3, #7
 800ff20:	e01c      	b.n	800ff5c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	68db      	ldr	r3, [r3, #12]
 800ff26:	617b      	str	r3, [r7, #20]
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1d9      	bne.n	800fee2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d002      	beq.n	800ff3a <udp_bind+0xd2>
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	e000      	b.n	800ff3c <udp_bind+0xd4>
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	68fa      	ldr	r2, [r7, #12]
 800ff3e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	88fa      	ldrh	r2, [r7, #6]
 800ff44:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ff46:	7cfb      	ldrb	r3, [r7, #19]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d106      	bne.n	800ff5a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ff4c:	4b09      	ldr	r3, [pc, #36]	; (800ff74 <udp_bind+0x10c>)
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ff54:	4a07      	ldr	r2, [pc, #28]	; (800ff74 <udp_bind+0x10c>)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ff5a:	2300      	movs	r3, #0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	080184b8 	.word	0x080184b8
 800ff68:	08017980 	.word	0x08017980
 800ff6c:	08017c48 	.word	0x08017c48
 800ff70:	080179d4 	.word	0x080179d4
 800ff74:	2000a744 	.word	0x2000a744

0800ff78 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d107      	bne.n	800ff9a <udp_recv+0x22>
 800ff8a:	4b08      	ldr	r3, [pc, #32]	; (800ffac <udp_recv+0x34>)
 800ff8c:	f240 428a 	movw	r2, #1162	; 0x48a
 800ff90:	4907      	ldr	r1, [pc, #28]	; (800ffb0 <udp_recv+0x38>)
 800ff92:	4808      	ldr	r0, [pc, #32]	; (800ffb4 <udp_recv+0x3c>)
 800ff94:	f004 f952 	bl	801423c <iprintf>
 800ff98:	e005      	b.n	800ffa6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	68ba      	ldr	r2, [r7, #8]
 800ff9e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	61da      	str	r2, [r3, #28]
}
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	08017980 	.word	0x08017980
 800ffb0:	08017cb4 	.word	0x08017cb4
 800ffb4:	080179d4 	.word	0x080179d4

0800ffb8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	f7f9 f804 	bl	8008fcc <memp_malloc>
 800ffc4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d007      	beq.n	800ffdc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ffcc:	2220      	movs	r2, #32
 800ffce:	2100      	movs	r1, #0
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f004 f92b 	bl	801422c <memset>
    pcb->ttl = UDP_TTL;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	22ff      	movs	r2, #255	; 0xff
 800ffda:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ffdc:	687b      	ldr	r3, [r7, #4]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
	...

0800ffe8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d01e      	beq.n	8010036 <udp_netif_ip_addr_changed+0x4e>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d01a      	beq.n	8010036 <udp_netif_ip_addr_changed+0x4e>
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d017      	beq.n	8010036 <udp_netif_ip_addr_changed+0x4e>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d013      	beq.n	8010036 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801000e:	4b0d      	ldr	r3, [pc, #52]	; (8010044 <udp_netif_ip_addr_changed+0x5c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	60fb      	str	r3, [r7, #12]
 8010014:	e00c      	b.n	8010030 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	429a      	cmp	r2, r3
 8010020:	d103      	bne.n	801002a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	60fb      	str	r3, [r7, #12]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d1ef      	bne.n	8010016 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010036:	bf00      	nop
 8010038:	3714      	adds	r7, #20
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	2000a744 	.word	0x2000a744

08010048 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010050:	4915      	ldr	r1, [pc, #84]	; (80100a8 <etharp_free_entry+0x60>)
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	4613      	mov	r3, r2
 8010056:	005b      	lsls	r3, r3, #1
 8010058:	4413      	add	r3, r2
 801005a:	00db      	lsls	r3, r3, #3
 801005c:	440b      	add	r3, r1
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d013      	beq.n	801008c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010064:	4910      	ldr	r1, [pc, #64]	; (80100a8 <etharp_free_entry+0x60>)
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	4613      	mov	r3, r2
 801006a:	005b      	lsls	r3, r3, #1
 801006c:	4413      	add	r3, r2
 801006e:	00db      	lsls	r3, r3, #3
 8010070:	440b      	add	r3, r1
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4618      	mov	r0, r3
 8010076:	f7f9 fe07 	bl	8009c88 <pbuf_free>
    arp_table[i].q = NULL;
 801007a:	490b      	ldr	r1, [pc, #44]	; (80100a8 <etharp_free_entry+0x60>)
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	4613      	mov	r3, r2
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	4413      	add	r3, r2
 8010084:	00db      	lsls	r3, r3, #3
 8010086:	440b      	add	r3, r1
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801008c:	4906      	ldr	r1, [pc, #24]	; (80100a8 <etharp_free_entry+0x60>)
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	4613      	mov	r3, r2
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	4413      	add	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	440b      	add	r3, r1
 801009a:	3314      	adds	r3, #20
 801009c:	2200      	movs	r2, #0
 801009e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80100a0:	bf00      	nop
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	2000a748 	.word	0x2000a748

080100ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100b2:	2300      	movs	r3, #0
 80100b4:	607b      	str	r3, [r7, #4]
 80100b6:	e096      	b.n	80101e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80100b8:	494f      	ldr	r1, [pc, #316]	; (80101f8 <etharp_tmr+0x14c>)
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	4613      	mov	r3, r2
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	4413      	add	r3, r2
 80100c2:	00db      	lsls	r3, r3, #3
 80100c4:	440b      	add	r3, r1
 80100c6:	3314      	adds	r3, #20
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80100cc:	78fb      	ldrb	r3, [r7, #3]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f000 8086 	beq.w	80101e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80100d4:	4948      	ldr	r1, [pc, #288]	; (80101f8 <etharp_tmr+0x14c>)
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	4613      	mov	r3, r2
 80100da:	005b      	lsls	r3, r3, #1
 80100dc:	4413      	add	r3, r2
 80100de:	00db      	lsls	r3, r3, #3
 80100e0:	440b      	add	r3, r1
 80100e2:	3312      	adds	r3, #18
 80100e4:	881b      	ldrh	r3, [r3, #0]
 80100e6:	3301      	adds	r3, #1
 80100e8:	b298      	uxth	r0, r3
 80100ea:	4943      	ldr	r1, [pc, #268]	; (80101f8 <etharp_tmr+0x14c>)
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	4613      	mov	r3, r2
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	440b      	add	r3, r1
 80100f8:	3312      	adds	r3, #18
 80100fa:	4602      	mov	r2, r0
 80100fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80100fe:	493e      	ldr	r1, [pc, #248]	; (80101f8 <etharp_tmr+0x14c>)
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	440b      	add	r3, r1
 801010c:	3312      	adds	r3, #18
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010114:	d215      	bcs.n	8010142 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010116:	4938      	ldr	r1, [pc, #224]	; (80101f8 <etharp_tmr+0x14c>)
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	4613      	mov	r3, r2
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	4413      	add	r3, r2
 8010120:	00db      	lsls	r3, r3, #3
 8010122:	440b      	add	r3, r1
 8010124:	3314      	adds	r3, #20
 8010126:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010128:	2b01      	cmp	r3, #1
 801012a:	d10e      	bne.n	801014a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801012c:	4932      	ldr	r1, [pc, #200]	; (80101f8 <etharp_tmr+0x14c>)
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	4613      	mov	r3, r2
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	4413      	add	r3, r2
 8010136:	00db      	lsls	r3, r3, #3
 8010138:	440b      	add	r3, r1
 801013a:	3312      	adds	r3, #18
 801013c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801013e:	2b04      	cmp	r3, #4
 8010140:	d903      	bls.n	801014a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7ff ff80 	bl	8010048 <etharp_free_entry>
 8010148:	e04a      	b.n	80101e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801014a:	492b      	ldr	r1, [pc, #172]	; (80101f8 <etharp_tmr+0x14c>)
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	4613      	mov	r3, r2
 8010150:	005b      	lsls	r3, r3, #1
 8010152:	4413      	add	r3, r2
 8010154:	00db      	lsls	r3, r3, #3
 8010156:	440b      	add	r3, r1
 8010158:	3314      	adds	r3, #20
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	2b03      	cmp	r3, #3
 801015e:	d10a      	bne.n	8010176 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010160:	4925      	ldr	r1, [pc, #148]	; (80101f8 <etharp_tmr+0x14c>)
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	4613      	mov	r3, r2
 8010166:	005b      	lsls	r3, r3, #1
 8010168:	4413      	add	r3, r2
 801016a:	00db      	lsls	r3, r3, #3
 801016c:	440b      	add	r3, r1
 801016e:	3314      	adds	r3, #20
 8010170:	2204      	movs	r2, #4
 8010172:	701a      	strb	r2, [r3, #0]
 8010174:	e034      	b.n	80101e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010176:	4920      	ldr	r1, [pc, #128]	; (80101f8 <etharp_tmr+0x14c>)
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	4613      	mov	r3, r2
 801017c:	005b      	lsls	r3, r3, #1
 801017e:	4413      	add	r3, r2
 8010180:	00db      	lsls	r3, r3, #3
 8010182:	440b      	add	r3, r1
 8010184:	3314      	adds	r3, #20
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	2b04      	cmp	r3, #4
 801018a:	d10a      	bne.n	80101a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801018c:	491a      	ldr	r1, [pc, #104]	; (80101f8 <etharp_tmr+0x14c>)
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	4613      	mov	r3, r2
 8010192:	005b      	lsls	r3, r3, #1
 8010194:	4413      	add	r3, r2
 8010196:	00db      	lsls	r3, r3, #3
 8010198:	440b      	add	r3, r1
 801019a:	3314      	adds	r3, #20
 801019c:	2202      	movs	r2, #2
 801019e:	701a      	strb	r2, [r3, #0]
 80101a0:	e01e      	b.n	80101e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80101a2:	4915      	ldr	r1, [pc, #84]	; (80101f8 <etharp_tmr+0x14c>)
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	4613      	mov	r3, r2
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	4413      	add	r3, r2
 80101ac:	00db      	lsls	r3, r3, #3
 80101ae:	440b      	add	r3, r1
 80101b0:	3314      	adds	r3, #20
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d113      	bne.n	80101e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80101b8:	490f      	ldr	r1, [pc, #60]	; (80101f8 <etharp_tmr+0x14c>)
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	4613      	mov	r3, r2
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	4413      	add	r3, r2
 80101c2:	00db      	lsls	r3, r3, #3
 80101c4:	440b      	add	r3, r1
 80101c6:	3308      	adds	r3, #8
 80101c8:	6818      	ldr	r0, [r3, #0]
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	4613      	mov	r3, r2
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	4413      	add	r3, r2
 80101d2:	00db      	lsls	r3, r3, #3
 80101d4:	4a08      	ldr	r2, [pc, #32]	; (80101f8 <etharp_tmr+0x14c>)
 80101d6:	4413      	add	r3, r2
 80101d8:	3304      	adds	r3, #4
 80101da:	4619      	mov	r1, r3
 80101dc:	f000 fe6e 	bl	8010ebc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	3301      	adds	r3, #1
 80101e4:	607b      	str	r3, [r7, #4]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2b09      	cmp	r3, #9
 80101ea:	f77f af65 	ble.w	80100b8 <etharp_tmr+0xc>
      }
    }
  }
}
 80101ee:	bf00      	nop
 80101f0:	bf00      	nop
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	2000a748 	.word	0x2000a748

080101fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b08a      	sub	sp, #40	; 0x28
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	460b      	mov	r3, r1
 8010206:	607a      	str	r2, [r7, #4]
 8010208:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801020a:	230a      	movs	r3, #10
 801020c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801020e:	230a      	movs	r3, #10
 8010210:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010212:	230a      	movs	r3, #10
 8010214:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010216:	2300      	movs	r3, #0
 8010218:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801021a:	230a      	movs	r3, #10
 801021c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801021e:	2300      	movs	r3, #0
 8010220:	83bb      	strh	r3, [r7, #28]
 8010222:	2300      	movs	r3, #0
 8010224:	837b      	strh	r3, [r7, #26]
 8010226:	2300      	movs	r3, #0
 8010228:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801022a:	2300      	movs	r3, #0
 801022c:	843b      	strh	r3, [r7, #32]
 801022e:	e0ae      	b.n	801038e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010234:	49a6      	ldr	r1, [pc, #664]	; (80104d0 <etharp_find_entry+0x2d4>)
 8010236:	4613      	mov	r3, r2
 8010238:	005b      	lsls	r3, r3, #1
 801023a:	4413      	add	r3, r2
 801023c:	00db      	lsls	r3, r3, #3
 801023e:	440b      	add	r3, r1
 8010240:	3314      	adds	r3, #20
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010246:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801024a:	2b0a      	cmp	r3, #10
 801024c:	d105      	bne.n	801025a <etharp_find_entry+0x5e>
 801024e:	7dfb      	ldrb	r3, [r7, #23]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d102      	bne.n	801025a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010254:	8c3b      	ldrh	r3, [r7, #32]
 8010256:	847b      	strh	r3, [r7, #34]	; 0x22
 8010258:	e095      	b.n	8010386 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801025a:	7dfb      	ldrb	r3, [r7, #23]
 801025c:	2b00      	cmp	r3, #0
 801025e:	f000 8092 	beq.w	8010386 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d009      	beq.n	801027c <etharp_find_entry+0x80>
 8010268:	7dfb      	ldrb	r3, [r7, #23]
 801026a:	2b01      	cmp	r3, #1
 801026c:	d806      	bhi.n	801027c <etharp_find_entry+0x80>
 801026e:	4b99      	ldr	r3, [pc, #612]	; (80104d4 <etharp_find_entry+0x2d8>)
 8010270:	f240 1223 	movw	r2, #291	; 0x123
 8010274:	4998      	ldr	r1, [pc, #608]	; (80104d8 <etharp_find_entry+0x2dc>)
 8010276:	4899      	ldr	r0, [pc, #612]	; (80104dc <etharp_find_entry+0x2e0>)
 8010278:	f003 ffe0 	bl	801423c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d020      	beq.n	80102c4 <etharp_find_entry+0xc8>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6819      	ldr	r1, [r3, #0]
 8010286:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801028a:	4891      	ldr	r0, [pc, #580]	; (80104d0 <etharp_find_entry+0x2d4>)
 801028c:	4613      	mov	r3, r2
 801028e:	005b      	lsls	r3, r3, #1
 8010290:	4413      	add	r3, r2
 8010292:	00db      	lsls	r3, r3, #3
 8010294:	4403      	add	r3, r0
 8010296:	3304      	adds	r3, #4
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4299      	cmp	r1, r3
 801029c:	d112      	bne.n	80102c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00c      	beq.n	80102be <etharp_find_entry+0xc2>
 80102a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102a8:	4989      	ldr	r1, [pc, #548]	; (80104d0 <etharp_find_entry+0x2d4>)
 80102aa:	4613      	mov	r3, r2
 80102ac:	005b      	lsls	r3, r3, #1
 80102ae:	4413      	add	r3, r2
 80102b0:	00db      	lsls	r3, r3, #3
 80102b2:	440b      	add	r3, r1
 80102b4:	3308      	adds	r3, #8
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d102      	bne.n	80102c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80102be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102c2:	e100      	b.n	80104c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80102c4:	7dfb      	ldrb	r3, [r7, #23]
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d140      	bne.n	801034c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80102ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102ce:	4980      	ldr	r1, [pc, #512]	; (80104d0 <etharp_find_entry+0x2d4>)
 80102d0:	4613      	mov	r3, r2
 80102d2:	005b      	lsls	r3, r3, #1
 80102d4:	4413      	add	r3, r2
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	440b      	add	r3, r1
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d01a      	beq.n	8010316 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80102e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102e4:	497a      	ldr	r1, [pc, #488]	; (80104d0 <etharp_find_entry+0x2d4>)
 80102e6:	4613      	mov	r3, r2
 80102e8:	005b      	lsls	r3, r3, #1
 80102ea:	4413      	add	r3, r2
 80102ec:	00db      	lsls	r3, r3, #3
 80102ee:	440b      	add	r3, r1
 80102f0:	3312      	adds	r3, #18
 80102f2:	881b      	ldrh	r3, [r3, #0]
 80102f4:	8bba      	ldrh	r2, [r7, #28]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d845      	bhi.n	8010386 <etharp_find_entry+0x18a>
            old_queue = i;
 80102fa:	8c3b      	ldrh	r3, [r7, #32]
 80102fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80102fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010302:	4973      	ldr	r1, [pc, #460]	; (80104d0 <etharp_find_entry+0x2d4>)
 8010304:	4613      	mov	r3, r2
 8010306:	005b      	lsls	r3, r3, #1
 8010308:	4413      	add	r3, r2
 801030a:	00db      	lsls	r3, r3, #3
 801030c:	440b      	add	r3, r1
 801030e:	3312      	adds	r3, #18
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	83bb      	strh	r3, [r7, #28]
 8010314:	e037      	b.n	8010386 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010316:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801031a:	496d      	ldr	r1, [pc, #436]	; (80104d0 <etharp_find_entry+0x2d4>)
 801031c:	4613      	mov	r3, r2
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	4413      	add	r3, r2
 8010322:	00db      	lsls	r3, r3, #3
 8010324:	440b      	add	r3, r1
 8010326:	3312      	adds	r3, #18
 8010328:	881b      	ldrh	r3, [r3, #0]
 801032a:	8b7a      	ldrh	r2, [r7, #26]
 801032c:	429a      	cmp	r2, r3
 801032e:	d82a      	bhi.n	8010386 <etharp_find_entry+0x18a>
            old_pending = i;
 8010330:	8c3b      	ldrh	r3, [r7, #32]
 8010332:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010334:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010338:	4965      	ldr	r1, [pc, #404]	; (80104d0 <etharp_find_entry+0x2d4>)
 801033a:	4613      	mov	r3, r2
 801033c:	005b      	lsls	r3, r3, #1
 801033e:	4413      	add	r3, r2
 8010340:	00db      	lsls	r3, r3, #3
 8010342:	440b      	add	r3, r1
 8010344:	3312      	adds	r3, #18
 8010346:	881b      	ldrh	r3, [r3, #0]
 8010348:	837b      	strh	r3, [r7, #26]
 801034a:	e01c      	b.n	8010386 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801034c:	7dfb      	ldrb	r3, [r7, #23]
 801034e:	2b01      	cmp	r3, #1
 8010350:	d919      	bls.n	8010386 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010356:	495e      	ldr	r1, [pc, #376]	; (80104d0 <etharp_find_entry+0x2d4>)
 8010358:	4613      	mov	r3, r2
 801035a:	005b      	lsls	r3, r3, #1
 801035c:	4413      	add	r3, r2
 801035e:	00db      	lsls	r3, r3, #3
 8010360:	440b      	add	r3, r1
 8010362:	3312      	adds	r3, #18
 8010364:	881b      	ldrh	r3, [r3, #0]
 8010366:	8b3a      	ldrh	r2, [r7, #24]
 8010368:	429a      	cmp	r2, r3
 801036a:	d80c      	bhi.n	8010386 <etharp_find_entry+0x18a>
            old_stable = i;
 801036c:	8c3b      	ldrh	r3, [r7, #32]
 801036e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010374:	4956      	ldr	r1, [pc, #344]	; (80104d0 <etharp_find_entry+0x2d4>)
 8010376:	4613      	mov	r3, r2
 8010378:	005b      	lsls	r3, r3, #1
 801037a:	4413      	add	r3, r2
 801037c:	00db      	lsls	r3, r3, #3
 801037e:	440b      	add	r3, r1
 8010380:	3312      	adds	r3, #18
 8010382:	881b      	ldrh	r3, [r3, #0]
 8010384:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010386:	8c3b      	ldrh	r3, [r7, #32]
 8010388:	3301      	adds	r3, #1
 801038a:	b29b      	uxth	r3, r3
 801038c:	843b      	strh	r3, [r7, #32]
 801038e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010392:	2b09      	cmp	r3, #9
 8010394:	f77f af4c 	ble.w	8010230 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010398:	7afb      	ldrb	r3, [r7, #11]
 801039a:	f003 0302 	and.w	r3, r3, #2
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d108      	bne.n	80103b4 <etharp_find_entry+0x1b8>
 80103a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80103a6:	2b0a      	cmp	r3, #10
 80103a8:	d107      	bne.n	80103ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80103aa:	7afb      	ldrb	r3, [r7, #11]
 80103ac:	f003 0301 	and.w	r3, r3, #1
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d102      	bne.n	80103ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80103b4:	f04f 33ff 	mov.w	r3, #4294967295
 80103b8:	e085      	b.n	80104c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80103ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80103be:	2b09      	cmp	r3, #9
 80103c0:	dc02      	bgt.n	80103c8 <etharp_find_entry+0x1cc>
    i = empty;
 80103c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103c4:	843b      	strh	r3, [r7, #32]
 80103c6:	e039      	b.n	801043c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80103c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80103cc:	2b09      	cmp	r3, #9
 80103ce:	dc14      	bgt.n	80103fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80103d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80103d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103d8:	493d      	ldr	r1, [pc, #244]	; (80104d0 <etharp_find_entry+0x2d4>)
 80103da:	4613      	mov	r3, r2
 80103dc:	005b      	lsls	r3, r3, #1
 80103de:	4413      	add	r3, r2
 80103e0:	00db      	lsls	r3, r3, #3
 80103e2:	440b      	add	r3, r1
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d018      	beq.n	801041c <etharp_find_entry+0x220>
 80103ea:	4b3a      	ldr	r3, [pc, #232]	; (80104d4 <etharp_find_entry+0x2d8>)
 80103ec:	f240 126d 	movw	r2, #365	; 0x16d
 80103f0:	493b      	ldr	r1, [pc, #236]	; (80104e0 <etharp_find_entry+0x2e4>)
 80103f2:	483a      	ldr	r0, [pc, #232]	; (80104dc <etharp_find_entry+0x2e0>)
 80103f4:	f003 ff22 	bl	801423c <iprintf>
 80103f8:	e010      	b.n	801041c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80103fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80103fe:	2b09      	cmp	r3, #9
 8010400:	dc02      	bgt.n	8010408 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010404:	843b      	strh	r3, [r7, #32]
 8010406:	e009      	b.n	801041c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010408:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801040c:	2b09      	cmp	r3, #9
 801040e:	dc02      	bgt.n	8010416 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010410:	8bfb      	ldrh	r3, [r7, #30]
 8010412:	843b      	strh	r3, [r7, #32]
 8010414:	e002      	b.n	801041c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010416:	f04f 33ff 	mov.w	r3, #4294967295
 801041a:	e054      	b.n	80104c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801041c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010420:	2b09      	cmp	r3, #9
 8010422:	dd06      	ble.n	8010432 <etharp_find_entry+0x236>
 8010424:	4b2b      	ldr	r3, [pc, #172]	; (80104d4 <etharp_find_entry+0x2d8>)
 8010426:	f240 127f 	movw	r2, #383	; 0x17f
 801042a:	492e      	ldr	r1, [pc, #184]	; (80104e4 <etharp_find_entry+0x2e8>)
 801042c:	482b      	ldr	r0, [pc, #172]	; (80104dc <etharp_find_entry+0x2e0>)
 801042e:	f003 ff05 	bl	801423c <iprintf>
    etharp_free_entry(i);
 8010432:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff fe06 	bl	8010048 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801043c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010440:	2b09      	cmp	r3, #9
 8010442:	dd06      	ble.n	8010452 <etharp_find_entry+0x256>
 8010444:	4b23      	ldr	r3, [pc, #140]	; (80104d4 <etharp_find_entry+0x2d8>)
 8010446:	f240 1283 	movw	r2, #387	; 0x183
 801044a:	4926      	ldr	r1, [pc, #152]	; (80104e4 <etharp_find_entry+0x2e8>)
 801044c:	4823      	ldr	r0, [pc, #140]	; (80104dc <etharp_find_entry+0x2e0>)
 801044e:	f003 fef5 	bl	801423c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010456:	491e      	ldr	r1, [pc, #120]	; (80104d0 <etharp_find_entry+0x2d4>)
 8010458:	4613      	mov	r3, r2
 801045a:	005b      	lsls	r3, r3, #1
 801045c:	4413      	add	r3, r2
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	440b      	add	r3, r1
 8010462:	3314      	adds	r3, #20
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d006      	beq.n	8010478 <etharp_find_entry+0x27c>
 801046a:	4b1a      	ldr	r3, [pc, #104]	; (80104d4 <etharp_find_entry+0x2d8>)
 801046c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010470:	491d      	ldr	r1, [pc, #116]	; (80104e8 <etharp_find_entry+0x2ec>)
 8010472:	481a      	ldr	r0, [pc, #104]	; (80104dc <etharp_find_entry+0x2e0>)
 8010474:	f003 fee2 	bl	801423c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00b      	beq.n	8010496 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801047e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6819      	ldr	r1, [r3, #0]
 8010486:	4812      	ldr	r0, [pc, #72]	; (80104d0 <etharp_find_entry+0x2d4>)
 8010488:	4613      	mov	r3, r2
 801048a:	005b      	lsls	r3, r3, #1
 801048c:	4413      	add	r3, r2
 801048e:	00db      	lsls	r3, r3, #3
 8010490:	4403      	add	r3, r0
 8010492:	3304      	adds	r3, #4
 8010494:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010496:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801049a:	490d      	ldr	r1, [pc, #52]	; (80104d0 <etharp_find_entry+0x2d4>)
 801049c:	4613      	mov	r3, r2
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	4413      	add	r3, r2
 80104a2:	00db      	lsls	r3, r3, #3
 80104a4:	440b      	add	r3, r1
 80104a6:	3312      	adds	r3, #18
 80104a8:	2200      	movs	r2, #0
 80104aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80104ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104b0:	4907      	ldr	r1, [pc, #28]	; (80104d0 <etharp_find_entry+0x2d4>)
 80104b2:	4613      	mov	r3, r2
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	4413      	add	r3, r2
 80104b8:	00db      	lsls	r3, r3, #3
 80104ba:	440b      	add	r3, r1
 80104bc:	3308      	adds	r3, #8
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80104c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3728      	adds	r7, #40	; 0x28
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	2000a748 	.word	0x2000a748
 80104d4:	08017ce4 	.word	0x08017ce4
 80104d8:	08017d1c 	.word	0x08017d1c
 80104dc:	08017d5c 	.word	0x08017d5c
 80104e0:	08017d84 	.word	0x08017d84
 80104e4:	08017d9c 	.word	0x08017d9c
 80104e8:	08017db0 	.word	0x08017db0

080104ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b088      	sub	sp, #32
 80104f0:	af02      	add	r7, sp, #8
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010500:	2b06      	cmp	r3, #6
 8010502:	d006      	beq.n	8010512 <etharp_update_arp_entry+0x26>
 8010504:	4b48      	ldr	r3, [pc, #288]	; (8010628 <etharp_update_arp_entry+0x13c>)
 8010506:	f240 12a9 	movw	r2, #425	; 0x1a9
 801050a:	4948      	ldr	r1, [pc, #288]	; (801062c <etharp_update_arp_entry+0x140>)
 801050c:	4848      	ldr	r0, [pc, #288]	; (8010630 <etharp_update_arp_entry+0x144>)
 801050e:	f003 fe95 	bl	801423c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d012      	beq.n	801053e <etharp_update_arp_entry+0x52>
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00e      	beq.n	801053e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	68f9      	ldr	r1, [r7, #12]
 8010526:	4618      	mov	r0, r3
 8010528:	f001 f8fe 	bl	8011728 <ip4_addr_isbroadcast_u32>
 801052c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801052e:	2b00      	cmp	r3, #0
 8010530:	d105      	bne.n	801053e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801053a:	2be0      	cmp	r3, #224	; 0xe0
 801053c:	d102      	bne.n	8010544 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801053e:	f06f 030f 	mvn.w	r3, #15
 8010542:	e06c      	b.n	801061e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010544:	78fb      	ldrb	r3, [r7, #3]
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	4619      	mov	r1, r3
 801054a:	68b8      	ldr	r0, [r7, #8]
 801054c:	f7ff fe56 	bl	80101fc <etharp_find_entry>
 8010550:	4603      	mov	r3, r0
 8010552:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010554:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010558:	2b00      	cmp	r3, #0
 801055a:	da02      	bge.n	8010562 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801055c:	8afb      	ldrh	r3, [r7, #22]
 801055e:	b25b      	sxtb	r3, r3
 8010560:	e05d      	b.n	801061e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010562:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010566:	4933      	ldr	r1, [pc, #204]	; (8010634 <etharp_update_arp_entry+0x148>)
 8010568:	4613      	mov	r3, r2
 801056a:	005b      	lsls	r3, r3, #1
 801056c:	4413      	add	r3, r2
 801056e:	00db      	lsls	r3, r3, #3
 8010570:	440b      	add	r3, r1
 8010572:	3314      	adds	r3, #20
 8010574:	2202      	movs	r2, #2
 8010576:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010578:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801057c:	492d      	ldr	r1, [pc, #180]	; (8010634 <etharp_update_arp_entry+0x148>)
 801057e:	4613      	mov	r3, r2
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	4413      	add	r3, r2
 8010584:	00db      	lsls	r3, r3, #3
 8010586:	440b      	add	r3, r1
 8010588:	3308      	adds	r3, #8
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801058e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010592:	4613      	mov	r3, r2
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	4413      	add	r3, r2
 8010598:	00db      	lsls	r3, r3, #3
 801059a:	3308      	adds	r3, #8
 801059c:	4a25      	ldr	r2, [pc, #148]	; (8010634 <etharp_update_arp_entry+0x148>)
 801059e:	4413      	add	r3, r2
 80105a0:	3304      	adds	r3, #4
 80105a2:	2206      	movs	r2, #6
 80105a4:	6879      	ldr	r1, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f003 fe18 	bl	80141dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80105ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105b0:	4920      	ldr	r1, [pc, #128]	; (8010634 <etharp_update_arp_entry+0x148>)
 80105b2:	4613      	mov	r3, r2
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	4413      	add	r3, r2
 80105b8:	00db      	lsls	r3, r3, #3
 80105ba:	440b      	add	r3, r1
 80105bc:	3312      	adds	r3, #18
 80105be:	2200      	movs	r2, #0
 80105c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80105c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105c6:	491b      	ldr	r1, [pc, #108]	; (8010634 <etharp_update_arp_entry+0x148>)
 80105c8:	4613      	mov	r3, r2
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	4413      	add	r3, r2
 80105ce:	00db      	lsls	r3, r3, #3
 80105d0:	440b      	add	r3, r1
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d021      	beq.n	801061c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80105d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105dc:	4915      	ldr	r1, [pc, #84]	; (8010634 <etharp_update_arp_entry+0x148>)
 80105de:	4613      	mov	r3, r2
 80105e0:	005b      	lsls	r3, r3, #1
 80105e2:	4413      	add	r3, r2
 80105e4:	00db      	lsls	r3, r3, #3
 80105e6:	440b      	add	r3, r1
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80105ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105f0:	4910      	ldr	r1, [pc, #64]	; (8010634 <etharp_update_arp_entry+0x148>)
 80105f2:	4613      	mov	r3, r2
 80105f4:	005b      	lsls	r3, r3, #1
 80105f6:	4413      	add	r3, r2
 80105f8:	00db      	lsls	r3, r3, #3
 80105fa:	440b      	add	r3, r1
 80105fc:	2200      	movs	r2, #0
 80105fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6939      	ldr	r1, [r7, #16]
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f001 ff97 	bl	8012544 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010616:	6938      	ldr	r0, [r7, #16]
 8010618:	f7f9 fb36 	bl	8009c88 <pbuf_free>
  }
  return ERR_OK;
 801061c:	2300      	movs	r3, #0
}
 801061e:	4618      	mov	r0, r3
 8010620:	3718      	adds	r7, #24
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	08017ce4 	.word	0x08017ce4
 801062c:	08017ddc 	.word	0x08017ddc
 8010630:	08017d5c 	.word	0x08017d5c
 8010634:	2000a748 	.word	0x2000a748

08010638 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010640:	2300      	movs	r3, #0
 8010642:	60fb      	str	r3, [r7, #12]
 8010644:	e01e      	b.n	8010684 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010646:	4913      	ldr	r1, [pc, #76]	; (8010694 <etharp_cleanup_netif+0x5c>)
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	4613      	mov	r3, r2
 801064c:	005b      	lsls	r3, r3, #1
 801064e:	4413      	add	r3, r2
 8010650:	00db      	lsls	r3, r3, #3
 8010652:	440b      	add	r3, r1
 8010654:	3314      	adds	r3, #20
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801065a:	7afb      	ldrb	r3, [r7, #11]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00e      	beq.n	801067e <etharp_cleanup_netif+0x46>
 8010660:	490c      	ldr	r1, [pc, #48]	; (8010694 <etharp_cleanup_netif+0x5c>)
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	4613      	mov	r3, r2
 8010666:	005b      	lsls	r3, r3, #1
 8010668:	4413      	add	r3, r2
 801066a:	00db      	lsls	r3, r3, #3
 801066c:	440b      	add	r3, r1
 801066e:	3308      	adds	r3, #8
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	429a      	cmp	r2, r3
 8010676:	d102      	bne.n	801067e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f7ff fce5 	bl	8010048 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	3301      	adds	r3, #1
 8010682:	60fb      	str	r3, [r7, #12]
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2b09      	cmp	r3, #9
 8010688:	dddd      	ble.n	8010646 <etharp_cleanup_netif+0xe>
    }
  }
}
 801068a:	bf00      	nop
 801068c:	bf00      	nop
 801068e:	3710      	adds	r7, #16
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	2000a748 	.word	0x2000a748

08010698 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010698:	b5b0      	push	{r4, r5, r7, lr}
 801069a:	b08a      	sub	sp, #40	; 0x28
 801069c:	af04      	add	r7, sp, #16
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d107      	bne.n	80106b8 <etharp_input+0x20>
 80106a8:	4b3d      	ldr	r3, [pc, #244]	; (80107a0 <etharp_input+0x108>)
 80106aa:	f240 228a 	movw	r2, #650	; 0x28a
 80106ae:	493d      	ldr	r1, [pc, #244]	; (80107a4 <etharp_input+0x10c>)
 80106b0:	483d      	ldr	r0, [pc, #244]	; (80107a8 <etharp_input+0x110>)
 80106b2:	f003 fdc3 	bl	801423c <iprintf>
 80106b6:	e06f      	b.n	8010798 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	881b      	ldrh	r3, [r3, #0]
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106c8:	d10c      	bne.n	80106e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106ce:	2b06      	cmp	r3, #6
 80106d0:	d108      	bne.n	80106e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106d6:	2b04      	cmp	r3, #4
 80106d8:	d104      	bne.n	80106e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	885b      	ldrh	r3, [r3, #2]
 80106de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80106e0:	2b08      	cmp	r3, #8
 80106e2:	d003      	beq.n	80106ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7f9 facf 	bl	8009c88 <pbuf_free>
    return;
 80106ea:	e055      	b.n	8010798 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	330e      	adds	r3, #14
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	3318      	adds	r3, #24
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	3304      	adds	r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d102      	bne.n	801070c <etharp_input+0x74>
    for_us = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	75fb      	strb	r3, [r7, #23]
 801070a:	e009      	b.n	8010720 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801070c:	68ba      	ldr	r2, [r7, #8]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	3304      	adds	r3, #4
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	429a      	cmp	r2, r3
 8010716:	bf0c      	ite	eq
 8010718:	2301      	moveq	r3, #1
 801071a:	2300      	movne	r3, #0
 801071c:	b2db      	uxtb	r3, r3
 801071e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	f103 0208 	add.w	r2, r3, #8
 8010726:	7dfb      	ldrb	r3, [r7, #23]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d001      	beq.n	8010730 <etharp_input+0x98>
 801072c:	2301      	movs	r3, #1
 801072e:	e000      	b.n	8010732 <etharp_input+0x9a>
 8010730:	2302      	movs	r3, #2
 8010732:	f107 010c 	add.w	r1, r7, #12
 8010736:	6838      	ldr	r0, [r7, #0]
 8010738:	f7ff fed8 	bl	80104ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	88db      	ldrh	r3, [r3, #6]
 8010740:	b29b      	uxth	r3, r3
 8010742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010746:	d003      	beq.n	8010750 <etharp_input+0xb8>
 8010748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801074c:	d01e      	beq.n	801078c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801074e:	e020      	b.n	8010792 <etharp_input+0xfa>
      if (for_us) {
 8010750:	7dfb      	ldrb	r3, [r7, #23]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d01c      	beq.n	8010790 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801076c:	693a      	ldr	r2, [r7, #16]
 801076e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010770:	2102      	movs	r1, #2
 8010772:	9103      	str	r1, [sp, #12]
 8010774:	f107 010c 	add.w	r1, r7, #12
 8010778:	9102      	str	r1, [sp, #8]
 801077a:	9201      	str	r2, [sp, #4]
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	462b      	mov	r3, r5
 8010780:	4622      	mov	r2, r4
 8010782:	4601      	mov	r1, r0
 8010784:	6838      	ldr	r0, [r7, #0]
 8010786:	f000 faeb 	bl	8010d60 <etharp_raw>
      break;
 801078a:	e001      	b.n	8010790 <etharp_input+0xf8>
      break;
 801078c:	bf00      	nop
 801078e:	e000      	b.n	8010792 <etharp_input+0xfa>
      break;
 8010790:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7f9 fa78 	bl	8009c88 <pbuf_free>
}
 8010798:	3718      	adds	r7, #24
 801079a:	46bd      	mov	sp, r7
 801079c:	bdb0      	pop	{r4, r5, r7, pc}
 801079e:	bf00      	nop
 80107a0:	08017ce4 	.word	0x08017ce4
 80107a4:	08017e34 	.word	0x08017e34
 80107a8:	08017d5c 	.word	0x08017d5c

080107ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b086      	sub	sp, #24
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	4613      	mov	r3, r2
 80107b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80107ba:	79fa      	ldrb	r2, [r7, #7]
 80107bc:	4944      	ldr	r1, [pc, #272]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 80107be:	4613      	mov	r3, r2
 80107c0:	005b      	lsls	r3, r3, #1
 80107c2:	4413      	add	r3, r2
 80107c4:	00db      	lsls	r3, r3, #3
 80107c6:	440b      	add	r3, r1
 80107c8:	3314      	adds	r3, #20
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d806      	bhi.n	80107de <etharp_output_to_arp_index+0x32>
 80107d0:	4b40      	ldr	r3, [pc, #256]	; (80108d4 <etharp_output_to_arp_index+0x128>)
 80107d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80107d6:	4940      	ldr	r1, [pc, #256]	; (80108d8 <etharp_output_to_arp_index+0x12c>)
 80107d8:	4840      	ldr	r0, [pc, #256]	; (80108dc <etharp_output_to_arp_index+0x130>)
 80107da:	f003 fd2f 	bl	801423c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80107de:	79fa      	ldrb	r2, [r7, #7]
 80107e0:	493b      	ldr	r1, [pc, #236]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 80107e2:	4613      	mov	r3, r2
 80107e4:	005b      	lsls	r3, r3, #1
 80107e6:	4413      	add	r3, r2
 80107e8:	00db      	lsls	r3, r3, #3
 80107ea:	440b      	add	r3, r1
 80107ec:	3314      	adds	r3, #20
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d153      	bne.n	801089c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80107f4:	79fa      	ldrb	r2, [r7, #7]
 80107f6:	4936      	ldr	r1, [pc, #216]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 80107f8:	4613      	mov	r3, r2
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	4413      	add	r3, r2
 80107fe:	00db      	lsls	r3, r3, #3
 8010800:	440b      	add	r3, r1
 8010802:	3312      	adds	r3, #18
 8010804:	881b      	ldrh	r3, [r3, #0]
 8010806:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801080a:	d919      	bls.n	8010840 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801080c:	79fa      	ldrb	r2, [r7, #7]
 801080e:	4613      	mov	r3, r2
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	4413      	add	r3, r2
 8010814:	00db      	lsls	r3, r3, #3
 8010816:	4a2e      	ldr	r2, [pc, #184]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 8010818:	4413      	add	r3, r2
 801081a:	3304      	adds	r3, #4
 801081c:	4619      	mov	r1, r3
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f000 fb4c 	bl	8010ebc <etharp_request>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d138      	bne.n	801089c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801082a:	79fa      	ldrb	r2, [r7, #7]
 801082c:	4928      	ldr	r1, [pc, #160]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 801082e:	4613      	mov	r3, r2
 8010830:	005b      	lsls	r3, r3, #1
 8010832:	4413      	add	r3, r2
 8010834:	00db      	lsls	r3, r3, #3
 8010836:	440b      	add	r3, r1
 8010838:	3314      	adds	r3, #20
 801083a:	2203      	movs	r2, #3
 801083c:	701a      	strb	r2, [r3, #0]
 801083e:	e02d      	b.n	801089c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010840:	79fa      	ldrb	r2, [r7, #7]
 8010842:	4923      	ldr	r1, [pc, #140]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 8010844:	4613      	mov	r3, r2
 8010846:	005b      	lsls	r3, r3, #1
 8010848:	4413      	add	r3, r2
 801084a:	00db      	lsls	r3, r3, #3
 801084c:	440b      	add	r3, r1
 801084e:	3312      	adds	r3, #18
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010856:	d321      	bcc.n	801089c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010858:	79fa      	ldrb	r2, [r7, #7]
 801085a:	4613      	mov	r3, r2
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	4413      	add	r3, r2
 8010860:	00db      	lsls	r3, r3, #3
 8010862:	4a1b      	ldr	r2, [pc, #108]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 8010864:	4413      	add	r3, r2
 8010866:	1d19      	adds	r1, r3, #4
 8010868:	79fa      	ldrb	r2, [r7, #7]
 801086a:	4613      	mov	r3, r2
 801086c:	005b      	lsls	r3, r3, #1
 801086e:	4413      	add	r3, r2
 8010870:	00db      	lsls	r3, r3, #3
 8010872:	3308      	adds	r3, #8
 8010874:	4a16      	ldr	r2, [pc, #88]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 8010876:	4413      	add	r3, r2
 8010878:	3304      	adds	r3, #4
 801087a:	461a      	mov	r2, r3
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	f000 fafb 	bl	8010e78 <etharp_request_dst>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d109      	bne.n	801089c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010888:	79fa      	ldrb	r2, [r7, #7]
 801088a:	4911      	ldr	r1, [pc, #68]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 801088c:	4613      	mov	r3, r2
 801088e:	005b      	lsls	r3, r3, #1
 8010890:	4413      	add	r3, r2
 8010892:	00db      	lsls	r3, r3, #3
 8010894:	440b      	add	r3, r1
 8010896:	3314      	adds	r3, #20
 8010898:	2203      	movs	r2, #3
 801089a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80108a2:	79fa      	ldrb	r2, [r7, #7]
 80108a4:	4613      	mov	r3, r2
 80108a6:	005b      	lsls	r3, r3, #1
 80108a8:	4413      	add	r3, r2
 80108aa:	00db      	lsls	r3, r3, #3
 80108ac:	3308      	adds	r3, #8
 80108ae:	4a08      	ldr	r2, [pc, #32]	; (80108d0 <etharp_output_to_arp_index+0x124>)
 80108b0:	4413      	add	r3, r2
 80108b2:	3304      	adds	r3, #4
 80108b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108b8:	9200      	str	r2, [sp, #0]
 80108ba:	460a      	mov	r2, r1
 80108bc:	68b9      	ldr	r1, [r7, #8]
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f001 fe40 	bl	8012544 <ethernet_output>
 80108c4:	4603      	mov	r3, r0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	2000a748 	.word	0x2000a748
 80108d4:	08017ce4 	.word	0x08017ce4
 80108d8:	08017e54 	.word	0x08017e54
 80108dc:	08017d5c 	.word	0x08017d5c

080108e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b08a      	sub	sp, #40	; 0x28
 80108e4:	af02      	add	r7, sp, #8
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <etharp_output+0x24>
 80108f6:	4b73      	ldr	r3, [pc, #460]	; (8010ac4 <etharp_output+0x1e4>)
 80108f8:	f240 321e 	movw	r2, #798	; 0x31e
 80108fc:	4972      	ldr	r1, [pc, #456]	; (8010ac8 <etharp_output+0x1e8>)
 80108fe:	4873      	ldr	r0, [pc, #460]	; (8010acc <etharp_output+0x1ec>)
 8010900:	f003 fc9c 	bl	801423c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <etharp_output+0x38>
 801090a:	4b6e      	ldr	r3, [pc, #440]	; (8010ac4 <etharp_output+0x1e4>)
 801090c:	f240 321f 	movw	r2, #799	; 0x31f
 8010910:	496f      	ldr	r1, [pc, #444]	; (8010ad0 <etharp_output+0x1f0>)
 8010912:	486e      	ldr	r0, [pc, #440]	; (8010acc <etharp_output+0x1ec>)
 8010914:	f003 fc92 	bl	801423c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d106      	bne.n	801092c <etharp_output+0x4c>
 801091e:	4b69      	ldr	r3, [pc, #420]	; (8010ac4 <etharp_output+0x1e4>)
 8010920:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010924:	496b      	ldr	r1, [pc, #428]	; (8010ad4 <etharp_output+0x1f4>)
 8010926:	4869      	ldr	r0, [pc, #420]	; (8010acc <etharp_output+0x1ec>)
 8010928:	f003 fc88 	bl	801423c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	68f9      	ldr	r1, [r7, #12]
 8010932:	4618      	mov	r0, r3
 8010934:	f000 fef8 	bl	8011728 <ip4_addr_isbroadcast_u32>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d002      	beq.n	8010944 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801093e:	4b66      	ldr	r3, [pc, #408]	; (8010ad8 <etharp_output+0x1f8>)
 8010940:	61fb      	str	r3, [r7, #28]
 8010942:	e0af      	b.n	8010aa4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801094c:	2be0      	cmp	r3, #224	; 0xe0
 801094e:	d118      	bne.n	8010982 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010950:	2301      	movs	r3, #1
 8010952:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010954:	2300      	movs	r3, #0
 8010956:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010958:	235e      	movs	r3, #94	; 0x5e
 801095a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	3301      	adds	r3, #1
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010966:	b2db      	uxtb	r3, r3
 8010968:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	3302      	adds	r3, #2
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	3303      	adds	r3, #3
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801097a:	f107 0310 	add.w	r3, r7, #16
 801097e:	61fb      	str	r3, [r7, #28]
 8010980:	e090      	b.n	8010aa4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	3304      	adds	r3, #4
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	405a      	eors	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	3308      	adds	r3, #8
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4013      	ands	r3, r2
 8010996:	2b00      	cmp	r3, #0
 8010998:	d012      	beq.n	80109c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80109a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d00b      	beq.n	80109c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	330c      	adds	r3, #12
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d003      	beq.n	80109ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	330c      	adds	r3, #12
 80109b6:	61bb      	str	r3, [r7, #24]
 80109b8:	e002      	b.n	80109c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80109ba:	f06f 0303 	mvn.w	r3, #3
 80109be:	e07d      	b.n	8010abc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80109c0:	4b46      	ldr	r3, [pc, #280]	; (8010adc <etharp_output+0x1fc>)
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	4619      	mov	r1, r3
 80109c6:	4a46      	ldr	r2, [pc, #280]	; (8010ae0 <etharp_output+0x200>)
 80109c8:	460b      	mov	r3, r1
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	440b      	add	r3, r1
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4413      	add	r3, r2
 80109d2:	3314      	adds	r3, #20
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d925      	bls.n	8010a26 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80109da:	4b40      	ldr	r3, [pc, #256]	; (8010adc <etharp_output+0x1fc>)
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	4619      	mov	r1, r3
 80109e0:	4a3f      	ldr	r2, [pc, #252]	; (8010ae0 <etharp_output+0x200>)
 80109e2:	460b      	mov	r3, r1
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	440b      	add	r3, r1
 80109e8:	00db      	lsls	r3, r3, #3
 80109ea:	4413      	add	r3, r2
 80109ec:	3308      	adds	r3, #8
 80109ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80109f0:	68fa      	ldr	r2, [r7, #12]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d117      	bne.n	8010a26 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	4b38      	ldr	r3, [pc, #224]	; (8010adc <etharp_output+0x1fc>)
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	4618      	mov	r0, r3
 8010a00:	4937      	ldr	r1, [pc, #220]	; (8010ae0 <etharp_output+0x200>)
 8010a02:	4603      	mov	r3, r0
 8010a04:	005b      	lsls	r3, r3, #1
 8010a06:	4403      	add	r3, r0
 8010a08:	00db      	lsls	r3, r3, #3
 8010a0a:	440b      	add	r3, r1
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d108      	bne.n	8010a26 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010a14:	4b31      	ldr	r3, [pc, #196]	; (8010adc <etharp_output+0x1fc>)
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	68b9      	ldr	r1, [r7, #8]
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f7ff fec5 	bl	80107ac <etharp_output_to_arp_index>
 8010a22:	4603      	mov	r3, r0
 8010a24:	e04a      	b.n	8010abc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a26:	2300      	movs	r3, #0
 8010a28:	75fb      	strb	r3, [r7, #23]
 8010a2a:	e031      	b.n	8010a90 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a2c:	7dfa      	ldrb	r2, [r7, #23]
 8010a2e:	492c      	ldr	r1, [pc, #176]	; (8010ae0 <etharp_output+0x200>)
 8010a30:	4613      	mov	r3, r2
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	4413      	add	r3, r2
 8010a36:	00db      	lsls	r3, r3, #3
 8010a38:	440b      	add	r3, r1
 8010a3a:	3314      	adds	r3, #20
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d923      	bls.n	8010a8a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010a42:	7dfa      	ldrb	r2, [r7, #23]
 8010a44:	4926      	ldr	r1, [pc, #152]	; (8010ae0 <etharp_output+0x200>)
 8010a46:	4613      	mov	r3, r2
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	4413      	add	r3, r2
 8010a4c:	00db      	lsls	r3, r3, #3
 8010a4e:	440b      	add	r3, r1
 8010a50:	3308      	adds	r3, #8
 8010a52:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d117      	bne.n	8010a8a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	6819      	ldr	r1, [r3, #0]
 8010a5e:	7dfa      	ldrb	r2, [r7, #23]
 8010a60:	481f      	ldr	r0, [pc, #124]	; (8010ae0 <etharp_output+0x200>)
 8010a62:	4613      	mov	r3, r2
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	4413      	add	r3, r2
 8010a68:	00db      	lsls	r3, r3, #3
 8010a6a:	4403      	add	r3, r0
 8010a6c:	3304      	adds	r3, #4
 8010a6e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010a70:	4299      	cmp	r1, r3
 8010a72:	d10a      	bne.n	8010a8a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010a74:	4a19      	ldr	r2, [pc, #100]	; (8010adc <etharp_output+0x1fc>)
 8010a76:	7dfb      	ldrb	r3, [r7, #23]
 8010a78:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010a7a:	7dfb      	ldrb	r3, [r7, #23]
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	68b9      	ldr	r1, [r7, #8]
 8010a80:	68f8      	ldr	r0, [r7, #12]
 8010a82:	f7ff fe93 	bl	80107ac <etharp_output_to_arp_index>
 8010a86:	4603      	mov	r3, r0
 8010a88:	e018      	b.n	8010abc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	75fb      	strb	r3, [r7, #23]
 8010a90:	7dfb      	ldrb	r3, [r7, #23]
 8010a92:	2b09      	cmp	r3, #9
 8010a94:	d9ca      	bls.n	8010a2c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	69b9      	ldr	r1, [r7, #24]
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f000 f822 	bl	8010ae4 <etharp_query>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	e00b      	b.n	8010abc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	68b9      	ldr	r1, [r7, #8]
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f001 fd45 	bl	8012544 <ethernet_output>
 8010aba:	4603      	mov	r3, r0
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3720      	adds	r7, #32
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	08017ce4 	.word	0x08017ce4
 8010ac8:	08017e34 	.word	0x08017e34
 8010acc:	08017d5c 	.word	0x08017d5c
 8010ad0:	08017e84 	.word	0x08017e84
 8010ad4:	08017e24 	.word	0x08017e24
 8010ad8:	080184bc 	.word	0x080184bc
 8010adc:	2000a838 	.word	0x2000a838
 8010ae0:	2000a748 	.word	0x2000a748

08010ae4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08c      	sub	sp, #48	; 0x30
 8010ae8:	af02      	add	r7, sp, #8
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	3326      	adds	r3, #38	; 0x26
 8010af4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010af6:	23ff      	movs	r3, #255	; 0xff
 8010af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010afc:	2300      	movs	r3, #0
 8010afe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	68f9      	ldr	r1, [r7, #12]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f000 fe0e 	bl	8011728 <ip4_addr_isbroadcast_u32>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10c      	bne.n	8010b2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b1a:	2be0      	cmp	r3, #224	; 0xe0
 8010b1c:	d006      	beq.n	8010b2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d003      	beq.n	8010b2c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d102      	bne.n	8010b32 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b2c:	f06f 030f 	mvn.w	r3, #15
 8010b30:	e101      	b.n	8010d36 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	2101      	movs	r1, #1
 8010b36:	68b8      	ldr	r0, [r7, #8]
 8010b38:	f7ff fb60 	bl	80101fc <etharp_find_entry>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010b40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	da02      	bge.n	8010b4e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010b48:	8a7b      	ldrh	r3, [r7, #18]
 8010b4a:	b25b      	sxtb	r3, r3
 8010b4c:	e0f3      	b.n	8010d36 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010b4e:	8a7b      	ldrh	r3, [r7, #18]
 8010b50:	2b7e      	cmp	r3, #126	; 0x7e
 8010b52:	d906      	bls.n	8010b62 <etharp_query+0x7e>
 8010b54:	4b7a      	ldr	r3, [pc, #488]	; (8010d40 <etharp_query+0x25c>)
 8010b56:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010b5a:	497a      	ldr	r1, [pc, #488]	; (8010d44 <etharp_query+0x260>)
 8010b5c:	487a      	ldr	r0, [pc, #488]	; (8010d48 <etharp_query+0x264>)
 8010b5e:	f003 fb6d 	bl	801423c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010b62:	8a7b      	ldrh	r3, [r7, #18]
 8010b64:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010b66:	7c7a      	ldrb	r2, [r7, #17]
 8010b68:	4978      	ldr	r1, [pc, #480]	; (8010d4c <etharp_query+0x268>)
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	005b      	lsls	r3, r3, #1
 8010b6e:	4413      	add	r3, r2
 8010b70:	00db      	lsls	r3, r3, #3
 8010b72:	440b      	add	r3, r1
 8010b74:	3314      	adds	r3, #20
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d115      	bne.n	8010ba8 <etharp_query+0xc4>
    is_new_entry = 1;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010b80:	7c7a      	ldrb	r2, [r7, #17]
 8010b82:	4972      	ldr	r1, [pc, #456]	; (8010d4c <etharp_query+0x268>)
 8010b84:	4613      	mov	r3, r2
 8010b86:	005b      	lsls	r3, r3, #1
 8010b88:	4413      	add	r3, r2
 8010b8a:	00db      	lsls	r3, r3, #3
 8010b8c:	440b      	add	r3, r1
 8010b8e:	3314      	adds	r3, #20
 8010b90:	2201      	movs	r2, #1
 8010b92:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010b94:	7c7a      	ldrb	r2, [r7, #17]
 8010b96:	496d      	ldr	r1, [pc, #436]	; (8010d4c <etharp_query+0x268>)
 8010b98:	4613      	mov	r3, r2
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	4413      	add	r3, r2
 8010b9e:	00db      	lsls	r3, r3, #3
 8010ba0:	440b      	add	r3, r1
 8010ba2:	3308      	adds	r3, #8
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010ba8:	7c7a      	ldrb	r2, [r7, #17]
 8010baa:	4968      	ldr	r1, [pc, #416]	; (8010d4c <etharp_query+0x268>)
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	3314      	adds	r3, #20
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d011      	beq.n	8010be2 <etharp_query+0xfe>
 8010bbe:	7c7a      	ldrb	r2, [r7, #17]
 8010bc0:	4962      	ldr	r1, [pc, #392]	; (8010d4c <etharp_query+0x268>)
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4413      	add	r3, r2
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	440b      	add	r3, r1
 8010bcc:	3314      	adds	r3, #20
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d806      	bhi.n	8010be2 <etharp_query+0xfe>
 8010bd4:	4b5a      	ldr	r3, [pc, #360]	; (8010d40 <etharp_query+0x25c>)
 8010bd6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010bda:	495d      	ldr	r1, [pc, #372]	; (8010d50 <etharp_query+0x26c>)
 8010bdc:	485a      	ldr	r0, [pc, #360]	; (8010d48 <etharp_query+0x264>)
 8010bde:	f003 fb2d 	bl	801423c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010be2:	6a3b      	ldr	r3, [r7, #32]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d102      	bne.n	8010bee <etharp_query+0x10a>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d10c      	bne.n	8010c08 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f000 f963 	bl	8010ebc <etharp_request>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d102      	bne.n	8010c08 <etharp_query+0x124>
      return result;
 8010c02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c06:	e096      	b.n	8010d36 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d106      	bne.n	8010c1c <etharp_query+0x138>
 8010c0e:	4b4c      	ldr	r3, [pc, #304]	; (8010d40 <etharp_query+0x25c>)
 8010c10:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010c14:	494f      	ldr	r1, [pc, #316]	; (8010d54 <etharp_query+0x270>)
 8010c16:	484c      	ldr	r0, [pc, #304]	; (8010d48 <etharp_query+0x264>)
 8010c18:	f003 fb10 	bl	801423c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010c1c:	7c7a      	ldrb	r2, [r7, #17]
 8010c1e:	494b      	ldr	r1, [pc, #300]	; (8010d4c <etharp_query+0x268>)
 8010c20:	4613      	mov	r3, r2
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	4413      	add	r3, r2
 8010c26:	00db      	lsls	r3, r3, #3
 8010c28:	440b      	add	r3, r1
 8010c2a:	3314      	adds	r3, #20
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d917      	bls.n	8010c62 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010c32:	4a49      	ldr	r2, [pc, #292]	; (8010d58 <etharp_query+0x274>)
 8010c34:	7c7b      	ldrb	r3, [r7, #17]
 8010c36:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010c38:	7c7a      	ldrb	r2, [r7, #17]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	005b      	lsls	r3, r3, #1
 8010c3e:	4413      	add	r3, r2
 8010c40:	00db      	lsls	r3, r3, #3
 8010c42:	3308      	adds	r3, #8
 8010c44:	4a41      	ldr	r2, [pc, #260]	; (8010d4c <etharp_query+0x268>)
 8010c46:	4413      	add	r3, r2
 8010c48:	3304      	adds	r3, #4
 8010c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c4e:	9200      	str	r2, [sp, #0]
 8010c50:	697a      	ldr	r2, [r7, #20]
 8010c52:	6879      	ldr	r1, [r7, #4]
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f001 fc75 	bl	8012544 <ethernet_output>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c60:	e067      	b.n	8010d32 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c62:	7c7a      	ldrb	r2, [r7, #17]
 8010c64:	4939      	ldr	r1, [pc, #228]	; (8010d4c <etharp_query+0x268>)
 8010c66:	4613      	mov	r3, r2
 8010c68:	005b      	lsls	r3, r3, #1
 8010c6a:	4413      	add	r3, r2
 8010c6c:	00db      	lsls	r3, r3, #3
 8010c6e:	440b      	add	r3, r1
 8010c70:	3314      	adds	r3, #20
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d15c      	bne.n	8010d32 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010c80:	e01c      	b.n	8010cbc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	895a      	ldrh	r2, [r3, #10]
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	891b      	ldrh	r3, [r3, #8]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d10a      	bne.n	8010ca4 <etharp_query+0x1c0>
 8010c8e:	69fb      	ldr	r3, [r7, #28]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d006      	beq.n	8010ca4 <etharp_query+0x1c0>
 8010c96:	4b2a      	ldr	r3, [pc, #168]	; (8010d40 <etharp_query+0x25c>)
 8010c98:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010c9c:	492f      	ldr	r1, [pc, #188]	; (8010d5c <etharp_query+0x278>)
 8010c9e:	482a      	ldr	r0, [pc, #168]	; (8010d48 <etharp_query+0x264>)
 8010ca0:	f003 facc 	bl	801423c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	7b1b      	ldrb	r3, [r3, #12]
 8010ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <etharp_query+0x1d2>
        copy_needed = 1;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	61bb      	str	r3, [r7, #24]
        break;
 8010cb4:	e005      	b.n	8010cc2 <etharp_query+0x1de>
      }
      p = p->next;
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1df      	bne.n	8010c82 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d007      	beq.n	8010cd8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010cce:	200e      	movs	r0, #14
 8010cd0:	f7f9 fa46 	bl	800a160 <pbuf_clone>
 8010cd4:	61f8      	str	r0, [r7, #28]
 8010cd6:	e004      	b.n	8010ce2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010cdc:	69f8      	ldr	r0, [r7, #28]
 8010cde:	f7f9 f873 	bl	8009dc8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010ce2:	69fb      	ldr	r3, [r7, #28]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d021      	beq.n	8010d2c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010ce8:	7c7a      	ldrb	r2, [r7, #17]
 8010cea:	4918      	ldr	r1, [pc, #96]	; (8010d4c <etharp_query+0x268>)
 8010cec:	4613      	mov	r3, r2
 8010cee:	005b      	lsls	r3, r3, #1
 8010cf0:	4413      	add	r3, r2
 8010cf2:	00db      	lsls	r3, r3, #3
 8010cf4:	440b      	add	r3, r1
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00a      	beq.n	8010d12 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010cfc:	7c7a      	ldrb	r2, [r7, #17]
 8010cfe:	4913      	ldr	r1, [pc, #76]	; (8010d4c <etharp_query+0x268>)
 8010d00:	4613      	mov	r3, r2
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	4413      	add	r3, r2
 8010d06:	00db      	lsls	r3, r3, #3
 8010d08:	440b      	add	r3, r1
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7f8 ffbb 	bl	8009c88 <pbuf_free>
      }
      arp_table[i].q = p;
 8010d12:	7c7a      	ldrb	r2, [r7, #17]
 8010d14:	490d      	ldr	r1, [pc, #52]	; (8010d4c <etharp_query+0x268>)
 8010d16:	4613      	mov	r3, r2
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	4413      	add	r3, r2
 8010d1c:	00db      	lsls	r3, r3, #3
 8010d1e:	440b      	add	r3, r1
 8010d20:	69fa      	ldr	r2, [r7, #28]
 8010d22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010d24:	2300      	movs	r3, #0
 8010d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d2a:	e002      	b.n	8010d32 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010d2c:	23ff      	movs	r3, #255	; 0xff
 8010d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010d32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3728      	adds	r7, #40	; 0x28
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	08017ce4 	.word	0x08017ce4
 8010d44:	08017e90 	.word	0x08017e90
 8010d48:	08017d5c 	.word	0x08017d5c
 8010d4c:	2000a748 	.word	0x2000a748
 8010d50:	08017ea0 	.word	0x08017ea0
 8010d54:	08017e84 	.word	0x08017e84
 8010d58:	2000a838 	.word	0x2000a838
 8010d5c:	08017ec8 	.word	0x08017ec8

08010d60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b08a      	sub	sp, #40	; 0x28
 8010d64:	af02      	add	r7, sp, #8
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	607a      	str	r2, [r7, #4]
 8010d6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d106      	bne.n	8010d86 <etharp_raw+0x26>
 8010d78:	4b3a      	ldr	r3, [pc, #232]	; (8010e64 <etharp_raw+0x104>)
 8010d7a:	f240 4257 	movw	r2, #1111	; 0x457
 8010d7e:	493a      	ldr	r1, [pc, #232]	; (8010e68 <etharp_raw+0x108>)
 8010d80:	483a      	ldr	r0, [pc, #232]	; (8010e6c <etharp_raw+0x10c>)
 8010d82:	f003 fa5b 	bl	801423c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010d86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d8a:	211c      	movs	r1, #28
 8010d8c:	200e      	movs	r0, #14
 8010d8e:	f7f8 fc97 	bl	80096c0 <pbuf_alloc>
 8010d92:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d9e:	e05d      	b.n	8010e5c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	895b      	ldrh	r3, [r3, #10]
 8010da4:	2b1b      	cmp	r3, #27
 8010da6:	d806      	bhi.n	8010db6 <etharp_raw+0x56>
 8010da8:	4b2e      	ldr	r3, [pc, #184]	; (8010e64 <etharp_raw+0x104>)
 8010daa:	f240 4262 	movw	r2, #1122	; 0x462
 8010dae:	4930      	ldr	r1, [pc, #192]	; (8010e70 <etharp_raw+0x110>)
 8010db0:	482e      	ldr	r0, [pc, #184]	; (8010e6c <etharp_raw+0x10c>)
 8010db2:	f003 fa43 	bl	801423c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010dbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7f7 fcae 	bl	8008720 <lwip_htons>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010dd2:	2b06      	cmp	r3, #6
 8010dd4:	d006      	beq.n	8010de4 <etharp_raw+0x84>
 8010dd6:	4b23      	ldr	r3, [pc, #140]	; (8010e64 <etharp_raw+0x104>)
 8010dd8:	f240 4269 	movw	r2, #1129	; 0x469
 8010ddc:	4925      	ldr	r1, [pc, #148]	; (8010e74 <etharp_raw+0x114>)
 8010dde:	4823      	ldr	r0, [pc, #140]	; (8010e6c <etharp_raw+0x10c>)
 8010de0:	f003 fa2c 	bl	801423c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	3308      	adds	r3, #8
 8010de8:	2206      	movs	r2, #6
 8010dea:	6839      	ldr	r1, [r7, #0]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f003 f9f5 	bl	80141dc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	3312      	adds	r3, #18
 8010df6:	2206      	movs	r2, #6
 8010df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f003 f9ee 	bl	80141dc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	330e      	adds	r3, #14
 8010e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e06:	6812      	ldr	r2, [r2, #0]
 8010e08:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	3318      	adds	r3, #24
 8010e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e10:	6812      	ldr	r2, [r2, #0]
 8010e12:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	2200      	movs	r2, #0
 8010e18:	701a      	strb	r2, [r3, #0]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f042 0201 	orr.w	r2, r2, #1
 8010e20:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	2200      	movs	r2, #0
 8010e26:	f042 0208 	orr.w	r2, r2, #8
 8010e2a:	709a      	strb	r2, [r3, #2]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	2206      	movs	r2, #6
 8010e34:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	2204      	movs	r2, #4
 8010e3a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010e3c:	f640 0306 	movw	r3, #2054	; 0x806
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	68ba      	ldr	r2, [r7, #8]
 8010e46:	69b9      	ldr	r1, [r7, #24]
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f001 fb7b 	bl	8012544 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010e4e:	69b8      	ldr	r0, [r7, #24]
 8010e50:	f7f8 ff1a 	bl	8009c88 <pbuf_free>
  p = NULL;
 8010e54:	2300      	movs	r3, #0
 8010e56:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010e58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3720      	adds	r7, #32
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	08017ce4 	.word	0x08017ce4
 8010e68:	08017e34 	.word	0x08017e34
 8010e6c:	08017d5c 	.word	0x08017d5c
 8010e70:	08017ee4 	.word	0x08017ee4
 8010e74:	08017f18 	.word	0x08017f18

08010e78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b088      	sub	sp, #32
 8010e7c:	af04      	add	r7, sp, #16
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e94:	2201      	movs	r2, #1
 8010e96:	9203      	str	r2, [sp, #12]
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	9202      	str	r2, [sp, #8]
 8010e9c:	4a06      	ldr	r2, [pc, #24]	; (8010eb8 <etharp_request_dst+0x40>)
 8010e9e:	9201      	str	r2, [sp, #4]
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f7ff ff5a 	bl	8010d60 <etharp_raw>
 8010eac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	080184c4 	.word	0x080184c4

08010ebc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010ec6:	4a05      	ldr	r2, [pc, #20]	; (8010edc <etharp_request+0x20>)
 8010ec8:	6839      	ldr	r1, [r7, #0]
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7ff ffd4 	bl	8010e78 <etharp_request_dst>
 8010ed0:	4603      	mov	r3, r0
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3708      	adds	r7, #8
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	080184bc 	.word	0x080184bc

08010ee0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b08e      	sub	sp, #56	; 0x38
 8010ee4:	af04      	add	r7, sp, #16
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010eea:	4b79      	ldr	r3, [pc, #484]	; (80110d0 <icmp_input+0x1f0>)
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	f003 030f 	and.w	r3, r3, #15
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010f00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f02:	2b13      	cmp	r3, #19
 8010f04:	f240 80cd 	bls.w	80110a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	895b      	ldrh	r3, [r3, #10]
 8010f0c:	2b03      	cmp	r3, #3
 8010f0e:	f240 80ca 	bls.w	80110a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010f1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 80b7 	beq.w	8011094 <icmp_input+0x1b4>
 8010f26:	2b08      	cmp	r3, #8
 8010f28:	f040 80b7 	bne.w	801109a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010f2c:	4b69      	ldr	r3, [pc, #420]	; (80110d4 <icmp_input+0x1f4>)
 8010f2e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f30:	4b67      	ldr	r3, [pc, #412]	; (80110d0 <icmp_input+0x1f0>)
 8010f32:	695b      	ldr	r3, [r3, #20]
 8010f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f38:	2be0      	cmp	r3, #224	; 0xe0
 8010f3a:	f000 80bb 	beq.w	80110b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010f3e:	4b64      	ldr	r3, [pc, #400]	; (80110d0 <icmp_input+0x1f0>)
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	4a63      	ldr	r2, [pc, #396]	; (80110d0 <icmp_input+0x1f0>)
 8010f44:	6812      	ldr	r2, [r2, #0]
 8010f46:	4611      	mov	r1, r2
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f000 fbed 	bl	8011728 <ip4_addr_isbroadcast_u32>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f040 80b1 	bne.w	80110b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	891b      	ldrh	r3, [r3, #8]
 8010f5a:	2b07      	cmp	r3, #7
 8010f5c:	f240 80a5 	bls.w	80110aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010f60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f62:	330e      	adds	r3, #14
 8010f64:	4619      	mov	r1, r3
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f7f8 fdf8 	bl	8009b5c <pbuf_add_header>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d04b      	beq.n	801100a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	891a      	ldrh	r2, [r3, #8]
 8010f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f78:	4413      	add	r3, r2
 8010f7a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	891b      	ldrh	r3, [r3, #8]
 8010f80:	8b7a      	ldrh	r2, [r7, #26]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	f0c0 809a 	bcc.w	80110bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010f88:	8b7b      	ldrh	r3, [r7, #26]
 8010f8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f8e:	4619      	mov	r1, r3
 8010f90:	200e      	movs	r0, #14
 8010f92:	f7f8 fb95 	bl	80096c0 <pbuf_alloc>
 8010f96:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8090 	beq.w	80110c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	895b      	ldrh	r3, [r3, #10]
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fa8:	3308      	adds	r3, #8
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d203      	bcs.n	8010fb6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010fae:	6978      	ldr	r0, [r7, #20]
 8010fb0:	f7f8 fe6a 	bl	8009c88 <pbuf_free>
          goto icmperr;
 8010fb4:	e085      	b.n	80110c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f003 f90c 	bl	80141dc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010fc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6978      	ldr	r0, [r7, #20]
 8010fca:	f7f8 fdd7 	bl	8009b7c <pbuf_remove_header>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d009      	beq.n	8010fe8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010fd4:	4b40      	ldr	r3, [pc, #256]	; (80110d8 <icmp_input+0x1f8>)
 8010fd6:	22b6      	movs	r2, #182	; 0xb6
 8010fd8:	4940      	ldr	r1, [pc, #256]	; (80110dc <icmp_input+0x1fc>)
 8010fda:	4841      	ldr	r0, [pc, #260]	; (80110e0 <icmp_input+0x200>)
 8010fdc:	f003 f92e 	bl	801423c <iprintf>
          pbuf_free(r);
 8010fe0:	6978      	ldr	r0, [r7, #20]
 8010fe2:	f7f8 fe51 	bl	8009c88 <pbuf_free>
          goto icmperr;
 8010fe6:	e06c      	b.n	80110c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010fe8:	6879      	ldr	r1, [r7, #4]
 8010fea:	6978      	ldr	r0, [r7, #20]
 8010fec:	f7f8 ff74 	bl	8009ed8 <pbuf_copy>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d003      	beq.n	8010ffe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010ff6:	6978      	ldr	r0, [r7, #20]
 8010ff8:	f7f8 fe46 	bl	8009c88 <pbuf_free>
          goto icmperr;
 8010ffc:	e061      	b.n	80110c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f7f8 fe42 	bl	8009c88 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	607b      	str	r3, [r7, #4]
 8011008:	e00f      	b.n	801102a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801100a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801100c:	330e      	adds	r3, #14
 801100e:	4619      	mov	r1, r3
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7f8 fdb3 	bl	8009b7c <pbuf_remove_header>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d006      	beq.n	801102a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801101c:	4b2e      	ldr	r3, [pc, #184]	; (80110d8 <icmp_input+0x1f8>)
 801101e:	22c7      	movs	r2, #199	; 0xc7
 8011020:	4930      	ldr	r1, [pc, #192]	; (80110e4 <icmp_input+0x204>)
 8011022:	482f      	ldr	r0, [pc, #188]	; (80110e0 <icmp_input+0x200>)
 8011024:	f003 f90a 	bl	801423c <iprintf>
          goto icmperr;
 8011028:	e04b      	b.n	80110c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011030:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011032:	4619      	mov	r1, r3
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f7f8 fd91 	bl	8009b5c <pbuf_add_header>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d12b      	bne.n	8011098 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801104e:	4b20      	ldr	r3, [pc, #128]	; (80110d0 <icmp_input+0x1f0>)
 8011050:	691a      	ldr	r2, [r3, #16]
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	2200      	movs	r2, #0
 801105a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	2200      	movs	r2, #0
 8011060:	709a      	strb	r2, [r3, #2]
 8011062:	2200      	movs	r2, #0
 8011064:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	22ff      	movs	r2, #255	; 0xff
 801106a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2200      	movs	r2, #0
 8011070:	729a      	strb	r2, [r3, #10]
 8011072:	2200      	movs	r2, #0
 8011074:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	9302      	str	r3, [sp, #8]
 801107a:	2301      	movs	r3, #1
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	2300      	movs	r3, #0
 8011080:	9300      	str	r3, [sp, #0]
 8011082:	23ff      	movs	r3, #255	; 0xff
 8011084:	2200      	movs	r2, #0
 8011086:	69f9      	ldr	r1, [r7, #28]
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f000 fa75 	bl	8011578 <ip4_output_if>
 801108e:	4603      	mov	r3, r0
 8011090:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011092:	e001      	b.n	8011098 <icmp_input+0x1b8>
      break;
 8011094:	bf00      	nop
 8011096:	e000      	b.n	801109a <icmp_input+0x1ba>
      break;
 8011098:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7f8 fdf4 	bl	8009c88 <pbuf_free>
  return;
 80110a0:	e013      	b.n	80110ca <icmp_input+0x1ea>
    goto lenerr;
 80110a2:	bf00      	nop
 80110a4:	e002      	b.n	80110ac <icmp_input+0x1cc>
    goto lenerr;
 80110a6:	bf00      	nop
 80110a8:	e000      	b.n	80110ac <icmp_input+0x1cc>
        goto lenerr;
 80110aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7f8 fdeb 	bl	8009c88 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80110b2:	e00a      	b.n	80110ca <icmp_input+0x1ea>
        goto icmperr;
 80110b4:	bf00      	nop
 80110b6:	e004      	b.n	80110c2 <icmp_input+0x1e2>
        goto icmperr;
 80110b8:	bf00      	nop
 80110ba:	e002      	b.n	80110c2 <icmp_input+0x1e2>
          goto icmperr;
 80110bc:	bf00      	nop
 80110be:	e000      	b.n	80110c2 <icmp_input+0x1e2>
          goto icmperr;
 80110c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f7f8 fde0 	bl	8009c88 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80110c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80110ca:	3728      	adds	r7, #40	; 0x28
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	20007178 	.word	0x20007178
 80110d4:	2000718c 	.word	0x2000718c
 80110d8:	08017f5c 	.word	0x08017f5c
 80110dc:	08017f94 	.word	0x08017f94
 80110e0:	08017fcc 	.word	0x08017fcc
 80110e4:	08017ff4 	.word	0x08017ff4

080110e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	460b      	mov	r3, r1
 80110f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80110f4:	78fb      	ldrb	r3, [r7, #3]
 80110f6:	461a      	mov	r2, r3
 80110f8:	2103      	movs	r1, #3
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 f814 	bl	8011128 <icmp_send_response>
}
 8011100:	bf00      	nop
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	460b      	mov	r3, r1
 8011112:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011114:	78fb      	ldrb	r3, [r7, #3]
 8011116:	461a      	mov	r2, r3
 8011118:	210b      	movs	r1, #11
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 f804 	bl	8011128 <icmp_send_response>
}
 8011120:	bf00      	nop
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b08c      	sub	sp, #48	; 0x30
 801112c:	af04      	add	r7, sp, #16
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	70fb      	strb	r3, [r7, #3]
 8011134:	4613      	mov	r3, r2
 8011136:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011138:	f44f 7220 	mov.w	r2, #640	; 0x280
 801113c:	2124      	movs	r1, #36	; 0x24
 801113e:	2022      	movs	r0, #34	; 0x22
 8011140:	f7f8 fabe 	bl	80096c0 <pbuf_alloc>
 8011144:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d04c      	beq.n	80111e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	895b      	ldrh	r3, [r3, #10]
 8011150:	2b23      	cmp	r3, #35	; 0x23
 8011152:	d806      	bhi.n	8011162 <icmp_send_response+0x3a>
 8011154:	4b26      	ldr	r3, [pc, #152]	; (80111f0 <icmp_send_response+0xc8>)
 8011156:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801115a:	4926      	ldr	r1, [pc, #152]	; (80111f4 <icmp_send_response+0xcc>)
 801115c:	4826      	ldr	r0, [pc, #152]	; (80111f8 <icmp_send_response+0xd0>)
 801115e:	f003 f86d 	bl	801423c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	78fa      	ldrb	r2, [r7, #3]
 8011172:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	78ba      	ldrb	r2, [r7, #2]
 8011178:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2200      	movs	r2, #0
 801117e:	711a      	strb	r2, [r3, #4]
 8011180:	2200      	movs	r2, #0
 8011182:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	2200      	movs	r2, #0
 8011188:	719a      	strb	r2, [r3, #6]
 801118a:	2200      	movs	r2, #0
 801118c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801118e:	69fb      	ldr	r3, [r7, #28]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	f103 0008 	add.w	r0, r3, #8
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	221c      	movs	r2, #28
 801119c:	4619      	mov	r1, r3
 801119e:	f003 f81d 	bl	80141dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80111a8:	f107 030c 	add.w	r3, r7, #12
 80111ac:	4618      	mov	r0, r3
 80111ae:	f000 f825 	bl	80111fc <ip4_route>
 80111b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d011      	beq.n	80111de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	2200      	movs	r2, #0
 80111be:	709a      	strb	r2, [r3, #2]
 80111c0:	2200      	movs	r2, #0
 80111c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80111c4:	f107 020c 	add.w	r2, r7, #12
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	9302      	str	r3, [sp, #8]
 80111cc:	2301      	movs	r3, #1
 80111ce:	9301      	str	r3, [sp, #4]
 80111d0:	2300      	movs	r3, #0
 80111d2:	9300      	str	r3, [sp, #0]
 80111d4:	23ff      	movs	r3, #255	; 0xff
 80111d6:	2100      	movs	r1, #0
 80111d8:	69f8      	ldr	r0, [r7, #28]
 80111da:	f000 f9cd 	bl	8011578 <ip4_output_if>
  }
  pbuf_free(q);
 80111de:	69f8      	ldr	r0, [r7, #28]
 80111e0:	f7f8 fd52 	bl	8009c88 <pbuf_free>
 80111e4:	e000      	b.n	80111e8 <icmp_send_response+0xc0>
    return;
 80111e6:	bf00      	nop
}
 80111e8:	3720      	adds	r7, #32
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	08017f5c 	.word	0x08017f5c
 80111f4:	08018028 	.word	0x08018028
 80111f8:	08017fcc 	.word	0x08017fcc

080111fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b085      	sub	sp, #20
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011204:	4b33      	ldr	r3, [pc, #204]	; (80112d4 <ip4_route+0xd8>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	60fb      	str	r3, [r7, #12]
 801120a:	e036      	b.n	801127a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	b2db      	uxtb	r3, r3
 8011218:	2b00      	cmp	r3, #0
 801121a:	d02b      	beq.n	8011274 <ip4_route+0x78>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011222:	089b      	lsrs	r3, r3, #2
 8011224:	f003 0301 	and.w	r3, r3, #1
 8011228:	b2db      	uxtb	r3, r3
 801122a:	2b00      	cmp	r3, #0
 801122c:	d022      	beq.n	8011274 <ip4_route+0x78>
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	3304      	adds	r3, #4
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d01d      	beq.n	8011274 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	3304      	adds	r3, #4
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	405a      	eors	r2, r3
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3308      	adds	r3, #8
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4013      	ands	r3, r2
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	e038      	b.n	80112c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801125a:	f003 0302 	and.w	r3, r3, #2
 801125e:	2b00      	cmp	r3, #0
 8011260:	d108      	bne.n	8011274 <ip4_route+0x78>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	330c      	adds	r3, #12
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	429a      	cmp	r2, r3
 801126e:	d101      	bne.n	8011274 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	e028      	b.n	80112c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	60fb      	str	r3, [r7, #12]
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d1c5      	bne.n	801120c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011280:	4b15      	ldr	r3, [pc, #84]	; (80112d8 <ip4_route+0xdc>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d01a      	beq.n	80112be <ip4_route+0xc2>
 8011288:	4b13      	ldr	r3, [pc, #76]	; (80112d8 <ip4_route+0xdc>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011290:	f003 0301 	and.w	r3, r3, #1
 8011294:	2b00      	cmp	r3, #0
 8011296:	d012      	beq.n	80112be <ip4_route+0xc2>
 8011298:	4b0f      	ldr	r3, [pc, #60]	; (80112d8 <ip4_route+0xdc>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112a0:	f003 0304 	and.w	r3, r3, #4
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d00a      	beq.n	80112be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80112a8:	4b0b      	ldr	r3, [pc, #44]	; (80112d8 <ip4_route+0xdc>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	3304      	adds	r3, #4
 80112ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d004      	beq.n	80112be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b7f      	cmp	r3, #127	; 0x7f
 80112bc:	d101      	bne.n	80112c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80112be:	2300      	movs	r3, #0
 80112c0:	e001      	b.n	80112c6 <ip4_route+0xca>
  }

  return netif_default;
 80112c2:	4b05      	ldr	r3, [pc, #20]	; (80112d8 <ip4_route+0xdc>)
 80112c4:	681b      	ldr	r3, [r3, #0]
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3714      	adds	r7, #20
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	2000a6dc 	.word	0x2000a6dc
 80112d8:	2000a6e0 	.word	0x2000a6e0

080112dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d016      	beq.n	8011322 <ip4_input_accept+0x46>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	3304      	adds	r3, #4
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d011      	beq.n	8011322 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80112fe:	4b0b      	ldr	r3, [pc, #44]	; (801132c <ip4_input_accept+0x50>)
 8011300:	695a      	ldr	r2, [r3, #20]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	3304      	adds	r3, #4
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	429a      	cmp	r2, r3
 801130a:	d008      	beq.n	801131e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801130c:	4b07      	ldr	r3, [pc, #28]	; (801132c <ip4_input_accept+0x50>)
 801130e:	695b      	ldr	r3, [r3, #20]
 8011310:	6879      	ldr	r1, [r7, #4]
 8011312:	4618      	mov	r0, r3
 8011314:	f000 fa08 	bl	8011728 <ip4_addr_isbroadcast_u32>
 8011318:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801131a:	2b00      	cmp	r3, #0
 801131c:	d001      	beq.n	8011322 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801131e:	2301      	movs	r3, #1
 8011320:	e000      	b.n	8011324 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011322:	2300      	movs	r3, #0
}
 8011324:	4618      	mov	r0, r3
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	20007178 	.word	0x20007178

08011330 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	091b      	lsrs	r3, r3, #4
 8011346:	b2db      	uxtb	r3, r3
 8011348:	2b04      	cmp	r3, #4
 801134a:	d004      	beq.n	8011356 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7f8 fc9b 	bl	8009c88 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	e107      	b.n	8011566 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	f003 030f 	and.w	r3, r3, #15
 801135e:	b2db      	uxtb	r3, r3
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	b2db      	uxtb	r3, r3
 8011364:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	885b      	ldrh	r3, [r3, #2]
 801136a:	b29b      	uxth	r3, r3
 801136c:	4618      	mov	r0, r3
 801136e:	f7f7 f9d7 	bl	8008720 <lwip_htons>
 8011372:	4603      	mov	r3, r0
 8011374:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	891b      	ldrh	r3, [r3, #8]
 801137a:	89ba      	ldrh	r2, [r7, #12]
 801137c:	429a      	cmp	r2, r3
 801137e:	d204      	bcs.n	801138a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011380:	89bb      	ldrh	r3, [r7, #12]
 8011382:	4619      	mov	r1, r3
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7f8 faf9 	bl	800997c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	895b      	ldrh	r3, [r3, #10]
 801138e:	89fa      	ldrh	r2, [r7, #14]
 8011390:	429a      	cmp	r2, r3
 8011392:	d807      	bhi.n	80113a4 <ip4_input+0x74>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	891b      	ldrh	r3, [r3, #8]
 8011398:	89ba      	ldrh	r2, [r7, #12]
 801139a:	429a      	cmp	r2, r3
 801139c:	d802      	bhi.n	80113a4 <ip4_input+0x74>
 801139e:	89fb      	ldrh	r3, [r7, #14]
 80113a0:	2b13      	cmp	r3, #19
 80113a2:	d804      	bhi.n	80113ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f7f8 fc6f 	bl	8009c88 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80113aa:	2300      	movs	r3, #0
 80113ac:	e0db      	b.n	8011566 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	691b      	ldr	r3, [r3, #16]
 80113b2:	4a6f      	ldr	r2, [pc, #444]	; (8011570 <ip4_input+0x240>)
 80113b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	4a6d      	ldr	r2, [pc, #436]	; (8011570 <ip4_input+0x240>)
 80113bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80113be:	4b6c      	ldr	r3, [pc, #432]	; (8011570 <ip4_input+0x240>)
 80113c0:	695b      	ldr	r3, [r3, #20]
 80113c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113c6:	2be0      	cmp	r3, #224	; 0xe0
 80113c8:	d112      	bne.n	80113f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113d0:	f003 0301 	and.w	r3, r3, #1
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d007      	beq.n	80113ea <ip4_input+0xba>
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	3304      	adds	r3, #4
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d002      	beq.n	80113ea <ip4_input+0xba>
      netif = inp;
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	613b      	str	r3, [r7, #16]
 80113e8:	e02a      	b.n	8011440 <ip4_input+0x110>
    } else {
      netif = NULL;
 80113ea:	2300      	movs	r3, #0
 80113ec:	613b      	str	r3, [r7, #16]
 80113ee:	e027      	b.n	8011440 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80113f0:	6838      	ldr	r0, [r7, #0]
 80113f2:	f7ff ff73 	bl	80112dc <ip4_input_accept>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d002      	beq.n	8011402 <ip4_input+0xd2>
      netif = inp;
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	613b      	str	r3, [r7, #16]
 8011400:	e01e      	b.n	8011440 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011402:	2300      	movs	r3, #0
 8011404:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011406:	4b5a      	ldr	r3, [pc, #360]	; (8011570 <ip4_input+0x240>)
 8011408:	695b      	ldr	r3, [r3, #20]
 801140a:	b2db      	uxtb	r3, r3
 801140c:	2b7f      	cmp	r3, #127	; 0x7f
 801140e:	d017      	beq.n	8011440 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011410:	4b58      	ldr	r3, [pc, #352]	; (8011574 <ip4_input+0x244>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	613b      	str	r3, [r7, #16]
 8011416:	e00e      	b.n	8011436 <ip4_input+0x106>
          if (netif == inp) {
 8011418:	693a      	ldr	r2, [r7, #16]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	429a      	cmp	r2, r3
 801141e:	d006      	beq.n	801142e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011420:	6938      	ldr	r0, [r7, #16]
 8011422:	f7ff ff5b 	bl	80112dc <ip4_input_accept>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d108      	bne.n	801143e <ip4_input+0x10e>
 801142c:	e000      	b.n	8011430 <ip4_input+0x100>
            continue;
 801142e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	613b      	str	r3, [r7, #16]
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1ed      	bne.n	8011418 <ip4_input+0xe8>
 801143c:	e000      	b.n	8011440 <ip4_input+0x110>
            break;
 801143e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011440:	4b4b      	ldr	r3, [pc, #300]	; (8011570 <ip4_input+0x240>)
 8011442:	691b      	ldr	r3, [r3, #16]
 8011444:	6839      	ldr	r1, [r7, #0]
 8011446:	4618      	mov	r0, r3
 8011448:	f000 f96e 	bl	8011728 <ip4_addr_isbroadcast_u32>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d105      	bne.n	801145e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011452:	4b47      	ldr	r3, [pc, #284]	; (8011570 <ip4_input+0x240>)
 8011454:	691b      	ldr	r3, [r3, #16]
 8011456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801145a:	2be0      	cmp	r3, #224	; 0xe0
 801145c:	d104      	bne.n	8011468 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7f8 fc12 	bl	8009c88 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011464:	2300      	movs	r3, #0
 8011466:	e07e      	b.n	8011566 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d104      	bne.n	8011478 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7f8 fc0a 	bl	8009c88 <pbuf_free>
    return ERR_OK;
 8011474:	2300      	movs	r3, #0
 8011476:	e076      	b.n	8011566 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	88db      	ldrh	r3, [r3, #6]
 801147c:	b29b      	uxth	r3, r3
 801147e:	461a      	mov	r2, r3
 8011480:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011484:	4013      	ands	r3, r2
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00b      	beq.n	80114a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 fc92 	bl	8011db4 <ip4_reass>
 8011490:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d101      	bne.n	801149c <ip4_input+0x16c>
      return ERR_OK;
 8011498:	2300      	movs	r3, #0
 801149a:	e064      	b.n	8011566 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80114a2:	4a33      	ldr	r2, [pc, #204]	; (8011570 <ip4_input+0x240>)
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80114a8:	4a31      	ldr	r2, [pc, #196]	; (8011570 <ip4_input+0x240>)
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80114ae:	4a30      	ldr	r2, [pc, #192]	; (8011570 <ip4_input+0x240>)
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	f003 030f 	and.w	r3, r3, #15
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	4b2a      	ldr	r3, [pc, #168]	; (8011570 <ip4_input+0x240>)
 80114c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80114c8:	89fb      	ldrh	r3, [r7, #14]
 80114ca:	4619      	mov	r1, r3
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f7f8 fb55 	bl	8009b7c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	7a5b      	ldrb	r3, [r3, #9]
 80114d6:	2b11      	cmp	r3, #17
 80114d8:	d006      	beq.n	80114e8 <ip4_input+0x1b8>
 80114da:	2b11      	cmp	r3, #17
 80114dc:	dc13      	bgt.n	8011506 <ip4_input+0x1d6>
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d00c      	beq.n	80114fc <ip4_input+0x1cc>
 80114e2:	2b06      	cmp	r3, #6
 80114e4:	d005      	beq.n	80114f2 <ip4_input+0x1c2>
 80114e6:	e00e      	b.n	8011506 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80114e8:	6839      	ldr	r1, [r7, #0]
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7fe f9be 	bl	800f86c <udp_input>
        break;
 80114f0:	e026      	b.n	8011540 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80114f2:	6839      	ldr	r1, [r7, #0]
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7fa f9ff 	bl	800b8f8 <tcp_input>
        break;
 80114fa:	e021      	b.n	8011540 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f7ff fcee 	bl	8010ee0 <icmp_input>
        break;
 8011504:	e01c      	b.n	8011540 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011506:	4b1a      	ldr	r3, [pc, #104]	; (8011570 <ip4_input+0x240>)
 8011508:	695b      	ldr	r3, [r3, #20]
 801150a:	6939      	ldr	r1, [r7, #16]
 801150c:	4618      	mov	r0, r3
 801150e:	f000 f90b 	bl	8011728 <ip4_addr_isbroadcast_u32>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10f      	bne.n	8011538 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011518:	4b15      	ldr	r3, [pc, #84]	; (8011570 <ip4_input+0x240>)
 801151a:	695b      	ldr	r3, [r3, #20]
 801151c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011520:	2be0      	cmp	r3, #224	; 0xe0
 8011522:	d009      	beq.n	8011538 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011528:	4619      	mov	r1, r3
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7f8 fb99 	bl	8009c62 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011530:	2102      	movs	r1, #2
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f7ff fdd8 	bl	80110e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7f8 fba5 	bl	8009c88 <pbuf_free>
        break;
 801153e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011540:	4b0b      	ldr	r3, [pc, #44]	; (8011570 <ip4_input+0x240>)
 8011542:	2200      	movs	r2, #0
 8011544:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011546:	4b0a      	ldr	r3, [pc, #40]	; (8011570 <ip4_input+0x240>)
 8011548:	2200      	movs	r2, #0
 801154a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801154c:	4b08      	ldr	r3, [pc, #32]	; (8011570 <ip4_input+0x240>)
 801154e:	2200      	movs	r2, #0
 8011550:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011552:	4b07      	ldr	r3, [pc, #28]	; (8011570 <ip4_input+0x240>)
 8011554:	2200      	movs	r2, #0
 8011556:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011558:	4b05      	ldr	r3, [pc, #20]	; (8011570 <ip4_input+0x240>)
 801155a:	2200      	movs	r2, #0
 801155c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801155e:	4b04      	ldr	r3, [pc, #16]	; (8011570 <ip4_input+0x240>)
 8011560:	2200      	movs	r2, #0
 8011562:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011564:	2300      	movs	r3, #0
}
 8011566:	4618      	mov	r0, r3
 8011568:	3718      	adds	r7, #24
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	20007178 	.word	0x20007178
 8011574:	2000a6dc 	.word	0x2000a6dc

08011578 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b08a      	sub	sp, #40	; 0x28
 801157c:	af04      	add	r7, sp, #16
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	607a      	str	r2, [r7, #4]
 8011584:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d009      	beq.n	80115a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d003      	beq.n	801159e <ip4_output_if+0x26>
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d102      	bne.n	80115a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	3304      	adds	r3, #4
 80115a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80115a4:	78fa      	ldrb	r2, [r7, #3]
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	9302      	str	r3, [sp, #8]
 80115aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80115ae:	9301      	str	r3, [sp, #4]
 80115b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	4613      	mov	r3, r2
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	6979      	ldr	r1, [r7, #20]
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	f000 f805 	bl	80115cc <ip4_output_if_src>
 80115c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b088      	sub	sp, #32
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
 80115d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	7b9b      	ldrb	r3, [r3, #14]
 80115de:	2b01      	cmp	r3, #1
 80115e0:	d006      	beq.n	80115f0 <ip4_output_if_src+0x24>
 80115e2:	4b4b      	ldr	r3, [pc, #300]	; (8011710 <ip4_output_if_src+0x144>)
 80115e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80115e8:	494a      	ldr	r1, [pc, #296]	; (8011714 <ip4_output_if_src+0x148>)
 80115ea:	484b      	ldr	r0, [pc, #300]	; (8011718 <ip4_output_if_src+0x14c>)
 80115ec:	f002 fe26 	bl	801423c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d060      	beq.n	80116b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80115f6:	2314      	movs	r3, #20
 80115f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80115fa:	2114      	movs	r1, #20
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f7f8 faad 	bl	8009b5c <pbuf_add_header>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d002      	beq.n	801160e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011608:	f06f 0301 	mvn.w	r3, #1
 801160c:	e07c      	b.n	8011708 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	895b      	ldrh	r3, [r3, #10]
 8011618:	2b13      	cmp	r3, #19
 801161a:	d806      	bhi.n	801162a <ip4_output_if_src+0x5e>
 801161c:	4b3c      	ldr	r3, [pc, #240]	; (8011710 <ip4_output_if_src+0x144>)
 801161e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011622:	493e      	ldr	r1, [pc, #248]	; (801171c <ip4_output_if_src+0x150>)
 8011624:	483c      	ldr	r0, [pc, #240]	; (8011718 <ip4_output_if_src+0x14c>)
 8011626:	f002 fe09 	bl	801423c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	78fa      	ldrb	r2, [r7, #3]
 801162e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011636:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	69fb      	ldr	r3, [r7, #28]
 801163e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011640:	8b7b      	ldrh	r3, [r7, #26]
 8011642:	089b      	lsrs	r3, r3, #2
 8011644:	b29b      	uxth	r3, r3
 8011646:	b2db      	uxtb	r3, r3
 8011648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801164c:	b2da      	uxtb	r2, r3
 801164e:	69fb      	ldr	r3, [r7, #28]
 8011650:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011658:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	891b      	ldrh	r3, [r3, #8]
 801165e:	4618      	mov	r0, r3
 8011660:	f7f7 f85e 	bl	8008720 <lwip_htons>
 8011664:	4603      	mov	r3, r0
 8011666:	461a      	mov	r2, r3
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	2200      	movs	r2, #0
 8011670:	719a      	strb	r2, [r3, #6]
 8011672:	2200      	movs	r2, #0
 8011674:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011676:	4b2a      	ldr	r3, [pc, #168]	; (8011720 <ip4_output_if_src+0x154>)
 8011678:	881b      	ldrh	r3, [r3, #0]
 801167a:	4618      	mov	r0, r3
 801167c:	f7f7 f850 	bl	8008720 <lwip_htons>
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011688:	4b25      	ldr	r3, [pc, #148]	; (8011720 <ip4_output_if_src+0x154>)
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	3301      	adds	r3, #1
 801168e:	b29a      	uxth	r2, r3
 8011690:	4b23      	ldr	r3, [pc, #140]	; (8011720 <ip4_output_if_src+0x154>)
 8011692:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d104      	bne.n	80116a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801169a:	4b22      	ldr	r3, [pc, #136]	; (8011724 <ip4_output_if_src+0x158>)
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	60da      	str	r2, [r3, #12]
 80116a2:	e003      	b.n	80116ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	2200      	movs	r2, #0
 80116b0:	729a      	strb	r2, [r3, #10]
 80116b2:	2200      	movs	r2, #0
 80116b4:	72da      	strb	r2, [r3, #11]
 80116b6:	e00f      	b.n	80116d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	895b      	ldrh	r3, [r3, #10]
 80116bc:	2b13      	cmp	r3, #19
 80116be:	d802      	bhi.n	80116c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80116c0:	f06f 0301 	mvn.w	r3, #1
 80116c4:	e020      	b.n	8011708 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	691b      	ldr	r3, [r3, #16]
 80116d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80116d2:	f107 0314 	add.w	r3, r7, #20
 80116d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80116d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00c      	beq.n	80116fa <ip4_output_if_src+0x12e>
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	891a      	ldrh	r2, [r3, #8]
 80116e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d906      	bls.n	80116fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f000 fd53 	bl	801219c <ip4_frag>
 80116f6:	4603      	mov	r3, r0
 80116f8:	e006      	b.n	8011708 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80116fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fc:	695b      	ldr	r3, [r3, #20]
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	68f9      	ldr	r1, [r7, #12]
 8011702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011704:	4798      	blx	r3
 8011706:	4603      	mov	r3, r0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3720      	adds	r7, #32
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	08018054 	.word	0x08018054
 8011714:	08018088 	.word	0x08018088
 8011718:	08018094 	.word	0x08018094
 801171c:	080180bc 	.word	0x080180bc
 8011720:	2000a83a 	.word	0x2000a83a
 8011724:	080184b8 	.word	0x080184b8

08011728 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011728:	b480      	push	{r7}
 801172a:	b085      	sub	sp, #20
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173c:	d002      	beq.n	8011744 <ip4_addr_isbroadcast_u32+0x1c>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d101      	bne.n	8011748 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011744:	2301      	movs	r3, #1
 8011746:	e02a      	b.n	801179e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801174e:	f003 0302 	and.w	r3, r3, #2
 8011752:	2b00      	cmp	r3, #0
 8011754:	d101      	bne.n	801175a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011756:	2300      	movs	r3, #0
 8011758:	e021      	b.n	801179e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	3304      	adds	r3, #4
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	429a      	cmp	r2, r3
 8011764:	d101      	bne.n	801176a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011766:	2300      	movs	r3, #0
 8011768:	e019      	b.n	801179e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	3304      	adds	r3, #4
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	405a      	eors	r2, r3
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	3308      	adds	r3, #8
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	4013      	ands	r3, r2
 801177c:	2b00      	cmp	r3, #0
 801177e:	d10d      	bne.n	801179c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	3308      	adds	r3, #8
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	43da      	mvns	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	3308      	adds	r3, #8
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011794:	429a      	cmp	r2, r3
 8011796:	d101      	bne.n	801179c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011798:	2301      	movs	r3, #1
 801179a:	e000      	b.n	801179e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801179c:	2300      	movs	r3, #0
  }
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3714      	adds	r7, #20
 80117a2:	46bd      	mov	sp, r7
 80117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a8:	4770      	bx	lr
	...

080117ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80117b6:	4b12      	ldr	r3, [pc, #72]	; (8011800 <ip_reass_tmr+0x54>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80117bc:	e018      	b.n	80117f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	7fdb      	ldrb	r3, [r3, #31]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d00b      	beq.n	80117de <ip_reass_tmr+0x32>
      r->timer--;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	7fdb      	ldrb	r3, [r3, #31]
 80117ca:	3b01      	subs	r3, #1
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	e008      	b.n	80117f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80117e8:	68b9      	ldr	r1, [r7, #8]
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 f80a 	bl	8011804 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1e3      	bne.n	80117be <ip_reass_tmr+0x12>
    }
  }
}
 80117f6:	bf00      	nop
 80117f8:	bf00      	nop
 80117fa:	3710      	adds	r7, #16
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	2000a83c 	.word	0x2000a83c

08011804 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b088      	sub	sp, #32
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801180e:	2300      	movs	r3, #0
 8011810:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	429a      	cmp	r2, r3
 8011818:	d105      	bne.n	8011826 <ip_reass_free_complete_datagram+0x22>
 801181a:	4b45      	ldr	r3, [pc, #276]	; (8011930 <ip_reass_free_complete_datagram+0x12c>)
 801181c:	22ab      	movs	r2, #171	; 0xab
 801181e:	4945      	ldr	r1, [pc, #276]	; (8011934 <ip_reass_free_complete_datagram+0x130>)
 8011820:	4845      	ldr	r0, [pc, #276]	; (8011938 <ip_reass_free_complete_datagram+0x134>)
 8011822:	f002 fd0b 	bl	801423c <iprintf>
  if (prev != NULL) {
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00a      	beq.n	8011842 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	429a      	cmp	r2, r3
 8011834:	d005      	beq.n	8011842 <ip_reass_free_complete_datagram+0x3e>
 8011836:	4b3e      	ldr	r3, [pc, #248]	; (8011930 <ip_reass_free_complete_datagram+0x12c>)
 8011838:	22ad      	movs	r2, #173	; 0xad
 801183a:	4940      	ldr	r1, [pc, #256]	; (801193c <ip_reass_free_complete_datagram+0x138>)
 801183c:	483e      	ldr	r0, [pc, #248]	; (8011938 <ip_reass_free_complete_datagram+0x134>)
 801183e:	f002 fcfd 	bl	801423c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	889b      	ldrh	r3, [r3, #4]
 801184e:	b29b      	uxth	r3, r3
 8011850:	2b00      	cmp	r3, #0
 8011852:	d12a      	bne.n	80118aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	6858      	ldr	r0, [r3, #4]
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	3308      	adds	r3, #8
 801186a:	2214      	movs	r2, #20
 801186c:	4619      	mov	r1, r3
 801186e:	f002 fcb5 	bl	80141dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011872:	2101      	movs	r1, #1
 8011874:	69b8      	ldr	r0, [r7, #24]
 8011876:	f7ff fc47 	bl	8011108 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801187a:	69b8      	ldr	r0, [r7, #24]
 801187c:	f7f8 fa8c 	bl	8009d98 <pbuf_clen>
 8011880:	4603      	mov	r3, r0
 8011882:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011884:	8bfa      	ldrh	r2, [r7, #30]
 8011886:	8a7b      	ldrh	r3, [r7, #18]
 8011888:	4413      	add	r3, r2
 801188a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801188e:	db05      	blt.n	801189c <ip_reass_free_complete_datagram+0x98>
 8011890:	4b27      	ldr	r3, [pc, #156]	; (8011930 <ip_reass_free_complete_datagram+0x12c>)
 8011892:	22bc      	movs	r2, #188	; 0xbc
 8011894:	492a      	ldr	r1, [pc, #168]	; (8011940 <ip_reass_free_complete_datagram+0x13c>)
 8011896:	4828      	ldr	r0, [pc, #160]	; (8011938 <ip_reass_free_complete_datagram+0x134>)
 8011898:	f002 fcd0 	bl	801423c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801189c:	8bfa      	ldrh	r2, [r7, #30]
 801189e:	8a7b      	ldrh	r3, [r7, #18]
 80118a0:	4413      	add	r3, r2
 80118a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80118a4:	69b8      	ldr	r0, [r7, #24]
 80118a6:	f7f8 f9ef 	bl	8009c88 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80118b0:	e01f      	b.n	80118f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f7f8 fa68 	bl	8009d98 <pbuf_clen>
 80118c8:	4603      	mov	r3, r0
 80118ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80118cc:	8bfa      	ldrh	r2, [r7, #30]
 80118ce:	8a7b      	ldrh	r3, [r7, #18]
 80118d0:	4413      	add	r3, r2
 80118d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118d6:	db05      	blt.n	80118e4 <ip_reass_free_complete_datagram+0xe0>
 80118d8:	4b15      	ldr	r3, [pc, #84]	; (8011930 <ip_reass_free_complete_datagram+0x12c>)
 80118da:	22cc      	movs	r2, #204	; 0xcc
 80118dc:	4918      	ldr	r1, [pc, #96]	; (8011940 <ip_reass_free_complete_datagram+0x13c>)
 80118de:	4816      	ldr	r0, [pc, #88]	; (8011938 <ip_reass_free_complete_datagram+0x134>)
 80118e0:	f002 fcac 	bl	801423c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80118e4:	8bfa      	ldrh	r2, [r7, #30]
 80118e6:	8a7b      	ldrh	r3, [r7, #18]
 80118e8:	4413      	add	r3, r2
 80118ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	f7f8 f9cb 	bl	8009c88 <pbuf_free>
  while (p != NULL) {
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1dc      	bne.n	80118b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80118f8:	6839      	ldr	r1, [r7, #0]
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 f8c2 	bl	8011a84 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011900:	4b10      	ldr	r3, [pc, #64]	; (8011944 <ip_reass_free_complete_datagram+0x140>)
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	8bfa      	ldrh	r2, [r7, #30]
 8011906:	429a      	cmp	r2, r3
 8011908:	d905      	bls.n	8011916 <ip_reass_free_complete_datagram+0x112>
 801190a:	4b09      	ldr	r3, [pc, #36]	; (8011930 <ip_reass_free_complete_datagram+0x12c>)
 801190c:	22d2      	movs	r2, #210	; 0xd2
 801190e:	490e      	ldr	r1, [pc, #56]	; (8011948 <ip_reass_free_complete_datagram+0x144>)
 8011910:	4809      	ldr	r0, [pc, #36]	; (8011938 <ip_reass_free_complete_datagram+0x134>)
 8011912:	f002 fc93 	bl	801423c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011916:	4b0b      	ldr	r3, [pc, #44]	; (8011944 <ip_reass_free_complete_datagram+0x140>)
 8011918:	881a      	ldrh	r2, [r3, #0]
 801191a:	8bfb      	ldrh	r3, [r7, #30]
 801191c:	1ad3      	subs	r3, r2, r3
 801191e:	b29a      	uxth	r2, r3
 8011920:	4b08      	ldr	r3, [pc, #32]	; (8011944 <ip_reass_free_complete_datagram+0x140>)
 8011922:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011924:	8bfb      	ldrh	r3, [r7, #30]
}
 8011926:	4618      	mov	r0, r3
 8011928:	3720      	adds	r7, #32
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	080180ec 	.word	0x080180ec
 8011934:	08018128 	.word	0x08018128
 8011938:	08018134 	.word	0x08018134
 801193c:	0801815c 	.word	0x0801815c
 8011940:	08018170 	.word	0x08018170
 8011944:	2000a840 	.word	0x2000a840
 8011948:	08018190 	.word	0x08018190

0801194c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b08a      	sub	sp, #40	; 0x28
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011956:	2300      	movs	r3, #0
 8011958:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801195a:	2300      	movs	r3, #0
 801195c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801195e:	2300      	movs	r3, #0
 8011960:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011962:	2300      	movs	r3, #0
 8011964:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801196a:	4b28      	ldr	r3, [pc, #160]	; (8011a0c <ip_reass_remove_oldest_datagram+0xc0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011970:	e030      	b.n	80119d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011974:	695a      	ldr	r2, [r3, #20]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	68db      	ldr	r3, [r3, #12]
 801197a:	429a      	cmp	r2, r3
 801197c:	d10c      	bne.n	8011998 <ip_reass_remove_oldest_datagram+0x4c>
 801197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011980:	699a      	ldr	r2, [r3, #24]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	429a      	cmp	r2, r3
 8011988:	d106      	bne.n	8011998 <ip_reass_remove_oldest_datagram+0x4c>
 801198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198c:	899a      	ldrh	r2, [r3, #12]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	889b      	ldrh	r3, [r3, #4]
 8011992:	b29b      	uxth	r3, r3
 8011994:	429a      	cmp	r2, r3
 8011996:	d014      	beq.n	80119c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	3301      	adds	r3, #1
 801199c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d104      	bne.n	80119ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80119a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	61bb      	str	r3, [r7, #24]
 80119ac:	e009      	b.n	80119c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b0:	7fda      	ldrb	r2, [r3, #31]
 80119b2:	6a3b      	ldr	r3, [r7, #32]
 80119b4:	7fdb      	ldrb	r3, [r3, #31]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d803      	bhi.n	80119c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80119c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d001      	beq.n	80119ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80119ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80119ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80119d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1cb      	bne.n	8011972 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80119da:	6a3b      	ldr	r3, [r7, #32]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d008      	beq.n	80119f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80119e0:	69b9      	ldr	r1, [r7, #24]
 80119e2:	6a38      	ldr	r0, [r7, #32]
 80119e4:	f7ff ff0e 	bl	8011804 <ip_reass_free_complete_datagram>
 80119e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80119ea:	697a      	ldr	r2, [r7, #20]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	4413      	add	r3, r2
 80119f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80119f2:	697a      	ldr	r2, [r7, #20]
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	da02      	bge.n	8011a00 <ip_reass_remove_oldest_datagram+0xb4>
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	dcac      	bgt.n	801195a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011a00:	697b      	ldr	r3, [r7, #20]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3728      	adds	r7, #40	; 0x28
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	2000a83c 	.word	0x2000a83c

08011a10 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a1a:	2004      	movs	r0, #4
 8011a1c:	f7f7 fad6 	bl	8008fcc <memp_malloc>
 8011a20:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d110      	bne.n	8011a4a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f7ff ff8e 	bl	801194c <ip_reass_remove_oldest_datagram>
 8011a30:	4602      	mov	r2, r0
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	4293      	cmp	r3, r2
 8011a36:	dc03      	bgt.n	8011a40 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a38:	2004      	movs	r0, #4
 8011a3a:	f7f7 fac7 	bl	8008fcc <memp_malloc>
 8011a3e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d101      	bne.n	8011a4a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011a46:	2300      	movs	r3, #0
 8011a48:	e016      	b.n	8011a78 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011a4a:	2220      	movs	r2, #32
 8011a4c:	2100      	movs	r1, #0
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f002 fbec 	bl	801422c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	220f      	movs	r2, #15
 8011a58:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011a5a:	4b09      	ldr	r3, [pc, #36]	; (8011a80 <ip_reass_enqueue_new_datagram+0x70>)
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011a62:	4a07      	ldr	r2, [pc, #28]	; (8011a80 <ip_reass_enqueue_new_datagram+0x70>)
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	3308      	adds	r3, #8
 8011a6c:	2214      	movs	r2, #20
 8011a6e:	6879      	ldr	r1, [r7, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f002 fbb3 	bl	80141dc <memcpy>
  return ipr;
 8011a76:	68fb      	ldr	r3, [r7, #12]
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	2000a83c 	.word	0x2000a83c

08011a84 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011a8e:	4b10      	ldr	r3, [pc, #64]	; (8011ad0 <ip_reass_dequeue_datagram+0x4c>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d104      	bne.n	8011aa2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4a0c      	ldr	r2, [pc, #48]	; (8011ad0 <ip_reass_dequeue_datagram+0x4c>)
 8011a9e:	6013      	str	r3, [r2, #0]
 8011aa0:	e00d      	b.n	8011abe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d106      	bne.n	8011ab6 <ip_reass_dequeue_datagram+0x32>
 8011aa8:	4b0a      	ldr	r3, [pc, #40]	; (8011ad4 <ip_reass_dequeue_datagram+0x50>)
 8011aaa:	f240 1245 	movw	r2, #325	; 0x145
 8011aae:	490a      	ldr	r1, [pc, #40]	; (8011ad8 <ip_reass_dequeue_datagram+0x54>)
 8011ab0:	480a      	ldr	r0, [pc, #40]	; (8011adc <ip_reass_dequeue_datagram+0x58>)
 8011ab2:	f002 fbc3 	bl	801423c <iprintf>
    prev->next = ipr->next;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011abe:	6879      	ldr	r1, [r7, #4]
 8011ac0:	2004      	movs	r0, #4
 8011ac2:	f7f7 facf 	bl	8009064 <memp_free>
}
 8011ac6:	bf00      	nop
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	2000a83c 	.word	0x2000a83c
 8011ad4:	080180ec 	.word	0x080180ec
 8011ad8:	080181b4 	.word	0x080181b4
 8011adc:	08018134 	.word	0x08018134

08011ae0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b08c      	sub	sp, #48	; 0x30
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	60f8      	str	r0, [r7, #12]
 8011ae8:	60b9      	str	r1, [r7, #8]
 8011aea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011aec:	2300      	movs	r3, #0
 8011aee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011af0:	2301      	movs	r3, #1
 8011af2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	885b      	ldrh	r3, [r3, #2]
 8011afe:	b29b      	uxth	r3, r3
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7f6 fe0d 	bl	8008720 <lwip_htons>
 8011b06:	4603      	mov	r3, r0
 8011b08:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	f003 030f 	and.w	r3, r3, #15
 8011b12:	b2db      	uxtb	r3, r3
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011b18:	7e7b      	ldrb	r3, [r7, #25]
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	8b7a      	ldrh	r2, [r7, #26]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d202      	bcs.n	8011b28 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b22:	f04f 33ff 	mov.w	r3, #4294967295
 8011b26:	e135      	b.n	8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011b28:	7e7b      	ldrb	r3, [r7, #25]
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	8b7a      	ldrh	r2, [r7, #26]
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	88db      	ldrh	r3, [r3, #6]
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7f6 fdf1 	bl	8008720 <lwip_htons>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	00db      	lsls	r3, r3, #3
 8011b48:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b52:	2200      	movs	r2, #0
 8011b54:	701a      	strb	r2, [r3, #0]
 8011b56:	2200      	movs	r2, #0
 8011b58:	705a      	strb	r2, [r3, #1]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	709a      	strb	r2, [r3, #2]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b64:	8afa      	ldrh	r2, [r7, #22]
 8011b66:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011b68:	8afa      	ldrh	r2, [r7, #22]
 8011b6a:	8b7b      	ldrh	r3, [r7, #26]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b72:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b76:	88db      	ldrh	r3, [r3, #6]
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	8afa      	ldrh	r2, [r7, #22]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d902      	bls.n	8011b86 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b80:	f04f 33ff 	mov.w	r3, #4294967295
 8011b84:	e106      	b.n	8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8011b8c:	e068      	b.n	8011c60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	889b      	ldrh	r3, [r3, #4]
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	889b      	ldrh	r3, [r3, #4]
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d235      	bcs.n	8011c10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ba8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d020      	beq.n	8011bf2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	889b      	ldrh	r3, [r3, #4]
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb8:	88db      	ldrh	r3, [r3, #6]
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d307      	bcc.n	8011bd0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc2:	88db      	ldrh	r3, [r3, #6]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	889b      	ldrh	r3, [r3, #4]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d902      	bls.n	8011bd6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd4:	e0de      	b.n	8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd8:	68ba      	ldr	r2, [r7, #8]
 8011bda:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bde:	88db      	ldrh	r3, [r3, #6]
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be4:	889b      	ldrh	r3, [r3, #4]
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d03d      	beq.n	8011c68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011bec:	2300      	movs	r3, #0
 8011bee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011bf0:	e03a      	b.n	8011c68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf4:	88db      	ldrh	r3, [r3, #6]
 8011bf6:	b29a      	uxth	r2, r3
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	889b      	ldrh	r3, [r3, #4]
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d902      	bls.n	8011c08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c02:	f04f 33ff 	mov.w	r3, #4294967295
 8011c06:	e0c5      	b.n	8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	68ba      	ldr	r2, [r7, #8]
 8011c0c:	605a      	str	r2, [r3, #4]
      break;
 8011c0e:	e02b      	b.n	8011c68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c12:	889b      	ldrh	r3, [r3, #4]
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	889b      	ldrh	r3, [r3, #4]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d102      	bne.n	8011c26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c20:	f04f 33ff 	mov.w	r3, #4294967295
 8011c24:	e0b6      	b.n	8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c28:	889b      	ldrh	r3, [r3, #4]
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	88db      	ldrh	r3, [r3, #6]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d202      	bcs.n	8011c3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c36:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3a:	e0ab      	b.n	8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d009      	beq.n	8011c56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c44:	88db      	ldrh	r3, [r3, #6]
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	889b      	ldrh	r3, [r3, #4]
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d001      	beq.n	8011c56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d193      	bne.n	8011b8e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011c66:	e000      	b.n	8011c6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011c68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d12d      	bne.n	8011ccc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d01c      	beq.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c78:	88db      	ldrh	r3, [r3, #6]
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7e:	889b      	ldrh	r3, [r3, #4]
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d906      	bls.n	8011c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011c86:	4b45      	ldr	r3, [pc, #276]	; (8011d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c88:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011c8c:	4944      	ldr	r1, [pc, #272]	; (8011da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011c8e:	4845      	ldr	r0, [pc, #276]	; (8011da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c90:	f002 fad4 	bl	801423c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c96:	68ba      	ldr	r2, [r7, #8]
 8011c98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c9c:	88db      	ldrh	r3, [r3, #6]
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca2:	889b      	ldrh	r3, [r3, #4]
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d010      	beq.n	8011ccc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011caa:	2300      	movs	r3, #0
 8011cac:	623b      	str	r3, [r7, #32]
 8011cae:	e00d      	b.n	8011ccc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d006      	beq.n	8011cc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011cb8:	4b38      	ldr	r3, [pc, #224]	; (8011d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011cba:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011cbe:	493a      	ldr	r1, [pc, #232]	; (8011da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011cc0:	4838      	ldr	r0, [pc, #224]	; (8011da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011cc2:	f002 fabb 	bl	801423c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d105      	bne.n	8011cde <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	7f9b      	ldrb	r3, [r3, #30]
 8011cd6:	f003 0301 	and.w	r3, r3, #1
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d059      	beq.n	8011d92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d04f      	beq.n	8011d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d006      	beq.n	8011cfa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	685b      	ldr	r3, [r3, #4]
 8011cf2:	889b      	ldrh	r3, [r3, #4]
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d002      	beq.n	8011d00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	623b      	str	r3, [r7, #32]
 8011cfe:	e041      	b.n	8011d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d02:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011d0a:	e012      	b.n	8011d32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d14:	88db      	ldrh	r3, [r3, #6]
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	889b      	ldrh	r3, [r3, #4]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d002      	beq.n	8011d28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	623b      	str	r3, [r7, #32]
            break;
 8011d26:	e007      	b.n	8011d38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d1e9      	bne.n	8011d0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011d38:	6a3b      	ldr	r3, [r7, #32]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d022      	beq.n	8011d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d106      	bne.n	8011d54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011d46:	4b15      	ldr	r3, [pc, #84]	; (8011d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d48:	f240 12df 	movw	r2, #479	; 0x1df
 8011d4c:	4917      	ldr	r1, [pc, #92]	; (8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d4e:	4815      	ldr	r0, [pc, #84]	; (8011da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d50:	f002 fa74 	bl	801423c <iprintf>
          LWIP_ASSERT("sanity check",
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	685b      	ldr	r3, [r3, #4]
 8011d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d106      	bne.n	8011d6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011d60:	4b0e      	ldr	r3, [pc, #56]	; (8011d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d62:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011d66:	4911      	ldr	r1, [pc, #68]	; (8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d68:	480e      	ldr	r0, [pc, #56]	; (8011da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d6a:	f002 fa67 	bl	801423c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d006      	beq.n	8011d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011d76:	4b09      	ldr	r3, [pc, #36]	; (8011d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d78:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011d7c:	490c      	ldr	r1, [pc, #48]	; (8011db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011d7e:	4809      	ldr	r0, [pc, #36]	; (8011da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d80:	f002 fa5c 	bl	801423c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	bf14      	ite	ne
 8011d8a:	2301      	movne	r3, #1
 8011d8c:	2300      	moveq	r3, #0
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	e000      	b.n	8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011d92:	2300      	movs	r3, #0
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3730      	adds	r7, #48	; 0x30
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	080180ec 	.word	0x080180ec
 8011da0:	080181d0 	.word	0x080181d0
 8011da4:	08018134 	.word	0x08018134
 8011da8:	080181f0 	.word	0x080181f0
 8011dac:	08018228 	.word	0x08018228
 8011db0:	08018238 	.word	0x08018238

08011db4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b08e      	sub	sp, #56	; 0x38
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	f003 030f 	and.w	r3, r3, #15
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b14      	cmp	r3, #20
 8011dd2:	f040 8171 	bne.w	80120b8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd8:	88db      	ldrh	r3, [r3, #6]
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7f6 fc9f 	bl	8008720 <lwip_htons>
 8011de2:	4603      	mov	r3, r0
 8011de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	00db      	lsls	r3, r3, #3
 8011dec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df0:	885b      	ldrh	r3, [r3, #2]
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7f6 fc93 	bl	8008720 <lwip_htons>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	f003 030f 	and.w	r3, r3, #15
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	009b      	lsls	r3, r3, #2
 8011e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e16:	429a      	cmp	r2, r3
 8011e18:	f0c0 8150 	bcc.w	80120bc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e24:	1ad3      	subs	r3, r2, r3
 8011e26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f7f7 ffb5 	bl	8009d98 <pbuf_clen>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011e32:	4b8c      	ldr	r3, [pc, #560]	; (8012064 <ip4_reass+0x2b0>)
 8011e34:	881b      	ldrh	r3, [r3, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	8c3b      	ldrh	r3, [r7, #32]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	2b0a      	cmp	r3, #10
 8011e3e:	dd10      	ble.n	8011e62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e40:	8c3b      	ldrh	r3, [r7, #32]
 8011e42:	4619      	mov	r1, r3
 8011e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e46:	f7ff fd81 	bl	801194c <ip_reass_remove_oldest_datagram>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f000 8137 	beq.w	80120c0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011e52:	4b84      	ldr	r3, [pc, #528]	; (8012064 <ip4_reass+0x2b0>)
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	461a      	mov	r2, r3
 8011e58:	8c3b      	ldrh	r3, [r7, #32]
 8011e5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e5c:	2b0a      	cmp	r3, #10
 8011e5e:	f300 812f 	bgt.w	80120c0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011e62:	4b81      	ldr	r3, [pc, #516]	; (8012068 <ip4_reass+0x2b4>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	633b      	str	r3, [r7, #48]	; 0x30
 8011e68:	e015      	b.n	8011e96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6c:	695a      	ldr	r2, [r3, #20]
 8011e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e70:	68db      	ldr	r3, [r3, #12]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d10c      	bne.n	8011e90 <ip4_reass+0xdc>
 8011e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e78:	699a      	ldr	r2, [r3, #24]
 8011e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7c:	691b      	ldr	r3, [r3, #16]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d106      	bne.n	8011e90 <ip4_reass+0xdc>
 8011e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e84:	899a      	ldrh	r2, [r3, #12]
 8011e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e88:	889b      	ldrh	r3, [r3, #4]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d006      	beq.n	8011e9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	633b      	str	r3, [r7, #48]	; 0x30
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1e6      	bne.n	8011e6a <ip4_reass+0xb6>
 8011e9c:	e000      	b.n	8011ea0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011e9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d109      	bne.n	8011eba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011ea6:	8c3b      	ldrh	r3, [r7, #32]
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eac:	f7ff fdb0 	bl	8011a10 <ip_reass_enqueue_new_datagram>
 8011eb0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d11c      	bne.n	8011ef2 <ip4_reass+0x13e>
      goto nullreturn;
 8011eb8:	e105      	b.n	80120c6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebc:	88db      	ldrh	r3, [r3, #6]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7f6 fc2d 	bl	8008720 <lwip_htons>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d110      	bne.n	8011ef2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed2:	89db      	ldrh	r3, [r3, #14]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7f6 fc23 	bl	8008720 <lwip_htons>
 8011eda:	4603      	mov	r3, r0
 8011edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d006      	beq.n	8011ef2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee6:	3308      	adds	r3, #8
 8011ee8:	2214      	movs	r2, #20
 8011eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011eec:	4618      	mov	r0, r3
 8011eee:	f002 f975 	bl	80141dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef4:	88db      	ldrh	r3, [r3, #6]
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	f003 0320 	and.w	r3, r3, #32
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	bf0c      	ite	eq
 8011f00:	2301      	moveq	r3, #1
 8011f02:	2300      	movne	r3, #0
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00e      	beq.n	8011f2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011f0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f12:	4413      	add	r3, r2
 8011f14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011f16:	8b7a      	ldrh	r2, [r7, #26]
 8011f18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	f0c0 80a0 	bcc.w	8012060 <ip4_reass+0x2ac>
 8011f20:	8b7b      	ldrh	r3, [r7, #26]
 8011f22:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011f26:	4293      	cmp	r3, r2
 8011f28:	f200 809a 	bhi.w	8012060 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011f2c:	69fa      	ldr	r2, [r7, #28]
 8011f2e:	6879      	ldr	r1, [r7, #4]
 8011f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f32:	f7ff fdd5 	bl	8011ae0 <ip_reass_chain_frag_into_datagram_and_validate>
 8011f36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f3e:	f000 809b 	beq.w	8012078 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011f42:	4b48      	ldr	r3, [pc, #288]	; (8012064 <ip4_reass+0x2b0>)
 8011f44:	881a      	ldrh	r2, [r3, #0]
 8011f46:	8c3b      	ldrh	r3, [r7, #32]
 8011f48:	4413      	add	r3, r2
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	4b45      	ldr	r3, [pc, #276]	; (8012064 <ip4_reass+0x2b0>)
 8011f4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d00d      	beq.n	8011f72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011f56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f5a:	4413      	add	r3, r2
 8011f5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f60:	8a7a      	ldrh	r2, [r7, #18]
 8011f62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f66:	7f9b      	ldrb	r3, [r3, #30]
 8011f68:	f043 0301 	orr.w	r3, r3, #1
 8011f6c:	b2da      	uxtb	r2, r3
 8011f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d171      	bne.n	801205c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7a:	8b9b      	ldrh	r3, [r3, #28]
 8011f7c:	3314      	adds	r3, #20
 8011f7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f94:	3308      	adds	r3, #8
 8011f96:	2214      	movs	r2, #20
 8011f98:	4619      	mov	r1, r3
 8011f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f9c:	f002 f91e 	bl	80141dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011fa0:	8a3b      	ldrh	r3, [r7, #16]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7f6 fbbc 	bl	8008720 <lwip_htons>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	461a      	mov	r2, r3
 8011fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	719a      	strb	r2, [r3, #6]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	729a      	strb	r2, [r3, #10]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011fca:	e00d      	b.n	8011fe8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011fd2:	2114      	movs	r1, #20
 8011fd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011fd6:	f7f7 fdd1 	bl	8009b7c <pbuf_remove_header>
      pbuf_cat(p, r);
 8011fda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f7f7 ff15 	bl	8009e0c <pbuf_cat>
      r = iprh->next_pbuf;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d1ee      	bne.n	8011fcc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011fee:	4b1e      	ldr	r3, [pc, #120]	; (8012068 <ip4_reass+0x2b4>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d102      	bne.n	8011ffe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ffc:	e010      	b.n	8012020 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011ffe:	4b1a      	ldr	r3, [pc, #104]	; (8012068 <ip4_reass+0x2b4>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012004:	e007      	b.n	8012016 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801200c:	429a      	cmp	r2, r3
 801200e:	d006      	beq.n	801201e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1f4      	bne.n	8012006 <ip4_reass+0x252>
 801201c:	e000      	b.n	8012020 <ip4_reass+0x26c>
          break;
 801201e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012024:	f7ff fd2e 	bl	8011a84 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7f7 feb5 	bl	8009d98 <pbuf_clen>
 801202e:	4603      	mov	r3, r0
 8012030:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012032:	4b0c      	ldr	r3, [pc, #48]	; (8012064 <ip4_reass+0x2b0>)
 8012034:	881b      	ldrh	r3, [r3, #0]
 8012036:	8c3a      	ldrh	r2, [r7, #32]
 8012038:	429a      	cmp	r2, r3
 801203a:	d906      	bls.n	801204a <ip4_reass+0x296>
 801203c:	4b0b      	ldr	r3, [pc, #44]	; (801206c <ip4_reass+0x2b8>)
 801203e:	f240 229b 	movw	r2, #667	; 0x29b
 8012042:	490b      	ldr	r1, [pc, #44]	; (8012070 <ip4_reass+0x2bc>)
 8012044:	480b      	ldr	r0, [pc, #44]	; (8012074 <ip4_reass+0x2c0>)
 8012046:	f002 f8f9 	bl	801423c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801204a:	4b06      	ldr	r3, [pc, #24]	; (8012064 <ip4_reass+0x2b0>)
 801204c:	881a      	ldrh	r2, [r3, #0]
 801204e:	8c3b      	ldrh	r3, [r7, #32]
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	b29a      	uxth	r2, r3
 8012054:	4b03      	ldr	r3, [pc, #12]	; (8012064 <ip4_reass+0x2b0>)
 8012056:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	e038      	b.n	80120ce <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801205c:	2300      	movs	r3, #0
 801205e:	e036      	b.n	80120ce <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012060:	bf00      	nop
 8012062:	e00a      	b.n	801207a <ip4_reass+0x2c6>
 8012064:	2000a840 	.word	0x2000a840
 8012068:	2000a83c 	.word	0x2000a83c
 801206c:	080180ec 	.word	0x080180ec
 8012070:	0801825c 	.word	0x0801825c
 8012074:	08018134 	.word	0x08018134
    goto nullreturn_ipr;
 8012078:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207c:	2b00      	cmp	r3, #0
 801207e:	d106      	bne.n	801208e <ip4_reass+0x2da>
 8012080:	4b15      	ldr	r3, [pc, #84]	; (80120d8 <ip4_reass+0x324>)
 8012082:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012086:	4915      	ldr	r1, [pc, #84]	; (80120dc <ip4_reass+0x328>)
 8012088:	4815      	ldr	r0, [pc, #84]	; (80120e0 <ip4_reass+0x32c>)
 801208a:	f002 f8d7 	bl	801423c <iprintf>
  if (ipr->p == NULL) {
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d116      	bne.n	80120c4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012096:	4b13      	ldr	r3, [pc, #76]	; (80120e4 <ip4_reass+0x330>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801209c:	429a      	cmp	r2, r3
 801209e:	d006      	beq.n	80120ae <ip4_reass+0x2fa>
 80120a0:	4b0d      	ldr	r3, [pc, #52]	; (80120d8 <ip4_reass+0x324>)
 80120a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80120a6:	4910      	ldr	r1, [pc, #64]	; (80120e8 <ip4_reass+0x334>)
 80120a8:	480d      	ldr	r0, [pc, #52]	; (80120e0 <ip4_reass+0x32c>)
 80120aa:	f002 f8c7 	bl	801423c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80120ae:	2100      	movs	r1, #0
 80120b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120b2:	f7ff fce7 	bl	8011a84 <ip_reass_dequeue_datagram>
 80120b6:	e006      	b.n	80120c6 <ip4_reass+0x312>
    goto nullreturn;
 80120b8:	bf00      	nop
 80120ba:	e004      	b.n	80120c6 <ip4_reass+0x312>
    goto nullreturn;
 80120bc:	bf00      	nop
 80120be:	e002      	b.n	80120c6 <ip4_reass+0x312>
      goto nullreturn;
 80120c0:	bf00      	nop
 80120c2:	e000      	b.n	80120c6 <ip4_reass+0x312>
  }

nullreturn:
 80120c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f7f7 fdde 	bl	8009c88 <pbuf_free>
  return NULL;
 80120cc:	2300      	movs	r3, #0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3738      	adds	r7, #56	; 0x38
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	080180ec 	.word	0x080180ec
 80120dc:	08018278 	.word	0x08018278
 80120e0:	08018134 	.word	0x08018134
 80120e4:	2000a83c 	.word	0x2000a83c
 80120e8:	08018284 	.word	0x08018284

080120ec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80120f0:	2005      	movs	r0, #5
 80120f2:	f7f6 ff6b 	bl	8008fcc <memp_malloc>
 80120f6:	4603      	mov	r3, r0
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	bd80      	pop	{r7, pc}

080120fc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d106      	bne.n	8012118 <ip_frag_free_pbuf_custom_ref+0x1c>
 801210a:	4b07      	ldr	r3, [pc, #28]	; (8012128 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801210c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012110:	4906      	ldr	r1, [pc, #24]	; (801212c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012112:	4807      	ldr	r0, [pc, #28]	; (8012130 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012114:	f002 f892 	bl	801423c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012118:	6879      	ldr	r1, [r7, #4]
 801211a:	2005      	movs	r0, #5
 801211c:	f7f6 ffa2 	bl	8009064 <memp_free>
}
 8012120:	bf00      	nop
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	080180ec 	.word	0x080180ec
 801212c:	080182a4 	.word	0x080182a4
 8012130:	08018134 	.word	0x08018134

08012134 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d106      	bne.n	8012154 <ipfrag_free_pbuf_custom+0x20>
 8012146:	4b11      	ldr	r3, [pc, #68]	; (801218c <ipfrag_free_pbuf_custom+0x58>)
 8012148:	f240 22ce 	movw	r2, #718	; 0x2ce
 801214c:	4910      	ldr	r1, [pc, #64]	; (8012190 <ipfrag_free_pbuf_custom+0x5c>)
 801214e:	4811      	ldr	r0, [pc, #68]	; (8012194 <ipfrag_free_pbuf_custom+0x60>)
 8012150:	f002 f874 	bl	801423c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012154:	68fa      	ldr	r2, [r7, #12]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	429a      	cmp	r2, r3
 801215a:	d006      	beq.n	801216a <ipfrag_free_pbuf_custom+0x36>
 801215c:	4b0b      	ldr	r3, [pc, #44]	; (801218c <ipfrag_free_pbuf_custom+0x58>)
 801215e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012162:	490d      	ldr	r1, [pc, #52]	; (8012198 <ipfrag_free_pbuf_custom+0x64>)
 8012164:	480b      	ldr	r0, [pc, #44]	; (8012194 <ipfrag_free_pbuf_custom+0x60>)
 8012166:	f002 f869 	bl	801423c <iprintf>
  if (pcr->original != NULL) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	695b      	ldr	r3, [r3, #20]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d004      	beq.n	801217c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	695b      	ldr	r3, [r3, #20]
 8012176:	4618      	mov	r0, r3
 8012178:	f7f7 fd86 	bl	8009c88 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f7ff ffbd 	bl	80120fc <ip_frag_free_pbuf_custom_ref>
}
 8012182:	bf00      	nop
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	080180ec 	.word	0x080180ec
 8012190:	080182b0 	.word	0x080182b0
 8012194:	08018134 	.word	0x08018134
 8012198:	080182bc 	.word	0x080182bc

0801219c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b094      	sub	sp, #80	; 0x50
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80121a8:	2300      	movs	r3, #0
 80121aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80121b2:	3b14      	subs	r3, #20
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	da00      	bge.n	80121ba <ip4_frag+0x1e>
 80121b8:	3307      	adds	r3, #7
 80121ba:	10db      	asrs	r3, r3, #3
 80121bc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80121be:	2314      	movs	r3, #20
 80121c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80121c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80121cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	f003 030f 	and.w	r3, r3, #15
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	2b14      	cmp	r3, #20
 80121dc:	d002      	beq.n	80121e4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80121de:	f06f 0305 	mvn.w	r3, #5
 80121e2:	e110      	b.n	8012406 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	895b      	ldrh	r3, [r3, #10]
 80121e8:	2b13      	cmp	r3, #19
 80121ea:	d809      	bhi.n	8012200 <ip4_frag+0x64>
 80121ec:	4b88      	ldr	r3, [pc, #544]	; (8012410 <ip4_frag+0x274>)
 80121ee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80121f2:	4988      	ldr	r1, [pc, #544]	; (8012414 <ip4_frag+0x278>)
 80121f4:	4888      	ldr	r0, [pc, #544]	; (8012418 <ip4_frag+0x27c>)
 80121f6:	f002 f821 	bl	801423c <iprintf>
 80121fa:	f06f 0305 	mvn.w	r3, #5
 80121fe:	e102      	b.n	8012406 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012202:	88db      	ldrh	r3, [r3, #6]
 8012204:	b29b      	uxth	r3, r3
 8012206:	4618      	mov	r0, r3
 8012208:	f7f6 fa8a 	bl	8008720 <lwip_htons>
 801220c:	4603      	mov	r3, r0
 801220e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012210:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801221a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801221c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012220:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	891b      	ldrh	r3, [r3, #8]
 8012226:	3b14      	subs	r3, #20
 8012228:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801222c:	e0e1      	b.n	80123f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801222e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012230:	00db      	lsls	r3, r3, #3
 8012232:	b29b      	uxth	r3, r3
 8012234:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012238:	4293      	cmp	r3, r2
 801223a:	bf28      	it	cs
 801223c:	4613      	movcs	r3, r2
 801223e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012240:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012244:	2114      	movs	r1, #20
 8012246:	200e      	movs	r0, #14
 8012248:	f7f7 fa3a 	bl	80096c0 <pbuf_alloc>
 801224c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	2b00      	cmp	r3, #0
 8012252:	f000 80d5 	beq.w	8012400 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012258:	895b      	ldrh	r3, [r3, #10]
 801225a:	2b13      	cmp	r3, #19
 801225c:	d806      	bhi.n	801226c <ip4_frag+0xd0>
 801225e:	4b6c      	ldr	r3, [pc, #432]	; (8012410 <ip4_frag+0x274>)
 8012260:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012264:	496d      	ldr	r1, [pc, #436]	; (801241c <ip4_frag+0x280>)
 8012266:	486c      	ldr	r0, [pc, #432]	; (8012418 <ip4_frag+0x27c>)
 8012268:	f001 ffe8 	bl	801423c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226e:	685b      	ldr	r3, [r3, #4]
 8012270:	2214      	movs	r2, #20
 8012272:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012274:	4618      	mov	r0, r3
 8012276:	f001 ffb1 	bl	80141dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012280:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012282:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012286:	e064      	b.n	8012352 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	895a      	ldrh	r2, [r3, #10]
 801228c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801228e:	1ad3      	subs	r3, r2, r3
 8012290:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	895b      	ldrh	r3, [r3, #10]
 8012296:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012298:	429a      	cmp	r2, r3
 801229a:	d906      	bls.n	80122aa <ip4_frag+0x10e>
 801229c:	4b5c      	ldr	r3, [pc, #368]	; (8012410 <ip4_frag+0x274>)
 801229e:	f240 322d 	movw	r2, #813	; 0x32d
 80122a2:	495f      	ldr	r1, [pc, #380]	; (8012420 <ip4_frag+0x284>)
 80122a4:	485c      	ldr	r0, [pc, #368]	; (8012418 <ip4_frag+0x27c>)
 80122a6:	f001 ffc9 	bl	801423c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80122aa:	8bfa      	ldrh	r2, [r7, #30]
 80122ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80122b0:	4293      	cmp	r3, r2
 80122b2:	bf28      	it	cs
 80122b4:	4613      	movcs	r3, r2
 80122b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80122ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d105      	bne.n	80122ce <ip4_frag+0x132>
        poff = 0;
 80122c2:	2300      	movs	r3, #0
 80122c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	60fb      	str	r3, [r7, #12]
        continue;
 80122cc:	e041      	b.n	8012352 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80122ce:	f7ff ff0d 	bl	80120ec <ip_frag_alloc_pbuf_custom_ref>
 80122d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d103      	bne.n	80122e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80122da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122dc:	f7f7 fcd4 	bl	8009c88 <pbuf_free>
        goto memerr;
 80122e0:	e08f      	b.n	8012402 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80122e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80122e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122ea:	4413      	add	r3, r2
 80122ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80122f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80122f4:	9201      	str	r2, [sp, #4]
 80122f6:	9300      	str	r3, [sp, #0]
 80122f8:	4603      	mov	r3, r0
 80122fa:	2241      	movs	r2, #65	; 0x41
 80122fc:	2000      	movs	r0, #0
 80122fe:	f7f7 fb09 	bl	8009914 <pbuf_alloced_custom>
 8012302:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d106      	bne.n	8012318 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801230a:	69b8      	ldr	r0, [r7, #24]
 801230c:	f7ff fef6 	bl	80120fc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012312:	f7f7 fcb9 	bl	8009c88 <pbuf_free>
        goto memerr;
 8012316:	e074      	b.n	8012402 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7f7 fd55 	bl	8009dc8 <pbuf_ref>
      pcr->original = p;
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	68fa      	ldr	r2, [r7, #12]
 8012322:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	4a3f      	ldr	r2, [pc, #252]	; (8012424 <ip4_frag+0x288>)
 8012328:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801232a:	6979      	ldr	r1, [r7, #20]
 801232c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801232e:	f7f7 fd6d 	bl	8009e0c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012332:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012336:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012340:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012344:	2b00      	cmp	r3, #0
 8012346:	d004      	beq.n	8012352 <ip4_frag+0x1b6>
        poff = 0;
 8012348:	2300      	movs	r3, #0
 801234a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012352:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012356:	2b00      	cmp	r3, #0
 8012358:	d196      	bne.n	8012288 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801235a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801235c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012360:	4413      	add	r3, r2
 8012362:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012368:	f1a3 0213 	sub.w	r2, r3, #19
 801236c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012370:	429a      	cmp	r2, r3
 8012372:	bfcc      	ite	gt
 8012374:	2301      	movgt	r3, #1
 8012376:	2300      	movle	r3, #0
 8012378:	b2db      	uxtb	r3, r3
 801237a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801237c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012384:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012386:	6a3b      	ldr	r3, [r7, #32]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <ip4_frag+0x1f6>
 801238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238e:	2b00      	cmp	r3, #0
 8012390:	d003      	beq.n	801239a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012392:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012394:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012398:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801239a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801239c:	4618      	mov	r0, r3
 801239e:	f7f6 f9bf 	bl	8008720 <lwip_htons>
 80123a2:	4603      	mov	r3, r0
 80123a4:	461a      	mov	r2, r3
 80123a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80123aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80123ac:	3314      	adds	r3, #20
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f6 f9b5 	bl	8008720 <lwip_htons>
 80123b6:	4603      	mov	r3, r0
 80123b8:	461a      	mov	r2, r3
 80123ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80123be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c0:	2200      	movs	r2, #0
 80123c2:	729a      	strb	r2, [r3, #10]
 80123c4:	2200      	movs	r2, #0
 80123c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	695b      	ldr	r3, [r3, #20]
 80123cc:	687a      	ldr	r2, [r7, #4]
 80123ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123d0:	68b8      	ldr	r0, [r7, #8]
 80123d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80123d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123d6:	f7f7 fc57 	bl	8009c88 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80123da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80123e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80123ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80123ec:	4413      	add	r3, r2
 80123ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80123f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f47f af19 	bne.w	801222e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80123fc:	2300      	movs	r3, #0
 80123fe:	e002      	b.n	8012406 <ip4_frag+0x26a>
      goto memerr;
 8012400:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012406:	4618      	mov	r0, r3
 8012408:	3748      	adds	r7, #72	; 0x48
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	080180ec 	.word	0x080180ec
 8012414:	080182c8 	.word	0x080182c8
 8012418:	08018134 	.word	0x08018134
 801241c:	080182e4 	.word	0x080182e4
 8012420:	08018304 	.word	0x08018304
 8012424:	08012135 	.word	0x08012135

08012428 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012432:	230e      	movs	r3, #14
 8012434:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	895b      	ldrh	r3, [r3, #10]
 801243a:	2b0e      	cmp	r3, #14
 801243c:	d96e      	bls.n	801251c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	7bdb      	ldrb	r3, [r3, #15]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d106      	bne.n	8012454 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801244c:	3301      	adds	r3, #1
 801244e:	b2da      	uxtb	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	7b1a      	ldrb	r2, [r3, #12]
 801245e:	7b5b      	ldrb	r3, [r3, #13]
 8012460:	021b      	lsls	r3, r3, #8
 8012462:	4313      	orrs	r3, r2
 8012464:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	f003 0301 	and.w	r3, r3, #1
 801246e:	2b00      	cmp	r3, #0
 8012470:	d023      	beq.n	80124ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	2b01      	cmp	r3, #1
 8012478:	d10f      	bne.n	801249a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	785b      	ldrb	r3, [r3, #1]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d11b      	bne.n	80124ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012486:	2b5e      	cmp	r3, #94	; 0x5e
 8012488:	d117      	bne.n	80124ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	7b5b      	ldrb	r3, [r3, #13]
 801248e:	f043 0310 	orr.w	r3, r3, #16
 8012492:	b2da      	uxtb	r2, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	735a      	strb	r2, [r3, #13]
 8012498:	e00f      	b.n	80124ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	2206      	movs	r2, #6
 801249e:	4928      	ldr	r1, [pc, #160]	; (8012540 <ethernet_input+0x118>)
 80124a0:	4618      	mov	r0, r3
 80124a2:	f001 fe8b 	bl	80141bc <memcmp>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d106      	bne.n	80124ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	7b5b      	ldrb	r3, [r3, #13]
 80124b0:	f043 0308 	orr.w	r3, r3, #8
 80124b4:	b2da      	uxtb	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80124ba:	89fb      	ldrh	r3, [r7, #14]
 80124bc:	2b08      	cmp	r3, #8
 80124be:	d003      	beq.n	80124c8 <ethernet_input+0xa0>
 80124c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80124c4:	d014      	beq.n	80124f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80124c6:	e032      	b.n	801252e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124ce:	f003 0308 	and.w	r3, r3, #8
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d024      	beq.n	8012520 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80124d6:	8afb      	ldrh	r3, [r7, #22]
 80124d8:	4619      	mov	r1, r3
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f7f7 fb4e 	bl	8009b7c <pbuf_remove_header>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d11e      	bne.n	8012524 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80124e6:	6839      	ldr	r1, [r7, #0]
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f7fe ff21 	bl	8011330 <ip4_input>
      break;
 80124ee:	e013      	b.n	8012518 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124f6:	f003 0308 	and.w	r3, r3, #8
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d014      	beq.n	8012528 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80124fe:	8afb      	ldrh	r3, [r7, #22]
 8012500:	4619      	mov	r1, r3
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f7f7 fb3a 	bl	8009b7c <pbuf_remove_header>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d10e      	bne.n	801252c <ethernet_input+0x104>
        etharp_input(p, netif);
 801250e:	6839      	ldr	r1, [r7, #0]
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7fe f8c1 	bl	8010698 <etharp_input>
      break;
 8012516:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012518:	2300      	movs	r3, #0
 801251a:	e00c      	b.n	8012536 <ethernet_input+0x10e>
    goto free_and_return;
 801251c:	bf00      	nop
 801251e:	e006      	b.n	801252e <ethernet_input+0x106>
        goto free_and_return;
 8012520:	bf00      	nop
 8012522:	e004      	b.n	801252e <ethernet_input+0x106>
        goto free_and_return;
 8012524:	bf00      	nop
 8012526:	e002      	b.n	801252e <ethernet_input+0x106>
        goto free_and_return;
 8012528:	bf00      	nop
 801252a:	e000      	b.n	801252e <ethernet_input+0x106>
        goto free_and_return;
 801252c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7f7 fbaa 	bl	8009c88 <pbuf_free>
  return ERR_OK;
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	3718      	adds	r7, #24
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	080184bc 	.word	0x080184bc

08012544 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012552:	8c3b      	ldrh	r3, [r7, #32]
 8012554:	4618      	mov	r0, r3
 8012556:	f7f6 f8e3 	bl	8008720 <lwip_htons>
 801255a:	4603      	mov	r3, r0
 801255c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801255e:	210e      	movs	r1, #14
 8012560:	68b8      	ldr	r0, [r7, #8]
 8012562:	f7f7 fafb 	bl	8009b5c <pbuf_add_header>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	d125      	bne.n	80125b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	8afa      	ldrh	r2, [r7, #22]
 8012576:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	2206      	movs	r2, #6
 801257c:	6839      	ldr	r1, [r7, #0]
 801257e:	4618      	mov	r0, r3
 8012580:	f001 fe2c 	bl	80141dc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	3306      	adds	r3, #6
 8012588:	2206      	movs	r2, #6
 801258a:	6879      	ldr	r1, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	f001 fe25 	bl	80141dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012598:	2b06      	cmp	r3, #6
 801259a:	d006      	beq.n	80125aa <ethernet_output+0x66>
 801259c:	4b0a      	ldr	r3, [pc, #40]	; (80125c8 <ethernet_output+0x84>)
 801259e:	f44f 7299 	mov.w	r2, #306	; 0x132
 80125a2:	490a      	ldr	r1, [pc, #40]	; (80125cc <ethernet_output+0x88>)
 80125a4:	480a      	ldr	r0, [pc, #40]	; (80125d0 <ethernet_output+0x8c>)
 80125a6:	f001 fe49 	bl	801423c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	699b      	ldr	r3, [r3, #24]
 80125ae:	68b9      	ldr	r1, [r7, #8]
 80125b0:	68f8      	ldr	r0, [r7, #12]
 80125b2:	4798      	blx	r3
 80125b4:	4603      	mov	r3, r0
 80125b6:	e002      	b.n	80125be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80125b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80125ba:	f06f 0301 	mvn.w	r3, #1
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3718      	adds	r7, #24
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}
 80125c6:	bf00      	nop
 80125c8:	08018314 	.word	0x08018314
 80125cc:	0801834c 	.word	0x0801834c
 80125d0:	08018380 	.word	0x08018380

080125d4 <QHsm_ctor>:
* @usage
* The following example illustrates how to invoke QHsm_ctor() in the
* "constructor" of a derived state machine:
* @include qep_qhsm_ctor.c
*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->vptr      = &vtable;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a06      	ldr	r2, [pc, #24]	; (80125fc <QHsm_ctor+0x28>)
 80125e2:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	4a06      	ldr	r2, [pc, #24]	; (8012600 <QHsm_ctor+0x2c>)
 80125e8:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	683a      	ldr	r2, [r7, #0]
 80125ee:	609a      	str	r2, [r3, #8]
}
 80125f0:	bf00      	nop
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr
 80125fc:	080184e4 	.word	0x080184e4
 8012600:	080126fd 	.word	0x080126fd

08012604 <QHsm_init_>:
void QHsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QHsm_init_(QHsm * const me, void const * const e)
#endif
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08c      	sub	sp, #48	; 0x30
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	62fb      	str	r3, [r7, #44]	; 0x2c

    /** @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d007      	beq.n	801262c <QHsm_init_+0x28>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	689b      	ldr	r3, [r3, #8]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d003      	beq.n	801262c <QHsm_init_+0x28>
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	4a30      	ldr	r2, [pc, #192]	; (80126e8 <QHsm_init_+0xe4>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d003      	beq.n	8012634 <QHsm_init_+0x30>
 801262c:	21c8      	movs	r1, #200	; 0xc8
 801262e:	482f      	ldr	r0, [pc, #188]	; (80126ec <QHsm_init_+0xe8>)
 8012630:	f7ee fa56 	bl	8000ae0 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	6839      	ldr	r1, [r7, #0]
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	4798      	blx	r3
 801263e:	6278      	str	r0, [r7, #36]	; 0x24

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	2b08      	cmp	r3, #8
 8012644:	d003      	beq.n	801264e <QHsm_init_+0x4a>
 8012646:	21d2      	movs	r1, #210	; 0xd2
 8012648:	4828      	ldr	r0, [pc, #160]	; (80126ec <QHsm_init_+0xe8>)
 801264a:	f7ee fa49 	bl	8000ae0 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 801264e:	2300      	movs	r3, #0
 8012650:	62bb      	str	r3, [r7, #40]	; 0x28

        path[0] = me->temp.fun;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	60fb      	str	r3, [r7, #12]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	689b      	ldr	r3, [r3, #8]
 801265c:	4924      	ldr	r1, [pc, #144]	; (80126f0 <QHsm_init_+0xec>)
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	4798      	blx	r3
        while (me->temp.fun != t) {
 8012662:	e016      	b.n	8012692 <QHsm_init_+0x8e>
            ++ip;
 8012664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012666:	3301      	adds	r3, #1
 8012668:	62bb      	str	r3, [r7, #40]	; 0x28
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	2b05      	cmp	r3, #5
 801266e:	dd03      	ble.n	8012678 <QHsm_init_+0x74>
 8012670:	21dc      	movs	r1, #220	; 0xdc
 8012672:	481e      	ldr	r0, [pc, #120]	; (80126ec <QHsm_init_+0xe8>)
 8012674:	f7ee fa34 	bl	8000ae0 <Q_onAssert>
            path[ip] = me->temp.fun;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	689a      	ldr	r2, [r3, #8]
 801267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	3330      	adds	r3, #48	; 0x30
 8012682:	443b      	add	r3, r7
 8012684:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	689b      	ldr	r3, [r3, #8]
 801268c:	4918      	ldr	r1, [pc, #96]	; (80126f0 <QHsm_init_+0xec>)
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	4798      	blx	r3
        while (me->temp.fun != t) {
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	689b      	ldr	r3, [r3, #8]
 8012696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012698:	429a      	cmp	r2, r3
 801269a:	d1e3      	bne.n	8012664 <QHsm_init_+0x60>
        }
        me->temp.fun = path[0];
 801269c:	68fa      	ldr	r2, [r7, #12]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	609a      	str	r2, [r3, #8]

        /* retrace the entry path in reverse (desired) order... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 80126a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	3330      	adds	r3, #48	; 0x30
 80126a8:	443b      	add	r3, r7
 80126aa:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80126ae:	4911      	ldr	r1, [pc, #68]	; (80126f4 <QHsm_init_+0xf0>)
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	4798      	blx	r3
            --ip;
 80126b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b6:	3b01      	subs	r3, #1
 80126b8:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (ip >= 0);
 80126ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126bc:	2b00      	cmp	r3, #0
 80126be:	daf0      	bge.n	80126a2 <QHsm_init_+0x9e>

        t = path[0]; /* current state becomes the new source */
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 80126c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c6:	490c      	ldr	r1, [pc, #48]	; (80126f8 <QHsm_init_+0xf4>)
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	4798      	blx	r3
 80126cc:	6278      	str	r0, [r7, #36]	; 0x24
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
#endif /* Q_SPY */

    } while (r == (QState)Q_RET_TRAN);
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	2b08      	cmp	r3, #8
 80126d2:	d0bc      	beq.n	801264e <QHsm_init_+0x4a>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126d8:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126de:	609a      	str	r2, [r3, #8]
}
 80126e0:	bf00      	nop
 80126e2:	3730      	adds	r7, #48	; 0x30
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	080126fd 	.word	0x080126fd
 80126ec:	080184cc 	.word	0x080184cc
 80126f0:	080184d4 	.word	0x080184d4
 80126f4:	080184d8 	.word	0x080184d8
 80126f8:	080184e0 	.word	0x080184e0

080126fc <QHsm_top>:
*          ignores all events.
*
* @note The parameters to this state handler are not used. They are provided
* for conformance with the state-handler function signature ::QStateHandler.
*/
QState QHsm_top(void const * const me, QEvt const * const e) {
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
    (void)me; /* suppress the "unused parameter" compiler warning */
    (void)e;  /* suppress the "unused parameter" compiler warning */
    return (QState)Q_RET_IGNORED; /* the top state ignores all events */
 8012706:	2304      	movs	r3, #4
}
 8012708:	4618      	mov	r0, r3
 801270a:	370c      	adds	r7, #12
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr

08012714 <QHsm_dispatch_>:
void QHsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QHsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b08c      	sub	sp, #48	; 0x30
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	62fb      	str	r3, [r7, #44]	; 0x2c
    QS_CRIT_STAT_

    /** @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8012724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012726:	2b00      	cmp	r3, #0
 8012728:	d004      	beq.n	8012734 <QHsm_dispatch_+0x20>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	689b      	ldr	r3, [r3, #8]
 801272e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012730:	429a      	cmp	r2, r3
 8012732:	d004      	beq.n	801273e <QHsm_dispatch_+0x2a>
 8012734:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012738:	484e      	ldr	r0, [pc, #312]	; (8012874 <QHsm_dispatch_+0x160>)
 801273a:	f7ee f9d1 	bl	8000ae0 <Q_onAssert>
        QS_FUN_PRE_(t);         /* the current state */
    QS_END_PRE_()

    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	623b      	str	r3, [r7, #32]
        r = (*s)(me, e); /* invoke state handler s */
 8012744:	6a3b      	ldr	r3, [r7, #32]
 8012746:	6839      	ldr	r1, [r7, #0]
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	4798      	blx	r3
 801274c:	62b8      	str	r0, [r7, #40]	; 0x28

        if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 801274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012750:	2b02      	cmp	r3, #2
 8012752:	d104      	bne.n	801275e <QHsm_dispatch_+0x4a>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8012754:	6a3b      	ldr	r3, [r7, #32]
 8012756:	4948      	ldr	r1, [pc, #288]	; (8012878 <QHsm_dispatch_+0x164>)
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	4798      	blx	r3
 801275c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
    } while (r == (QState)Q_RET_SUPER);
 801275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012760:	2b00      	cmp	r3, #0
 8012762:	d0ec      	beq.n	801273e <QHsm_dispatch_+0x2a>

    /* transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 8012764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012766:	2b07      	cmp	r3, #7
 8012768:	d979      	bls.n	801285e <QHsm_dispatch_+0x14a>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        int_fast8_t ip;

        path[0] = me->temp.fun; /* save the target of the transition */
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	60bb      	str	r3, [r7, #8]
        path[1] = t;
 8012770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012772:	60fb      	str	r3, [r7, #12]
        path[2] = s;
 8012774:	6a3b      	ldr	r3, [r7, #32]
 8012776:	613b      	str	r3, [r7, #16]

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp.fun) {
 8012778:	e00d      	b.n	8012796 <QHsm_dispatch_+0x82>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
 801277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277c:	493f      	ldr	r1, [pc, #252]	; (801287c <QHsm_dispatch_+0x168>)
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	4798      	blx	r3
 8012782:	4603      	mov	r3, r0
 8012784:	2b03      	cmp	r3, #3
 8012786:	d103      	bne.n	8012790 <QHsm_dispatch_+0x7c>
                QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	493b      	ldr	r1, [pc, #236]	; (8012878 <QHsm_dispatch_+0x164>)
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	689b      	ldr	r3, [r3, #8]
 8012794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012798:	6a3b      	ldr	r3, [r7, #32]
 801279a:	429a      	cmp	r2, r3
 801279c:	d1ed      	bne.n	801277a <QHsm_dispatch_+0x66>
        }

#ifdef Q_SPY
        ip = QHsm_tran_(me, path, qs_id);
#else
        ip = QHsm_tran_(me, path);
 801279e:	f107 0308 	add.w	r3, r7, #8
 80127a2:	4619      	mov	r1, r3
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f000 f86f 	bl	8012888 <QHsm_tran_>
 80127aa:	6278      	str	r0, [r7, #36]	; 0x24

        }
#endif /* Q_SPY */

        /* retrace the entry path in reverse (desired) order... */
        for (; ip >= 0; --ip) {
 80127ac:	e00b      	b.n	80127c6 <QHsm_dispatch_+0xb2>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 80127ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	3330      	adds	r3, #48	; 0x30
 80127b4:	443b      	add	r3, r7
 80127b6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80127ba:	4931      	ldr	r1, [pc, #196]	; (8012880 <QHsm_dispatch_+0x16c>)
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 80127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c2:	3b01      	subs	r3, #1
 80127c4:	627b      	str	r3, [r7, #36]	; 0x24
 80127c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	daf0      	bge.n	80127ae <QHsm_dispatch_+0x9a>
        }

        t = path[0];      /* stick the target into register */
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        me->temp.fun = t; /* update the next state */
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127d4:	609a      	str	r2, [r3, #8]

        /* drill into the target hierarchy... */
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 80127d6:	e03b      	b.n	8012850 <QHsm_dispatch_+0x13c>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 80127d8:	2300      	movs	r3, #0
 80127da:	627b      	str	r3, [r7, #36]	; 0x24
            path[0] = me->temp.fun;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	60bb      	str	r3, [r7, #8]

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	4924      	ldr	r1, [pc, #144]	; (8012878 <QHsm_dispatch_+0x164>)
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	4798      	blx	r3

            while (me->temp.fun != t) {
 80127ec:	e00f      	b.n	801280e <QHsm_dispatch_+0xfa>
                ++ip;
 80127ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f0:	3301      	adds	r3, #1
 80127f2:	627b      	str	r3, [r7, #36]	; 0x24
                path[ip] = me->temp.fun;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	689a      	ldr	r2, [r3, #8]
 80127f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fa:	009b      	lsls	r3, r3, #2
 80127fc:	3330      	adds	r3, #48	; 0x30
 80127fe:	443b      	add	r3, r7
 8012800:	f843 2c28 	str.w	r2, [r3, #-40]
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	491b      	ldr	r1, [pc, #108]	; (8012878 <QHsm_dispatch_+0x164>)
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	4798      	blx	r3
            while (me->temp.fun != t) {
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012814:	429a      	cmp	r2, r3
 8012816:	d1ea      	bne.n	80127ee <QHsm_dispatch_+0xda>
            }
            me->temp.fun = path[0];
 8012818:	68ba      	ldr	r2, [r7, #8]
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 801281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012820:	2b05      	cmp	r3, #5
 8012822:	dd04      	ble.n	801282e <QHsm_dispatch_+0x11a>
 8012824:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8012828:	4812      	ldr	r0, [pc, #72]	; (8012874 <QHsm_dispatch_+0x160>)
 801282a:	f7ee f959 	bl	8000ae0 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	009b      	lsls	r3, r3, #2
 8012832:	3330      	adds	r3, #48	; 0x30
 8012834:	443b      	add	r3, r7
 8012836:	f853 3c28 	ldr.w	r3, [r3, #-40]
 801283a:	4911      	ldr	r1, [pc, #68]	; (8012880 <QHsm_dispatch_+0x16c>)
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	4798      	blx	r3
                --ip;
 8012840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012842:	3b01      	subs	r3, #1
 8012844:	627b      	str	r3, [r7, #36]	; 0x24
            } while (ip >= 0);
 8012846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012848:	2b00      	cmp	r3, #0
 801284a:	daf0      	bge.n	801282e <QHsm_dispatch_+0x11a>

            t = path[0]; /* current state becomes the new source */
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	490c      	ldr	r1, [pc, #48]	; (8012884 <QHsm_dispatch_+0x170>)
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	4798      	blx	r3
 8012858:	4603      	mov	r3, r0
 801285a:	2b08      	cmp	r3, #8
 801285c:	d0bc      	beq.n	80127d8 <QHsm_dispatch_+0xc4>
        QS_END_PRE_()

    }
#endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012862:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012868:	609a      	str	r2, [r3, #8]
}
 801286a:	bf00      	nop
 801286c:	3730      	adds	r7, #48	; 0x30
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	080184cc 	.word	0x080184cc
 8012878:	080184d4 	.word	0x080184d4
 801287c:	080184dc 	.word	0x080184dc
 8012880:	080184d8 	.word	0x080184d8
 8012884:	080184e0 	.word	0x080184e0

08012888 <QHsm_tran_>:
                              uint_fast8_t const qs_id)
#else
static int_fast8_t QHsm_tran_(QHsm * const me,
                              QStateHandler path[QHSM_MAX_NEST_DEPTH_])
#endif
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b088      	sub	sp, #32
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
    int_fast8_t ip = -1; /* transition entry path index */
 8012892:	f04f 33ff 	mov.w	r3, #4294967295
 8012896:	61fb      	str	r3, [r7, #28]
    int_fast8_t iq; /* helper transition entry path index */
    QStateHandler t = path[0];
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	617b      	str	r3, [r7, #20]
    QStateHandler const s = path[2];
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	689b      	ldr	r3, [r3, #8]
 80128a2:	60fb      	str	r3, [r7, #12]
    QState r;
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d106      	bne.n	80128ba <QHsm_tran_+0x32>
        QEP_EXIT_(s, qs_id); /* exit the source */
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	4964      	ldr	r1, [pc, #400]	; (8012a40 <QHsm_tran_+0x1b8>)
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	4798      	blx	r3
        ip = 0; /* enter the target */
 80128b4:	2300      	movs	r3, #0
 80128b6:	61fb      	str	r3, [r7, #28]
 80128b8:	e0bc      	b.n	8012a34 <QHsm_tran_+0x1ac>
    }
    else {
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of target */
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	4961      	ldr	r1, [pc, #388]	; (8012a44 <QHsm_tran_+0x1bc>)
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	4798      	blx	r3

        t = me->temp.fun;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	689b      	ldr	r3, [r3, #8]
 80128c6:	617b      	str	r3, [r7, #20]

        /* (b) check source==target->super... */
        if (s == t) {
 80128c8:	68fa      	ldr	r2, [r7, #12]
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d102      	bne.n	80128d6 <QHsm_tran_+0x4e>
            ip = 0; /* enter the target */
 80128d0:	2300      	movs	r3, #0
 80128d2:	61fb      	str	r3, [r7, #28]
 80128d4:	e0ae      	b.n	8012a34 <QHsm_tran_+0x1ac>
        }
        else {
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of src */
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	495a      	ldr	r1, [pc, #360]	; (8012a44 <QHsm_tran_+0x1bc>)
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	689b      	ldr	r3, [r3, #8]
 80128e2:	697a      	ldr	r2, [r7, #20]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d106      	bne.n	80128f6 <QHsm_tran_+0x6e>
                QEP_EXIT_(s, qs_id); /* exit the source */
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	4955      	ldr	r1, [pc, #340]	; (8012a40 <QHsm_tran_+0x1b8>)
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	4798      	blx	r3
                ip = 0; /* enter the target */
 80128f0:	2300      	movs	r3, #0
 80128f2:	61fb      	str	r3, [r7, #28]
 80128f4:	e09e      	b.n	8012a34 <QHsm_tran_+0x1ac>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	689a      	ldr	r2, [r3, #8]
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d104      	bne.n	801290c <QHsm_tran_+0x84>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	494e      	ldr	r1, [pc, #312]	; (8012a40 <QHsm_tran_+0x1b8>)
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	4798      	blx	r3
 801290a:	e093      	b.n	8012a34 <QHsm_tran_+0x1ac>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = 0; /* indicate that LCA not found */
 801290c:	2300      	movs	r3, #0
 801290e:	61bb      	str	r3, [r7, #24]
                    ip = 1; /* enter target and its superstate */
 8012910:	2301      	movs	r3, #1
 8012912:	61fb      	str	r3, [r7, #28]
                    path[1] = t;      /* save the superstate of target */
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	3304      	adds	r3, #4
 8012918:	697a      	ldr	r2, [r7, #20]
 801291a:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	617b      	str	r3, [r7, #20]

                    /* find target->super->super... */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	3304      	adds	r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4946      	ldr	r1, [pc, #280]	; (8012a44 <QHsm_tran_+0x1bc>)
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	4798      	blx	r3
 801292e:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8012930:	e024      	b.n	801297c <QHsm_tran_+0xf4>
                        ++ip;
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	3301      	adds	r3, #1
 8012936:	61fb      	str	r3, [r7, #28]
                        path[ip] = me->temp.fun; /* store the entry path */
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	683a      	ldr	r2, [r7, #0]
 801293e:	4413      	add	r3, r2
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	6892      	ldr	r2, [r2, #8]
 8012944:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	689b      	ldr	r3, [r3, #8]
 801294a:	68fa      	ldr	r2, [r7, #12]
 801294c:	429a      	cmp	r2, r3
 801294e:	d10f      	bne.n	8012970 <QHsm_tran_+0xe8>
                            iq = 1; /* indicate that LCA found */
 8012950:	2301      	movs	r3, #1
 8012952:	61bb      	str	r3, [r7, #24]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	2b05      	cmp	r3, #5
 8012958:	dd04      	ble.n	8012964 <QHsm_tran_+0xdc>
 801295a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 801295e:	483a      	ldr	r0, [pc, #232]	; (8012a48 <QHsm_tran_+0x1c0>)
 8012960:	f7ee f8be 	bl	8000ae0 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	3b01      	subs	r3, #1
 8012968:	61fb      	str	r3, [r7, #28]
                            r = (QState)Q_RET_HANDLED; /* terminate loop */
 801296a:	2303      	movs	r3, #3
 801296c:	613b      	str	r3, [r7, #16]
 801296e:	e005      	b.n	801297c <QHsm_tran_+0xf4>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	689b      	ldr	r3, [r3, #8]
 8012974:	4933      	ldr	r1, [pc, #204]	; (8012a44 <QHsm_tran_+0x1bc>)
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	4798      	blx	r3
 801297a:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d0d7      	beq.n	8012932 <QHsm_tran_+0xaa>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8012982:	69bb      	ldr	r3, [r7, #24]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d155      	bne.n	8012a34 <QHsm_tran_+0x1ac>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	2b05      	cmp	r3, #5
 801298c:	dd04      	ble.n	8012998 <QHsm_tran_+0x110>
 801298e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8012992:	482d      	ldr	r0, [pc, #180]	; (8012a48 <QHsm_tran_+0x1c0>)
 8012994:	f7ee f8a4 	bl	8000ae0 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	4929      	ldr	r1, [pc, #164]	; (8012a40 <QHsm_tran_+0x1b8>)
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	61bb      	str	r3, [r7, #24]
                        r = (QState)Q_RET_IGNORED; /* LCA NOT found */
 80129a4:	2304      	movs	r3, #4
 80129a6:	613b      	str	r3, [r7, #16]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	009b      	lsls	r3, r3, #2
 80129ac:	683a      	ldr	r2, [r7, #0]
 80129ae:	4413      	add	r3, r2
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	697a      	ldr	r2, [r7, #20]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d108      	bne.n	80129ca <QHsm_tran_+0x142>
                                r = (QState)Q_RET_HANDLED; /* LCA found */
 80129b8:	2303      	movs	r3, #3
 80129ba:	613b      	str	r3, [r7, #16]
                                ip = iq - 1; /* do not enter LCA */
 80129bc:	69bb      	ldr	r3, [r7, #24]
 80129be:	3b01      	subs	r3, #1
 80129c0:	61fb      	str	r3, [r7, #28]
                                iq = -1; /* cause termintion of the loop */
 80129c2:	f04f 33ff 	mov.w	r3, #4294967295
 80129c6:	61bb      	str	r3, [r7, #24]
 80129c8:	e002      	b.n	80129d0 <QHsm_tran_+0x148>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	3b01      	subs	r3, #1
 80129ce:	61bb      	str	r3, [r7, #24]
                            }
                        } while (iq >= 0);
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	dae8      	bge.n	80129a8 <QHsm_tran_+0x120>

                        /* LCA not found? */
                        if (r != (QState)Q_RET_HANDLED) {
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	2b03      	cmp	r3, #3
 80129da:	d02b      	beq.n	8012a34 <QHsm_tran_+0x1ac>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED; /* keep looping */
 80129dc:	2304      	movs	r3, #4
 80129de:	613b      	str	r3, [r7, #16]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	4917      	ldr	r1, [pc, #92]	; (8012a40 <QHsm_tran_+0x1b8>)
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	4798      	blx	r3
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b03      	cmp	r3, #3
 80129ec:	d103      	bne.n	80129f6 <QHsm_tran_+0x16e>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	4914      	ldr	r1, [pc, #80]	; (8012a44 <QHsm_tran_+0x1bc>)
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	689b      	ldr	r3, [r3, #8]
 80129fa:	617b      	str	r3, [r7, #20]
                                iq = ip;
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	61bb      	str	r3, [r7, #24]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8012a00:	69bb      	ldr	r3, [r7, #24]
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	4413      	add	r3, r2
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	697a      	ldr	r2, [r7, #20]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d108      	bne.n	8012a22 <QHsm_tran_+0x19a>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	3b01      	subs	r3, #1
 8012a14:	61fb      	str	r3, [r7, #28]
                                        iq = -1; /* break out of inner loop */
 8012a16:	f04f 33ff 	mov.w	r3, #4294967295
 8012a1a:	61bb      	str	r3, [r7, #24]
                                        /* break out of outer loop */
                                        r = (QState)Q_RET_HANDLED;
 8012a1c:	2303      	movs	r3, #3
 8012a1e:	613b      	str	r3, [r7, #16]
 8012a20:	e002      	b.n	8012a28 <QHsm_tran_+0x1a0>
                                    }
                                    else {
                                        --iq;
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	3b01      	subs	r3, #1
 8012a26:	61bb      	str	r3, [r7, #24]
                                    }
                                } while (iq >= 0);
 8012a28:	69bb      	ldr	r3, [r7, #24]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	dae8      	bge.n	8012a00 <QHsm_tran_+0x178>
                            } while (r != (QState)Q_RET_HANDLED);
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	2b03      	cmp	r3, #3
 8012a32:	d1d5      	bne.n	80129e0 <QHsm_tran_+0x158>
                    }
                }
            }
        }
    }
    return ip;
 8012a34:	69fb      	ldr	r3, [r7, #28]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3720      	adds	r7, #32
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	080184dc 	.word	0x080184dc
 8012a44:	080184d4 	.word	0x080184d4
 8012a48:	080184cc 	.word	0x080184cc

08012a4c <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
    uint_fast8_t p = (uint_fast8_t)a->prio;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012a5a:	60fb      	str	r3, [r7, #12]
    /** @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d008      	beq.n	8012a74 <QF_add_+0x28>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2b20      	cmp	r3, #32
 8012a66:	d805      	bhi.n	8012a74 <QF_add_+0x28>
 8012a68:	4a0b      	ldr	r2, [pc, #44]	; (8012a98 <QF_add_+0x4c>)
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d003      	beq.n	8012a7c <QF_add_+0x30>
 8012a74:	2164      	movs	r1, #100	; 0x64
 8012a76:	4809      	ldr	r0, [pc, #36]	; (8012a9c <QF_add_+0x50>)
 8012a78:	f7ee f832 	bl	8000ae0 <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));

    QF_CRIT_E_();
 8012a7c:	f7f4 ffa8 	bl	80079d0 <vPortEnterCritical>
    QF_active_[p] = a; /* register the active object at this priority */
 8012a80:	4905      	ldr	r1, [pc, #20]	; (8012a98 <QF_add_+0x4c>)
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 8012a8a:	f7f4 ffd5 	bl	8007a38 <vPortExitCritical>
}
 8012a8e:	bf00      	nop
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
 8012a96:	bf00      	nop
 8012a98:	2000a844 	.word	0x2000a844
 8012a9c:	080184ec 	.word	0x080184ec

08012aa0 <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 8012aa0:	b480      	push	{r7}
 8012aa2:	b085      	sub	sp, #20
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	60fb      	str	r3, [r7, #12]
    uint_fast16_t n;
    for (n = len; n > 0U; --n) {
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	60bb      	str	r3, [r7, #8]
 8012ab2:	e008      	b.n	8012ac6 <QF_bzero+0x26>
        *ptr = 0U;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	701a      	strb	r2, [r3, #0]
        QF_PTR_INC_(ptr);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	3301      	adds	r3, #1
 8012abe:	60fb      	str	r3, [r7, #12]
    for (n = len; n > 0U; --n) {
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	60bb      	str	r3, [r7, #8]
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d1f3      	bne.n	8012ab4 <QF_bzero+0x14>
    }
}
 8012acc:	bf00      	nop
 8012ace:	bf00      	nop
 8012ad0:	3714      	adds	r7, #20
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
	...

08012adc <QF_LOG2>:

/* log-base-2 implementation ************************************************/
#ifndef QF_LOG2

    uint_fast8_t QF_LOG2(QPSetBits x) {
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
        static uint8_t const log2LUT[16] = {
            0U, 1U, 2U, 2U, 3U, 3U, 3U, 3U,
            4U, 4U, 4U, 4U, 4U, 4U, 4U, 4U
        };
        uint_fast8_t n = 0U;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	60fb      	str	r3, [r7, #12]
        QPSetBits    t;

#if (QF_MAX_ACTIVE > 16)
        t = (QPSetBits)(x >> 16);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	0c1b      	lsrs	r3, r3, #16
 8012aec:	60bb      	str	r3, [r7, #8]
        if (t != 0U) {
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d004      	beq.n	8012afe <QF_LOG2+0x22>
            n += 16U;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	3310      	adds	r3, #16
 8012af8:	60fb      	str	r3, [r7, #12]
            x = t;
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	607b      	str	r3, [r7, #4]
        }
#endif
#if (QF_MAX_ACTIVE > 8)
        t = (x >> 8);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	0a1b      	lsrs	r3, r3, #8
 8012b02:	60bb      	str	r3, [r7, #8]
        if (t != 0U) {
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d004      	beq.n	8012b14 <QF_LOG2+0x38>
            n += 8U;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	3308      	adds	r3, #8
 8012b0e:	60fb      	str	r3, [r7, #12]
            x = t;
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	607b      	str	r3, [r7, #4]
        }
#endif
        t = (x >> 4);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	091b      	lsrs	r3, r3, #4
 8012b18:	60bb      	str	r3, [r7, #8]
        if (t != 0U) {
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d004      	beq.n	8012b2a <QF_LOG2+0x4e>
            n += 4U;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	3304      	adds	r3, #4
 8012b24:	60fb      	str	r3, [r7, #12]
            x = t;
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	607b      	str	r3, [r7, #4]
        }
        return n + log2LUT[x];
 8012b2a:	4a06      	ldr	r2, [pc, #24]	; (8012b44 <QF_LOG2+0x68>)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	4413      	add	r3, r2
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	461a      	mov	r2, r3
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	4413      	add	r3, r2
    }
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	080184f4 	.word	0x080184f4

08012b48 <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b088      	sub	sp, #32
 8012b4c:	af02      	add	r7, sp, #8
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
    bool status;
    QF_CRIT_STAT_
    QS_TEST_PROBE_DEF(&QActive_post_)

    /** @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d103      	bne.n	8012b62 <QActive_post_+0x1a>
 8012b5a:	2164      	movs	r1, #100	; 0x64
 8012b5c:	483e      	ldr	r0, [pc, #248]	; (8012c58 <QActive_post_+0x110>)
 8012b5e:	f7ed ffbf 	bl	8000ae0 <Q_onAssert>

    QF_CRIT_E_();
 8012b62:	f7f4 ff35 	bl	80079d0 <vPortEnterCritical>
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	7ddb      	ldrb	r3, [r3, #23]
 8012b6a:	75bb      	strb	r3, [r7, #22]
    /* test-probe#1 for faking queue overflow */
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    if (margin == QF_NO_MARGIN) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d10e      	bne.n	8012b94 <QActive_post_+0x4c>
        if (nFree > 0U) {
 8012b76:	7dbb      	ldrb	r3, [r7, #22]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <QActive_post_+0x3a>
            status = true; /* can post */
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	75fb      	strb	r3, [r7, #23]
 8012b80:	e012      	b.n	8012ba8 <QActive_post_+0x60>
        }
        else {
            status = false; /* cannot post */
 8012b82:	2300      	movs	r3, #0
 8012b84:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 8012b86:	f7f4 ff57 	bl	8007a38 <vPortExitCritical>
 8012b8a:	216e      	movs	r1, #110	; 0x6e
 8012b8c:	4832      	ldr	r0, [pc, #200]	; (8012c58 <QActive_post_+0x110>)
 8012b8e:	f7ed ffa7 	bl	8000ae0 <Q_onAssert>
 8012b92:	e009      	b.n	8012ba8 <QActive_post_+0x60>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	7dba      	ldrb	r2, [r7, #22]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d902      	bls.n	8012ba4 <QActive_post_+0x5c>
        status = true; /* can post */
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	75fb      	strb	r3, [r7, #23]
 8012ba2:	e001      	b.n	8012ba8 <QActive_post_+0x60>
    }
    else {
        status = false; /* cannot post, but don't assert */
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	789b      	ldrb	r3, [r3, #2]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d006      	beq.n	8012bbe <QActive_post_+0x76>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	78db      	ldrb	r3, [r3, #3]
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	b2da      	uxtb	r2, r3
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 8012bbe:	7dfb      	ldrb	r3, [r7, #23]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d03f      	beq.n	8012c44 <QActive_post_+0xfc>

        --nFree; /* one free entry just used up */
 8012bc4:	7dbb      	ldrb	r3, [r7, #22]
 8012bc6:	3b01      	subs	r3, #1
 8012bc8:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	7dba      	ldrb	r2, [r7, #22]
 8012bce:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	7e1b      	ldrb	r3, [r3, #24]
 8012bd4:	7dba      	ldrb	r2, [r7, #22]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d202      	bcs.n	8012be0 <QActive_post_+0x98>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	7dba      	ldrb	r2, [r7, #22]
 8012bde:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d111      	bne.n	8012c0c <QActive_post_+0xc4>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	68ba      	ldr	r2, [r7, #8]
 8012bec:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8012bee:	f7f4 ff23 	bl	8007a38 <vPortExitCritical>
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	f103 001c 	add.w	r0, r3, #28
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	9300      	str	r3, [sp, #0]
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	2200      	movs	r2, #0
 8012c00:	2100      	movs	r1, #0
 8012c02:	f7f4 fb13 	bl	800722c <xTaskGenericNotify>
 8012c06:	f7f4 fee3 	bl	80079d0 <vPortEnterCritical>
 8012c0a:	e018      	b.n	8012c3e <QActive_post_+0xf6>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	691a      	ldr	r2, [r3, #16]
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	7d5b      	ldrb	r3, [r3, #21]
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	009b      	lsls	r3, r3, #2
 8012c18:	4413      	add	r3, r2
 8012c1a:	68ba      	ldr	r2, [r7, #8]
 8012c1c:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	7d5b      	ldrb	r3, [r3, #21]
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d103      	bne.n	8012c30 <QActive_post_+0xe8>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	7d1a      	ldrb	r2, [r3, #20]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	7d5b      	ldrb	r3, [r3, #21]
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	3b01      	subs	r3, #1
 8012c38:	b2da      	uxtb	r2, r3
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8012c3e:	f7f4 fefb 	bl	8007a38 <vPortExitCritical>
 8012c42:	e004      	b.n	8012c4e <QActive_post_+0x106>
        {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 8012c44:	f7f4 fef8 	bl	8007a38 <vPortExitCritical>

        QF_gc(e); /* recycle the event to avoid a leak */
 8012c48:	68b8      	ldr	r0, [r7, #8]
 8012c4a:	f000 f96d 	bl	8012f28 <QF_gc>
    }

    return status;
 8012c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3718      	adds	r7, #24
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	08018504 	.word	0x08018504

08012c5c <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b086      	sub	sp, #24
 8012c60:	af02      	add	r7, sp, #8
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
    QEvt const *frontEvt;  /* temporary to avoid UB for volatile access */
    QEQueueCtr nFree;      /* temporary to avoid UB for volatile access */
    QF_CRIT_STAT_
    QS_TEST_PROBE_DEF(&QActive_postLIFO_)

    QF_CRIT_E_();
 8012c66:	f7f4 feb3 	bl	80079d0 <vPortEnterCritical>
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	7ddb      	ldrb	r3, [r3, #23]
 8012c6e:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 8012c70:	7bfb      	ldrb	r3, [r7, #15]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d105      	bne.n	8012c82 <QActive_postLIFO_+0x26>
 8012c76:	f7f4 fedf 	bl	8007a38 <vPortExitCritical>
 8012c7a:	21d2      	movs	r1, #210	; 0xd2
 8012c7c:	4829      	ldr	r0, [pc, #164]	; (8012d24 <QActive_postLIFO_+0xc8>)
 8012c7e:	f7ed ff2f 	bl	8000ae0 <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	789b      	ldrb	r3, [r3, #2]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d006      	beq.n	8012c98 <QActive_postLIFO_+0x3c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	78db      	ldrb	r3, [r3, #3]
 8012c8e:	b2db      	uxtb	r3, r3
 8012c90:	3301      	adds	r3, #1
 8012c92:	b2da      	uxtb	r2, r3
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 8012c98:	7bfb      	ldrb	r3, [r7, #15]
 8012c9a:	3b01      	subs	r3, #1
 8012c9c:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	7bfa      	ldrb	r2, [r7, #15]
 8012ca2:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	7e1b      	ldrb	r3, [r3, #24]
 8012ca8:	7bfa      	ldrb	r2, [r7, #15]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d202      	bcs.n	8012cb4 <QActive_postLIFO_+0x58>
        me->eQueue.nMin = nFree; /* update minimum so far */
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	7bfa      	ldrb	r2, [r7, #15]
 8012cb2:	761a      	strb	r2, [r3, #24]
        {
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    frontEvt = me->eQueue.frontEvt; /* read volatile into the temporary */
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	683a      	ldr	r2, [r7, #0]
 8012cbe:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 8012cc0:	68bb      	ldr	r3, [r7, #8]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d10e      	bne.n	8012ce4 <QActive_postLIFO_+0x88>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8012cc6:	f7f4 feb7 	bl	8007a38 <vPortExitCritical>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f103 001c 	add.w	r0, r3, #28
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	9300      	str	r3, [sp, #0]
 8012cd4:	2302      	movs	r3, #2
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	2100      	movs	r1, #0
 8012cda:	f7f4 faa7 	bl	800722c <xTaskGenericNotify>
 8012cde:	f7f4 fe77 	bl	80079d0 <vPortEnterCritical>
 8012ce2:	e019      	b.n	8012d18 <QActive_postLIFO_+0xbc>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	7d9b      	ldrb	r3, [r3, #22]
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	3301      	adds	r3, #1
 8012cec:	b2da      	uxtb	r2, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	7d9b      	ldrb	r3, [r3, #22]
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	7d1b      	ldrb	r3, [r3, #20]
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d102      	bne.n	8012d06 <QActive_postLIFO_+0xaa>
            me->eQueue.tail = 0U; /* wrap around */
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2200      	movs	r2, #0
 8012d04:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	691a      	ldr	r2, [r3, #16]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	7d9b      	ldrb	r3, [r3, #22]
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	4413      	add	r3, r2
 8012d14:	68ba      	ldr	r2, [r7, #8]
 8012d16:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8012d18:	f7f4 fe8e 	bl	8007a38 <vPortExitCritical>
}
 8012d1c:	bf00      	nop
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	08018504 	.word	0x08018504

08012d28 <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
    QEQueueCtr nFree;
    QEvt const *e;
    QF_CRIT_STAT_

    QF_CRIT_E_();
 8012d30:	f7f4 fe4e 	bl	80079d0 <vPortEnterCritical>
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 8012d34:	e009      	b.n	8012d4a <QActive_get_+0x22>
 8012d36:	f7f4 fe7f 	bl	8007a38 <vPortExitCritical>
 8012d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d3e:	2101      	movs	r1, #1
 8012d40:	2000      	movs	r0, #0
 8012d42:	f7f4 fa05 	bl	8007150 <ulTaskGenericNotifyTake>
 8012d46:	f7f4 fe43 	bl	80079d0 <vPortEnterCritical>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d0f1      	beq.n	8012d36 <QActive_get_+0xe>

    e = me->eQueue.frontEvt; /* always remove event from the front location */
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	68db      	ldr	r3, [r3, #12]
 8012d56:	60fb      	str	r3, [r7, #12]
    nFree = me->eQueue.nFree + 1U; /* get volatile into tmp */
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	7ddb      	ldrb	r3, [r3, #23]
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	3301      	adds	r3, #1
 8012d60:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	7afa      	ldrb	r2, [r7, #11]
 8012d66:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	7d1b      	ldrb	r3, [r3, #20]
 8012d6c:	7afa      	ldrb	r2, [r7, #11]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d81a      	bhi.n	8012da8 <QActive_get_+0x80>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	691a      	ldr	r2, [r3, #16]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	7d9b      	ldrb	r3, [r3, #22]
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4413      	add	r3, r2
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	7d9b      	ldrb	r3, [r3, #22]
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d103      	bne.n	8012d98 <QActive_get_+0x70>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	7d1a      	ldrb	r2, [r3, #20]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	7d9b      	ldrb	r3, [r3, #22]
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	b2da      	uxtb	r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	759a      	strb	r2, [r3, #22]
 8012da6:	e00f      	b.n	8012dc8 <QActive_get_+0xa0>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 8012dae:	7afa      	ldrb	r2, [r7, #11]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	7d1b      	ldrb	r3, [r3, #20]
 8012db4:	3301      	adds	r3, #1
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d006      	beq.n	8012dc8 <QActive_get_+0xa0>
 8012dba:	f7f4 fe3d 	bl	8007a38 <vPortExitCritical>
 8012dbe:	f44f 719b 	mov.w	r1, #310	; 0x136
 8012dc2:	4805      	ldr	r0, [pc, #20]	; (8012dd8 <QActive_get_+0xb0>)
 8012dc4:	f7ed fe8c 	bl	8000ae0 <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8012dc8:	f7f4 fe36 	bl	8007a38 <vPortExitCritical>
    return e;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3710      	adds	r7, #16
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	08018504 	.word	0x08018504

08012ddc <QF_poolInit>:
*
* @sa QF initialization example for QF_init()
*/
void QF_poolInit(void * const poolSto, uint_fast32_t const poolSize,
                 uint_fast16_t const evtSize)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
    /** @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < Q_DIM(QF_pool_));
 8012de8:	4b1a      	ldr	r3, [pc, #104]	; (8012e54 <QF_poolInit+0x78>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b02      	cmp	r3, #2
 8012dee:	d903      	bls.n	8012df8 <QF_poolInit+0x1c>
 8012df0:	21c8      	movs	r1, #200	; 0xc8
 8012df2:	4819      	ldr	r0, [pc, #100]	; (8012e58 <QF_poolInit+0x7c>)
 8012df4:	f7ed fe74 	bl	8000ae0 <Q_onAssert>
    /** @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8012df8:	4b16      	ldr	r3, [pc, #88]	; (8012e54 <QF_poolInit+0x78>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d012      	beq.n	8012e26 <QF_poolInit+0x4a>
 8012e00:	4b14      	ldr	r3, [pc, #80]	; (8012e54 <QF_poolInit+0x78>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	1e5a      	subs	r2, r3, #1
 8012e06:	4915      	ldr	r1, [pc, #84]	; (8012e5c <QF_poolInit+0x80>)
 8012e08:	4613      	mov	r3, r2
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	4413      	add	r3, r2
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	440b      	add	r3, r1
 8012e12:	330c      	adds	r3, #12
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	461a      	mov	r2, r3
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	d803      	bhi.n	8012e26 <QF_poolInit+0x4a>
 8012e1e:	21c9      	movs	r1, #201	; 0xc9
 8012e20:	480d      	ldr	r0, [pc, #52]	; (8012e58 <QF_poolInit+0x7c>)
 8012e22:	f7ed fe5d 	bl	8000ae0 <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_pool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_pool_[QF_maxPool_], poolSto, poolSize, evtSize);
 8012e26:	4b0b      	ldr	r3, [pc, #44]	; (8012e54 <QF_poolInit+0x78>)
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	009b      	lsls	r3, r3, #2
 8012e2e:	4413      	add	r3, r2
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	4a0a      	ldr	r2, [pc, #40]	; (8012e5c <QF_poolInit+0x80>)
 8012e34:	1898      	adds	r0, r3, r2
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	68ba      	ldr	r2, [r7, #8]
 8012e3a:	68f9      	ldr	r1, [r7, #12]
 8012e3c:	f000 f8b4 	bl	8012fa8 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 8012e40:	4b04      	ldr	r3, [pc, #16]	; (8012e54 <QF_poolInit+0x78>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	3301      	adds	r3, #1
 8012e46:	4a03      	ldr	r2, [pc, #12]	; (8012e54 <QF_poolInit+0x78>)
 8012e48:	6013      	str	r3, [r2, #0]
        char_t obj_name[9] = "EvtPool?";
        obj_name[7] = '0' + (QF_maxPool_ & 0x7FU);
        QS_obj_dict_pre_(&QF_pool_[QF_maxPool_ - 1U], obj_name);
    }
#endif /* Q_SPY*/
}
 8012e4a:	bf00      	nop
 8012e4c:	3710      	adds	r7, #16
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	2000a904 	.word	0x2000a904
 8012e58:	0801850c 	.word	0x0801850c
 8012e5c:	2000a8c8 	.word	0x2000a8c8

08012e60 <QF_newX_>:
* The application code should not call this function directly.
* The only allowed use is thorough the macros Q_NEW() or Q_NEW_X().
*/
QEvt *QF_newX_(uint_fast16_t const evtSize,
               uint_fast16_t const margin, enum_t const sig)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b086      	sub	sp, #24
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
    QEvt *e;
    uint_fast8_t idx;
    QS_CRIT_STAT_

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	617b      	str	r3, [r7, #20]
 8012e70:	e00f      	b.n	8012e92 <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_pool_[idx])) {
 8012e72:	492a      	ldr	r1, [pc, #168]	; (8012f1c <QF_newX_+0xbc>)
 8012e74:	697a      	ldr	r2, [r7, #20]
 8012e76:	4613      	mov	r3, r2
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	4413      	add	r3, r2
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	440b      	add	r3, r1
 8012e80:	330c      	adds	r3, #12
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	461a      	mov	r2, r3
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d908      	bls.n	8012e9e <QF_newX_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 8012e8c:	697b      	ldr	r3, [r7, #20]
 8012e8e:	3301      	adds	r3, #1
 8012e90:	617b      	str	r3, [r7, #20]
 8012e92:	4b23      	ldr	r3, [pc, #140]	; (8012f20 <QF_newX_+0xc0>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	697a      	ldr	r2, [r7, #20]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d3ea      	bcc.n	8012e72 <QF_newX_+0x12>
 8012e9c:	e000      	b.n	8012ea0 <QF_newX_+0x40>
            break;
 8012e9e:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(310, idx < QF_maxPool_);
 8012ea0:	4b1f      	ldr	r3, [pc, #124]	; (8012f20 <QF_newX_+0xc0>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	697a      	ldr	r2, [r7, #20]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d304      	bcc.n	8012eb4 <QF_newX_+0x54>
 8012eaa:	f44f 719b 	mov.w	r1, #310	; 0x136
 8012eae:	481d      	ldr	r0, [pc, #116]	; (8012f24 <QF_newX_+0xc4>)
 8012eb0:	f7ed fe16 	bl	8000ae0 <Q_onAssert>
#ifdef Q_SPY
    QF_EPOOL_GET_(QF_pool_[idx], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
#else
    QF_EPOOL_GET_(QF_pool_[idx], e,
 8012eb4:	697a      	ldr	r2, [r7, #20]
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	4413      	add	r3, r2
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	4a17      	ldr	r2, [pc, #92]	; (8012f1c <QF_newX_+0xbc>)
 8012ec0:	1898      	adds	r0, r3, r2
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d001      	beq.n	8012ed0 <QF_newX_+0x70>
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	e000      	b.n	8012ed2 <QF_newX_+0x72>
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	f000 f90d 	bl	80130f4 <QMPool_get>
 8012eda:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    /* was e allocated correctly? */
    if (e != (QEvt *)0) {
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00d      	beq.n	8012efe <QF_newX_+0x9e>
        e->sig = (QSignal)sig;     /* set signal for this event */
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	b29a      	uxth	r2, r3
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	3301      	adds	r3, #1
 8012ef0:	b2da      	uxtb	r2, r3
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	70da      	strb	r2, [r3, #3]
 8012efc:	e009      	b.n	8012f12 <QF_newX_+0xb2>
    else {
        /* This assertion means that the event allocation failed,
         * and this failure cannot be tolerated. The most frequent
         * reason is an event leak in the application.
         */
        Q_ASSERT_ID(320, margin != QF_NO_MARGIN);
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d104      	bne.n	8012f12 <QF_newX_+0xb2>
 8012f08:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f0c:	4805      	ldr	r0, [pc, #20]	; (8012f24 <QF_newX_+0xc4>)
 8012f0e:	f7ed fde7 	bl	8000ae0 <Q_onAssert>
            QS_TIME_PRE_();        /* timestamp */
            QS_EVS_PRE_(evtSize);  /* the size of the event */
            QS_SIG_PRE_(sig);      /* the signal of the event */
        QS_END_PRE_()
    }
    return e; /* can't be NULL if we can't tolerate failed allocation */
 8012f12:	693b      	ldr	r3, [r7, #16]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3718      	adds	r7, #24
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	2000a8c8 	.word	0x2000a8c8
 8012f20:	2000a904 	.word	0x2000a904
 8012f24:	0801850c 	.word	0x0801850c

08012f28 <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	789b      	ldrb	r3, [r3, #2]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d02c      	beq.n	8012f92 <QF_gc+0x6a>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8012f38:	f7f4 fd4a 	bl	80079d0 <vPortEnterCritical>

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	78db      	ldrb	r3, [r3, #3]
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d909      	bls.n	8012f5a <QF_gc+0x32>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	78db      	ldrb	r3, [r3, #3]
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	3b01      	subs	r3, #1
 8012f4e:	b2da      	uxtb	r2, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 8012f54:	f7f4 fd70 	bl	8007a38 <vPortExitCritical>
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 8012f58:	e01b      	b.n	8012f92 <QF_gc+0x6a>
            uint_fast8_t idx = (uint_fast8_t)e->poolId_ - 1U;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	789b      	ldrb	r3, [r3, #2]
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 8012f62:	f7f4 fd69 	bl	8007a38 <vPortExitCritical>
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 8012f66:	4b0d      	ldr	r3, [pc, #52]	; (8012f9c <QF_gc+0x74>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d304      	bcc.n	8012f7a <QF_gc+0x52>
 8012f70:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8012f74:	480a      	ldr	r0, [pc, #40]	; (8012fa0 <QF_gc+0x78>)
 8012f76:	f7ed fdb3 	bl	8000ae0 <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 8012f7a:	68fa      	ldr	r2, [r7, #12]
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	4413      	add	r3, r2
 8012f82:	009b      	lsls	r3, r3, #2
 8012f84:	4a07      	ldr	r2, [pc, #28]	; (8012fa4 <QF_gc+0x7c>)
 8012f86:	4413      	add	r3, r2
 8012f88:	2200      	movs	r2, #0
 8012f8a:	6879      	ldr	r1, [r7, #4]
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f000 f87d 	bl	801308c <QMPool_put>
}
 8012f92:	bf00      	nop
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	2000a904 	.word	0x2000a904
 8012fa0:	0801850c 	.word	0x0801850c
 8012fa4:	2000a8c8 	.word	0x2000a8c8

08012fa8 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b086      	sub	sp, #24
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	60f8      	str	r0, [r7, #12]
 8012fb0:	60b9      	str	r1, [r7, #8]
 8012fb2:	607a      	str	r2, [r7, #4]
 8012fb4:	603b      	str	r3, [r7, #0]

    /** @pre The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d006      	beq.n	8012fca <QMPool_init+0x22>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d903      	bls.n	8012fca <QMPool_init+0x22>
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	f113 0f05 	cmn.w	r3, #5
 8012fc8:	d903      	bls.n	8012fd2 <QMPool_init+0x2a>
 8012fca:	2164      	movs	r1, #100	; 0x64
 8012fcc:	482e      	ldr	r0, [pc, #184]	; (8013088 <QMPool_init+0xe0>)
 8012fce:	f7ed fd87 	bl	8000ae0 <Q_onAssert>
              && (poolSize >= sizeof(QFreeBlock))
              && ((blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	68ba      	ldr	r2, [r7, #8]
 8012fd6:	601a      	str	r2, [r3, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2204      	movs	r2, #4
 8012fdc:	819a      	strh	r2, [r3, #12]
    nblocks = 1U;/* #free blocks that fit in one memory block */
 8012fde:	2301      	movs	r3, #1
 8012fe0:	613b      	str	r3, [r7, #16]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8012fe2:	e008      	b.n	8012ff6 <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	899b      	ldrh	r3, [r3, #12]
 8012fe8:	3304      	adds	r3, #4
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	613b      	str	r3, [r7, #16]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	899a      	ldrh	r2, [r3, #12]
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d3f0      	bcc.n	8012fe4 <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	899b      	ldrh	r3, [r3, #12]
 8013006:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8013008:	687a      	ldr	r2, [r7, #4]
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	429a      	cmp	r2, r3
 801300e:	d203      	bcs.n	8013018 <QMPool_init+0x70>
 8013010:	216e      	movs	r1, #110	; 0x6e
 8013012:	481d      	ldr	r0, [pc, #116]	; (8013088 <QMPool_init+0xe0>)
 8013014:	f7ed fd64 	bl	8000ae0 <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	1ad3      	subs	r3, r2, r3
 801301e:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2201      	movs	r2, #1
 8013024:	81da      	strh	r2, [r3, #14]
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	617b      	str	r3, [r7, #20]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 801302c:	e012      	b.n	8013054 <QMPool_init+0xac>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	009b      	lsls	r3, r3, #2
 8013032:	697a      	ldr	r2, [r7, #20]
 8013034:	441a      	add	r2, r3
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	617b      	str	r3, [r7, #20]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	1ad3      	subs	r3, r2, r3
 8013046:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	89db      	ldrh	r3, [r3, #14]
 801304c:	3301      	adds	r3, #1
 801304e:	b29a      	uxth	r2, r3
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	429a      	cmp	r2, r3
 801305a:	d2e8      	bcs.n	801302e <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	2200      	movs	r2, #0
 8013060:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	89da      	ldrh	r2, [r3, #14]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	89da      	ldrh	r2, [r3, #14]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	68ba      	ldr	r2, [r7, #8]
 8013076:	605a      	str	r2, [r3, #4]
    me->end   = fb;              /* the last block in this pool */
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	697a      	ldr	r2, [r7, #20]
 801307c:	609a      	str	r2, [r3, #8]
}
 801307e:	bf00      	nop
 8013080:	3718      	adds	r7, #24
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	08018514 	.word	0x08018514

0801308c <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	60f8      	str	r0, [r7, #12]
 8013094:	60b9      	str	r1, [r7, #8]
 8013096:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT_

    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	8a1b      	ldrh	r3, [r3, #16]
 801309c:	b29a      	uxth	r2, r3
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	89db      	ldrh	r3, [r3, #14]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d209      	bcs.n	80130ba <QMPool_put+0x2e>
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	68ba      	ldr	r2, [r7, #8]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d304      	bcc.n	80130ba <QMPool_put+0x2e>
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	689b      	ldr	r3, [r3, #8]
 80130b4:	68ba      	ldr	r2, [r7, #8]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d903      	bls.n	80130c2 <QMPool_put+0x36>
 80130ba:	21c8      	movs	r1, #200	; 0xc8
 80130bc:	480c      	ldr	r0, [pc, #48]	; (80130f0 <QMPool_put+0x64>)
 80130be:	f7ed fd0f 	bl	8000ae0 <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    QF_CRIT_E_();
 80130c2:	f7f4 fc85 	bl	80079d0 <vPortEnterCritical>
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	68ba      	ldr	r2, [r7, #8]
 80130d2:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	8a1b      	ldrh	r3, [r3, #16]
 80130d8:	b29b      	uxth	r3, r3
 80130da:	3301      	adds	r3, #1
 80130dc:	b29a      	uxth	r2, r3
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 80130e2:	f7f4 fca9 	bl	8007a38 <vPortExitCritical>
}
 80130e6:	bf00      	nop
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	08018514 	.word	0x08018514

080130f4 <QMPool_get>:
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get(QMPool * const me, uint_fast16_t const margin,
                 uint_fast8_t const qs_id)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b086      	sub	sp, #24
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	607a      	str	r2, [r7, #4]
    QFreeBlock *fb;
    QF_CRIT_STAT_

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    QF_CRIT_E_();
 8013100:	f7f4 fc66 	bl	80079d0 <vPortEnterCritical>

    /* have more free blocks than the requested margin? */
    if (me->nFree > (QMPoolCtr)margin) {
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	8a1b      	ldrh	r3, [r3, #16]
 8013108:	b29a      	uxth	r2, r3
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	b29b      	uxth	r3, r3
 801310e:	429a      	cmp	r2, r3
 8013110:	d94a      	bls.n	80131a8 <QMPool_get+0xb4>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	617b      	str	r3, [r7, #20]

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_CRIT_(310, fb != (QFreeBlock *)0);
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d106      	bne.n	801312c <QMPool_get+0x38>
 801311e:	f7f4 fc8b 	bl	8007a38 <vPortExitCritical>
 8013122:	f44f 719b 	mov.w	r1, #310	; 0x136
 8013126:	4825      	ldr	r0, [pc, #148]	; (80131bc <QMPool_get+0xc8>)
 8013128:	f7ed fcda 	bl	8000ae0 <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	613b      	str	r3, [r7, #16]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	8a1b      	ldrh	r3, [r3, #16]
 8013136:	b29b      	uxth	r3, r3
 8013138:	3b01      	subs	r3, #1
 801313a:	b29a      	uxth	r2, r3
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	821a      	strh	r2, [r3, #16]
        if (me->nFree == 0U) {
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	8a1b      	ldrh	r3, [r3, #16]
 8013144:	b29b      	uxth	r3, r3
 8013146:	2b00      	cmp	r3, #0
 8013148:	d10d      	bne.n	8013166 <QMPool_get+0x72>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_CRIT_(320, fb_next == (QFreeBlock *)0);
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d006      	beq.n	801315e <QMPool_get+0x6a>
 8013150:	f7f4 fc72 	bl	8007a38 <vPortExitCritical>
 8013154:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013158:	4818      	ldr	r0, [pc, #96]	; (80131bc <QMPool_get+0xc8>)
 801315a:	f7ed fcc1 	bl	8000ae0 <Q_onAssert>

            me->nMin = 0U; /* remember that the pool got empty */
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2200      	movs	r2, #0
 8013162:	825a      	strh	r2, [r3, #18]
 8013164:	e01c      	b.n	80131a0 <QMPool_get+0xac>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_CRIT_(330, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	693a      	ldr	r2, [r7, #16]
 801316c:	429a      	cmp	r2, r3
 801316e:	d304      	bcc.n	801317a <QMPool_get+0x86>
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	689b      	ldr	r3, [r3, #8]
 8013174:	693a      	ldr	r2, [r7, #16]
 8013176:	429a      	cmp	r2, r3
 8013178:	d906      	bls.n	8013188 <QMPool_get+0x94>
 801317a:	f7f4 fc5d 	bl	8007a38 <vPortExitCritical>
 801317e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8013182:	480e      	ldr	r0, [pc, #56]	; (80131bc <QMPool_get+0xc8>)
 8013184:	f7ed fcac 	bl	8000ae0 <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	8a5a      	ldrh	r2, [r3, #18]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	8a1b      	ldrh	r3, [r3, #16]
 8013190:	b29b      	uxth	r3, r3
 8013192:	429a      	cmp	r2, r3
 8013194:	d904      	bls.n	80131a0 <QMPool_get+0xac>
                me->nMin = me->nFree; /* remember the new minimum */
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	8a1b      	ldrh	r3, [r3, #16]
 801319a:	b29a      	uxth	r2, r3
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	693a      	ldr	r2, [r7, #16]
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	e001      	b.n	80131ac <QMPool_get+0xb8>
            QS_MPC_PRE_(me->nMin);  /* min # free blocks ever in the pool */
        QS_END_NOCRIT_PRE_()
    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 80131a8:	2300      	movs	r3, #0
 80131aa:	617b      	str	r3, [r7, #20]
            QS_OBJ_PRE_(me);        /* this memory pool */
            QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 80131ac:	f7f4 fc44 	bl	8007a38 <vPortExitCritical>

    return fb;  /* return the block or NULL pointer to the caller */
 80131b0:	697b      	ldr	r3, [r7, #20]
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3718      	adds	r7, #24
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	08018514 	.word	0x08018514

080131c0 <QF_init>:

/* Local objects -----------------------------------------------------------*/
static void task_function(void *pvParameters); /* FreeRTOS task signature */

/*==========================================================================*/
void QF_init(void) {
 80131c0:	b480      	push	{r7}
 80131c2:	af00      	add	r7, sp, #0
    /* empty for FreeRTOS */
}
 80131c4:	bf00      	nop
 80131c6:	46bd      	mov	sp, r7
 80131c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131cc:	4770      	bx	lr
	...

080131d0 <QF_run>:
/*..........................................................................*/
int_t QF_run(void) {
 80131d0:	b580      	push	{r7, lr}
 80131d2:	af00      	add	r7, sp, #0
    QS_CRIT_STAT_

    QF_onStartup();  /* the startup callback (configure/enable interrupts) */
 80131d4:	f7ed fca8 	bl	8000b28 <QF_onStartup>

    /* produce the QS_QF_RUN trace record */
    QS_BEGIN_PRE_(QS_QF_RUN, 0U)
    QS_END_PRE_()

    vTaskStartScheduler(); /* start the FreeRTOS scheduler */
 80131d8:	f7f3 fbfc 	bl	80069d4 <vTaskStartScheduler>
    Q_ERROR_ID(110); /* the FreeRTOS scheduler should never return */
 80131dc:	216e      	movs	r1, #110	; 0x6e
 80131de:	4803      	ldr	r0, [pc, #12]	; (80131ec <QF_run+0x1c>)
 80131e0:	f7ed fc7e 	bl	8000ae0 <Q_onAssert>
    return 0; /* dummy return to make the compiler happy */
 80131e4:	2300      	movs	r3, #0
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	bd80      	pop	{r7, pc}
 80131ea:	bf00      	nop
 80131ec:	0801851c 	.word	0x0801851c

080131f0 <QActive_start_>:
/*..........................................................................*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b08a      	sub	sp, #40	; 0x28
 80131f4:	af04      	add	r7, sp, #16
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	60b9      	str	r1, [r7, #8]
 80131fa:	607a      	str	r2, [r7, #4]
 80131fc:	603b      	str	r3, [r7, #0]
    TaskHandle_t thr;
    /* task name provided by the user in QF_setTaskName() or default name */
    char_t const *taskName = (me->thread.pxDummy1 != (void *)0)
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	69db      	ldr	r3, [r3, #28]
                             ? (char_t const *)me->thread.pxDummy1
                             : (char_t const *)"AO";
 8013202:	2b00      	cmp	r3, #0
 8013204:	d002      	beq.n	801320c <QActive_start_+0x1c>
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	69db      	ldr	r3, [r3, #28]
 801320a:	e000      	b.n	801320e <QActive_start_+0x1e>
 801320c:	4b27      	ldr	r3, [pc, #156]	; (80132ac <QActive_start_+0xbc>)
    char_t const *taskName = (me->thread.pxDummy1 != (void *)0)
 801320e:	617b      	str	r3, [r7, #20]

    Q_REQUIRE_ID(200, (0U < prio)
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d00e      	beq.n	8013234 <QActive_start_+0x44>
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	2b20      	cmp	r3, #32
 801321a:	d80b      	bhi.n	8013234 <QActive_start_+0x44>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d008      	beq.n	8013234 <QActive_start_+0x44>
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d005      	beq.n	8013234 <QActive_start_+0x44>
 8013228:	6a3b      	ldr	r3, [r7, #32]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d002      	beq.n	8013234 <QActive_start_+0x44>
 801322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013230:	2b00      	cmp	r3, #0
 8013232:	d103      	bne.n	801323c <QActive_start_+0x4c>
 8013234:	21c8      	movs	r1, #200	; 0xc8
 8013236:	481e      	ldr	r0, [pc, #120]	; (80132b0 <QActive_start_+0xc0>)
 8013238:	f7ed fc52 	bl	8000ae0 <Q_onAssert>
        && (qLen > 0U)             /* queue size must be provided */
        && (stkSto != (void *)0)   /* stack storage must be provided */
        && (stkSize > 0U));        /* stack size must be provided */

    /* create the event queue for the AO */
    QEQueue_init(&me->eQueue, qSto, qLen);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	330c      	adds	r3, #12
 8013240:	683a      	ldr	r2, [r7, #0]
 8013242:	6879      	ldr	r1, [r7, #4]
 8013244:	4618      	mov	r0, r3
 8013246:	f000 fc33 	bl	8013ab0 <QEQueue_init>

    me->prio = prio;  /* save the QF priority */
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	b2da      	uxtb	r2, r3
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    QF_add_(me);      /* make QF aware of this active object */
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f7ff fbf9 	bl	8012a4c <QF_add_>
    QHSM_INIT(&me->super, par, me->prio); /* the top-most initial tran. */
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d103      	bne.n	801326a <QActive_start_+0x7a>
 8013262:	216e      	movs	r1, #110	; 0x6e
 8013264:	4812      	ldr	r0, [pc, #72]	; (80132b0 <QActive_start_+0xc0>)
 8013266:	f7ed fc3b 	bl	8000ae0 <Q_onAssert>
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68fa      	ldr	r2, [r7, #12]
 8013272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013274:	4610      	mov	r0, r2
 8013276:	4798      	blx	r3

    /* statically create the FreeRTOS task for the AO */
    thr = xTaskCreateStatic(
              &task_function,           /* the task function */
              taskName ,                /* the name of the task */
              stkSize/sizeof(portSTACK_TYPE), /* stack size */
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	089a      	lsrs	r2, r3, #2
    thr = xTaskCreateStatic(
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	331c      	adds	r3, #28
 8013280:	9302      	str	r3, [sp, #8]
 8013282:	6a3b      	ldr	r3, [r7, #32]
 8013284:	9301      	str	r3, [sp, #4]
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	9300      	str	r3, [sp, #0]
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	6979      	ldr	r1, [r7, #20]
 801328e:	4809      	ldr	r0, [pc, #36]	; (80132b4 <QActive_start_+0xc4>)
 8013290:	f7f3 fa0b 	bl	80066aa <xTaskCreateStatic>
 8013294:	6138      	str	r0, [r7, #16]
              (void *)me,               /* the 'pvParameters' parameter */
              (UBaseType_t)(prio + tskIDLE_PRIORITY),  /* FreeRTOS priority */
              (StackType_t *)stkSto,    /* stack storage */
              &me->thread);             /* task buffer */
    Q_ENSURE_ID(210, thr != (TaskHandle_t)0); /* must be created */
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d103      	bne.n	80132a4 <QActive_start_+0xb4>
 801329c:	21d2      	movs	r1, #210	; 0xd2
 801329e:	4804      	ldr	r0, [pc, #16]	; (80132b0 <QActive_start_+0xc0>)
 80132a0:	f7ed fc1e 	bl	8000ae0 <Q_onAssert>
}
 80132a4:	bf00      	nop
 80132a6:	3718      	adds	r7, #24
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	080183a8 	.word	0x080183a8
 80132b0:	0801851c 	.word	0x0801851c
 80132b4:	080132f1 	.word	0x080132f1

080132b8 <QActive_setAttr>:
/*..........................................................................*/
void QActive_setAttr(QActive *const me, uint32_t attr1, void const *attr2) {
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	607a      	str	r2, [r7, #4]
    /* this function must be called before QACTIVE_START(),
    * which implies that me->thread.pxDummy1 must not be used yet;
    */
    Q_REQUIRE_ID(300, me->thread.pxDummy1 == (void *)0);
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	69db      	ldr	r3, [r3, #28]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d004      	beq.n	80132d6 <QActive_setAttr+0x1e>
 80132cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80132d0:	4806      	ldr	r0, [pc, #24]	; (80132ec <QActive_setAttr+0x34>)
 80132d2:	f7ed fc05 	bl	8000ae0 <Q_onAssert>
    switch (attr1) {
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d103      	bne.n	80132e4 <QActive_setAttr+0x2c>
        case TASK_NAME_ATTR:
            /* temporarily store the name */
            me->thread.pxDummy1 = (void *)attr2; /* cast 'const' away */
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	61da      	str	r2, [r3, #28]
            break;
 80132e2:	bf00      	nop
        /* ... */
    }
}
 80132e4:	bf00      	nop
 80132e6:	3710      	adds	r7, #16
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	0801851c 	.word	0x0801851c

080132f0 <task_function>:
/*..........................................................................*/
static void task_function(void *pvParameters) { /* FreeRTOS task signature */
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
    QActive *act = (QActive *)pvParameters;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	60fb      	str	r3, [r7, #12]

    /* event-loop */
    for (;;) { /* for-ever */
        QEvt const *e = QActive_get_(act);
 80132fc:	68f8      	ldr	r0, [r7, #12]
 80132fe:	f7ff fd13 	bl	8012d28 <QActive_get_>
 8013302:	60b8      	str	r0, [r7, #8]
        QHSM_DISPATCH(&act->super, e, act->prio);
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	68fa      	ldr	r2, [r7, #12]
 801330c:	68b9      	ldr	r1, [r7, #8]
 801330e:	4610      	mov	r0, r2
 8013310:	4798      	blx	r3
        QF_gc(e); /* check if the event is garbage, and collect it if so */
 8013312:	68b8      	ldr	r0, [r7, #8]
 8013314:	f7ff fe08 	bl	8012f28 <QF_gc>
    for (;;) { /* for-ever */
 8013318:	e7f0      	b.n	80132fc <task_function+0xc>
	...

0801331c <QActive_postFromISR_>:
#else
bool QActive_postFromISR_(QActive * const me, QEvt const * const e,
                          uint_fast16_t const margin,
                          BaseType_t * const pxHigherPriorityTaskWoken)
#endif
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b08c      	sub	sp, #48	; 0x30
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
 8013328:	603b      	str	r3, [r7, #0]
    QEQueueCtr nFree; /* temporary to avoid UB for volatile access */
    bool status;
    UBaseType_t uxSavedInterruptState;

    /** @pre event pointer must be valid */
    Q_REQUIRE_ID(400, e != (QEvt *)0);
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d104      	bne.n	801333a <QActive_postFromISR_+0x1e>
 8013330:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013334:	484f      	ldr	r0, [pc, #316]	; (8013474 <QActive_postFromISR_+0x158>)
 8013336:	f7ed fbd3 	bl	8000ae0 <Q_onAssert>
        __asm volatile
 801333a:	f3ef 8211 	mrs	r2, BASEPRI
 801333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013342:	b672      	cpsid	i
 8013344:	f383 8811 	msr	BASEPRI, r3
 8013348:	f3bf 8f6f 	isb	sy
 801334c:	f3bf 8f4f 	dsb	sy
 8013350:	b662      	cpsie	i
 8013352:	623a      	str	r2, [r7, #32]
 8013354:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8013356:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 8013358:	62bb      	str	r3, [r7, #40]	; 0x28
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	7ddb      	ldrb	r3, [r3, #23]
 801335e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (margin == QF_NO_MARGIN) {
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013368:	4293      	cmp	r3, r2
 801336a:	d110      	bne.n	801338e <QActive_postFromISR_+0x72>
        if (nFree > 0U) {
 801336c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013370:	2b00      	cmp	r3, #0
 8013372:	d003      	beq.n	801337c <QActive_postFromISR_+0x60>
            status = true; /* can post */
 8013374:	2301      	movs	r3, #1
 8013376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801337a:	e015      	b.n	80133a8 <QActive_postFromISR_+0x8c>
        }
        else {
            status = false; /* cannot post */
 801337c:	2300      	movs	r3, #0
 801337e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Q_ERROR_ID(410); /* must be able to post the event */
 8013382:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8013386:	483b      	ldr	r0, [pc, #236]	; (8013474 <QActive_postFromISR_+0x158>)
 8013388:	f7ed fbaa 	bl	8000ae0 <Q_onAssert>
 801338c:	e00c      	b.n	80133a8 <QActive_postFromISR_+0x8c>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	b2db      	uxtb	r3, r3
 8013392:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013396:	429a      	cmp	r2, r3
 8013398:	d903      	bls.n	80133a2 <QActive_postFromISR_+0x86>
        status = true; /* can post */
 801339a:	2301      	movs	r3, #1
 801339c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80133a0:	e002      	b.n	80133a8 <QActive_postFromISR_+0x8c>
    }
    else {
        status = false; /* cannot post */
 80133a2:	2300      	movs	r3, #0
 80133a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (status) { /* can post the event? */
 80133a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d051      	beq.n	8013454 <QActive_postFromISR_+0x138>
            QS_EQC_PRE_(nFree);   /* number of free entries */
            QS_EQC_PRE_(me->eQueue.nMin); /* min number of free entries */
        QS_END_NOCRIT_PRE_()

        /* is it a pool event? */
        if (e->poolId_ != 0U) {
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	789b      	ldrb	r3, [r3, #2]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d006      	beq.n	80133c6 <QActive_postFromISR_+0xaa>
            QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	78db      	ldrb	r3, [r3, #3]
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	3301      	adds	r3, #1
 80133c0:	b2da      	uxtb	r2, r3
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	70da      	strb	r2, [r3, #3]
        }

        --nFree; /* one free entry just used up */
 80133c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133ca:	3b01      	subs	r3, #1
 80133cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        me->eQueue.nFree = nFree;    /* update the volatile */
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80133d6:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	7e1b      	ldrb	r3, [r3, #24]
 80133dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d203      	bcs.n	80133ec <QActive_postFromISR_+0xd0>
            me->eQueue.nMin = nFree; /* update minimum so far */
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80133ea:	761a      	strb	r2, [r3, #24]
        }

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d110      	bne.n	8013416 <QActive_postFromISR_+0xfa>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	68ba      	ldr	r2, [r7, #8]
 80133f8:	60da      	str	r2, [r3, #12]
 80133fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fc:	61bb      	str	r3, [r7, #24]
        __asm volatile
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	f383 8811 	msr	BASEPRI, r3
    }
 8013404:	bf00      	nop
            taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

            /* signal the event queue */
            vTaskNotifyGiveFromISR((TaskHandle_t)&me->thread,
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	331c      	adds	r3, #28
 801340a:	683a      	ldr	r2, [r7, #0]
 801340c:	2100      	movs	r1, #0
 801340e:	4618      	mov	r0, r3
 8013410:	f7f4 f83e 	bl	8007490 <vTaskGenericNotifyGiveFromISR>
 8013414:	e027      	b.n	8013466 <QActive_postFromISR_+0x14a>
                                   pxHigherPriorityTaskWoken);
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	691a      	ldr	r2, [r3, #16]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	7d5b      	ldrb	r3, [r3, #21]
 801341e:	b2db      	uxtb	r3, r3
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	4413      	add	r3, r2
 8013424:	68ba      	ldr	r2, [r7, #8]
 8013426:	601a      	str	r2, [r3, #0]
            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	7d5b      	ldrb	r3, [r3, #21]
 801342c:	b2db      	uxtb	r3, r3
 801342e:	2b00      	cmp	r3, #0
 8013430:	d103      	bne.n	801343a <QActive_postFromISR_+0x11e>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	7d1a      	ldrb	r2, [r3, #20]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	7d5b      	ldrb	r3, [r3, #21]
 801343e:	b2db      	uxtb	r3, r3
 8013440:	3b01      	subs	r3, #1
 8013442:	b2da      	uxtb	r2, r3
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	755a      	strb	r2, [r3, #21]
 8013448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344a:	617b      	str	r3, [r7, #20]
        __asm volatile
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	f383 8811 	msr	BASEPRI, r3
    }
 8013452:	e008      	b.n	8013466 <QActive_postFromISR_+0x14a>
 8013454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013456:	613b      	str	r3, [r7, #16]
        __asm volatile
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	f383 8811 	msr	BASEPRI, r3
    }
 801345e:	bf00      	nop
            QS_EQC_PRE_(margin); /* margin requested */
        QS_END_NOCRIT_PRE_()

        taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

        QF_gcFromISR(e); /* recycle the event to avoid a leak */
 8013460:	68b8      	ldr	r0, [r7, #8]
 8013462:	f000 f9a1 	bl	80137a8 <QF_gcFromISR>
    }

    return status;
 8013466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801346a:	4618      	mov	r0, r3
 801346c:	3730      	adds	r7, #48	; 0x30
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}
 8013472:	bf00      	nop
 8013474:	0801851c 	.word	0x0801851c

08013478 <QF_publishFromISR_>:
                        void const * const sender)
#else
void QF_publishFromISR_(QEvt const * const e,
                        BaseType_t * const pxHigherPriorityTaskWoken)
#endif
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b088      	sub	sp, #32
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	6039      	str	r1, [r7, #0]
    QPSet subscrList; /* local, modifiable copy of the subscriber list */
    UBaseType_t uxSavedInterruptState;

    /** @pre the published signal must be within the configured range */
    Q_REQUIRE_ID(500, e->sig < (QSignal)QF_maxPubSignal_);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	881a      	ldrh	r2, [r3, #0]
 8013486:	4b37      	ldr	r3, [pc, #220]	; (8013564 <QF_publishFromISR_+0xec>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	b29b      	uxth	r3, r3
 801348c:	429a      	cmp	r2, r3
 801348e:	d304      	bcc.n	801349a <QF_publishFromISR_+0x22>
 8013490:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8013494:	4834      	ldr	r0, [pc, #208]	; (8013568 <QF_publishFromISR_+0xf0>)
 8013496:	f7ed fb23 	bl	8000ae0 <Q_onAssert>
        __asm volatile
 801349a:	f3ef 8211 	mrs	r2, BASEPRI
 801349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a2:	b672      	cpsid	i
 80134a4:	f383 8811 	msr	BASEPRI, r3
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	f3bf 8f4f 	dsb	sy
 80134b0:	b662      	cpsie	i
 80134b2:	617a      	str	r2, [r7, #20]
 80134b4:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80134b6:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80134b8:	61bb      	str	r3, [r7, #24]
        QS_SIG_PRE_(e->sig);     /* the signal of the event */
        QS_2U8_PRE_(e->poolId_, e->refCtr_);/* pool-Id & ref-Count */
    QS_END_NOCRIT_PRE_()

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	789b      	ldrb	r3, [r3, #2]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d006      	beq.n	80134d0 <QF_publishFromISR_+0x58>
        * is still in progress. At the end of the function, the garbage
        * collector step (QF_gcFromISR()) decrements the reference counter and
        * recycles the event if the counter drops to zero. This covers the
        * case when the event was published without any subscribers.
        */
        QF_EVT_REF_CTR_INC_(e);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	78db      	ldrb	r3, [r3, #3]
 80134c6:	b2db      	uxtb	r3, r3
 80134c8:	3301      	adds	r3, #1
 80134ca:	b2da      	uxtb	r2, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	70da      	strb	r2, [r3, #3]
    }

    /* make a local, modifiable copy of the subscriber list */
    subscrList = QF_PTR_AT_(QF_subscrList_, e->sig);
 80134d0:	4b26      	ldr	r3, [pc, #152]	; (801356c <QF_publishFromISR_+0xf4>)
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	4413      	add	r3, r2
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	60bb      	str	r3, [r7, #8]
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f383 8811 	msr	BASEPRI, r3
    }
 80134ea:	bf00      	nop
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

    if (QPSet_notEmpty(&subscrList)) { /* any subscribers? */
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d030      	beq.n	8013554 <QF_publishFromISR_+0xdc>
        uint_fast8_t p;

        QPSet_findMax(&subscrList, p); /* the highest-prio subscriber */
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7ff faf1 	bl	8012adc <QF_LOG2>
 80134fa:	61f8      	str	r0, [r7, #28]

        /* no need to lock the scheduler in the ISR context */
        do { /* loop over all subscribers */
            /* the prio of the AO must be registered with the framework */
            Q_ASSERT_ID(510, QF_active_[p] != (QActive *)0);
 80134fc:	4a1c      	ldr	r2, [pc, #112]	; (8013570 <QF_publishFromISR_+0xf8>)
 80134fe:	69fb      	ldr	r3, [r7, #28]
 8013500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d104      	bne.n	8013512 <QF_publishFromISR_+0x9a>
 8013508:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 801350c:	4816      	ldr	r0, [pc, #88]	; (8013568 <QF_publishFromISR_+0xf0>)
 801350e:	f7ed fae7 	bl	8000ae0 <Q_onAssert>

            /* QACTIVE_POST_FROM_ISR() asserts if the queue overflows */
            QACTIVE_POST_FROM_ISR(QF_active_[p], e,
 8013512:	4a17      	ldr	r2, [pc, #92]	; (8013570 <QF_publishFromISR_+0xf8>)
 8013514:	69fb      	ldr	r3, [r7, #28]
 8013516:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013520:	6879      	ldr	r1, [r7, #4]
 8013522:	f7ff fefb 	bl	801331c <QActive_postFromISR_>
                                  pxHigherPriorityTaskWoken, sender);

            QPSet_remove(&subscrList, p); /* remove the handled subscriber */
 8013526:	68ba      	ldr	r2, [r7, #8]
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	3b01      	subs	r3, #1
 801352c:	2101      	movs	r1, #1
 801352e:	fa01 f303 	lsl.w	r3, r1, r3
 8013532:	43db      	mvns	r3, r3
 8013534:	4013      	ands	r3, r2
 8013536:	60bb      	str	r3, [r7, #8]
            if (QPSet_notEmpty(&subscrList)) { /* still more subscribers? */
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d005      	beq.n	801354a <QF_publishFromISR_+0xd2>
                QPSet_findMax(&subscrList, p); /* highest-prio subscriber */
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	4618      	mov	r0, r3
 8013542:	f7ff facb 	bl	8012adc <QF_LOG2>
 8013546:	61f8      	str	r0, [r7, #28]
 8013548:	e001      	b.n	801354e <QF_publishFromISR_+0xd6>
            }
            else {
                p = 0U; /* no more subscribers */
 801354a:	2300      	movs	r3, #0
 801354c:	61fb      	str	r3, [r7, #28]
            }
        } while (p != 0U);
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1d3      	bne.n	80134fc <QF_publishFromISR_+0x84>

    /* The following garbage collection step decrements the reference counter
    * and recycles the event if the counter drops to zero. This covers both
    * cases when the event was published with or without any subscribers.
    */
    QF_gcFromISR(e);
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 f927 	bl	80137a8 <QF_gcFromISR>
}
 801355a:	bf00      	nop
 801355c:	3720      	adds	r7, #32
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	2000a90c 	.word	0x2000a90c
 8013568:	0801851c 	.word	0x0801851c
 801356c:	2000a908 	.word	0x2000a908
 8013570:	2000a844 	.word	0x2000a844

08013574 <QF_tickXFromISR_>:
                      void const * const sender)
#else
void QF_tickXFromISR_(uint_fast8_t const tickRate,
                      BaseType_t * const pxHigherPriorityTaskWoken)
#endif
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b08e      	sub	sp, #56	; 0x38
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	011b      	lsls	r3, r3, #4
 8013582:	4a55      	ldr	r2, [pc, #340]	; (80136d8 <QF_tickXFromISR_+0x164>)
 8013584:	4413      	add	r3, r2
 8013586:	637b      	str	r3, [r7, #52]	; 0x34
        __asm volatile
 8013588:	f3ef 8211 	mrs	r2, BASEPRI
 801358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013590:	b672      	cpsid	i
 8013592:	f383 8811 	msr	BASEPRI, r3
 8013596:	f3bf 8f6f 	isb	sy
 801359a:	f3bf 8f4f 	dsb	sy
 801359e:	b662      	cpsie	i
 80135a0:	627a      	str	r2, [r7, #36]	; 0x24
 80135a2:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80135a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    UBaseType_t uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80135a6:	633b      	str	r3, [r7, #48]	; 0x30
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 80135a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135aa:	685b      	ldr	r3, [r3, #4]
 80135ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 80135ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d121      	bne.n	80135f8 <QF_tickXFromISR_+0x84>

            /* any new time events armed since the last run of QF_tickX_()? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) {
 80135b4:	4a48      	ldr	r2, [pc, #288]	; (80136d8 <QF_tickXFromISR_+0x164>)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	011b      	lsls	r3, r3, #4
 80135ba:	4413      	add	r3, r2
 80135bc:	3308      	adds	r3, #8
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d07d      	beq.n	80136c0 <QF_tickXFromISR_+0x14c>

                /* sanity check */
                Q_ASSERT_ID(610, prev != (QTimeEvt *)0);
 80135c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d104      	bne.n	80135d4 <QF_tickXFromISR_+0x60>
 80135ca:	f240 2162 	movw	r1, #610	; 0x262
 80135ce:	4843      	ldr	r0, [pc, #268]	; (80136dc <QF_tickXFromISR_+0x168>)
 80135d0:	f7ed fa86 	bl	8000ae0 <Q_onAssert>
                prev->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 80135d4:	4a40      	ldr	r2, [pc, #256]	; (80136d8 <QF_tickXFromISR_+0x164>)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	011b      	lsls	r3, r3, #4
 80135da:	4413      	add	r3, r2
 80135dc:	3308      	adds	r3, #8
 80135de:	681a      	ldr	r2, [r3, #0]
 80135e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135e2:	605a      	str	r2, [r3, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 80135e4:	4a3c      	ldr	r2, [pc, #240]	; (80136d8 <QF_tickXFromISR_+0x164>)
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	011b      	lsls	r3, r3, #4
 80135ea:	4413      	add	r3, r2
 80135ec:	3308      	adds	r3, #8
 80135ee:	2200      	movs	r2, #0
 80135f0:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 80135f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 80135f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fa:	899b      	ldrh	r3, [r3, #12]
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d111      	bne.n	8013626 <QF_tickXFromISR_+0xb2>
            prev->next = t->next;
 8013602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013604:	685a      	ldr	r2, [r3, #4]
 8013606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013608:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~TE_IS_LINKED);
 801360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360c:	78db      	ldrb	r3, [r3, #3]
 801360e:	b2db      	uxtb	r3, r3
 8013610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013614:	b2da      	uxtb	r2, r3
 8013616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013618:	70da      	strb	r2, [r3, #3]
 801361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361c:	61fb      	str	r3, [r7, #28]
        __asm volatile
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	f383 8811 	msr	BASEPRI, r3
    }
 8013624:	e03b      	b.n	801369e <QF_tickXFromISR_+0x12a>
            /* do NOT advance the prev pointer */
            /* exit crit. section to reduce latency */
            taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
        }
        else {
            --t->ctr;
 8013626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013628:	899b      	ldrh	r3, [r3, #12]
 801362a:	b29b      	uxth	r3, r3
 801362c:	3b01      	subs	r3, #1
 801362e:	b29a      	uxth	r2, r3
 8013630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013632:	819a      	strh	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == (QTimeEvtCtr)0) {
 8013634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013636:	899b      	ldrh	r3, [r3, #12]
 8013638:	b29b      	uxth	r3, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	d127      	bne.n	801368e <QF_tickXFromISR_+0x11a>
                QActive *act = (QActive *)t->act; /* temp. for volatile */
 801363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	62bb      	str	r3, [r7, #40]	; 0x28

                /* periodic time evt? */
                if (t->interval != 0U) {
 8013644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013646:	89db      	ldrh	r3, [r3, #14]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d006      	beq.n	801365a <QF_tickXFromISR_+0xe6>
                    t->ctr = t->interval; /* rearm the time event */
 801364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364e:	89da      	ldrh	r2, [r3, #14]
 8013650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013652:	819a      	strh	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8013654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013656:	637b      	str	r3, [r7, #52]	; 0x34
 8013658:	e00b      	b.n	8013672 <QF_tickXFromISR_+0xfe>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 801365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365c:	685a      	ldr	r2, [r3, #4]
 801365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013660:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~TE_IS_LINKED);
 8013662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013664:	78db      	ldrb	r3, [r3, #3]
 8013666:	b2db      	uxtb	r3, r3
 8013668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801366c:	b2da      	uxtb	r2, r3
 801366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013670:	70da      	strb	r2, [r3, #3]
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	61bb      	str	r3, [r7, #24]
        __asm volatile
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	f383 8811 	msr	BASEPRI, r3
    }
 801367c:	bf00      	nop

                /* exit critical section before posting */
                taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

                /* QACTIVE_POST_FROM_ISR() asserts if the queue overflows */
                QACTIVE_POST_FROM_ISR(act, &t->super,
 801367e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013688:	f7ff fe48 	bl	801331c <QActive_postFromISR_>
 801368c:	e007      	b.n	801369e <QF_tickXFromISR_+0x12a>
                                      pxHigherPriorityTaskWoken,
                                      sender);
            }
            else {
                prev = t;         /* advance to this time event */
 801368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013690:	637b      	str	r3, [r7, #52]	; 0x34
 8013692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013694:	617b      	str	r3, [r7, #20]
        __asm volatile
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	f383 8811 	msr	BASEPRI, r3
    }
 801369c:	bf00      	nop
        __asm volatile
 801369e:	f3ef 8211 	mrs	r2, BASEPRI
 80136a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a6:	b672      	cpsid	i
 80136a8:	f383 8811 	msr	BASEPRI, r3
 80136ac:	f3bf 8f6f 	isb	sy
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	b662      	cpsie	i
 80136b6:	613a      	str	r2, [r7, #16]
 80136b8:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 80136ba:	693b      	ldr	r3, [r7, #16]
                /* exit crit. section to reduce latency */
                taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
            }
        }
        /* re-enter crit. section to continue */
        uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80136bc:	633b      	str	r3, [r7, #48]	; 0x30
    for (;;) {
 80136be:	e773      	b.n	80135a8 <QF_tickXFromISR_+0x34>
                break; /* all currently armed time evts. processed */
 80136c0:	bf00      	nop
 80136c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c4:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	f383 8811 	msr	BASEPRI, r3
    }
 80136cc:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
}
 80136ce:	bf00      	nop
 80136d0:	3738      	adds	r7, #56	; 0x38
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
 80136d6:	bf00      	nop
 80136d8:	2000a910 	.word	0x2000a910
 80136dc:	0801851c 	.word	0x0801851c

080136e0 <QF_newXFromISR_>:
/*..........................................................................*/
QEvt *QF_newXFromISR_(uint_fast16_t const evtSize,
                      uint_fast16_t const margin, enum_t const sig)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	60b9      	str	r1, [r7, #8]
 80136ea:	607a      	str	r2, [r7, #4]
#ifdef Q_SPY
    UBaseType_t uxSavedInterruptState;
#endif /* Q_SPY */

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80136ec:	2300      	movs	r3, #0
 80136ee:	617b      	str	r3, [r7, #20]
 80136f0:	e00f      	b.n	8013712 <QF_newXFromISR_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_pool_[idx])) {
 80136f2:	492a      	ldr	r1, [pc, #168]	; (801379c <QF_newXFromISR_+0xbc>)
 80136f4:	697a      	ldr	r2, [r7, #20]
 80136f6:	4613      	mov	r3, r2
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	4413      	add	r3, r2
 80136fc:	009b      	lsls	r3, r3, #2
 80136fe:	440b      	add	r3, r1
 8013700:	330c      	adds	r3, #12
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	461a      	mov	r2, r3
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	4293      	cmp	r3, r2
 801370a:	d908      	bls.n	801371e <QF_newXFromISR_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	3301      	adds	r3, #1
 8013710:	617b      	str	r3, [r7, #20]
 8013712:	4b23      	ldr	r3, [pc, #140]	; (80137a0 <QF_newXFromISR_+0xc0>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	697a      	ldr	r2, [r7, #20]
 8013718:	429a      	cmp	r2, r3
 801371a:	d3ea      	bcc.n	80136f2 <QF_newXFromISR_+0x12>
 801371c:	e000      	b.n	8013720 <QF_newXFromISR_+0x40>
            break;
 801371e:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(710, idx < QF_maxPool_);
 8013720:	4b1f      	ldr	r3, [pc, #124]	; (80137a0 <QF_newXFromISR_+0xc0>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	697a      	ldr	r2, [r7, #20]
 8013726:	429a      	cmp	r2, r3
 8013728:	d304      	bcc.n	8013734 <QF_newXFromISR_+0x54>
 801372a:	f240 21c6 	movw	r1, #710	; 0x2c6
 801372e:	481d      	ldr	r0, [pc, #116]	; (80137a4 <QF_newXFromISR_+0xc4>)
 8013730:	f7ed f9d6 	bl	8000ae0 <Q_onAssert>
#ifdef Q_SPY
    e = QMPool_getFromISR(&QF_pool_[idx],
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
#else
    e = QMPool_getFromISR(&QF_pool_[idx],
 8013734:	697a      	ldr	r2, [r7, #20]
 8013736:	4613      	mov	r3, r2
 8013738:	009b      	lsls	r3, r3, #2
 801373a:	4413      	add	r3, r2
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	4a17      	ldr	r2, [pc, #92]	; (801379c <QF_newXFromISR_+0xbc>)
 8013740:	1898      	adds	r0, r3, r2
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013748:	4293      	cmp	r3, r2
 801374a:	d001      	beq.n	8013750 <QF_newXFromISR_+0x70>
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	e000      	b.n	8013752 <QF_newXFromISR_+0x72>
 8013750:	2300      	movs	r3, #0
 8013752:	2200      	movs	r2, #0
 8013754:	4619      	mov	r1, r3
 8013756:	f000 f8c3 	bl	80138e0 <QMPool_getFromISR>
 801375a:	6138      	str	r0, [r7, #16]
                      ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    /* was e allocated correctly? */
    if (e != (QEvt *)0) {
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d00d      	beq.n	801377e <QF_newXFromISR_+0x9e>
        e->sig = (QSignal)sig;   /* set signal for this event */
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	b29a      	uxth	r2, r3
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	b2db      	uxtb	r3, r3
 801376e:	3301      	adds	r3, #1
 8013770:	b2da      	uxtb	r2, r3
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	2200      	movs	r2, #0
 801377a:	70da      	strb	r2, [r3, #3]
 801377c:	e009      	b.n	8013792 <QF_newXFromISR_+0xb2>
#endif /* Q_SPY */
    }
    /* event cannot be allocated */
    else {
        /* must tolerate bad alloc. */
        Q_ASSERT_ID(720, margin != QF_NO_MARGIN);
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013784:	4293      	cmp	r3, r2
 8013786:	d104      	bne.n	8013792 <QF_newXFromISR_+0xb2>
 8013788:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801378c:	4805      	ldr	r0, [pc, #20]	; (80137a4 <QF_newXFromISR_+0xc4>)
 801378e:	f7ed f9a7 	bl	8000ae0 <Q_onAssert>
            QS_SIG_PRE_(sig);       /* the signal of the event */
        QS_END_NOCRIT_PRE_()
        taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
#endif /* Q_SPY */
    }
    return e; /* can't be NULL if we can't tolerate bad allocation */
 8013792:	693b      	ldr	r3, [r7, #16]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3718      	adds	r7, #24
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	2000a8c8 	.word	0x2000a8c8
 80137a0:	2000a904 	.word	0x2000a904
 80137a4:	0801851c 	.word	0x0801851c

080137a8 <QF_gcFromISR>:
/*..........................................................................*/
void QF_gcFromISR(QEvt const * const e) {
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b088      	sub	sp, #32
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	789b      	ldrb	r3, [r3, #2]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d042      	beq.n	801383e <QF_gcFromISR+0x96>
        __asm volatile
 80137b8:	f3ef 8211 	mrs	r2, BASEPRI
 80137bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c0:	b672      	cpsid	i
 80137c2:	f383 8811 	msr	BASEPRI, r3
 80137c6:	f3bf 8f6f 	isb	sy
 80137ca:	f3bf 8f4f 	dsb	sy
 80137ce:	b662      	cpsie	i
 80137d0:	617a      	str	r2, [r7, #20]
 80137d2:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80137d4:	697b      	ldr	r3, [r7, #20]
        UBaseType_t uxSavedInterruptState;
        uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80137d6:	61fb      	str	r3, [r7, #28]

        /* isn't this the last ref? */
        if (e->refCtr_ > 1U) {
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	78db      	ldrb	r3, [r3, #3]
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	2b01      	cmp	r3, #1
 80137e0:	d90d      	bls.n	80137fe <QF_gcFromISR+0x56>
            QF_EVT_REF_CTR_DEC_(e); /* decrements the ref counter */
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	78db      	ldrb	r3, [r3, #3]
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	3b01      	subs	r3, #1
 80137ea:	b2da      	uxtb	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	70da      	strb	r2, [r3, #3]
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	f383 8811 	msr	BASEPRI, r3
    }
 80137fa:	bf00      	nop
#else
            QMPool_putFromISR(&QF_pool_[idx], (QEvt *)e, 0U);
#endif
        }
    }
}
 80137fc:	e01f      	b.n	801383e <QF_gcFromISR+0x96>
            uint_fast8_t idx = (uint_fast8_t)e->poolId_ - 1U;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	789b      	ldrb	r3, [r3, #2]
 8013802:	3b01      	subs	r3, #1
 8013804:	61bb      	str	r3, [r7, #24]
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	60bb      	str	r3, [r7, #8]
        __asm volatile
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	f383 8811 	msr	BASEPRI, r3
    }
 8013810:	bf00      	nop
            Q_ASSERT_ID(810, idx < QF_maxPool_);
 8013812:	4b0d      	ldr	r3, [pc, #52]	; (8013848 <QF_gcFromISR+0xa0>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	69ba      	ldr	r2, [r7, #24]
 8013818:	429a      	cmp	r2, r3
 801381a:	d304      	bcc.n	8013826 <QF_gcFromISR+0x7e>
 801381c:	f240 312a 	movw	r1, #810	; 0x32a
 8013820:	480a      	ldr	r0, [pc, #40]	; (801384c <QF_gcFromISR+0xa4>)
 8013822:	f7ed f95d 	bl	8000ae0 <Q_onAssert>
            QMPool_putFromISR(&QF_pool_[idx], (QEvt *)e, 0U);
 8013826:	69ba      	ldr	r2, [r7, #24]
 8013828:	4613      	mov	r3, r2
 801382a:	009b      	lsls	r3, r3, #2
 801382c:	4413      	add	r3, r2
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	4a07      	ldr	r2, [pc, #28]	; (8013850 <QF_gcFromISR+0xa8>)
 8013832:	4413      	add	r3, r2
 8013834:	2200      	movs	r2, #0
 8013836:	6879      	ldr	r1, [r7, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	f000 f80b 	bl	8013854 <QMPool_putFromISR>
}
 801383e:	bf00      	nop
 8013840:	3720      	adds	r7, #32
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	2000a904 	.word	0x2000a904
 801384c:	0801851c 	.word	0x0801851c
 8013850:	2000a8c8 	.word	0x2000a8c8

08013854 <QMPool_putFromISR>:
/*..........................................................................*/
void QMPool_putFromISR(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 8013854:	b580      	push	{r7, lr}
 8013856:	b088      	sub	sp, #32
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
    UBaseType_t uxSavedInterruptState;

    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(900, (me->nFree < me->nTot)
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	8a1b      	ldrh	r3, [r3, #16]
 8013864:	b29a      	uxth	r2, r3
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	89db      	ldrh	r3, [r3, #14]
 801386a:	429a      	cmp	r2, r3
 801386c:	d209      	bcs.n	8013882 <QMPool_putFromISR+0x2e>
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	68ba      	ldr	r2, [r7, #8]
 8013874:	429a      	cmp	r2, r3
 8013876:	d304      	bcc.n	8013882 <QMPool_putFromISR+0x2e>
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	689b      	ldr	r3, [r3, #8]
 801387c:	68ba      	ldr	r2, [r7, #8]
 801387e:	429a      	cmp	r2, r3
 8013880:	d904      	bls.n	801388c <QMPool_putFromISR+0x38>
 8013882:	f44f 7161 	mov.w	r1, #900	; 0x384
 8013886:	4815      	ldr	r0, [pc, #84]	; (80138dc <QMPool_putFromISR+0x88>)
 8013888:	f7ed f92a 	bl	8000ae0 <Q_onAssert>
        __asm volatile
 801388c:	f3ef 8211 	mrs	r2, BASEPRI
 8013890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013894:	b672      	cpsid	i
 8013896:	f383 8811 	msr	BASEPRI, r3
 801389a:	f3bf 8f6f 	isb	sy
 801389e:	f3bf 8f4f 	dsb	sy
 80138a2:	b662      	cpsie	i
 80138a4:	61ba      	str	r2, [r7, #24]
 80138a6:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 80138a8:	69bb      	ldr	r3, [r7, #24]
                      && QF_PTR_RANGE_(b, me->start, me->end));

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80138aa:	61fb      	str	r3, [r7, #28]

    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	68ba      	ldr	r2, [r7, #8]
 80138b8:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	8a1b      	ldrh	r3, [r3, #16]
 80138be:	b29b      	uxth	r3, r3
 80138c0:	3301      	adds	r3, #1
 80138c2:	b29a      	uxth	r2, r3
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	821a      	strh	r2, [r3, #16]
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	613b      	str	r3, [r7, #16]
        __asm volatile
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	f383 8811 	msr	BASEPRI, r3
    }
 80138d2:	bf00      	nop
        QS_OBJ_PRE_(me->start); /* the memory managed by this pool */
        QS_MPC_PRE_(me->nFree); /* # free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
}
 80138d4:	bf00      	nop
 80138d6:	3720      	adds	r7, #32
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	0801851c 	.word	0x0801851c

080138e0 <QMPool_getFromISR>:
/*..........................................................................*/
void *QMPool_getFromISR(QMPool * const me, uint_fast16_t const margin,
                 uint_fast8_t const qs_id)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08a      	sub	sp, #40	; 0x28
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
        __asm volatile
 80138ec:	f3ef 8211 	mrs	r2, BASEPRI
 80138f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f4:	b672      	cpsid	i
 80138f6:	f383 8811 	msr	BASEPRI, r3
 80138fa:	f3bf 8f6f 	isb	sy
 80138fe:	f3bf 8f4f 	dsb	sy
 8013902:	b662      	cpsie	i
 8013904:	61ba      	str	r2, [r7, #24]
 8013906:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8013908:	69bb      	ldr	r3, [r7, #24]
    QFreeBlock *fb;
    UBaseType_t uxSavedInterruptState;

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 801390a:	623b      	str	r3, [r7, #32]

    /* have more free blocks than the requested margin? */
    if (me->nFree > (QMPoolCtr)margin) {
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	8a1b      	ldrh	r3, [r3, #16]
 8013910:	b29a      	uxth	r2, r3
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	b29b      	uxth	r3, r3
 8013916:	429a      	cmp	r2, r3
 8013918:	d944      	bls.n	80139a4 <QMPool_getFromISR+0xc4>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	627b      	str	r3, [r7, #36]	; 0x24

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_ID(910, fb != (QFreeBlock *)0);
 8013920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013922:	2b00      	cmp	r3, #0
 8013924:	d104      	bne.n	8013930 <QMPool_getFromISR+0x50>
 8013926:	f240 318e 	movw	r1, #910	; 0x38e
 801392a:	4825      	ldr	r0, [pc, #148]	; (80139c0 <QMPool_getFromISR+0xe0>)
 801392c:	f7ed f8d8 	bl	8000ae0 <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 8013930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	61fb      	str	r3, [r7, #28]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	8a1b      	ldrh	r3, [r3, #16]
 801393a:	b29b      	uxth	r3, r3
 801393c:	3b01      	subs	r3, #1
 801393e:	b29a      	uxth	r2, r3
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	821a      	strh	r2, [r3, #16]
        if (me->nFree == (QMPoolCtr)0) {
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	8a1b      	ldrh	r3, [r3, #16]
 8013948:	b29b      	uxth	r3, r3
 801394a:	2b00      	cmp	r3, #0
 801394c:	d10b      	bne.n	8013966 <QMPool_getFromISR+0x86>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_ID(920, fb_next == (QFreeBlock *)0);
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d004      	beq.n	801395e <QMPool_getFromISR+0x7e>
 8013954:	f44f 7166 	mov.w	r1, #920	; 0x398
 8013958:	4819      	ldr	r0, [pc, #100]	; (80139c0 <QMPool_getFromISR+0xe0>)
 801395a:	f7ed f8c1 	bl	8000ae0 <Q_onAssert>

            me->nMin = (QMPoolCtr)0; /* remember that the pool got empty */
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	2200      	movs	r2, #0
 8013962:	825a      	strh	r2, [r3, #18]
 8013964:	e01a      	b.n	801399c <QMPool_getFromISR+0xbc>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_ID(930, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	69fa      	ldr	r2, [r7, #28]
 801396c:	429a      	cmp	r2, r3
 801396e:	d304      	bcc.n	801397a <QMPool_getFromISR+0x9a>
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	689b      	ldr	r3, [r3, #8]
 8013974:	69fa      	ldr	r2, [r7, #28]
 8013976:	429a      	cmp	r2, r3
 8013978:	d904      	bls.n	8013984 <QMPool_getFromISR+0xa4>
 801397a:	f240 31a2 	movw	r1, #930	; 0x3a2
 801397e:	4810      	ldr	r0, [pc, #64]	; (80139c0 <QMPool_getFromISR+0xe0>)
 8013980:	f7ed f8ae 	bl	8000ae0 <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	8a5a      	ldrh	r2, [r3, #18]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	8a1b      	ldrh	r3, [r3, #16]
 801398c:	b29b      	uxth	r3, r3
 801398e:	429a      	cmp	r2, r3
 8013990:	d904      	bls.n	801399c <QMPool_getFromISR+0xbc>
                me->nMin = me->nFree; /* remember the new minimum */
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	8a1b      	ldrh	r3, [r3, #16]
 8013996:	b29a      	uxth	r2, r3
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	69fa      	ldr	r2, [r7, #28]
 80139a0:	601a      	str	r2, [r3, #0]
 80139a2:	e001      	b.n	80139a8 <QMPool_getFromISR+0xc8>
        QS_END_NOCRIT_PRE_()

    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	627b      	str	r3, [r7, #36]	; 0x24
 80139a8:	6a3b      	ldr	r3, [r7, #32]
 80139aa:	613b      	str	r3, [r7, #16]
        __asm volatile
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	f383 8811 	msr	BASEPRI, r3
    }
 80139b2:	bf00      	nop
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

    return fb; /* return the pointer to memory block or NULL to the caller */
 80139b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3728      	adds	r7, #40	; 0x28
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	0801851c 	.word	0x0801851c

080139c4 <QF_psInit>:
*
* @usage
* The following example shows the typical initialization sequence of QF:
* @include qf_main.c
*/
void QF_psInit(QSubscrList * const subscrSto, enum_t const maxSignal) {
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
    QF_subscrList_   = subscrSto;
 80139ce:	4a08      	ldr	r2, [pc, #32]	; (80139f0 <QF_psInit+0x2c>)
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6013      	str	r3, [r2, #0]
    QF_maxPubSignal_ = maxSignal;
 80139d4:	4a07      	ldr	r2, [pc, #28]	; (80139f4 <QF_psInit+0x30>)
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	6013      	str	r3, [r2, #0]

    /* zero the subscriber list, so that the framework can start correctly
    * even if the startup code fails to clear the uninitialized data
    * (as is required by the C Standard).
    */
    QF_bzero(subscrSto, (uint_fast16_t)maxSignal * sizeof(QSubscrList));
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	4619      	mov	r1, r3
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f7ff f85d 	bl	8012aa0 <QF_bzero>
}
 80139e6:	bf00      	nop
 80139e8:	3708      	adds	r7, #8
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	2000a908 	.word	0x2000a908
 80139f4:	2000a90c 	.word	0x2000a90c

080139f8 <QActive_subscribe>:
* @include qf_subscribe.c
*
* @sa
* QF_publish_(), QActive_unsubscribe(), and QActive_unsubscribeAll()
*/
void QActive_subscribe(QActive const * const me, enum_t const sig) {
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
    uint_fast8_t p = (uint_fast8_t)me->prio;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8013a08:	60fb      	str	r3, [r7, #12]
    QF_CRIT_STAT_

    Q_REQUIRE_ID(300, ((enum_t)Q_USER_SIG <= sig)
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	2b03      	cmp	r3, #3
 8013a0e:	dd11      	ble.n	8013a34 <QActive_subscribe+0x3c>
 8013a10:	4b17      	ldr	r3, [pc, #92]	; (8013a70 <QActive_subscribe+0x78>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	683a      	ldr	r2, [r7, #0]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	da0c      	bge.n	8013a34 <QActive_subscribe+0x3c>
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d009      	beq.n	8013a34 <QActive_subscribe+0x3c>
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2b20      	cmp	r3, #32
 8013a24:	d806      	bhi.n	8013a34 <QActive_subscribe+0x3c>
 8013a26:	4a13      	ldr	r2, [pc, #76]	; (8013a74 <QActive_subscribe+0x7c>)
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d004      	beq.n	8013a3e <QActive_subscribe+0x46>
 8013a34:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8013a38:	480f      	ldr	r0, [pc, #60]	; (8013a78 <QActive_subscribe+0x80>)
 8013a3a:	f7ed f851 	bl	8000ae0 <Q_onAssert>
              && (sig < QF_maxPubSignal_)
              && (0U < p) && (p <= QF_MAX_ACTIVE)
              && (QF_active_[p] == me));

    QF_CRIT_E_();
 8013a3e:	f7f3 ffc7 	bl	80079d0 <vPortEnterCritical>
        QS_SIG_PRE_(sig);  /* the signal of this event */
        QS_OBJ_PRE_(me);   /* this active object */
    QS_END_NOCRIT_PRE_()

    /* set the priority bit */
    QPSet_insert(&QF_PTR_AT_(QF_subscrList_, sig), p);
 8013a42:	4b0e      	ldr	r3, [pc, #56]	; (8013a7c <QActive_subscribe+0x84>)
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	4413      	add	r3, r2
 8013a4c:	6819      	ldr	r1, [r3, #0]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	3b01      	subs	r3, #1
 8013a52:	2201      	movs	r2, #1
 8013a54:	409a      	lsls	r2, r3
 8013a56:	4b09      	ldr	r3, [pc, #36]	; (8013a7c <QActive_subscribe+0x84>)
 8013a58:	6818      	ldr	r0, [r3, #0]
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	009b      	lsls	r3, r3, #2
 8013a5e:	4403      	add	r3, r0
 8013a60:	430a      	orrs	r2, r1
 8013a62:	601a      	str	r2, [r3, #0]

    QF_CRIT_X_();
 8013a64:	f7f3 ffe8 	bl	8007a38 <vPortExitCritical>
}
 8013a68:	bf00      	nop
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	2000a90c 	.word	0x2000a90c
 8013a74:	2000a844 	.word	0x2000a844
 8013a78:	08018524 	.word	0x08018524
 8013a7c:	2000a908 	.word	0x2000a908

08013a80 <QActive_ctor>:
* @param[in]     initial  pointer to the event to be dispatched to the MSM
*
* @note  Must be called only __once__ before QMSM_INIT().
* @sa QMsm_ctor() and QHsm_ctor()
*/
void QActive_ctor(QActive * const me, QStateHandler initial) {
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8013a8a:	2174      	movs	r1, #116	; 0x74
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff f807 	bl	8012aa0 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6839      	ldr	r1, [r7, #0]
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7fe fd9c 	bl	80125d4 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	4a03      	ldr	r2, [pc, #12]	; (8013aac <QActive_ctor+0x2c>)
 8013aa0:	601a      	str	r2, [r3, #0]
}
 8013aa2:	bf00      	nop
 8013aa4:	3708      	adds	r7, #8
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}
 8013aaa:	bf00      	nop
 8013aac:	0801852c 	.word	0x0801852c

08013ab0 <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b085      	sub	sp, #20
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	60f8      	str	r0, [r7, #12]
 8013ab8:	60b9      	str	r1, [r7, #8]
 8013aba:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	68ba      	ldr	r2, [r7, #8]
 8013ac6:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	b2da      	uxtb	r2, r3
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d005      	beq.n	8013ae2 <QEQueue_init+0x32>
        me->head = 0U;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	b2da      	uxtb	r2, r3
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	7adb      	ldrb	r3, [r3, #11]
 8013af2:	b2da      	uxtb	r2, r3
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	731a      	strb	r2, [r3, #12]
}
 8013af8:	bf00      	nop
 8013afa:	3714      	adds	r7, #20
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <QTimeEvt_ctorX>:
* object **before** arming the Time Event. The ideal place for initializing
* the time event(s) associated with a given AO is the AO's constructor.
*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint_fast8_t tickRate)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	607a      	str	r2, [r7, #4]
 8013b10:	603b      	str	r3, [r7, #0]
    /** @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig >= (enum_t)Q_USER_SIG)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2b03      	cmp	r3, #3
 8013b16:	dd02      	ble.n	8013b1e <QTimeEvt_ctorX+0x1a>
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d004      	beq.n	8013b28 <QTimeEvt_ctorX+0x24>
 8013b1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8013b22:	480f      	ldr	r0, [pc, #60]	; (8013b60 <QTimeEvt_ctorX+0x5c>)
 8013b24:	f7ec ffdc 	bl	8000ae0 <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2200      	movs	r2, #0
 8013b32:	819a      	strh	r2, [r3, #12]
    me->interval  = 0U;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2200      	movs	r2, #0
 8013b38:	81da      	strh	r2, [r3, #14]
    me->super.sig = (QSignal)sig;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	68ba      	ldr	r2, [r7, #8]
 8013b46:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	b2da      	uxtb	r2, r3
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	70da      	strb	r2, [r3, #3]
}
 8013b56:	bf00      	nop
 8013b58:	3710      	adds	r7, #16
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	08018540 	.word	0x08018540

08013b64 <QTimeEvt_armX>:
* machine of an active object:
* @include qf_state.c
*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	460b      	mov	r3, r1
 8013b6e:	807b      	strh	r3, [r7, #2]
 8013b70:	4613      	mov	r3, r2
 8013b72:	803b      	strh	r3, [r7, #0]
    uint_fast8_t tickRate = ((uint_fast8_t)me->super.refCtr_ & TE_TICK_RATE);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	78db      	ldrb	r3, [r3, #3]
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	f003 030f 	and.w	r3, r3, #15
 8013b7e:	60fb      	str	r3, [r7, #12]
    QTimeEvtCtr ctr = me->ctr;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	899b      	ldrh	r3, [r3, #12]
 8013b84:	817b      	strh	r3, [r7, #10]
    QF_CRIT_STAT_

    /** @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d00c      	beq.n	8013ba8 <QTimeEvt_armX+0x44>
 8013b8e:	897b      	ldrh	r3, [r7, #10]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d109      	bne.n	8013ba8 <QTimeEvt_armX+0x44>
 8013b94:	887b      	ldrh	r3, [r7, #2]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d006      	beq.n	8013ba8 <QTimeEvt_armX+0x44>
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d103      	bne.n	8013ba8 <QTimeEvt_armX+0x44>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	881b      	ldrh	r3, [r3, #0]
 8013ba4:	2b03      	cmp	r3, #3
 8013ba6:	d804      	bhi.n	8013bb2 <QTimeEvt_armX+0x4e>
 8013ba8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013bac:	4816      	ldr	r0, [pc, #88]	; (8013c08 <QTimeEvt_armX+0xa4>)
 8013bae:	f7ec ff97 	bl	8000ae0 <Q_onAssert>
                 && (me->super.sig >= (QSignal)Q_USER_SIG));
#ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
#endif

    QF_CRIT_E_();
 8013bb2:	f7f3 ff0d 	bl	80079d0 <vPortEnterCritical>
    me->ctr = nTicks;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	887a      	ldrh	r2, [r7, #2]
 8013bba:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	883a      	ldrh	r2, [r7, #0]
 8013bc0:	81da      	strh	r2, [r3, #14]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in the QF_tickX() function.
    */
    if ((me->super.refCtr_ & TE_IS_LINKED) == 0U) {
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	78db      	ldrb	r3, [r3, #3]
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	b25b      	sxtb	r3, r3
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	db16      	blt.n	8013bfc <QTimeEvt_armX+0x98>
        me->super.refCtr_ |= TE_IS_LINKED; /* mark as linked */
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	78db      	ldrb	r3, [r3, #3]
 8013bd2:	b2db      	uxtb	r3, r3
 8013bd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013bd8:	b2da      	uxtb	r2, r3
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QF_tickX()
        * function.
        */
        me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8013bde:	4a0b      	ldr	r2, [pc, #44]	; (8013c0c <QTimeEvt_armX+0xa8>)
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	011b      	lsls	r3, r3, #4
 8013be4:	4413      	add	r3, r2
 8013be6:	3308      	adds	r3, #8
 8013be8:	681a      	ldr	r2, [r3, #0]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	605a      	str	r2, [r3, #4]
        QF_timeEvtHead_[tickRate].act = me;
 8013bee:	4a07      	ldr	r2, [pc, #28]	; (8013c0c <QTimeEvt_armX+0xa8>)
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	011b      	lsls	r3, r3, #4
 8013bf4:	4413      	add	r3, r2
 8013bf6:	3308      	adds	r3, #8
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8013bfc:	f7f3 ff1c 	bl	8007a38 <vPortExitCritical>
}
 8013c00:	bf00      	nop
 8013c02:	3710      	adds	r7, #16
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	08018540 	.word	0x08018540
 8013c0c:	2000a910 	.word	0x2000a910

08013c10 <QTimeEvt_disarm>:
* state machine.
*
* @note
* there is no harm in disarming an already disarmed time event
*/
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
#ifdef Q_SPY
    uint_fast8_t const qs_id = ((QActive *)(me->act))->prio;
#endif
    QF_CRIT_STAT_

    QF_CRIT_E_();
 8013c18:	f7f3 feda 	bl	80079d0 <vPortEnterCritical>

    /* is the time event actually armed? */
    if (me->ctr != 0U) {
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	899b      	ldrh	r3, [r3, #12]
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d00d      	beq.n	8013c42 <QTimeEvt_disarm+0x32>
        wasArmed = true;
 8013c26:	2301      	movs	r3, #1
 8013c28:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ |= TE_WAS_DISARMED;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	78db      	ldrb	r3, [r3, #3]
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	70da      	strb	r2, [r3, #3]
            QS_TEC_PRE_(me->ctr);      /* the number of ticks */
            QS_TEC_PRE_(me->interval); /* the interval */
            QS_U8_PRE_(me->super.refCtr_ & TE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

        me->ctr = 0U;  /* schedule removal from the list */
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	819a      	strh	r2, [r3, #12]
 8013c40:	e009      	b.n	8013c56 <QTimeEvt_disarm+0x46>
    }
    else { /* the time event was already disarmed automatically */
        wasArmed = false;
 8013c42:	2300      	movs	r3, #0
 8013c44:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ &= (uint8_t)(~TE_WAS_DISARMED & 0xFFU);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	78db      	ldrb	r3, [r3, #3]
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c50:	b2da      	uxtb	r2, r3
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	70da      	strb	r2, [r3, #3]
            QS_OBJ_PRE_(me->act);      /* the target AO */
            QS_U8_PRE_(me->super.refCtr_ & TE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

    }
    QF_CRIT_X_();
 8013c56:	f7f3 feef 	bl	8007a38 <vPortExitCritical>
    return wasArmed;
 8013c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3710      	adds	r7, #16
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <LwipDriver_ctor>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::LwipDriver} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::LwipDriver} ......................................................*/
/*.${AOs::LwipDriver::ctor} ................................................*/
void LwipDriver_ctor(LwipDriver * const me) {
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, (QStateHandler)&LwipDriver_initial);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4908      	ldr	r1, [pc, #32]	; (8013c90 <LwipDriver_ctor+0x2c>)
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff ff05 	bl	8013a80 <QActive_ctor>
    QTimeEvt_ctorX(&me->te,&me->super,LWIP_PROCESS_SIG,0U);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8013c7c:	6879      	ldr	r1, [r7, #4]
 8013c7e:	2300      	movs	r3, #0
 8013c80:	2204      	movs	r2, #4
 8013c82:	f7ff ff3f 	bl	8013b04 <QTimeEvt_ctorX>
}
 8013c86:	bf00      	nop
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	08013c95 	.word	0x08013c95

08013c94 <LwipDriver_initial>:

/*.${AOs::LwipDriver::SM} ..................................................*/
QState LwipDriver_initial(LwipDriver * const me, void const * const par) {
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
    /*.${AOs::LwipDriver::SM::initial} */
//	MX_LWIP_Init();
    err_t PosErr=0;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	73fb      	strb	r3, [r7, #15]
    me->upcb = udp_new();
 8013ca2:	f7fc f989 	bl	800ffb8 <udp_new>
 8013ca6:	4602      	mov	r2, r0
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    IP4_ADDR(&me->upcb->remote_ip,REMOTEIP_1,REMOTEIP_2,REMOTEIP_3,REMOTEIP_4);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013cb4:	4a1c      	ldr	r2, [pc, #112]	; (8013d28 <LwipDriver_initial+0x94>)
 8013cb6:	605a      	str	r2, [r3, #4]
    me->upcb->remote_port = UDP_SERVER_PORT;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013cbe:	2208      	movs	r2, #8
 8013cc0:	829a      	strh	r2, [r3, #20]
    IP4_ADDR(&me->upcb->local_ip,LOCALIP_1,LOCALIP_2,LOCALIP_3,LOCALIP_4);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013cc8:	4a18      	ldr	r2, [pc, #96]	; (8013d2c <LwipDriver_initial+0x98>)
 8013cca:	601a      	str	r2, [r3, #0]
    me->upcb->local_port = UDP_CLIENT_PORT;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013cd2:	2207      	movs	r2, #7
 8013cd4:	825a      	strh	r2, [r3, #18]
    PosErr = udp_bind(me->upcb, &me->upcb->local_ip,me->upcb->local_port);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013cea:	8a5b      	ldrh	r3, [r3, #18]
 8013cec:	461a      	mov	r2, r3
 8013cee:	f7fc f8bb 	bl	800fe68 <udp_bind>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	73fb      	strb	r3, [r7, #15]
    if(PosErr == 0){
 8013cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d107      	bne.n	8013d0e <LwipDriver_initial+0x7a>
      udp_recv(me->upcb, &udp_rx_callback, NULL);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013d04:	2200      	movs	r2, #0
 8013d06:	490a      	ldr	r1, [pc, #40]	; (8013d30 <LwipDriver_initial+0x9c>)
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7fc f935 	bl	800ff78 <udp_recv>
    }

    QActive_subscribe((QActive *)me, LWIP_TX_SIG);
 8013d0e:	2106      	movs	r1, #6
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7ff fe71 	bl	80139f8 <QActive_subscribe>

    return Q_TRAN(&LwipDriver_LwipMngr);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4a06      	ldr	r2, [pc, #24]	; (8013d34 <LwipDriver_initial+0xa0>)
 8013d1a:	609a      	str	r2, [r3, #8]
 8013d1c:	2308      	movs	r3, #8
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3710      	adds	r7, #16
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop
 8013d28:	0100a8c0 	.word	0x0100a8c0
 8013d2c:	0a00a8c0 	.word	0x0a00a8c0
 8013d30:	08013e0d 	.word	0x08013e0d
 8013d34:	08013d39 	.word	0x08013d39

08013d38 <LwipDriver_LwipMngr>:
/*.${AOs::LwipDriver::SM::LwipMngr} ........................................*/
QState LwipDriver_LwipMngr(LwipDriver * const me, QEvt const * const e) {
 8013d38:	b590      	push	{r4, r7, lr}
 8013d3a:	b08b      	sub	sp, #44	; 0x2c
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	881b      	ldrh	r3, [r3, #0]
 8013d46:	3b01      	subs	r3, #1
 8013d48:	2b05      	cmp	r3, #5
 8013d4a:	d851      	bhi.n	8013df0 <LwipDriver_LwipMngr+0xb8>
 8013d4c:	a201      	add	r2, pc, #4	; (adr r2, 8013d54 <LwipDriver_LwipMngr+0x1c>)
 8013d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d52:	bf00      	nop
 8013d54:	08013d6d 	.word	0x08013d6d
 8013d58:	08013d81 	.word	0x08013d81
 8013d5c:	08013df1 	.word	0x08013df1
 8013d60:	08013d91 	.word	0x08013d91
 8013d64:	08013d9b 	.word	0x08013d9b
 8013d68:	08013db1 	.word	0x08013db1
        /*.${AOs::LwipDriver::SM::LwipMngr} */
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->te, OS_TICKS_PER_SEC/2, OS_TICKS_PER_SEC/2);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	3374      	adds	r3, #116	; 0x74
 8013d70:	2201      	movs	r2, #1
 8013d72:	2101      	movs	r1, #1
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7ff fef5 	bl	8013b64 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 8013d7a:	2303      	movs	r3, #3
 8013d7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013d7e:	e03d      	b.n	8013dfc <LwipDriver_LwipMngr+0xc4>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr} */
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->te);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	3374      	adds	r3, #116	; 0x74
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7ff ff43 	bl	8013c10 <QTimeEvt_disarm>
            status_ = Q_HANDLED();
 8013d8a:	2303      	movs	r3, #3
 8013d8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013d8e:	e035      	b.n	8013dfc <LwipDriver_LwipMngr+0xc4>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr::LWIP_PROCESS} */
        case LWIP_PROCESS_SIG: {
            MX_LWIP_Process();
 8013d90:	f7f4 f918 	bl	8007fc4 <MX_LWIP_Process>
            status_ = Q_HANDLED();
 8013d94:	2303      	movs	r3, #3
 8013d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013d98:	e030      	b.n	8013dfc <LwipDriver_LwipMngr+0xc4>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr::LWIP_RX} */
        case LWIP_RX_SIG: {
            char temptext[20];
            strncpy(temptext, ((TextEvt const *)e)->text,Q_DIM(temptext));
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	1d19      	adds	r1, r3, #4
 8013d9e:	f107 030c 	add.w	r3, r7, #12
 8013da2:	2214      	movs	r2, #20
 8013da4:	4618      	mov	r0, r3
 8013da6:	f000 fc2f 	bl	8014608 <strncpy>
            status_ = Q_HANDLED();
 8013daa:	2303      	movs	r3, #3
 8013dac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013dae:	e025      	b.n	8013dfc <LwipDriver_LwipMngr+0xc4>
        }
        /*.${AOs::LwipDriver::SM::LwipMngr::LWIP_TX} */
        case LWIP_TX_SIG: {
            struct pbuf *p = pbuf_new((u8_t *)((TextEvt const *)e)->text,
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	1d1c      	adds	r4, r3, #4
                                  strlen(((TextEvt const *)e)->text) + 1);
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	3304      	adds	r3, #4
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7ec fa29 	bl	8000210 <strlen>
 8013dbe:	4603      	mov	r3, r0
            struct pbuf *p = pbuf_new((u8_t *)((TextEvt const *)e)->text,
 8013dc0:	b29b      	uxth	r3, r3
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	4620      	mov	r0, r4
 8013dca:	f000 f882 	bl	8013ed2 <pbuf_new>
 8013dce:	6238      	str	r0, [r7, #32]
            if (p != (struct pbuf *)0) {
 8013dd0:	6a3b      	ldr	r3, [r7, #32]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d009      	beq.n	8013dea <LwipDriver_LwipMngr+0xb2>
                udp_send(me->upcb, p);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013ddc:	6a39      	ldr	r1, [r7, #32]
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fb fe58 	bl	800fa94 <udp_send>
                pbuf_free(p);                   /* don't leak the pbuf! */
 8013de4:	6a38      	ldr	r0, [r7, #32]
 8013de6:	f7f5 ff4f 	bl	8009c88 <pbuf_free>
            }
            status_ = Q_HANDLED();
 8013dea:	2303      	movs	r3, #3
 8013dec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013dee:	e005      	b.n	8013dfc <LwipDriver_LwipMngr+0xc4>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	4a05      	ldr	r2, [pc, #20]	; (8013e08 <LwipDriver_LwipMngr+0xd0>)
 8013df4:	609a      	str	r2, [r3, #8]
 8013df6:	2300      	movs	r3, #0
 8013df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013dfa:	bf00      	nop
        }
    }
    return status_;
 8013dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	372c      	adds	r7, #44	; 0x2c
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd90      	pop	{r4, r7, pc}
 8013e06:	bf00      	nop
 8013e08:	080126fd 	.word	0x080126fd

08013e0c <udp_rx_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_rx_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b088      	sub	sp, #32
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	60f8      	str	r0, [r7, #12]
 8013e14:	60b9      	str	r1, [r7, #8]
 8013e16:	607a      	str	r2, [r7, #4]
 8013e18:	603b      	str	r3, [r7, #0]
	BaseType_t LwipTxWoken = pdFALSE;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	617b      	str	r3, [r7, #20]
	TextEvt *Lwipte = Q_NEW(TextEvt, LWIP_TX_SIG);
 8013e1e:	2206      	movs	r2, #6
 8013e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013e24:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 8013e28:	f7ff f81a 	bl	8012e60 <QF_newX_>
 8013e2c:	61f8      	str	r0, [r7, #28]
	snprintf(Lwipte->text,MAX_TEXT_LEN,(char *)p->payload);
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	1d18      	adds	r0, r3, #4
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	461a      	mov	r2, r3
 8013e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013e3c:	f000 fb90 	bl	8014560 <sniprintf>
	QF_PUBLISH_FROM_ISR((QEvt *)Lwipte,&LwipTxWoken,0U);
 8013e40:	f107 0314 	add.w	r3, r7, #20
 8013e44:	4619      	mov	r1, r3
 8013e46:	69f8      	ldr	r0, [r7, #28]
 8013e48:	f7ff fb16 	bl	8013478 <QF_publishFromISR_>
	portEND_SWITCHING_ISR(LwipTxWoken);
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d007      	beq.n	8013e62 <udp_rx_callback+0x56>
 8013e52:	4b19      	ldr	r3, [pc, #100]	; (8013eb8 <udp_rx_callback+0xac>)
 8013e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e58:	601a      	str	r2, [r3, #0]
 8013e5a:	f3bf 8f4f 	dsb	sy
 8013e5e:	f3bf 8f6f 	isb	sy

	BaseType_t UartTxWoken = pdFALSE;
 8013e62:	2300      	movs	r3, #0
 8013e64:	613b      	str	r3, [r7, #16]
	TextEvt *Uartte = Q_NEW(TextEvt, UART_TX_SIG);
 8013e66:	2209      	movs	r2, #9
 8013e68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013e6c:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 8013e70:	f7fe fff6 	bl	8012e60 <QF_newX_>
 8013e74:	61b8      	str	r0, [r7, #24]
	snprintf(Uartte->text,MAX_TEXT_LEN,(char *)p->payload);
 8013e76:	69bb      	ldr	r3, [r7, #24]
 8013e78:	1d18      	adds	r0, r3, #4
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013e84:	f000 fb6c 	bl	8014560 <sniprintf>
	QF_PUBLISH_FROM_ISR((QEvt *)Uartte,&UartTxWoken,0U);
 8013e88:	f107 0310 	add.w	r3, r7, #16
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	69b8      	ldr	r0, [r7, #24]
 8013e90:	f7ff faf2 	bl	8013478 <QF_publishFromISR_>
	portEND_SWITCHING_ISR(UartTxWoken);
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d007      	beq.n	8013eaa <udp_rx_callback+0x9e>
 8013e9a:	4b07      	ldr	r3, [pc, #28]	; (8013eb8 <udp_rx_callback+0xac>)
 8013e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ea0:	601a      	str	r2, [r3, #0]
 8013ea2:	f3bf 8f4f 	dsb	sy
 8013ea6:	f3bf 8f6f 	isb	sy
//
//	  QF_PUBLISH_FROM_ISR((QEvt *)te,&UartRxWoken,0U);
//
//	  portEND_SWITCHING_ISR(UartRxWoken);

  pbuf_free(p); /* don't leak the pbuf! */
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7f5 feec 	bl	8009c88 <pbuf_free>

}
 8013eb0:	bf00      	nop
 8013eb2:	3720      	adds	r7, #32
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	e000ed04 	.word	0xe000ed04

08013ebc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	80fb      	strh	r3, [r7, #6]
  //QActive * const AO_LwipDriver;
  UNUSED(GPIO_Pin);
  //TextEvt *te = Q_NEW(TextEvt, LWIP_TX_SIG);
  //strcpy(te->text, "Butona Basildi\n");
  //QACTIVE_POST(AO_LwipDriver, (QEvt *)te, 0U);
}
 8013ec6:	bf00      	nop
 8013ec8:	370c      	adds	r7, #12
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr

08013ed2 <pbuf_new>:
* care of splitting the data into successive pbuf payloads, if necessary.
*
* The function returns the newly created pbuf or NULL if the pbuf cannot
* be allocated.
*/
struct pbuf *pbuf_new(u8_t *data, u16_t len) {
 8013ed2:	b580      	push	{r7, lr}
 8013ed4:	b084      	sub	sp, #16
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
 8013eda:	460b      	mov	r3, r1
 8013edc:	807b      	strh	r3, [r7, #2]
    struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8013ede:	887b      	ldrh	r3, [r7, #2]
 8013ee0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	2036      	movs	r0, #54	; 0x36
 8013ee8:	f7f5 fbea 	bl	80096c0 <pbuf_alloc>
 8013eec:	60b8      	str	r0, [r7, #8]
    struct pbuf *q = p;
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	60fb      	str	r3, [r7, #12]
    while ((q != (struct pbuf *)0) && (len >= q->len)) {
 8013ef2:	e015      	b.n	8013f20 <pbuf_new+0x4e>
        memcpy(q->payload, data, q->len);         /* copy data into payload */
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	6858      	ldr	r0, [r3, #4]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	895b      	ldrh	r3, [r3, #10]
 8013efc:	461a      	mov	r2, r3
 8013efe:	6879      	ldr	r1, [r7, #4]
 8013f00:	f000 f96c 	bl	80141dc <memcpy>
        len  -= q->len;                                 /* remaining length */
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	895b      	ldrh	r3, [r3, #10]
 8013f08:	887a      	ldrh	r2, [r7, #2]
 8013f0a:	1ad3      	subs	r3, r2, r3
 8013f0c:	807b      	strh	r3, [r7, #2]
        data += q->len;                              /* remainig data chunk */
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	895b      	ldrh	r3, [r3, #10]
 8013f12:	461a      	mov	r2, r3
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	4413      	add	r3, r2
 8013f18:	607b      	str	r3, [r7, #4]
        q = q->next;                                       /* get next pbuf */
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	60fb      	str	r3, [r7, #12]
    while ((q != (struct pbuf *)0) && (len >= q->len)) {
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d004      	beq.n	8013f30 <pbuf_new+0x5e>
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	895b      	ldrh	r3, [r3, #10]
 8013f2a:	887a      	ldrh	r2, [r7, #2]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d2e1      	bcs.n	8013ef4 <pbuf_new+0x22>
    }
    return p;
 8013f30:	68bb      	ldr	r3, [r7, #8]
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3710      	adds	r7, #16
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
	...

08013f3c <UartDriver_ctor>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::UartDriver} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::UartDriver} ......................................................*/
/*.${AOs::UartDriver::ctor} ................................................*/
void UartDriver_ctor(UartDriver * const me) {
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, (QStateHandler)&UartDriver_initial);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	4908      	ldr	r1, [pc, #32]	; (8013f68 <UartDriver_ctor+0x2c>)
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7ff fd99 	bl	8013a80 <QActive_ctor>
    QTimeEvt_ctorX(&me->te,&me->super,UART_PROCESS_SIG,0U);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8013f54:	6879      	ldr	r1, [r7, #4]
 8013f56:	2300      	movs	r3, #0
 8013f58:	2207      	movs	r2, #7
 8013f5a:	f7ff fdd3 	bl	8013b04 <QTimeEvt_ctorX>
}
 8013f5e:	bf00      	nop
 8013f60:	3708      	adds	r7, #8
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	08013f6d 	.word	0x08013f6d

08013f6c <UartDriver_initial>:

/*.${AOs::UartDriver::SM} ..................................................*/
QState UartDriver_initial(UartDriver * const me, void const * const par) {
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
    /*.${AOs::UartDriver::SM::initial} */
    QActive_subscribe((QActive *)me, UART_TX_SIG);
 8013f76:	2109      	movs	r1, #9
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f7ff fd3d 	bl	80139f8 <QActive_subscribe>
    QActive_subscribe((QActive *)me, UART_RX_SIG);
 8013f7e:	2108      	movs	r1, #8
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f7ff fd39 	bl	80139f8 <QActive_subscribe>

    return Q_TRAN(&UartDriver_UartMngr);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4a03      	ldr	r2, [pc, #12]	; (8013f98 <UartDriver_initial+0x2c>)
 8013f8a:	609a      	str	r2, [r3, #8]
 8013f8c:	2308      	movs	r3, #8
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3708      	adds	r7, #8
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	08013f9d 	.word	0x08013f9d

08013f9c <UartDriver_UartMngr>:
/*.${AOs::UartDriver::SM::UartMngr} ........................................*/
QState UartDriver_UartMngr(UartDriver * const me, QEvt const * const e) {
 8013f9c:	b5b0      	push	{r4, r5, r7, lr}
 8013f9e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8013fa2:	af00      	add	r7, sp, #0
 8013fa4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8013fa8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8013fac:	6018      	str	r0, [r3, #0]
 8013fae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8013fb2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013fb6:	6019      	str	r1, [r3, #0]
    QState status_;
    switch (e->sig) {
 8013fb8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8013fbc:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	881b      	ldrh	r3, [r3, #0]
 8013fc4:	3b01      	subs	r3, #1
 8013fc6:	2b08      	cmp	r3, #8
 8013fc8:	d87b      	bhi.n	80140c2 <UartDriver_UartMngr+0x126>
 8013fca:	a201      	add	r2, pc, #4	; (adr r2, 8013fd0 <UartDriver_UartMngr+0x34>)
 8013fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd0:	08013ff5 	.word	0x08013ff5
 8013fd4:	08014013 	.word	0x08014013
 8013fd8:	080140c3 	.word	0x080140c3
 8013fdc:	080140c3 	.word	0x080140c3
 8013fe0:	080140c3 	.word	0x080140c3
 8013fe4:	080140c3 	.word	0x080140c3
 8013fe8:	0801402d 	.word	0x0801402d
 8013fec:	0801405b 	.word	0x0801405b
 8013ff0:	08014095 	.word	0x08014095
        /*.${AOs::UartDriver::SM::UartMngr} */
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->te, OS_TICKS_PER_SEC/2, OS_TICKS_PER_SEC/2);
 8013ff4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8013ff8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	3374      	adds	r3, #116	; 0x74
 8014000:	220a      	movs	r2, #10
 8014002:	210a      	movs	r1, #10
 8014004:	4618      	mov	r0, r3
 8014006:	f7ff fdad 	bl	8013b64 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 801400a:	2303      	movs	r3, #3
 801400c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
            break;
 8014010:	e062      	b.n	80140d8 <UartDriver_UartMngr+0x13c>
        }
        /*.${AOs::UartDriver::SM::UartMngr} */
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->te);
 8014012:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8014016:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	3374      	adds	r3, #116	; 0x74
 801401e:	4618      	mov	r0, r3
 8014020:	f7ff fdf6 	bl	8013c10 <QTimeEvt_disarm>
            status_ = Q_HANDLED();
 8014024:	2303      	movs	r3, #3
 8014026:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
            break;
 801402a:	e055      	b.n	80140d8 <UartDriver_UartMngr+0x13c>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_PROCESS} */
        case UART_PROCESS_SIG: {
            __NOP();
 801402c:	bf00      	nop
            char temptext[20] = "MerhabaNasilsin\r\n";
 801402e:	4b2e      	ldr	r3, [pc, #184]	; (80140e8 <UartDriver_UartMngr+0x14c>)
 8014030:	f207 4404 	addw	r4, r7, #1028	; 0x404
 8014034:	461d      	mov	r5, r3
 8014036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801403a:	682b      	ldr	r3, [r5, #0]
 801403c:	8023      	strh	r3, [r4, #0]
 801403e:	2300      	movs	r3, #0
 8014040:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
//            strncpy(temptext, ((TextEvt const *)e)->text,Q_DIM(temptext));
            HAL_UART_Transmit(&huart3,(uint8_t *)temptext,sizeof(temptext),10);
 8014044:	f207 4104 	addw	r1, r7, #1028	; 0x404
 8014048:	230a      	movs	r3, #10
 801404a:	2214      	movs	r2, #20
 801404c:	4827      	ldr	r0, [pc, #156]	; (80140ec <UartDriver_UartMngr+0x150>)
 801404e:	f7f0 ffa0 	bl	8004f92 <HAL_UART_Transmit>
            status_ = Q_HANDLED();
 8014052:	2303      	movs	r3, #3
 8014054:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
            break;
 8014058:	e03e      	b.n	80140d8 <UartDriver_UartMngr+0x13c>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_RX} */
        case UART_RX_SIG: {
            static uint16_t receive_num=0;
            receive_num++;
 801405a:	4b25      	ldr	r3, [pc, #148]	; (80140f0 <UartDriver_UartMngr+0x154>)
 801405c:	881b      	ldrh	r3, [r3, #0]
 801405e:	3301      	adds	r3, #1
 8014060:	b29a      	uxth	r2, r3
 8014062:	4b23      	ldr	r3, [pc, #140]	; (80140f0 <UartDriver_UartMngr+0x154>)
 8014064:	801a      	strh	r2, [r3, #0]
            char temptext[20];
            strncpy(temptext, ((TextEvt const *)e)->text,Q_DIM(temptext));
 8014066:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 801406a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	1d19      	adds	r1, r3, #4
 8014072:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8014076:	2214      	movs	r2, #20
 8014078:	4618      	mov	r0, r3
 801407a:	f000 fac5 	bl	8014608 <strncpy>
            HAL_UART_Transmit(&huart3,(uint8_t *)temptext,sizeof(temptext),10);
 801407e:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8014082:	230a      	movs	r3, #10
 8014084:	2214      	movs	r2, #20
 8014086:	4819      	ldr	r0, [pc, #100]	; (80140ec <UartDriver_UartMngr+0x150>)
 8014088:	f7f0 ff83 	bl	8004f92 <HAL_UART_Transmit>
            status_ = Q_HANDLED();
 801408c:	2303      	movs	r3, #3
 801408e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
            break;
 8014092:	e021      	b.n	80140d8 <UartDriver_UartMngr+0x13c>
        }
        /*.${AOs::UartDriver::SM::UartMngr::UART_TX} */
        case UART_TX_SIG: {
            char temptext[MAX_TEXT_LEN];
            uint16_t size=0;
 8014094:	2300      	movs	r3, #0
 8014096:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
            size = sprintf(temptext,((TextEvt const *)e)->text);
 801409a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 801409e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	1d1a      	adds	r2, r3, #4
 80140a6:	f107 0308 	add.w	r3, r7, #8
 80140aa:	4611      	mov	r1, r2
 80140ac:	4618      	mov	r0, r3
 80140ae:	f000 fa8b 	bl	80145c8 <siprintf>
 80140b2:	4603      	mov	r3, r0
 80140b4:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
            __NOP();
 80140b8:	bf00      	nop
            status_ = Q_HANDLED();
 80140ba:	2303      	movs	r3, #3
 80140bc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
            break;
 80140c0:	e00a      	b.n	80140d8 <UartDriver_UartMngr+0x13c>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80140c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80140c6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4a09      	ldr	r2, [pc, #36]	; (80140f4 <UartDriver_UartMngr+0x158>)
 80140ce:	609a      	str	r2, [r3, #8]
 80140d0:	2300      	movs	r3, #0
 80140d2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
            break;
 80140d6:	bf00      	nop
        }
    }
    return status_;
 80140d8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
}
 80140dc:	4618      	mov	r0, r3
 80140de:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bdb0      	pop	{r4, r5, r7, pc}
 80140e6:	bf00      	nop
 80140e8:	080183ac 	.word	0x080183ac
 80140ec:	20000348 	.word	0x20000348
 80140f0:	2000a920 	.word	0x2000a920
 80140f4:	080126fd 	.word	0x080126fd

080140f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

 // QActive * const AO_UartDriver;
  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8014100:	2101      	movs	r1, #1
 8014102:	4819      	ldr	r0, [pc, #100]	; (8014168 <HAL_UART_RxCpltCallback+0x70>)
 8014104:	f7ef fa7d 	bl	8003602 <HAL_GPIO_TogglePin>

  BaseType_t UartRxWoken = pdFALSE;
 8014108:	2300      	movs	r3, #0
 801410a:	60bb      	str	r3, [r7, #8]
  static uint8_t const l_TickHook = 0U;
  static uint16_t receive_num=0;
  receive_num++;
 801410c:	4b17      	ldr	r3, [pc, #92]	; (801416c <HAL_UART_RxCpltCallback+0x74>)
 801410e:	881b      	ldrh	r3, [r3, #0]
 8014110:	3301      	adds	r3, #1
 8014112:	b29a      	uxth	r2, r3
 8014114:	4b15      	ldr	r3, [pc, #84]	; (801416c <HAL_UART_RxCpltCallback+0x74>)
 8014116:	801a      	strh	r2, [r3, #0]

  TextEvt *te = Q_NEW_FROM_ISR(TextEvt, UART_RX_SIG);
 8014118:	2208      	movs	r2, #8
 801411a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801411e:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 8014122:	f7ff fadd 	bl	80136e0 <QF_newXFromISR_>
 8014126:	60f8      	str	r0, [r7, #12]
  strncpy(te->text,(char *)huart->pRxBuffPtr,Q_DIM(te->text));
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	1d18      	adds	r0, r3, #4
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014134:	4619      	mov	r1, r3
 8014136:	f000 fa67 	bl	8014608 <strncpy>

  QF_PUBLISH_FROM_ISR((QEvt *)te,&UartRxWoken,0U);
 801413a:	f107 0308 	add.w	r3, r7, #8
 801413e:	4619      	mov	r1, r3
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f7ff f999 	bl	8013478 <QF_publishFromISR_>

  portEND_SWITCHING_ISR(UartRxWoken);
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d007      	beq.n	801415c <HAL_UART_RxCpltCallback+0x64>
 801414c:	4b08      	ldr	r3, [pc, #32]	; (8014170 <HAL_UART_RxCpltCallback+0x78>)
 801414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	f3bf 8f4f 	dsb	sy
 8014158:	f3bf 8f6f 	isb	sy

  __NOP();
 801415c:	bf00      	nop
}
 801415e:	bf00      	nop
 8014160:	3710      	adds	r7, #16
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	40020400 	.word	0x40020400
 801416c:	2000a922 	.word	0x2000a922
 8014170:	e000ed04 	.word	0xe000ed04

08014174 <__libc_init_array>:
 8014174:	b570      	push	{r4, r5, r6, lr}
 8014176:	4d0d      	ldr	r5, [pc, #52]	; (80141ac <__libc_init_array+0x38>)
 8014178:	4c0d      	ldr	r4, [pc, #52]	; (80141b0 <__libc_init_array+0x3c>)
 801417a:	1b64      	subs	r4, r4, r5
 801417c:	10a4      	asrs	r4, r4, #2
 801417e:	2600      	movs	r6, #0
 8014180:	42a6      	cmp	r6, r4
 8014182:	d109      	bne.n	8014198 <__libc_init_array+0x24>
 8014184:	4d0b      	ldr	r5, [pc, #44]	; (80141b4 <__libc_init_array+0x40>)
 8014186:	4c0c      	ldr	r4, [pc, #48]	; (80141b8 <__libc_init_array+0x44>)
 8014188:	f001 fc00 	bl	801598c <_init>
 801418c:	1b64      	subs	r4, r4, r5
 801418e:	10a4      	asrs	r4, r4, #2
 8014190:	2600      	movs	r6, #0
 8014192:	42a6      	cmp	r6, r4
 8014194:	d105      	bne.n	80141a2 <__libc_init_array+0x2e>
 8014196:	bd70      	pop	{r4, r5, r6, pc}
 8014198:	f855 3b04 	ldr.w	r3, [r5], #4
 801419c:	4798      	blx	r3
 801419e:	3601      	adds	r6, #1
 80141a0:	e7ee      	b.n	8014180 <__libc_init_array+0xc>
 80141a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80141a6:	4798      	blx	r3
 80141a8:	3601      	adds	r6, #1
 80141aa:	e7f2      	b.n	8014192 <__libc_init_array+0x1e>
 80141ac:	08018698 	.word	0x08018698
 80141b0:	08018698 	.word	0x08018698
 80141b4:	08018698 	.word	0x08018698
 80141b8:	0801869c 	.word	0x0801869c

080141bc <memcmp>:
 80141bc:	b510      	push	{r4, lr}
 80141be:	3901      	subs	r1, #1
 80141c0:	4402      	add	r2, r0
 80141c2:	4290      	cmp	r0, r2
 80141c4:	d101      	bne.n	80141ca <memcmp+0xe>
 80141c6:	2000      	movs	r0, #0
 80141c8:	e005      	b.n	80141d6 <memcmp+0x1a>
 80141ca:	7803      	ldrb	r3, [r0, #0]
 80141cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80141d0:	42a3      	cmp	r3, r4
 80141d2:	d001      	beq.n	80141d8 <memcmp+0x1c>
 80141d4:	1b18      	subs	r0, r3, r4
 80141d6:	bd10      	pop	{r4, pc}
 80141d8:	3001      	adds	r0, #1
 80141da:	e7f2      	b.n	80141c2 <memcmp+0x6>

080141dc <memcpy>:
 80141dc:	440a      	add	r2, r1
 80141de:	4291      	cmp	r1, r2
 80141e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80141e4:	d100      	bne.n	80141e8 <memcpy+0xc>
 80141e6:	4770      	bx	lr
 80141e8:	b510      	push	{r4, lr}
 80141ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141f2:	4291      	cmp	r1, r2
 80141f4:	d1f9      	bne.n	80141ea <memcpy+0xe>
 80141f6:	bd10      	pop	{r4, pc}

080141f8 <memmove>:
 80141f8:	4288      	cmp	r0, r1
 80141fa:	b510      	push	{r4, lr}
 80141fc:	eb01 0402 	add.w	r4, r1, r2
 8014200:	d902      	bls.n	8014208 <memmove+0x10>
 8014202:	4284      	cmp	r4, r0
 8014204:	4623      	mov	r3, r4
 8014206:	d807      	bhi.n	8014218 <memmove+0x20>
 8014208:	1e43      	subs	r3, r0, #1
 801420a:	42a1      	cmp	r1, r4
 801420c:	d008      	beq.n	8014220 <memmove+0x28>
 801420e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014216:	e7f8      	b.n	801420a <memmove+0x12>
 8014218:	4402      	add	r2, r0
 801421a:	4601      	mov	r1, r0
 801421c:	428a      	cmp	r2, r1
 801421e:	d100      	bne.n	8014222 <memmove+0x2a>
 8014220:	bd10      	pop	{r4, pc}
 8014222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801422a:	e7f7      	b.n	801421c <memmove+0x24>

0801422c <memset>:
 801422c:	4402      	add	r2, r0
 801422e:	4603      	mov	r3, r0
 8014230:	4293      	cmp	r3, r2
 8014232:	d100      	bne.n	8014236 <memset+0xa>
 8014234:	4770      	bx	lr
 8014236:	f803 1b01 	strb.w	r1, [r3], #1
 801423a:	e7f9      	b.n	8014230 <memset+0x4>

0801423c <iprintf>:
 801423c:	b40f      	push	{r0, r1, r2, r3}
 801423e:	4b0a      	ldr	r3, [pc, #40]	; (8014268 <iprintf+0x2c>)
 8014240:	b513      	push	{r0, r1, r4, lr}
 8014242:	681c      	ldr	r4, [r3, #0]
 8014244:	b124      	cbz	r4, 8014250 <iprintf+0x14>
 8014246:	69a3      	ldr	r3, [r4, #24]
 8014248:	b913      	cbnz	r3, 8014250 <iprintf+0x14>
 801424a:	4620      	mov	r0, r4
 801424c:	f000 fbe8 	bl	8014a20 <__sinit>
 8014250:	ab05      	add	r3, sp, #20
 8014252:	9a04      	ldr	r2, [sp, #16]
 8014254:	68a1      	ldr	r1, [r4, #8]
 8014256:	9301      	str	r3, [sp, #4]
 8014258:	4620      	mov	r0, r4
 801425a:	f000 ff67 	bl	801512c <_vfiprintf_r>
 801425e:	b002      	add	sp, #8
 8014260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014264:	b004      	add	sp, #16
 8014266:	4770      	bx	lr
 8014268:	20000028 	.word	0x20000028

0801426c <_puts_r>:
 801426c:	b570      	push	{r4, r5, r6, lr}
 801426e:	460e      	mov	r6, r1
 8014270:	4605      	mov	r5, r0
 8014272:	b118      	cbz	r0, 801427c <_puts_r+0x10>
 8014274:	6983      	ldr	r3, [r0, #24]
 8014276:	b90b      	cbnz	r3, 801427c <_puts_r+0x10>
 8014278:	f000 fbd2 	bl	8014a20 <__sinit>
 801427c:	69ab      	ldr	r3, [r5, #24]
 801427e:	68ac      	ldr	r4, [r5, #8]
 8014280:	b913      	cbnz	r3, 8014288 <_puts_r+0x1c>
 8014282:	4628      	mov	r0, r5
 8014284:	f000 fbcc 	bl	8014a20 <__sinit>
 8014288:	4b2c      	ldr	r3, [pc, #176]	; (801433c <_puts_r+0xd0>)
 801428a:	429c      	cmp	r4, r3
 801428c:	d120      	bne.n	80142d0 <_puts_r+0x64>
 801428e:	686c      	ldr	r4, [r5, #4]
 8014290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014292:	07db      	lsls	r3, r3, #31
 8014294:	d405      	bmi.n	80142a2 <_puts_r+0x36>
 8014296:	89a3      	ldrh	r3, [r4, #12]
 8014298:	0598      	lsls	r0, r3, #22
 801429a:	d402      	bmi.n	80142a2 <_puts_r+0x36>
 801429c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801429e:	f000 fc6f 	bl	8014b80 <__retarget_lock_acquire_recursive>
 80142a2:	89a3      	ldrh	r3, [r4, #12]
 80142a4:	0719      	lsls	r1, r3, #28
 80142a6:	d51d      	bpl.n	80142e4 <_puts_r+0x78>
 80142a8:	6923      	ldr	r3, [r4, #16]
 80142aa:	b1db      	cbz	r3, 80142e4 <_puts_r+0x78>
 80142ac:	3e01      	subs	r6, #1
 80142ae:	68a3      	ldr	r3, [r4, #8]
 80142b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80142b4:	3b01      	subs	r3, #1
 80142b6:	60a3      	str	r3, [r4, #8]
 80142b8:	bb39      	cbnz	r1, 801430a <_puts_r+0x9e>
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	da38      	bge.n	8014330 <_puts_r+0xc4>
 80142be:	4622      	mov	r2, r4
 80142c0:	210a      	movs	r1, #10
 80142c2:	4628      	mov	r0, r5
 80142c4:	f000 f9b4 	bl	8014630 <__swbuf_r>
 80142c8:	3001      	adds	r0, #1
 80142ca:	d011      	beq.n	80142f0 <_puts_r+0x84>
 80142cc:	250a      	movs	r5, #10
 80142ce:	e011      	b.n	80142f4 <_puts_r+0x88>
 80142d0:	4b1b      	ldr	r3, [pc, #108]	; (8014340 <_puts_r+0xd4>)
 80142d2:	429c      	cmp	r4, r3
 80142d4:	d101      	bne.n	80142da <_puts_r+0x6e>
 80142d6:	68ac      	ldr	r4, [r5, #8]
 80142d8:	e7da      	b.n	8014290 <_puts_r+0x24>
 80142da:	4b1a      	ldr	r3, [pc, #104]	; (8014344 <_puts_r+0xd8>)
 80142dc:	429c      	cmp	r4, r3
 80142de:	bf08      	it	eq
 80142e0:	68ec      	ldreq	r4, [r5, #12]
 80142e2:	e7d5      	b.n	8014290 <_puts_r+0x24>
 80142e4:	4621      	mov	r1, r4
 80142e6:	4628      	mov	r0, r5
 80142e8:	f000 f9f4 	bl	80146d4 <__swsetup_r>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d0dd      	beq.n	80142ac <_puts_r+0x40>
 80142f0:	f04f 35ff 	mov.w	r5, #4294967295
 80142f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142f6:	07da      	lsls	r2, r3, #31
 80142f8:	d405      	bmi.n	8014306 <_puts_r+0x9a>
 80142fa:	89a3      	ldrh	r3, [r4, #12]
 80142fc:	059b      	lsls	r3, r3, #22
 80142fe:	d402      	bmi.n	8014306 <_puts_r+0x9a>
 8014300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014302:	f000 fc3e 	bl	8014b82 <__retarget_lock_release_recursive>
 8014306:	4628      	mov	r0, r5
 8014308:	bd70      	pop	{r4, r5, r6, pc}
 801430a:	2b00      	cmp	r3, #0
 801430c:	da04      	bge.n	8014318 <_puts_r+0xac>
 801430e:	69a2      	ldr	r2, [r4, #24]
 8014310:	429a      	cmp	r2, r3
 8014312:	dc06      	bgt.n	8014322 <_puts_r+0xb6>
 8014314:	290a      	cmp	r1, #10
 8014316:	d004      	beq.n	8014322 <_puts_r+0xb6>
 8014318:	6823      	ldr	r3, [r4, #0]
 801431a:	1c5a      	adds	r2, r3, #1
 801431c:	6022      	str	r2, [r4, #0]
 801431e:	7019      	strb	r1, [r3, #0]
 8014320:	e7c5      	b.n	80142ae <_puts_r+0x42>
 8014322:	4622      	mov	r2, r4
 8014324:	4628      	mov	r0, r5
 8014326:	f000 f983 	bl	8014630 <__swbuf_r>
 801432a:	3001      	adds	r0, #1
 801432c:	d1bf      	bne.n	80142ae <_puts_r+0x42>
 801432e:	e7df      	b.n	80142f0 <_puts_r+0x84>
 8014330:	6823      	ldr	r3, [r4, #0]
 8014332:	250a      	movs	r5, #10
 8014334:	1c5a      	adds	r2, r3, #1
 8014336:	6022      	str	r2, [r4, #0]
 8014338:	701d      	strb	r5, [r3, #0]
 801433a:	e7db      	b.n	80142f4 <_puts_r+0x88>
 801433c:	0801861c 	.word	0x0801861c
 8014340:	0801863c 	.word	0x0801863c
 8014344:	080185fc 	.word	0x080185fc

08014348 <puts>:
 8014348:	4b02      	ldr	r3, [pc, #8]	; (8014354 <puts+0xc>)
 801434a:	4601      	mov	r1, r0
 801434c:	6818      	ldr	r0, [r3, #0]
 801434e:	f7ff bf8d 	b.w	801426c <_puts_r>
 8014352:	bf00      	nop
 8014354:	20000028 	.word	0x20000028

08014358 <rand>:
 8014358:	4b16      	ldr	r3, [pc, #88]	; (80143b4 <rand+0x5c>)
 801435a:	b510      	push	{r4, lr}
 801435c:	681c      	ldr	r4, [r3, #0]
 801435e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014360:	b9b3      	cbnz	r3, 8014390 <rand+0x38>
 8014362:	2018      	movs	r0, #24
 8014364:	f000 fc74 	bl	8014c50 <malloc>
 8014368:	63a0      	str	r0, [r4, #56]	; 0x38
 801436a:	b928      	cbnz	r0, 8014378 <rand+0x20>
 801436c:	4602      	mov	r2, r0
 801436e:	4b12      	ldr	r3, [pc, #72]	; (80143b8 <rand+0x60>)
 8014370:	4812      	ldr	r0, [pc, #72]	; (80143bc <rand+0x64>)
 8014372:	214e      	movs	r1, #78	; 0x4e
 8014374:	f000 fa1c 	bl	80147b0 <__assert_func>
 8014378:	4a11      	ldr	r2, [pc, #68]	; (80143c0 <rand+0x68>)
 801437a:	4b12      	ldr	r3, [pc, #72]	; (80143c4 <rand+0x6c>)
 801437c:	e9c0 2300 	strd	r2, r3, [r0]
 8014380:	4b11      	ldr	r3, [pc, #68]	; (80143c8 <rand+0x70>)
 8014382:	6083      	str	r3, [r0, #8]
 8014384:	230b      	movs	r3, #11
 8014386:	8183      	strh	r3, [r0, #12]
 8014388:	2201      	movs	r2, #1
 801438a:	2300      	movs	r3, #0
 801438c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014390:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014392:	4a0e      	ldr	r2, [pc, #56]	; (80143cc <rand+0x74>)
 8014394:	6920      	ldr	r0, [r4, #16]
 8014396:	6963      	ldr	r3, [r4, #20]
 8014398:	490d      	ldr	r1, [pc, #52]	; (80143d0 <rand+0x78>)
 801439a:	4342      	muls	r2, r0
 801439c:	fb01 2203 	mla	r2, r1, r3, r2
 80143a0:	fba0 0101 	umull	r0, r1, r0, r1
 80143a4:	1c43      	adds	r3, r0, #1
 80143a6:	eb42 0001 	adc.w	r0, r2, r1
 80143aa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80143ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80143b2:	bd10      	pop	{r4, pc}
 80143b4:	20000028 	.word	0x20000028
 80143b8:	0801854c 	.word	0x0801854c
 80143bc:	08018563 	.word	0x08018563
 80143c0:	abcd330e 	.word	0xabcd330e
 80143c4:	e66d1234 	.word	0xe66d1234
 80143c8:	0005deec 	.word	0x0005deec
 80143cc:	5851f42d 	.word	0x5851f42d
 80143d0:	4c957f2d 	.word	0x4c957f2d

080143d4 <setvbuf>:
 80143d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143d8:	461d      	mov	r5, r3
 80143da:	4b5d      	ldr	r3, [pc, #372]	; (8014550 <setvbuf+0x17c>)
 80143dc:	681f      	ldr	r7, [r3, #0]
 80143de:	4604      	mov	r4, r0
 80143e0:	460e      	mov	r6, r1
 80143e2:	4690      	mov	r8, r2
 80143e4:	b127      	cbz	r7, 80143f0 <setvbuf+0x1c>
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	b913      	cbnz	r3, 80143f0 <setvbuf+0x1c>
 80143ea:	4638      	mov	r0, r7
 80143ec:	f000 fb18 	bl	8014a20 <__sinit>
 80143f0:	4b58      	ldr	r3, [pc, #352]	; (8014554 <setvbuf+0x180>)
 80143f2:	429c      	cmp	r4, r3
 80143f4:	d167      	bne.n	80144c6 <setvbuf+0xf2>
 80143f6:	687c      	ldr	r4, [r7, #4]
 80143f8:	f1b8 0f02 	cmp.w	r8, #2
 80143fc:	d006      	beq.n	801440c <setvbuf+0x38>
 80143fe:	f1b8 0f01 	cmp.w	r8, #1
 8014402:	f200 809f 	bhi.w	8014544 <setvbuf+0x170>
 8014406:	2d00      	cmp	r5, #0
 8014408:	f2c0 809c 	blt.w	8014544 <setvbuf+0x170>
 801440c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801440e:	07db      	lsls	r3, r3, #31
 8014410:	d405      	bmi.n	801441e <setvbuf+0x4a>
 8014412:	89a3      	ldrh	r3, [r4, #12]
 8014414:	0598      	lsls	r0, r3, #22
 8014416:	d402      	bmi.n	801441e <setvbuf+0x4a>
 8014418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801441a:	f000 fbb1 	bl	8014b80 <__retarget_lock_acquire_recursive>
 801441e:	4621      	mov	r1, r4
 8014420:	4638      	mov	r0, r7
 8014422:	f000 fa69 	bl	80148f8 <_fflush_r>
 8014426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014428:	b141      	cbz	r1, 801443c <setvbuf+0x68>
 801442a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801442e:	4299      	cmp	r1, r3
 8014430:	d002      	beq.n	8014438 <setvbuf+0x64>
 8014432:	4638      	mov	r0, r7
 8014434:	f000 fc14 	bl	8014c60 <_free_r>
 8014438:	2300      	movs	r3, #0
 801443a:	6363      	str	r3, [r4, #52]	; 0x34
 801443c:	2300      	movs	r3, #0
 801443e:	61a3      	str	r3, [r4, #24]
 8014440:	6063      	str	r3, [r4, #4]
 8014442:	89a3      	ldrh	r3, [r4, #12]
 8014444:	0619      	lsls	r1, r3, #24
 8014446:	d503      	bpl.n	8014450 <setvbuf+0x7c>
 8014448:	6921      	ldr	r1, [r4, #16]
 801444a:	4638      	mov	r0, r7
 801444c:	f000 fc08 	bl	8014c60 <_free_r>
 8014450:	89a3      	ldrh	r3, [r4, #12]
 8014452:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8014456:	f023 0303 	bic.w	r3, r3, #3
 801445a:	f1b8 0f02 	cmp.w	r8, #2
 801445e:	81a3      	strh	r3, [r4, #12]
 8014460:	d06c      	beq.n	801453c <setvbuf+0x168>
 8014462:	ab01      	add	r3, sp, #4
 8014464:	466a      	mov	r2, sp
 8014466:	4621      	mov	r1, r4
 8014468:	4638      	mov	r0, r7
 801446a:	f000 fb8b 	bl	8014b84 <__swhatbuf_r>
 801446e:	89a3      	ldrh	r3, [r4, #12]
 8014470:	4318      	orrs	r0, r3
 8014472:	81a0      	strh	r0, [r4, #12]
 8014474:	2d00      	cmp	r5, #0
 8014476:	d130      	bne.n	80144da <setvbuf+0x106>
 8014478:	9d00      	ldr	r5, [sp, #0]
 801447a:	4628      	mov	r0, r5
 801447c:	f000 fbe8 	bl	8014c50 <malloc>
 8014480:	4606      	mov	r6, r0
 8014482:	2800      	cmp	r0, #0
 8014484:	d155      	bne.n	8014532 <setvbuf+0x15e>
 8014486:	f8dd 9000 	ldr.w	r9, [sp]
 801448a:	45a9      	cmp	r9, r5
 801448c:	d14a      	bne.n	8014524 <setvbuf+0x150>
 801448e:	f04f 35ff 	mov.w	r5, #4294967295
 8014492:	2200      	movs	r2, #0
 8014494:	60a2      	str	r2, [r4, #8]
 8014496:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801449a:	6022      	str	r2, [r4, #0]
 801449c:	6122      	str	r2, [r4, #16]
 801449e:	2201      	movs	r2, #1
 80144a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144a4:	6162      	str	r2, [r4, #20]
 80144a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80144a8:	f043 0302 	orr.w	r3, r3, #2
 80144ac:	07d2      	lsls	r2, r2, #31
 80144ae:	81a3      	strh	r3, [r4, #12]
 80144b0:	d405      	bmi.n	80144be <setvbuf+0xea>
 80144b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80144b6:	d102      	bne.n	80144be <setvbuf+0xea>
 80144b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144ba:	f000 fb62 	bl	8014b82 <__retarget_lock_release_recursive>
 80144be:	4628      	mov	r0, r5
 80144c0:	b003      	add	sp, #12
 80144c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c6:	4b24      	ldr	r3, [pc, #144]	; (8014558 <setvbuf+0x184>)
 80144c8:	429c      	cmp	r4, r3
 80144ca:	d101      	bne.n	80144d0 <setvbuf+0xfc>
 80144cc:	68bc      	ldr	r4, [r7, #8]
 80144ce:	e793      	b.n	80143f8 <setvbuf+0x24>
 80144d0:	4b22      	ldr	r3, [pc, #136]	; (801455c <setvbuf+0x188>)
 80144d2:	429c      	cmp	r4, r3
 80144d4:	bf08      	it	eq
 80144d6:	68fc      	ldreq	r4, [r7, #12]
 80144d8:	e78e      	b.n	80143f8 <setvbuf+0x24>
 80144da:	2e00      	cmp	r6, #0
 80144dc:	d0cd      	beq.n	801447a <setvbuf+0xa6>
 80144de:	69bb      	ldr	r3, [r7, #24]
 80144e0:	b913      	cbnz	r3, 80144e8 <setvbuf+0x114>
 80144e2:	4638      	mov	r0, r7
 80144e4:	f000 fa9c 	bl	8014a20 <__sinit>
 80144e8:	f1b8 0f01 	cmp.w	r8, #1
 80144ec:	bf08      	it	eq
 80144ee:	89a3      	ldrheq	r3, [r4, #12]
 80144f0:	6026      	str	r6, [r4, #0]
 80144f2:	bf04      	itt	eq
 80144f4:	f043 0301 	orreq.w	r3, r3, #1
 80144f8:	81a3      	strheq	r3, [r4, #12]
 80144fa:	89a2      	ldrh	r2, [r4, #12]
 80144fc:	f012 0308 	ands.w	r3, r2, #8
 8014500:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8014504:	d01c      	beq.n	8014540 <setvbuf+0x16c>
 8014506:	07d3      	lsls	r3, r2, #31
 8014508:	bf41      	itttt	mi
 801450a:	2300      	movmi	r3, #0
 801450c:	426d      	negmi	r5, r5
 801450e:	60a3      	strmi	r3, [r4, #8]
 8014510:	61a5      	strmi	r5, [r4, #24]
 8014512:	bf58      	it	pl
 8014514:	60a5      	strpl	r5, [r4, #8]
 8014516:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8014518:	f015 0501 	ands.w	r5, r5, #1
 801451c:	d115      	bne.n	801454a <setvbuf+0x176>
 801451e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8014522:	e7c8      	b.n	80144b6 <setvbuf+0xe2>
 8014524:	4648      	mov	r0, r9
 8014526:	f000 fb93 	bl	8014c50 <malloc>
 801452a:	4606      	mov	r6, r0
 801452c:	2800      	cmp	r0, #0
 801452e:	d0ae      	beq.n	801448e <setvbuf+0xba>
 8014530:	464d      	mov	r5, r9
 8014532:	89a3      	ldrh	r3, [r4, #12]
 8014534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014538:	81a3      	strh	r3, [r4, #12]
 801453a:	e7d0      	b.n	80144de <setvbuf+0x10a>
 801453c:	2500      	movs	r5, #0
 801453e:	e7a8      	b.n	8014492 <setvbuf+0xbe>
 8014540:	60a3      	str	r3, [r4, #8]
 8014542:	e7e8      	b.n	8014516 <setvbuf+0x142>
 8014544:	f04f 35ff 	mov.w	r5, #4294967295
 8014548:	e7b9      	b.n	80144be <setvbuf+0xea>
 801454a:	2500      	movs	r5, #0
 801454c:	e7b7      	b.n	80144be <setvbuf+0xea>
 801454e:	bf00      	nop
 8014550:	20000028 	.word	0x20000028
 8014554:	0801861c 	.word	0x0801861c
 8014558:	0801863c 	.word	0x0801863c
 801455c:	080185fc 	.word	0x080185fc

08014560 <sniprintf>:
 8014560:	b40c      	push	{r2, r3}
 8014562:	b530      	push	{r4, r5, lr}
 8014564:	4b17      	ldr	r3, [pc, #92]	; (80145c4 <sniprintf+0x64>)
 8014566:	1e0c      	subs	r4, r1, #0
 8014568:	681d      	ldr	r5, [r3, #0]
 801456a:	b09d      	sub	sp, #116	; 0x74
 801456c:	da08      	bge.n	8014580 <sniprintf+0x20>
 801456e:	238b      	movs	r3, #139	; 0x8b
 8014570:	602b      	str	r3, [r5, #0]
 8014572:	f04f 30ff 	mov.w	r0, #4294967295
 8014576:	b01d      	add	sp, #116	; 0x74
 8014578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801457c:	b002      	add	sp, #8
 801457e:	4770      	bx	lr
 8014580:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014584:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014588:	bf14      	ite	ne
 801458a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801458e:	4623      	moveq	r3, r4
 8014590:	9304      	str	r3, [sp, #16]
 8014592:	9307      	str	r3, [sp, #28]
 8014594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014598:	9002      	str	r0, [sp, #8]
 801459a:	9006      	str	r0, [sp, #24]
 801459c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80145a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80145a2:	ab21      	add	r3, sp, #132	; 0x84
 80145a4:	a902      	add	r1, sp, #8
 80145a6:	4628      	mov	r0, r5
 80145a8:	9301      	str	r3, [sp, #4]
 80145aa:	f000 fc95 	bl	8014ed8 <_svfiprintf_r>
 80145ae:	1c43      	adds	r3, r0, #1
 80145b0:	bfbc      	itt	lt
 80145b2:	238b      	movlt	r3, #139	; 0x8b
 80145b4:	602b      	strlt	r3, [r5, #0]
 80145b6:	2c00      	cmp	r4, #0
 80145b8:	d0dd      	beq.n	8014576 <sniprintf+0x16>
 80145ba:	9b02      	ldr	r3, [sp, #8]
 80145bc:	2200      	movs	r2, #0
 80145be:	701a      	strb	r2, [r3, #0]
 80145c0:	e7d9      	b.n	8014576 <sniprintf+0x16>
 80145c2:	bf00      	nop
 80145c4:	20000028 	.word	0x20000028

080145c8 <siprintf>:
 80145c8:	b40e      	push	{r1, r2, r3}
 80145ca:	b500      	push	{lr}
 80145cc:	b09c      	sub	sp, #112	; 0x70
 80145ce:	ab1d      	add	r3, sp, #116	; 0x74
 80145d0:	9002      	str	r0, [sp, #8]
 80145d2:	9006      	str	r0, [sp, #24]
 80145d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80145d8:	4809      	ldr	r0, [pc, #36]	; (8014600 <siprintf+0x38>)
 80145da:	9107      	str	r1, [sp, #28]
 80145dc:	9104      	str	r1, [sp, #16]
 80145de:	4909      	ldr	r1, [pc, #36]	; (8014604 <siprintf+0x3c>)
 80145e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80145e4:	9105      	str	r1, [sp, #20]
 80145e6:	6800      	ldr	r0, [r0, #0]
 80145e8:	9301      	str	r3, [sp, #4]
 80145ea:	a902      	add	r1, sp, #8
 80145ec:	f000 fc74 	bl	8014ed8 <_svfiprintf_r>
 80145f0:	9b02      	ldr	r3, [sp, #8]
 80145f2:	2200      	movs	r2, #0
 80145f4:	701a      	strb	r2, [r3, #0]
 80145f6:	b01c      	add	sp, #112	; 0x70
 80145f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80145fc:	b003      	add	sp, #12
 80145fe:	4770      	bx	lr
 8014600:	20000028 	.word	0x20000028
 8014604:	ffff0208 	.word	0xffff0208

08014608 <strncpy>:
 8014608:	b510      	push	{r4, lr}
 801460a:	3901      	subs	r1, #1
 801460c:	4603      	mov	r3, r0
 801460e:	b132      	cbz	r2, 801461e <strncpy+0x16>
 8014610:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014614:	f803 4b01 	strb.w	r4, [r3], #1
 8014618:	3a01      	subs	r2, #1
 801461a:	2c00      	cmp	r4, #0
 801461c:	d1f7      	bne.n	801460e <strncpy+0x6>
 801461e:	441a      	add	r2, r3
 8014620:	2100      	movs	r1, #0
 8014622:	4293      	cmp	r3, r2
 8014624:	d100      	bne.n	8014628 <strncpy+0x20>
 8014626:	bd10      	pop	{r4, pc}
 8014628:	f803 1b01 	strb.w	r1, [r3], #1
 801462c:	e7f9      	b.n	8014622 <strncpy+0x1a>
	...

08014630 <__swbuf_r>:
 8014630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014632:	460e      	mov	r6, r1
 8014634:	4614      	mov	r4, r2
 8014636:	4605      	mov	r5, r0
 8014638:	b118      	cbz	r0, 8014642 <__swbuf_r+0x12>
 801463a:	6983      	ldr	r3, [r0, #24]
 801463c:	b90b      	cbnz	r3, 8014642 <__swbuf_r+0x12>
 801463e:	f000 f9ef 	bl	8014a20 <__sinit>
 8014642:	4b21      	ldr	r3, [pc, #132]	; (80146c8 <__swbuf_r+0x98>)
 8014644:	429c      	cmp	r4, r3
 8014646:	d12b      	bne.n	80146a0 <__swbuf_r+0x70>
 8014648:	686c      	ldr	r4, [r5, #4]
 801464a:	69a3      	ldr	r3, [r4, #24]
 801464c:	60a3      	str	r3, [r4, #8]
 801464e:	89a3      	ldrh	r3, [r4, #12]
 8014650:	071a      	lsls	r2, r3, #28
 8014652:	d52f      	bpl.n	80146b4 <__swbuf_r+0x84>
 8014654:	6923      	ldr	r3, [r4, #16]
 8014656:	b36b      	cbz	r3, 80146b4 <__swbuf_r+0x84>
 8014658:	6923      	ldr	r3, [r4, #16]
 801465a:	6820      	ldr	r0, [r4, #0]
 801465c:	1ac0      	subs	r0, r0, r3
 801465e:	6963      	ldr	r3, [r4, #20]
 8014660:	b2f6      	uxtb	r6, r6
 8014662:	4283      	cmp	r3, r0
 8014664:	4637      	mov	r7, r6
 8014666:	dc04      	bgt.n	8014672 <__swbuf_r+0x42>
 8014668:	4621      	mov	r1, r4
 801466a:	4628      	mov	r0, r5
 801466c:	f000 f944 	bl	80148f8 <_fflush_r>
 8014670:	bb30      	cbnz	r0, 80146c0 <__swbuf_r+0x90>
 8014672:	68a3      	ldr	r3, [r4, #8]
 8014674:	3b01      	subs	r3, #1
 8014676:	60a3      	str	r3, [r4, #8]
 8014678:	6823      	ldr	r3, [r4, #0]
 801467a:	1c5a      	adds	r2, r3, #1
 801467c:	6022      	str	r2, [r4, #0]
 801467e:	701e      	strb	r6, [r3, #0]
 8014680:	6963      	ldr	r3, [r4, #20]
 8014682:	3001      	adds	r0, #1
 8014684:	4283      	cmp	r3, r0
 8014686:	d004      	beq.n	8014692 <__swbuf_r+0x62>
 8014688:	89a3      	ldrh	r3, [r4, #12]
 801468a:	07db      	lsls	r3, r3, #31
 801468c:	d506      	bpl.n	801469c <__swbuf_r+0x6c>
 801468e:	2e0a      	cmp	r6, #10
 8014690:	d104      	bne.n	801469c <__swbuf_r+0x6c>
 8014692:	4621      	mov	r1, r4
 8014694:	4628      	mov	r0, r5
 8014696:	f000 f92f 	bl	80148f8 <_fflush_r>
 801469a:	b988      	cbnz	r0, 80146c0 <__swbuf_r+0x90>
 801469c:	4638      	mov	r0, r7
 801469e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146a0:	4b0a      	ldr	r3, [pc, #40]	; (80146cc <__swbuf_r+0x9c>)
 80146a2:	429c      	cmp	r4, r3
 80146a4:	d101      	bne.n	80146aa <__swbuf_r+0x7a>
 80146a6:	68ac      	ldr	r4, [r5, #8]
 80146a8:	e7cf      	b.n	801464a <__swbuf_r+0x1a>
 80146aa:	4b09      	ldr	r3, [pc, #36]	; (80146d0 <__swbuf_r+0xa0>)
 80146ac:	429c      	cmp	r4, r3
 80146ae:	bf08      	it	eq
 80146b0:	68ec      	ldreq	r4, [r5, #12]
 80146b2:	e7ca      	b.n	801464a <__swbuf_r+0x1a>
 80146b4:	4621      	mov	r1, r4
 80146b6:	4628      	mov	r0, r5
 80146b8:	f000 f80c 	bl	80146d4 <__swsetup_r>
 80146bc:	2800      	cmp	r0, #0
 80146be:	d0cb      	beq.n	8014658 <__swbuf_r+0x28>
 80146c0:	f04f 37ff 	mov.w	r7, #4294967295
 80146c4:	e7ea      	b.n	801469c <__swbuf_r+0x6c>
 80146c6:	bf00      	nop
 80146c8:	0801861c 	.word	0x0801861c
 80146cc:	0801863c 	.word	0x0801863c
 80146d0:	080185fc 	.word	0x080185fc

080146d4 <__swsetup_r>:
 80146d4:	4b32      	ldr	r3, [pc, #200]	; (80147a0 <__swsetup_r+0xcc>)
 80146d6:	b570      	push	{r4, r5, r6, lr}
 80146d8:	681d      	ldr	r5, [r3, #0]
 80146da:	4606      	mov	r6, r0
 80146dc:	460c      	mov	r4, r1
 80146de:	b125      	cbz	r5, 80146ea <__swsetup_r+0x16>
 80146e0:	69ab      	ldr	r3, [r5, #24]
 80146e2:	b913      	cbnz	r3, 80146ea <__swsetup_r+0x16>
 80146e4:	4628      	mov	r0, r5
 80146e6:	f000 f99b 	bl	8014a20 <__sinit>
 80146ea:	4b2e      	ldr	r3, [pc, #184]	; (80147a4 <__swsetup_r+0xd0>)
 80146ec:	429c      	cmp	r4, r3
 80146ee:	d10f      	bne.n	8014710 <__swsetup_r+0x3c>
 80146f0:	686c      	ldr	r4, [r5, #4]
 80146f2:	89a3      	ldrh	r3, [r4, #12]
 80146f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146f8:	0719      	lsls	r1, r3, #28
 80146fa:	d42c      	bmi.n	8014756 <__swsetup_r+0x82>
 80146fc:	06dd      	lsls	r5, r3, #27
 80146fe:	d411      	bmi.n	8014724 <__swsetup_r+0x50>
 8014700:	2309      	movs	r3, #9
 8014702:	6033      	str	r3, [r6, #0]
 8014704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014708:	81a3      	strh	r3, [r4, #12]
 801470a:	f04f 30ff 	mov.w	r0, #4294967295
 801470e:	e03e      	b.n	801478e <__swsetup_r+0xba>
 8014710:	4b25      	ldr	r3, [pc, #148]	; (80147a8 <__swsetup_r+0xd4>)
 8014712:	429c      	cmp	r4, r3
 8014714:	d101      	bne.n	801471a <__swsetup_r+0x46>
 8014716:	68ac      	ldr	r4, [r5, #8]
 8014718:	e7eb      	b.n	80146f2 <__swsetup_r+0x1e>
 801471a:	4b24      	ldr	r3, [pc, #144]	; (80147ac <__swsetup_r+0xd8>)
 801471c:	429c      	cmp	r4, r3
 801471e:	bf08      	it	eq
 8014720:	68ec      	ldreq	r4, [r5, #12]
 8014722:	e7e6      	b.n	80146f2 <__swsetup_r+0x1e>
 8014724:	0758      	lsls	r0, r3, #29
 8014726:	d512      	bpl.n	801474e <__swsetup_r+0x7a>
 8014728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801472a:	b141      	cbz	r1, 801473e <__swsetup_r+0x6a>
 801472c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014730:	4299      	cmp	r1, r3
 8014732:	d002      	beq.n	801473a <__swsetup_r+0x66>
 8014734:	4630      	mov	r0, r6
 8014736:	f000 fa93 	bl	8014c60 <_free_r>
 801473a:	2300      	movs	r3, #0
 801473c:	6363      	str	r3, [r4, #52]	; 0x34
 801473e:	89a3      	ldrh	r3, [r4, #12]
 8014740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014744:	81a3      	strh	r3, [r4, #12]
 8014746:	2300      	movs	r3, #0
 8014748:	6063      	str	r3, [r4, #4]
 801474a:	6923      	ldr	r3, [r4, #16]
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	89a3      	ldrh	r3, [r4, #12]
 8014750:	f043 0308 	orr.w	r3, r3, #8
 8014754:	81a3      	strh	r3, [r4, #12]
 8014756:	6923      	ldr	r3, [r4, #16]
 8014758:	b94b      	cbnz	r3, 801476e <__swsetup_r+0x9a>
 801475a:	89a3      	ldrh	r3, [r4, #12]
 801475c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014764:	d003      	beq.n	801476e <__swsetup_r+0x9a>
 8014766:	4621      	mov	r1, r4
 8014768:	4630      	mov	r0, r6
 801476a:	f000 fa31 	bl	8014bd0 <__smakebuf_r>
 801476e:	89a0      	ldrh	r0, [r4, #12]
 8014770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014774:	f010 0301 	ands.w	r3, r0, #1
 8014778:	d00a      	beq.n	8014790 <__swsetup_r+0xbc>
 801477a:	2300      	movs	r3, #0
 801477c:	60a3      	str	r3, [r4, #8]
 801477e:	6963      	ldr	r3, [r4, #20]
 8014780:	425b      	negs	r3, r3
 8014782:	61a3      	str	r3, [r4, #24]
 8014784:	6923      	ldr	r3, [r4, #16]
 8014786:	b943      	cbnz	r3, 801479a <__swsetup_r+0xc6>
 8014788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801478c:	d1ba      	bne.n	8014704 <__swsetup_r+0x30>
 801478e:	bd70      	pop	{r4, r5, r6, pc}
 8014790:	0781      	lsls	r1, r0, #30
 8014792:	bf58      	it	pl
 8014794:	6963      	ldrpl	r3, [r4, #20]
 8014796:	60a3      	str	r3, [r4, #8]
 8014798:	e7f4      	b.n	8014784 <__swsetup_r+0xb0>
 801479a:	2000      	movs	r0, #0
 801479c:	e7f7      	b.n	801478e <__swsetup_r+0xba>
 801479e:	bf00      	nop
 80147a0:	20000028 	.word	0x20000028
 80147a4:	0801861c 	.word	0x0801861c
 80147a8:	0801863c 	.word	0x0801863c
 80147ac:	080185fc 	.word	0x080185fc

080147b0 <__assert_func>:
 80147b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147b2:	4614      	mov	r4, r2
 80147b4:	461a      	mov	r2, r3
 80147b6:	4b09      	ldr	r3, [pc, #36]	; (80147dc <__assert_func+0x2c>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	4605      	mov	r5, r0
 80147bc:	68d8      	ldr	r0, [r3, #12]
 80147be:	b14c      	cbz	r4, 80147d4 <__assert_func+0x24>
 80147c0:	4b07      	ldr	r3, [pc, #28]	; (80147e0 <__assert_func+0x30>)
 80147c2:	9100      	str	r1, [sp, #0]
 80147c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147c8:	4906      	ldr	r1, [pc, #24]	; (80147e4 <__assert_func+0x34>)
 80147ca:	462b      	mov	r3, r5
 80147cc:	f000 f9a6 	bl	8014b1c <fiprintf>
 80147d0:	f000 ffd6 	bl	8015780 <abort>
 80147d4:	4b04      	ldr	r3, [pc, #16]	; (80147e8 <__assert_func+0x38>)
 80147d6:	461c      	mov	r4, r3
 80147d8:	e7f3      	b.n	80147c2 <__assert_func+0x12>
 80147da:	bf00      	nop
 80147dc:	20000028 	.word	0x20000028
 80147e0:	080185be 	.word	0x080185be
 80147e4:	080185cb 	.word	0x080185cb
 80147e8:	080185f9 	.word	0x080185f9

080147ec <__sflush_r>:
 80147ec:	898a      	ldrh	r2, [r1, #12]
 80147ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f2:	4605      	mov	r5, r0
 80147f4:	0710      	lsls	r0, r2, #28
 80147f6:	460c      	mov	r4, r1
 80147f8:	d458      	bmi.n	80148ac <__sflush_r+0xc0>
 80147fa:	684b      	ldr	r3, [r1, #4]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	dc05      	bgt.n	801480c <__sflush_r+0x20>
 8014800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014802:	2b00      	cmp	r3, #0
 8014804:	dc02      	bgt.n	801480c <__sflush_r+0x20>
 8014806:	2000      	movs	r0, #0
 8014808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801480c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801480e:	2e00      	cmp	r6, #0
 8014810:	d0f9      	beq.n	8014806 <__sflush_r+0x1a>
 8014812:	2300      	movs	r3, #0
 8014814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014818:	682f      	ldr	r7, [r5, #0]
 801481a:	602b      	str	r3, [r5, #0]
 801481c:	d032      	beq.n	8014884 <__sflush_r+0x98>
 801481e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014820:	89a3      	ldrh	r3, [r4, #12]
 8014822:	075a      	lsls	r2, r3, #29
 8014824:	d505      	bpl.n	8014832 <__sflush_r+0x46>
 8014826:	6863      	ldr	r3, [r4, #4]
 8014828:	1ac0      	subs	r0, r0, r3
 801482a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801482c:	b10b      	cbz	r3, 8014832 <__sflush_r+0x46>
 801482e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014830:	1ac0      	subs	r0, r0, r3
 8014832:	2300      	movs	r3, #0
 8014834:	4602      	mov	r2, r0
 8014836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014838:	6a21      	ldr	r1, [r4, #32]
 801483a:	4628      	mov	r0, r5
 801483c:	47b0      	blx	r6
 801483e:	1c43      	adds	r3, r0, #1
 8014840:	89a3      	ldrh	r3, [r4, #12]
 8014842:	d106      	bne.n	8014852 <__sflush_r+0x66>
 8014844:	6829      	ldr	r1, [r5, #0]
 8014846:	291d      	cmp	r1, #29
 8014848:	d82c      	bhi.n	80148a4 <__sflush_r+0xb8>
 801484a:	4a2a      	ldr	r2, [pc, #168]	; (80148f4 <__sflush_r+0x108>)
 801484c:	40ca      	lsrs	r2, r1
 801484e:	07d6      	lsls	r6, r2, #31
 8014850:	d528      	bpl.n	80148a4 <__sflush_r+0xb8>
 8014852:	2200      	movs	r2, #0
 8014854:	6062      	str	r2, [r4, #4]
 8014856:	04d9      	lsls	r1, r3, #19
 8014858:	6922      	ldr	r2, [r4, #16]
 801485a:	6022      	str	r2, [r4, #0]
 801485c:	d504      	bpl.n	8014868 <__sflush_r+0x7c>
 801485e:	1c42      	adds	r2, r0, #1
 8014860:	d101      	bne.n	8014866 <__sflush_r+0x7a>
 8014862:	682b      	ldr	r3, [r5, #0]
 8014864:	b903      	cbnz	r3, 8014868 <__sflush_r+0x7c>
 8014866:	6560      	str	r0, [r4, #84]	; 0x54
 8014868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801486a:	602f      	str	r7, [r5, #0]
 801486c:	2900      	cmp	r1, #0
 801486e:	d0ca      	beq.n	8014806 <__sflush_r+0x1a>
 8014870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014874:	4299      	cmp	r1, r3
 8014876:	d002      	beq.n	801487e <__sflush_r+0x92>
 8014878:	4628      	mov	r0, r5
 801487a:	f000 f9f1 	bl	8014c60 <_free_r>
 801487e:	2000      	movs	r0, #0
 8014880:	6360      	str	r0, [r4, #52]	; 0x34
 8014882:	e7c1      	b.n	8014808 <__sflush_r+0x1c>
 8014884:	6a21      	ldr	r1, [r4, #32]
 8014886:	2301      	movs	r3, #1
 8014888:	4628      	mov	r0, r5
 801488a:	47b0      	blx	r6
 801488c:	1c41      	adds	r1, r0, #1
 801488e:	d1c7      	bne.n	8014820 <__sflush_r+0x34>
 8014890:	682b      	ldr	r3, [r5, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d0c4      	beq.n	8014820 <__sflush_r+0x34>
 8014896:	2b1d      	cmp	r3, #29
 8014898:	d001      	beq.n	801489e <__sflush_r+0xb2>
 801489a:	2b16      	cmp	r3, #22
 801489c:	d101      	bne.n	80148a2 <__sflush_r+0xb6>
 801489e:	602f      	str	r7, [r5, #0]
 80148a0:	e7b1      	b.n	8014806 <__sflush_r+0x1a>
 80148a2:	89a3      	ldrh	r3, [r4, #12]
 80148a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148a8:	81a3      	strh	r3, [r4, #12]
 80148aa:	e7ad      	b.n	8014808 <__sflush_r+0x1c>
 80148ac:	690f      	ldr	r7, [r1, #16]
 80148ae:	2f00      	cmp	r7, #0
 80148b0:	d0a9      	beq.n	8014806 <__sflush_r+0x1a>
 80148b2:	0793      	lsls	r3, r2, #30
 80148b4:	680e      	ldr	r6, [r1, #0]
 80148b6:	bf08      	it	eq
 80148b8:	694b      	ldreq	r3, [r1, #20]
 80148ba:	600f      	str	r7, [r1, #0]
 80148bc:	bf18      	it	ne
 80148be:	2300      	movne	r3, #0
 80148c0:	eba6 0807 	sub.w	r8, r6, r7
 80148c4:	608b      	str	r3, [r1, #8]
 80148c6:	f1b8 0f00 	cmp.w	r8, #0
 80148ca:	dd9c      	ble.n	8014806 <__sflush_r+0x1a>
 80148cc:	6a21      	ldr	r1, [r4, #32]
 80148ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80148d0:	4643      	mov	r3, r8
 80148d2:	463a      	mov	r2, r7
 80148d4:	4628      	mov	r0, r5
 80148d6:	47b0      	blx	r6
 80148d8:	2800      	cmp	r0, #0
 80148da:	dc06      	bgt.n	80148ea <__sflush_r+0xfe>
 80148dc:	89a3      	ldrh	r3, [r4, #12]
 80148de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148e2:	81a3      	strh	r3, [r4, #12]
 80148e4:	f04f 30ff 	mov.w	r0, #4294967295
 80148e8:	e78e      	b.n	8014808 <__sflush_r+0x1c>
 80148ea:	4407      	add	r7, r0
 80148ec:	eba8 0800 	sub.w	r8, r8, r0
 80148f0:	e7e9      	b.n	80148c6 <__sflush_r+0xda>
 80148f2:	bf00      	nop
 80148f4:	20400001 	.word	0x20400001

080148f8 <_fflush_r>:
 80148f8:	b538      	push	{r3, r4, r5, lr}
 80148fa:	690b      	ldr	r3, [r1, #16]
 80148fc:	4605      	mov	r5, r0
 80148fe:	460c      	mov	r4, r1
 8014900:	b913      	cbnz	r3, 8014908 <_fflush_r+0x10>
 8014902:	2500      	movs	r5, #0
 8014904:	4628      	mov	r0, r5
 8014906:	bd38      	pop	{r3, r4, r5, pc}
 8014908:	b118      	cbz	r0, 8014912 <_fflush_r+0x1a>
 801490a:	6983      	ldr	r3, [r0, #24]
 801490c:	b90b      	cbnz	r3, 8014912 <_fflush_r+0x1a>
 801490e:	f000 f887 	bl	8014a20 <__sinit>
 8014912:	4b14      	ldr	r3, [pc, #80]	; (8014964 <_fflush_r+0x6c>)
 8014914:	429c      	cmp	r4, r3
 8014916:	d11b      	bne.n	8014950 <_fflush_r+0x58>
 8014918:	686c      	ldr	r4, [r5, #4]
 801491a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d0ef      	beq.n	8014902 <_fflush_r+0xa>
 8014922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014924:	07d0      	lsls	r0, r2, #31
 8014926:	d404      	bmi.n	8014932 <_fflush_r+0x3a>
 8014928:	0599      	lsls	r1, r3, #22
 801492a:	d402      	bmi.n	8014932 <_fflush_r+0x3a>
 801492c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801492e:	f000 f927 	bl	8014b80 <__retarget_lock_acquire_recursive>
 8014932:	4628      	mov	r0, r5
 8014934:	4621      	mov	r1, r4
 8014936:	f7ff ff59 	bl	80147ec <__sflush_r>
 801493a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801493c:	07da      	lsls	r2, r3, #31
 801493e:	4605      	mov	r5, r0
 8014940:	d4e0      	bmi.n	8014904 <_fflush_r+0xc>
 8014942:	89a3      	ldrh	r3, [r4, #12]
 8014944:	059b      	lsls	r3, r3, #22
 8014946:	d4dd      	bmi.n	8014904 <_fflush_r+0xc>
 8014948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801494a:	f000 f91a 	bl	8014b82 <__retarget_lock_release_recursive>
 801494e:	e7d9      	b.n	8014904 <_fflush_r+0xc>
 8014950:	4b05      	ldr	r3, [pc, #20]	; (8014968 <_fflush_r+0x70>)
 8014952:	429c      	cmp	r4, r3
 8014954:	d101      	bne.n	801495a <_fflush_r+0x62>
 8014956:	68ac      	ldr	r4, [r5, #8]
 8014958:	e7df      	b.n	801491a <_fflush_r+0x22>
 801495a:	4b04      	ldr	r3, [pc, #16]	; (801496c <_fflush_r+0x74>)
 801495c:	429c      	cmp	r4, r3
 801495e:	bf08      	it	eq
 8014960:	68ec      	ldreq	r4, [r5, #12]
 8014962:	e7da      	b.n	801491a <_fflush_r+0x22>
 8014964:	0801861c 	.word	0x0801861c
 8014968:	0801863c 	.word	0x0801863c
 801496c:	080185fc 	.word	0x080185fc

08014970 <std>:
 8014970:	2300      	movs	r3, #0
 8014972:	b510      	push	{r4, lr}
 8014974:	4604      	mov	r4, r0
 8014976:	e9c0 3300 	strd	r3, r3, [r0]
 801497a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801497e:	6083      	str	r3, [r0, #8]
 8014980:	8181      	strh	r1, [r0, #12]
 8014982:	6643      	str	r3, [r0, #100]	; 0x64
 8014984:	81c2      	strh	r2, [r0, #14]
 8014986:	6183      	str	r3, [r0, #24]
 8014988:	4619      	mov	r1, r3
 801498a:	2208      	movs	r2, #8
 801498c:	305c      	adds	r0, #92	; 0x5c
 801498e:	f7ff fc4d 	bl	801422c <memset>
 8014992:	4b05      	ldr	r3, [pc, #20]	; (80149a8 <std+0x38>)
 8014994:	6263      	str	r3, [r4, #36]	; 0x24
 8014996:	4b05      	ldr	r3, [pc, #20]	; (80149ac <std+0x3c>)
 8014998:	62a3      	str	r3, [r4, #40]	; 0x28
 801499a:	4b05      	ldr	r3, [pc, #20]	; (80149b0 <std+0x40>)
 801499c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801499e:	4b05      	ldr	r3, [pc, #20]	; (80149b4 <std+0x44>)
 80149a0:	6224      	str	r4, [r4, #32]
 80149a2:	6323      	str	r3, [r4, #48]	; 0x30
 80149a4:	bd10      	pop	{r4, pc}
 80149a6:	bf00      	nop
 80149a8:	080156d5 	.word	0x080156d5
 80149ac:	080156f7 	.word	0x080156f7
 80149b0:	0801572f 	.word	0x0801572f
 80149b4:	08015753 	.word	0x08015753

080149b8 <_cleanup_r>:
 80149b8:	4901      	ldr	r1, [pc, #4]	; (80149c0 <_cleanup_r+0x8>)
 80149ba:	f000 b8c1 	b.w	8014b40 <_fwalk_reent>
 80149be:	bf00      	nop
 80149c0:	080148f9 	.word	0x080148f9

080149c4 <__sfmoreglue>:
 80149c4:	b570      	push	{r4, r5, r6, lr}
 80149c6:	2268      	movs	r2, #104	; 0x68
 80149c8:	1e4d      	subs	r5, r1, #1
 80149ca:	4355      	muls	r5, r2
 80149cc:	460e      	mov	r6, r1
 80149ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80149d2:	f000 f9b1 	bl	8014d38 <_malloc_r>
 80149d6:	4604      	mov	r4, r0
 80149d8:	b140      	cbz	r0, 80149ec <__sfmoreglue+0x28>
 80149da:	2100      	movs	r1, #0
 80149dc:	e9c0 1600 	strd	r1, r6, [r0]
 80149e0:	300c      	adds	r0, #12
 80149e2:	60a0      	str	r0, [r4, #8]
 80149e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80149e8:	f7ff fc20 	bl	801422c <memset>
 80149ec:	4620      	mov	r0, r4
 80149ee:	bd70      	pop	{r4, r5, r6, pc}

080149f0 <__sfp_lock_acquire>:
 80149f0:	4801      	ldr	r0, [pc, #4]	; (80149f8 <__sfp_lock_acquire+0x8>)
 80149f2:	f000 b8c5 	b.w	8014b80 <__retarget_lock_acquire_recursive>
 80149f6:	bf00      	nop
 80149f8:	2000a929 	.word	0x2000a929

080149fc <__sfp_lock_release>:
 80149fc:	4801      	ldr	r0, [pc, #4]	; (8014a04 <__sfp_lock_release+0x8>)
 80149fe:	f000 b8c0 	b.w	8014b82 <__retarget_lock_release_recursive>
 8014a02:	bf00      	nop
 8014a04:	2000a929 	.word	0x2000a929

08014a08 <__sinit_lock_acquire>:
 8014a08:	4801      	ldr	r0, [pc, #4]	; (8014a10 <__sinit_lock_acquire+0x8>)
 8014a0a:	f000 b8b9 	b.w	8014b80 <__retarget_lock_acquire_recursive>
 8014a0e:	bf00      	nop
 8014a10:	2000a92a 	.word	0x2000a92a

08014a14 <__sinit_lock_release>:
 8014a14:	4801      	ldr	r0, [pc, #4]	; (8014a1c <__sinit_lock_release+0x8>)
 8014a16:	f000 b8b4 	b.w	8014b82 <__retarget_lock_release_recursive>
 8014a1a:	bf00      	nop
 8014a1c:	2000a92a 	.word	0x2000a92a

08014a20 <__sinit>:
 8014a20:	b510      	push	{r4, lr}
 8014a22:	4604      	mov	r4, r0
 8014a24:	f7ff fff0 	bl	8014a08 <__sinit_lock_acquire>
 8014a28:	69a3      	ldr	r3, [r4, #24]
 8014a2a:	b11b      	cbz	r3, 8014a34 <__sinit+0x14>
 8014a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a30:	f7ff bff0 	b.w	8014a14 <__sinit_lock_release>
 8014a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014a38:	6523      	str	r3, [r4, #80]	; 0x50
 8014a3a:	4b13      	ldr	r3, [pc, #76]	; (8014a88 <__sinit+0x68>)
 8014a3c:	4a13      	ldr	r2, [pc, #76]	; (8014a8c <__sinit+0x6c>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8014a42:	42a3      	cmp	r3, r4
 8014a44:	bf04      	itt	eq
 8014a46:	2301      	moveq	r3, #1
 8014a48:	61a3      	streq	r3, [r4, #24]
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	f000 f820 	bl	8014a90 <__sfp>
 8014a50:	6060      	str	r0, [r4, #4]
 8014a52:	4620      	mov	r0, r4
 8014a54:	f000 f81c 	bl	8014a90 <__sfp>
 8014a58:	60a0      	str	r0, [r4, #8]
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	f000 f818 	bl	8014a90 <__sfp>
 8014a60:	2200      	movs	r2, #0
 8014a62:	60e0      	str	r0, [r4, #12]
 8014a64:	2104      	movs	r1, #4
 8014a66:	6860      	ldr	r0, [r4, #4]
 8014a68:	f7ff ff82 	bl	8014970 <std>
 8014a6c:	68a0      	ldr	r0, [r4, #8]
 8014a6e:	2201      	movs	r2, #1
 8014a70:	2109      	movs	r1, #9
 8014a72:	f7ff ff7d 	bl	8014970 <std>
 8014a76:	68e0      	ldr	r0, [r4, #12]
 8014a78:	2202      	movs	r2, #2
 8014a7a:	2112      	movs	r1, #18
 8014a7c:	f7ff ff78 	bl	8014970 <std>
 8014a80:	2301      	movs	r3, #1
 8014a82:	61a3      	str	r3, [r4, #24]
 8014a84:	e7d2      	b.n	8014a2c <__sinit+0xc>
 8014a86:	bf00      	nop
 8014a88:	08018548 	.word	0x08018548
 8014a8c:	080149b9 	.word	0x080149b9

08014a90 <__sfp>:
 8014a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a92:	4607      	mov	r7, r0
 8014a94:	f7ff ffac 	bl	80149f0 <__sfp_lock_acquire>
 8014a98:	4b1e      	ldr	r3, [pc, #120]	; (8014b14 <__sfp+0x84>)
 8014a9a:	681e      	ldr	r6, [r3, #0]
 8014a9c:	69b3      	ldr	r3, [r6, #24]
 8014a9e:	b913      	cbnz	r3, 8014aa6 <__sfp+0x16>
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	f7ff ffbd 	bl	8014a20 <__sinit>
 8014aa6:	3648      	adds	r6, #72	; 0x48
 8014aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014aac:	3b01      	subs	r3, #1
 8014aae:	d503      	bpl.n	8014ab8 <__sfp+0x28>
 8014ab0:	6833      	ldr	r3, [r6, #0]
 8014ab2:	b30b      	cbz	r3, 8014af8 <__sfp+0x68>
 8014ab4:	6836      	ldr	r6, [r6, #0]
 8014ab6:	e7f7      	b.n	8014aa8 <__sfp+0x18>
 8014ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014abc:	b9d5      	cbnz	r5, 8014af4 <__sfp+0x64>
 8014abe:	4b16      	ldr	r3, [pc, #88]	; (8014b18 <__sfp+0x88>)
 8014ac0:	60e3      	str	r3, [r4, #12]
 8014ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8014ac8:	f000 f859 	bl	8014b7e <__retarget_lock_init_recursive>
 8014acc:	f7ff ff96 	bl	80149fc <__sfp_lock_release>
 8014ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014ad8:	6025      	str	r5, [r4, #0]
 8014ada:	61a5      	str	r5, [r4, #24]
 8014adc:	2208      	movs	r2, #8
 8014ade:	4629      	mov	r1, r5
 8014ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014ae4:	f7ff fba2 	bl	801422c <memset>
 8014ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014af0:	4620      	mov	r0, r4
 8014af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014af4:	3468      	adds	r4, #104	; 0x68
 8014af6:	e7d9      	b.n	8014aac <__sfp+0x1c>
 8014af8:	2104      	movs	r1, #4
 8014afa:	4638      	mov	r0, r7
 8014afc:	f7ff ff62 	bl	80149c4 <__sfmoreglue>
 8014b00:	4604      	mov	r4, r0
 8014b02:	6030      	str	r0, [r6, #0]
 8014b04:	2800      	cmp	r0, #0
 8014b06:	d1d5      	bne.n	8014ab4 <__sfp+0x24>
 8014b08:	f7ff ff78 	bl	80149fc <__sfp_lock_release>
 8014b0c:	230c      	movs	r3, #12
 8014b0e:	603b      	str	r3, [r7, #0]
 8014b10:	e7ee      	b.n	8014af0 <__sfp+0x60>
 8014b12:	bf00      	nop
 8014b14:	08018548 	.word	0x08018548
 8014b18:	ffff0001 	.word	0xffff0001

08014b1c <fiprintf>:
 8014b1c:	b40e      	push	{r1, r2, r3}
 8014b1e:	b503      	push	{r0, r1, lr}
 8014b20:	4601      	mov	r1, r0
 8014b22:	ab03      	add	r3, sp, #12
 8014b24:	4805      	ldr	r0, [pc, #20]	; (8014b3c <fiprintf+0x20>)
 8014b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b2a:	6800      	ldr	r0, [r0, #0]
 8014b2c:	9301      	str	r3, [sp, #4]
 8014b2e:	f000 fafd 	bl	801512c <_vfiprintf_r>
 8014b32:	b002      	add	sp, #8
 8014b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b38:	b003      	add	sp, #12
 8014b3a:	4770      	bx	lr
 8014b3c:	20000028 	.word	0x20000028

08014b40 <_fwalk_reent>:
 8014b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b44:	4606      	mov	r6, r0
 8014b46:	4688      	mov	r8, r1
 8014b48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014b4c:	2700      	movs	r7, #0
 8014b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b52:	f1b9 0901 	subs.w	r9, r9, #1
 8014b56:	d505      	bpl.n	8014b64 <_fwalk_reent+0x24>
 8014b58:	6824      	ldr	r4, [r4, #0]
 8014b5a:	2c00      	cmp	r4, #0
 8014b5c:	d1f7      	bne.n	8014b4e <_fwalk_reent+0xe>
 8014b5e:	4638      	mov	r0, r7
 8014b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b64:	89ab      	ldrh	r3, [r5, #12]
 8014b66:	2b01      	cmp	r3, #1
 8014b68:	d907      	bls.n	8014b7a <_fwalk_reent+0x3a>
 8014b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	d003      	beq.n	8014b7a <_fwalk_reent+0x3a>
 8014b72:	4629      	mov	r1, r5
 8014b74:	4630      	mov	r0, r6
 8014b76:	47c0      	blx	r8
 8014b78:	4307      	orrs	r7, r0
 8014b7a:	3568      	adds	r5, #104	; 0x68
 8014b7c:	e7e9      	b.n	8014b52 <_fwalk_reent+0x12>

08014b7e <__retarget_lock_init_recursive>:
 8014b7e:	4770      	bx	lr

08014b80 <__retarget_lock_acquire_recursive>:
 8014b80:	4770      	bx	lr

08014b82 <__retarget_lock_release_recursive>:
 8014b82:	4770      	bx	lr

08014b84 <__swhatbuf_r>:
 8014b84:	b570      	push	{r4, r5, r6, lr}
 8014b86:	460e      	mov	r6, r1
 8014b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b8c:	2900      	cmp	r1, #0
 8014b8e:	b096      	sub	sp, #88	; 0x58
 8014b90:	4614      	mov	r4, r2
 8014b92:	461d      	mov	r5, r3
 8014b94:	da08      	bge.n	8014ba8 <__swhatbuf_r+0x24>
 8014b96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	602a      	str	r2, [r5, #0]
 8014b9e:	061a      	lsls	r2, r3, #24
 8014ba0:	d410      	bmi.n	8014bc4 <__swhatbuf_r+0x40>
 8014ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ba6:	e00e      	b.n	8014bc6 <__swhatbuf_r+0x42>
 8014ba8:	466a      	mov	r2, sp
 8014baa:	f000 fe01 	bl	80157b0 <_fstat_r>
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	dbf1      	blt.n	8014b96 <__swhatbuf_r+0x12>
 8014bb2:	9a01      	ldr	r2, [sp, #4]
 8014bb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014bb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014bbc:	425a      	negs	r2, r3
 8014bbe:	415a      	adcs	r2, r3
 8014bc0:	602a      	str	r2, [r5, #0]
 8014bc2:	e7ee      	b.n	8014ba2 <__swhatbuf_r+0x1e>
 8014bc4:	2340      	movs	r3, #64	; 0x40
 8014bc6:	2000      	movs	r0, #0
 8014bc8:	6023      	str	r3, [r4, #0]
 8014bca:	b016      	add	sp, #88	; 0x58
 8014bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08014bd0 <__smakebuf_r>:
 8014bd0:	898b      	ldrh	r3, [r1, #12]
 8014bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bd4:	079d      	lsls	r5, r3, #30
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	460c      	mov	r4, r1
 8014bda:	d507      	bpl.n	8014bec <__smakebuf_r+0x1c>
 8014bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014be0:	6023      	str	r3, [r4, #0]
 8014be2:	6123      	str	r3, [r4, #16]
 8014be4:	2301      	movs	r3, #1
 8014be6:	6163      	str	r3, [r4, #20]
 8014be8:	b002      	add	sp, #8
 8014bea:	bd70      	pop	{r4, r5, r6, pc}
 8014bec:	ab01      	add	r3, sp, #4
 8014bee:	466a      	mov	r2, sp
 8014bf0:	f7ff ffc8 	bl	8014b84 <__swhatbuf_r>
 8014bf4:	9900      	ldr	r1, [sp, #0]
 8014bf6:	4605      	mov	r5, r0
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f000 f89d 	bl	8014d38 <_malloc_r>
 8014bfe:	b948      	cbnz	r0, 8014c14 <__smakebuf_r+0x44>
 8014c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c04:	059a      	lsls	r2, r3, #22
 8014c06:	d4ef      	bmi.n	8014be8 <__smakebuf_r+0x18>
 8014c08:	f023 0303 	bic.w	r3, r3, #3
 8014c0c:	f043 0302 	orr.w	r3, r3, #2
 8014c10:	81a3      	strh	r3, [r4, #12]
 8014c12:	e7e3      	b.n	8014bdc <__smakebuf_r+0xc>
 8014c14:	4b0d      	ldr	r3, [pc, #52]	; (8014c4c <__smakebuf_r+0x7c>)
 8014c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c18:	89a3      	ldrh	r3, [r4, #12]
 8014c1a:	6020      	str	r0, [r4, #0]
 8014c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c20:	81a3      	strh	r3, [r4, #12]
 8014c22:	9b00      	ldr	r3, [sp, #0]
 8014c24:	6163      	str	r3, [r4, #20]
 8014c26:	9b01      	ldr	r3, [sp, #4]
 8014c28:	6120      	str	r0, [r4, #16]
 8014c2a:	b15b      	cbz	r3, 8014c44 <__smakebuf_r+0x74>
 8014c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c30:	4630      	mov	r0, r6
 8014c32:	f000 fdcf 	bl	80157d4 <_isatty_r>
 8014c36:	b128      	cbz	r0, 8014c44 <__smakebuf_r+0x74>
 8014c38:	89a3      	ldrh	r3, [r4, #12]
 8014c3a:	f023 0303 	bic.w	r3, r3, #3
 8014c3e:	f043 0301 	orr.w	r3, r3, #1
 8014c42:	81a3      	strh	r3, [r4, #12]
 8014c44:	89a0      	ldrh	r0, [r4, #12]
 8014c46:	4305      	orrs	r5, r0
 8014c48:	81a5      	strh	r5, [r4, #12]
 8014c4a:	e7cd      	b.n	8014be8 <__smakebuf_r+0x18>
 8014c4c:	080149b9 	.word	0x080149b9

08014c50 <malloc>:
 8014c50:	4b02      	ldr	r3, [pc, #8]	; (8014c5c <malloc+0xc>)
 8014c52:	4601      	mov	r1, r0
 8014c54:	6818      	ldr	r0, [r3, #0]
 8014c56:	f000 b86f 	b.w	8014d38 <_malloc_r>
 8014c5a:	bf00      	nop
 8014c5c:	20000028 	.word	0x20000028

08014c60 <_free_r>:
 8014c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c62:	2900      	cmp	r1, #0
 8014c64:	d044      	beq.n	8014cf0 <_free_r+0x90>
 8014c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c6a:	9001      	str	r0, [sp, #4]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8014c72:	bfb8      	it	lt
 8014c74:	18e4      	addlt	r4, r4, r3
 8014c76:	f000 fdcf 	bl	8015818 <__malloc_lock>
 8014c7a:	4a1e      	ldr	r2, [pc, #120]	; (8014cf4 <_free_r+0x94>)
 8014c7c:	9801      	ldr	r0, [sp, #4]
 8014c7e:	6813      	ldr	r3, [r2, #0]
 8014c80:	b933      	cbnz	r3, 8014c90 <_free_r+0x30>
 8014c82:	6063      	str	r3, [r4, #4]
 8014c84:	6014      	str	r4, [r2, #0]
 8014c86:	b003      	add	sp, #12
 8014c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c8c:	f000 bdca 	b.w	8015824 <__malloc_unlock>
 8014c90:	42a3      	cmp	r3, r4
 8014c92:	d908      	bls.n	8014ca6 <_free_r+0x46>
 8014c94:	6825      	ldr	r5, [r4, #0]
 8014c96:	1961      	adds	r1, r4, r5
 8014c98:	428b      	cmp	r3, r1
 8014c9a:	bf01      	itttt	eq
 8014c9c:	6819      	ldreq	r1, [r3, #0]
 8014c9e:	685b      	ldreq	r3, [r3, #4]
 8014ca0:	1949      	addeq	r1, r1, r5
 8014ca2:	6021      	streq	r1, [r4, #0]
 8014ca4:	e7ed      	b.n	8014c82 <_free_r+0x22>
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	b10b      	cbz	r3, 8014cb0 <_free_r+0x50>
 8014cac:	42a3      	cmp	r3, r4
 8014cae:	d9fa      	bls.n	8014ca6 <_free_r+0x46>
 8014cb0:	6811      	ldr	r1, [r2, #0]
 8014cb2:	1855      	adds	r5, r2, r1
 8014cb4:	42a5      	cmp	r5, r4
 8014cb6:	d10b      	bne.n	8014cd0 <_free_r+0x70>
 8014cb8:	6824      	ldr	r4, [r4, #0]
 8014cba:	4421      	add	r1, r4
 8014cbc:	1854      	adds	r4, r2, r1
 8014cbe:	42a3      	cmp	r3, r4
 8014cc0:	6011      	str	r1, [r2, #0]
 8014cc2:	d1e0      	bne.n	8014c86 <_free_r+0x26>
 8014cc4:	681c      	ldr	r4, [r3, #0]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	6053      	str	r3, [r2, #4]
 8014cca:	4421      	add	r1, r4
 8014ccc:	6011      	str	r1, [r2, #0]
 8014cce:	e7da      	b.n	8014c86 <_free_r+0x26>
 8014cd0:	d902      	bls.n	8014cd8 <_free_r+0x78>
 8014cd2:	230c      	movs	r3, #12
 8014cd4:	6003      	str	r3, [r0, #0]
 8014cd6:	e7d6      	b.n	8014c86 <_free_r+0x26>
 8014cd8:	6825      	ldr	r5, [r4, #0]
 8014cda:	1961      	adds	r1, r4, r5
 8014cdc:	428b      	cmp	r3, r1
 8014cde:	bf04      	itt	eq
 8014ce0:	6819      	ldreq	r1, [r3, #0]
 8014ce2:	685b      	ldreq	r3, [r3, #4]
 8014ce4:	6063      	str	r3, [r4, #4]
 8014ce6:	bf04      	itt	eq
 8014ce8:	1949      	addeq	r1, r1, r5
 8014cea:	6021      	streq	r1, [r4, #0]
 8014cec:	6054      	str	r4, [r2, #4]
 8014cee:	e7ca      	b.n	8014c86 <_free_r+0x26>
 8014cf0:	b003      	add	sp, #12
 8014cf2:	bd30      	pop	{r4, r5, pc}
 8014cf4:	2000a92c 	.word	0x2000a92c

08014cf8 <sbrk_aligned>:
 8014cf8:	b570      	push	{r4, r5, r6, lr}
 8014cfa:	4e0e      	ldr	r6, [pc, #56]	; (8014d34 <sbrk_aligned+0x3c>)
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	6831      	ldr	r1, [r6, #0]
 8014d00:	4605      	mov	r5, r0
 8014d02:	b911      	cbnz	r1, 8014d0a <sbrk_aligned+0x12>
 8014d04:	f000 fcd6 	bl	80156b4 <_sbrk_r>
 8014d08:	6030      	str	r0, [r6, #0]
 8014d0a:	4621      	mov	r1, r4
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	f000 fcd1 	bl	80156b4 <_sbrk_r>
 8014d12:	1c43      	adds	r3, r0, #1
 8014d14:	d00a      	beq.n	8014d2c <sbrk_aligned+0x34>
 8014d16:	1cc4      	adds	r4, r0, #3
 8014d18:	f024 0403 	bic.w	r4, r4, #3
 8014d1c:	42a0      	cmp	r0, r4
 8014d1e:	d007      	beq.n	8014d30 <sbrk_aligned+0x38>
 8014d20:	1a21      	subs	r1, r4, r0
 8014d22:	4628      	mov	r0, r5
 8014d24:	f000 fcc6 	bl	80156b4 <_sbrk_r>
 8014d28:	3001      	adds	r0, #1
 8014d2a:	d101      	bne.n	8014d30 <sbrk_aligned+0x38>
 8014d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8014d30:	4620      	mov	r0, r4
 8014d32:	bd70      	pop	{r4, r5, r6, pc}
 8014d34:	2000a930 	.word	0x2000a930

08014d38 <_malloc_r>:
 8014d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d3c:	1ccd      	adds	r5, r1, #3
 8014d3e:	f025 0503 	bic.w	r5, r5, #3
 8014d42:	3508      	adds	r5, #8
 8014d44:	2d0c      	cmp	r5, #12
 8014d46:	bf38      	it	cc
 8014d48:	250c      	movcc	r5, #12
 8014d4a:	2d00      	cmp	r5, #0
 8014d4c:	4607      	mov	r7, r0
 8014d4e:	db01      	blt.n	8014d54 <_malloc_r+0x1c>
 8014d50:	42a9      	cmp	r1, r5
 8014d52:	d905      	bls.n	8014d60 <_malloc_r+0x28>
 8014d54:	230c      	movs	r3, #12
 8014d56:	603b      	str	r3, [r7, #0]
 8014d58:	2600      	movs	r6, #0
 8014d5a:	4630      	mov	r0, r6
 8014d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d60:	4e2e      	ldr	r6, [pc, #184]	; (8014e1c <_malloc_r+0xe4>)
 8014d62:	f000 fd59 	bl	8015818 <__malloc_lock>
 8014d66:	6833      	ldr	r3, [r6, #0]
 8014d68:	461c      	mov	r4, r3
 8014d6a:	bb34      	cbnz	r4, 8014dba <_malloc_r+0x82>
 8014d6c:	4629      	mov	r1, r5
 8014d6e:	4638      	mov	r0, r7
 8014d70:	f7ff ffc2 	bl	8014cf8 <sbrk_aligned>
 8014d74:	1c43      	adds	r3, r0, #1
 8014d76:	4604      	mov	r4, r0
 8014d78:	d14d      	bne.n	8014e16 <_malloc_r+0xde>
 8014d7a:	6834      	ldr	r4, [r6, #0]
 8014d7c:	4626      	mov	r6, r4
 8014d7e:	2e00      	cmp	r6, #0
 8014d80:	d140      	bne.n	8014e04 <_malloc_r+0xcc>
 8014d82:	6823      	ldr	r3, [r4, #0]
 8014d84:	4631      	mov	r1, r6
 8014d86:	4638      	mov	r0, r7
 8014d88:	eb04 0803 	add.w	r8, r4, r3
 8014d8c:	f000 fc92 	bl	80156b4 <_sbrk_r>
 8014d90:	4580      	cmp	r8, r0
 8014d92:	d13a      	bne.n	8014e0a <_malloc_r+0xd2>
 8014d94:	6821      	ldr	r1, [r4, #0]
 8014d96:	3503      	adds	r5, #3
 8014d98:	1a6d      	subs	r5, r5, r1
 8014d9a:	f025 0503 	bic.w	r5, r5, #3
 8014d9e:	3508      	adds	r5, #8
 8014da0:	2d0c      	cmp	r5, #12
 8014da2:	bf38      	it	cc
 8014da4:	250c      	movcc	r5, #12
 8014da6:	4629      	mov	r1, r5
 8014da8:	4638      	mov	r0, r7
 8014daa:	f7ff ffa5 	bl	8014cf8 <sbrk_aligned>
 8014dae:	3001      	adds	r0, #1
 8014db0:	d02b      	beq.n	8014e0a <_malloc_r+0xd2>
 8014db2:	6823      	ldr	r3, [r4, #0]
 8014db4:	442b      	add	r3, r5
 8014db6:	6023      	str	r3, [r4, #0]
 8014db8:	e00e      	b.n	8014dd8 <_malloc_r+0xa0>
 8014dba:	6822      	ldr	r2, [r4, #0]
 8014dbc:	1b52      	subs	r2, r2, r5
 8014dbe:	d41e      	bmi.n	8014dfe <_malloc_r+0xc6>
 8014dc0:	2a0b      	cmp	r2, #11
 8014dc2:	d916      	bls.n	8014df2 <_malloc_r+0xba>
 8014dc4:	1961      	adds	r1, r4, r5
 8014dc6:	42a3      	cmp	r3, r4
 8014dc8:	6025      	str	r5, [r4, #0]
 8014dca:	bf18      	it	ne
 8014dcc:	6059      	strne	r1, [r3, #4]
 8014dce:	6863      	ldr	r3, [r4, #4]
 8014dd0:	bf08      	it	eq
 8014dd2:	6031      	streq	r1, [r6, #0]
 8014dd4:	5162      	str	r2, [r4, r5]
 8014dd6:	604b      	str	r3, [r1, #4]
 8014dd8:	4638      	mov	r0, r7
 8014dda:	f104 060b 	add.w	r6, r4, #11
 8014dde:	f000 fd21 	bl	8015824 <__malloc_unlock>
 8014de2:	f026 0607 	bic.w	r6, r6, #7
 8014de6:	1d23      	adds	r3, r4, #4
 8014de8:	1af2      	subs	r2, r6, r3
 8014dea:	d0b6      	beq.n	8014d5a <_malloc_r+0x22>
 8014dec:	1b9b      	subs	r3, r3, r6
 8014dee:	50a3      	str	r3, [r4, r2]
 8014df0:	e7b3      	b.n	8014d5a <_malloc_r+0x22>
 8014df2:	6862      	ldr	r2, [r4, #4]
 8014df4:	42a3      	cmp	r3, r4
 8014df6:	bf0c      	ite	eq
 8014df8:	6032      	streq	r2, [r6, #0]
 8014dfa:	605a      	strne	r2, [r3, #4]
 8014dfc:	e7ec      	b.n	8014dd8 <_malloc_r+0xa0>
 8014dfe:	4623      	mov	r3, r4
 8014e00:	6864      	ldr	r4, [r4, #4]
 8014e02:	e7b2      	b.n	8014d6a <_malloc_r+0x32>
 8014e04:	4634      	mov	r4, r6
 8014e06:	6876      	ldr	r6, [r6, #4]
 8014e08:	e7b9      	b.n	8014d7e <_malloc_r+0x46>
 8014e0a:	230c      	movs	r3, #12
 8014e0c:	603b      	str	r3, [r7, #0]
 8014e0e:	4638      	mov	r0, r7
 8014e10:	f000 fd08 	bl	8015824 <__malloc_unlock>
 8014e14:	e7a1      	b.n	8014d5a <_malloc_r+0x22>
 8014e16:	6025      	str	r5, [r4, #0]
 8014e18:	e7de      	b.n	8014dd8 <_malloc_r+0xa0>
 8014e1a:	bf00      	nop
 8014e1c:	2000a92c 	.word	0x2000a92c

08014e20 <__ssputs_r>:
 8014e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e24:	688e      	ldr	r6, [r1, #8]
 8014e26:	429e      	cmp	r6, r3
 8014e28:	4682      	mov	sl, r0
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	4690      	mov	r8, r2
 8014e2e:	461f      	mov	r7, r3
 8014e30:	d838      	bhi.n	8014ea4 <__ssputs_r+0x84>
 8014e32:	898a      	ldrh	r2, [r1, #12]
 8014e34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014e38:	d032      	beq.n	8014ea0 <__ssputs_r+0x80>
 8014e3a:	6825      	ldr	r5, [r4, #0]
 8014e3c:	6909      	ldr	r1, [r1, #16]
 8014e3e:	eba5 0901 	sub.w	r9, r5, r1
 8014e42:	6965      	ldr	r5, [r4, #20]
 8014e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014e4c:	3301      	adds	r3, #1
 8014e4e:	444b      	add	r3, r9
 8014e50:	106d      	asrs	r5, r5, #1
 8014e52:	429d      	cmp	r5, r3
 8014e54:	bf38      	it	cc
 8014e56:	461d      	movcc	r5, r3
 8014e58:	0553      	lsls	r3, r2, #21
 8014e5a:	d531      	bpl.n	8014ec0 <__ssputs_r+0xa0>
 8014e5c:	4629      	mov	r1, r5
 8014e5e:	f7ff ff6b 	bl	8014d38 <_malloc_r>
 8014e62:	4606      	mov	r6, r0
 8014e64:	b950      	cbnz	r0, 8014e7c <__ssputs_r+0x5c>
 8014e66:	230c      	movs	r3, #12
 8014e68:	f8ca 3000 	str.w	r3, [sl]
 8014e6c:	89a3      	ldrh	r3, [r4, #12]
 8014e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e72:	81a3      	strh	r3, [r4, #12]
 8014e74:	f04f 30ff 	mov.w	r0, #4294967295
 8014e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e7c:	6921      	ldr	r1, [r4, #16]
 8014e7e:	464a      	mov	r2, r9
 8014e80:	f7ff f9ac 	bl	80141dc <memcpy>
 8014e84:	89a3      	ldrh	r3, [r4, #12]
 8014e86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e8e:	81a3      	strh	r3, [r4, #12]
 8014e90:	6126      	str	r6, [r4, #16]
 8014e92:	6165      	str	r5, [r4, #20]
 8014e94:	444e      	add	r6, r9
 8014e96:	eba5 0509 	sub.w	r5, r5, r9
 8014e9a:	6026      	str	r6, [r4, #0]
 8014e9c:	60a5      	str	r5, [r4, #8]
 8014e9e:	463e      	mov	r6, r7
 8014ea0:	42be      	cmp	r6, r7
 8014ea2:	d900      	bls.n	8014ea6 <__ssputs_r+0x86>
 8014ea4:	463e      	mov	r6, r7
 8014ea6:	6820      	ldr	r0, [r4, #0]
 8014ea8:	4632      	mov	r2, r6
 8014eaa:	4641      	mov	r1, r8
 8014eac:	f7ff f9a4 	bl	80141f8 <memmove>
 8014eb0:	68a3      	ldr	r3, [r4, #8]
 8014eb2:	1b9b      	subs	r3, r3, r6
 8014eb4:	60a3      	str	r3, [r4, #8]
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	4433      	add	r3, r6
 8014eba:	6023      	str	r3, [r4, #0]
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	e7db      	b.n	8014e78 <__ssputs_r+0x58>
 8014ec0:	462a      	mov	r2, r5
 8014ec2:	f000 fcb5 	bl	8015830 <_realloc_r>
 8014ec6:	4606      	mov	r6, r0
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d1e1      	bne.n	8014e90 <__ssputs_r+0x70>
 8014ecc:	6921      	ldr	r1, [r4, #16]
 8014ece:	4650      	mov	r0, sl
 8014ed0:	f7ff fec6 	bl	8014c60 <_free_r>
 8014ed4:	e7c7      	b.n	8014e66 <__ssputs_r+0x46>
	...

08014ed8 <_svfiprintf_r>:
 8014ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014edc:	4698      	mov	r8, r3
 8014ede:	898b      	ldrh	r3, [r1, #12]
 8014ee0:	061b      	lsls	r3, r3, #24
 8014ee2:	b09d      	sub	sp, #116	; 0x74
 8014ee4:	4607      	mov	r7, r0
 8014ee6:	460d      	mov	r5, r1
 8014ee8:	4614      	mov	r4, r2
 8014eea:	d50e      	bpl.n	8014f0a <_svfiprintf_r+0x32>
 8014eec:	690b      	ldr	r3, [r1, #16]
 8014eee:	b963      	cbnz	r3, 8014f0a <_svfiprintf_r+0x32>
 8014ef0:	2140      	movs	r1, #64	; 0x40
 8014ef2:	f7ff ff21 	bl	8014d38 <_malloc_r>
 8014ef6:	6028      	str	r0, [r5, #0]
 8014ef8:	6128      	str	r0, [r5, #16]
 8014efa:	b920      	cbnz	r0, 8014f06 <_svfiprintf_r+0x2e>
 8014efc:	230c      	movs	r3, #12
 8014efe:	603b      	str	r3, [r7, #0]
 8014f00:	f04f 30ff 	mov.w	r0, #4294967295
 8014f04:	e0d1      	b.n	80150aa <_svfiprintf_r+0x1d2>
 8014f06:	2340      	movs	r3, #64	; 0x40
 8014f08:	616b      	str	r3, [r5, #20]
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f0e:	2320      	movs	r3, #32
 8014f10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f18:	2330      	movs	r3, #48	; 0x30
 8014f1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80150c4 <_svfiprintf_r+0x1ec>
 8014f1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f22:	f04f 0901 	mov.w	r9, #1
 8014f26:	4623      	mov	r3, r4
 8014f28:	469a      	mov	sl, r3
 8014f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f2e:	b10a      	cbz	r2, 8014f34 <_svfiprintf_r+0x5c>
 8014f30:	2a25      	cmp	r2, #37	; 0x25
 8014f32:	d1f9      	bne.n	8014f28 <_svfiprintf_r+0x50>
 8014f34:	ebba 0b04 	subs.w	fp, sl, r4
 8014f38:	d00b      	beq.n	8014f52 <_svfiprintf_r+0x7a>
 8014f3a:	465b      	mov	r3, fp
 8014f3c:	4622      	mov	r2, r4
 8014f3e:	4629      	mov	r1, r5
 8014f40:	4638      	mov	r0, r7
 8014f42:	f7ff ff6d 	bl	8014e20 <__ssputs_r>
 8014f46:	3001      	adds	r0, #1
 8014f48:	f000 80aa 	beq.w	80150a0 <_svfiprintf_r+0x1c8>
 8014f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f4e:	445a      	add	r2, fp
 8014f50:	9209      	str	r2, [sp, #36]	; 0x24
 8014f52:	f89a 3000 	ldrb.w	r3, [sl]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	f000 80a2 	beq.w	80150a0 <_svfiprintf_r+0x1c8>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8014f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f66:	f10a 0a01 	add.w	sl, sl, #1
 8014f6a:	9304      	str	r3, [sp, #16]
 8014f6c:	9307      	str	r3, [sp, #28]
 8014f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f72:	931a      	str	r3, [sp, #104]	; 0x68
 8014f74:	4654      	mov	r4, sl
 8014f76:	2205      	movs	r2, #5
 8014f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f7c:	4851      	ldr	r0, [pc, #324]	; (80150c4 <_svfiprintf_r+0x1ec>)
 8014f7e:	f7eb f94f 	bl	8000220 <memchr>
 8014f82:	9a04      	ldr	r2, [sp, #16]
 8014f84:	b9d8      	cbnz	r0, 8014fbe <_svfiprintf_r+0xe6>
 8014f86:	06d0      	lsls	r0, r2, #27
 8014f88:	bf44      	itt	mi
 8014f8a:	2320      	movmi	r3, #32
 8014f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f90:	0711      	lsls	r1, r2, #28
 8014f92:	bf44      	itt	mi
 8014f94:	232b      	movmi	r3, #43	; 0x2b
 8014f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8014f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8014fa0:	d015      	beq.n	8014fce <_svfiprintf_r+0xf6>
 8014fa2:	9a07      	ldr	r2, [sp, #28]
 8014fa4:	4654      	mov	r4, sl
 8014fa6:	2000      	movs	r0, #0
 8014fa8:	f04f 0c0a 	mov.w	ip, #10
 8014fac:	4621      	mov	r1, r4
 8014fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fb2:	3b30      	subs	r3, #48	; 0x30
 8014fb4:	2b09      	cmp	r3, #9
 8014fb6:	d94e      	bls.n	8015056 <_svfiprintf_r+0x17e>
 8014fb8:	b1b0      	cbz	r0, 8014fe8 <_svfiprintf_r+0x110>
 8014fba:	9207      	str	r2, [sp, #28]
 8014fbc:	e014      	b.n	8014fe8 <_svfiprintf_r+0x110>
 8014fbe:	eba0 0308 	sub.w	r3, r0, r8
 8014fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8014fc6:	4313      	orrs	r3, r2
 8014fc8:	9304      	str	r3, [sp, #16]
 8014fca:	46a2      	mov	sl, r4
 8014fcc:	e7d2      	b.n	8014f74 <_svfiprintf_r+0x9c>
 8014fce:	9b03      	ldr	r3, [sp, #12]
 8014fd0:	1d19      	adds	r1, r3, #4
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	9103      	str	r1, [sp, #12]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	bfbb      	ittet	lt
 8014fda:	425b      	neglt	r3, r3
 8014fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8014fe0:	9307      	strge	r3, [sp, #28]
 8014fe2:	9307      	strlt	r3, [sp, #28]
 8014fe4:	bfb8      	it	lt
 8014fe6:	9204      	strlt	r2, [sp, #16]
 8014fe8:	7823      	ldrb	r3, [r4, #0]
 8014fea:	2b2e      	cmp	r3, #46	; 0x2e
 8014fec:	d10c      	bne.n	8015008 <_svfiprintf_r+0x130>
 8014fee:	7863      	ldrb	r3, [r4, #1]
 8014ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8014ff2:	d135      	bne.n	8015060 <_svfiprintf_r+0x188>
 8014ff4:	9b03      	ldr	r3, [sp, #12]
 8014ff6:	1d1a      	adds	r2, r3, #4
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	9203      	str	r2, [sp, #12]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	bfb8      	it	lt
 8015000:	f04f 33ff 	movlt.w	r3, #4294967295
 8015004:	3402      	adds	r4, #2
 8015006:	9305      	str	r3, [sp, #20]
 8015008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80150d4 <_svfiprintf_r+0x1fc>
 801500c:	7821      	ldrb	r1, [r4, #0]
 801500e:	2203      	movs	r2, #3
 8015010:	4650      	mov	r0, sl
 8015012:	f7eb f905 	bl	8000220 <memchr>
 8015016:	b140      	cbz	r0, 801502a <_svfiprintf_r+0x152>
 8015018:	2340      	movs	r3, #64	; 0x40
 801501a:	eba0 000a 	sub.w	r0, r0, sl
 801501e:	fa03 f000 	lsl.w	r0, r3, r0
 8015022:	9b04      	ldr	r3, [sp, #16]
 8015024:	4303      	orrs	r3, r0
 8015026:	3401      	adds	r4, #1
 8015028:	9304      	str	r3, [sp, #16]
 801502a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801502e:	4826      	ldr	r0, [pc, #152]	; (80150c8 <_svfiprintf_r+0x1f0>)
 8015030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015034:	2206      	movs	r2, #6
 8015036:	f7eb f8f3 	bl	8000220 <memchr>
 801503a:	2800      	cmp	r0, #0
 801503c:	d038      	beq.n	80150b0 <_svfiprintf_r+0x1d8>
 801503e:	4b23      	ldr	r3, [pc, #140]	; (80150cc <_svfiprintf_r+0x1f4>)
 8015040:	bb1b      	cbnz	r3, 801508a <_svfiprintf_r+0x1b2>
 8015042:	9b03      	ldr	r3, [sp, #12]
 8015044:	3307      	adds	r3, #7
 8015046:	f023 0307 	bic.w	r3, r3, #7
 801504a:	3308      	adds	r3, #8
 801504c:	9303      	str	r3, [sp, #12]
 801504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015050:	4433      	add	r3, r6
 8015052:	9309      	str	r3, [sp, #36]	; 0x24
 8015054:	e767      	b.n	8014f26 <_svfiprintf_r+0x4e>
 8015056:	fb0c 3202 	mla	r2, ip, r2, r3
 801505a:	460c      	mov	r4, r1
 801505c:	2001      	movs	r0, #1
 801505e:	e7a5      	b.n	8014fac <_svfiprintf_r+0xd4>
 8015060:	2300      	movs	r3, #0
 8015062:	3401      	adds	r4, #1
 8015064:	9305      	str	r3, [sp, #20]
 8015066:	4619      	mov	r1, r3
 8015068:	f04f 0c0a 	mov.w	ip, #10
 801506c:	4620      	mov	r0, r4
 801506e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015072:	3a30      	subs	r2, #48	; 0x30
 8015074:	2a09      	cmp	r2, #9
 8015076:	d903      	bls.n	8015080 <_svfiprintf_r+0x1a8>
 8015078:	2b00      	cmp	r3, #0
 801507a:	d0c5      	beq.n	8015008 <_svfiprintf_r+0x130>
 801507c:	9105      	str	r1, [sp, #20]
 801507e:	e7c3      	b.n	8015008 <_svfiprintf_r+0x130>
 8015080:	fb0c 2101 	mla	r1, ip, r1, r2
 8015084:	4604      	mov	r4, r0
 8015086:	2301      	movs	r3, #1
 8015088:	e7f0      	b.n	801506c <_svfiprintf_r+0x194>
 801508a:	ab03      	add	r3, sp, #12
 801508c:	9300      	str	r3, [sp, #0]
 801508e:	462a      	mov	r2, r5
 8015090:	4b0f      	ldr	r3, [pc, #60]	; (80150d0 <_svfiprintf_r+0x1f8>)
 8015092:	a904      	add	r1, sp, #16
 8015094:	4638      	mov	r0, r7
 8015096:	f3af 8000 	nop.w
 801509a:	1c42      	adds	r2, r0, #1
 801509c:	4606      	mov	r6, r0
 801509e:	d1d6      	bne.n	801504e <_svfiprintf_r+0x176>
 80150a0:	89ab      	ldrh	r3, [r5, #12]
 80150a2:	065b      	lsls	r3, r3, #25
 80150a4:	f53f af2c 	bmi.w	8014f00 <_svfiprintf_r+0x28>
 80150a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150aa:	b01d      	add	sp, #116	; 0x74
 80150ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150b0:	ab03      	add	r3, sp, #12
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	462a      	mov	r2, r5
 80150b6:	4b06      	ldr	r3, [pc, #24]	; (80150d0 <_svfiprintf_r+0x1f8>)
 80150b8:	a904      	add	r1, sp, #16
 80150ba:	4638      	mov	r0, r7
 80150bc:	f000 f9d4 	bl	8015468 <_printf_i>
 80150c0:	e7eb      	b.n	801509a <_svfiprintf_r+0x1c2>
 80150c2:	bf00      	nop
 80150c4:	0801865c 	.word	0x0801865c
 80150c8:	08018666 	.word	0x08018666
 80150cc:	00000000 	.word	0x00000000
 80150d0:	08014e21 	.word	0x08014e21
 80150d4:	08018662 	.word	0x08018662

080150d8 <__sfputc_r>:
 80150d8:	6893      	ldr	r3, [r2, #8]
 80150da:	3b01      	subs	r3, #1
 80150dc:	2b00      	cmp	r3, #0
 80150de:	b410      	push	{r4}
 80150e0:	6093      	str	r3, [r2, #8]
 80150e2:	da08      	bge.n	80150f6 <__sfputc_r+0x1e>
 80150e4:	6994      	ldr	r4, [r2, #24]
 80150e6:	42a3      	cmp	r3, r4
 80150e8:	db01      	blt.n	80150ee <__sfputc_r+0x16>
 80150ea:	290a      	cmp	r1, #10
 80150ec:	d103      	bne.n	80150f6 <__sfputc_r+0x1e>
 80150ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150f2:	f7ff ba9d 	b.w	8014630 <__swbuf_r>
 80150f6:	6813      	ldr	r3, [r2, #0]
 80150f8:	1c58      	adds	r0, r3, #1
 80150fa:	6010      	str	r0, [r2, #0]
 80150fc:	7019      	strb	r1, [r3, #0]
 80150fe:	4608      	mov	r0, r1
 8015100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015104:	4770      	bx	lr

08015106 <__sfputs_r>:
 8015106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015108:	4606      	mov	r6, r0
 801510a:	460f      	mov	r7, r1
 801510c:	4614      	mov	r4, r2
 801510e:	18d5      	adds	r5, r2, r3
 8015110:	42ac      	cmp	r4, r5
 8015112:	d101      	bne.n	8015118 <__sfputs_r+0x12>
 8015114:	2000      	movs	r0, #0
 8015116:	e007      	b.n	8015128 <__sfputs_r+0x22>
 8015118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801511c:	463a      	mov	r2, r7
 801511e:	4630      	mov	r0, r6
 8015120:	f7ff ffda 	bl	80150d8 <__sfputc_r>
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	d1f3      	bne.n	8015110 <__sfputs_r+0xa>
 8015128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801512c <_vfiprintf_r>:
 801512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015130:	460d      	mov	r5, r1
 8015132:	b09d      	sub	sp, #116	; 0x74
 8015134:	4614      	mov	r4, r2
 8015136:	4698      	mov	r8, r3
 8015138:	4606      	mov	r6, r0
 801513a:	b118      	cbz	r0, 8015144 <_vfiprintf_r+0x18>
 801513c:	6983      	ldr	r3, [r0, #24]
 801513e:	b90b      	cbnz	r3, 8015144 <_vfiprintf_r+0x18>
 8015140:	f7ff fc6e 	bl	8014a20 <__sinit>
 8015144:	4b89      	ldr	r3, [pc, #548]	; (801536c <_vfiprintf_r+0x240>)
 8015146:	429d      	cmp	r5, r3
 8015148:	d11b      	bne.n	8015182 <_vfiprintf_r+0x56>
 801514a:	6875      	ldr	r5, [r6, #4]
 801514c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801514e:	07d9      	lsls	r1, r3, #31
 8015150:	d405      	bmi.n	801515e <_vfiprintf_r+0x32>
 8015152:	89ab      	ldrh	r3, [r5, #12]
 8015154:	059a      	lsls	r2, r3, #22
 8015156:	d402      	bmi.n	801515e <_vfiprintf_r+0x32>
 8015158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801515a:	f7ff fd11 	bl	8014b80 <__retarget_lock_acquire_recursive>
 801515e:	89ab      	ldrh	r3, [r5, #12]
 8015160:	071b      	lsls	r3, r3, #28
 8015162:	d501      	bpl.n	8015168 <_vfiprintf_r+0x3c>
 8015164:	692b      	ldr	r3, [r5, #16]
 8015166:	b9eb      	cbnz	r3, 80151a4 <_vfiprintf_r+0x78>
 8015168:	4629      	mov	r1, r5
 801516a:	4630      	mov	r0, r6
 801516c:	f7ff fab2 	bl	80146d4 <__swsetup_r>
 8015170:	b1c0      	cbz	r0, 80151a4 <_vfiprintf_r+0x78>
 8015172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015174:	07dc      	lsls	r4, r3, #31
 8015176:	d50e      	bpl.n	8015196 <_vfiprintf_r+0x6a>
 8015178:	f04f 30ff 	mov.w	r0, #4294967295
 801517c:	b01d      	add	sp, #116	; 0x74
 801517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015182:	4b7b      	ldr	r3, [pc, #492]	; (8015370 <_vfiprintf_r+0x244>)
 8015184:	429d      	cmp	r5, r3
 8015186:	d101      	bne.n	801518c <_vfiprintf_r+0x60>
 8015188:	68b5      	ldr	r5, [r6, #8]
 801518a:	e7df      	b.n	801514c <_vfiprintf_r+0x20>
 801518c:	4b79      	ldr	r3, [pc, #484]	; (8015374 <_vfiprintf_r+0x248>)
 801518e:	429d      	cmp	r5, r3
 8015190:	bf08      	it	eq
 8015192:	68f5      	ldreq	r5, [r6, #12]
 8015194:	e7da      	b.n	801514c <_vfiprintf_r+0x20>
 8015196:	89ab      	ldrh	r3, [r5, #12]
 8015198:	0598      	lsls	r0, r3, #22
 801519a:	d4ed      	bmi.n	8015178 <_vfiprintf_r+0x4c>
 801519c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801519e:	f7ff fcf0 	bl	8014b82 <__retarget_lock_release_recursive>
 80151a2:	e7e9      	b.n	8015178 <_vfiprintf_r+0x4c>
 80151a4:	2300      	movs	r3, #0
 80151a6:	9309      	str	r3, [sp, #36]	; 0x24
 80151a8:	2320      	movs	r3, #32
 80151aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80151b2:	2330      	movs	r3, #48	; 0x30
 80151b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015378 <_vfiprintf_r+0x24c>
 80151b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80151bc:	f04f 0901 	mov.w	r9, #1
 80151c0:	4623      	mov	r3, r4
 80151c2:	469a      	mov	sl, r3
 80151c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151c8:	b10a      	cbz	r2, 80151ce <_vfiprintf_r+0xa2>
 80151ca:	2a25      	cmp	r2, #37	; 0x25
 80151cc:	d1f9      	bne.n	80151c2 <_vfiprintf_r+0x96>
 80151ce:	ebba 0b04 	subs.w	fp, sl, r4
 80151d2:	d00b      	beq.n	80151ec <_vfiprintf_r+0xc0>
 80151d4:	465b      	mov	r3, fp
 80151d6:	4622      	mov	r2, r4
 80151d8:	4629      	mov	r1, r5
 80151da:	4630      	mov	r0, r6
 80151dc:	f7ff ff93 	bl	8015106 <__sfputs_r>
 80151e0:	3001      	adds	r0, #1
 80151e2:	f000 80aa 	beq.w	801533a <_vfiprintf_r+0x20e>
 80151e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151e8:	445a      	add	r2, fp
 80151ea:	9209      	str	r2, [sp, #36]	; 0x24
 80151ec:	f89a 3000 	ldrb.w	r3, [sl]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	f000 80a2 	beq.w	801533a <_vfiprintf_r+0x20e>
 80151f6:	2300      	movs	r3, #0
 80151f8:	f04f 32ff 	mov.w	r2, #4294967295
 80151fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015200:	f10a 0a01 	add.w	sl, sl, #1
 8015204:	9304      	str	r3, [sp, #16]
 8015206:	9307      	str	r3, [sp, #28]
 8015208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801520c:	931a      	str	r3, [sp, #104]	; 0x68
 801520e:	4654      	mov	r4, sl
 8015210:	2205      	movs	r2, #5
 8015212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015216:	4858      	ldr	r0, [pc, #352]	; (8015378 <_vfiprintf_r+0x24c>)
 8015218:	f7eb f802 	bl	8000220 <memchr>
 801521c:	9a04      	ldr	r2, [sp, #16]
 801521e:	b9d8      	cbnz	r0, 8015258 <_vfiprintf_r+0x12c>
 8015220:	06d1      	lsls	r1, r2, #27
 8015222:	bf44      	itt	mi
 8015224:	2320      	movmi	r3, #32
 8015226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801522a:	0713      	lsls	r3, r2, #28
 801522c:	bf44      	itt	mi
 801522e:	232b      	movmi	r3, #43	; 0x2b
 8015230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015234:	f89a 3000 	ldrb.w	r3, [sl]
 8015238:	2b2a      	cmp	r3, #42	; 0x2a
 801523a:	d015      	beq.n	8015268 <_vfiprintf_r+0x13c>
 801523c:	9a07      	ldr	r2, [sp, #28]
 801523e:	4654      	mov	r4, sl
 8015240:	2000      	movs	r0, #0
 8015242:	f04f 0c0a 	mov.w	ip, #10
 8015246:	4621      	mov	r1, r4
 8015248:	f811 3b01 	ldrb.w	r3, [r1], #1
 801524c:	3b30      	subs	r3, #48	; 0x30
 801524e:	2b09      	cmp	r3, #9
 8015250:	d94e      	bls.n	80152f0 <_vfiprintf_r+0x1c4>
 8015252:	b1b0      	cbz	r0, 8015282 <_vfiprintf_r+0x156>
 8015254:	9207      	str	r2, [sp, #28]
 8015256:	e014      	b.n	8015282 <_vfiprintf_r+0x156>
 8015258:	eba0 0308 	sub.w	r3, r0, r8
 801525c:	fa09 f303 	lsl.w	r3, r9, r3
 8015260:	4313      	orrs	r3, r2
 8015262:	9304      	str	r3, [sp, #16]
 8015264:	46a2      	mov	sl, r4
 8015266:	e7d2      	b.n	801520e <_vfiprintf_r+0xe2>
 8015268:	9b03      	ldr	r3, [sp, #12]
 801526a:	1d19      	adds	r1, r3, #4
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	9103      	str	r1, [sp, #12]
 8015270:	2b00      	cmp	r3, #0
 8015272:	bfbb      	ittet	lt
 8015274:	425b      	neglt	r3, r3
 8015276:	f042 0202 	orrlt.w	r2, r2, #2
 801527a:	9307      	strge	r3, [sp, #28]
 801527c:	9307      	strlt	r3, [sp, #28]
 801527e:	bfb8      	it	lt
 8015280:	9204      	strlt	r2, [sp, #16]
 8015282:	7823      	ldrb	r3, [r4, #0]
 8015284:	2b2e      	cmp	r3, #46	; 0x2e
 8015286:	d10c      	bne.n	80152a2 <_vfiprintf_r+0x176>
 8015288:	7863      	ldrb	r3, [r4, #1]
 801528a:	2b2a      	cmp	r3, #42	; 0x2a
 801528c:	d135      	bne.n	80152fa <_vfiprintf_r+0x1ce>
 801528e:	9b03      	ldr	r3, [sp, #12]
 8015290:	1d1a      	adds	r2, r3, #4
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	9203      	str	r2, [sp, #12]
 8015296:	2b00      	cmp	r3, #0
 8015298:	bfb8      	it	lt
 801529a:	f04f 33ff 	movlt.w	r3, #4294967295
 801529e:	3402      	adds	r4, #2
 80152a0:	9305      	str	r3, [sp, #20]
 80152a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015388 <_vfiprintf_r+0x25c>
 80152a6:	7821      	ldrb	r1, [r4, #0]
 80152a8:	2203      	movs	r2, #3
 80152aa:	4650      	mov	r0, sl
 80152ac:	f7ea ffb8 	bl	8000220 <memchr>
 80152b0:	b140      	cbz	r0, 80152c4 <_vfiprintf_r+0x198>
 80152b2:	2340      	movs	r3, #64	; 0x40
 80152b4:	eba0 000a 	sub.w	r0, r0, sl
 80152b8:	fa03 f000 	lsl.w	r0, r3, r0
 80152bc:	9b04      	ldr	r3, [sp, #16]
 80152be:	4303      	orrs	r3, r0
 80152c0:	3401      	adds	r4, #1
 80152c2:	9304      	str	r3, [sp, #16]
 80152c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152c8:	482c      	ldr	r0, [pc, #176]	; (801537c <_vfiprintf_r+0x250>)
 80152ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152ce:	2206      	movs	r2, #6
 80152d0:	f7ea ffa6 	bl	8000220 <memchr>
 80152d4:	2800      	cmp	r0, #0
 80152d6:	d03f      	beq.n	8015358 <_vfiprintf_r+0x22c>
 80152d8:	4b29      	ldr	r3, [pc, #164]	; (8015380 <_vfiprintf_r+0x254>)
 80152da:	bb1b      	cbnz	r3, 8015324 <_vfiprintf_r+0x1f8>
 80152dc:	9b03      	ldr	r3, [sp, #12]
 80152de:	3307      	adds	r3, #7
 80152e0:	f023 0307 	bic.w	r3, r3, #7
 80152e4:	3308      	adds	r3, #8
 80152e6:	9303      	str	r3, [sp, #12]
 80152e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152ea:	443b      	add	r3, r7
 80152ec:	9309      	str	r3, [sp, #36]	; 0x24
 80152ee:	e767      	b.n	80151c0 <_vfiprintf_r+0x94>
 80152f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80152f4:	460c      	mov	r4, r1
 80152f6:	2001      	movs	r0, #1
 80152f8:	e7a5      	b.n	8015246 <_vfiprintf_r+0x11a>
 80152fa:	2300      	movs	r3, #0
 80152fc:	3401      	adds	r4, #1
 80152fe:	9305      	str	r3, [sp, #20]
 8015300:	4619      	mov	r1, r3
 8015302:	f04f 0c0a 	mov.w	ip, #10
 8015306:	4620      	mov	r0, r4
 8015308:	f810 2b01 	ldrb.w	r2, [r0], #1
 801530c:	3a30      	subs	r2, #48	; 0x30
 801530e:	2a09      	cmp	r2, #9
 8015310:	d903      	bls.n	801531a <_vfiprintf_r+0x1ee>
 8015312:	2b00      	cmp	r3, #0
 8015314:	d0c5      	beq.n	80152a2 <_vfiprintf_r+0x176>
 8015316:	9105      	str	r1, [sp, #20]
 8015318:	e7c3      	b.n	80152a2 <_vfiprintf_r+0x176>
 801531a:	fb0c 2101 	mla	r1, ip, r1, r2
 801531e:	4604      	mov	r4, r0
 8015320:	2301      	movs	r3, #1
 8015322:	e7f0      	b.n	8015306 <_vfiprintf_r+0x1da>
 8015324:	ab03      	add	r3, sp, #12
 8015326:	9300      	str	r3, [sp, #0]
 8015328:	462a      	mov	r2, r5
 801532a:	4b16      	ldr	r3, [pc, #88]	; (8015384 <_vfiprintf_r+0x258>)
 801532c:	a904      	add	r1, sp, #16
 801532e:	4630      	mov	r0, r6
 8015330:	f3af 8000 	nop.w
 8015334:	4607      	mov	r7, r0
 8015336:	1c78      	adds	r0, r7, #1
 8015338:	d1d6      	bne.n	80152e8 <_vfiprintf_r+0x1bc>
 801533a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801533c:	07d9      	lsls	r1, r3, #31
 801533e:	d405      	bmi.n	801534c <_vfiprintf_r+0x220>
 8015340:	89ab      	ldrh	r3, [r5, #12]
 8015342:	059a      	lsls	r2, r3, #22
 8015344:	d402      	bmi.n	801534c <_vfiprintf_r+0x220>
 8015346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015348:	f7ff fc1b 	bl	8014b82 <__retarget_lock_release_recursive>
 801534c:	89ab      	ldrh	r3, [r5, #12]
 801534e:	065b      	lsls	r3, r3, #25
 8015350:	f53f af12 	bmi.w	8015178 <_vfiprintf_r+0x4c>
 8015354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015356:	e711      	b.n	801517c <_vfiprintf_r+0x50>
 8015358:	ab03      	add	r3, sp, #12
 801535a:	9300      	str	r3, [sp, #0]
 801535c:	462a      	mov	r2, r5
 801535e:	4b09      	ldr	r3, [pc, #36]	; (8015384 <_vfiprintf_r+0x258>)
 8015360:	a904      	add	r1, sp, #16
 8015362:	4630      	mov	r0, r6
 8015364:	f000 f880 	bl	8015468 <_printf_i>
 8015368:	e7e4      	b.n	8015334 <_vfiprintf_r+0x208>
 801536a:	bf00      	nop
 801536c:	0801861c 	.word	0x0801861c
 8015370:	0801863c 	.word	0x0801863c
 8015374:	080185fc 	.word	0x080185fc
 8015378:	0801865c 	.word	0x0801865c
 801537c:	08018666 	.word	0x08018666
 8015380:	00000000 	.word	0x00000000
 8015384:	08015107 	.word	0x08015107
 8015388:	08018662 	.word	0x08018662

0801538c <_printf_common>:
 801538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015390:	4616      	mov	r6, r2
 8015392:	4699      	mov	r9, r3
 8015394:	688a      	ldr	r2, [r1, #8]
 8015396:	690b      	ldr	r3, [r1, #16]
 8015398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801539c:	4293      	cmp	r3, r2
 801539e:	bfb8      	it	lt
 80153a0:	4613      	movlt	r3, r2
 80153a2:	6033      	str	r3, [r6, #0]
 80153a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80153a8:	4607      	mov	r7, r0
 80153aa:	460c      	mov	r4, r1
 80153ac:	b10a      	cbz	r2, 80153b2 <_printf_common+0x26>
 80153ae:	3301      	adds	r3, #1
 80153b0:	6033      	str	r3, [r6, #0]
 80153b2:	6823      	ldr	r3, [r4, #0]
 80153b4:	0699      	lsls	r1, r3, #26
 80153b6:	bf42      	ittt	mi
 80153b8:	6833      	ldrmi	r3, [r6, #0]
 80153ba:	3302      	addmi	r3, #2
 80153bc:	6033      	strmi	r3, [r6, #0]
 80153be:	6825      	ldr	r5, [r4, #0]
 80153c0:	f015 0506 	ands.w	r5, r5, #6
 80153c4:	d106      	bne.n	80153d4 <_printf_common+0x48>
 80153c6:	f104 0a19 	add.w	sl, r4, #25
 80153ca:	68e3      	ldr	r3, [r4, #12]
 80153cc:	6832      	ldr	r2, [r6, #0]
 80153ce:	1a9b      	subs	r3, r3, r2
 80153d0:	42ab      	cmp	r3, r5
 80153d2:	dc26      	bgt.n	8015422 <_printf_common+0x96>
 80153d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80153d8:	1e13      	subs	r3, r2, #0
 80153da:	6822      	ldr	r2, [r4, #0]
 80153dc:	bf18      	it	ne
 80153de:	2301      	movne	r3, #1
 80153e0:	0692      	lsls	r2, r2, #26
 80153e2:	d42b      	bmi.n	801543c <_printf_common+0xb0>
 80153e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80153e8:	4649      	mov	r1, r9
 80153ea:	4638      	mov	r0, r7
 80153ec:	47c0      	blx	r8
 80153ee:	3001      	adds	r0, #1
 80153f0:	d01e      	beq.n	8015430 <_printf_common+0xa4>
 80153f2:	6823      	ldr	r3, [r4, #0]
 80153f4:	68e5      	ldr	r5, [r4, #12]
 80153f6:	6832      	ldr	r2, [r6, #0]
 80153f8:	f003 0306 	and.w	r3, r3, #6
 80153fc:	2b04      	cmp	r3, #4
 80153fe:	bf08      	it	eq
 8015400:	1aad      	subeq	r5, r5, r2
 8015402:	68a3      	ldr	r3, [r4, #8]
 8015404:	6922      	ldr	r2, [r4, #16]
 8015406:	bf0c      	ite	eq
 8015408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801540c:	2500      	movne	r5, #0
 801540e:	4293      	cmp	r3, r2
 8015410:	bfc4      	itt	gt
 8015412:	1a9b      	subgt	r3, r3, r2
 8015414:	18ed      	addgt	r5, r5, r3
 8015416:	2600      	movs	r6, #0
 8015418:	341a      	adds	r4, #26
 801541a:	42b5      	cmp	r5, r6
 801541c:	d11a      	bne.n	8015454 <_printf_common+0xc8>
 801541e:	2000      	movs	r0, #0
 8015420:	e008      	b.n	8015434 <_printf_common+0xa8>
 8015422:	2301      	movs	r3, #1
 8015424:	4652      	mov	r2, sl
 8015426:	4649      	mov	r1, r9
 8015428:	4638      	mov	r0, r7
 801542a:	47c0      	blx	r8
 801542c:	3001      	adds	r0, #1
 801542e:	d103      	bne.n	8015438 <_printf_common+0xac>
 8015430:	f04f 30ff 	mov.w	r0, #4294967295
 8015434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015438:	3501      	adds	r5, #1
 801543a:	e7c6      	b.n	80153ca <_printf_common+0x3e>
 801543c:	18e1      	adds	r1, r4, r3
 801543e:	1c5a      	adds	r2, r3, #1
 8015440:	2030      	movs	r0, #48	; 0x30
 8015442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015446:	4422      	add	r2, r4
 8015448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801544c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015450:	3302      	adds	r3, #2
 8015452:	e7c7      	b.n	80153e4 <_printf_common+0x58>
 8015454:	2301      	movs	r3, #1
 8015456:	4622      	mov	r2, r4
 8015458:	4649      	mov	r1, r9
 801545a:	4638      	mov	r0, r7
 801545c:	47c0      	blx	r8
 801545e:	3001      	adds	r0, #1
 8015460:	d0e6      	beq.n	8015430 <_printf_common+0xa4>
 8015462:	3601      	adds	r6, #1
 8015464:	e7d9      	b.n	801541a <_printf_common+0x8e>
	...

08015468 <_printf_i>:
 8015468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801546c:	7e0f      	ldrb	r7, [r1, #24]
 801546e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015470:	2f78      	cmp	r7, #120	; 0x78
 8015472:	4691      	mov	r9, r2
 8015474:	4680      	mov	r8, r0
 8015476:	460c      	mov	r4, r1
 8015478:	469a      	mov	sl, r3
 801547a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801547e:	d807      	bhi.n	8015490 <_printf_i+0x28>
 8015480:	2f62      	cmp	r7, #98	; 0x62
 8015482:	d80a      	bhi.n	801549a <_printf_i+0x32>
 8015484:	2f00      	cmp	r7, #0
 8015486:	f000 80d8 	beq.w	801563a <_printf_i+0x1d2>
 801548a:	2f58      	cmp	r7, #88	; 0x58
 801548c:	f000 80a3 	beq.w	80155d6 <_printf_i+0x16e>
 8015490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015498:	e03a      	b.n	8015510 <_printf_i+0xa8>
 801549a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801549e:	2b15      	cmp	r3, #21
 80154a0:	d8f6      	bhi.n	8015490 <_printf_i+0x28>
 80154a2:	a101      	add	r1, pc, #4	; (adr r1, 80154a8 <_printf_i+0x40>)
 80154a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80154a8:	08015501 	.word	0x08015501
 80154ac:	08015515 	.word	0x08015515
 80154b0:	08015491 	.word	0x08015491
 80154b4:	08015491 	.word	0x08015491
 80154b8:	08015491 	.word	0x08015491
 80154bc:	08015491 	.word	0x08015491
 80154c0:	08015515 	.word	0x08015515
 80154c4:	08015491 	.word	0x08015491
 80154c8:	08015491 	.word	0x08015491
 80154cc:	08015491 	.word	0x08015491
 80154d0:	08015491 	.word	0x08015491
 80154d4:	08015621 	.word	0x08015621
 80154d8:	08015545 	.word	0x08015545
 80154dc:	08015603 	.word	0x08015603
 80154e0:	08015491 	.word	0x08015491
 80154e4:	08015491 	.word	0x08015491
 80154e8:	08015643 	.word	0x08015643
 80154ec:	08015491 	.word	0x08015491
 80154f0:	08015545 	.word	0x08015545
 80154f4:	08015491 	.word	0x08015491
 80154f8:	08015491 	.word	0x08015491
 80154fc:	0801560b 	.word	0x0801560b
 8015500:	682b      	ldr	r3, [r5, #0]
 8015502:	1d1a      	adds	r2, r3, #4
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	602a      	str	r2, [r5, #0]
 8015508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801550c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015510:	2301      	movs	r3, #1
 8015512:	e0a3      	b.n	801565c <_printf_i+0x1f4>
 8015514:	6820      	ldr	r0, [r4, #0]
 8015516:	6829      	ldr	r1, [r5, #0]
 8015518:	0606      	lsls	r6, r0, #24
 801551a:	f101 0304 	add.w	r3, r1, #4
 801551e:	d50a      	bpl.n	8015536 <_printf_i+0xce>
 8015520:	680e      	ldr	r6, [r1, #0]
 8015522:	602b      	str	r3, [r5, #0]
 8015524:	2e00      	cmp	r6, #0
 8015526:	da03      	bge.n	8015530 <_printf_i+0xc8>
 8015528:	232d      	movs	r3, #45	; 0x2d
 801552a:	4276      	negs	r6, r6
 801552c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015530:	485e      	ldr	r0, [pc, #376]	; (80156ac <_printf_i+0x244>)
 8015532:	230a      	movs	r3, #10
 8015534:	e019      	b.n	801556a <_printf_i+0x102>
 8015536:	680e      	ldr	r6, [r1, #0]
 8015538:	602b      	str	r3, [r5, #0]
 801553a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801553e:	bf18      	it	ne
 8015540:	b236      	sxthne	r6, r6
 8015542:	e7ef      	b.n	8015524 <_printf_i+0xbc>
 8015544:	682b      	ldr	r3, [r5, #0]
 8015546:	6820      	ldr	r0, [r4, #0]
 8015548:	1d19      	adds	r1, r3, #4
 801554a:	6029      	str	r1, [r5, #0]
 801554c:	0601      	lsls	r1, r0, #24
 801554e:	d501      	bpl.n	8015554 <_printf_i+0xec>
 8015550:	681e      	ldr	r6, [r3, #0]
 8015552:	e002      	b.n	801555a <_printf_i+0xf2>
 8015554:	0646      	lsls	r6, r0, #25
 8015556:	d5fb      	bpl.n	8015550 <_printf_i+0xe8>
 8015558:	881e      	ldrh	r6, [r3, #0]
 801555a:	4854      	ldr	r0, [pc, #336]	; (80156ac <_printf_i+0x244>)
 801555c:	2f6f      	cmp	r7, #111	; 0x6f
 801555e:	bf0c      	ite	eq
 8015560:	2308      	moveq	r3, #8
 8015562:	230a      	movne	r3, #10
 8015564:	2100      	movs	r1, #0
 8015566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801556a:	6865      	ldr	r5, [r4, #4]
 801556c:	60a5      	str	r5, [r4, #8]
 801556e:	2d00      	cmp	r5, #0
 8015570:	bfa2      	ittt	ge
 8015572:	6821      	ldrge	r1, [r4, #0]
 8015574:	f021 0104 	bicge.w	r1, r1, #4
 8015578:	6021      	strge	r1, [r4, #0]
 801557a:	b90e      	cbnz	r6, 8015580 <_printf_i+0x118>
 801557c:	2d00      	cmp	r5, #0
 801557e:	d04d      	beq.n	801561c <_printf_i+0x1b4>
 8015580:	4615      	mov	r5, r2
 8015582:	fbb6 f1f3 	udiv	r1, r6, r3
 8015586:	fb03 6711 	mls	r7, r3, r1, r6
 801558a:	5dc7      	ldrb	r7, [r0, r7]
 801558c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015590:	4637      	mov	r7, r6
 8015592:	42bb      	cmp	r3, r7
 8015594:	460e      	mov	r6, r1
 8015596:	d9f4      	bls.n	8015582 <_printf_i+0x11a>
 8015598:	2b08      	cmp	r3, #8
 801559a:	d10b      	bne.n	80155b4 <_printf_i+0x14c>
 801559c:	6823      	ldr	r3, [r4, #0]
 801559e:	07de      	lsls	r6, r3, #31
 80155a0:	d508      	bpl.n	80155b4 <_printf_i+0x14c>
 80155a2:	6923      	ldr	r3, [r4, #16]
 80155a4:	6861      	ldr	r1, [r4, #4]
 80155a6:	4299      	cmp	r1, r3
 80155a8:	bfde      	ittt	le
 80155aa:	2330      	movle	r3, #48	; 0x30
 80155ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80155b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80155b4:	1b52      	subs	r2, r2, r5
 80155b6:	6122      	str	r2, [r4, #16]
 80155b8:	f8cd a000 	str.w	sl, [sp]
 80155bc:	464b      	mov	r3, r9
 80155be:	aa03      	add	r2, sp, #12
 80155c0:	4621      	mov	r1, r4
 80155c2:	4640      	mov	r0, r8
 80155c4:	f7ff fee2 	bl	801538c <_printf_common>
 80155c8:	3001      	adds	r0, #1
 80155ca:	d14c      	bne.n	8015666 <_printf_i+0x1fe>
 80155cc:	f04f 30ff 	mov.w	r0, #4294967295
 80155d0:	b004      	add	sp, #16
 80155d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155d6:	4835      	ldr	r0, [pc, #212]	; (80156ac <_printf_i+0x244>)
 80155d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80155dc:	6829      	ldr	r1, [r5, #0]
 80155de:	6823      	ldr	r3, [r4, #0]
 80155e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80155e4:	6029      	str	r1, [r5, #0]
 80155e6:	061d      	lsls	r5, r3, #24
 80155e8:	d514      	bpl.n	8015614 <_printf_i+0x1ac>
 80155ea:	07df      	lsls	r7, r3, #31
 80155ec:	bf44      	itt	mi
 80155ee:	f043 0320 	orrmi.w	r3, r3, #32
 80155f2:	6023      	strmi	r3, [r4, #0]
 80155f4:	b91e      	cbnz	r6, 80155fe <_printf_i+0x196>
 80155f6:	6823      	ldr	r3, [r4, #0]
 80155f8:	f023 0320 	bic.w	r3, r3, #32
 80155fc:	6023      	str	r3, [r4, #0]
 80155fe:	2310      	movs	r3, #16
 8015600:	e7b0      	b.n	8015564 <_printf_i+0xfc>
 8015602:	6823      	ldr	r3, [r4, #0]
 8015604:	f043 0320 	orr.w	r3, r3, #32
 8015608:	6023      	str	r3, [r4, #0]
 801560a:	2378      	movs	r3, #120	; 0x78
 801560c:	4828      	ldr	r0, [pc, #160]	; (80156b0 <_printf_i+0x248>)
 801560e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015612:	e7e3      	b.n	80155dc <_printf_i+0x174>
 8015614:	0659      	lsls	r1, r3, #25
 8015616:	bf48      	it	mi
 8015618:	b2b6      	uxthmi	r6, r6
 801561a:	e7e6      	b.n	80155ea <_printf_i+0x182>
 801561c:	4615      	mov	r5, r2
 801561e:	e7bb      	b.n	8015598 <_printf_i+0x130>
 8015620:	682b      	ldr	r3, [r5, #0]
 8015622:	6826      	ldr	r6, [r4, #0]
 8015624:	6961      	ldr	r1, [r4, #20]
 8015626:	1d18      	adds	r0, r3, #4
 8015628:	6028      	str	r0, [r5, #0]
 801562a:	0635      	lsls	r5, r6, #24
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	d501      	bpl.n	8015634 <_printf_i+0x1cc>
 8015630:	6019      	str	r1, [r3, #0]
 8015632:	e002      	b.n	801563a <_printf_i+0x1d2>
 8015634:	0670      	lsls	r0, r6, #25
 8015636:	d5fb      	bpl.n	8015630 <_printf_i+0x1c8>
 8015638:	8019      	strh	r1, [r3, #0]
 801563a:	2300      	movs	r3, #0
 801563c:	6123      	str	r3, [r4, #16]
 801563e:	4615      	mov	r5, r2
 8015640:	e7ba      	b.n	80155b8 <_printf_i+0x150>
 8015642:	682b      	ldr	r3, [r5, #0]
 8015644:	1d1a      	adds	r2, r3, #4
 8015646:	602a      	str	r2, [r5, #0]
 8015648:	681d      	ldr	r5, [r3, #0]
 801564a:	6862      	ldr	r2, [r4, #4]
 801564c:	2100      	movs	r1, #0
 801564e:	4628      	mov	r0, r5
 8015650:	f7ea fde6 	bl	8000220 <memchr>
 8015654:	b108      	cbz	r0, 801565a <_printf_i+0x1f2>
 8015656:	1b40      	subs	r0, r0, r5
 8015658:	6060      	str	r0, [r4, #4]
 801565a:	6863      	ldr	r3, [r4, #4]
 801565c:	6123      	str	r3, [r4, #16]
 801565e:	2300      	movs	r3, #0
 8015660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015664:	e7a8      	b.n	80155b8 <_printf_i+0x150>
 8015666:	6923      	ldr	r3, [r4, #16]
 8015668:	462a      	mov	r2, r5
 801566a:	4649      	mov	r1, r9
 801566c:	4640      	mov	r0, r8
 801566e:	47d0      	blx	sl
 8015670:	3001      	adds	r0, #1
 8015672:	d0ab      	beq.n	80155cc <_printf_i+0x164>
 8015674:	6823      	ldr	r3, [r4, #0]
 8015676:	079b      	lsls	r3, r3, #30
 8015678:	d413      	bmi.n	80156a2 <_printf_i+0x23a>
 801567a:	68e0      	ldr	r0, [r4, #12]
 801567c:	9b03      	ldr	r3, [sp, #12]
 801567e:	4298      	cmp	r0, r3
 8015680:	bfb8      	it	lt
 8015682:	4618      	movlt	r0, r3
 8015684:	e7a4      	b.n	80155d0 <_printf_i+0x168>
 8015686:	2301      	movs	r3, #1
 8015688:	4632      	mov	r2, r6
 801568a:	4649      	mov	r1, r9
 801568c:	4640      	mov	r0, r8
 801568e:	47d0      	blx	sl
 8015690:	3001      	adds	r0, #1
 8015692:	d09b      	beq.n	80155cc <_printf_i+0x164>
 8015694:	3501      	adds	r5, #1
 8015696:	68e3      	ldr	r3, [r4, #12]
 8015698:	9903      	ldr	r1, [sp, #12]
 801569a:	1a5b      	subs	r3, r3, r1
 801569c:	42ab      	cmp	r3, r5
 801569e:	dcf2      	bgt.n	8015686 <_printf_i+0x21e>
 80156a0:	e7eb      	b.n	801567a <_printf_i+0x212>
 80156a2:	2500      	movs	r5, #0
 80156a4:	f104 0619 	add.w	r6, r4, #25
 80156a8:	e7f5      	b.n	8015696 <_printf_i+0x22e>
 80156aa:	bf00      	nop
 80156ac:	0801866d 	.word	0x0801866d
 80156b0:	0801867e 	.word	0x0801867e

080156b4 <_sbrk_r>:
 80156b4:	b538      	push	{r3, r4, r5, lr}
 80156b6:	4d06      	ldr	r5, [pc, #24]	; (80156d0 <_sbrk_r+0x1c>)
 80156b8:	2300      	movs	r3, #0
 80156ba:	4604      	mov	r4, r0
 80156bc:	4608      	mov	r0, r1
 80156be:	602b      	str	r3, [r5, #0]
 80156c0:	f000 f954 	bl	801596c <_sbrk>
 80156c4:	1c43      	adds	r3, r0, #1
 80156c6:	d102      	bne.n	80156ce <_sbrk_r+0x1a>
 80156c8:	682b      	ldr	r3, [r5, #0]
 80156ca:	b103      	cbz	r3, 80156ce <_sbrk_r+0x1a>
 80156cc:	6023      	str	r3, [r4, #0]
 80156ce:	bd38      	pop	{r3, r4, r5, pc}
 80156d0:	2000a924 	.word	0x2000a924

080156d4 <__sread>:
 80156d4:	b510      	push	{r4, lr}
 80156d6:	460c      	mov	r4, r1
 80156d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156dc:	f000 f8d8 	bl	8015890 <_read_r>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	bfab      	itete	ge
 80156e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156e6:	89a3      	ldrhlt	r3, [r4, #12]
 80156e8:	181b      	addge	r3, r3, r0
 80156ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80156ee:	bfac      	ite	ge
 80156f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80156f2:	81a3      	strhlt	r3, [r4, #12]
 80156f4:	bd10      	pop	{r4, pc}

080156f6 <__swrite>:
 80156f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fa:	461f      	mov	r7, r3
 80156fc:	898b      	ldrh	r3, [r1, #12]
 80156fe:	05db      	lsls	r3, r3, #23
 8015700:	4605      	mov	r5, r0
 8015702:	460c      	mov	r4, r1
 8015704:	4616      	mov	r6, r2
 8015706:	d505      	bpl.n	8015714 <__swrite+0x1e>
 8015708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801570c:	2302      	movs	r3, #2
 801570e:	2200      	movs	r2, #0
 8015710:	f000 f870 	bl	80157f4 <_lseek_r>
 8015714:	89a3      	ldrh	r3, [r4, #12]
 8015716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801571a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801571e:	81a3      	strh	r3, [r4, #12]
 8015720:	4632      	mov	r2, r6
 8015722:	463b      	mov	r3, r7
 8015724:	4628      	mov	r0, r5
 8015726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801572a:	f000 b817 	b.w	801575c <_write_r>

0801572e <__sseek>:
 801572e:	b510      	push	{r4, lr}
 8015730:	460c      	mov	r4, r1
 8015732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015736:	f000 f85d 	bl	80157f4 <_lseek_r>
 801573a:	1c43      	adds	r3, r0, #1
 801573c:	89a3      	ldrh	r3, [r4, #12]
 801573e:	bf15      	itete	ne
 8015740:	6560      	strne	r0, [r4, #84]	; 0x54
 8015742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801574a:	81a3      	strheq	r3, [r4, #12]
 801574c:	bf18      	it	ne
 801574e:	81a3      	strhne	r3, [r4, #12]
 8015750:	bd10      	pop	{r4, pc}

08015752 <__sclose>:
 8015752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015756:	f000 b81b 	b.w	8015790 <_close_r>
	...

0801575c <_write_r>:
 801575c:	b538      	push	{r3, r4, r5, lr}
 801575e:	4d07      	ldr	r5, [pc, #28]	; (801577c <_write_r+0x20>)
 8015760:	4604      	mov	r4, r0
 8015762:	4608      	mov	r0, r1
 8015764:	4611      	mov	r1, r2
 8015766:	2200      	movs	r2, #0
 8015768:	602a      	str	r2, [r5, #0]
 801576a:	461a      	mov	r2, r3
 801576c:	f7eb fa18 	bl	8000ba0 <_write>
 8015770:	1c43      	adds	r3, r0, #1
 8015772:	d102      	bne.n	801577a <_write_r+0x1e>
 8015774:	682b      	ldr	r3, [r5, #0]
 8015776:	b103      	cbz	r3, 801577a <_write_r+0x1e>
 8015778:	6023      	str	r3, [r4, #0]
 801577a:	bd38      	pop	{r3, r4, r5, pc}
 801577c:	2000a924 	.word	0x2000a924

08015780 <abort>:
 8015780:	b508      	push	{r3, lr}
 8015782:	2006      	movs	r0, #6
 8015784:	f000 f8be 	bl	8015904 <raise>
 8015788:	2001      	movs	r0, #1
 801578a:	f000 f8fd 	bl	8015988 <_exit>
	...

08015790 <_close_r>:
 8015790:	b538      	push	{r3, r4, r5, lr}
 8015792:	4d06      	ldr	r5, [pc, #24]	; (80157ac <_close_r+0x1c>)
 8015794:	2300      	movs	r3, #0
 8015796:	4604      	mov	r4, r0
 8015798:	4608      	mov	r0, r1
 801579a:	602b      	str	r3, [r5, #0]
 801579c:	f7eb fa2c 	bl	8000bf8 <_close>
 80157a0:	1c43      	adds	r3, r0, #1
 80157a2:	d102      	bne.n	80157aa <_close_r+0x1a>
 80157a4:	682b      	ldr	r3, [r5, #0]
 80157a6:	b103      	cbz	r3, 80157aa <_close_r+0x1a>
 80157a8:	6023      	str	r3, [r4, #0]
 80157aa:	bd38      	pop	{r3, r4, r5, pc}
 80157ac:	2000a924 	.word	0x2000a924

080157b0 <_fstat_r>:
 80157b0:	b538      	push	{r3, r4, r5, lr}
 80157b2:	4d07      	ldr	r5, [pc, #28]	; (80157d0 <_fstat_r+0x20>)
 80157b4:	2300      	movs	r3, #0
 80157b6:	4604      	mov	r4, r0
 80157b8:	4608      	mov	r0, r1
 80157ba:	4611      	mov	r1, r2
 80157bc:	602b      	str	r3, [r5, #0]
 80157be:	f7eb fa71 	bl	8000ca4 <_fstat>
 80157c2:	1c43      	adds	r3, r0, #1
 80157c4:	d102      	bne.n	80157cc <_fstat_r+0x1c>
 80157c6:	682b      	ldr	r3, [r5, #0]
 80157c8:	b103      	cbz	r3, 80157cc <_fstat_r+0x1c>
 80157ca:	6023      	str	r3, [r4, #0]
 80157cc:	bd38      	pop	{r3, r4, r5, pc}
 80157ce:	bf00      	nop
 80157d0:	2000a924 	.word	0x2000a924

080157d4 <_isatty_r>:
 80157d4:	b538      	push	{r3, r4, r5, lr}
 80157d6:	4d06      	ldr	r5, [pc, #24]	; (80157f0 <_isatty_r+0x1c>)
 80157d8:	2300      	movs	r3, #0
 80157da:	4604      	mov	r4, r0
 80157dc:	4608      	mov	r0, r1
 80157de:	602b      	str	r3, [r5, #0]
 80157e0:	f7eb f9c6 	bl	8000b70 <_isatty>
 80157e4:	1c43      	adds	r3, r0, #1
 80157e6:	d102      	bne.n	80157ee <_isatty_r+0x1a>
 80157e8:	682b      	ldr	r3, [r5, #0]
 80157ea:	b103      	cbz	r3, 80157ee <_isatty_r+0x1a>
 80157ec:	6023      	str	r3, [r4, #0]
 80157ee:	bd38      	pop	{r3, r4, r5, pc}
 80157f0:	2000a924 	.word	0x2000a924

080157f4 <_lseek_r>:
 80157f4:	b538      	push	{r3, r4, r5, lr}
 80157f6:	4d07      	ldr	r5, [pc, #28]	; (8015814 <_lseek_r+0x20>)
 80157f8:	4604      	mov	r4, r0
 80157fa:	4608      	mov	r0, r1
 80157fc:	4611      	mov	r1, r2
 80157fe:	2200      	movs	r2, #0
 8015800:	602a      	str	r2, [r5, #0]
 8015802:	461a      	mov	r2, r3
 8015804:	f7eb fa12 	bl	8000c2c <_lseek>
 8015808:	1c43      	adds	r3, r0, #1
 801580a:	d102      	bne.n	8015812 <_lseek_r+0x1e>
 801580c:	682b      	ldr	r3, [r5, #0]
 801580e:	b103      	cbz	r3, 8015812 <_lseek_r+0x1e>
 8015810:	6023      	str	r3, [r4, #0]
 8015812:	bd38      	pop	{r3, r4, r5, pc}
 8015814:	2000a924 	.word	0x2000a924

08015818 <__malloc_lock>:
 8015818:	4801      	ldr	r0, [pc, #4]	; (8015820 <__malloc_lock+0x8>)
 801581a:	f7ff b9b1 	b.w	8014b80 <__retarget_lock_acquire_recursive>
 801581e:	bf00      	nop
 8015820:	2000a928 	.word	0x2000a928

08015824 <__malloc_unlock>:
 8015824:	4801      	ldr	r0, [pc, #4]	; (801582c <__malloc_unlock+0x8>)
 8015826:	f7ff b9ac 	b.w	8014b82 <__retarget_lock_release_recursive>
 801582a:	bf00      	nop
 801582c:	2000a928 	.word	0x2000a928

08015830 <_realloc_r>:
 8015830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015834:	4680      	mov	r8, r0
 8015836:	4614      	mov	r4, r2
 8015838:	460e      	mov	r6, r1
 801583a:	b921      	cbnz	r1, 8015846 <_realloc_r+0x16>
 801583c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015840:	4611      	mov	r1, r2
 8015842:	f7ff ba79 	b.w	8014d38 <_malloc_r>
 8015846:	b92a      	cbnz	r2, 8015854 <_realloc_r+0x24>
 8015848:	f7ff fa0a 	bl	8014c60 <_free_r>
 801584c:	4625      	mov	r5, r4
 801584e:	4628      	mov	r0, r5
 8015850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015854:	f000 f872 	bl	801593c <_malloc_usable_size_r>
 8015858:	4284      	cmp	r4, r0
 801585a:	4607      	mov	r7, r0
 801585c:	d802      	bhi.n	8015864 <_realloc_r+0x34>
 801585e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015862:	d812      	bhi.n	801588a <_realloc_r+0x5a>
 8015864:	4621      	mov	r1, r4
 8015866:	4640      	mov	r0, r8
 8015868:	f7ff fa66 	bl	8014d38 <_malloc_r>
 801586c:	4605      	mov	r5, r0
 801586e:	2800      	cmp	r0, #0
 8015870:	d0ed      	beq.n	801584e <_realloc_r+0x1e>
 8015872:	42bc      	cmp	r4, r7
 8015874:	4622      	mov	r2, r4
 8015876:	4631      	mov	r1, r6
 8015878:	bf28      	it	cs
 801587a:	463a      	movcs	r2, r7
 801587c:	f7fe fcae 	bl	80141dc <memcpy>
 8015880:	4631      	mov	r1, r6
 8015882:	4640      	mov	r0, r8
 8015884:	f7ff f9ec 	bl	8014c60 <_free_r>
 8015888:	e7e1      	b.n	801584e <_realloc_r+0x1e>
 801588a:	4635      	mov	r5, r6
 801588c:	e7df      	b.n	801584e <_realloc_r+0x1e>
	...

08015890 <_read_r>:
 8015890:	b538      	push	{r3, r4, r5, lr}
 8015892:	4d07      	ldr	r5, [pc, #28]	; (80158b0 <_read_r+0x20>)
 8015894:	4604      	mov	r4, r0
 8015896:	4608      	mov	r0, r1
 8015898:	4611      	mov	r1, r2
 801589a:	2200      	movs	r2, #0
 801589c:	602a      	str	r2, [r5, #0]
 801589e:	461a      	mov	r2, r3
 80158a0:	f7eb f9d8 	bl	8000c54 <_read>
 80158a4:	1c43      	adds	r3, r0, #1
 80158a6:	d102      	bne.n	80158ae <_read_r+0x1e>
 80158a8:	682b      	ldr	r3, [r5, #0]
 80158aa:	b103      	cbz	r3, 80158ae <_read_r+0x1e>
 80158ac:	6023      	str	r3, [r4, #0]
 80158ae:	bd38      	pop	{r3, r4, r5, pc}
 80158b0:	2000a924 	.word	0x2000a924

080158b4 <_raise_r>:
 80158b4:	291f      	cmp	r1, #31
 80158b6:	b538      	push	{r3, r4, r5, lr}
 80158b8:	4604      	mov	r4, r0
 80158ba:	460d      	mov	r5, r1
 80158bc:	d904      	bls.n	80158c8 <_raise_r+0x14>
 80158be:	2316      	movs	r3, #22
 80158c0:	6003      	str	r3, [r0, #0]
 80158c2:	f04f 30ff 	mov.w	r0, #4294967295
 80158c6:	bd38      	pop	{r3, r4, r5, pc}
 80158c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80158ca:	b112      	cbz	r2, 80158d2 <_raise_r+0x1e>
 80158cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80158d0:	b94b      	cbnz	r3, 80158e6 <_raise_r+0x32>
 80158d2:	4620      	mov	r0, r4
 80158d4:	f000 f830 	bl	8015938 <_getpid_r>
 80158d8:	462a      	mov	r2, r5
 80158da:	4601      	mov	r1, r0
 80158dc:	4620      	mov	r0, r4
 80158de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158e2:	f000 b817 	b.w	8015914 <_kill_r>
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d00a      	beq.n	8015900 <_raise_r+0x4c>
 80158ea:	1c59      	adds	r1, r3, #1
 80158ec:	d103      	bne.n	80158f6 <_raise_r+0x42>
 80158ee:	2316      	movs	r3, #22
 80158f0:	6003      	str	r3, [r0, #0]
 80158f2:	2001      	movs	r0, #1
 80158f4:	e7e7      	b.n	80158c6 <_raise_r+0x12>
 80158f6:	2400      	movs	r4, #0
 80158f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80158fc:	4628      	mov	r0, r5
 80158fe:	4798      	blx	r3
 8015900:	2000      	movs	r0, #0
 8015902:	e7e0      	b.n	80158c6 <_raise_r+0x12>

08015904 <raise>:
 8015904:	4b02      	ldr	r3, [pc, #8]	; (8015910 <raise+0xc>)
 8015906:	4601      	mov	r1, r0
 8015908:	6818      	ldr	r0, [r3, #0]
 801590a:	f7ff bfd3 	b.w	80158b4 <_raise_r>
 801590e:	bf00      	nop
 8015910:	20000028 	.word	0x20000028

08015914 <_kill_r>:
 8015914:	b538      	push	{r3, r4, r5, lr}
 8015916:	4d07      	ldr	r5, [pc, #28]	; (8015934 <_kill_r+0x20>)
 8015918:	2300      	movs	r3, #0
 801591a:	4604      	mov	r4, r0
 801591c:	4608      	mov	r0, r1
 801591e:	4611      	mov	r1, r2
 8015920:	602b      	str	r3, [r5, #0]
 8015922:	f000 f81b 	bl	801595c <_kill>
 8015926:	1c43      	adds	r3, r0, #1
 8015928:	d102      	bne.n	8015930 <_kill_r+0x1c>
 801592a:	682b      	ldr	r3, [r5, #0]
 801592c:	b103      	cbz	r3, 8015930 <_kill_r+0x1c>
 801592e:	6023      	str	r3, [r4, #0]
 8015930:	bd38      	pop	{r3, r4, r5, pc}
 8015932:	bf00      	nop
 8015934:	2000a924 	.word	0x2000a924

08015938 <_getpid_r>:
 8015938:	f000 b808 	b.w	801594c <_getpid>

0801593c <_malloc_usable_size_r>:
 801593c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015940:	1f18      	subs	r0, r3, #4
 8015942:	2b00      	cmp	r3, #0
 8015944:	bfbc      	itt	lt
 8015946:	580b      	ldrlt	r3, [r1, r0]
 8015948:	18c0      	addlt	r0, r0, r3
 801594a:	4770      	bx	lr

0801594c <_getpid>:
 801594c:	4b02      	ldr	r3, [pc, #8]	; (8015958 <_getpid+0xc>)
 801594e:	2258      	movs	r2, #88	; 0x58
 8015950:	601a      	str	r2, [r3, #0]
 8015952:	f04f 30ff 	mov.w	r0, #4294967295
 8015956:	4770      	bx	lr
 8015958:	2000a924 	.word	0x2000a924

0801595c <_kill>:
 801595c:	4b02      	ldr	r3, [pc, #8]	; (8015968 <_kill+0xc>)
 801595e:	2258      	movs	r2, #88	; 0x58
 8015960:	601a      	str	r2, [r3, #0]
 8015962:	f04f 30ff 	mov.w	r0, #4294967295
 8015966:	4770      	bx	lr
 8015968:	2000a924 	.word	0x2000a924

0801596c <_sbrk>:
 801596c:	4a04      	ldr	r2, [pc, #16]	; (8015980 <_sbrk+0x14>)
 801596e:	6811      	ldr	r1, [r2, #0]
 8015970:	4603      	mov	r3, r0
 8015972:	b909      	cbnz	r1, 8015978 <_sbrk+0xc>
 8015974:	4903      	ldr	r1, [pc, #12]	; (8015984 <_sbrk+0x18>)
 8015976:	6011      	str	r1, [r2, #0]
 8015978:	6810      	ldr	r0, [r2, #0]
 801597a:	4403      	add	r3, r0
 801597c:	6013      	str	r3, [r2, #0]
 801597e:	4770      	bx	lr
 8015980:	2000a934 	.word	0x2000a934
 8015984:	2000a938 	.word	0x2000a938

08015988 <_exit>:
 8015988:	e7fe      	b.n	8015988 <_exit>
	...

0801598c <_init>:
 801598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598e:	bf00      	nop
 8015990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015992:	bc08      	pop	{r3}
 8015994:	469e      	mov	lr, r3
 8015996:	4770      	bx	lr

08015998 <_fini>:
 8015998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801599a:	bf00      	nop
 801599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801599e:	bc08      	pop	{r3}
 80159a0:	469e      	mov	lr, r3
 80159a2:	4770      	bx	lr
