<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpc"/>
 <package name="AOs" stereotype="0x02">
  <class name="LwipDriver" superclass="qpc::QActive">
   <attribute name="te" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="text[20]" type="char" visibility="0x00" properties="0x00"/>
   <attribute name="netif" type="struct netif *" visibility="0x02" properties="0x00"/>
   <attribute name="upcb" type="struct udp_pcb *" visibility="0x02" properties="0x00"/>
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;LwipDriver_initial);
QTimeEvt_ctorX(&amp;me-&gt;te,&amp;me-&gt;super,LWIP_PROCESS_SIG,0U);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1">
     <action>
err_t PosErr=0;
me-&gt;upcb = udp_new();
IP4_ADDR(&amp;me-&gt;upcb-&gt;remote_ip,REMOTEIP_1,REMOTEIP_2,REMOTEIP_3,REMOTEIP_4);
me-&gt;upcb-&gt;remote_port = UDP_SERVER_PORT;
IP4_ADDR(&amp;me-&gt;upcb-&gt;local_ip,LOCALIP_1,LOCALIP_2,LOCALIP_3,LOCALIP_4);
me-&gt;upcb-&gt;local_port = UDP_CLIENT_PORT;
PosErr = udp_bind(me-&gt;upcb, &amp;me-&gt;upcb-&gt;local_ip,me-&gt;upcb-&gt;local_port);
if(PosErr == 0){
  udp_recv(me-&gt;upcb, &amp;udp_rx_callback, NULL);
}

QActive_subscribe((QActive *)me, LWIP_TX_SIG);
</action>
     <initial_glyph conn="56,4,5,0,13,11">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="LwipMngr">
     <entry brief="arm-te-event">QTimeEvt_armX(&amp;me-&gt;te, OS_TICKS_PER_SEC/2, OS_TICKS_PER_SEC/2);</entry>
     <exit brief="disarm-te-event">QTimeEvt_disarm(&amp;me-&gt;te);</exit>
     <tran trig="LWIP_PROCESS">
      <action>//MX_LWIP_Process();</action>
      <tran_glyph conn="43,34,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_RX">
      <action>char temptext[20];
strncpy(temptext, ((TextEvt const *)e)-&gt;text,Q_DIM(temptext));</action>
      <tran_glyph conn="43,30,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="LWIP_TX">
      <action>struct pbuf *p = pbuf_new((u8_t *)((TextEvt const *)e)-&gt;text,
                      strlen(((TextEvt const *)e)-&gt;text) + 1);
if (p != (struct pbuf *)0) {
    udp_send(me-&gt;upcb, p);
    pbuf_free(p);                   /* don't leak the pbuf! */
}</action>
      <tran_glyph conn="43,26,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="43,15,28,26">
      <entry box="1,2,14,2"/>
      <exit box="1,4,14,2"/>
     </state_glyph>
    </state>
    <state_diagram size="199,112"/>
   </statechart>
  </class>
  <class name="UartDriver" superclass="qpc::QActive">
   <attribute name="te" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="text[20]" type="char" visibility="0x00" properties="0x00"/>
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;UartDriver_initial);
QTimeEvt_ctorX(&amp;me-&gt;te,&amp;me-&gt;super,UART_PROCESS_SIG,0U);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1">
     <action>QActive_subscribe((QActive *)me, UART_TX_SIG);
QActive_subscribe((QActive *)me, UART_RX_SIG);</action>
     <initial_glyph conn="56,4,5,0,13,11">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="UartMngr">
     <entry brief="arm-te-event">QTimeEvt_armX(&amp;me-&gt;te, OS_TICKS_PER_SEC/2, OS_TICKS_PER_SEC/2);</entry>
     <exit brief="disarm-te-event">QTimeEvt_disarm(&amp;me-&gt;te);</exit>
     <tran trig="UART_PROCESS">
      <action>__NOP();</action>
      <tran_glyph conn="43,34,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="UART_RX">
      <action>static uint16_t receive_num=0;
receive_num++;
char temptext[20];
strncpy(temptext, ((TextEvt const *)e)-&gt;text,Q_DIM(temptext));
HAL_UART_Transmit(&amp;huart3,(uint8_t *)temptext,sizeof(temptext),10);</action>
      <tran_glyph conn="43,30,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="UART_TX">
      <action>char temptext[MAX_TEXT_LEN];
uint16_t size=0;
size = sprintf(temptext,((TextEvt const *)e)-&gt;text);
__NOP();</action>
      <tran_glyph conn="43,26,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="43,15,28,26">
      <entry box="1,2,14,2"/>
      <exit box="1,4,14,2"/>
     </state_glyph>
    </state>
    <state_diagram size="199,112"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <directory name="Src">
   <file name="LwipDriver.c">
    <text>
#include &quot;CommDriver.h&quot;


#define OS_TICKS_PER_SEC 2
#define UDP_SERVER_PORT    8   /* define the UDP local connection port */
#define UDP_CLIENT_PORT    7   /* define the UDP remote connection port */

#define LOCALIP_1 192
#define LOCALIP_2 168
#define LOCALIP_3 0
#define LOCALIP_4 10

#define REMOTEIP_1 192
#define REMOTEIP_2 168
#define REMOTEIP_3 0
#define REMOTEIP_4 1


struct pbuf *pbuf_new(u8_t *data, u16_t len);
void udp_rx_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

$define${AOs::LwipDriver}


/**
  * @brief This function is called when an UDP datagrm has been received on the port UDP_PORT.
  * @param arg user supplied argument (udp_pcb.recv_arg)
  * @param pcb the udp_pcb which received data
  * @param p the packet buffer that was received
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_rx_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  //QActive const *AO_LwipDriver;
  TextEvt *te = Q_NEW(TextEvt, LWIP_TX_SIG);
  snprintf(te-&gt;text,MAX_TEXT_LEN,(char *)p-&gt;payload);
  QF_PUBLISH((QEvt *)te, AO_LwipDriver);
  TextEvt *re = Q_NEW(TextEvt, UART_TX_SIG);
  snprintf(re-&gt;text,MAX_TEXT_LEN,(char *)p-&gt;payload);
  QF_PUBLISH((QEvt *)re, AO_LwipDriver);
  pbuf_free(p); /* don't leak the pbuf! */

}


/**
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  //QActive * const AO_LwipDriver;
  UNUSED(GPIO_Pin);
  //TextEvt *te = Q_NEW(TextEvt, LWIP_TX_SIG);
  //strcpy(te-&gt;text, &quot;Butona Basildi\n&quot;);
  //QACTIVE_POST(AO_LwipDriver, (QEvt *)te, 0U);
}

/* utilities added by QL ...................................................*/
/**
* Allocate a transport-layer pbuf and copies the provided data buffer 'data'
* of length 'len' bytes into the payload(s) of the pbuf. The function takes
* care of splitting the data into successive pbuf payloads, if necessary.
*
* The function returns the newly created pbuf or NULL if the pbuf cannot
* be allocated.
*/
struct pbuf *pbuf_new(u8_t *data, u16_t len) {
    struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
    struct pbuf *q = p;
    while ((q != (struct pbuf *)0) &amp;&amp; (len &gt;= q-&gt;len)) {
        memcpy(q-&gt;payload, data, q-&gt;len);         /* copy data into payload */
        len  -= q-&gt;len;                                 /* remaining length */
        data += q-&gt;len;                              /* remainig data chunk */
        q = q-&gt;next;                                       /* get next pbuf */
    }
    return p;
}


</text>
   </file>
   <file name="UartDriver.c">
    <text>#include &quot;CommDriver.h&quot;
#include &quot;string.h&quot;
#include &quot;stdlib.h&quot;
#include &quot;stdio.h&quot;


#define OS_TICKS_PER_SEC 2

extern UART_HandleTypeDef huart3;

$define${AOs::UartDriver}

/**
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

 // QActive * const AO_UartDriver;
  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);

  static uint16_t receive_num=0;
  receive_num++;

  TextEvt *te = Q_NEW(TextEvt, UART_RX_SIG);
  strncpy(te-&gt;text,(char *)huart-&gt;pRxBuffPtr,Q_DIM(te-&gt;text));
  QF_PUBLISH((QEvt *)te, AO_UartDriver);

  __NOP();
}






</text>
   </file>
  </directory>
  <directory name="Inc">
   <file name="CommDriver.h">
    <text>#include &quot;qpc.h&quot;
#include &quot;main.h&quot;
#include &quot;lwip/udp.h&quot;
#include &quot;lwip/pbuf.h&quot;
#include &quot;string.h&quot;
#include &quot;stdio.h&quot;

//#include &quot;lwip.h&quot;
//#include &quot;lwip/init.h&quot;
//#include &quot;lwip/netif.h&quot;
//#include &quot;ethernetif.h&quot;


#define MAX_TEXT_LEN 1000

enum CommDriverSignals{
    LWIP_PROCESS_SIG = Q_USER_SIG,
    LWIP_RX_SIG,
    LWIP_TX_SIG,
    UART_PROCESS_SIG,
    UART_RX_SIG,
    UART_TX_SIG
};

typedef struct TextEvtTag {
    QEvt super;                                          /* derives from QEvt */
    char text[MAX_TEXT_LEN];                             /* text to deliver */
}TextEvt;

$declare${AOs::LwipDriver}
$declare${AOs::UartDriver}
</text>
   </file>
  </directory>
 </directory>
</model>
