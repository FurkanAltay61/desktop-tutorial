
TimeBomb_QHSM_Manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004afc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db8  08004db8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dc0  08004dc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000074  08004e3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004e3c  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d56  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e8  00000000  00000000  00032dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  000367e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  000373f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281c9  00000000  00000000  00037e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107fa  00000000  00000000  00060061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3ee4  00000000  00000000  0007085b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016473f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003230  00000000  00000000  00164790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004cac 	.word	0x08004cac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	08004cac 	.word	0x08004cac

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <__NVIC_SystemReset+0x24>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800051e:	4904      	ldr	r1, [pc, #16]	; (8000530 <__NVIC_SystemReset+0x24>)
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <__NVIC_SystemReset+0x28>)
 8000522:	4313      	orrs	r3, r2
 8000524:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000526:	f3bf 8f4f 	dsb	sy
}
 800052a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <__NVIC_SystemReset+0x20>
 8000530:	e000ed00 	.word	0xe000ed00
 8000534:	05fa0004 	.word	0x05fa0004

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fb7a 	bl	8000c36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f837 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f8d3 	bl	80006f0 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 800054a:	f000 f8a1 	bl	8000690 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 800054e:	4814      	ldr	r0, [pc, #80]	; (80005a0 <main+0x68>)
 8000550:	f000 f998 	bl	8000884 <RetargetInit>

  QF_init();
 8000554:	f003 fbcc 	bl	8003cf0 <QF_init>
  TimeBomb_ctor(&timebomb);
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <main+0x6c>)
 800055a:	f003 fde1 	bl	8004120 <TimeBomb_ctor>
  QACTIVE_START(AO_TimeBomb,2U,TimeBomb_queue,sizeof(TimeBomb_queue)/sizeof(TimeBomb_queue[0]),(void*)0,0U,(void*)0);
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <main+0x70>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d103      	bne.n	8000570 <main+0x38>
 8000568:	217d      	movs	r1, #125	; 0x7d
 800056a:	4810      	ldr	r0, [pc, #64]	; (80005ac <main+0x74>)
 800056c:	f000 f976 	bl	800085c <Q_onAssert>
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <main+0x70>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	689c      	ldr	r4, [r3, #8]
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x70>)
 800057a:	6818      	ldr	r0, [r3, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2300      	movs	r3, #0
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2300      	movs	r3, #0
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <main+0x78>)
 800058c:	2102      	movs	r1, #2
 800058e:	47a0      	blx	r4
  QF_run();
 8000590:	f003 fbd6 	bl	8003d40 <QF_run>
  return 0;
 8000594:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000596:	4618      	mov	r0, r3
 8000598:	3704      	adds	r7, #4
 800059a:	46bd      	mov	sp, r7
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000ec 	.word	0x200000ec
 80005a4:	200000b8 	.word	0x200000b8
 80005a8:	20000000 	.word	0x20000000
 80005ac:	08004cc4 	.word	0x08004cc4
 80005b0:	20000090 	.word	0x20000090

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 ff24 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f000 fea4 	bl	8001324 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <SystemClock_Config+0xd4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <SystemClock_Config+0xd4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xd4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xd8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a24      	ldr	r2, [pc, #144]	; (800068c <SystemClock_Config+0xd8>)
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000610:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000624:	23d8      	movs	r3, #216	; 0xd8
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800062c:	2309      	movs	r3, #9
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fed5 	bl	80013e4 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000640:	f000 f91a 	bl	8000878 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000644:	f000 fe7e 	bl	8001344 <HAL_PWREx_EnableOverDrive>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800064e:	f000 f913 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2107      	movs	r1, #7
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f95b 	bl	800192c <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800067c:	f000 f8fc 	bl	8000878 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART3_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART3_UART_Init+0x58>)
 80006d4:	f001 ff40 	bl	8002558 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f8cb 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000ec 	.word	0x200000ec
 80006ec:	40004800 	.word	0x40004800

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b51      	ldr	r3, [pc, #324]	; (800084c <MX_GPIO_Init+0x15c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a50      	ldr	r2, [pc, #320]	; (800084c <MX_GPIO_Init+0x15c>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b4e      	ldr	r3, [pc, #312]	; (800084c <MX_GPIO_Init+0x15c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MX_GPIO_Init+0x15c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a4a      	ldr	r2, [pc, #296]	; (800084c <MX_GPIO_Init+0x15c>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b48      	ldr	r3, [pc, #288]	; (800084c <MX_GPIO_Init+0x15c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b45      	ldr	r3, [pc, #276]	; (800084c <MX_GPIO_Init+0x15c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a44      	ldr	r2, [pc, #272]	; (800084c <MX_GPIO_Init+0x15c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b42      	ldr	r3, [pc, #264]	; (800084c <MX_GPIO_Init+0x15c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b3f      	ldr	r3, [pc, #252]	; (800084c <MX_GPIO_Init+0x15c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a3e      	ldr	r2, [pc, #248]	; (800084c <MX_GPIO_Init+0x15c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b3c      	ldr	r3, [pc, #240]	; (800084c <MX_GPIO_Init+0x15c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_GPIO_Init+0x15c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a38      	ldr	r2, [pc, #224]	; (800084c <MX_GPIO_Init+0x15c>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_GPIO_Init+0x15c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_GPIO_Init+0x15c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a32      	ldr	r2, [pc, #200]	; (800084c <MX_GPIO_Init+0x15c>)
 8000784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_GPIO_Init+0x15c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f244 0181 	movw	r1, #16513	; 0x4081
 800079c:	482c      	ldr	r0, [pc, #176]	; (8000850 <MX_GPIO_Init+0x160>)
 800079e:	f000 fd83 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	482b      	ldr	r0, [pc, #172]	; (8000854 <MX_GPIO_Init+0x164>)
 80007a8:	f000 fd7e 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007b2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b8:	2302      	movs	r3, #2
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4825      	ldr	r0, [pc, #148]	; (8000858 <MX_GPIO_Init+0x168>)
 80007c4:	f000 fbac 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	481b      	ldr	r0, [pc, #108]	; (8000850 <MX_GPIO_Init+0x160>)
 80007e2:	f000 fb9d 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4815      	ldr	r0, [pc, #84]	; (8000854 <MX_GPIO_Init+0x164>)
 80007fe:	f000 fb8f 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	480f      	ldr	r0, [pc, #60]	; (8000854 <MX_GPIO_Init+0x164>)
 8000816:	f000 fb83 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTON2_Pin BUTON1_Pin */
  GPIO_InitStruct.Pin = BUTON2_Pin|BUTON1_Pin;
 800081a:	2330      	movs	r3, #48	; 0x30
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000822:	2302      	movs	r3, #2
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <MX_GPIO_Init+0x160>)
 800082e:	f000 fb77 	bl	8000f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2028      	movs	r0, #40	; 0x28
 8000838:	f000 fb35 	bl	8000ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083c:	2028      	movs	r0, #40	; 0x28
 800083e:	f000 fb4e 	bl	8000ede <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3730      	adds	r7, #48	; 0x30
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400
 8000854:	40021800 	.word	0x40021800
 8000858:	40020800 	.word	0x40020800

0800085c <Q_onAssert>:

/* USER CODE BEGIN 4 */

void Q_onAssert(char const *module, int loc) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 8000866:	f7ff fe51 	bl	800050c <__NVIC_SystemReset>

0800086a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */

	App_TimeTickHook();
 800086e:	f003 fb21 	bl	8003eb4 <App_TimeTickHook>
	__NOP();
 8000872:	bf00      	nop
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <RetargetInit+0x28>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <RetargetInit+0x2c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6898      	ldr	r0, [r3, #8]
 8000898:	2300      	movs	r3, #0
 800089a:	2202      	movs	r2, #2
 800089c:	2100      	movs	r1, #0
 800089e:	f003 fdbf 	bl	8004420 <setvbuf>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000170 	.word	0x20000170
 80008b0:	20000010 	.word	0x20000010

080008b4 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d002      	beq.n	80008cc <_write+0x18>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d111      	bne.n	80008f0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <_write+0x54>)
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	f001 fe8b 	bl	80025f4 <HAL_UART_Transmit>
 80008de:	4603      	mov	r3, r0
 80008e0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <_write+0x38>
      return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	e008      	b.n	80008fe <_write+0x4a>
    else
      return EIO;
 80008ec:	2305      	movs	r3, #5
 80008ee:	e006      	b.n	80008fe <_write+0x4a>
  }
  errno = EBADF;
 80008f0:	f003 fd64 	bl	80043bc <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2209      	movs	r2, #9
 80008f8:	601a      	str	r2, [r3, #0]
  return -1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000170 	.word	0x20000170

0800090c <_close>:

int _close(int fd) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db04      	blt.n	8000924 <_close+0x18>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b02      	cmp	r3, #2
 800091e:	dc01      	bgt.n	8000924 <_close+0x18>
    return 0;
 8000920:	2300      	movs	r3, #0
 8000922:	e006      	b.n	8000932 <_close+0x26>

  errno = EBADF;
 8000924:	f003 fd4a 	bl	80043bc <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	2209      	movs	r2, #9
 800092c:	601a      	str	r2, [r3, #0]
  return -1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000946:	f003 fd39 	bl	80043bc <__errno>
 800094a:	4603      	mov	r3, r0
 800094c:	2209      	movs	r2, #9
 800094e:	601a      	str	r2, [r3, #0]
  return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <_read>:

int _read(int fd, char* ptr, int len) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d110      	bne.n	8000990 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <_read+0x4c>)
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	2201      	movs	r2, #1
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	f001 fece 	bl	800271a <HAL_UART_Receive>
 800097e:	4603      	mov	r3, r0
 8000980:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000982:	7dfb      	ldrb	r3, [r7, #23]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <_read+0x30>
      return 1;
 8000988:	2301      	movs	r3, #1
 800098a:	e008      	b.n	800099e <_read+0x42>
    else
      return EIO;
 800098c:	2305      	movs	r3, #5
 800098e:	e006      	b.n	800099e <_read+0x42>
  }
  errno = EBADF;
 8000990:	f003 fd14 	bl	80043bc <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	2209      	movs	r2, #9
 8000998:	601a      	str	r2, [r3, #0]
  return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000170 	.word	0x20000170

080009ac <_fstat>:

int _fstat(int fd, struct stat* st) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db08      	blt.n	80009ce <_fstat+0x22>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	dc05      	bgt.n	80009ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c8:	605a      	str	r2, [r3, #4]
    return 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e005      	b.n	80009da <_fstat+0x2e>
  }

  errno = EBADF;
 80009ce:	f003 fcf5 	bl	80043bc <__errno>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2209      	movs	r2, #9
 80009d6:	601a      	str	r2, [r3, #0]
  return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0aa      	sub	sp, #168	; 0xa8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2284      	movs	r2, #132	; 0x84
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fcdf 	bl	8004410 <memset>
  if(huart->Instance==USART3)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <HAL_UART_MspInit+0xb4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d13c      	bne.n	8000ad6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f984 	bl	8001d78 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a76:	f7ff feff 	bl	8000878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_UART_MspInit+0xb8>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_UART_MspInit+0xb8>)
 8000a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0xb8>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0xb8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <HAL_UART_MspInit+0xb8>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_UART_MspInit+0xb8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_UART_MspInit+0xbc>)
 8000ad2:	f000 fa25 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	37a8      	adds	r7, #168	; 0xa8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40004800 	.word	0x40004800
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f8ba 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000b3c:	f000 f9e9 	bl	8000f12 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000b48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b4c:	f000 fbc6 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f003 fc1a 	bl	80043bc <__errno>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <_sbrk+0x64>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20050000 	.word	0x20050000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	20000174 	.word	0x20000174
 8000bbc:	20000288 	.word	0x20000288

08000bc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0e:	f7ff ffd7 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f003 fbd9 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fc8f 	bl	8000538 <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c28:	08004dc8 	.word	0x08004dc8
  ldr r2, =_sbss
 8000c2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c30:	20000284 	.word	0x20000284

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>

08000c36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 f928 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f805 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c46:	f7ff fecd 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f943 	bl	8000efa <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f90b 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	20000178 	.word	0x20000178

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000178 	.word	0x20000178

08000cf0 <__NVIC_SetPriorityGrouping>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	05fa0000 	.word	0x05fa0000

08000d38 <__NVIC_GetPriorityGrouping>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff3e 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff31 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa2 	bl	8000e4c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f16:	f7ff fca8 	bl	800086a <HAL_SYSTICK_Callback>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e175      	b.n	800122c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8164 	bne.w	8001226 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_GPIO_Init+0x56>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80be 	beq.w	8001226 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b66      	ldr	r3, [pc, #408]	; (8001244 <HAL_GPIO_Init+0x324>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a65      	ldr	r2, [pc, #404]	; (8001244 <HAL_GPIO_Init+0x324>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b63      	ldr	r3, [pc, #396]	; (8001244 <HAL_GPIO_Init+0x324>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010c2:	4a61      	ldr	r2, [pc, #388]	; (8001248 <HAL_GPIO_Init+0x328>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_GPIO_Init+0x32c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d037      	beq.n	800115e <HAL_GPIO_Init+0x23e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a57      	ldr	r2, [pc, #348]	; (8001250 <HAL_GPIO_Init+0x330>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d031      	beq.n	800115a <HAL_GPIO_Init+0x23a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a56      	ldr	r2, [pc, #344]	; (8001254 <HAL_GPIO_Init+0x334>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x236>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a55      	ldr	r2, [pc, #340]	; (8001258 <HAL_GPIO_Init+0x338>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x232>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a54      	ldr	r2, [pc, #336]	; (800125c <HAL_GPIO_Init+0x33c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x22e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a53      	ldr	r2, [pc, #332]	; (8001260 <HAL_GPIO_Init+0x340>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x22a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_GPIO_Init+0x344>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x226>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_GPIO_Init+0x348>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x222>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a50      	ldr	r2, [pc, #320]	; (800126c <HAL_GPIO_Init+0x34c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x21e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x350>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x21a>
 8001136:	2309      	movs	r3, #9
 8001138:	e012      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800113a:	230a      	movs	r3, #10
 800113c:	e010      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800113e:	2308      	movs	r3, #8
 8001140:	e00e      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001142:	2307      	movs	r3, #7
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001146:	2306      	movs	r3, #6
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x240>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x240>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x328>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_GPIO_Init+0x354>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a34      	ldr	r2, [pc, #208]	; (8001274 <HAL_GPIO_Init+0x354>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b32      	ldr	r3, [pc, #200]	; (8001274 <HAL_GPIO_Init+0x354>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_GPIO_Init+0x354>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <HAL_GPIO_Init+0x354>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <HAL_GPIO_Init+0x354>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_GPIO_Init+0x354>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_GPIO_Init+0x354>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae86 	bls.w	8000f40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40021c00 	.word	0x40021c00
 800126c:	40022000 	.word	0x40022000
 8001270:	40022400 	.word	0x40022400
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e001      	b.n	800129a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f806 	bl	800130c <HAL_GPIO_EXTI_Callback>
  }
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40007000 	.word	0x40007000

08001344 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a22      	ldr	r2, [pc, #136]	; (80013dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_PWREx_EnableOverDrive+0x98>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001372:	f7ff fcb1 	bl	8000cd8 <HAL_GetTick>
 8001376:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001378:	e009      	b.n	800138e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800137a:	f7ff fcad 	bl	8000cd8 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001388:	d901      	bls.n	800138e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e022      	b.n	80013d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139a:	d1ee      	bne.n	800137a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a8:	f7ff fc96 	bl	8000cd8 <HAL_GetTick>
 80013ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ae:	e009      	b.n	80013c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013b0:	f7ff fc92 	bl	8000cd8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013be:	d901      	bls.n	80013c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e007      	b.n	80013d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013d0:	d1ee      	bne.n	80013b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e291      	b.n	800191e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8087 	beq.w	8001516 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001408:	4b96      	ldr	r3, [pc, #600]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b04      	cmp	r3, #4
 8001412:	d00c      	beq.n	800142e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001414:	4b93      	ldr	r3, [pc, #588]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d112      	bne.n	8001446 <HAL_RCC_OscConfig+0x62>
 8001420:	4b90      	ldr	r3, [pc, #576]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800142c:	d10b      	bne.n	8001446 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142e:	4b8d      	ldr	r3, [pc, #564]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d06c      	beq.n	8001514 <HAL_RCC_OscConfig+0x130>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d168      	bne.n	8001514 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e26b      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x7a>
 8001450:	4b84      	ldr	r3, [pc, #528]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a83      	ldr	r2, [pc, #524]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e02e      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x9c>
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800146c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7b      	ldr	r2, [pc, #492]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0xc0>
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b73      	ldr	r3, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a72      	ldr	r2, [pc, #456]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 80014a4:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6e      	ldr	r2, [pc, #440]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b6c      	ldr	r3, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6b      	ldr	r2, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc08 	bl	8000cd8 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fc04 	bl	8000cd8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e21f      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b61      	ldr	r3, [pc, #388]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xe8>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbf4 	bl	8000cd8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fbf0 	bl	8000cd8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e20b      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x110>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d069      	beq.n	80015f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001522:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x190>
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x17a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1df      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	493d      	ldr	r1, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e040      	b.n	80015f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d023      	beq.n	80015c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fba6 	bl	8000cd8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fba2 	bl	8000cd8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1bd      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4929      	ldr	r1, [pc, #164]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
 80015c2:	e018      	b.n	80015f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a26      	ldr	r2, [pc, #152]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb82 	bl	8000cd8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fb7e 	bl	8000cd8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e199      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d038      	beq.n	8001674 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d019      	beq.n	800163e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fb5f 	bl	8000cd8 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fb5b 	bl	8000cd8 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e176      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x23a>
 800163c:	e01a      	b.n	8001674 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff fb45 	bl	8000cd8 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fb41 	bl	8000cd8 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d903      	bls.n	8001668 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e15c      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
 8001664:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b91      	ldr	r3, [pc, #580]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ee      	bne.n	8001652 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a4 	beq.w	80017ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b8b      	ldr	r3, [pc, #556]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a87      	ldr	r2, [pc, #540]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b85      	ldr	r3, [pc, #532]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016b6:	4b7f      	ldr	r3, [pc, #508]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a7e      	ldr	r2, [pc, #504]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb09 	bl	8000cd8 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7ff fb05 	bl	8000cd8 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e120      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016dc:	4b75      	ldr	r3, [pc, #468]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x31a>
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f4:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6713      	str	r3, [r2, #112]	; 0x70
 80016fc:	e02d      	b.n	800175a <HAL_RCC_OscConfig+0x376>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x33c>
 8001706:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	4a69      	ldr	r2, [pc, #420]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6713      	str	r3, [r2, #112]	; 0x70
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a66      	ldr	r2, [pc, #408]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
 800171e:	e01c      	b.n	800175a <HAL_RCC_OscConfig+0x376>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x35e>
 8001728:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a60      	ldr	r2, [pc, #384]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a5d      	ldr	r2, [pc, #372]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x376>
 8001742:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d015      	beq.n	800178e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fab9 	bl	8000cd8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fab5 	bl	8000cd8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0ce      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ee      	beq.n	800176a <HAL_RCC_OscConfig+0x386>
 800178c:	e014      	b.n	80017b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff faa3 	bl	8000cd8 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff fa9f 	bl	8000cd8 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ee      	bne.n	8001796 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d105      	bne.n	80017ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017be:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80017c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80a4 	beq.w	800191c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d06b      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d149      	bne.n	800187c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a30      	ldr	r2, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa70 	bl	8000cd8 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fa6c 	bl	8000cd8 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e087      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	3b01      	subs	r3, #1
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4313      	orrs	r3, r2
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001846:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fa40 	bl	8000cd8 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fa3c 	bl	8000cd8 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e057      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x478>
 800187a:	e04f      	b.n	800191c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fa26 	bl	8000cd8 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fa22 	bl	8000cd8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e03d      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x4cc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x4ac>
 80018ae:	e035      	b.n	800191c <HAL_RCC_OscConfig+0x538>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x544>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d028      	beq.n	8001918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d121      	bne.n	8001918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11a      	bne.n	8001918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d111      	bne.n	8001918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	3b01      	subs	r3, #1
 8001902:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d107      	bne.n	8001918 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0d0      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 020f 	bic.w	r2, r3, #15
 800195a:	4965      	ldr	r1, [pc, #404]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b8      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198c:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	494d      	ldr	r1, [pc, #308]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d040      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d115      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e07f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e073      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06b      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4936      	ldr	r1, [pc, #216]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a20:	f7ff f95a 	bl	8000cd8 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f956 	bl	8000cd8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e053      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d210      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 020f 	bic.w	r2, r3, #15
 8001a66:	4922      	ldr	r1, [pc, #136]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e032      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4916      	ldr	r1, [pc, #88]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	490e      	ldr	r1, [pc, #56]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 f821 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	490a      	ldr	r1, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1d0>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1d4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f8b6 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08004ccc 	.word	0x08004ccc
 8001afc:	20000004 	.word	0x20000004
 8001b00:	20000008 	.word	0x20000008

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b094      	sub	sp, #80	; 0x50
 8001b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1c:	4b79      	ldr	r3, [pc, #484]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d00d      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x40>
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	f200 80e1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x34>
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b36:	e0db      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b3c:	e0db      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b42:	e0d8      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b44:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b4e:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	2200      	movs	r2, #0
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
 8001b72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b76:	4622      	mov	r2, r4
 8001b78:	462b      	mov	r3, r5
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	0159      	lsls	r1, r3, #5
 8001b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b88:	0150      	lsls	r0, r2, #5
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4621      	mov	r1, r4
 8001b90:	1a51      	subs	r1, r2, r1
 8001b92:	6139      	str	r1, [r7, #16]
 8001b94:	4629      	mov	r1, r5
 8001b96:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ba8:	4659      	mov	r1, fp
 8001baa:	018b      	lsls	r3, r1, #6
 8001bac:	4651      	mov	r1, sl
 8001bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb2:	4651      	mov	r1, sl
 8001bb4:	018a      	lsls	r2, r1, #6
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bbc:	4659      	mov	r1, fp
 8001bbe:	eb63 0901 	sbc.w	r9, r3, r1
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	4699      	mov	r9, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	eb18 0303 	adds.w	r3, r8, r3
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	462b      	mov	r3, r5
 8001be4:	eb49 0303 	adc.w	r3, r9, r3
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	024b      	lsls	r3, r1, #9
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c00:	4621      	mov	r1, r4
 8001c02:	024a      	lsls	r2, r1, #9
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c14:	f7fe faf8 	bl	8000208 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c20:	e058      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c3c:	4642      	mov	r2, r8
 8001c3e:	464b      	mov	r3, r9
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	0159      	lsls	r1, r3, #5
 8001c4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4e:	0150      	lsls	r0, r2, #5
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4641      	mov	r1, r8
 8001c56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c74:	ebb2 040a 	subs.w	r4, r2, sl
 8001c78:	eb63 050b 	sbc.w	r5, r3, fp
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	00eb      	lsls	r3, r5, #3
 8001c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8a:	00e2      	lsls	r2, r4, #3
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	461d      	mov	r5, r3
 8001c90:	4643      	mov	r3, r8
 8001c92:	18e3      	adds	r3, r4, r3
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	464b      	mov	r3, r9
 8001c98:	eb45 0303 	adc.w	r3, r5, r3
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	61fa      	str	r2, [r7, #28]
 8001cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc8:	f7fe fa9e 	bl	8000208 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3750      	adds	r7, #80	; 0x50
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08004cdc 	.word	0x08004cdc

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffdc 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0b5b      	lsrs	r3, r3, #13
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08004cdc 	.word	0x08004cdc

08001d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001da0:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a68      	ldr	r2, [pc, #416]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001daa:	6093      	str	r3, [r2, #8]
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db4:	4964      	ldr	r1, [pc, #400]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d017      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	4959      	ldr	r1, [pc, #356]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df0:	d101      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d017      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	494a      	ldr	r1, [pc, #296]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 808b 	beq.w	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a39      	ldr	r2, [pc, #228]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e80:	f7fe ff2a 	bl	8000cd8 <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e88:	f7fe ff26 	bl	8000cd8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e357      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d035      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d02e      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d114      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe feee 	bl	8000cd8 <HAL_GetTick>
 8001efc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe feea 	bl	8000cd8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e319      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	4901      	ldr	r1, [pc, #4]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	0ffffcff 	.word	0x0ffffcff
 8001f54:	4baa      	ldr	r3, [pc, #680]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4aa9      	ldr	r2, [pc, #676]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f5e:	6093      	str	r3, [r2, #8]
 8001f60:	4ba7      	ldr	r3, [pc, #668]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6c:	49a4      	ldr	r1, [pc, #656]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f7e:	4ba0      	ldr	r3, [pc, #640]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f84:	4a9e      	ldr	r2, [pc, #632]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f8e:	4b9c      	ldr	r3, [pc, #624]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	4999      	ldr	r1, [pc, #612]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fac:	4b94      	ldr	r3, [pc, #592]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fba:	4991      	ldr	r1, [pc, #580]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fce:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fdc:	4988      	ldr	r1, [pc, #544]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ff0:	4b83      	ldr	r3, [pc, #524]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ffe:	4980      	ldr	r1, [pc, #512]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4977      	ldr	r1, [pc, #476]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002034:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	496f      	ldr	r1, [pc, #444]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002056:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f023 020c 	bic.w	r2, r3, #12
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002064:	4966      	ldr	r1, [pc, #408]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002078:	4b61      	ldr	r3, [pc, #388]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	495e      	ldr	r1, [pc, #376]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800209a:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a8:	4955      	ldr	r1, [pc, #340]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	494d      	ldr	r1, [pc, #308]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020de:	4b48      	ldr	r3, [pc, #288]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	4944      	ldr	r1, [pc, #272]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002100:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	493c      	ldr	r1, [pc, #240]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	4933      	ldr	r1, [pc, #204]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002152:	492b      	ldr	r1, [pc, #172]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d011      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002174:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002184:	d101      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b4:	4912      	ldr	r1, [pc, #72]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d8:	4909      	ldr	r1, [pc, #36]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d006      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80d9 	beq.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021f4:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a01      	ldr	r2, [pc, #4]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021fe:	e001      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002200:	40023800 	.word	0x40023800
 8002204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002206:	f7fe fd67 	bl	8000cd8 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800220e:	f7fe fd63 	bl	8000cd8 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	d901      	bls.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e194      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002220:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d021      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	2b00      	cmp	r3, #0
 800223e:	d11d      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002240:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800224e:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002254:	0e1b      	lsrs	r3, r3, #24
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	019a      	lsls	r2, r3, #6
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	431a      	orrs	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	071b      	lsls	r3, r3, #28
 8002274:	4957      	ldr	r1, [pc, #348]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800229a:	2b00      	cmp	r3, #0
 800229c:	d02e      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a6:	d129      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022bc:	0f1b      	lsrs	r3, r3, #28
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	019a      	lsls	r2, r3, #6
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	071b      	lsls	r3, r3, #28
 80022dc:	493d      	ldr	r1, [pc, #244]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022e4:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ea:	f023 021f 	bic.w	r2, r3, #31
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	3b01      	subs	r3, #1
 80022f4:	4937      	ldr	r1, [pc, #220]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01d      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230e:	0e1b      	lsrs	r3, r3, #24
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231c:	0f1b      	lsrs	r3, r3, #28
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	019a      	lsls	r2, r3, #6
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	431a      	orrs	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	071b      	lsls	r3, r3, #28
 800233c:	4925      	ldr	r1, [pc, #148]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d011      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	019a      	lsls	r2, r3, #6
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	061b      	lsls	r3, r3, #24
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	071b      	lsls	r3, r3, #28
 800236c:	4919      	ldr	r1, [pc, #100]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800237e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7fe fcaa 	bl	8000cd8 <HAL_GetTick>
 8002384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002388:	f7fe fca6 	bl	8000cd8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0d7      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	f040 80cd 	bne.w	8002548 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ba:	f7fe fc8d 	bl	8000cd8 <HAL_GetTick>
 80023be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023c2:	f7fe fc89 	bl	8000cd8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	d903      	bls.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0ba      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80023d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023d8:	4b5e      	ldr	r3, [pc, #376]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e4:	d0ed      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02e      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d12a      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800240e:	4b51      	ldr	r3, [pc, #324]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	0f1b      	lsrs	r3, r3, #28
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	019a      	lsls	r2, r3, #6
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	071b      	lsls	r3, r3, #28
 8002442:	4944      	ldr	r1, [pc, #272]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800244a:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002450:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	493d      	ldr	r1, [pc, #244]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d022      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002478:	d11d      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	0e1b      	lsrs	r3, r3, #24
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002488:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	0f1b      	lsrs	r3, r3, #28
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	019a      	lsls	r2, r3, #6
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	061b      	lsls	r3, r3, #24
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	071b      	lsls	r3, r3, #28
 80024ae:	4929      	ldr	r1, [pc, #164]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d028      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	0e1b      	lsrs	r3, r3, #24
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024d0:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	019a      	lsls	r2, r3, #6
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	071b      	lsls	r3, r3, #28
 80024f6:	4917      	ldr	r1, [pc, #92]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002504:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	4911      	ldr	r1, [pc, #68]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002520:	f7fe fbda 	bl	8000cd8 <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002528:	f7fe fbd6 	bl	8000cd8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e007      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002546:	d1ef      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e040      	b.n	80025ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fa56 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	; 0x24
 8002584:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f990 	bl	80028bc <UART_SetConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e022      	b.n	80025ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fbe8 	bl	8002d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fc6f 	bl	8002ec8 <UART_CheckIdleState>
 80025ea:	4603      	mov	r3, r0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002608:	2b20      	cmp	r3, #32
 800260a:	f040 8081 	bne.w	8002710 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_UART_Transmit+0x26>
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e079      	b.n	8002712 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_UART_Transmit+0x38>
 8002628:	2302      	movs	r3, #2
 800262a:	e072      	b.n	8002712 <HAL_UART_Transmit+0x11e>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2221      	movs	r2, #33	; 0x21
 8002640:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002642:	f7fe fb49 	bl	8000cd8 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d108      	bne.n	8002674 <HAL_UART_Transmit+0x80>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e003      	b.n	800267c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002684:	e02c      	b.n	80026e0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fc4c 	bl	8002f2e <UART_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e038      	b.n	8002712 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	3302      	adds	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e007      	b.n	80026ce <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1cc      	bne.n	8002686 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fc19 	bl	8002f2e <UART_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e005      	b.n	8002712 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e000      	b.n	8002712 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b08a      	sub	sp, #40	; 0x28
 800271e:	af02      	add	r7, sp, #8
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272e:	2b20      	cmp	r3, #32
 8002730:	f040 80be 	bne.w	80028b0 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_UART_Receive+0x26>
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b6      	b.n	80028b2 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_UART_Receive+0x38>
 800274e:	2302      	movs	r3, #2
 8002750:	e0af      	b.n	80028b2 <HAL_UART_Receive+0x198>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2222      	movs	r2, #34	; 0x22
 8002766:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800276e:	f7fe fab3 	bl	8000cd8 <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278c:	d10e      	bne.n	80027ac <HAL_UART_Receive+0x92>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_UART_Receive+0x88>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f240 12ff 	movw	r2, #511	; 0x1ff
 800279c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027a0:	e02d      	b.n	80027fe <HAL_UART_Receive+0xe4>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	22ff      	movs	r2, #255	; 0xff
 80027a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027aa:	e028      	b.n	80027fe <HAL_UART_Receive+0xe4>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_UART_Receive+0xb6>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_UART_Receive+0xac>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027c4:	e01b      	b.n	80027fe <HAL_UART_Receive+0xe4>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	227f      	movs	r2, #127	; 0x7f
 80027ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027ce:	e016      	b.n	80027fe <HAL_UART_Receive+0xe4>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027d8:	d10d      	bne.n	80027f6 <HAL_UART_Receive+0xdc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <HAL_UART_Receive+0xd2>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	227f      	movs	r2, #127	; 0x7f
 80027e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027ea:	e008      	b.n	80027fe <HAL_UART_Receive+0xe4>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	223f      	movs	r2, #63	; 0x3f
 80027f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027f4:	e003      	b.n	80027fe <HAL_UART_Receive+0xe4>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002804:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d108      	bne.n	8002822 <HAL_UART_Receive+0x108>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e003      	b.n	800282a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002832:	e032      	b.n	800289a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	2120      	movs	r1, #32
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fb75 	bl	8002f2e <UART_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e031      	b.n	80028b2 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10c      	bne.n	800286e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b29a      	uxth	r2, r3
 800285c:	8a7b      	ldrh	r3, [r7, #18]
 800285e:	4013      	ands	r3, r2
 8002860:	b29a      	uxth	r2, r3
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	3302      	adds	r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	e00c      	b.n	8002888 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8a7b      	ldrh	r3, [r7, #18]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	4013      	ands	r3, r2
 800287c:	b2da      	uxtb	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3301      	adds	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1c6      	bne.n	8002834 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4ba6      	ldr	r3, [pc, #664]	; (8002b80 <UART_SetConfig+0x2c4>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	6979      	ldr	r1, [r7, #20]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <UART_SetConfig+0x2c8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d120      	bne.n	800297a <UART_SetConfig+0xbe>
 8002938:	4b93      	ldr	r3, [pc, #588]	; (8002b88 <UART_SetConfig+0x2cc>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d816      	bhi.n	8002974 <UART_SetConfig+0xb8>
 8002946:	a201      	add	r2, pc, #4	; (adr r2, 800294c <UART_SetConfig+0x90>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	0800295d 	.word	0x0800295d
 8002950:	08002969 	.word	0x08002969
 8002954:	08002963 	.word	0x08002963
 8002958:	0800296f 	.word	0x0800296f
 800295c:	2301      	movs	r3, #1
 800295e:	77fb      	strb	r3, [r7, #31]
 8002960:	e150      	b.n	8002c04 <UART_SetConfig+0x348>
 8002962:	2302      	movs	r3, #2
 8002964:	77fb      	strb	r3, [r7, #31]
 8002966:	e14d      	b.n	8002c04 <UART_SetConfig+0x348>
 8002968:	2304      	movs	r3, #4
 800296a:	77fb      	strb	r3, [r7, #31]
 800296c:	e14a      	b.n	8002c04 <UART_SetConfig+0x348>
 800296e:	2308      	movs	r3, #8
 8002970:	77fb      	strb	r3, [r7, #31]
 8002972:	e147      	b.n	8002c04 <UART_SetConfig+0x348>
 8002974:	2310      	movs	r3, #16
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e144      	b.n	8002c04 <UART_SetConfig+0x348>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a83      	ldr	r2, [pc, #524]	; (8002b8c <UART_SetConfig+0x2d0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d132      	bne.n	80029ea <UART_SetConfig+0x12e>
 8002984:	4b80      	ldr	r3, [pc, #512]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d828      	bhi.n	80029e4 <UART_SetConfig+0x128>
 8002992:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <UART_SetConfig+0xdc>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029cd 	.word	0x080029cd
 800299c:	080029e5 	.word	0x080029e5
 80029a0:	080029e5 	.word	0x080029e5
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	080029d9 	.word	0x080029d9
 80029ac:	080029e5 	.word	0x080029e5
 80029b0:	080029e5 	.word	0x080029e5
 80029b4:	080029e5 	.word	0x080029e5
 80029b8:	080029d3 	.word	0x080029d3
 80029bc:	080029e5 	.word	0x080029e5
 80029c0:	080029e5 	.word	0x080029e5
 80029c4:	080029e5 	.word	0x080029e5
 80029c8:	080029df 	.word	0x080029df
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e118      	b.n	8002c04 <UART_SetConfig+0x348>
 80029d2:	2302      	movs	r3, #2
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e115      	b.n	8002c04 <UART_SetConfig+0x348>
 80029d8:	2304      	movs	r3, #4
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e112      	b.n	8002c04 <UART_SetConfig+0x348>
 80029de:	2308      	movs	r3, #8
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e10f      	b.n	8002c04 <UART_SetConfig+0x348>
 80029e4:	2310      	movs	r3, #16
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e10c      	b.n	8002c04 <UART_SetConfig+0x348>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a68      	ldr	r2, [pc, #416]	; (8002b90 <UART_SetConfig+0x2d4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d120      	bne.n	8002a36 <UART_SetConfig+0x17a>
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <UART_SetConfig+0x2cc>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029fe:	2b30      	cmp	r3, #48	; 0x30
 8002a00:	d013      	beq.n	8002a2a <UART_SetConfig+0x16e>
 8002a02:	2b30      	cmp	r3, #48	; 0x30
 8002a04:	d814      	bhi.n	8002a30 <UART_SetConfig+0x174>
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d009      	beq.n	8002a1e <UART_SetConfig+0x162>
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d810      	bhi.n	8002a30 <UART_SetConfig+0x174>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <UART_SetConfig+0x15c>
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d006      	beq.n	8002a24 <UART_SetConfig+0x168>
 8002a16:	e00b      	b.n	8002a30 <UART_SetConfig+0x174>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e0f2      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	e0ef      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a24:	2304      	movs	r3, #4
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	e0ec      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	77fb      	strb	r3, [r7, #31]
 8002a2e:	e0e9      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a30:	2310      	movs	r3, #16
 8002a32:	77fb      	strb	r3, [r7, #31]
 8002a34:	e0e6      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <UART_SetConfig+0x2d8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d120      	bne.n	8002a82 <UART_SetConfig+0x1c6>
 8002a40:	4b51      	ldr	r3, [pc, #324]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a4c:	d013      	beq.n	8002a76 <UART_SetConfig+0x1ba>
 8002a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a50:	d814      	bhi.n	8002a7c <UART_SetConfig+0x1c0>
 8002a52:	2b80      	cmp	r3, #128	; 0x80
 8002a54:	d009      	beq.n	8002a6a <UART_SetConfig+0x1ae>
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d810      	bhi.n	8002a7c <UART_SetConfig+0x1c0>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <UART_SetConfig+0x1a8>
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d006      	beq.n	8002a70 <UART_SetConfig+0x1b4>
 8002a62:	e00b      	b.n	8002a7c <UART_SetConfig+0x1c0>
 8002a64:	2300      	movs	r3, #0
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e0cc      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e0c9      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a70:	2304      	movs	r3, #4
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e0c6      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a76:	2308      	movs	r3, #8
 8002a78:	77fb      	strb	r3, [r7, #31]
 8002a7a:	e0c3      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	77fb      	strb	r3, [r7, #31]
 8002a80:	e0c0      	b.n	8002c04 <UART_SetConfig+0x348>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a44      	ldr	r2, [pc, #272]	; (8002b98 <UART_SetConfig+0x2dc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d125      	bne.n	8002ad8 <UART_SetConfig+0x21c>
 8002a8c:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a9a:	d017      	beq.n	8002acc <UART_SetConfig+0x210>
 8002a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa0:	d817      	bhi.n	8002ad2 <UART_SetConfig+0x216>
 8002aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa6:	d00b      	beq.n	8002ac0 <UART_SetConfig+0x204>
 8002aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aac:	d811      	bhi.n	8002ad2 <UART_SetConfig+0x216>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <UART_SetConfig+0x1fe>
 8002ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab6:	d006      	beq.n	8002ac6 <UART_SetConfig+0x20a>
 8002ab8:	e00b      	b.n	8002ad2 <UART_SetConfig+0x216>
 8002aba:	2300      	movs	r3, #0
 8002abc:	77fb      	strb	r3, [r7, #31]
 8002abe:	e0a1      	b.n	8002c04 <UART_SetConfig+0x348>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e09e      	b.n	8002c04 <UART_SetConfig+0x348>
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e09b      	b.n	8002c04 <UART_SetConfig+0x348>
 8002acc:	2308      	movs	r3, #8
 8002ace:	77fb      	strb	r3, [r7, #31]
 8002ad0:	e098      	b.n	8002c04 <UART_SetConfig+0x348>
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	77fb      	strb	r3, [r7, #31]
 8002ad6:	e095      	b.n	8002c04 <UART_SetConfig+0x348>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <UART_SetConfig+0x2e0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d125      	bne.n	8002b2e <UART_SetConfig+0x272>
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002af0:	d017      	beq.n	8002b22 <UART_SetConfig+0x266>
 8002af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002af6:	d817      	bhi.n	8002b28 <UART_SetConfig+0x26c>
 8002af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002afc:	d00b      	beq.n	8002b16 <UART_SetConfig+0x25a>
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b02:	d811      	bhi.n	8002b28 <UART_SetConfig+0x26c>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <UART_SetConfig+0x254>
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0c:	d006      	beq.n	8002b1c <UART_SetConfig+0x260>
 8002b0e:	e00b      	b.n	8002b28 <UART_SetConfig+0x26c>
 8002b10:	2301      	movs	r3, #1
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	e076      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b16:	2302      	movs	r3, #2
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	e073      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	e070      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b22:	2308      	movs	r3, #8
 8002b24:	77fb      	strb	r3, [r7, #31]
 8002b26:	e06d      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b28:	2310      	movs	r3, #16
 8002b2a:	77fb      	strb	r3, [r7, #31]
 8002b2c:	e06a      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <UART_SetConfig+0x2e4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d138      	bne.n	8002baa <UART_SetConfig+0x2ee>
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <UART_SetConfig+0x2cc>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b46:	d017      	beq.n	8002b78 <UART_SetConfig+0x2bc>
 8002b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b4c:	d82a      	bhi.n	8002ba4 <UART_SetConfig+0x2e8>
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d00b      	beq.n	8002b6c <UART_SetConfig+0x2b0>
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d824      	bhi.n	8002ba4 <UART_SetConfig+0x2e8>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <UART_SetConfig+0x2aa>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b62:	d006      	beq.n	8002b72 <UART_SetConfig+0x2b6>
 8002b64:	e01e      	b.n	8002ba4 <UART_SetConfig+0x2e8>
 8002b66:	2300      	movs	r3, #0
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e04b      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e048      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b72:	2304      	movs	r3, #4
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e045      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b78:	2308      	movs	r3, #8
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e042      	b.n	8002c04 <UART_SetConfig+0x348>
 8002b7e:	bf00      	nop
 8002b80:	efff69f3 	.word	0xefff69f3
 8002b84:	40011000 	.word	0x40011000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	40004800 	.word	0x40004800
 8002b94:	40004c00 	.word	0x40004c00
 8002b98:	40005000 	.word	0x40005000
 8002b9c:	40011400 	.word	0x40011400
 8002ba0:	40007800 	.word	0x40007800
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e02c      	b.n	8002c04 <UART_SetConfig+0x348>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a72      	ldr	r2, [pc, #456]	; (8002d78 <UART_SetConfig+0x4bc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d125      	bne.n	8002c00 <UART_SetConfig+0x344>
 8002bb4:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <UART_SetConfig+0x4c0>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bc2:	d017      	beq.n	8002bf4 <UART_SetConfig+0x338>
 8002bc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bc8:	d817      	bhi.n	8002bfa <UART_SetConfig+0x33e>
 8002bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bce:	d00b      	beq.n	8002be8 <UART_SetConfig+0x32c>
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d811      	bhi.n	8002bfa <UART_SetConfig+0x33e>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <UART_SetConfig+0x326>
 8002bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bde:	d006      	beq.n	8002bee <UART_SetConfig+0x332>
 8002be0:	e00b      	b.n	8002bfa <UART_SetConfig+0x33e>
 8002be2:	2300      	movs	r3, #0
 8002be4:	77fb      	strb	r3, [r7, #31]
 8002be6:	e00d      	b.n	8002c04 <UART_SetConfig+0x348>
 8002be8:	2302      	movs	r3, #2
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	e00a      	b.n	8002c04 <UART_SetConfig+0x348>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	77fb      	strb	r3, [r7, #31]
 8002bf2:	e007      	b.n	8002c04 <UART_SetConfig+0x348>
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e004      	b.n	8002c04 <UART_SetConfig+0x348>
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e001      	b.n	8002c04 <UART_SetConfig+0x348>
 8002c00:	2310      	movs	r3, #16
 8002c02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0c:	d15b      	bne.n	8002cc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002c0e:	7ffb      	ldrb	r3, [r7, #31]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d828      	bhi.n	8002c66 <UART_SetConfig+0x3aa>
 8002c14:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <UART_SetConfig+0x360>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c41 	.word	0x08002c41
 8002c20:	08002c49 	.word	0x08002c49
 8002c24:	08002c51 	.word	0x08002c51
 8002c28:	08002c67 	.word	0x08002c67
 8002c2c:	08002c57 	.word	0x08002c57
 8002c30:	08002c67 	.word	0x08002c67
 8002c34:	08002c67 	.word	0x08002c67
 8002c38:	08002c67 	.word	0x08002c67
 8002c3c:	08002c5f 	.word	0x08002c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c40:	f7ff f872 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002c44:	61b8      	str	r0, [r7, #24]
        break;
 8002c46:	e013      	b.n	8002c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c48:	f7ff f882 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002c4c:	61b8      	str	r0, [r7, #24]
        break;
 8002c4e:	e00f      	b.n	8002c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <UART_SetConfig+0x4c4>)
 8002c52:	61bb      	str	r3, [r7, #24]
        break;
 8002c54:	e00c      	b.n	8002c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c56:	f7fe ff55 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8002c5a:	61b8      	str	r0, [r7, #24]
        break;
 8002c5c:	e008      	b.n	8002c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c62:	61bb      	str	r3, [r7, #24]
        break;
 8002c64:	e004      	b.n	8002c70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d074      	beq.n	8002d60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	005a      	lsls	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	d916      	bls.n	8002cc0 <UART_SetConfig+0x404>
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d212      	bcs.n	8002cc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f023 030f 	bic.w	r3, r3, #15
 8002ca2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	89fb      	ldrh	r3, [r7, #14]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	89fa      	ldrh	r2, [r7, #14]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	e04f      	b.n	8002d60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	77bb      	strb	r3, [r7, #30]
 8002cc4:	e04c      	b.n	8002d60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d828      	bhi.n	8002d1e <UART_SetConfig+0x462>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <UART_SetConfig+0x418>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002d01 	.word	0x08002d01
 8002cdc:	08002d09 	.word	0x08002d09
 8002ce0:	08002d1f 	.word	0x08002d1f
 8002ce4:	08002d0f 	.word	0x08002d0f
 8002ce8:	08002d1f 	.word	0x08002d1f
 8002cec:	08002d1f 	.word	0x08002d1f
 8002cf0:	08002d1f 	.word	0x08002d1f
 8002cf4:	08002d17 	.word	0x08002d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf8:	f7ff f816 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002cfc:	61b8      	str	r0, [r7, #24]
        break;
 8002cfe:	e013      	b.n	8002d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d00:	f7ff f826 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002d04:	61b8      	str	r0, [r7, #24]
        break;
 8002d06:	e00f      	b.n	8002d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <UART_SetConfig+0x4c4>)
 8002d0a:	61bb      	str	r3, [r7, #24]
        break;
 8002d0c:	e00c      	b.n	8002d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d0e:	f7fe fef9 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8002d12:	61b8      	str	r0, [r7, #24]
        break;
 8002d14:	e008      	b.n	8002d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d1a:	61bb      	str	r3, [r7, #24]
        break;
 8002d1c:	e004      	b.n	8002d28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	77bb      	strb	r3, [r7, #30]
        break;
 8002d26:	bf00      	nop
    }

    if (pclk != 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	085a      	lsrs	r2, r3, #1
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	441a      	add	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d909      	bls.n	8002d5c <UART_SetConfig+0x4a0>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4e:	d205      	bcs.n	8002d5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e001      	b.n	8002d60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40007c00 	.word	0x40007c00
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	00f42400 	.word	0x00f42400

08002d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01a      	beq.n	8002e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e82:	d10a      	bne.n	8002e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ed8:	f7fd fefe 	bl	8000cd8 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d10e      	bne.n	8002f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f817 	bl	8002f2e <UART_WaitOnFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e00d      	b.n	8002f26 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b09c      	sub	sp, #112	; 0x70
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3e:	e0a5      	b.n	800308c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	f000 80a1 	beq.w	800308c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fd fec5 	bl	8000cd8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d13e      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f74:	667b      	str	r3, [r7, #100]	; 0x64
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e6      	bne.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3308      	adds	r3, #8
 8002f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e5      	bne.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e067      	b.n	80030ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d04f      	beq.n	800308c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffa:	d147      	bne.n	800308c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003004:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800301a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
 8003026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800302a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e6      	bne.n	8003006 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	613b      	str	r3, [r7, #16]
   return(result);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3308      	adds	r3, #8
 8003056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003058:	623a      	str	r2, [r7, #32]
 800305a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	69f9      	ldr	r1, [r7, #28]
 800305e:	6a3a      	ldr	r2, [r7, #32]
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	61bb      	str	r3, [r7, #24]
   return(result);
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e5      	bne.n	8003038 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e010      	b.n	80030ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	f43f af4a 	beq.w	8002f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3770      	adds	r7, #112	; 0x70
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <QHsm_trig_>:
};

/*! helper function to trigger reserved event in an HSM */
static inline QState QHsm_trig_(QHsm * const me,
                                QStateHandler const state, QSignal sig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
    return (*state)(me, &QEP_reservedEvt_[sig]);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <QHsm_trig_+0x28>)
 80030cc:	441a      	add	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4611      	mov	r1, r2
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	4798      	blx	r3
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	08004cec 	.word	0x08004cec

080030e4 <QHsm_ctor>:
* "constructor" of a derived state machine:
* @include qep_qhsm_ctor.c
*
* @tr{RQP103}
*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->vptr      = &vtable;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a06      	ldr	r2, [pc, #24]	; (800310c <QHsm_ctor+0x28>)
 80030f2:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a06      	ldr	r2, [pc, #24]	; (8003110 <QHsm_ctor+0x2c>)
 80030f8:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	609a      	str	r2, [r3, #8]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	08004cfc 	.word	0x08004cfc
 8003110:	08003211 	.word	0x08003211

08003114 <QHsm_init_>:
void QHsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QHsm_init_(QHsm * const me, void const * const e)
#endif
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <QHsm_init_+0x28>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <QHsm_init_+0x28>
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	4a33      	ldr	r2, [pc, #204]	; (8003204 <QHsm_init_+0xf0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <QHsm_init_+0x30>
 800313c:	21c8      	movs	r1, #200	; 0xc8
 800313e:	4832      	ldr	r0, [pc, #200]	; (8003208 <QHsm_init_+0xf4>)
 8003140:	f7fd fb8c 	bl	800085c <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
 800314e:	6278      	str	r0, [r7, #36]	; 0x24

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	2b08      	cmp	r3, #8
 8003154:	d003      	beq.n	800315e <QHsm_init_+0x4a>
 8003156:	21d2      	movs	r1, #210	; 0xd2
 8003158:	482b      	ldr	r0, [pc, #172]	; (8003208 <QHsm_init_+0xf4>)
 800315a:	f7fd fb7f 	bl	800085c <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 800315e:	2300      	movs	r3, #0
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28

        path[0] = me->temp.fun;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60fb      	str	r3, [r7, #12]
        (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ffa1 	bl	80030b8 <QHsm_trig_>
        while (me->temp.fun != t) {
 8003176:	e018      	b.n	80031aa <QHsm_init_+0x96>
            ++ip;
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	3301      	adds	r3, #1
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	2b05      	cmp	r3, #5
 8003182:	dd03      	ble.n	800318c <QHsm_init_+0x78>
 8003184:	21dc      	movs	r1, #220	; 0xdc
 8003186:	4820      	ldr	r0, [pc, #128]	; (8003208 <QHsm_init_+0xf4>)
 8003188:	f7fd fb68 	bl	800085c <Q_onAssert>
            path[ip] = me->temp.fun;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	3330      	adds	r3, #48	; 0x30
 8003196:	443b      	add	r3, r7
 8003198:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff87 	bl	80030b8 <QHsm_trig_>
        while (me->temp.fun != t) {
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d1e1      	bne.n	8003178 <QHsm_init_+0x64>
        }
        me->temp.fun = path[0];
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	3330      	adds	r3, #48	; 0x30
 80031c0:	443b      	add	r3, r7
 80031c2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80031c6:	4911      	ldr	r1, [pc, #68]	; (800320c <QHsm_init_+0xf8>)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
            --ip;
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
        } while (ip >= 0);
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	daf0      	bge.n	80031ba <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c

        r = QHsm_trig_(me, t, Q_INIT_SIG); /* execute initial transition */
 80031dc:	2203      	movs	r2, #3
 80031de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff69 	bl	80030b8 <QHsm_trig_>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
#endif /* Q_SPY */

    } while (r == (QState)Q_RET_TRAN);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d0b7      	beq.n	800315e <QHsm_init_+0x4a>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f2:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	bf00      	nop
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	08003211 	.word	0x08003211
 8003208:	08004ce4 	.word	0x08004ce4
 800320c:	08004cf0 	.word	0x08004cf0

08003210 <QHsm_top>:
* @note The parameters to this state handler are not used. They are provided
* for conformance with the state-handler function signature ::QStateHandler.
*
* @tr{RQP103} @tr{RQP120T}
*/
QState QHsm_top(void const * const me, QEvt const * const e) {
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
    (void)me; /* suppress the "unused parameter" compiler warning */
    (void)e;  /* suppress the "unused parameter" compiler warning */
    return (QState)Q_RET_IGNORED; /* the top state ignores all events */
 800321a:	2304      	movs	r3, #4
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <QHsm_dispatch_>:
void QHsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QHsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
    QStateHandler t = me->state.fun;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <QHsm_dispatch_+0x20>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d004      	beq.n	8003252 <QHsm_dispatch_+0x2a>
 8003248:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800324c:	4852      	ldr	r0, [pc, #328]	; (8003398 <QHsm_dispatch_+0x170>)
 800324e:	f7fd fb05 	bl	800085c <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	623b      	str	r3, [r7, #32]
        r = (*s)(me, e); /* invoke state handler s */
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	6839      	ldr	r1, [r7, #0]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
 8003260:	62b8      	str	r0, [r7, #40]	; 0x28

        if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	2b02      	cmp	r3, #2
 8003266:	d105      	bne.n	8003274 <QHsm_dispatch_+0x4c>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QHsm_trig_(me, s, QEP_EMPTY_SIG_); /* find superstate of s */
 8003268:	2200      	movs	r2, #0
 800326a:	6a39      	ldr	r1, [r7, #32]
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff23 	bl	80030b8 <QHsm_trig_>
 8003272:	62b8      	str	r0, [r7, #40]	; 0x28
        }
    } while (r == (QState)Q_RET_SUPER);
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0eb      	beq.n	8003252 <QHsm_dispatch_+0x2a>

    /* regular transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	2b07      	cmp	r3, #7
 800327e:	f240 8081 	bls.w	8003384 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	60bb      	str	r3, [r7, #8]
        path[1] = t;
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	60fb      	str	r3, [r7, #12]
        path[2] = s;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	613b      	str	r3, [r7, #16]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 8003290:	e00f      	b.n	80032b2 <QHsm_dispatch_+0x8a>
            if (QHsm_trig_(me, t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
 8003292:	2202      	movs	r2, #2
 8003294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff0e 	bl	80030b8 <QHsm_trig_>
 800329c:	4603      	mov	r3, r0
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d104      	bne.n	80032ac <QHsm_dispatch_+0x84>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QHsm_trig_(me, t, QEP_EMPTY_SIG_);
 80032a2:	2200      	movs	r2, #0
 80032a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ff06 	bl	80030b8 <QHsm_trig_>
        for (; t != s; t = me->temp.fun) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d1eb      	bne.n	8003292 <QHsm_dispatch_+0x6a>
                QS_FUN_PRE_(t);       /* the source of the transition */
                QS_FUN_PRE_(path[0]); /* the target of the tran. to history */
            QS_END_PRE_()
        }
#else
        ip = QHsm_tran_(me, path);
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f86d 	bl	80033a0 <QHsm_tran_>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24
#endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 80032c8:	e00b      	b.n	80032e2 <QHsm_dispatch_+0xba>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3330      	adds	r3, #48	; 0x30
 80032d0:	443b      	add	r3, r7
 80032d2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80032d6:	4931      	ldr	r1, [pc, #196]	; (800339c <QHsm_dispatch_+0x174>)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	3b01      	subs	r3, #1
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	daf0      	bge.n	80032ca <QHsm_dispatch_+0xa2>
        }

        t = path[0];      /* stick the target into register */
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        me->temp.fun = t; /* update the next state */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f0:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QHsm_trig_(me, t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 80032f2:	e03f      	b.n	8003374 <QHsm_dispatch_+0x14c>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
            path[0] = me->temp.fun;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60bb      	str	r3, [r7, #8]

            /* find superstate */
            (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fed6 	bl	80030b8 <QHsm_trig_>

            while (me->temp.fun != t) {
 800330c:	e011      	b.n	8003332 <QHsm_dispatch_+0x10a>
                ++ip;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	3301      	adds	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
                path[ip] = me->temp.fun;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	3330      	adds	r3, #48	; 0x30
 800331e:	443b      	add	r3, r7
 8003320:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	4619      	mov	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fec3 	bl	80030b8 <QHsm_trig_>
            while (me->temp.fun != t) {
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003338:	429a      	cmp	r2, r3
 800333a:	d1e8      	bne.n	800330e <QHsm_dispatch_+0xe6>
            }
            me->temp.fun = path[0];
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	2b05      	cmp	r3, #5
 8003346:	dd04      	ble.n	8003352 <QHsm_dispatch_+0x12a>
 8003348:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800334c:	4812      	ldr	r0, [pc, #72]	; (8003398 <QHsm_dispatch_+0x170>)
 800334e:	f7fd fa85 	bl	800085c <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	3330      	adds	r3, #48	; 0x30
 8003358:	443b      	add	r3, r7
 800335a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800335e:	490f      	ldr	r1, [pc, #60]	; (800339c <QHsm_dispatch_+0x174>)
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
                --ip;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	3b01      	subs	r3, #1
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
            } while (ip >= 0);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	daf0      	bge.n	8003352 <QHsm_dispatch_+0x12a>

            t = path[0]; /* current state becomes the new source */
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (QHsm_trig_(me, t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8003374:	2203      	movs	r2, #3
 8003376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fe9d 	bl	80030b8 <QHsm_trig_>
 800337e:	4603      	mov	r3, r0
 8003380:	2b08      	cmp	r3, #8
 8003382:	d0b7      	beq.n	80032f4 <QHsm_dispatch_+0xcc>
        QS_END_PRE_()

    }
#endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003388:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338e:	609a      	str	r2, [r3, #8]
}
 8003390:	bf00      	nop
 8003392:	3730      	adds	r7, #48	; 0x30
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	08004ce4 	.word	0x08004ce4
 800339c:	08004cf0 	.word	0x08004cf0

080033a0 <QHsm_tran_>:
                              uint_fast8_t const qs_id)
#else
static int_fast8_t QHsm_tran_(QHsm * const me,
                              QStateHandler path[QHSM_MAX_NEST_DEPTH_])
#endif
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    int_fast8_t ip = -1; /* transition entry path index */
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
 80033ae:	61fb      	str	r3, [r7, #28]
    QStateHandler t = path[0];
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
    QStateHandler const s = path[2];
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	60fb      	str	r3, [r7, #12]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d106      	bne.n	80033d2 <QHsm_tran_+0x32>
        QEP_EXIT_(s, qs_id); /* exit the source */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4968      	ldr	r1, [pc, #416]	; (8003568 <QHsm_tran_+0x1c8>)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
        ip = 0; /* enter the target */
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e0c4      	b.n	800355c <QHsm_tran_+0x1bc>
    }
    else {
        /* find superstate of target */
        (void)QHsm_trig_(me, t, QEP_EMPTY_SIG_);
 80033d2:	2200      	movs	r2, #0
 80033d4:	69b9      	ldr	r1, [r7, #24]
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fe6e 	bl	80030b8 <QHsm_trig_>

        t = me->temp.fun;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	61bb      	str	r3, [r7, #24]

        /* (b) check source==target->super... */
        if (s == t) {
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d102      	bne.n	80033f0 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e0b5      	b.n	800355c <QHsm_tran_+0x1bc>
        }
        else {
            /* find superstate of src */
            (void)QHsm_trig_(me, s, QEP_EMPTY_SIG_);
 80033f0:	2200      	movs	r2, #0
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff fe5f 	bl	80030b8 <QHsm_trig_>

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	429a      	cmp	r2, r3
 8003402:	d106      	bne.n	8003412 <QHsm_tran_+0x72>
                QEP_EXIT_(s, qs_id); /* exit the source */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4958      	ldr	r1, [pc, #352]	; (8003568 <QHsm_tran_+0x1c8>)
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
                ip = 0; /* enter the target */
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	e0a4      	b.n	800355c <QHsm_tran_+0x1bc>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d104      	bne.n	8003428 <QHsm_tran_+0x88>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4951      	ldr	r1, [pc, #324]	; (8003568 <QHsm_tran_+0x1c8>)
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
 8003426:	e099      	b.n	800355c <QHsm_tran_+0x1bc>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
                    ip = 1; /* enter target and its superstate */
 800342c:	2301      	movs	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
                    path[1] = t;      /* save the superstate of target */
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	3304      	adds	r3, #4
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	61bb      	str	r3, [r7, #24]

                    /* find target->super->super... */
                    QState r = QHsm_trig_(me, path[1], QEP_EMPTY_SIG_);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fe35 	bl	80030b8 <QHsm_trig_>
 800344e:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 8003450:	e026      	b.n	80034a0 <QHsm_tran_+0x100>
                        ++ip;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3301      	adds	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
                        path[ip] = me->temp.fun; /* store the entry path */
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4413      	add	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	429a      	cmp	r2, r3
 800346e:	d10f      	bne.n	8003490 <QHsm_tran_+0xf0>
                            iq = 1; /* indicate that LCA found */
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b05      	cmp	r3, #5
 8003478:	dd04      	ble.n	8003484 <QHsm_tran_+0xe4>
 800347a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800347e:	483b      	ldr	r0, [pc, #236]	; (800356c <QHsm_tran_+0x1cc>)
 8003480:	f7fd f9ec 	bl	800085c <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	3b01      	subs	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
                            r = (QState)Q_RET_HANDLED; /* terminate loop */
 800348a:	2303      	movs	r3, #3
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	e007      	b.n	80034a0 <QHsm_tran_+0x100>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QHsm_trig_(me, me->temp.fun, QEP_EMPTY_SIG_);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2200      	movs	r2, #0
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fe0d 	bl	80030b8 <QHsm_trig_>
 800349e:	6138      	str	r0, [r7, #16]
                    while (r == (QState)Q_RET_SUPER) {
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0d5      	beq.n	8003452 <QHsm_tran_+0xb2>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d157      	bne.n	800355c <QHsm_tran_+0x1bc>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	dd04      	ble.n	80034bc <QHsm_tran_+0x11c>
 80034b2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80034b6:	482d      	ldr	r0, [pc, #180]	; (800356c <QHsm_tran_+0x1cc>)
 80034b8:	f7fd f9d0 	bl	800085c <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	492a      	ldr	r1, [pc, #168]	; (8003568 <QHsm_tran_+0x1c8>)
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	617b      	str	r3, [r7, #20]
                        r = (QState)Q_RET_IGNORED; /* LCA NOT found */
 80034c8:	2304      	movs	r3, #4
 80034ca:	613b      	str	r3, [r7, #16]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d108      	bne.n	80034ee <QHsm_tran_+0x14e>
                                r = (QState)Q_RET_HANDLED; /* LCA found */
 80034dc:	2303      	movs	r3, #3
 80034de:	613b      	str	r3, [r7, #16]
                                ip = iq - 1; /* do not enter LCA */
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
                                iq = -1; /* cause termintion of the loop */
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e002      	b.n	80034f4 <QHsm_tran_+0x154>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
                            }
                        } while (iq >= 0);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	dae8      	bge.n	80034cc <QHsm_tran_+0x12c>

                        /* LCA not found? */
                        if (r != (QState)Q_RET_HANDLED) {
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d02d      	beq.n	800355c <QHsm_tran_+0x1bc>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED; /* keep looping */
 8003500:	2304      	movs	r3, #4
 8003502:	613b      	str	r3, [r7, #16]
                            do {
                                /* exit t unhandled? */
                                if (QHsm_trig_(me, t, Q_EXIT_SIG)
 8003504:	2202      	movs	r2, #2
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fdd5 	bl	80030b8 <QHsm_trig_>
 800350e:	4603      	mov	r3, r0
 8003510:	2b03      	cmp	r3, #3
 8003512:	d104      	bne.n	800351e <QHsm_tran_+0x17e>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QHsm_trig_(me, t, QEP_EMPTY_SIG_);
 8003514:	2200      	movs	r2, #0
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fdcd 	bl	80030b8 <QHsm_trig_>
                                }
                                t = me->temp.fun; /* set to super of t */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	61bb      	str	r3, [r7, #24]
                                iq = ip;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	617b      	str	r3, [r7, #20]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	429a      	cmp	r2, r3
 8003536:	d108      	bne.n	800354a <QHsm_tran_+0x1aa>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3b01      	subs	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
                                        iq = -1; /* break out of inner loop */
 800353e:	f04f 33ff 	mov.w	r3, #4294967295
 8003542:	617b      	str	r3, [r7, #20]
                                        /* break out of outer loop */
                                        r = (QState)Q_RET_HANDLED;
 8003544:	2303      	movs	r3, #3
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e002      	b.n	8003550 <QHsm_tran_+0x1b0>
                                    }
                                    else {
                                        --iq;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3b01      	subs	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
                                    }
                                } while (iq >= 0);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	dae8      	bge.n	8003528 <QHsm_tran_+0x188>
                            } while (r != (QState)Q_RET_HANDLED);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d1d3      	bne.n	8003504 <QHsm_tran_+0x164>
                    }
                }
            }
        }
    }
    return ip;
 800355c:	69fb      	ldr	r3, [r7, #28]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	08004cf4 	.word	0x08004cf4
 800356c:	08004ce4 	.word	0x08004ce4

08003570 <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
    uint_fast8_t const p = (uint_fast8_t)a->prio;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7f1b      	ldrb	r3, [r3, #28]
 800357c:	60fb      	str	r3, [r7, #12]
    /*! @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <QF_add_+0x26>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b20      	cmp	r3, #32
 8003588:	d805      	bhi.n	8003596 <QF_add_+0x26>
 800358a:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <QF_add_+0x50>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <QF_add_+0x2e>
 8003596:	2164      	movs	r1, #100	; 0x64
 8003598:	480a      	ldr	r0, [pc, #40]	; (80035c4 <QF_add_+0x54>)
 800359a:	f7fd f95f 	bl	800085c <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));
    QF_CRIT_STAT_
    QF_CRIT_E_();
 800359e:	233f      	movs	r3, #63	; 0x3f
 80035a0:	b672      	cpsid	i
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	b662      	cpsie	i
    QF_active_[p] = a; /* register the active object at this priority */
 80035a8:	4905      	ldr	r1, [pc, #20]	; (80035c0 <QF_add_+0x50>)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 80035b2:	2300      	movs	r3, #0
 80035b4:	f383 8811 	msr	BASEPRI, r3
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	2000017c 	.word	0x2000017c
 80035c4:	08004d04 	.word	0x08004d04

080035c8 <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	e008      	b.n	80035ee <QF_bzero+0x26>
        *ptr = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
        ++ptr;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f3      	bne.n	80035dc <QF_bzero+0x14>
    }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <QPSet_insert>:
static inline bool QPSet_hasElement(QPSet * const me, uint_fast8_t const n) {
    return (me->bits & ((QPSetBits)1 << (n - 1U))) != 0U;
}

/*! Insert element @p n_ into the set @p me, n = 1U..32U */
static inline void QPSet_insert(QPSet * const me, uint_fast8_t const n) {
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
    me->bits |= ((QPSetBits)1 << (n - 1U));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3b01      	subs	r3, #1
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	601a      	str	r2, [r3, #0]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <QActive_post_+0x1a>
 800363e:	2164      	movs	r1, #100	; 0x64
 8003640:	483d      	ldr	r0, [pc, #244]	; (8003738 <QActive_post_+0x10c>)
 8003642:	f7fd f90b 	bl	800085c <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8003646:	233f      	movs	r3, #63	; 0x3f
 8003648:	b672      	cpsid	i
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	7ddb      	ldrb	r3, [r3, #23]
 8003654:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800365c:	4293      	cmp	r3, r2
 800365e:	d10e      	bne.n	800367e <QActive_post_+0x52>
        if (nFree > 0U) {
 8003660:	7dbb      	ldrb	r3, [r7, #22]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <QActive_post_+0x40>
            status = true; /* can post */
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
 800366a:	e012      	b.n	8003692 <QActive_post_+0x66>
        }
        else {
            status = false; /* cannot post */
 800366c:	2300      	movs	r3, #0
 800366e:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 8003670:	2300      	movs	r3, #0
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	216e      	movs	r1, #110	; 0x6e
 8003678:	482f      	ldr	r0, [pc, #188]	; (8003738 <QActive_post_+0x10c>)
 800367a:	f7fd f8ef 	bl	800085c <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	7dba      	ldrb	r2, [r7, #22]
 8003684:	429a      	cmp	r2, r3
 8003686:	d902      	bls.n	800368e <QActive_post_+0x62>
        status = true; /* can post */
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
 800368c:	e001      	b.n	8003692 <QActive_post_+0x66>
    }
    else {
        status = false; /* cannot post, but don't assert */
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	789b      	ldrb	r3, [r3, #2]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <QActive_post_+0x7c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	78db      	ldrb	r3, [r3, #3]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d038      	beq.n	8003720 <QActive_post_+0xf4>

        --nFree; /* one free entry just used up */
 80036ae:	7dbb      	ldrb	r3, [r7, #22]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	7dba      	ldrb	r2, [r7, #22]
 80036b8:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	7e1b      	ldrb	r3, [r3, #24]
 80036be:	7dba      	ldrb	r2, [r7, #22]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d202      	bcs.n	80036ca <QActive_post_+0x9e>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	7dba      	ldrb	r2, [r7, #22]
 80036c8:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <QActive_post_+0xba>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	7f1b      	ldrb	r3, [r3, #28]
 80036dc:	4619      	mov	r1, r3
 80036de:	4817      	ldr	r0, [pc, #92]	; (800373c <QActive_post_+0x110>)
 80036e0:	f7ff ff8f 	bl	8003602 <QPSet_insert>
 80036e4:	e018      	b.n	8003718 <QActive_post_+0xec>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	7d5b      	ldrb	r3, [r3, #21]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	7d5b      	ldrb	r3, [r3, #21]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <QActive_post_+0xde>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	7d1a      	ldrb	r2, [r3, #20]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	7d5b      	ldrb	r3, [r3, #21]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8003718:	2300      	movs	r3, #0
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	e005      	b.n	800372c <QActive_post_+0x100>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 8003720:	2300      	movs	r3, #0
 8003722:	f383 8811 	msr	BASEPRI, r3

        QF_gc(e); /* recycle the event to avoid a leak */
 8003726:	68b8      	ldr	r0, [r7, #8]
 8003728:	f000 f8c8 	bl	80038bc <QF_gc>
    }

    return status;
 800372c:	7dfb      	ldrb	r3, [r7, #23]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	08004d0c 	.word	0x08004d0c
 800373c:	20000268 	.word	0x20000268

08003740 <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800374a:	233f      	movs	r3, #63	; 0x3f
 800374c:	b672      	cpsid	i
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7ddb      	ldrb	r3, [r3, #23]
 8003758:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <QActive_postLIFO_+0x2e>
 8003760:	2300      	movs	r3, #0
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	21d2      	movs	r1, #210	; 0xd2
 8003768:	4826      	ldr	r0, [pc, #152]	; (8003804 <QActive_postLIFO_+0xc4>)
 800376a:	f7fd f877 	bl	800085c <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	789b      	ldrb	r3, [r3, #2]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	3b01      	subs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	7e1b      	ldrb	r3, [r3, #24]
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	429a      	cmp	r2, r3
 8003798:	d202      	bcs.n	80037a0 <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <QActive_postLIFO_+0x80>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	7f1b      	ldrb	r3, [r3, #28]
 80037b6:	4619      	mov	r1, r3
 80037b8:	4813      	ldr	r0, [pc, #76]	; (8003808 <QActive_postLIFO_+0xc8>)
 80037ba:	f7ff ff22 	bl	8003602 <QPSet_insert>
 80037be:	e019      	b.n	80037f4 <QActive_postLIFO_+0xb4>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7d9b      	ldrb	r3, [r3, #22]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7d9b      	ldrb	r3, [r3, #22]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7d1b      	ldrb	r3, [r3, #20]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d102      	bne.n	80037e2 <QActive_postLIFO_+0xa2>
            me->eQueue.tail = 0U; /* wrap around */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7d9b      	ldrb	r3, [r3, #22]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 80037f4:	2300      	movs	r3, #0
 80037f6:	f383 8811 	msr	BASEPRI, r3
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	08004d0c 	.word	0x08004d0c
 8003808:	20000268 	.word	0x20000268

0800380c <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8003814:	233f      	movs	r3, #63	; 0x3f
 8003816:	b672      	cpsid	i
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <QActive_get_+0x22>
 8003826:	2100      	movs	r1, #0
 8003828:	4823      	ldr	r0, [pc, #140]	; (80038b8 <QActive_get_+0xac>)
 800382a:	f7fd f817 	bl	800085c <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7ddb      	ldrb	r3, [r3, #23]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	3301      	adds	r3, #1
 800383c:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7afa      	ldrb	r2, [r7, #11]
 8003842:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7d1b      	ldrb	r3, [r3, #20]
 8003848:	7afa      	ldrb	r2, [r7, #11]
 800384a:	429a      	cmp	r2, r3
 800384c:	d81a      	bhi.n	8003884 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7d9b      	ldrb	r3, [r3, #22]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7d9b      	ldrb	r3, [r3, #22]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7d1a      	ldrb	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7d9b      	ldrb	r3, [r3, #22]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b2da      	uxtb	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	759a      	strb	r2, [r3, #22]
 8003882:	e010      	b.n	80038a6 <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 800388a:	7afa      	ldrb	r2, [r7, #11]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7d1b      	ldrb	r3, [r3, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	429a      	cmp	r2, r3
 8003894:	d007      	beq.n	80038a6 <QActive_get_+0x9a>
 8003896:	2300      	movs	r3, #0
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f44f 719b 	mov.w	r1, #310	; 0x136
 80038a0:	4805      	ldr	r0, [pc, #20]	; (80038b8 <QActive_get_+0xac>)
 80038a2:	f7fc ffdb 	bl	800085c <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 80038a6:	2300      	movs	r3, #0
 80038a8:	f383 8811 	msr	BASEPRI, r3
    return e;
 80038ac:	68fb      	ldr	r3, [r7, #12]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	08004d0c 	.word	0x08004d0c

080038bc <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	789b      	ldrb	r3, [r3, #2]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d031      	beq.n	8003930 <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 80038cc:	233f      	movs	r3, #63	; 0x3f
 80038ce:	b672      	cpsid	i
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	78db      	ldrb	r3, [r3, #3]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d90a      	bls.n	80038f6 <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 80038ee:	2300      	movs	r3, #0
 80038f0:	f383 8811 	msr	BASEPRI, r3
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 80038f4:	e01c      	b.n	8003930 <QF_gc+0x74>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	789b      	ldrb	r3, [r3, #2]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 80038fe:	2300      	movs	r3, #0
 8003900:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <QF_gc+0x7c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	429a      	cmp	r2, r3
 800390c:	d304      	bcc.n	8003918 <QF_gc+0x5c>
 800390e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003912:	480a      	ldr	r0, [pc, #40]	; (800393c <QF_gc+0x80>)
 8003914:	f7fc ffa2 	bl	800085c <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <QF_gc+0x84>)
 8003924:	4413      	add	r3, r2
 8003926:	2200      	movs	r2, #0
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f80a 	bl	8003944 <QMPool_put>
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000023c 	.word	0x2000023c
 800393c:	08004d14 	.word	0x08004d14
 8003940:	20000200 	.word	0x20000200

08003944 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8a1b      	ldrh	r3, [r3, #16]
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	89db      	ldrh	r3, [r3, #14]
 800395a:	429a      	cmp	r2, r3
 800395c:	d209      	bcs.n	8003972 <QMPool_put+0x2e>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	d304      	bcc.n	8003972 <QMPool_put+0x2e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	429a      	cmp	r2, r3
 8003970:	d903      	bls.n	800397a <QMPool_put+0x36>
 8003972:	21c8      	movs	r1, #200	; 0xc8
 8003974:	480e      	ldr	r0, [pc, #56]	; (80039b0 <QMPool_put+0x6c>)
 8003976:	f7fc ff71 	bl	800085c <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800397a:	233f      	movs	r3, #63	; 0x3f
 800397c:	b672      	cpsid	i
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8a1b      	ldrh	r3, [r3, #16]
 8003996:	b29b      	uxth	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 80039a0:	2300      	movs	r3, #0
 80039a2:	f383 8811 	msr	BASEPRI, r3
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08004d1c 	.word	0x08004d1c

080039b4 <QActive_ctor>:
* @param[in]     initial  pointer to the event to be dispatched to the MSM
*
* @note  Must be called only __once__ before QMSM_INIT().
* @sa QMsm_ctor() and QHsm_ctor()
*/
void QActive_ctor(QActive * const me, QStateHandler initial) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 80039be:	2120      	movs	r1, #32
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fe01 	bl	80035c8 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fb8a 	bl	80030e4 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a03      	ldr	r2, [pc, #12]	; (80039e0 <QActive_ctor+0x2c>)
 80039d4:	601a      	str	r2, [r3, #0]
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	08004d24 	.word	0x08004d24

080039e4 <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <QEQueue_init+0x32>
        me->head = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	7adb      	ldrb	r3, [r3, #11]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	731a      	strb	r2, [r3, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <QF_tickX_>:
*/
void QF_tickX_(uint_fast8_t const tickRate, void const * const sender)
#else
void QF_tickX_(uint_fast8_t const tickRate)
#endif
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4a47      	ldr	r2, [pc, #284]	; (8003b64 <QF_tickX_+0x12c>)
 8003a46:	4413      	add	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8003a4a:	233f      	movs	r3, #63	; 0x3f
 8003a4c:	b672      	cpsid	i
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d123      	bne.n	8003aa8 <QF_tickX_+0x70>

            /* any new time events armed since the last run of QF_tickX_()? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) {
 8003a60:	4a40      	ldr	r2, [pc, #256]	; (8003b64 <QF_tickX_+0x12c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	3308      	adds	r3, #8
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d071      	beq.n	8003b54 <QF_tickX_+0x11c>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <QF_tickX_+0x4c>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	216e      	movs	r1, #110	; 0x6e
 8003a7e:	483a      	ldr	r0, [pc, #232]	; (8003b68 <QF_tickX_+0x130>)
 8003a80:	f7fc feec 	bl	800085c <Q_onAssert>
                prev->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8003a84:	4a37      	ldr	r2, [pc, #220]	; (8003b64 <QF_tickX_+0x12c>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	605a      	str	r2, [r3, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 8003a94:	4a33      	ldr	r2, [pc, #204]	; (8003b64 <QF_tickX_+0x12c>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	899b      	ldrh	r3, [r3, #12]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d111      	bne.n	8003ad6 <QF_tickX_+0x9e>
            prev->next = t->next;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	78db      	ldrb	r3, [r3, #3]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 8003aca:	2300      	movs	r3, #0
 8003acc:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	e038      	b.n	8003b48 <QF_tickX_+0x110>
        }
        else {
            --t->ctr;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	899b      	ldrh	r3, [r3, #12]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	819a      	strh	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	899b      	ldrh	r3, [r3, #12]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d125      	bne.n	8003b3a <QF_tickX_+0x102>
                /* temporary for volatile */
                QActive * const act = (QActive *)t->act;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	89db      	ldrh	r3, [r3, #14]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <QF_tickX_+0xd2>
                    t->ctr = t->interval; /* rearm the time event */
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	89da      	ldrh	r2, [r3, #14]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	819a      	strh	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e00b      	b.n	8003b22 <QF_tickX_+0xea>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	78db      	ldrb	r3, [r3, #3]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8003b22:	2300      	movs	r3, #0
 8003b24:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	6939      	ldr	r1, [r7, #16]
 8003b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	4798      	blx	r3
 8003b38:	e006      	b.n	8003b48 <QF_tickX_+0x110>
            }
            else {
                prev = t;         /* advance to this time event */
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f383 8811 	msr	BASEPRI, r3

                /* prevent merging critical sections, see NOTE1 below  */
                QF_CRIT_EXIT_NOP();
 8003b44:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 8003b48:	233f      	movs	r3, #63	; 0x3f
 8003b4a:	b672      	cpsid	i
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	b662      	cpsie	i
    for (;;) {
 8003b52:	e77f      	b.n	8003a54 <QF_tickX_+0x1c>
                break; /* all currently armed time evts. processed */
 8003b54:	bf00      	nop
    }
    QF_CRIT_X_();
 8003b56:	2300      	movs	r3, #0
 8003b58:	f383 8811 	msr	BASEPRI, r3
}
 8003b5c:	bf00      	nop
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000248 	.word	0x20000248
 8003b68:	08004d38 	.word	0x08004d38

08003b6c <QTimeEvt_ctorX>:
* object **before** arming the Time Event. The ideal place for initializing
* the time event(s) associated with a given AO is the AO's constructor.
*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint_fast8_t tickRate)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
    /*! @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig >= (enum_t)Q_USER_SIG)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	dd02      	ble.n	8003b86 <QTimeEvt_ctorX+0x1a>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d904      	bls.n	8003b90 <QTimeEvt_ctorX+0x24>
 8003b86:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b8a:	480f      	ldr	r0, [pc, #60]	; (8003bc8 <QTimeEvt_ctorX+0x5c>)
 8003b8c:	f7fc fe66 	bl	800085c <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	819a      	strh	r2, [r3, #12]
    me->interval  = 0U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	81da      	strh	r2, [r3, #14]
    me->super.sig = (QSignal)sig;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	70da      	strb	r2, [r3, #3]
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	08004d38 	.word	0x08004d38

08003bcc <QTimeEvt_armX>:
* machine of an active object:
* @include qf_state.c
*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	803b      	strh	r3, [r7, #0]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	78db      	ldrb	r3, [r3, #3]
 8003be0:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	60fb      	str	r3, [r7, #12]
    QTimeEvtCtr const ctr = me->ctr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	899b      	ldrh	r3, [r3, #12]
 8003bec:	817b      	strh	r3, [r7, #10]
#endif

    /*! @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <QTimeEvt_armX+0x44>
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <QTimeEvt_armX+0x44>
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <QTimeEvt_armX+0x44>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d803      	bhi.n	8003c10 <QTimeEvt_armX+0x44>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d804      	bhi.n	8003c1a <QTimeEvt_armX+0x4e>
 8003c10:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003c14:	4818      	ldr	r0, [pc, #96]	; (8003c78 <QTimeEvt_armX+0xac>)
 8003c16:	f7fc fe21 	bl	800085c <Q_onAssert>
#ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
#endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8003c1a:	233f      	movs	r3, #63	; 0x3f
 8003c1c:	b672      	cpsid	i
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	b662      	cpsie	i
    me->ctr = nTicks;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	883a      	ldrh	r2, [r7, #0]
 8003c2e:	81da      	strh	r2, [r3, #14]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in the QF_tickX() function.
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	78db      	ldrb	r3, [r3, #3]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	b25b      	sxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	db16      	blt.n	8003c6a <QTimeEvt_armX+0x9e>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	78db      	ldrb	r3, [r3, #3]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QF_tickX()
        * function.
        */
        me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <QTimeEvt_armX+0xb0>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4413      	add	r3, r2
 8003c54:	3308      	adds	r3, #8
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	605a      	str	r2, [r3, #4]
        QF_timeEvtHead_[tickRate].act = me;
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <QTimeEvt_armX+0xb0>)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	4413      	add	r3, r2
 8003c64:	3308      	adds	r3, #8
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f383 8811 	msr	BASEPRI, r3
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	08004d38 	.word	0x08004d38
 8003c7c:	20000248 	.word	0x20000248

08003c80 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet * const me) {
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    return me->bits != 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <QPSet_remove>:

/*! Remove element n_ from the set @p me, n = 1U..32U */
static inline void QPSet_remove(QPSet * const me, uint_fast8_t const n) {
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
    me->bits &= (QPSetBits)(~((QPSetBits)1 << (n - 1U)));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <QPSet_findMax>:

/*! Find the maximum element in the set @p me
* @note if the set @p me is empty, the function returns zero.
*/
static inline uint_fast8_t QPSet_findMax(QPSet * const me) {
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	fab3 f383 	clz	r3, r3
 8003cde:	f1c3 0320 	rsb	r3, r3, #32
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <QF_init>:
*
* @note QF_init() clears the internal QF variables, so that the framework
* can start correctly even if the startup code fails to clear the
* uninitialized data (as is required by the C Standard).
*/
void QF_init(void) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
    QF_maxPool_      = 0U;
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <QF_init+0x38>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
    QF_subscrList_   = (QSubscrList *)0;
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <QF_init+0x3c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    QF_maxPubSignal_ = 0;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <QF_init+0x40>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

    QF_bzero(&QF_timeEvtHead_[0], sizeof(QF_timeEvtHead_));
 8003d06:	2120      	movs	r1, #32
 8003d08:	480a      	ldr	r0, [pc, #40]	; (8003d34 <QF_init+0x44>)
 8003d0a:	f7ff fc5d 	bl	80035c8 <QF_bzero>
    QF_bzero(&QF_active_[0],      sizeof(QF_active_));
 8003d0e:	2184      	movs	r1, #132	; 0x84
 8003d10:	4809      	ldr	r0, [pc, #36]	; (8003d38 <QF_init+0x48>)
 8003d12:	f7ff fc59 	bl	80035c8 <QF_bzero>
    QF_bzero(&QV_readySet_,       sizeof(QV_readySet_));
 8003d16:	2104      	movs	r1, #4
 8003d18:	4808      	ldr	r0, [pc, #32]	; (8003d3c <QF_init+0x4c>)
 8003d1a:	f7ff fc55 	bl	80035c8 <QF_bzero>

#ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 8003d1e:	f000 f88b 	bl	8003e38 <QV_init>
#endif
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	2000023c 	.word	0x2000023c
 8003d2c:	20000240 	.word	0x20000240
 8003d30:	20000244 	.word	0x20000244
 8003d34:	20000248 	.word	0x20000248
 8003d38:	2000017c 	.word	0x2000017c
 8003d3c:	20000268 	.word	0x20000268

08003d40 <QF_run>:
* QF_run() is typically called from main() after you initialize
* the QF and start at least one active object with QACTIVE_START().
*
* @returns In QV, the QF_run() function does not return.
*/
int_t QF_run(void) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
#ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
#endif

    QF_onStartup(); /* application-specific startup callback */
 8003d46:	f000 f951 	bl	8003fec <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 8003d4a:	233f      	movs	r3, #63	; 0x3f
 8003d4c:	b672      	cpsid	i
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	b662      	cpsie	i
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    for (;;) {
        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QV_readySet_)) {
 8003d54:	481a      	ldr	r0, [pc, #104]	; (8003dc0 <QF_run+0x80>)
 8003d56:	f7ff ff93 	bl	8003c80 <QPSet_notEmpty>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d027      	beq.n	8003db0 <QF_run+0x70>
            uint_fast8_t const p = QPSet_findMax(&QV_readySet_);
 8003d60:	4817      	ldr	r0, [pc, #92]	; (8003dc0 <QF_run+0x80>)
 8003d62:	f7ff ffb4 	bl	8003cce <QPSet_findMax>
 8003d66:	60f8      	str	r0, [r7, #12]
            QActive * const a = QF_active_[p];
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <QF_run+0x84>)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d70:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
#endif /* Q_SPY */

            QF_INT_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 8003d78:	68b8      	ldr	r0, [r7, #8]
 8003d7a:	f7ff fd47 	bl	800380c <QActive_get_>
 8003d7e:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4798      	blx	r3
            QF_gc(e);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fd94 	bl	80038bc <QF_gc>

            QF_INT_DISABLE();
 8003d94:	233f      	movs	r3, #63	; 0x3f
 8003d96:	b672      	cpsid	i
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1d6      	bne.n	8003d54 <QF_run+0x14>
                QPSet_remove(&QV_readySet_, p);
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <QF_run+0x80>)
 8003daa:	f7ff ff7a 	bl	8003ca2 <QPSet_remove>
 8003dae:	e7d1      	b.n	8003d54 <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 8003db0:	f000 f90e 	bl	8003fd0 <QV_onIdle>

            QF_INT_DISABLE();
 8003db4:	233f      	movs	r3, #63	; 0x3f
 8003db6:	b672      	cpsid	i
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	b662      	cpsie	i
        if (QPSet_notEmpty(&QV_readySet_)) {
 8003dbe:	e7c9      	b.n	8003d54 <QF_run+0x14>
 8003dc0:	20000268 	.word	0x20000268
 8003dc4:	2000017c 	.word	0x2000017c

08003dc8 <QActive_start_>:
*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
    (void)stkSize; /* unused parameter */

    /*! @pre The priority must be in range and the stack storage must not
    * be provided, because the QV kernel does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, (0U < prio) && (prio <= QF_MAX_ACTIVE)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <QActive_start_+0x20>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d802      	bhi.n	8003de8 <QActive_start_+0x20>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <QActive_start_+0x2a>
 8003de8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003dec:	4811      	ldr	r0, [pc, #68]	; (8003e34 <QActive_start_+0x6c>)
 8003dee:	f7fc fd35 	bl	800085c <Q_onAssert>
                      && (stkSto == (void *)0));

    QEQueue_init(&me->eQueue, qSto, qLen); /* initialize the built-in queue */
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	330c      	adds	r3, #12
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fdf2 	bl	80039e4 <QEQueue_init>
    me->prio = (uint8_t)prio; /* set the current priority of the AO */
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	771a      	strb	r2, [r3, #28]
    QF_add_(me); /* make QF aware of this active object */
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff fbb1 	bl	8003570 <QF_add_>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <QActive_start_+0x56>
 8003e16:	21e1      	movs	r1, #225	; 0xe1
 8003e18:	4806      	ldr	r0, [pc, #24]	; (8003e34 <QActive_start_+0x6c>)
 8003e1a:	f7fc fd1f 	bl	800085c <Q_onAssert>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	6a39      	ldr	r1, [r7, #32]
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	08004d40 	.word	0x08004d40

08003e38 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] |= (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI;
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <QV_init+0x60>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4915      	ldr	r1, [pc, #84]	; (8003e98 <QV_init+0x60>)
 8003e44:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <QV_init+0x64>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] |= (QF_BASEPRI << 24);
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <QV_init+0x68>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <QV_init+0x68>)
 8003e50:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8003e54:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] |= (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI;
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <QV_init+0x6c>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4912      	ldr	r1, [pc, #72]	; (8003ea4 <QV_init+0x6c>)
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <QV_init+0x70>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <QV_init+0x74>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	607b      	str	r3, [r7, #4]
    do {
        --n;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	009a      	lsls	r2, r3, #2
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <QV_init+0x78>)
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 8003e82:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f2      	bne.n	8003e70 <QV_init+0x38>
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000ed18 	.word	0xe000ed18
 8003e9c:	003f3f3f 	.word	0x003f3f3f
 8003ea0:	e000ed1c 	.word	0xe000ed1c
 8003ea4:	e000ed20 	.word	0xe000ed20
 8003ea8:	3f3f003f 	.word	0x3f3f003f
 8003eac:	e000e004 	.word	0xe000e004
 8003eb0:	e000e400 	.word	0xe000e400

08003eb4 <App_TimeTickHook>:




/* Qpc application hooks ===============================================*/
void App_TimeTickHook(void) {
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
        uint32_t previous;
    } buttons = { 0U, 0U };
    uint32_t current;
    uint32_t tmp;

    QF_TICK_X(0U,(void *)0);
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f7ff fdbc 	bl	8003a38 <QF_tickX_>

    /* Perform the debouncing of buttons. The algorithm for debouncing
    * adapted from the book "Embedded Systems Dictionary" by Jack Ganssle
    * and Michael Barr, page 71.
    */
    current = BspGetButtonState(1U) | BspGetButtonState(2U); /* read SW1/SW2 */
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f000 f8ab 	bl	800401c <BspGetButtonState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461c      	mov	r4, r3
 8003eca:	2002      	movs	r0, #2
 8003ecc:	f000 f8a6 	bl	800401c <BspGetButtonState>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4323      	orrs	r3, r4
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	607b      	str	r3, [r7, #4]
    tmp = buttons.depressed; /* save the debounced depressed buttons */
 8003ed8:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	603b      	str	r3, [r7, #0]
    buttons.depressed |= (buttons.previous & current); /* set depressed */
 8003ede:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	400b      	ands	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	4a32      	ldr	r2, [pc, #200]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003eee:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.previous | current); /* clear released */
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	430b      	orrs	r3, r1
 8003efc:	4013      	ands	r3, r2
 8003efe:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003f00:	6013      	str	r3, [r2, #0]
    buttons.previous   = current; /* update the history */
 8003f02:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6053      	str	r3, [r2, #4]
    tmp ^= buttons.depressed;     /* changed debounced depressed */
 8003f08:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	4053      	eors	r3, r2
 8003f10:	603b      	str	r3, [r7, #0]

    if ((tmp & BspGetButtonState(1U)) != 0U) {  /* debounced SW1 state changed? */
 8003f12:	2001      	movs	r0, #1
 8003f14:	f000 f882 	bl	800401c <BspGetButtonState>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01d      	beq.n	8003f60 <App_TimeTickHook+0xac>
        if ((buttons.depressed & BspGetButtonState(1U)) != 0U) { /* is SW1 depressed? */
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003f26:	681c      	ldr	r4, [r3, #0]
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f000 f877 	bl	800401c <BspGetButtonState>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4023      	ands	r3, r4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <App_TimeTickHook+0x98>
            /* post the "button-pressed" event from ISR */
            static QEvt const buttonPressedEvt = {BUTTON_PRESSED_SIG};
            QACTIVE_POST(AO_TimeBomb, &buttonPressedEvt,0U);
 8003f36:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <App_TimeTickHook+0x108>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <App_TimeTickHook+0x108>)
 8003f40:	6810      	ldr	r0, [r2, #0]
 8003f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f46:	491e      	ldr	r1, [pc, #120]	; (8003fc0 <App_TimeTickHook+0x10c>)
 8003f48:	4798      	blx	r3
 8003f4a:	e009      	b.n	8003f60 <App_TimeTickHook+0xac>
        }
        else { /* the button is released */
            /* post the "button-released" QEvt from ISR */
            static QEvt const buttonReleasedEvt = {BUTTON_RELEASED_SIG};
            QACTIVE_POST(AO_TimeBomb, &buttonReleasedEvt,0U);
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <App_TimeTickHook+0x108>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <App_TimeTickHook+0x108>)
 8003f56:	6810      	ldr	r0, [r2, #0]
 8003f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5c:	4919      	ldr	r1, [pc, #100]	; (8003fc4 <App_TimeTickHook+0x110>)
 8003f5e:	4798      	blx	r3
        }
    }


    if ((tmp & BspGetButtonState(2U)) != 0U) {  /* debounced SW1 state changed? */
 8003f60:	2002      	movs	r0, #2
 8003f62:	f000 f85b 	bl	800401c <BspGetButtonState>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01d      	beq.n	8003fae <App_TimeTickHook+0xfa>
        if ((buttons.depressed & BspGetButtonState(2U)) != 0U) { /* is SW1 depressed? */
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <App_TimeTickHook+0x104>)
 8003f74:	681c      	ldr	r4, [r3, #0]
 8003f76:	2002      	movs	r0, #2
 8003f78:	f000 f850 	bl	800401c <BspGetButtonState>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4023      	ands	r3, r4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <App_TimeTickHook+0xe6>
            /* post the "button-pressed" QEvt from ISR */
            static QEvt const button2PressedEvt = {BUTTON2_PRESSED_SIG};
            QACTIVE_POST(AO_TimeBomb, &button2PressedEvt,0U);
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <App_TimeTickHook+0x108>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <App_TimeTickHook+0x108>)
 8003f8e:	6810      	ldr	r0, [r2, #0]
 8003f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f94:	490c      	ldr	r1, [pc, #48]	; (8003fc8 <App_TimeTickHook+0x114>)
 8003f96:	4798      	blx	r3
            /* post the "button-released" QEvt from ISR */
            static QEvt const button2ReleasedEvt = {BUTTON2_RELEASED_SIG};
            QACTIVE_POST(AO_TimeBomb, &button2ReleasedEvt,0U);
        }
    }
}
 8003f98:	e009      	b.n	8003fae <App_TimeTickHook+0xfa>
            QACTIVE_POST(AO_TimeBomb, &button2ReleasedEvt,0U);
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <App_TimeTickHook+0x108>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4a06      	ldr	r2, [pc, #24]	; (8003fbc <App_TimeTickHook+0x108>)
 8003fa4:	6810      	ldr	r0, [r2, #0]
 8003fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003faa:	4908      	ldr	r1, [pc, #32]	; (8003fcc <App_TimeTickHook+0x118>)
 8003fac:	4798      	blx	r3
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd90      	pop	{r4, r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000026c 	.word	0x2000026c
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	08004d44 	.word	0x08004d44
 8003fc4:	08004d48 	.word	0x08004d48
 8003fc8:	08004d4c 	.word	0x08004d4c
 8003fcc:	08004d50 	.word	0x08004d50

08003fd0 <QV_onIdle>:



void QV_onIdle(void){
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
#ifndef NDEBUG
	QV_CPU_SLEEP();
 8003fd4:	b672      	cpsid	i
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	bf30      	wfi
 8003fde:	b662      	cpsie	i
#else
	QF_INT_ENABLE();
#endif
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <QF_onStartup>:


void QF_onStartup(void){
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <QF_onStartup+0x28>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a08      	ldr	r2, [pc, #32]	; (8004018 <QF_onStartup+0x2c>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc ff7c 	bl	8000efa <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn,QF_AWARE_ISR_CMSIS_PRI+1U,0);
 8004002:	2200      	movs	r2, #0
 8004004:	2104      	movs	r1, #4
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	f7fc ff4c 	bl	8000ea6 <HAL_NVIC_SetPriority>
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000004 	.word	0x20000004
 8004018:	51eb851f 	.word	0x51eb851f

0800401c <BspGetButtonState>:

_Bool BspGetButtonState(uint8_t ButtonNum){
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]

	_Bool ButtonStatus;

	switch(ButtonNum){
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d01d      	beq.n	8004068 <BspGetButtonState+0x4c>
 800402c:	2b03      	cmp	r3, #3
 800402e:	dc26      	bgt.n	800407e <BspGetButtonState+0x62>
 8004030:	2b01      	cmp	r3, #1
 8004032:	d002      	beq.n	800403a <BspGetButtonState+0x1e>
 8004034:	2b02      	cmp	r3, #2
 8004036:	d00c      	beq.n	8004052 <BspGetButtonState+0x36>
 8004038:	e021      	b.n	800407e <BspGetButtonState+0x62>
		case 1:
			ButtonStatus = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 800403a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800403e:	4812      	ldr	r0, [pc, #72]	; (8004088 <BspGetButtonState+0x6c>)
 8004040:	f7fd f91a 	bl	8001278 <HAL_GPIO_ReadPin>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
			break;
 8004050:	e015      	b.n	800407e <BspGetButtonState+0x62>
		case 2:
			ButtonStatus = HAL_GPIO_ReadPin(BUTON1_GPIO_Port,BUTON1_Pin);
 8004052:	2120      	movs	r1, #32
 8004054:	480d      	ldr	r0, [pc, #52]	; (800408c <BspGetButtonState+0x70>)
 8004056:	f7fd f90f 	bl	8001278 <HAL_GPIO_ReadPin>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
			break;
 8004066:	e00a      	b.n	800407e <BspGetButtonState+0x62>
		case 3:
			ButtonStatus = HAL_GPIO_ReadPin(BUTON2_GPIO_Port,BUTON2_Pin);
 8004068:	2110      	movs	r1, #16
 800406a:	4808      	ldr	r0, [pc, #32]	; (800408c <BspGetButtonState+0x70>)
 800406c:	f7fd f904 	bl	8001278 <HAL_GPIO_ReadPin>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
			break;
 800407c:	bf00      	nop
	}

	return ButtonStatus;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40020800 	.word	0x40020800
 800408c:	40020400 	.word	0x40020400

08004090 <BspLed1On>:

void BspLed1On(void){
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8004094:	2201      	movs	r2, #1
 8004096:	2101      	movs	r1, #1
 8004098:	4802      	ldr	r0, [pc, #8]	; (80040a4 <BspLed1On+0x14>)
 800409a:	f7fd f905 	bl	80012a8 <HAL_GPIO_WritePin>
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40020400 	.word	0x40020400

080040a8 <BspLed1Off>:
void BspLed1Off(void){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 80040ac:	2200      	movs	r2, #0
 80040ae:	2101      	movs	r1, #1
 80040b0:	4802      	ldr	r0, [pc, #8]	; (80040bc <BspLed1Off+0x14>)
 80040b2:	f7fd f8f9 	bl	80012a8 <HAL_GPIO_WritePin>
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40020400 	.word	0x40020400

080040c0 <BspLed2On>:

void BspLed2On(void){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 80040c4:	2201      	movs	r2, #1
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	4802      	ldr	r0, [pc, #8]	; (80040d4 <BspLed2On+0x14>)
 80040ca:	f7fd f8ed 	bl	80012a8 <HAL_GPIO_WritePin>
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40020400 	.word	0x40020400

080040d8 <BspLed2Off>:
void BspLed2Off(void){
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <BspLed2Off+0x14>)
 80040e2:	f7fd f8e1 	bl	80012a8 <HAL_GPIO_WritePin>
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40020400 	.word	0x40020400

080040f0 <BspLed3On>:

void BspLed3On(void){
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 80040f4:	2201      	movs	r2, #1
 80040f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040fa:	4802      	ldr	r0, [pc, #8]	; (8004104 <BspLed3On+0x14>)
 80040fc:	f7fd f8d4 	bl	80012a8 <HAL_GPIO_WritePin>
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40020400 	.word	0x40020400

08004108 <BspLed3Off>:
void BspLed3Off(void){
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004112:	4802      	ldr	r0, [pc, #8]	; (800411c <BspLed3Off+0x14>)
 8004114:	f7fd f8c8 	bl	80012a8 <HAL_GPIO_WritePin>
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40020400 	.word	0x40020400

08004120 <TimeBomb_ctor>:
QState TimeBomb_pause(TimeBomb * const me, QEvt const * const e);
QState TimeBomb_boom(TimeBomb * const me, QEvt const * const e);
QState TimeBomb_armed(TimeBomb * const me, QEvt const * const e);
QState TimeBomb_defused(TimeBomb * const me, QEvt const * const e);

void TimeBomb_ctor(TimeBomb * const me) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, (QStateHandler)&TimeBomb_initial);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <TimeBomb_ctor+0x2c>)
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fc41 	bl	80039b4 <QActive_ctor>
    QTimeEvt_ctorX(&me->te,&me->super,TIMEOUT_SIG,0U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f103 0020 	add.w	r0, r3, #32
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	2300      	movs	r3, #0
 800413c:	2208      	movs	r2, #8
 800413e:	f7ff fd15 	bl	8003b6c <QTimeEvt_ctorX>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	08004151 	.word	0x08004151

08004150 <TimeBomb_initial>:



QState TimeBomb_initial(TimeBomb * const me, QEvt const * const e) {
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	return Q_TRAN(TimeBomb_wait4button);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a04      	ldr	r2, [pc, #16]	; (8004170 <TimeBomb_initial+0x20>)
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	2308      	movs	r3, #8
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	080041e1 	.word	0x080041e1

08004174 <TimeBomb_armed>:


QState TimeBomb_armed(TimeBomb * const me, QEvt const * const e){
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	QState Status;

	switch(e->sig){
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	2b06      	cmp	r3, #6
 8004184:	d014      	beq.n	80041b0 <TimeBomb_armed+0x3c>
 8004186:	2b06      	cmp	r3, #6
 8004188:	dc18      	bgt.n	80041bc <TimeBomb_armed+0x48>
 800418a:	2b02      	cmp	r3, #2
 800418c:	d002      	beq.n	8004194 <TimeBomb_armed+0x20>
 800418e:	2b03      	cmp	r3, #3
 8004190:	d009      	beq.n	80041a6 <TimeBomb_armed+0x32>
 8004192:	e013      	b.n	80041bc <TimeBomb_armed+0x48>
		case Q_EXIT_SIG:{
			BspLed1Off();
 8004194:	f7ff ff88 	bl	80040a8 <BspLed1Off>
			BspLed2Off();
 8004198:	f7ff ff9e 	bl	80040d8 <BspLed2Off>
			BspLed3Off();
 800419c:	f7ff ffb4 	bl	8004108 <BspLed3Off>
			Status = Q_HANDLED();
 80041a0:	2303      	movs	r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
			break;
 80041a4:	e010      	b.n	80041c8 <TimeBomb_armed+0x54>
		}
		case Q_INIT_SIG:{
			Status = Q_TRAN(TimeBomb_wait4button);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <TimeBomb_armed+0x60>)
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	2308      	movs	r3, #8
 80041ae:	60fb      	str	r3, [r7, #12]
		}
		case BUTTON2_PRESSED_SIG:{
			Status = Q_TRAN(TimeBomb_defused);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <TimeBomb_armed+0x64>)
 80041b4:	609a      	str	r2, [r3, #8]
 80041b6:	2308      	movs	r3, #8
 80041b8:	60fb      	str	r3, [r7, #12]
			break;
 80041ba:	e005      	b.n	80041c8 <TimeBomb_armed+0x54>
		}
		default:{
			Status = Q_SUPER(QHsm_top);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <TimeBomb_armed+0x68>)
 80041c0:	609a      	str	r2, [r3, #8]
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
			break;
 80041c6:	bf00      	nop
		}
	}

	return Status;
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	080041e1 	.word	0x080041e1
 80041d8:	08004369 	.word	0x08004369
 80041dc:	08003211 	.word	0x08003211

080041e0 <TimeBomb_wait4button>:

QState TimeBomb_wait4button(TimeBomb * const me, QEvt const * const e){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	QState Status;

	switch(e->sig){
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d010      	beq.n	8004214 <TimeBomb_wait4button+0x34>
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	dc17      	bgt.n	8004226 <TimeBomb_wait4button+0x46>
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d002      	beq.n	8004200 <TimeBomb_wait4button+0x20>
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d005      	beq.n	800420a <TimeBomb_wait4button+0x2a>
 80041fe:	e012      	b.n	8004226 <TimeBomb_wait4button+0x46>
		case Q_ENTRY_SIG:{
			BspLed1On();
 8004200:	f7ff ff46 	bl	8004090 <BspLed1On>
			Status = Q_HANDLED();
 8004204:	2303      	movs	r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
			break;
 8004208:	e013      	b.n	8004232 <TimeBomb_wait4button+0x52>
		}
		case Q_EXIT_SIG:{
			BspLed1Off();
 800420a:	f7ff ff4d 	bl	80040a8 <BspLed1Off>
			Status = Q_HANDLED();
 800420e:	2303      	movs	r3, #3
 8004210:	60fb      	str	r3, [r7, #12]
			break;
 8004212:	e00e      	b.n	8004232 <TimeBomb_wait4button+0x52>
		}
		case BUTTON_PRESSED_SIG:{
			me->blink_cntr = 3U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2203      	movs	r2, #3
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
			Status =Q_TRAN(TimeBomb_blink);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a07      	ldr	r2, [pc, #28]	; (800423c <TimeBomb_wait4button+0x5c>)
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	2308      	movs	r3, #8
 8004222:	60fb      	str	r3, [r7, #12]
			break;
 8004224:	e005      	b.n	8004232 <TimeBomb_wait4button+0x52>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = Q_SUPER(TimeBomb_armed);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a05      	ldr	r2, [pc, #20]	; (8004240 <TimeBomb_wait4button+0x60>)
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
			break;
 8004230:	bf00      	nop
		}
	}

	return Status;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	08004245 	.word	0x08004245
 8004240:	08004175 	.word	0x08004175

08004244 <TimeBomb_blink>:


QState TimeBomb_blink(TimeBomb * const me, QEvt const * const e) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]

	QState Status;

	switch(e->sig){
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d017      	beq.n	8004286 <TimeBomb_blink+0x42>
 8004256:	2b08      	cmp	r3, #8
 8004258:	dc1b      	bgt.n	8004292 <TimeBomb_blink+0x4e>
 800425a:	2b01      	cmp	r3, #1
 800425c:	d002      	beq.n	8004264 <TimeBomb_blink+0x20>
 800425e:	2b02      	cmp	r3, #2
 8004260:	d00c      	beq.n	800427c <TimeBomb_blink+0x38>
 8004262:	e016      	b.n	8004292 <TimeBomb_blink+0x4e>
		case Q_ENTRY_SIG:{
			BspLed2On();
 8004264:	f7ff ff2c 	bl	80040c0 <BspLed2On>
			QTimeEvt_armX(&me->te,BSP_TICKS_PER_SEC/2,0U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3320      	adds	r3, #32
 800426c:	2200      	movs	r2, #0
 800426e:	2132      	movs	r1, #50	; 0x32
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fcab 	bl	8003bcc <QTimeEvt_armX>
			Status = Q_HANDLED();
 8004276:	2303      	movs	r3, #3
 8004278:	60fb      	str	r3, [r7, #12]
			break;
 800427a:	e010      	b.n	800429e <TimeBomb_blink+0x5a>
		}
		case Q_EXIT_SIG:{
			BspLed2Off();
 800427c:	f7ff ff2c 	bl	80040d8 <BspLed2Off>
			Status = Q_HANDLED();
 8004280:	2303      	movs	r3, #3
 8004282:	60fb      	str	r3, [r7, #12]
			break;
 8004284:	e00b      	b.n	800429e <TimeBomb_blink+0x5a>
		}
		case TIMEOUT_SIG:{
			Status = Q_TRAN(TimeBomb_pause);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <TimeBomb_blink+0x64>)
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	2308      	movs	r3, #8
 800428e:	60fb      	str	r3, [r7, #12]
			break;
 8004290:	e005      	b.n	800429e <TimeBomb_blink+0x5a>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = Q_SUPER(TimeBomb_armed);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a05      	ldr	r2, [pc, #20]	; (80042ac <TimeBomb_blink+0x68>)
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
			break;
 800429c:	bf00      	nop
		}
	}

	return Status;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	080042b1 	.word	0x080042b1
 80042ac:	08004175 	.word	0x08004175

080042b0 <TimeBomb_pause>:



QState TimeBomb_pause(TimeBomb * const me, QEvt const * const e){
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]


	QState Status;

	switch(e->sig){
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d002      	beq.n	80042c8 <TimeBomb_pause+0x18>
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d00a      	beq.n	80042dc <TimeBomb_pause+0x2c>
 80042c6:	e01e      	b.n	8004306 <TimeBomb_pause+0x56>
		case Q_ENTRY_SIG:{
			QTimeEvt_armX(&me->te,BSP_TICKS_PER_SEC/2,0U);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3320      	adds	r3, #32
 80042cc:	2200      	movs	r2, #0
 80042ce:	2132      	movs	r1, #50	; 0x32
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fc7b 	bl	8003bcc <QTimeEvt_armX>
			Status = Q_HANDLED();
 80042d6:	2303      	movs	r3, #3
 80042d8:	60fb      	str	r3, [r7, #12]
			break;
 80042da:	e01a      	b.n	8004312 <TimeBomb_pause+0x62>
		}
		case TIMEOUT_SIG:{
			--me->blink_cntr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
			if(me->blink_cntr > 0U){
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <TimeBomb_pause+0x4a>
				Status = Q_TRAN(TimeBomb_blink);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a0a      	ldr	r2, [pc, #40]	; (800431c <TimeBomb_pause+0x6c>)
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	2308      	movs	r3, #8
 80042f6:	60fb      	str	r3, [r7, #12]
			}
			else{
				Status = Q_TRAN(TimeBomb_boom);
			}
			break;
 80042f8:	e00b      	b.n	8004312 <TimeBomb_pause+0x62>
				Status = Q_TRAN(TimeBomb_boom);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <TimeBomb_pause+0x70>)
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	2308      	movs	r3, #8
 8004302:	60fb      	str	r3, [r7, #12]
			break;
 8004304:	e005      	b.n	8004312 <TimeBomb_pause+0x62>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = Q_SUPER(TimeBomb_armed);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a06      	ldr	r2, [pc, #24]	; (8004324 <TimeBomb_pause+0x74>)
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
			break;
 8004310:	bf00      	nop
		}
	}

	return Status;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08004245 	.word	0x08004245
 8004320:	08004329 	.word	0x08004329
 8004324:	08004175 	.word	0x08004175

08004328 <TimeBomb_boom>:


QState TimeBomb_boom(TimeBomb * const me, QEvt const * const e){
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]


	QState Status;

	switch(e->sig){
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d108      	bne.n	800434c <TimeBomb_boom+0x24>
		case Q_ENTRY_SIG:{
			BspLed1On();
 800433a:	f7ff fea9 	bl	8004090 <BspLed1On>
			BspLed2On();
 800433e:	f7ff febf 	bl	80040c0 <BspLed2On>
			BspLed3On();
 8004342:	f7ff fed5 	bl	80040f0 <BspLed3On>
			Status = Q_HANDLED();
 8004346:	2303      	movs	r3, #3
 8004348:	60fb      	str	r3, [r7, #12]
			break;
 800434a:	e005      	b.n	8004358 <TimeBomb_boom+0x30>
		}
		default:{
//			Status = IGNORED_STATUS;
			Status = Q_SUPER(TimeBomb_armed);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a05      	ldr	r2, [pc, #20]	; (8004364 <TimeBomb_boom+0x3c>)
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
			break;
 8004356:	bf00      	nop
		}
	}

	return Status;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	08004175 	.word	0x08004175

08004368 <TimeBomb_defused>:


QState TimeBomb_defused(TimeBomb * const me, QEvt const * const e){
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	QState Status;

	switch(e->sig){
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d002      	beq.n	8004380 <TimeBomb_defused+0x18>
 800437a:	2b06      	cmp	r3, #6
 800437c:	d009      	beq.n	8004392 <TimeBomb_defused+0x2a>
 800437e:	e00e      	b.n	800439e <TimeBomb_defused+0x36>
		case Q_ENTRY_SIG:{
			BspLed1Off();
 8004380:	f7ff fe92 	bl	80040a8 <BspLed1Off>
			BspLed2On();
 8004384:	f7ff fe9c 	bl	80040c0 <BspLed2On>
			BspLed3Off();
 8004388:	f7ff febe 	bl	8004108 <BspLed3Off>
			Status = Q_HANDLED();
 800438c:	2303      	movs	r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
			break;
 8004390:	e00b      	b.n	80043aa <TimeBomb_defused+0x42>
		}
		case BUTTON2_PRESSED_SIG:{
			Status = Q_TRAN(TimeBomb_armed);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a07      	ldr	r2, [pc, #28]	; (80043b4 <TimeBomb_defused+0x4c>)
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	2308      	movs	r3, #8
 800439a:	60fb      	str	r3, [r7, #12]
			break;
 800439c:	e005      	b.n	80043aa <TimeBomb_defused+0x42>
		}
		default:{
			Status = Q_SUPER(QHsm_top);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <TimeBomb_defused+0x50>)
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
			break;
 80043a8:	bf00      	nop
		}
	}

	return Status;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	08004175 	.word	0x08004175
 80043b8:	08003211 	.word	0x08003211

080043bc <__errno>:
 80043bc:	4b01      	ldr	r3, [pc, #4]	; (80043c4 <__errno+0x8>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000010 	.word	0x20000010

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	4d0d      	ldr	r5, [pc, #52]	; (8004400 <__libc_init_array+0x38>)
 80043cc:	4c0d      	ldr	r4, [pc, #52]	; (8004404 <__libc_init_array+0x3c>)
 80043ce:	1b64      	subs	r4, r4, r5
 80043d0:	10a4      	asrs	r4, r4, #2
 80043d2:	2600      	movs	r6, #0
 80043d4:	42a6      	cmp	r6, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	4d0b      	ldr	r5, [pc, #44]	; (8004408 <__libc_init_array+0x40>)
 80043da:	4c0c      	ldr	r4, [pc, #48]	; (800440c <__libc_init_array+0x44>)
 80043dc:	f000 fc66 	bl	8004cac <_init>
 80043e0:	1b64      	subs	r4, r4, r5
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	2600      	movs	r6, #0
 80043e6:	42a6      	cmp	r6, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f0:	4798      	blx	r3
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fa:	4798      	blx	r3
 80043fc:	3601      	adds	r6, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	08004dc0 	.word	0x08004dc0
 8004404:	08004dc0 	.word	0x08004dc0
 8004408:	08004dc0 	.word	0x08004dc0
 800440c:	08004dc4 	.word	0x08004dc4

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <setvbuf>:
 8004420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004424:	461d      	mov	r5, r3
 8004426:	4b5d      	ldr	r3, [pc, #372]	; (800459c <setvbuf+0x17c>)
 8004428:	681f      	ldr	r7, [r3, #0]
 800442a:	4604      	mov	r4, r0
 800442c:	460e      	mov	r6, r1
 800442e:	4690      	mov	r8, r2
 8004430:	b127      	cbz	r7, 800443c <setvbuf+0x1c>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	b913      	cbnz	r3, 800443c <setvbuf+0x1c>
 8004436:	4638      	mov	r0, r7
 8004438:	f000 f9d2 	bl	80047e0 <__sinit>
 800443c:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <setvbuf+0x180>)
 800443e:	429c      	cmp	r4, r3
 8004440:	d167      	bne.n	8004512 <setvbuf+0xf2>
 8004442:	687c      	ldr	r4, [r7, #4]
 8004444:	f1b8 0f02 	cmp.w	r8, #2
 8004448:	d006      	beq.n	8004458 <setvbuf+0x38>
 800444a:	f1b8 0f01 	cmp.w	r8, #1
 800444e:	f200 809f 	bhi.w	8004590 <setvbuf+0x170>
 8004452:	2d00      	cmp	r5, #0
 8004454:	f2c0 809c 	blt.w	8004590 <setvbuf+0x170>
 8004458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800445a:	07db      	lsls	r3, r3, #31
 800445c:	d405      	bmi.n	800446a <setvbuf+0x4a>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	0598      	lsls	r0, r3, #22
 8004462:	d402      	bmi.n	800446a <setvbuf+0x4a>
 8004464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004466:	f000 fa59 	bl	800491c <__retarget_lock_acquire_recursive>
 800446a:	4621      	mov	r1, r4
 800446c:	4638      	mov	r0, r7
 800446e:	f000 f923 	bl	80046b8 <_fflush_r>
 8004472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004474:	b141      	cbz	r1, 8004488 <setvbuf+0x68>
 8004476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800447a:	4299      	cmp	r1, r3
 800447c:	d002      	beq.n	8004484 <setvbuf+0x64>
 800447e:	4638      	mov	r0, r7
 8004480:	f000 fa7c 	bl	800497c <_free_r>
 8004484:	2300      	movs	r3, #0
 8004486:	6363      	str	r3, [r4, #52]	; 0x34
 8004488:	2300      	movs	r3, #0
 800448a:	61a3      	str	r3, [r4, #24]
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	89a3      	ldrh	r3, [r4, #12]
 8004490:	0619      	lsls	r1, r3, #24
 8004492:	d503      	bpl.n	800449c <setvbuf+0x7c>
 8004494:	6921      	ldr	r1, [r4, #16]
 8004496:	4638      	mov	r0, r7
 8004498:	f000 fa70 	bl	800497c <_free_r>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	f1b8 0f02 	cmp.w	r8, #2
 80044aa:	81a3      	strh	r3, [r4, #12]
 80044ac:	d06c      	beq.n	8004588 <setvbuf+0x168>
 80044ae:	ab01      	add	r3, sp, #4
 80044b0:	466a      	mov	r2, sp
 80044b2:	4621      	mov	r1, r4
 80044b4:	4638      	mov	r0, r7
 80044b6:	f000 fa33 	bl	8004920 <__swhatbuf_r>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	4318      	orrs	r0, r3
 80044be:	81a0      	strh	r0, [r4, #12]
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	d130      	bne.n	8004526 <setvbuf+0x106>
 80044c4:	9d00      	ldr	r5, [sp, #0]
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 fa50 	bl	800496c <malloc>
 80044cc:	4606      	mov	r6, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d155      	bne.n	800457e <setvbuf+0x15e>
 80044d2:	f8dd 9000 	ldr.w	r9, [sp]
 80044d6:	45a9      	cmp	r9, r5
 80044d8:	d14a      	bne.n	8004570 <setvbuf+0x150>
 80044da:	f04f 35ff 	mov.w	r5, #4294967295
 80044de:	2200      	movs	r2, #0
 80044e0:	60a2      	str	r2, [r4, #8]
 80044e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80044e6:	6022      	str	r2, [r4, #0]
 80044e8:	6122      	str	r2, [r4, #16]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f0:	6162      	str	r2, [r4, #20]
 80044f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	07d2      	lsls	r2, r2, #31
 80044fa:	81a3      	strh	r3, [r4, #12]
 80044fc:	d405      	bmi.n	800450a <setvbuf+0xea>
 80044fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004502:	d102      	bne.n	800450a <setvbuf+0xea>
 8004504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004506:	f000 fa0a 	bl	800491e <__retarget_lock_release_recursive>
 800450a:	4628      	mov	r0, r5
 800450c:	b003      	add	sp, #12
 800450e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <setvbuf+0x184>)
 8004514:	429c      	cmp	r4, r3
 8004516:	d101      	bne.n	800451c <setvbuf+0xfc>
 8004518:	68bc      	ldr	r4, [r7, #8]
 800451a:	e793      	b.n	8004444 <setvbuf+0x24>
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <setvbuf+0x188>)
 800451e:	429c      	cmp	r4, r3
 8004520:	bf08      	it	eq
 8004522:	68fc      	ldreq	r4, [r7, #12]
 8004524:	e78e      	b.n	8004444 <setvbuf+0x24>
 8004526:	2e00      	cmp	r6, #0
 8004528:	d0cd      	beq.n	80044c6 <setvbuf+0xa6>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	b913      	cbnz	r3, 8004534 <setvbuf+0x114>
 800452e:	4638      	mov	r0, r7
 8004530:	f000 f956 	bl	80047e0 <__sinit>
 8004534:	f1b8 0f01 	cmp.w	r8, #1
 8004538:	bf08      	it	eq
 800453a:	89a3      	ldrheq	r3, [r4, #12]
 800453c:	6026      	str	r6, [r4, #0]
 800453e:	bf04      	itt	eq
 8004540:	f043 0301 	orreq.w	r3, r3, #1
 8004544:	81a3      	strheq	r3, [r4, #12]
 8004546:	89a2      	ldrh	r2, [r4, #12]
 8004548:	f012 0308 	ands.w	r3, r2, #8
 800454c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004550:	d01c      	beq.n	800458c <setvbuf+0x16c>
 8004552:	07d3      	lsls	r3, r2, #31
 8004554:	bf41      	itttt	mi
 8004556:	2300      	movmi	r3, #0
 8004558:	426d      	negmi	r5, r5
 800455a:	60a3      	strmi	r3, [r4, #8]
 800455c:	61a5      	strmi	r5, [r4, #24]
 800455e:	bf58      	it	pl
 8004560:	60a5      	strpl	r5, [r4, #8]
 8004562:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004564:	f015 0501 	ands.w	r5, r5, #1
 8004568:	d115      	bne.n	8004596 <setvbuf+0x176>
 800456a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800456e:	e7c8      	b.n	8004502 <setvbuf+0xe2>
 8004570:	4648      	mov	r0, r9
 8004572:	f000 f9fb 	bl	800496c <malloc>
 8004576:	4606      	mov	r6, r0
 8004578:	2800      	cmp	r0, #0
 800457a:	d0ae      	beq.n	80044da <setvbuf+0xba>
 800457c:	464d      	mov	r5, r9
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	e7d0      	b.n	800452a <setvbuf+0x10a>
 8004588:	2500      	movs	r5, #0
 800458a:	e7a8      	b.n	80044de <setvbuf+0xbe>
 800458c:	60a3      	str	r3, [r4, #8]
 800458e:	e7e8      	b.n	8004562 <setvbuf+0x142>
 8004590:	f04f 35ff 	mov.w	r5, #4294967295
 8004594:	e7b9      	b.n	800450a <setvbuf+0xea>
 8004596:	2500      	movs	r5, #0
 8004598:	e7b7      	b.n	800450a <setvbuf+0xea>
 800459a:	bf00      	nop
 800459c:	20000010 	.word	0x20000010
 80045a0:	08004d78 	.word	0x08004d78
 80045a4:	08004d98 	.word	0x08004d98
 80045a8:	08004d58 	.word	0x08004d58

080045ac <__sflush_r>:
 80045ac:	898a      	ldrh	r2, [r1, #12]
 80045ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b2:	4605      	mov	r5, r0
 80045b4:	0710      	lsls	r0, r2, #28
 80045b6:	460c      	mov	r4, r1
 80045b8:	d458      	bmi.n	800466c <__sflush_r+0xc0>
 80045ba:	684b      	ldr	r3, [r1, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	dc05      	bgt.n	80045cc <__sflush_r+0x20>
 80045c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	dc02      	bgt.n	80045cc <__sflush_r+0x20>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	d0f9      	beq.n	80045c6 <__sflush_r+0x1a>
 80045d2:	2300      	movs	r3, #0
 80045d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045d8:	682f      	ldr	r7, [r5, #0]
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	d032      	beq.n	8004644 <__sflush_r+0x98>
 80045de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	075a      	lsls	r2, r3, #29
 80045e4:	d505      	bpl.n	80045f2 <__sflush_r+0x46>
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	1ac0      	subs	r0, r0, r3
 80045ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045ec:	b10b      	cbz	r3, 80045f2 <__sflush_r+0x46>
 80045ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f0:	1ac0      	subs	r0, r0, r3
 80045f2:	2300      	movs	r3, #0
 80045f4:	4602      	mov	r2, r0
 80045f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045f8:	6a21      	ldr	r1, [r4, #32]
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b0      	blx	r6
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	d106      	bne.n	8004612 <__sflush_r+0x66>
 8004604:	6829      	ldr	r1, [r5, #0]
 8004606:	291d      	cmp	r1, #29
 8004608:	d82c      	bhi.n	8004664 <__sflush_r+0xb8>
 800460a:	4a2a      	ldr	r2, [pc, #168]	; (80046b4 <__sflush_r+0x108>)
 800460c:	40ca      	lsrs	r2, r1
 800460e:	07d6      	lsls	r6, r2, #31
 8004610:	d528      	bpl.n	8004664 <__sflush_r+0xb8>
 8004612:	2200      	movs	r2, #0
 8004614:	6062      	str	r2, [r4, #4]
 8004616:	04d9      	lsls	r1, r3, #19
 8004618:	6922      	ldr	r2, [r4, #16]
 800461a:	6022      	str	r2, [r4, #0]
 800461c:	d504      	bpl.n	8004628 <__sflush_r+0x7c>
 800461e:	1c42      	adds	r2, r0, #1
 8004620:	d101      	bne.n	8004626 <__sflush_r+0x7a>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	b903      	cbnz	r3, 8004628 <__sflush_r+0x7c>
 8004626:	6560      	str	r0, [r4, #84]	; 0x54
 8004628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462a:	602f      	str	r7, [r5, #0]
 800462c:	2900      	cmp	r1, #0
 800462e:	d0ca      	beq.n	80045c6 <__sflush_r+0x1a>
 8004630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004634:	4299      	cmp	r1, r3
 8004636:	d002      	beq.n	800463e <__sflush_r+0x92>
 8004638:	4628      	mov	r0, r5
 800463a:	f000 f99f 	bl	800497c <_free_r>
 800463e:	2000      	movs	r0, #0
 8004640:	6360      	str	r0, [r4, #52]	; 0x34
 8004642:	e7c1      	b.n	80045c8 <__sflush_r+0x1c>
 8004644:	6a21      	ldr	r1, [r4, #32]
 8004646:	2301      	movs	r3, #1
 8004648:	4628      	mov	r0, r5
 800464a:	47b0      	blx	r6
 800464c:	1c41      	adds	r1, r0, #1
 800464e:	d1c7      	bne.n	80045e0 <__sflush_r+0x34>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0c4      	beq.n	80045e0 <__sflush_r+0x34>
 8004656:	2b1d      	cmp	r3, #29
 8004658:	d001      	beq.n	800465e <__sflush_r+0xb2>
 800465a:	2b16      	cmp	r3, #22
 800465c:	d101      	bne.n	8004662 <__sflush_r+0xb6>
 800465e:	602f      	str	r7, [r5, #0]
 8004660:	e7b1      	b.n	80045c6 <__sflush_r+0x1a>
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	e7ad      	b.n	80045c8 <__sflush_r+0x1c>
 800466c:	690f      	ldr	r7, [r1, #16]
 800466e:	2f00      	cmp	r7, #0
 8004670:	d0a9      	beq.n	80045c6 <__sflush_r+0x1a>
 8004672:	0793      	lsls	r3, r2, #30
 8004674:	680e      	ldr	r6, [r1, #0]
 8004676:	bf08      	it	eq
 8004678:	694b      	ldreq	r3, [r1, #20]
 800467a:	600f      	str	r7, [r1, #0]
 800467c:	bf18      	it	ne
 800467e:	2300      	movne	r3, #0
 8004680:	eba6 0807 	sub.w	r8, r6, r7
 8004684:	608b      	str	r3, [r1, #8]
 8004686:	f1b8 0f00 	cmp.w	r8, #0
 800468a:	dd9c      	ble.n	80045c6 <__sflush_r+0x1a>
 800468c:	6a21      	ldr	r1, [r4, #32]
 800468e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004690:	4643      	mov	r3, r8
 8004692:	463a      	mov	r2, r7
 8004694:	4628      	mov	r0, r5
 8004696:	47b0      	blx	r6
 8004698:	2800      	cmp	r0, #0
 800469a:	dc06      	bgt.n	80046aa <__sflush_r+0xfe>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	e78e      	b.n	80045c8 <__sflush_r+0x1c>
 80046aa:	4407      	add	r7, r0
 80046ac:	eba8 0800 	sub.w	r8, r8, r0
 80046b0:	e7e9      	b.n	8004686 <__sflush_r+0xda>
 80046b2:	bf00      	nop
 80046b4:	20400001 	.word	0x20400001

080046b8 <_fflush_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	690b      	ldr	r3, [r1, #16]
 80046bc:	4605      	mov	r5, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	b913      	cbnz	r3, 80046c8 <_fflush_r+0x10>
 80046c2:	2500      	movs	r5, #0
 80046c4:	4628      	mov	r0, r5
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	b118      	cbz	r0, 80046d2 <_fflush_r+0x1a>
 80046ca:	6983      	ldr	r3, [r0, #24]
 80046cc:	b90b      	cbnz	r3, 80046d2 <_fflush_r+0x1a>
 80046ce:	f000 f887 	bl	80047e0 <__sinit>
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <_fflush_r+0x6c>)
 80046d4:	429c      	cmp	r4, r3
 80046d6:	d11b      	bne.n	8004710 <_fflush_r+0x58>
 80046d8:	686c      	ldr	r4, [r5, #4]
 80046da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ef      	beq.n	80046c2 <_fflush_r+0xa>
 80046e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046e4:	07d0      	lsls	r0, r2, #31
 80046e6:	d404      	bmi.n	80046f2 <_fflush_r+0x3a>
 80046e8:	0599      	lsls	r1, r3, #22
 80046ea:	d402      	bmi.n	80046f2 <_fflush_r+0x3a>
 80046ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ee:	f000 f915 	bl	800491c <__retarget_lock_acquire_recursive>
 80046f2:	4628      	mov	r0, r5
 80046f4:	4621      	mov	r1, r4
 80046f6:	f7ff ff59 	bl	80045ac <__sflush_r>
 80046fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046fc:	07da      	lsls	r2, r3, #31
 80046fe:	4605      	mov	r5, r0
 8004700:	d4e0      	bmi.n	80046c4 <_fflush_r+0xc>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	059b      	lsls	r3, r3, #22
 8004706:	d4dd      	bmi.n	80046c4 <_fflush_r+0xc>
 8004708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470a:	f000 f908 	bl	800491e <__retarget_lock_release_recursive>
 800470e:	e7d9      	b.n	80046c4 <_fflush_r+0xc>
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <_fflush_r+0x70>)
 8004712:	429c      	cmp	r4, r3
 8004714:	d101      	bne.n	800471a <_fflush_r+0x62>
 8004716:	68ac      	ldr	r4, [r5, #8]
 8004718:	e7df      	b.n	80046da <_fflush_r+0x22>
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <_fflush_r+0x74>)
 800471c:	429c      	cmp	r4, r3
 800471e:	bf08      	it	eq
 8004720:	68ec      	ldreq	r4, [r5, #12]
 8004722:	e7da      	b.n	80046da <_fflush_r+0x22>
 8004724:	08004d78 	.word	0x08004d78
 8004728:	08004d98 	.word	0x08004d98
 800472c:	08004d58 	.word	0x08004d58

08004730 <std>:
 8004730:	2300      	movs	r3, #0
 8004732:	b510      	push	{r4, lr}
 8004734:	4604      	mov	r4, r0
 8004736:	e9c0 3300 	strd	r3, r3, [r0]
 800473a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800473e:	6083      	str	r3, [r0, #8]
 8004740:	8181      	strh	r1, [r0, #12]
 8004742:	6643      	str	r3, [r0, #100]	; 0x64
 8004744:	81c2      	strh	r2, [r0, #14]
 8004746:	6183      	str	r3, [r0, #24]
 8004748:	4619      	mov	r1, r3
 800474a:	2208      	movs	r2, #8
 800474c:	305c      	adds	r0, #92	; 0x5c
 800474e:	f7ff fe5f 	bl	8004410 <memset>
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <std+0x38>)
 8004754:	6263      	str	r3, [r4, #36]	; 0x24
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <std+0x3c>)
 8004758:	62a3      	str	r3, [r4, #40]	; 0x28
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <std+0x40>)
 800475c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <std+0x44>)
 8004760:	6224      	str	r4, [r4, #32]
 8004762:	6323      	str	r3, [r4, #48]	; 0x30
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	08004b5d 	.word	0x08004b5d
 800476c:	08004b7f 	.word	0x08004b7f
 8004770:	08004bb7 	.word	0x08004bb7
 8004774:	08004bdb 	.word	0x08004bdb

08004778 <_cleanup_r>:
 8004778:	4901      	ldr	r1, [pc, #4]	; (8004780 <_cleanup_r+0x8>)
 800477a:	f000 b8af 	b.w	80048dc <_fwalk_reent>
 800477e:	bf00      	nop
 8004780:	080046b9 	.word	0x080046b9

08004784 <__sfmoreglue>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	2268      	movs	r2, #104	; 0x68
 8004788:	1e4d      	subs	r5, r1, #1
 800478a:	4355      	muls	r5, r2
 800478c:	460e      	mov	r6, r1
 800478e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004792:	f000 f95f 	bl	8004a54 <_malloc_r>
 8004796:	4604      	mov	r4, r0
 8004798:	b140      	cbz	r0, 80047ac <__sfmoreglue+0x28>
 800479a:	2100      	movs	r1, #0
 800479c:	e9c0 1600 	strd	r1, r6, [r0]
 80047a0:	300c      	adds	r0, #12
 80047a2:	60a0      	str	r0, [r4, #8]
 80047a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047a8:	f7ff fe32 	bl	8004410 <memset>
 80047ac:	4620      	mov	r0, r4
 80047ae:	bd70      	pop	{r4, r5, r6, pc}

080047b0 <__sfp_lock_acquire>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sfp_lock_acquire+0x8>)
 80047b2:	f000 b8b3 	b.w	800491c <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	20000275 	.word	0x20000275

080047bc <__sfp_lock_release>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sfp_lock_release+0x8>)
 80047be:	f000 b8ae 	b.w	800491e <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	20000275 	.word	0x20000275

080047c8 <__sinit_lock_acquire>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sinit_lock_acquire+0x8>)
 80047ca:	f000 b8a7 	b.w	800491c <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	20000276 	.word	0x20000276

080047d4 <__sinit_lock_release>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sinit_lock_release+0x8>)
 80047d6:	f000 b8a2 	b.w	800491e <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	20000276 	.word	0x20000276

080047e0 <__sinit>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	f7ff fff0 	bl	80047c8 <__sinit_lock_acquire>
 80047e8:	69a3      	ldr	r3, [r4, #24]
 80047ea:	b11b      	cbz	r3, 80047f4 <__sinit+0x14>
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	f7ff bff0 	b.w	80047d4 <__sinit_lock_release>
 80047f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047f8:	6523      	str	r3, [r4, #80]	; 0x50
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <__sinit+0x68>)
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <__sinit+0x6c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	62a2      	str	r2, [r4, #40]	; 0x28
 8004802:	42a3      	cmp	r3, r4
 8004804:	bf04      	itt	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	61a3      	streq	r3, [r4, #24]
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f820 	bl	8004850 <__sfp>
 8004810:	6060      	str	r0, [r4, #4]
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f81c 	bl	8004850 <__sfp>
 8004818:	60a0      	str	r0, [r4, #8]
 800481a:	4620      	mov	r0, r4
 800481c:	f000 f818 	bl	8004850 <__sfp>
 8004820:	2200      	movs	r2, #0
 8004822:	60e0      	str	r0, [r4, #12]
 8004824:	2104      	movs	r1, #4
 8004826:	6860      	ldr	r0, [r4, #4]
 8004828:	f7ff ff82 	bl	8004730 <std>
 800482c:	68a0      	ldr	r0, [r4, #8]
 800482e:	2201      	movs	r2, #1
 8004830:	2109      	movs	r1, #9
 8004832:	f7ff ff7d 	bl	8004730 <std>
 8004836:	68e0      	ldr	r0, [r4, #12]
 8004838:	2202      	movs	r2, #2
 800483a:	2112      	movs	r1, #18
 800483c:	f7ff ff78 	bl	8004730 <std>
 8004840:	2301      	movs	r3, #1
 8004842:	61a3      	str	r3, [r4, #24]
 8004844:	e7d2      	b.n	80047ec <__sinit+0xc>
 8004846:	bf00      	nop
 8004848:	08004d54 	.word	0x08004d54
 800484c:	08004779 	.word	0x08004779

08004850 <__sfp>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	4607      	mov	r7, r0
 8004854:	f7ff ffac 	bl	80047b0 <__sfp_lock_acquire>
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <__sfp+0x84>)
 800485a:	681e      	ldr	r6, [r3, #0]
 800485c:	69b3      	ldr	r3, [r6, #24]
 800485e:	b913      	cbnz	r3, 8004866 <__sfp+0x16>
 8004860:	4630      	mov	r0, r6
 8004862:	f7ff ffbd 	bl	80047e0 <__sinit>
 8004866:	3648      	adds	r6, #72	; 0x48
 8004868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	d503      	bpl.n	8004878 <__sfp+0x28>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	b30b      	cbz	r3, 80048b8 <__sfp+0x68>
 8004874:	6836      	ldr	r6, [r6, #0]
 8004876:	e7f7      	b.n	8004868 <__sfp+0x18>
 8004878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800487c:	b9d5      	cbnz	r5, 80048b4 <__sfp+0x64>
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <__sfp+0x88>)
 8004880:	60e3      	str	r3, [r4, #12]
 8004882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004886:	6665      	str	r5, [r4, #100]	; 0x64
 8004888:	f000 f847 	bl	800491a <__retarget_lock_init_recursive>
 800488c:	f7ff ff96 	bl	80047bc <__sfp_lock_release>
 8004890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	61a5      	str	r5, [r4, #24]
 800489c:	2208      	movs	r2, #8
 800489e:	4629      	mov	r1, r5
 80048a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048a4:	f7ff fdb4 	bl	8004410 <memset>
 80048a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048b0:	4620      	mov	r0, r4
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b4:	3468      	adds	r4, #104	; 0x68
 80048b6:	e7d9      	b.n	800486c <__sfp+0x1c>
 80048b8:	2104      	movs	r1, #4
 80048ba:	4638      	mov	r0, r7
 80048bc:	f7ff ff62 	bl	8004784 <__sfmoreglue>
 80048c0:	4604      	mov	r4, r0
 80048c2:	6030      	str	r0, [r6, #0]
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d1d5      	bne.n	8004874 <__sfp+0x24>
 80048c8:	f7ff ff78 	bl	80047bc <__sfp_lock_release>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	e7ee      	b.n	80048b0 <__sfp+0x60>
 80048d2:	bf00      	nop
 80048d4:	08004d54 	.word	0x08004d54
 80048d8:	ffff0001 	.word	0xffff0001

080048dc <_fwalk_reent>:
 80048dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	4606      	mov	r6, r0
 80048e2:	4688      	mov	r8, r1
 80048e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048e8:	2700      	movs	r7, #0
 80048ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048ee:	f1b9 0901 	subs.w	r9, r9, #1
 80048f2:	d505      	bpl.n	8004900 <_fwalk_reent+0x24>
 80048f4:	6824      	ldr	r4, [r4, #0]
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	d1f7      	bne.n	80048ea <_fwalk_reent+0xe>
 80048fa:	4638      	mov	r0, r7
 80048fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d907      	bls.n	8004916 <_fwalk_reent+0x3a>
 8004906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800490a:	3301      	adds	r3, #1
 800490c:	d003      	beq.n	8004916 <_fwalk_reent+0x3a>
 800490e:	4629      	mov	r1, r5
 8004910:	4630      	mov	r0, r6
 8004912:	47c0      	blx	r8
 8004914:	4307      	orrs	r7, r0
 8004916:	3568      	adds	r5, #104	; 0x68
 8004918:	e7e9      	b.n	80048ee <_fwalk_reent+0x12>

0800491a <__retarget_lock_init_recursive>:
 800491a:	4770      	bx	lr

0800491c <__retarget_lock_acquire_recursive>:
 800491c:	4770      	bx	lr

0800491e <__retarget_lock_release_recursive>:
 800491e:	4770      	bx	lr

08004920 <__swhatbuf_r>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	460e      	mov	r6, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	2900      	cmp	r1, #0
 800492a:	b096      	sub	sp, #88	; 0x58
 800492c:	4614      	mov	r4, r2
 800492e:	461d      	mov	r5, r3
 8004930:	da08      	bge.n	8004944 <__swhatbuf_r+0x24>
 8004932:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	061a      	lsls	r2, r3, #24
 800493c:	d410      	bmi.n	8004960 <__swhatbuf_r+0x40>
 800493e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004942:	e00e      	b.n	8004962 <__swhatbuf_r+0x42>
 8004944:	466a      	mov	r2, sp
 8004946:	f000 f96f 	bl	8004c28 <_fstat_r>
 800494a:	2800      	cmp	r0, #0
 800494c:	dbf1      	blt.n	8004932 <__swhatbuf_r+0x12>
 800494e:	9a01      	ldr	r2, [sp, #4]
 8004950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004958:	425a      	negs	r2, r3
 800495a:	415a      	adcs	r2, r3
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	e7ee      	b.n	800493e <__swhatbuf_r+0x1e>
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	2000      	movs	r0, #0
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	b016      	add	sp, #88	; 0x58
 8004968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800496c <malloc>:
 800496c:	4b02      	ldr	r3, [pc, #8]	; (8004978 <malloc+0xc>)
 800496e:	4601      	mov	r1, r0
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	f000 b86f 	b.w	8004a54 <_malloc_r>
 8004976:	bf00      	nop
 8004978:	20000010 	.word	0x20000010

0800497c <_free_r>:
 800497c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800497e:	2900      	cmp	r1, #0
 8004980:	d044      	beq.n	8004a0c <_free_r+0x90>
 8004982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004986:	9001      	str	r0, [sp, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f1a1 0404 	sub.w	r4, r1, #4
 800498e:	bfb8      	it	lt
 8004990:	18e4      	addlt	r4, r4, r3
 8004992:	f000 f96d 	bl	8004c70 <__malloc_lock>
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <_free_r+0x94>)
 8004998:	9801      	ldr	r0, [sp, #4]
 800499a:	6813      	ldr	r3, [r2, #0]
 800499c:	b933      	cbnz	r3, 80049ac <_free_r+0x30>
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	6014      	str	r4, [r2, #0]
 80049a2:	b003      	add	sp, #12
 80049a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049a8:	f000 b968 	b.w	8004c7c <__malloc_unlock>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d908      	bls.n	80049c2 <_free_r+0x46>
 80049b0:	6825      	ldr	r5, [r4, #0]
 80049b2:	1961      	adds	r1, r4, r5
 80049b4:	428b      	cmp	r3, r1
 80049b6:	bf01      	itttt	eq
 80049b8:	6819      	ldreq	r1, [r3, #0]
 80049ba:	685b      	ldreq	r3, [r3, #4]
 80049bc:	1949      	addeq	r1, r1, r5
 80049be:	6021      	streq	r1, [r4, #0]
 80049c0:	e7ed      	b.n	800499e <_free_r+0x22>
 80049c2:	461a      	mov	r2, r3
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b10b      	cbz	r3, 80049cc <_free_r+0x50>
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d9fa      	bls.n	80049c2 <_free_r+0x46>
 80049cc:	6811      	ldr	r1, [r2, #0]
 80049ce:	1855      	adds	r5, r2, r1
 80049d0:	42a5      	cmp	r5, r4
 80049d2:	d10b      	bne.n	80049ec <_free_r+0x70>
 80049d4:	6824      	ldr	r4, [r4, #0]
 80049d6:	4421      	add	r1, r4
 80049d8:	1854      	adds	r4, r2, r1
 80049da:	42a3      	cmp	r3, r4
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	d1e0      	bne.n	80049a2 <_free_r+0x26>
 80049e0:	681c      	ldr	r4, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	6053      	str	r3, [r2, #4]
 80049e6:	4421      	add	r1, r4
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	e7da      	b.n	80049a2 <_free_r+0x26>
 80049ec:	d902      	bls.n	80049f4 <_free_r+0x78>
 80049ee:	230c      	movs	r3, #12
 80049f0:	6003      	str	r3, [r0, #0]
 80049f2:	e7d6      	b.n	80049a2 <_free_r+0x26>
 80049f4:	6825      	ldr	r5, [r4, #0]
 80049f6:	1961      	adds	r1, r4, r5
 80049f8:	428b      	cmp	r3, r1
 80049fa:	bf04      	itt	eq
 80049fc:	6819      	ldreq	r1, [r3, #0]
 80049fe:	685b      	ldreq	r3, [r3, #4]
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	bf04      	itt	eq
 8004a04:	1949      	addeq	r1, r1, r5
 8004a06:	6021      	streq	r1, [r4, #0]
 8004a08:	6054      	str	r4, [r2, #4]
 8004a0a:	e7ca      	b.n	80049a2 <_free_r+0x26>
 8004a0c:	b003      	add	sp, #12
 8004a0e:	bd30      	pop	{r4, r5, pc}
 8004a10:	20000278 	.word	0x20000278

08004a14 <sbrk_aligned>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	4e0e      	ldr	r6, [pc, #56]	; (8004a50 <sbrk_aligned+0x3c>)
 8004a18:	460c      	mov	r4, r1
 8004a1a:	6831      	ldr	r1, [r6, #0]
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	b911      	cbnz	r1, 8004a26 <sbrk_aligned+0x12>
 8004a20:	f000 f88c 	bl	8004b3c <_sbrk_r>
 8004a24:	6030      	str	r0, [r6, #0]
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f887 	bl	8004b3c <_sbrk_r>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	d00a      	beq.n	8004a48 <sbrk_aligned+0x34>
 8004a32:	1cc4      	adds	r4, r0, #3
 8004a34:	f024 0403 	bic.w	r4, r4, #3
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d007      	beq.n	8004a4c <sbrk_aligned+0x38>
 8004a3c:	1a21      	subs	r1, r4, r0
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 f87c 	bl	8004b3c <_sbrk_r>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d101      	bne.n	8004a4c <sbrk_aligned+0x38>
 8004a48:	f04f 34ff 	mov.w	r4, #4294967295
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	2000027c 	.word	0x2000027c

08004a54 <_malloc_r>:
 8004a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a58:	1ccd      	adds	r5, r1, #3
 8004a5a:	f025 0503 	bic.w	r5, r5, #3
 8004a5e:	3508      	adds	r5, #8
 8004a60:	2d0c      	cmp	r5, #12
 8004a62:	bf38      	it	cc
 8004a64:	250c      	movcc	r5, #12
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	4607      	mov	r7, r0
 8004a6a:	db01      	blt.n	8004a70 <_malloc_r+0x1c>
 8004a6c:	42a9      	cmp	r1, r5
 8004a6e:	d905      	bls.n	8004a7c <_malloc_r+0x28>
 8004a70:	230c      	movs	r3, #12
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	2600      	movs	r6, #0
 8004a76:	4630      	mov	r0, r6
 8004a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a7c:	4e2e      	ldr	r6, [pc, #184]	; (8004b38 <_malloc_r+0xe4>)
 8004a7e:	f000 f8f7 	bl	8004c70 <__malloc_lock>
 8004a82:	6833      	ldr	r3, [r6, #0]
 8004a84:	461c      	mov	r4, r3
 8004a86:	bb34      	cbnz	r4, 8004ad6 <_malloc_r+0x82>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f7ff ffc2 	bl	8004a14 <sbrk_aligned>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	4604      	mov	r4, r0
 8004a94:	d14d      	bne.n	8004b32 <_malloc_r+0xde>
 8004a96:	6834      	ldr	r4, [r6, #0]
 8004a98:	4626      	mov	r6, r4
 8004a9a:	2e00      	cmp	r6, #0
 8004a9c:	d140      	bne.n	8004b20 <_malloc_r+0xcc>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	eb04 0803 	add.w	r8, r4, r3
 8004aa8:	f000 f848 	bl	8004b3c <_sbrk_r>
 8004aac:	4580      	cmp	r8, r0
 8004aae:	d13a      	bne.n	8004b26 <_malloc_r+0xd2>
 8004ab0:	6821      	ldr	r1, [r4, #0]
 8004ab2:	3503      	adds	r5, #3
 8004ab4:	1a6d      	subs	r5, r5, r1
 8004ab6:	f025 0503 	bic.w	r5, r5, #3
 8004aba:	3508      	adds	r5, #8
 8004abc:	2d0c      	cmp	r5, #12
 8004abe:	bf38      	it	cc
 8004ac0:	250c      	movcc	r5, #12
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f7ff ffa5 	bl	8004a14 <sbrk_aligned>
 8004aca:	3001      	adds	r0, #1
 8004acc:	d02b      	beq.n	8004b26 <_malloc_r+0xd2>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	442b      	add	r3, r5
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	e00e      	b.n	8004af4 <_malloc_r+0xa0>
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	1b52      	subs	r2, r2, r5
 8004ada:	d41e      	bmi.n	8004b1a <_malloc_r+0xc6>
 8004adc:	2a0b      	cmp	r2, #11
 8004ade:	d916      	bls.n	8004b0e <_malloc_r+0xba>
 8004ae0:	1961      	adds	r1, r4, r5
 8004ae2:	42a3      	cmp	r3, r4
 8004ae4:	6025      	str	r5, [r4, #0]
 8004ae6:	bf18      	it	ne
 8004ae8:	6059      	strne	r1, [r3, #4]
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	bf08      	it	eq
 8004aee:	6031      	streq	r1, [r6, #0]
 8004af0:	5162      	str	r2, [r4, r5]
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	4638      	mov	r0, r7
 8004af6:	f104 060b 	add.w	r6, r4, #11
 8004afa:	f000 f8bf 	bl	8004c7c <__malloc_unlock>
 8004afe:	f026 0607 	bic.w	r6, r6, #7
 8004b02:	1d23      	adds	r3, r4, #4
 8004b04:	1af2      	subs	r2, r6, r3
 8004b06:	d0b6      	beq.n	8004a76 <_malloc_r+0x22>
 8004b08:	1b9b      	subs	r3, r3, r6
 8004b0a:	50a3      	str	r3, [r4, r2]
 8004b0c:	e7b3      	b.n	8004a76 <_malloc_r+0x22>
 8004b0e:	6862      	ldr	r2, [r4, #4]
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	bf0c      	ite	eq
 8004b14:	6032      	streq	r2, [r6, #0]
 8004b16:	605a      	strne	r2, [r3, #4]
 8004b18:	e7ec      	b.n	8004af4 <_malloc_r+0xa0>
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	6864      	ldr	r4, [r4, #4]
 8004b1e:	e7b2      	b.n	8004a86 <_malloc_r+0x32>
 8004b20:	4634      	mov	r4, r6
 8004b22:	6876      	ldr	r6, [r6, #4]
 8004b24:	e7b9      	b.n	8004a9a <_malloc_r+0x46>
 8004b26:	230c      	movs	r3, #12
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	f000 f8a6 	bl	8004c7c <__malloc_unlock>
 8004b30:	e7a1      	b.n	8004a76 <_malloc_r+0x22>
 8004b32:	6025      	str	r5, [r4, #0]
 8004b34:	e7de      	b.n	8004af4 <_malloc_r+0xa0>
 8004b36:	bf00      	nop
 8004b38:	20000278 	.word	0x20000278

08004b3c <_sbrk_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d06      	ldr	r5, [pc, #24]	; (8004b58 <_sbrk_r+0x1c>)
 8004b40:	2300      	movs	r3, #0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	f7fc f804 	bl	8000b54 <_sbrk>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_sbrk_r+0x1a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_sbrk_r+0x1a>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20000280 	.word	0x20000280

08004b5c <__sread>:
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	460c      	mov	r4, r1
 8004b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b64:	f000 f890 	bl	8004c88 <_read_r>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	bfab      	itete	ge
 8004b6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b70:	181b      	addge	r3, r3, r0
 8004b72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b76:	bfac      	ite	ge
 8004b78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b7a:	81a3      	strhlt	r3, [r4, #12]
 8004b7c:	bd10      	pop	{r4, pc}

08004b7e <__swrite>:
 8004b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b82:	461f      	mov	r7, r3
 8004b84:	898b      	ldrh	r3, [r1, #12]
 8004b86:	05db      	lsls	r3, r3, #23
 8004b88:	4605      	mov	r5, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	4616      	mov	r6, r2
 8004b8e:	d505      	bpl.n	8004b9c <__swrite+0x1e>
 8004b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b94:	2302      	movs	r3, #2
 8004b96:	2200      	movs	r2, #0
 8004b98:	f000 f858 	bl	8004c4c <_lseek_r>
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	4632      	mov	r2, r6
 8004baa:	463b      	mov	r3, r7
 8004bac:	4628      	mov	r0, r5
 8004bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb2:	f000 b817 	b.w	8004be4 <_write_r>

08004bb6 <__sseek>:
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	460c      	mov	r4, r1
 8004bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbe:	f000 f845 	bl	8004c4c <_lseek_r>
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	bf15      	itete	ne
 8004bc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bd2:	81a3      	strheq	r3, [r4, #12]
 8004bd4:	bf18      	it	ne
 8004bd6:	81a3      	strhne	r3, [r4, #12]
 8004bd8:	bd10      	pop	{r4, pc}

08004bda <__sclose>:
 8004bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bde:	f000 b813 	b.w	8004c08 <_close_r>
	...

08004be4 <_write_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d07      	ldr	r5, [pc, #28]	; (8004c04 <_write_r+0x20>)
 8004be8:	4604      	mov	r4, r0
 8004bea:	4608      	mov	r0, r1
 8004bec:	4611      	mov	r1, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	602a      	str	r2, [r5, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7fb fe5e 	bl	80008b4 <_write>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_write_r+0x1e>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_write_r+0x1e>
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	20000280 	.word	0x20000280

08004c08 <_close_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d06      	ldr	r5, [pc, #24]	; (8004c24 <_close_r+0x1c>)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	602b      	str	r3, [r5, #0]
 8004c14:	f7fb fe7a 	bl	800090c <_close>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_close_r+0x1a>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_close_r+0x1a>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20000280 	.word	0x20000280

08004c28 <_fstat_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d07      	ldr	r5, [pc, #28]	; (8004c48 <_fstat_r+0x20>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	f7fb feb9 	bl	80009ac <_fstat>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	d102      	bne.n	8004c44 <_fstat_r+0x1c>
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	b103      	cbz	r3, 8004c44 <_fstat_r+0x1c>
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	20000280 	.word	0x20000280

08004c4c <_lseek_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d07      	ldr	r5, [pc, #28]	; (8004c6c <_lseek_r+0x20>)
 8004c50:	4604      	mov	r4, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	602a      	str	r2, [r5, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fb fe6d 	bl	800093a <_lseek>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_lseek_r+0x1e>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_lseek_r+0x1e>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20000280 	.word	0x20000280

08004c70 <__malloc_lock>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__malloc_lock+0x8>)
 8004c72:	f7ff be53 	b.w	800491c <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	20000274 	.word	0x20000274

08004c7c <__malloc_unlock>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__malloc_unlock+0x8>)
 8004c7e:	f7ff be4e 	b.w	800491e <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	20000274 	.word	0x20000274

08004c88 <_read_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d07      	ldr	r5, [pc, #28]	; (8004ca8 <_read_r+0x20>)
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	4608      	mov	r0, r1
 8004c90:	4611      	mov	r1, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	602a      	str	r2, [r5, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7fb fe60 	bl	800095c <_read>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_read_r+0x1e>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_read_r+0x1e>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	20000280 	.word	0x20000280

08004cac <_init>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr

08004cb8 <_fini>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr
